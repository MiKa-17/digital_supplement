%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Jan 28 17:19:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUAAAUACGUCAAAAUUCGUGCCGAAAUUGCGCGUUCUGCGCGGAACACGUAUACUUUCAGUGUUGACAUAAUACAGUGUGCUUUGCGGUUACCAGCCGCAGGCGGCUGACGAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[91.55286407 260.34960938]
[77.26999664 255.76707458]
[65.75442505 246.15501404]
[58.69275665 232.92123413]
[57.11925888 218.00399780]
[61.26438522 203.58810425]
[70.52103424 191.78494263]
[83.53345490 184.32324219]
[98.39581299 182.29586792]
[112.93133545 185.99974060]
[125.01083374 194.89207458]
[120.09045410 180.72203064]
[115.17008209 166.55200195]
[110.24971008 152.38195801]
[105.32933807 138.21192932]
[91.56663513 137.64878845]
[78.87883759 132.28698730]
[68.88311768 122.80992126]
[62.85351562 110.42553711]
[47.89910126 111.59409332]
[32.94469070 112.76264954]
[17.99027634 113.93120575]
[3.03586245 115.09976196]
[-11.91855049 116.26831818]
[-26.87296486 117.43687439]
[-40.02843094 126.22574615]
[-53.31978989 119.50346375]
[-68.27420044 120.67201996]
[-83.22861481 121.84057617]
[-91.22854614 135.13647461]
[-105.52885437 141.15982056]
[-120.63078308 137.59452820]
[-130.72734070 125.81151581]
[-131.93617249 110.34159851]
[-123.79248047 97.13327026]
[-109.42766571 91.26541138]
[-94.36530304 94.99432373]
[-84.39717102 106.88616180]
[-69.44275665 105.71760559]
[-54.48834610 104.54904938]
[-42.40251923 95.84376526]
[-28.04152107 102.48246002]
[-13.08710766 101.31390381]
[1.86730587 100.14534760]
[16.82171822 98.97679138]
[31.77613258 97.80823517]
[46.73054504 96.63967896]
[61.68495941 95.47112274]
[63.89426804 83.87061310]
[69.61576843 73.21079254]
[78.47537994 64.55299377]
[89.77964783 58.81584167]
[102.56864166 56.67982101]
[101.56674957 41.71331787]
[100.56485748 26.74681473]
[99.56297302 11.78031158]
[98.56108093 -3.18619204]
[97.55918884 -18.15269470]
[96.55730438 -33.11919785]
[93.89182281 -36.77912521]
[92.70249939 -40.70549774]
[92.88541412 -44.38524246]
[94.17578125 -47.39589691]
[96.19334412 -49.45154953]
[96.52752686 -64.44782257]
[96.86170959 -79.44409943]
[97.19589996 -94.44037628]
[97.53008270 -109.43665314]
[97.86426544 -124.43292999]
[92.17230225 -140.40284729]
[105.94241333 -150.29327393]
[119.25826263 -139.79924011]
[112.86054230 -124.09874725]
[112.52635956 -109.10247040]
[112.19217682 -94.10619354]
[111.85798645 -79.10991669]
[111.52380371 -64.11363983]
[111.18962097 -49.11736298]
[111.52380371 -34.12108612]
[112.52569580 -19.15458488]
[113.52758026 -4.18808174]
[114.52947235 10.77842140]
[115.53136444 25.74492455]
[116.53324890 40.71142960]
[117.53514099 55.67793274]
[130.44116211 63.32218170]
[144.04753113 57.00815964]
[157.65390015 50.69413757]
[171.26025391 44.38011551]
[184.86662292 38.06609344]
[198.47297668 31.75207329]
[212.07934570 25.43805313]
[225.68571472 19.12403107]
[239.29206848 12.81000900]
[251.11448669 0.65818822]
[266.06417847 8.65462303]
[262.51873779 25.23371124]
[245.60609436 26.41637230]
[231.99974060 32.73039627]
[218.39337158 39.04441452]
[204.78700256 45.35843658]
[191.18064880 51.67245865]
[177.57427979 57.98648071]
[163.96791077 64.30049896]
[150.36155701 70.61452484]
[136.75518799 76.92854309]
[141.21466064 89.90338135]
[141.33766174 103.31628418]
[137.30441284 115.78747559]
[129.71299744 126.09442902]
[119.49937439 133.29154968]
[124.41974640 147.46159363]
[129.34011841 161.63162231]
[134.26049805 175.80166626]
[139.18086243 189.97169495]
[146.24259949 203.20544434]
[155.27427673 215.18161011]
[164.30595398 227.15779114]
[173.33763123 239.13397217]
[182.36929321 251.11015320]
[191.40097046 263.08633423]
[200.43264771 275.06250000]
[209.46432495 287.03869629]
[218.49598694 299.01486206]
[233.79687500 304.91528320]
[236.06974792 321.15615845]
[222.97647095 331.03027344]
[207.98629761 324.38000488]
[206.51980591 308.04653931]
[197.48814392 296.07037354]
[188.45646667 284.09417725]
[179.42478943 272.11801147]
[170.39311218 260.14181519]
[161.36145020 248.16564941]
[152.32977295 236.18946838]
[143.29809570 224.21328735]
[134.26641846 212.23710632]
[134.92819214 227.22250366]
[129.91250610 241.35908508]
[119.95397186 252.57637024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
11 115 0.0 1 colorpair
12 114 0.16 1 colorpair
13 113 0.0 1 colorpair
14 112 0.0 1 colorpair
15 111 0.0 1 colorpair
19 48 0.0 1 colorpair
20 47 0.0 1 colorpair
21 46 0.0 1 colorpair
22 45 0.0 1 colorpair
23 44 0.0 1 colorpair
24 43 0.16 1 colorpair
25 42 0.16 1 colorpair
27 40 0.16 1 colorpair
28 39 0.0 1 colorpair
29 38 0.0 1 colorpair
53 85 0.0 1 colorpair
54 84 0.0 1 colorpair
55 83 0.0 1 colorpair
56 82 0.0 1 colorpair
57 81 0.0 1 colorpair
58 80 0.0 1 colorpair
59 79 0.0 1 colorpair
64 78 0.16 1 colorpair
65 77 0.0 0.6 colorpair
66 76 0.16 1 colorpair
67 75 0.0 1 colorpair
68 74 0.0 1 colorpair
69 73 0.0 1 colorpair
86 106 0.0 0.6 colorpair
87 105 0.0 1 colorpair
88 104 0.16 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.16 1 colorpair
92 100 0.0 1 colorpair
93 99 0.0 1 colorpair
94 98 0.0 1 colorpair
116 137 0.0 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 0.2 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
114 cmark
43 cmark
25 cmark
40 cmark
78 cmark
65 77 1 gmark
66 cmark
86 106 1 gmark
104 cmark
101 cmark
119 134 2 gmark
124 129 1 gmark

% End Annotations
showpage
end
%%EOF
