%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Jan 28 19:18:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACCUAGUGGAUAUCACCAUUCUUAUCCUCAAACUCAUUGUUGCAGCACUGCAACUGCUUGAUGCUGUUCUGAAAUACCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[-33.06442261 198.95840454]
[-46.22960663 206.14714050]
[-59.39479065 213.33587646]
[-72.55997467 220.52459717]
[-85.72515869 227.71333313]
[-94.12918854 241.11791992]
[-109.00774384 240.42658997]
[-122.17292786 247.61532593]
[-135.33810425 254.80406189]
[-148.50329590 261.99279785]
[-161.66848755 269.18151855]
[-174.83366394 276.37026978]
[-180.71495056 291.29641724]
[-196.09327698 295.86660767]
[-209.17170715 286.57498169]
[-209.91758728 270.54928589]
[-197.75874329 260.08303833]
[-182.02239990 263.20507812]
[-168.85720825 256.01635742]
[-155.69203186 248.82760620]
[-142.52684021 241.63887024]
[-129.36166382 234.45013428]
[-116.19647217 227.26139832]
[-108.73410797 214.37100220]
[-92.91389465 214.54815674]
[-79.74871063 207.35942078]
[-66.58352661 200.17068481]
[-53.41833878 192.98194885]
[-40.25315475 185.79321289]
[-43.93458939 169.14617920]
[-42.46845245 152.14332581]
[-35.97894287 136.34132385]
[-25.05063438 123.18988800]
[-10.67581081 113.89880371]
[5.83561182 109.32662201]
[22.97545815 109.90134430]
[39.17504883 115.58036041]
[52.94876480 125.85344696]
[64.95688629 116.86428833]
[76.96500397 107.87512207]
[75.79692078 97.38476562]
[79.17892456 87.38606262]
[86.47521973 79.75873566]
[96.31411743 75.93669128]
[106.84595490 76.63845825]
[116.09077454 81.73211670]
[128.99098206 74.07806396]
[141.89120483 66.42401886]
[154.79141235 58.76996613]
[167.69163513 51.11591339]
[180.59184265 43.46186447]
[193.35337830 35.57877731]
[201.27558899 19.07370758]
[218.72186279 18.66735840]
[231.04316711 10.11251831]
[237.53936768 -4.94508648]
[253.85691833 -6.57900858]
[263.20971680 6.89159203]
[255.97640991 21.60931587]
[239.59800720 22.43383026]
[227.27670288 30.98867035]
[224.75263977 42.96412659]
[214.36036682 50.16358185]
[201.46299744 48.19757843]
[197.44805908 54.60733032]
[188.24589539 56.36207962]
[175.34567261 64.01612854]
[162.44546509 71.67018127]
[149.54525757 79.32422638]
[136.64503479 86.97827911]
[123.74482727 94.63233185]
[120.35758972 113.34905243]
[104.54240417 123.91641998]
[85.95417023 119.88323975]
[73.94605255 128.87240601]
[61.93793106 137.86157227]
[66.95732117 150.02886963]
[69.04074097 163.01593018]
[68.08039093 176.12506104]
[64.13188171 188.65293884]
[57.41102600 199.92840576]
[48.28205490 209.34835815]
[37.23786926 216.41003418]
[24.87343979 220.73785400]
[11.85374451 222.10337830]
[-1.12198985 220.43736267]
[-13.35783863 215.83326721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[38 76]
[39 75]
[40 74]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 64]
[54 61]
[55 60]
] def

init

% Start Annotations
1 29 0.0 1 colorpair
2 28 0.0 1 colorpair
3 27 0.0 1 colorpair
4 26 0.0 1 colorpair
5 25 0.16 0.6 colorpair
7 23 0.0 0.2 colorpair
8 22 0.0 1 colorpair
9 21 0.0 0.2 colorpair
10 20 0.0 1 colorpair
11 19 0.16 1 colorpair
12 18 0.0 1 colorpair
38 76 0.0 1 colorpair
39 75 0.0 1 colorpair
40 74 0.0 1 colorpair
46 71 0.0 1 colorpair
47 70 0.0 1 colorpair
48 69 0.0 1 colorpair
49 68 0.0 1 colorpair
50 67 0.0 1 colorpair
51 66 0.0 1 colorpair
52 64 0.0 1 colorpair
54 61 0.0 1 colorpair
55 60 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 25 1 gmark
5 cmark
25 cmark
7 23 2 gmark
9 21 2 gmark
19 cmark

% End Annotations
showpage
end
%%EOF
