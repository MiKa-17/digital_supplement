%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Jan 28 21:38:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______________________________________UACUCA__AA__UACGUCAAAAUC__C_GUGCCG_AA_AUUGCGCGU_UCUUCGCCGAACGCGUAUACUUUUU_G_CGUUGACGUAACACAGUGUGCUUUGCGGCUACCAACCGCAAAA___C_G_CUG_A_U_AAAA_A_CCUCG_CUC_____CG_GCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[191.66558838 503.52459717]
[178.18266296 506.35226440]
[164.61308289 508.72955322]
[150.97187805 510.65380859]
[137.27420044 512.12292480]
[123.53520203 513.13531494]
[109.77011108 513.68975830]
[95.99420166 513.78576660]
[82.22273254 513.42309570]
[68.47096252 512.60223389]
[54.75413513 511.32409668]
[41.08745575 509.59005737]
[27.48607254 507.40203857]
[13.96506023 504.76251221]
[0.53940189 501.67434692]
[-12.77602100 498.14099121]
[-25.96644974 494.16638184]
[-39.01726532 489.75491333]
[-51.91400528 484.91143799]
[-64.64237213 479.64138794]
[-77.18826294 473.95053101]
[-89.53777313 467.84524536]
[-101.67720795 461.33224487]
[-113.59311676 454.41879272]
[-125.27229309 447.11248779]
[-136.70179749 439.42150879]
[-147.86894226 431.35430908]
[-158.76138306 422.91986084]
[-169.36701965 414.12750244]
[-179.67411804 404.98699951]
[-189.67124939 395.50848389]
[-199.34730530 385.70242310]
[-208.69160461 375.57971191]
[-217.69377136 365.15158081]
[-226.34381104 354.42956543]
[-234.63217163 343.42556763]
[-242.54963684 332.15176392]
[-250.08744812 320.62063599]
[-257.23724365 308.84503174]
[-263.99108887 296.83792114]
[-270.34152222 284.61267090]
[-276.28152466 272.18280029]
[-281.80444336 259.56210327]
[-286.90420532 246.76454163]
[-291.57513428 233.80432129]
[-295.81210327 220.69580078]
[-299.61035156 207.45350647]
[-302.96569824 194.09213257]
[-305.87445068 180.62646484]
[-308.33334351 167.07142639]
[-310.33966064 153.44206238]
[-311.89120483 139.75346375]
[-312.98620605 126.02080536]
[-313.62350464 112.25930786]
[-313.80236816 98.48422241]
[-313.52258301 84.71081543]
[-312.78448486 70.95435333]
[-311.58889771 57.23008728]
[-309.93713379 43.55322266]
[-307.83102417 29.93891907]
[-305.27288818 16.40226746]
[-302.26556396 2.95826912]
[-298.81243896 -10.37817383]
[-294.91726685 -23.59228134]
[-290.58438110 -36.66940689]
[-285.81863403 -49.59505844]
[-280.62524414 -62.35490799]
[-275.01000977 -74.93481445]
[-268.97912598 -87.32083893]
[-262.53930664 -99.49924469]
[-255.69766235 -111.45654297]
[-248.46177673 -123.17947388]
[-240.83970642 -134.65504456]
[-232.83984375 -145.87054443]
[-224.47109985 -156.81353760]
[-215.74273682 -167.47189331]
[-206.66442871 -177.83380127]
[-197.24621582 -187.88778687]
[-187.49856567 -197.62268066]
[-177.43228149 -207.02772522]
[-167.05850220 -216.09246826]
[-156.38873291 -224.80688477]
[-145.43479919 -233.16130066]
[-134.20883179 -241.14646912]
[-122.72329712 -248.75352478]
[-110.99091339 -255.97406006]
[-99.02467346 -262.80004883]
[-86.83784485 -269.22393799]
[-74.44394684 -275.23858643]
[-61.85670090 -280.83737183]
[-49.09006882 -286.01403809]
[-36.15819168 -290.76287842]
[-23.07540512 -295.07864380]
[-9.85621262 -298.95651245]
[3.48473811 -302.39221191]
[16.93265915 -305.38192749]
[30.47264671 -307.92233276]
[44.08969498 -310.01065063]
[57.76871109 -311.64453125]
[71.49452972 -312.82214355]
[85.25194550 -313.54223633]
[99.02570343 -313.80398560]
[112.80054474 -313.60711670]
[126.56119537 -312.95181274]
[140.29240417 -311.83880615]
[153.97897339 -310.26937866]
[167.60569763 -308.24520874]
[181.15750122 -305.76858521]
[194.61935425 -302.84225464]
[207.97633362 -299.46939087]
[221.21363831 -295.65380859]
[234.31660461 -291.39971924]
[247.27069092 -286.71182251]
[260.06155396 -281.59530640]
[272.67504883 -276.05587769]
[285.09713745 -270.09963989]
[297.31405640 -263.73321533]
[309.31231689 -256.96365356]
[321.07858276 -249.79844666]
[332.59979248 -242.24555969]
[343.86325073 -234.31333923]
[354.85638428 -226.01060486]
[365.56707764 -217.34652710]
[375.98342896 -208.33073425]
[386.09390259 -198.97320557]
[395.88726807 -189.28430176]
[405.35272217 -179.27479553]
[414.47973633 -168.95574951]
[423.25817871 -158.33860779]
[431.67837524 -147.43515015]
[439.73095703 -136.25744629]
[447.40698242 -124.81788635]
[454.69796753 -113.12915802]
[461.59585571 -101.20420837]
[468.09295654 -89.05625916]
[474.18209839 -76.69877625]
[479.85650635 -64.14545441]
[485.10992432 -51.41019821]
[489.93649292 -38.50713348]
[504.15994263 -43.27085876]
[518.38342285 -48.03458786]
[532.60687256 -52.79831314]
[538.16510010 -67.41475677]
[551.84332275 -74.99369049]
[567.18310547 -71.95656586]
[576.94152832 -59.73742294]
[576.51092529 -44.10577011]
[566.09460449 -32.44239426]
[550.61083984 -30.25438309]
[537.37060547 -38.57485199]
[523.14715576 -33.81112289]
[508.92367554 -29.04739761]
[494.70022583 -24.28367043]
[500.10574341 -5.59394026]
[504.62683105 13.32921219]
[508.25344849 32.44395447]
[510.97760010 51.70803452]
[512.79321289 71.07887268]
[513.69641113 90.51363373]
[513.68505859 109.96936798]
[512.75921631 129.40306091]
[510.92092896 148.77177429]
[508.17428589 168.03265381]
[504.52536011 187.14315796]
[499.98217773 206.06101990]
[494.55484009 224.74441528]
[488.25531006 243.15206909]
[481.09750366 261.24325562]
[473.09725952 278.97802734]
[464.27224731 296.31713867]
[454.64199829 313.22229004]
[444.22778320 329.65609741]
[433.05264282 345.58224487]
[421.14123535 360.96551514]
[408.51995850 375.77188110]
[395.21664429 389.96865845]
[381.26077271 403.52441406]
[366.68313599 416.40924072]
[351.51596069 428.59460449]
[335.79281616 440.05358887]
[319.54843140 450.76086426]
[327.27508545 463.61770630]
[335.00173950 476.47457886]
[342.72836304 489.33145142]
[349.83227539 495.07611084]
[350.47286987 502.44012451]
[365.83129883 502.32141113]
[379.18353271 509.91177368]
[386.93786621 523.16943359]
[387.00842285 538.52819824]
[379.37625122 551.85656738]
[366.09432983 559.56927490]
[350.73547363 559.59173584]
[337.43109131 551.91778564]
[329.76000977 538.61181641]
[329.78573608 523.25292969]
[337.50131226 509.97265625]
[329.87152100 497.05807495]
[322.14486694 484.20123291]
[314.41821289 471.34436035]
[306.69158936 458.48748779]
[294.64404297 465.16897583]
[282.38079834 471.44573975]
[269.91540527 477.31079102]
[257.26168823 482.75769043]
[244.43368530 487.78036499]
[231.44560242 492.37322998]
[218.31182861 496.53121948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[139 153]
[140 152]
[141 151]
[142 150]
[181 201]
[182 200]
[183 199]
[184 198]
[186 197]
] def

init

% Start Annotations
139 153 0.16 1 colorpair
140 152 0.0 0.6 colorpair
141 151 0.16 1 colorpair
142 150 0.16 1 colorpair
181 201 0.0 1 colorpair
182 200 0.32 1 colorpair
183 199 0.16 1 colorpair
184 198 0.0 0.6 colorpair
186 197 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
153 cmark
140 152 1 gmark
151 cmark
150 cmark
182 cmark
200 cmark
183 cmark
184 198 1 gmark

% End Annotations
showpage
end
%%EOF
