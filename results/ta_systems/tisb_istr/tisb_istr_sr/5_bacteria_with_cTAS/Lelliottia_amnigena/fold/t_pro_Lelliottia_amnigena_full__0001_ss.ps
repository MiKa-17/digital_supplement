%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCGCCGUGGAUAUGGUGAUACUUAUCCUCAGACUCAUUGUUGCGGUACUGCAACUGCUUGAUGCCGUCCUGAAAUACCUGCGG\
) } def
/len { sequence length } bind def

/coor [
[117.54798126 264.87139893]
[124.57035828 251.45628357]
[135.56982422 241.05001831]
[129.33860779 227.40553284]
[123.10737610 213.76106262]
[116.87615204 200.11657715]
[110.64492798 186.47210693]
[98.31973267 178.10916138]
[99.62503052 162.34188843]
[93.39380646 148.69740295]
[87.16257477 135.05293274]
[74.40103912 127.16983795]
[59.41059494 127.70522308]
[44.42015076 128.24061584]
[29.42971039 128.77600098]
[14.43926716 129.31138611]
[0.92405027 137.53631592]
[-12.07127476 130.25820923]
[-22.65580940 141.99461365]
[-38.44318008 142.72566223]
[-50.06702423 132.01762390]
[-50.63111496 116.22341156]
[-39.80079269 104.71343231]
[-24.00149155 104.31636047]
[-12.60665989 115.26776886]
[-0.16365936 107.08113098]
[13.90388203 114.32093811]
[28.89432526 113.78555298]
[43.88476562 113.25016785]
[58.87520981 112.71478271]
[73.86565399 112.17939758]
[70.47782135 101.87027740]
[71.11201477 90.76007080]
[75.88164520 80.40019226]
[84.30908966 72.31032562]
[80.08310699 57.91792679]
[75.85711670 43.52553558]
[62.52223206 34.60586929]
[61.32537842 18.60752487]
[73.18467712 7.80305624]
[89.00269318 10.48073101]
[96.64519501 24.58646393]
[90.24951172 39.29954529]
[94.47550201 53.69194031]
[98.70148468 68.08433533]
[113.41326904 71.01068878]
[122.82530212 59.33106613]
[132.23733521 47.65144348]
[141.64936829 35.97182083]
[151.06140137 24.29219818]
[149.12301636 8.60723019]
[158.90905762 -3.80280352]
[174.61364746 -5.57525015]
[186.91952515 4.34145164]
[188.52583313 20.06389809]
[178.47958374 32.26424026]
[162.74102783 33.70423126]
[153.32899475 45.38385391]
[143.91696167 57.06348038]
[134.50492859 68.74310303]
[125.09288788 80.42272186]
[130.88610840 96.55096436]
[127.43921661 112.92214203]
[116.19474792 124.75453949]
[100.80706024 128.82170105]
[107.03828430 142.46618652]
[113.26950836 156.11065674]
[126.04040527 165.44955444]
[124.28940582 180.24087524]
[130.52062988 193.88536072]
[136.75186157 207.52983093]
[142.98307800 221.17431641]
[149.21430969 234.81880188]
[164.28196716 233.32060242]
[179.01908875 236.79847717]
[191.82713318 244.87515259]
[201.31677246 256.67453003]
[206.45861816 270.91674805]
[206.69494629 286.05685425]
[202.00012207 300.45257568]
[192.88337708 312.54241943]
[180.33366394 321.01489258]
[165.71224976 324.95104980]
[150.60517883 323.92385864]
[136.65115356 318.04476929]
[125.36377716 307.95150757]
[117.96744537 294.73889160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[9 67]
[10 66]
[11 65]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[35 45]
[36 44]
[37 43]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
] def

init

% Start Annotations
3 73 0.0 1 colorpair
4 72 0.0 0.6 colorpair
5 71 0.0 1 colorpair
6 70 0.0 1 colorpair
7 69 0.0 1 colorpair
9 67 0.0 1 colorpair
10 66 0.0 1 colorpair
11 65 0.0 1 colorpair
12 31 0.0 1 colorpair
13 30 0.0 1 colorpair
14 29 0.0 1 colorpair
15 28 0.0 1 colorpair
16 27 0.0 0.6 colorpair
18 25 0.16 1 colorpair
35 45 0.16 1 colorpair
36 44 0.0 1 colorpair
37 43 0.0 1 colorpair
46 61 0.0 1 colorpair
47 60 0.0 1 colorpair
48 59 0.0 1 colorpair
49 58 0.0 1 colorpair
50 57 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 72 1 gmark
16 27 1 gmark
25 cmark
35 cmark

% End Annotations
showpage
end
%%EOF
