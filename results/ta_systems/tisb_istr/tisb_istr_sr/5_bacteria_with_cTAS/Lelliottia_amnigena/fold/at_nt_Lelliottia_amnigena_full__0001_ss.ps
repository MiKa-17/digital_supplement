%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCAUUACGUCAAAAUCCGUGCCUGAAAUUGCGCGUUCGUCGCCGAUCGCGUAUACUUUGUGCGUUGACGUAACACAGUGUGUUCUGCGGAAACCAACCGCAUAACCCUGAAAAA_ACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[112.00746918 134.00837708]
[103.40605927 135.38233948]
[94.85331726 134.64572144]
[86.85204315 131.90281677]
[79.85790253 127.37406921]
[74.25348663 121.37957764]
[70.32753754 114.31716156]
[68.26037598 106.63619995]
[68.11624908 98.80927277]
[53.67830658 94.74163055]
[39.24036026 90.67398834]
[24.80241394 86.60634613]
[10.36446762 82.53870392]
[-4.07347822 78.47106171]
[-18.51142502 74.40341949]
[-32.94937134 70.33577728]
[-37.28313446 71.61891937]
[-41.37443161 71.42651367]
[-44.77655411 70.02694702]
[-47.18114853 67.80921173]
[-48.44614410 65.22518158]
[-62.47138977 59.90610886]
[-76.49663544 54.58703613]
[-90.52187347 49.26796341]
[-104.54711914 43.94889069]
[-114.03260040 54.62658691]
[-126.57286835 61.39970398]
[-140.64414978 63.46852112]
[-154.54458618 60.60353470]
[-166.60006714 53.17070389]
[-175.36582947 42.08486938]
[-179.79963684 28.69716644]
[-179.38560486 14.63038826]
[-193.29061890 9.00450039]
[-207.19563293 3.37861204]
[-221.10064697 -2.24727607]
[-235.00566101 -7.87316418]
[-248.91067505 -13.49905205]
[-264.60537720 -11.50244999]
[-273.50164795 -23.44841385]
[-287.40664673 -29.07430267]
[-301.31164551 -34.70019150]
[-317.46844482 -31.89118195]
[-327.77038574 -44.65057373]
[-321.61972046 -59.85259628]
[-305.34375000 -61.85871506]
[-295.68576050 -48.60520172]
[-281.78076172 -42.97931671]
[-267.87573242 -37.35342789]
[-253.17561340 -39.75242996]
[-243.28479004 -27.40406418]
[-229.37977600 -21.77817726]
[-215.47476196 -16.15228844]
[-201.56974792 -10.52640057]
[-187.66473389 -4.90051270]
[-173.75971985 0.72537518]
[-162.85290527 -10.72192669]
[-148.35948181 -17.13730621]
[-132.47578430 -17.51640511]
[-117.62110901 -11.77204990]
[-106.06935883 -0.75200421]
[-99.60085297 13.88601208]
[-99.22805023 29.92364693]
[-85.20280457 35.24271774]
[-71.17755890 40.56179428]
[-57.15231705 45.88086700]
[-43.12707138 51.19993973]
[-28.88172913 55.89783096]
[-14.44378185 59.96547318]
[-0.00583619 64.03311157]
[14.43210983 68.10075378]
[28.87005615 72.16839600]
[43.30800247 76.23603821]
[57.74594879 80.30368042]
[72.18389130 84.37132263]
[84.57070923 70.59639740]
[103.18404388 65.64129639]
[122.18041229 71.89142609]
[135.13859558 88.07839203]
[148.34306335 80.96207428]
[161.54753113 73.84574890]
[167.67607117 66.96584320]
[175.12115479 66.72176361]
[181.39935303 59.97814178]
[188.84800720 59.89767075]
[202.35231018 53.36821747]
[215.85661316 46.83876038]
[224.91270447 33.86579895]
[239.73892212 35.29144287]
[253.24322510 28.76198769]
[266.74752808 22.23253250]
[280.25183105 15.70307732]
[293.75613403 9.17362213]
[297.41537476 -6.02979755]
[310.02175903 -15.28255367]
[325.62289429 -14.21577644]
[336.85244751 -3.33316684]
[338.40814209 12.22684002]
[329.55545044 25.11728477]
[314.47430420 29.25169373]
[300.28558350 22.67792511]
[286.78128052 29.20738029]
[273.27697754 35.73683548]
[259.77267456 42.26629257]
[246.26838684 48.79574585]
[238.17820740 61.30168152]
[222.38606262 60.34306335]
[208.88175964 66.87252045]
[195.37745667 73.40197754]
[181.94569397 80.07937622]
[168.66384888 87.05022430]
[155.45938110 94.16654205]
[142.25491333 101.28285980]
[139.14698792 115.95735168]
[148.33277893 127.81573486]
[157.51856995 139.67411804]
[166.70436096 151.53250122]
[175.89015198 163.39088440]
[183.68211365 168.30793762]
[185.14405823 175.61216736]
[194.06713867 187.66946411]
[202.99021912 199.72677612]
[211.91329956 211.78408813]
[220.83638000 223.84140015]
[229.75944519 235.89871216]
[238.68252563 247.95600891]
[253.92947388 253.99446106]
[256.05548096 270.25521851]
[242.87351990 280.01058960]
[227.94403076 273.22512817]
[226.62522888 256.87908936]
[217.70214844 244.82177734]
[208.77906799 232.76448059]
[199.85598755 220.70716858]
[190.93290710 208.64985657]
[182.00982666 196.59254456]
[173.08676147 184.53524780]
[164.03176880 172.57667542]
[154.84597778 160.71829224]
[145.66018677 148.85990906]
[136.47439575 137.00152588]
[127.28860474 125.14314270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
[42 47]
[79 113]
[80 112]
[81 111]
[83 110]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[114 142]
[115 141]
[116 140]
[117 139]
[118 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
9 75 0.0 0.6 colorpair
10 74 0.0 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.0 1 colorpair
23 65 0.0 1 colorpair
24 64 0.0 1 colorpair
25 63 0.0 0.6 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
42 47 0.0 1 colorpair
79 113 0.0 1 colorpair
80 112 0.0 1 colorpair
81 111 0.0 1 colorpair
83 110 0.0 1 colorpair
85 109 0.0 1 colorpair
86 108 0.0 1 colorpair
87 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
114 142 0.0 1 colorpair
115 141 0.0 1 colorpair
116 140 0.0 1 colorpair
117 139 0.0 1 colorpair
118 138 0.0 1 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.16 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 75 1 gmark
25 63 1 gmark
134 cmark

% End Annotations
showpage
end
%%EOF
