%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCGCCGUGGAUAUGGUGAUACUAAUCCUCAAACUCAUUGUUGCGGUACUGCAACUGCUUGAUGCCGUCCUGAAAUACCUGCGG\
) } def
/len { sequence length } bind def

/coor [
[80.75311279 108.89572144]
[65.79132843 109.96581268]
[50.82954407 111.03589630]
[35.86776352 112.10598755]
[20.90598297 113.17607117]
[14.43121243 125.48929596]
[2.77783990 132.88633728]
[-10.90242290 133.49514771]
[-22.97309494 127.26250458]
[-30.27956772 115.93939209]
[-43.79478455 124.16432190]
[-56.79011154 116.88621521]
[-71.78055573 117.42160034]
[-86.77099609 117.95698547]
[-101.76143646 118.49237061]
[-116.75187683 119.02775574]
[-130.26708984 127.25268555]
[-143.26242065 119.97458649]
[-153.84695435 131.71098328]
[-169.63432312 132.44203186]
[-181.25816345 121.73400879]
[-181.82226562 105.93978882]
[-170.99194336 94.42980957]
[-155.19264221 94.03273010]
[-143.79780579 104.98413849]
[-131.35481262 96.79750824]
[-117.28726196 104.03731537]
[-102.29682159 103.50193024]
[-87.30638123 102.96654510]
[-72.31594086 102.43115997]
[-57.32549667 101.89577484]
[-44.88249588 93.70913696]
[-30.81495285 100.94895172]
[-22.18401718 87.10885620]
[-6.88163567 81.00316620]
[9.22515106 85.18280029]
[19.83589363 98.21429443]
[34.79767609 97.14420319]
[49.75945663 96.07411957]
[64.72123718 95.00402832]
[79.68302155 93.93394470]
[86.88134003 83.34234619]
[98.86511230 78.82717133]
[111.26287079 82.03546906]
[119.55213928 91.79691315]
[134.54257202 91.26152802]
[149.53302002 90.72614288]
[164.51152039 89.92327881]
[179.47329712 88.85318756]
[194.43508911 87.78310394]
[209.39686584 86.71301270]
[217.65069580 73.70607758]
[231.81521606 68.11860657]
[246.38151550 71.89839935]
[255.81608582 83.39304352]
[270.77786255 82.32295990]
[285.69192505 80.71952820]
[300.53924561 78.58480835]
[313.09780884 68.96229553]
[326.79666138 74.80956268]
[341.64398193 72.67483521]
[352.37060547 60.74508286]
[368.37646484 61.83721542]
[377.38317871 75.11344147]
[372.48162842 90.38938141]
[357.43182373 95.94663239]
[343.77871704 87.52215576]
[328.93139648 89.65688324]
[317.43478394 99.12670898]
[302.67395020 93.43212891]
[287.82662964 95.56685638]
[284.18414307 98.97100830]
[278.29492188 99.96986389]
[271.84796143 97.28474426]
[256.88616943 98.35482788]
[249.18348694 111.07515717]
[235.30337524 116.88948059]
[220.48785400 113.37470245]
[210.46694946 101.67479706]
[195.50517273 102.74488068]
[180.54339600 103.81497192]
[165.58160400 104.88505554]
[158.98590088 108.58660889]
[150.06840515 105.71658325]
[135.07795715 106.25196838]
[120.08752441 106.78735352]
[109.23572540 119.08607483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[10 33]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[45 86]
[46 85]
[47 84]
[48 82]
[49 81]
[50 80]
[51 79]
[55 75]
[56 74]
[57 71]
[58 70]
[60 68]
[61 67]
] def

init

% Start Annotations
1 41 0.0 1 colorpair
2 40 0.0 1 colorpair
3 39 0.0 1 colorpair
4 38 0.16 1 colorpair
5 37 0.0 1 colorpair
10 33 0.0 1 colorpair
12 31 0.0 1 colorpair
13 30 0.0 1 colorpair
14 29 0.0 1 colorpair
15 28 0.0 1 colorpair
16 27 0.0 0.6 colorpair
18 25 0.16 1 colorpair
45 86 0.0 1 colorpair
46 85 0.0 1 colorpair
47 84 0.0 1 colorpair
48 82 0.0 1 colorpair
49 81 0.0 1 colorpair
50 80 0.0 1 colorpair
51 79 0.0 1 colorpair
55 75 0.0 1 colorpair
56 74 0.0 1 colorpair
57 71 0.0 1 colorpair
58 70 0.0 1 colorpair
60 68 0.0 1 colorpair
61 67 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 cmark
16 27 1 gmark
25 cmark

% End Annotations
showpage
end
%%EOF
