%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCAAAACGUCAAAAUCCGUGCCUGAAAUUGCGCGUUCGUCGCCGAUCGCGUAUACUUUGUGCGUUGACGUAACACAGUGUGUUCUGCGGAAACCAACCGCAAAACCCUGAAAAA_ACCUCGCUCCGGCGAGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[100.90345764 138.62521362]
[92.86295319 137.97085571]
[85.13360596 135.66108704]
[78.05237579 131.79661560]
[71.92800140 126.54592133]
[67.02746582 120.13790131]
[63.56443024 112.85193634]
[61.68986511 105.00566864]
[61.48550034 96.94116974]
[47.04755402 92.87352753]
[32.60960770 88.80588531]
[18.17166138 84.73824310]
[3.73371601 80.67060089]
[-10.70423031 76.60295868]
[-25.14217567 72.53531647]
[-39.58012390 68.46767426]
[-43.91388702 69.75081635]
[-48.00518417 69.55841064]
[-51.40730286 68.15885162]
[-53.81190109 65.94110870]
[-55.07689667 63.35708237]
[-69.10214233 58.03800964]
[-83.12738800 52.71893692]
[-97.15262604 47.39986420]
[-111.17787170 42.08079147]
[-120.66335297 52.75848770]
[-133.20362854 59.53160477]
[-147.27490234 61.60042191]
[-161.17533875 58.73543549]
[-173.23081970 51.30260468]
[-181.99658203 40.21677017]
[-186.43038940 26.82906723]
[-186.01635742 12.76228809]
[-199.92137146 7.13640022]
[-213.82638550 1.51051211]
[-227.73139954 -4.11537600]
[-241.63641357 -9.74126434]
[-255.54142761 -15.36715221]
[-271.23614502 -13.37054920]
[-280.13238525 -25.31651497]
[-294.03738403 -30.94240189]
[-307.94241333 -36.56829071]
[-324.09918213 -33.75928116]
[-334.40112305 -46.51867294]
[-328.25048828 -61.72069550]
[-311.97448730 -63.72681427]
[-302.31652832 -50.47330475]
[-288.41149902 -44.84741592]
[-274.50650024 -39.22152710]
[-259.80636597 -41.62052917]
[-249.91552734 -29.27216530]
[-236.01052856 -23.64627647]
[-222.10551453 -18.02038956]
[-208.20050049 -12.39450073]
[-194.29548645 -6.76861286]
[-180.39047241 -1.14272463]
[-169.48365784 -12.59002686]
[-154.99023438 -19.00540543]
[-139.10653687 -19.38450432]
[-124.25186157 -13.64015007]
[-112.70011139 -2.62010407]
[-106.23160553 12.01791191]
[-105.85879517 28.05554581]
[-91.83355713 33.37461853]
[-77.80831146 38.69369125]
[-63.78306580 44.01276779]
[-49.75782394 49.33184052]
[-35.51248169 54.02973175]
[-21.07453346 58.09737396]
[-6.63658810 62.16501617]
[7.80135822 66.23265839]
[22.23930359 70.30030060]
[36.67724991 74.36794281]
[51.11519623 78.43558502]
[65.55313873 82.50322723]
[78.01484680 68.22931671]
[95.76454926 61.59708405]
[114.53298187 64.20173645]
[129.80586243 75.41680145]
[143.01033020 68.30048370]
[156.21479797 61.18416214]
[162.34333801 54.30425262]
[169.78842163 54.06017685]
[176.06661987 47.31655502]
[183.51527405 47.23608398]
[197.01957703 40.70662689]
[210.52388000 34.17717361]
[219.57997131 21.20420837]
[234.40618896 22.62985420]
[247.91049194 16.10039902]
[261.41479492 9.57094383]
[274.91909790 3.04148889]
[288.42340088 -3.48796678]
[292.08264160 -18.69138527]
[304.68902588 -27.94414139]
[320.29016113 -26.87736511]
[331.51971436 -15.99475574]
[333.07540894 -0.43474841]
[324.22271729 12.45569611]
[309.14157104 16.59010506]
[294.95285034 10.01633644]
[281.44854736 16.54579163]
[267.94424438 23.07524681]
[254.43995667 29.60470390]
[240.93563843 36.13415909]
[232.84547424 48.64009094]
[217.05332947 47.68147659]
[203.54902649 54.21092987]
[190.04472351 60.74038696]
[176.61296082 67.41778564]
[163.33111572 74.38863373]
[150.12664795 81.50495148]
[136.92218018 88.62126923]
[137.70715332 108.41985321]
[128.57479858 126.00392914]
[137.49786377 138.06123352]
[146.42094421 150.11854553]
[155.34402466 162.17585754]
[164.26710510 174.23316956]
[173.19018555 186.29046631]
[182.11325073 198.34777832]
[191.03633118 210.40509033]
[199.95941162 222.46240234]
[208.88249207 234.51969910]
[217.80557251 246.57701111]
[226.72865295 258.63430786]
[241.97558594 264.67276001]
[244.10160828 280.93353271]
[230.91963196 290.68890381]
[215.99015808 283.90344238]
[214.67134094 267.55740356]
[205.74826050 255.50009155]
[196.82518005 243.44277954]
[187.90209961 231.38546753]
[178.97903442 219.32817078]
[170.05595398 207.27085876]
[161.13287354 195.21354675]
[152.20979309 183.15623474]
[143.28671265 171.09893799]
[134.36363220 159.04162598]
[125.44055939 146.98431396]
[116.51748657 134.92700195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
[42 47]
[79 113]
[80 112]
[81 111]
[83 110]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
9 75 0.0 0.6 colorpair
10 74 0.0 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.0 1 colorpair
23 65 0.0 1 colorpair
24 64 0.0 1 colorpair
25 63 0.0 0.6 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
42 47 0.0 1 colorpair
79 113 0.0 1 colorpair
80 112 0.0 1 colorpair
81 111 0.0 1 colorpair
83 110 0.0 1 colorpair
85 109 0.0 1 colorpair
86 108 0.0 1 colorpair
87 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
115 142 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.0 1 colorpair
119 138 0.0 0.6 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.16 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 75 1 gmark
25 63 1 gmark
119 138 1 gmark
134 cmark

% End Annotations
showpage
end
%%EOF
