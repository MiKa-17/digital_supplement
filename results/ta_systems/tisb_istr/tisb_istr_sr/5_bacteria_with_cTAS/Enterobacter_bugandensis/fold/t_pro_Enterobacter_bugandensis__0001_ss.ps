%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCGUAGUGGAUAUGGUGAUACUUAUCCUCAAACUCAUUGUUGCAGUACUGCAACUGCUUGAUGCUGUCCUGAAAUACGUUCGG\
) } def
/len { sequence length } bind def

/coor [
[112.32830811 364.21432495]
[108.96942139 348.52682495]
[119.25119019 336.21157837]
[119.25119019 321.21157837]
[119.25119019 306.21157837]
[119.25119019 291.21157837]
[119.25119019 276.21157837]
[119.25119019 261.21157837]
[119.25119019 246.21159363]
[104.49324799 233.80717468]
[103.23994446 214.27299500]
[116.69191742 199.64897156]
[115.08848572 184.73492432]
[113.48506165 169.82086182]
[111.88163757 154.90681458]
[110.27820587 139.99276733]
[77.12310791 104.52958679]
[62.58905029 100.81999207]
[48.05498886 97.11038971]
[32.77000427 101.19448090]
[22.35156059 90.54998016]
[7.81750011 86.84038544]
[-6.71655941 83.13078308]
[-22.35044098 88.08192444]
[-34.27099609 76.81993866]
[-30.21538162 60.93019104]
[-14.35566425 56.75869370]
[-3.00696182 68.59672546]
[11.52709770 72.30632782]
[26.06115723 76.01592255]
[40.30657196 71.66650391]
[51.76458740 82.57633209]
[66.29864502 86.28592682]
[80.83271027 89.99552917]
[66.62526703 85.18422699]
[57.57607651 73.22127533]
[56.81229782 58.24073792]
[64.59786224 45.41946793]
[78.24230194 39.18814850]
[93.03046417 41.70014954]
[103.85197449 52.08739853]
[106.96721649 66.76033783]
[101.29942322 80.64868927]
[108.01368713 67.23531342]
[114.72794342 53.82192993]
[121.44219971 40.40855026]
[128.15646362 26.99517250]
[134.87071228 13.58179379]
[133.35594177 -2.74724555]
[146.89445496 -12.00147247]
[161.55899048 -4.66093159]
[162.26393127 11.72305775]
[148.28410339 20.29605103]
[141.56983948 33.70943069]
[134.85557556 47.12281036]
[128.14132690 60.53619003]
[121.42706299 73.94956970]
[114.71280670 87.36294556]
[119.09950256 93.44627380]
[132.25959778 111.69625092]
[147.10693359 109.56153107]
[157.83355713 97.63177490]
[173.83938599 98.72390747]
[182.84613037 112.00013733]
[177.94456482 127.27606964]
[162.89477539 132.83332825]
[149.24165344 124.40885162]
[134.39433289 126.54357147]
[125.19226074 138.38932800]
[126.79569244 153.30339050]
[128.39910889 168.21743774]
[130.00254822 183.13150024]
[131.60597229 198.04554749]
[141.67218018 202.63873291]
[148.77378845 211.01635742]
[151.61383057 221.54045105]
[149.71971130 232.19190979]
[143.52026367 240.95774841]
[134.25119019 246.21159363]
[134.25119019 261.21157837]
[134.25119019 276.21157837]
[134.25119019 291.21157837]
[134.25119019 306.21157837]
[134.25119019 321.21157837]
[134.25119019 336.21157837]
[144.53295898 348.52682495]
[141.17407227 364.21432495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 34]
[18 33]
[19 32]
[21 30]
[22 29]
[23 28]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[60 68]
[61 67]
] def

init

% Start Annotations
3 85 0.0 1 colorpair
4 84 0.0 1 colorpair
5 83 0.0 1 colorpair
6 82 0.0 1 colorpair
7 81 0.0 1 colorpair
8 80 0.0 1 colorpair
9 79 0.0 1 colorpair
12 73 0.0 1 colorpair
13 72 0.0 1 colorpair
14 71 0.0 1 colorpair
15 70 0.0 1 colorpair
16 69 0.0 1 colorpair
17 34 0.0 1 colorpair
18 33 0.0 1 colorpair
19 32 0.0 1 colorpair
21 30 0.0 1 colorpair
22 29 0.0 1 colorpair
23 28 0.0 1 colorpair
43 58 0.0 1 colorpair
44 57 0.0 1 colorpair
45 56 0.0 1 colorpair
46 55 0.0 1 colorpair
47 54 0.0 1 colorpair
48 53 0.0 1 colorpair
60 68 0.0 1 colorpair
61 67 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
