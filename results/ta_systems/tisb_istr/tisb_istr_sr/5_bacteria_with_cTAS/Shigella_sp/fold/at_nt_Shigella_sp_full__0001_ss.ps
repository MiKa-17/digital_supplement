%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:49:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUAAAUACGUCAAAAUUCGUGCCGAAAUUGCGCGUUCUGCGCGGAACACGUAUACUUUCAGUGUUGACAUAAUACAGUGUGCUUUGCGGUUACCAGCCGCAGGCGACUGACGAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[55.81284714 109.97550964]
[40.83611298 110.81060791]
[25.85937691 111.64570618]
[10.88263988 112.48080444]
[-4.09409523 113.31590271]
[-19.06059837 114.31779480]
[-34.01501083 115.48635101]
[-48.92202759 117.15395355]
[-63.76499557 119.31874847]
[-78.60796356 121.48353577]
[-93.45092773 123.64833069]
[-108.29389191 125.81312561]
[-123.13686371 127.97791290]
[-127.23822784 137.97920227]
[-135.09182739 145.28804016]
[-145.20736694 148.61039734]
[-155.70376587 147.40002441]
[-164.65892029 141.94703674]
[-170.46166992 133.31211853]
[-185.41609192 134.48068237]
[-200.37049866 135.64923096]
[-215.32490540 136.81779480]
[-230.27932739 137.98634338]
[-245.23373413 139.15490723]
[-260.18814087 140.32345581]
[-273.34362793 149.11233521]
[-286.63497925 142.39004517]
[-301.58938599 143.55860901]
[-316.54379272 144.72715759]
[-324.54373169 158.02305603]
[-338.84405518 164.04640198]
[-353.94598389 160.48110962]
[-364.04251099 148.69810486]
[-365.25137329 133.22817993]
[-357.10766602 120.01985168]
[-342.74285889 114.15199280]
[-327.68048096 117.88090515]
[-317.71237183 129.77275085]
[-302.75793457 128.60418701]
[-287.80352783 127.43563843]
[-275.71771240 118.73034668]
[-261.35671997 125.36904907]
[-246.40229797 124.20049286]
[-231.44787598 123.03193665]
[-216.49346924 121.86338043]
[-201.53906250 120.69481659]
[-186.58464050 119.52626038]
[-171.63023376 118.35770416]
[-160.20417786 102.66469574]
[-140.63618469 100.27100372]
[-125.30165100 113.13494873]
[-110.45868683 110.97015381]
[-95.61572266 108.80536652]
[-80.77275085 106.64057159]
[-65.92978668 104.47577667]
[-51.08681870 102.31098938]
[-48.67216492 99.63753510]
[-44.80882645 98.04027557]
[-40.03585815 98.20254517]
[-35.18356705 100.53193665]
[-20.22915459 99.36338043]
[-13.75342751 95.67658997]
[-4.92919350 98.33916473]
[10.04754257 97.50406647]
[25.02427864 96.66896820]
[40.00101471 95.83387756]
[54.97774887 94.99877930]
[57.10852814 85.42821503]
[61.24874878 76.54033661]
[67.20444489 68.75152588]
[74.69660187 62.42669678]
[83.37419891 57.86215210]
[92.83071136 55.27174759]
[102.62310791 54.77683640]
[112.29260254 56.40060425]
[121.38619995 60.06698608]
[129.47785950 65.60420227]
[136.18850708 72.75285339]
[149.50009155 65.83897400]
[162.81167603 58.92510223]
[176.12327576 52.01122665]
[182.35876465 45.22336578]
[189.80934143 45.09534836]
[203.27165222 38.47975540]
[216.73396301 31.86416626]
[230.19628906 25.24857712]
[243.65859985 18.63298798]
[250.04377747 11.98573112]
[257.49536133 12.02373314]
[271.10171509 5.70971203]
[284.70806885 -0.60430938]
[298.31445312 -6.91833067]
[311.92080688 -13.23235226]
[325.52716064 -19.54637337]
[337.34957886 -31.69819450]
[352.29928589 -23.70175934]
[348.75384521 -7.12267160]
[331.84118652 -5.94001007]
[318.23483276 0.37401149]
[304.62847900 6.68803310]
[291.02209473 13.00205421]
[277.41574097 19.31607628]
[263.80938721 25.63009644]
[250.27418518 32.09530258]
[236.81187439 38.71089554]
[223.34956360 45.32648468]
[209.88723755 51.94207382]
[196.42492676 58.55766296]
[183.03713989 65.32281494]
[169.72555542 72.23668671]
[156.41397095 79.15056610]
[143.10238647 86.06443787]
[145.25473022 102.00625610]
[141.70011902 117.69507599]
[132.88681030 131.15240479]
[141.91848755 143.12858582]
[150.95016479 155.10476685]
[159.98184204 167.08094788]
[169.01350403 179.05712891]
[178.04518127 191.03330994]
[187.07685852 203.00949097]
[196.10852051 214.98567200]
[205.14019775 226.96185303]
[214.17187500 238.93803406]
[229.47276306 244.83843994]
[231.74563599 261.07931519]
[218.65235901 270.95343018]
[203.66217041 264.30316162]
[202.19569397 247.96969604]
[193.16401672 235.99351501]
[184.13235474 224.01733398]
[175.10067749 212.04116821]
[166.06900024 200.06498718]
[157.03732300 188.08880615]
[148.00566101 176.11262512]
[138.97398376 164.13644409]
[129.94230652 152.16026306]
[120.91063690 140.18408203]
[101.02674866 145.28753662]
[80.93199921 141.09046936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 61]
[7 60]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
[78 112]
[79 111]
[80 110]
[81 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
1 67 0.0 1 colorpair
2 66 0.0 1 colorpair
3 65 0.0 1 colorpair
4 64 0.0 1 colorpair
5 63 0.0 1 colorpair
6 61 0.0 1 colorpair
7 60 0.0 1 colorpair
8 56 0.0 1 colorpair
9 55 0.0 1 colorpair
10 54 0.0 1 colorpair
11 53 0.0 1 colorpair
12 52 0.0 1 colorpair
13 51 0.0 1 colorpair
19 48 0.0 1 colorpair
20 47 0.0 1 colorpair
21 46 0.0 1 colorpair
22 45 0.0 1 colorpair
23 44 0.0 1 colorpair
24 43 0.0 1 colorpair
25 42 0.0 1 colorpair
27 40 0.0 1 colorpair
28 39 0.0 1 colorpair
29 38 0.0 1 colorpair
78 112 0.0 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
83 108 0.0 1 colorpair
84 107 0.0 1 colorpair
85 106 0.0 1 colorpair
86 105 0.0 1 colorpair
87 104 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
93 99 0.0 1 colorpair
94 98 0.0 1 colorpair
115 138 0.0 1 colorpair
116 137 0.0 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 1 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
