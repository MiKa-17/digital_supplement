%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:00:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAUGCGUCAAAAUCCGUGCCCCAAAUUGCGCGUUCCUGUGCGAUCGCGUAUACUUCGGGCGUUGACGUAACACAGUGUGCUCUGCGGUCACCAGCCGCAAACGCUGUAAAAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[100.29523468 134.36329651]
[93.31916809 133.70889282]
[86.62083435 131.65313721]
[80.47869873 128.28147888]
[75.14811707 123.73410034]
[70.85068512 118.20002747]
[67.76506805 111.90933990]
[66.01952362 105.12355804]
[65.68663788 98.12477112]
[51.24869156 94.05712891]
[36.81074524 89.98948669]
[22.37279701 85.92184448]
[7.93485117 81.85420227]
[-6.50309467 77.78656006]
[-20.94104004 73.71891785]
[-35.37898636 69.65127563]
[-29.47887421 83.44216919]
[-34.86963654 97.44001007]
[-48.49586868 103.71103668]
[-62.63442230 98.70092010]
[-69.27177429 85.24931335]
[-64.64596558 70.98040009]
[-51.38003922 63.98170853]
[-65.15811157 58.05171967]
[-78.93618011 52.12173462]
[-92.71424866 46.19174576]
[-106.49232483 40.26175690]
[-118.65192413 51.01782227]
[-134.22410583 55.39682770]
[-150.09332275 52.57510757]
[-163.10740662 43.16443253]
[-170.70362854 29.08025551]
[-171.41331482 13.15200138]
[-185.31832886 7.52611303]
[-199.22334290 1.90022504]
[-213.12835693 -3.72566319]
[-227.03335571 -9.35155106]
[-240.93836975 -14.97743893]
[-256.63308716 -12.98083687]
[-265.52932739 -24.92680168]
[-279.43435669 -30.55268860]
[-293.88565063 -24.15458298]
[-308.59808350 -29.92690086]
[-314.84304810 -44.44503021]
[-308.91549683 -59.09561920]
[-294.33215332 -65.18673706]
[-279.74505615 -59.10462570]
[-273.80847168 -44.45770264]
[-259.90344238 -38.83181381]
[-245.20330811 -41.23081589]
[-235.31248474 -28.88245201]
[-221.40747070 -23.25656319]
[-207.50245667 -17.63067627]
[-193.59744263 -12.00478745]
[-179.69242859 -6.37890005]
[-165.78742981 -0.75301182]
[-155.95767212 -10.59984970]
[-143.07118225 -15.96012878]
[-129.07092285 -15.98971653]
[-116.08158112 -10.65094757]
[-106.08708191 -0.72337168]
[-100.62761688 12.30989552]
[-100.56233215 26.48368645]
[-86.78426361 32.41367340]
[-73.00619507 38.34366226]
[-59.22812271 44.27365112]
[-45.45005035 50.20363617]
[-31.31134415 55.21332932]
[-16.87339973 59.28097153]
[-2.43545270 63.34861374]
[12.00249386 67.41625214]
[26.44043922 71.48389435]
[40.87838745 75.55153656]
[55.31632996 79.61917877]
[69.75428009 83.68682098]
[85.38533020 68.89798737]
[106.74679565 66.30423737]
[125.46283722 76.92257690]
[138.50779724 69.51790619]
[151.55274963 62.11323929]
[164.59770203 54.70856857]
[177.64265442 47.30389786]
[190.68760681 39.89922714]
[203.73257446 32.49455643]
[205.02833557 23.01596451]
[210.49877930 15.33684349]
[218.78704834 11.14049053]
[227.93777466 11.27294731]
[235.85791016 15.57546616]
[249.36221313 9.04601097]
[262.86651611 2.51655555]
[276.37081909 -4.01289988]
[289.87512207 -10.54235554]
[303.37942505 -17.07181168]
[309.99102783 -31.68913460]
[325.57638550 -35.49389648]
[338.17974854 -25.56740761]
[338.13287354 -9.52442360]
[325.47174072 0.32825369]
[309.90887451 -3.56750727]
[296.40457153 2.96194816]
[282.90026855 9.49140358]
[269.39596558 16.02085876]
[255.89166260 22.55031395]
[242.38735962 29.07976913]
[232.45671082 47.12448502]
[211.13723755 45.53951263]
[198.09228516 52.94418335]
[185.04733276 60.34885406]
[172.00238037 67.75352478]
[158.95741272 75.15819550]
[145.91246033 82.56286621]
[132.86750793 89.96753693]
[133.61883545 107.12017822]
[125.97836304 122.49550629]
[134.90144348 134.55281067]
[143.82452393 146.61012268]
[152.74760437 158.66743469]
[161.67066956 170.72474670]
[170.59375000 182.78205872]
[179.51683044 194.83935547]
[188.43991089 206.89666748]
[197.36299133 218.95397949]
[206.28607178 231.01129150]
[215.20913696 243.06858826]
[224.13221741 255.12590027]
[239.37916565 261.16433716]
[241.50517273 277.42510986]
[228.32321167 287.18048096]
[213.39372253 280.39501953]
[212.07490540 264.04898071]
[203.15184021 251.99166870]
[194.22875977 239.93435669]
[185.30567932 227.87705994]
[176.38259888 215.81974792]
[167.45951843 203.76243591]
[158.53645325 191.70512390]
[149.61337280 179.64782715]
[140.69029236 167.59051514]
[131.76721191 155.53320312]
[122.84413910 143.47589111]
[113.92105865 131.41859436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
[78 113]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[84 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
9 75 0.0 1 colorpair
10 74 0.0 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
23 67 0.0 1 colorpair
24 66 0.0 1 colorpair
25 65 0.0 1 colorpair
26 64 0.0 1 colorpair
27 63 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
78 113 0.0 1 colorpair
79 112 0.0 1 colorpair
80 111 0.0 1 colorpair
81 110 0.0 1 colorpair
82 109 0.0 1 colorpair
83 108 0.0 1 colorpair
84 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
94 100 0.0 1 colorpair
115 142 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.0 1 colorpair
119 138 0.0 1 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
