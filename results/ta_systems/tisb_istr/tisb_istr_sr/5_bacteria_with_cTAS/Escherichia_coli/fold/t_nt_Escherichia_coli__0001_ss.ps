%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:48:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCCUGGUGGAUAUCGCCAUUCUUAUCCUCAAACUCAUUGUUGCAGCACUGCAACUGCUUGAUGCUGUUCUGAAAUACCUGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[-49.43867493 192.81263733]
[-62.34188843 200.46162415]
[-75.24510193 208.11061096]
[-88.14832306 215.75961304]
[-101.05153656 223.40859985]
[-105.07292175 238.45739746]
[-118.26757812 246.03074646]
[-132.58952332 242.10421753]
[-145.49273682 249.75321960]
[-158.39595032 257.40219116]
[-171.29916382 265.05117798]
[-184.20237732 272.70019531]
[-189.55311584 287.82464600]
[-204.76051331 292.93484497]
[-218.15879822 284.11068726]
[-219.46992493 268.12130737]
[-207.68811035 257.23236084]
[-191.85137939 259.79696655]
[-178.94815063 252.14797974]
[-166.04493713 244.49899292]
[-153.14172363 236.84999084]
[-140.23851013 229.20100403]
[-136.80961609 214.75184631]
[-123.83288574 206.81086731]
[-108.70052338 210.50538635]
[-95.79730988 202.85638428]
[-82.89409637 195.20739746]
[-69.99088287 187.55841064]
[-57.08766556 179.90942383]
[-61.49313736 166.03578186]
[-62.67223358 151.51972961]
[-60.56138229 137.10200500]
[-55.26497269 123.51909637]
[-47.05021667 111.46565247]
[-36.33366776 101.55889130]
[-23.66008186 94.30702972]
[-9.67474651 90.08322144]
[4.90938568 89.10633087]
[19.34803963 91.42961884]
[32.90359879 96.93784332]
[44.88278961 105.35295105]
[54.67213821 116.24813843]
[67.83168030 109.04907990]
[80.99121857 101.85002136]
[85.16310120 87.97408295]
[97.87480164 81.02001953]
[111.80971527 84.99044037]
[124.96926117 77.79138184]
[138.12879944 70.59231567]
[146.52230835 57.18114471]
[161.40139771 57.86080170]
[174.56094360 50.66173935]
[182.95443726 37.25056458]
[197.83354187 37.93022537]
[210.99307251 30.73116302]
[224.15261841 23.53210068]
[232.54612732 10.12092686]
[247.42521667 10.80058670]
[253.29478455 -4.13017511]
[268.66952515 -8.71243477]
[281.75524902 0.56892520]
[282.51370239 16.59403992]
[270.36306763 27.06981277]
[254.62428284 23.96012688]
[247.17202759 36.85637665]
[231.35168457 36.69164276]
[218.19213867 43.89070511]
[205.03259277 51.08976746]
[197.58035278 63.98601532]
[181.75999451 63.82128143]
[168.60046387 71.02033997]
[161.14820862 83.91659546]
[145.32786560 83.75186157]
[132.16831970 90.95092010]
[119.00878143 98.14997864]
[114.83689880 112.02591705]
[102.12519836 118.97998047]
[88.19028473 115.00955963]
[75.03073883 122.20861816]
[61.87120056 129.40768433]
[65.89213562 144.36790466]
[66.24868774 159.84629822]
[62.92461395 174.95887756]
[56.11375046 188.84353638]
[46.20871735 200.70918274]
[33.77830124 209.88088989]
[19.53477097 215.83822632]
[4.29308891 218.24478149]
[-11.07573605 216.96717834]
[-25.69441032 212.08250427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[42 80]
[43 79]
[44 78]
[47 75]
[48 74]
[49 73]
[51 71]
[52 70]
[54 68]
[55 67]
[56 66]
[58 64]
] def

init

% Start Annotations
1 29 0.0 1 colorpair
2 28 0.0 1 colorpair
3 27 0.0 1 colorpair
4 26 0.0 1 colorpair
5 25 0.16 0.6 colorpair
8 22 0.0 1 colorpair
9 21 0.16 0.2 colorpair
10 20 0.0 1 colorpair
11 19 0.0 1 colorpair
12 18 0.16 1 colorpair
42 80 0.0 0.6 colorpair
43 79 0.0 0.6 colorpair
44 78 0.0 0.6 colorpair
47 75 0.0 1 colorpair
48 74 0.0 1 colorpair
49 73 0.0 1 colorpair
51 71 0.0 1 colorpair
52 70 0.0 1 colorpair
54 68 0.0 1 colorpair
55 67 0.0 0.6 colorpair
56 66 0.0 1 colorpair
58 64 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 25 1 gmark
5 cmark
25 cmark
9 21 2 gmark
21 cmark
18 cmark
42 80 1 gmark
43 79 1 gmark
44 78 1 gmark
55 67 1 gmark

% End Annotations
showpage
end
%%EOF
