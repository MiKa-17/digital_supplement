%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAUGCGUCAAAAUUCGUGCCGAAAUUGCGUGUUCUUCGCGGAACGCGUAUACUUCUGAUGUUGAUAUAACACAGUGUGCUUUGCGGCAACCAACCGCAUAACGCUGAUAAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[77.52268219 141.36169434]
[65.44551849 131.96885681]
[57.01843262 119.19906616]
[53.13158417 104.40123749]
[38.16460800 103.40639496]
[23.19763756 102.41155243]
[18.37576294 104.79541016]
[13.60789204 105.01387787]
[9.72767639 103.46408844]
[7.28144932 100.82171631]
[-7.58658838 98.83641052]
[-22.45462608 96.85110474]
[-37.32266617 94.86579132]
[-52.19070053 92.88048553]
[-67.05873871 90.89517975]
[-78.33020782 107.33592987]
[-96.24485779 115.85601044]
[-115.92010498 114.23999023]
[-132.04684448 103.02065277]
[-145.14643860 110.32823944]
[-158.24601746 117.63583374]
[-171.34559631 124.94342804]
[-182.23239136 137.94012451]
[-197.73493958 131.07664490]
[-195.43121338 114.27993774]
[-178.65319824 111.84384155]
[-165.55360413 104.53625488]
[-152.45402527 97.22866058]
[-139.35444641 89.92106628]
[-140.68618774 84.27223206]
[-141.13514709 78.48592377]
[-140.69065857 72.69927216]
[-154.76065063 67.49973297]
[-168.83065796 62.30019760]
[-182.90065002 57.10065842]
[-196.97064209 51.90111923]
[-211.04063416 46.70158005]
[-225.11064148 41.50204086]
[-239.18063354 36.30250549]
[-253.25062561 31.10296440]
[-267.32061768 25.90342712]
[-283.38430786 29.20348740]
[-294.07028198 16.76395988]
[-288.38574219 1.38156343]
[-272.17846680 -1.11961114]
[-262.12109375 11.83343029]
[-248.05108643 17.03296852]
[-233.98109436 22.23250771]
[-219.91110229 27.43204689]
[-205.84109497 32.63158417]
[-191.77110291 37.83112335]
[-177.70111084 43.03066254]
[-163.63111877 48.23020172]
[-149.56111145 53.42974091]
[-135.49111938 58.62928009]
[-126.49490356 48.51278305]
[-114.47461700 42.20293427]
[-100.96360016 40.53479004]
[-87.69601440 43.74936295]
[-76.38430023 51.45922089]
[-68.49811554 62.69498825]
[-65.07343292 76.02713776]
[-50.20539474 78.01245117]
[-35.33735657 79.99775696]
[-20.46931839 81.98306274]
[-5.60128069 83.96836853]
[9.26675701 85.95368195]
[24.19248009 87.44458008]
[39.15945435 88.43942261]
[54.12642670 89.43426514]
[58.85103226 77.13557434]
[66.79881287 66.62784576]
[77.34722137 58.73413849]
[89.67001343 54.07276535]
[102.80194855 53.00884628]
[115.71440887 55.62572098]
[127.39596558 61.71840668]
[136.93161011 70.80966949]
[150.03118896 63.50207520]
[163.13078308 56.19448471]
[176.23036194 48.88689041]
[189.32994080 41.57929993]
[202.42953491 34.27170563]
[203.40440369 22.32880402]
[209.98753357 12.46091843]
[220.42630005 7.08468866]
[232.04211426 7.44823360]
[241.91749573 13.34335709]
[255.32749939 6.62235498]
[268.73748779 -0.09864683]
[282.14749146 -6.81964874]
[295.55749512 -13.54065037]
[298.99996948 -28.79461288]
[311.47338867 -38.22585678]
[327.08813477 -37.38124084]
[338.47143555 -26.65956497]
[340.24844360 -11.12327671]
[331.58010864 1.89186370]
[316.55935669 6.24050474]
[302.27850342 -0.13064903]
[288.86849976 6.59035254]
[275.45849609 13.31135464]
[262.04849243 20.03235626]
[248.63850403 26.75335884]
[243.98880005 44.39963913]
[227.67666626 53.26549911]
[209.73712158 47.37128830]
[196.63754272 54.67888260]
[183.53794861 61.98647308]
[170.43836975 69.29406738]
[157.33879089 76.60166168]
[144.23921204 83.90925598]
[147.06124878 101.12196350]
[143.42216492 118.18063354]
[133.82156372 132.74325562]
[142.79866028 144.76040649]
[151.77574158 156.77755737]
[160.75282288 168.79470825]
[169.72990417 180.81185913]
[178.70700073 192.82901001]
[187.68408203 204.84617615]
[196.66116333 216.86332703]
[205.63824463 228.88047791]
[214.61534119 240.89762878]
[223.59242249 252.91477966]
[238.86630249 258.88476562]
[241.06524658 275.13580322]
[227.92718506 284.95025635]
[212.96740723 278.23181152]
[211.57527161 261.89187622]
[202.59817505 249.87471008]
[193.62109375 237.85755920]
[184.64401245 225.84040833]
[175.66693115 213.82325745]
[166.68984985 201.80610657]
[157.71275330 189.78895569]
[148.73567200 177.77178955]
[139.75859070 165.75463867]
[130.78150940 153.73748779]
[121.80442047 141.72033691]
[107.27345276 146.50930786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[19 29]
[20 28]
[21 27]
[22 26]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[115 140]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% Start Annotations
4 70 0.0 1 colorpair
5 69 0.0 1 colorpair
6 68 0.0 1 colorpair
10 67 0.0 1 colorpair
11 66 0.0 1 colorpair
12 65 0.0 1 colorpair
13 64 0.0 1 colorpair
14 63 0.0 1 colorpair
15 62 0.0 1 colorpair
19 29 0.0 1 colorpair
20 28 0.0 0.6 colorpair
21 27 0.0 1 colorpair
22 26 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
78 112 0.0 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
82 108 0.0 1 colorpair
83 107 0.0 1 colorpair
88 104 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
115 140 0.0 1 colorpair
116 139 0.0 1 colorpair
117 138 0.0 1 colorpair
118 137 0.0 1 colorpair
119 136 0.0 1 colorpair
120 135 0.0 1 colorpair
121 134 0.0 1 colorpair
122 133 0.0 1 colorpair
123 132 0.0 1 colorpair
124 131 0.0 1 colorpair
125 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 28 1 gmark

% End Annotations
showpage
end
%%EOF
