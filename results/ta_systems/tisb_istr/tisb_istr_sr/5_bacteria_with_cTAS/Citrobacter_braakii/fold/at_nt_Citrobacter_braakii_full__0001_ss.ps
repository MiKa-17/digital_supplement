%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:33:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAACCAUCAAAAUUCGUGCCGAAAUUGCGUGUUCUUCGCAGAACGCGUAUACUUUUUCCGUUGACAUAACACAGUGUGUUCGGCGGCUACCAACCGCACAGCGCUGAAAAA_ACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[111.60305786 151.14642334]
[113.71986389 165.99632263]
[121.03075409 179.09405518]
[123.37287903 193.91007996]
[120.45850372 208.62423706]
[112.64566803 221.42890930]
[100.89416504 230.75103760]
[86.64766693 235.44543457]
[71.65634155 234.93534851]
[57.76186752 229.28349304]
[46.67117310 219.18415833]
[39.74673843 205.87806702]
[37.83923340 190.99984741]
[41.18299103 176.37728882]
[49.36722946 163.80674744]
[61.38702774 154.83229065]
[69.37954712 142.13899231]
[77.37206268 129.44570923]
[85.36458588 116.75241089]
[72.26499939 124.06000519]
[59.16541672 131.36759949]
[46.06583405 138.67518616]
[35.17904282 151.67189026]
[19.67650032 144.80841064]
[21.98022652 128.01170349]
[38.75824356 125.57560730]
[51.85782623 118.26801300]
[64.95741272 110.96042633]
[78.05699158 103.65283203]
[77.47682190 96.17530060]
[76.31647491 81.22025299]
[75.73630524 73.74272156]
[61.66630936 68.54319000]
[47.59631348 63.34364700]
[33.52631378 58.14410782]
[19.45631981 52.94456863]
[5.38632298 47.74503326]
[-8.68367386 42.54549408]
[-22.75366974 37.34595490]
[-36.82366562 32.14641571]
[-50.89366150 26.94687653]
[-66.95733643 30.24693680]
[-77.64331818 17.80740929]
[-71.95878601 2.42501354]
[-55.75149536 -0.07616089]
[-45.69412231 12.87688065]
[-31.62412643 18.07641983]
[-17.55413055 23.27595711]
[-3.48413467 28.47549629]
[10.58586121 33.67503357]
[24.65585709 38.87457275]
[38.72585297 44.07411194]
[52.79584885 49.27365112]
[66.86584473 54.47319031]
[80.93584442 59.67272949]
[71.08105469 48.36418915]
[57.37316895 42.27370453]
[45.73521042 32.81020355]
[36.97726822 20.63241768]
[31.70896530 6.58802414]
[30.29701996 -8.34537506]
[32.83971405 -23.12829399]
[39.16005707 -36.73172379]
[48.81809998 -48.20875168]
[61.14156723 -56.76048660]
[75.27264404 -61.79165649]
[90.22769165 -62.95205307]
[104.96572113 -60.16090012]
[118.46084595 -53.61249161]
[129.77368164 -43.76264191]
[138.11679077 -31.29698372]
[142.90940857 -17.08322716]
[143.81791687 -2.11076593]
[140.77911377 12.57819557]
[134.00448608 25.96118736]
[123.96562195 37.10664368]
[111.36093903 45.23892212]
[103.36842346 57.93221283]
[116.46800232 50.62461853]
[129.56759644 43.31702805]
[142.66717529 36.00943375]
[155.76675415 28.70184135]
[168.86633301 21.39424896]
[168.71549988 8.80431461]
[173.93083191 -2.57591343]
[183.45494080 -10.58784580]
[195.41983032 -13.74102306]
[207.51304626 -11.49010754]
[217.42465210 -4.32807255]
[230.83465576 -11.04907417]
[244.24465942 -17.77007675]
[257.65466309 -24.49107742]
[261.09713745 -39.74504089]
[273.57052612 -49.17628479]
[289.18530273 -48.33166885]
[300.56860352 -37.60999298]
[302.34561157 -22.07370377]
[293.67727661 -9.05856419]
[278.65649414 -4.70992279]
[264.37567139 -11.08107662]
[250.96566772 -4.36007500]
[237.55566406 2.36092687]
[224.14566040 9.08192825]
[222.12599182 26.56288338]
[209.95385742 39.48667145]
[192.31744385 42.60332489]
[176.17393494 34.49383163]
[163.07435608 41.80142593]
[149.97476196 49.10902023]
[136.87518311 56.41661072]
[123.77559662 63.72420502]
[110.67601776 71.03179932]
[125.56698608 91.44052887]
[119.38660431 112.46957397]
[128.36369324 124.48672485]
[137.34077454 136.50387573]
[146.31785583 148.52102661]
[155.29493713 160.53817749]
[164.27203369 172.55532837]
[173.24911499 184.57247925]
[182.22619629 196.58964539]
[191.20327759 208.60679626]
[200.18035889 220.62394714]
[209.15745544 232.64109802]
[218.13453674 244.65824890]
[233.40841675 250.62821960]
[235.60736084 266.87927246]
[222.46929932 276.69372559]
[207.50952148 269.97528076]
[206.11738586 253.63533020]
[197.14030457 241.61817932]
[188.16320801 229.60102844]
[179.18612671 217.58387756]
[170.20904541 205.56672668]
[161.23196411 193.54957581]
[152.25486755 181.53242493]
[143.27778625 169.51525879]
[134.30070496 157.49810791]
[125.32361603 145.48095703]
[116.34653473 133.46380615]
[107.36945343 121.44665527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 29]
[20 28]
[21 27]
[22 26]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[89 103]
[90 102]
[91 101]
[92 100]
[114 141]
[115 140]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% Start Annotations
19 29 0.0 1 colorpair
20 28 0.0 1 colorpair
21 27 0.0 1 colorpair
22 26 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
78 112 0.0 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
82 108 0.0 1 colorpair
83 107 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
114 141 0.0 1 colorpair
115 140 0.0 1 colorpair
116 139 0.0 1 colorpair
117 138 0.0 1 colorpair
118 137 0.0 0.6 colorpair
119 136 0.0 1 colorpair
120 135 0.0 1 colorpair
121 134 0.0 1 colorpair
122 133 0.0 1 colorpair
123 132 0.0 1 colorpair
124 131 0.0 1 colorpair
125 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
118 137 1 gmark

% End Annotations
showpage
end
%%EOF
