%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:33:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAGCGUCAAAAUUCGUGUCGAAAUUGCGUGUUCUUCGCAGAACGCGUAUACUUUUGCUGUUGACAUAACACAGUGUGCUUUGCGGCAACCAACCGCAUAACGCUGAAAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[115.57512665 145.81245422]
[115.59832001 160.81243896]
[111.81669617 175.32792664]
[104.47751617 188.40983582]
[94.06063843 199.20281982]
[81.24715424 207.00120544]
[66.87487030 211.29508972]
[51.88349915 211.80372620]
[37.25322723 208.49386597]
[23.94064903 201.58189392]
[12.81618404 191.51977539]
[4.60719585 178.96539307]
[-0.14957933 164.73960876]
[-1.14312589 149.77255249]
[1.69151807 135.04281616]
[8.16901302 121.51351929]
[17.86583519 110.06923676]
[30.14796638 101.45823669]
[44.21235657 96.24355316]
[59.13942337 94.76614380]
[73.95317078 97.12258911]
[87.68185425 103.15692902]
[74.86179352 95.36937714]
[62.04172897 87.58182526]
[49.22166443 79.79427338]
[36.40159988 72.00672150]
[23.58153343 64.21917725]
[10.76146889 56.43162537]
[-8.99244499 66.94591522]
[-31.01174545 63.71916580]
[-46.74292374 48.15265656]
[-50.16283798 26.41225052]
[-64.16054535 21.02113342]
[-78.15825653 15.63001633]
[-92.15596771 10.23890018]
[-106.15367126 4.84778357]
[-120.15138245 -0.54333311]
[-134.14909363 -5.93444967]
[-148.14680481 -11.32556629]
[-162.14451599 -16.71668243]
[-176.14222717 -22.10779953]
[-192.24945068 -19.02732277]
[-202.76463318 -31.61156082]
[-196.87065125 -46.91492844]
[-180.63072205 -49.19462967]
[-170.75109863 -36.10550690]
[-156.75340271 -30.71439171]
[-142.75569153 -25.32327461]
[-128.75798035 -19.93215942]
[-114.76026917 -14.54104233]
[-100.76255798 -9.14992523]
[-86.76484680 -3.75880909]
[-72.76714325 1.63230753]
[-58.76943207 7.02342415]
[-44.77172089 12.41454029]
[-39.34374237 5.91016150]
[-32.50617981 0.88158733]
[-24.65056992 -2.37382317]
[-16.22900963 -3.66051722]
[-7.72812843 -2.89647937]
[0.35902464 -0.11841533]
[7.56158304 4.51993608]
[13.45827389 10.75629425]
[17.70205688 18.23465538]
[20.04054260 26.52561760]
[20.33099556 35.15102768]
[18.54901886 43.61156082]
[31.36908340 51.39910889]
[44.18914795 59.18666077]
[57.00921249 66.97421265]
[69.82927704 74.76176453]
[82.64934540 82.54930878]
[95.46940613 90.33686066]
[97.00557709 87.27977753]
[99.62933350 84.54109955]
[103.25434875 82.44026184]
[107.70929718 81.27039337]
[112.74587250 81.27711487]
[126.05745697 74.36323547]
[139.36904907 67.44936371]
[152.68063354 60.53548813]
[165.99221802 53.62161636]
[179.30380249 46.70774078]
[180.63467407 34.79720306]
[187.51103210 25.12886620]
[198.10800171 20.06694221]
[209.70965576 20.77926445]
[219.40481567 26.97001648]
[233.01118469 20.65599442]
[246.61753845 14.34197330]
[260.22390747 8.02795124]
[273.83026123 1.71393001]
[277.73065186 -13.42941666]
[290.48248291 -22.48066521]
[306.06472778 -21.16609001]
[317.11990356 -10.10639572]
[318.42813110 5.47636938]
[309.37167358 18.22450066]
[294.22674561 22.11871910]
[280.14428711 15.32029343]
[266.53793335 21.63431549]
[252.93156433 27.94833755]
[239.32521057 34.26235962]
[225.71884155 40.57637787]
[220.54118347 58.07371521]
[203.97189331 66.44625092]
[186.21768188 60.01932907]
[172.90609741 66.93320465]
[159.59449768 73.84707642]
[146.28291321 80.76094818]
[132.97132874 87.67482758]
[119.65974426 94.58869934]
[116.34520721 109.21791077]
[125.37688446 121.19409180]
[134.40855408 133.17027283]
[143.44023132 145.14645386]
[152.47190857 157.12263489]
[161.50357056 169.09880066]
[170.53524780 181.07498169]
[179.56692505 193.05116272]
[188.59860229 205.02734375]
[197.63026428 217.00352478]
[206.66194153 228.97970581]
[215.69361877 240.95588684]
[230.99450684 246.85630798]
[233.26737976 263.09716797]
[220.17410278 272.97128296]
[205.18391418 266.32101440]
[203.71743774 249.98756409]
[194.68576050 238.01138306]
[185.65408325 226.03520203]
[176.62242126 214.05902100]
[167.59074402 202.08283997]
[158.55906677 190.10665894]
[149.52738953 178.13047791]
[140.49572754 166.15429688]
[131.46405029 154.17811584]
[122.43237305 142.20195007]
[113.40070343 130.22576904]
[104.36902618 118.24958038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[113 140]
[114 139]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
22 73 0.0 1 colorpair
23 72 0.0 1 colorpair
24 71 0.0 1 colorpair
25 70 0.0 1 colorpair
26 69 0.0 1 colorpair
27 68 0.0 1 colorpair
28 67 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
78 112 0.0 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
82 108 0.0 1 colorpair
83 107 0.0 1 colorpair
88 104 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
113 140 0.0 1 colorpair
114 139 0.0 1 colorpair
115 138 0.0 1 colorpair
116 137 0.0 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 1 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
