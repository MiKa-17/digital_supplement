%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:01:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAUUCAUCAAAAUUCGCGCCGAAAUUGCGCGUUCUGUACAGAACGCGUAUACUUCUGCUGUUGACAUAACACAGUGUGUUUCGCGGCUACCACCCGCAUCACACCGUAAAAACCUCGCUUCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[108.74446106 167.70182800]
[106.31887817 182.50440979]
[100.60216522 196.37234497]
[91.89173889 208.58415222]
[80.64072418 218.50456238]
[67.43443298 225.61750793]
[52.95988464 229.55291748]
[37.97008896 230.10609436]
[23.24485016 227.24824524]
[9.55021000 221.12805176]
[-2.40139842 212.06388855]
[-11.98822403 200.52729797]
[-18.71153450 187.11845398]
[-22.22156715 172.53491211]
[-22.33572197 157.53535461]
[-19.04805756 142.90007019]
[-12.52960873 129.39045715]
[-3.11948204 117.70929718]
[8.69278526 108.46427917]
[22.29268837 102.13635254]
[36.97272491 99.05471802]
[51.96920395 99.37967682]
[66.49930573 103.09332275]
[81.40850067 101.44535828]
[67.53437805 95.74372864]
[51.82900238 97.65471649]
[42.99803543 85.66041565]
[29.12390900 79.95877838]
[15.24978161 74.25714874]
[-0.72264975 81.29619598]
[-16.54842949 74.77155304]
[-22.67296028 59.14776993]
[-36.67066956 53.75665283]
[-50.66838074 48.36553574]
[-64.66609192 42.97442245]
[-78.66379547 37.58330536]
[-92.66150665 32.19218826]
[-106.65921783 26.80107117]
[-120.65692902 21.40995407]
[-134.65463257 16.01883698]
[-148.65234375 10.62772083]
[-164.75956726 13.70819759]
[-175.27474976 1.12396002]
[-169.38076782 -14.17940617]
[-153.14085388 -16.45911026]
[-143.26123047 -3.36998796]
[-129.26351929 2.02112865]
[-115.26580811 7.41224527]
[-101.26809692 12.80336189]
[-87.27039337 18.19447899]
[-73.27268219 23.58559418]
[-59.27497101 28.97671127]
[-45.27726364 34.36782837]
[-31.27955437 39.75894547]
[-17.28184509 45.15006256]
[-6.30641031 38.31061935]
[6.79828501 39.07798767]
[17.20533180 47.39514923]
[20.95141411 60.38302231]
[34.82554245 66.08465576]
[48.69966888 71.78628540]
[63.41267014 69.46748352]
[73.23600769 81.86960602]
[87.11013794 87.57123566]
[73.94529724 80.38186646]
[65.01050568 68.33323669]
[61.95396423 53.64795303]
[65.33950806 39.03501129]
[74.54261017 27.19005585]
[87.86557007 20.29813004]
[102.85070801 19.63058281]
[116.73371887 25.31055832]
[126.95359802 36.29027176]
[131.62509155 50.54429626]
[129.88642883 65.44319153]
[122.05838013 78.23856354]
[109.58779907 86.56893158]
[122.89938354 79.65505981]
[131.57987976 66.42783356]
[146.44087219 67.42789459]
[159.75247192 60.51402283]
[173.06405640 53.60014725]
[186.37564087 46.68627548]
[199.68722534 39.77239990]
[201.01808167 27.86186218]
[207.89443970 18.19352531]
[218.49142456 13.13160133]
[230.09307861 13.84392357]
[239.78823853 20.03467560]
[253.39460754 13.72065353]
[267.00097656 7.40663242]
[280.60733032 1.09261107]
[284.50772095 -14.05073643]
[297.25955200 -23.10198402]
[312.84176636 -21.78740883]
[323.89697266 -10.72771454]
[325.20516968 4.85505056]
[316.14874268 17.60317993]
[301.00381470 21.49739838]
[286.92135620 14.69897461]
[273.31500244 21.01299667]
[259.70861816 27.32701683]
[246.10226440 33.64104080]
[240.92460632 51.13837433]
[224.35531616 59.51090622]
[206.60110474 53.08398819]
[193.28950500 59.99785995]
[179.97792053 66.91173553]
[166.66633606 73.82560730]
[153.35475159 80.73948669]
[145.62638855 93.47218323]
[129.81326294 92.96664429]
[116.50167084 99.88051605]
[113.18713379 114.50972748]
[122.21881104 126.48590851]
[131.25048828 138.46209717]
[140.28215027 150.43826294]
[149.31382751 162.41444397]
[158.34550476 174.39062500]
[167.37718201 186.36680603]
[176.40884399 198.34298706]
[185.44052124 210.31916809]
[194.47219849 222.29534912]
[203.50387573 234.27153015]
[218.80476379 240.17193604]
[221.07763672 256.41281128]
[207.98435974 266.28692627]
[192.99417114 259.63665771]
[191.52769470 243.30320740]
[182.49601746 231.32702637]
[173.46434021 219.35084534]
[164.43266296 207.37466431]
[155.40100098 195.39848328]
[146.36932373 183.42230225]
[137.33764648 171.44612122]
[128.30598450 159.46994019]
[119.27430725 147.49375916]
[110.24263000 135.51757812]
[101.21096039 123.54140472]
[103.39530945 138.38150024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 64]
[25 63]
[27 61]
[28 60]
[29 59]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[77 113]
[78 112]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[89 103]
[90 102]
[91 101]
[92 100]
[114 139]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
24 64 0.0 1 colorpair
25 63 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
77 113 0.0 1 colorpair
78 112 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
82 108 0.0 1 colorpair
83 107 0.0 1 colorpair
84 106 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
114 139 0.0 1 colorpair
115 138 0.0 1 colorpair
116 137 0.0 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 1 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
