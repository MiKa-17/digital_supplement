%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUAAAUACGUCAAAAUUCGUGCCGAAAUUGCGCGUUCUGCGCGGAACACGUAUACUUUCAGUGUUGACAUAAUACAGUGUGCUUUGCGGUUACCAGCCGCAGGCGGCUGACGAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[126.77168274 293.69564819]
[112.48881531 289.11309814]
[100.97324371 279.50103760]
[93.91157532 266.26727295]
[92.33807373 251.35003662]
[96.48320007 236.93414307]
[105.73985291 225.13098145]
[118.75227356 217.66928101]
[133.61462402 215.64190674]
[148.15014648 219.34577942]
[160.22964478 228.23811340]
[155.30928040 214.06806946]
[150.38890076 199.89804077]
[145.46853638 185.72799683]
[140.54815674 171.55796814]
[134.30810547 185.19841003]
[121.32735443 192.71507263]
[106.39076996 191.33724976]
[95.00412750 181.57279968]
[91.36466217 167.02102661]
[96.81392670 153.04585266]
[109.34326172 144.79867554]
[124.33421326 145.31950378]
[136.26062012 154.41586304]
[133.93061829 139.59793091]
[131.60060120 124.78000641]
[129.27059937 109.96207428]
[115.67337799 124.75620270]
[96.85301971 127.50228119]
[81.44451904 118.30216980]
[75.67849731 102.44484711]
[61.01327133 99.29348755]
[45.89555740 103.95882416]
[35.07786942 93.72032166]
[20.41263962 90.56896210]
[5.74741125 87.41760254]
[-8.91781712 84.26625061]
[-23.58304596 81.11489105]
[-40.33895874 83.69863129]
[-47.46022797 68.31279755]
[-34.64704132 57.21060944]
[-20.43168831 66.44966125]
[-5.76645899 69.60102081]
[8.89877033 72.75238037]
[23.56399918 75.90373230]
[38.22922897 79.05509186]
[52.29798508 74.16435242]
[64.16462708 84.62825775]
[78.82985687 87.77961731]
[84.42967224 79.09928131]
[93.60114288 73.06797791]
[105.06499481 71.14051056]
[116.96371460 74.14960480]
[115.96183014 59.18309784]
[114.95993805 44.21659470]
[113.95804596 29.25009346]
[112.95616150 14.28358936]
[111.95426941 -0.68291372]
[110.95237732 -15.64941692]
[108.28690338 -19.30934334]
[107.09757233 -23.23571587]
[107.28048706 -26.91546059]
[108.57086182 -29.92611694]
[110.58841705 -31.98176765]
[110.92260742 -46.97804642]
[111.25679016 -61.97432327]
[111.59097290 -76.97059631]
[111.92515564 -91.96687317]
[112.25934601 -106.96315002]
[106.56738281 -122.93305969]
[120.33748627 -132.82348633]
[133.65333557 -122.32946014]
[127.25562286 -106.62896729]
[126.92143250 -91.63269043]
[126.58724976 -76.63641357]
[126.25306702 -61.64013672]
[125.91888428 -46.64385986]
[125.58469391 -31.64758301]
[125.91888428 -16.65130615]
[126.92076874 -1.68480325]
[127.92266083 13.28170013]
[128.92454529 28.24820328]
[129.92643738 43.21470642]
[130.92832947 58.18120956]
[131.93022156 73.14771271]
[144.83624268 80.79196167]
[158.44261169 74.47794342]
[172.04896545 68.16391754]
[185.65533447 61.84989929]
[199.26170349 55.53587723]
[212.86805725 49.22185516]
[226.47442627 42.90783310]
[240.08079529 36.59381104]
[253.68714905 30.27979088]
[265.50958252 18.12796974]
[280.45925903 26.12440491]
[276.91381836 42.70349121]
[260.00115967 43.88615417]
[246.39480591 50.20017624]
[232.78845215 56.51419830]
[219.18208313 62.82822037]
[205.57571411 69.14224243]
[191.96936035 75.45626068]
[178.36299133 81.77028656]
[164.75662231 88.08430481]
[151.15026855 94.39832306]
[144.08853149 107.63206482]
[146.41853333 122.44999695]
[148.74855042 137.26792908]
[151.07855225 152.08586121]
[154.71820068 166.63758850]
[159.63856506 180.80763245]
[164.55894470 194.97766113]
[169.47930908 209.14770508]
[174.39968872 223.31773376]
[181.46142578 236.55148315]
[190.49310303 248.52764893]
[199.52476501 260.50384521]
[208.55644226 272.48001099]
[217.58811951 284.45620728]
[226.61979675 296.43237305]
[235.65145874 308.40856934]
[244.68313599 320.38473511]
[253.71481323 332.36090088]
[269.01568604 338.26132202]
[271.28857422 354.50219727]
[258.19528198 364.37631226]
[243.20510864 357.72604370]
[241.73863220 341.39257812]
[232.70695496 329.41641235]
[223.67527771 317.44021606]
[214.64361572 305.46405029]
[205.61193848 293.48785400]
[196.58026123 281.51168823]
[187.54858398 269.53552246]
[178.51692200 257.55932617]
[169.48524475 245.58314514]
[170.14701843 260.56854248]
[165.13133240 274.70510864]
[155.17279053 285.92239380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[24 110]
[25 109]
[26 108]
[27 107]
[31 49]
[32 48]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
11 115 0.0 1 colorpair
12 114 0.16 1 colorpair
13 113 0.0 1 colorpair
14 112 0.0 1 colorpair
15 111 0.0 1 colorpair
24 110 0.0 1 colorpair
25 109 0.0 1 colorpair
26 108 0.0 0.6 colorpair
27 107 0.0 1 colorpair
31 49 0.0 1 colorpair
32 48 0.0 1 colorpair
34 46 0.0 1 colorpair
35 45 0.0 1 colorpair
36 44 0.0 1 colorpair
37 43 0.0 1 colorpair
38 42 0.0 1 colorpair
53 85 0.0 1 colorpair
54 84 0.16 1 colorpair
55 83 0.0 1 colorpair
56 82 0.0 1 colorpair
57 81 0.0 1 colorpair
58 80 0.0 1 colorpair
59 79 0.0 1 colorpair
64 78 0.0 1 colorpair
65 77 0.0 1 colorpair
66 76 0.0 1 colorpair
67 75 0.0 1 colorpair
68 74 0.0 1 colorpair
69 73 0.0 0.6 colorpair
86 106 0.0 1 colorpair
87 105 0.0 1 colorpair
88 104 0.16 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.16 1 colorpair
92 100 0.0 1 colorpair
93 99 0.0 1 colorpair
94 98 0.0 1 colorpair
116 137 0.0 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 1 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
114 cmark
26 108 1 gmark
84 cmark
69 73 1 gmark
104 cmark
101 cmark

% End Annotations
showpage
end
%%EOF
