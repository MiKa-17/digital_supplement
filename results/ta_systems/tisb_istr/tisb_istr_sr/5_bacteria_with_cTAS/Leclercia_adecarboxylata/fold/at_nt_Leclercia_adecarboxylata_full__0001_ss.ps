%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:00:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAUGCGUCAAAAUCCGUGCCGUAAAUUGCGCGUUCCUGUGCGAUCGCGUAUACUUCGUGCGUUGACGUAACACAGUGUGCUCUGCGGUCACCAGCCGCAAACACUGAAAAAA_ACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[101.41744232 142.23481750]
[92.47527313 141.58326721]
[83.87181854 139.05984497]
[75.99437714 134.77815247]
[69.19754028 128.93092346]
[63.78727722 121.78137207]
[60.00712204 113.65134430]
[58.02723694 104.90679932]
[57.93674850 95.94137573]
[43.49880219 91.87373352]
[29.06085777 87.80609131]
[14.62291145 83.73844910]
[0.18496490 79.67080688]
[-14.25298119 75.60316467]
[-28.69092751 71.53552246]
[-43.12887192 67.46788025]
[-47.46263885 68.75101471]
[-51.55393219 68.55860901]
[-54.95605469 67.15904999]
[-57.36065292 64.94131470]
[-58.62564850 62.35728455]
[-72.65089417 57.03821182]
[-86.67613220 51.71913910]
[-100.70137787 46.40006256]
[-114.72662354 41.08098984]
[-134.39179993 45.27476501]
[-146.08428955 29.93120384]
[-160.32963562 25.23331261]
[-174.57498169 20.53541946]
[-179.83583069 21.63985443]
[-184.50483704 20.66321754]
[-187.87489319 18.19699287]
[-189.58580017 15.03039551]
[-203.49081421 9.40450764]
[-217.39581299 3.77861953]
[-231.30082703 -1.84726858]
[-245.20584106 -7.47315645]
[-259.11087036 -13.09904480]
[-274.80557251 -11.10244274]
[-283.70181274 -23.04840660]
[-297.60684204 -28.67429543]
[-312.05813599 -22.27618980]
[-326.77056885 -28.04850769]
[-333.01553345 -42.56663513]
[-327.08798218 -57.21722412]
[-312.50463867 -63.30834198]
[-297.91754150 -57.22623444]
[-291.98095703 -42.57930756]
[-278.07592773 -36.95341873]
[-263.37579346 -39.35242462]
[-253.48497009 -27.00405693]
[-239.57995605 -21.37817001]
[-225.67494202 -15.75228119]
[-211.76992798 -10.12639332]
[-197.86491394 -4.50050545]
[-183.95989990 1.12538266]
[-169.87707520 6.29007673]
[-155.63174438 10.98796844]
[-141.38639832 15.68586063]
[-132.62507629 10.24611282]
[-122.09698486 10.57544327]
[-113.33312225 16.80751801]
[-109.40754700 27.05574799]
[-95.38230896 32.37482071]
[-81.35706329 37.69389343]
[-67.33181763 43.01296616]
[-53.30657578 48.33203888]
[-39.06122971 53.02993393]
[-24.62328529 57.09757233]
[-10.18533897 61.16521454]
[4.25260687 65.23285675]
[18.69055367 69.30049896]
[33.12849808 73.36814117]
[47.56644440 77.43578339]
[62.00439072 81.50342560]
[75.47055054 65.58930969]
[94.90628815 58.04951096]
[115.58164978 60.71894073]
[132.46501160 72.94795990]
[145.50996399 65.54328918]
[158.55491638 58.13861847]
[171.59986877 50.73394775]
[184.64482117 43.32927704]
[197.68978882 35.92460632]
[198.98554993 26.44601440]
[204.45599365 18.76689339]
[212.74426270 14.57054043]
[221.89498901 14.70299721]
[229.81512451 19.00551605]
[243.31942749 12.47606087]
[256.82373047 5.94660568]
[270.32803345 -0.58284986]
[283.83233643 -7.11230516]
[297.33663940 -13.64176083]
[303.94824219 -28.25908470]
[319.53359985 -32.06384659]
[332.13696289 -22.13735771]
[332.09008789 -6.09437370]
[319.42895508 3.75830364]
[303.86608887 -0.13745727]
[290.36178589 6.39199829]
[276.85748291 12.92145348]
[263.35317993 19.45090866]
[249.84887695 25.98036385]
[236.34457397 32.50981903]
[226.41392517 50.55453491]
[205.09445190 48.96956253]
[192.04949951 56.37423325]
[179.00454712 63.77890396]
[165.95957947 71.18357086]
[152.91462708 78.58824158]
[139.86967468 85.99291229]
[142.24374390 101.12060547]
[139.07099915 116.10115051]
[130.76802063 128.96752930]
[139.69110107 141.02484131]
[148.61418152 153.08215332]
[157.53726196 165.13946533]
[166.46034241 177.19676208]
[175.38340759 189.25407410]
[184.30648804 201.31138611]
[193.22956848 213.36869812]
[202.15264893 225.42601013]
[211.07572937 237.48330688]
[219.99879456 249.54061890]
[228.92187500 261.59793091]
[244.16882324 267.63638306]
[246.29483032 283.89712524]
[233.11286926 293.65252686]
[218.18338013 286.86703491]
[216.86457825 270.52099609]
[207.94149780 258.46368408]
[199.01841736 246.40638733]
[190.09533691 234.34907532]
[181.17225647 222.29177856]
[172.24917603 210.23446655]
[163.32611084 198.17715454]
[154.40303040 186.11984253]
[145.47994995 174.06254578]
[136.55686951 162.00523376]
[127.63379669 149.94792175]
[118.71071625 137.89060974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[27 59]
[28 58]
[29 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[84 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
9 75 0.0 1 colorpair
10 74 0.0 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.0 1 colorpair
23 65 0.0 1 colorpair
24 64 0.0 1 colorpair
25 63 0.0 1 colorpair
27 59 0.0 1 colorpair
28 58 0.0 1 colorpair
29 57 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
79 112 0.0 1 colorpair
80 111 0.0 1 colorpair
81 110 0.0 1 colorpair
82 109 0.0 1 colorpair
83 108 0.0 1 colorpair
84 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
94 100 0.0 1 colorpair
115 142 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.0 1 colorpair
119 138 0.0 0.6 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
119 138 1 gmark

% End Annotations
showpage
end
%%EOF
