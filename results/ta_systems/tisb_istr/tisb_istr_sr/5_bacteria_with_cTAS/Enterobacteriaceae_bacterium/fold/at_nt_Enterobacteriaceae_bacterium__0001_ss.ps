%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAUGCGUCAAAAUCCGUGCCCAAAAUUGCGCGUUCCUGUGCGAUCGCGUAUACUUCGGGCGUUGACGUAACACAGUGUGCUCUGCGGUCACCAGCCGCAAACGCUGUAAAAAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[100.64350891 137.05645752]
[93.05839539 136.40615845]
[85.76616669 134.21977234]
[79.07451630 130.58952332]
[73.26578522 125.66859436]
[68.58506775 119.66461182]
[65.22986603 112.83090973]
[63.34173203 105.45582581]
[63.00034332 97.85054016]
[48.51145554 93.96825409]
[34.02256775 90.08597565]
[19.53368187 86.20368958]
[5.04479408 82.32140350]
[-9.44409275 78.43911743]
[-23.93298149 74.55683136]
[-38.42186737 70.67454529]
[-32.33544922 84.38423157]
[-37.53741837 98.45332336]
[-51.07867813 104.90578461]
[-65.28242493 100.08358002]
[-72.09626770 86.72051239]
[-67.65730286 72.39237213]
[-54.48378754 65.22225952]
[-68.34197998 59.48200607]
[-82.20017242 53.74175262]
[-96.05836487 48.00150299]
[-109.91655731 42.26124954]
[-121.92806244 53.18362808]
[-137.43957520 57.77565384]
[-153.34664917 55.17095566]
[-166.48852539 45.93824768]
[-174.27621460 31.95813751]
[-175.20236206 16.04023170]
[-189.18247986 10.60366154]
[-203.16259766 5.16709089]
[-217.14271545 -0.26947966]
[-231.12283325 -5.70605040]
[-245.10295105 -11.14262104]
[-260.76913452 -8.93310356]
[-269.82675171 -20.75717545]
[-283.80685425 -26.19374657]
[-298.16995239 -19.60001373]
[-312.95941162 -25.17203903]
[-319.40090942 -39.60403442]
[-313.67285156 -54.33375549]
[-299.17355347 -60.62232208]
[-284.50521851 -54.73883438]
[-278.37030029 -40.17386246]
[-264.39016724 -34.73729324]
[-249.72396851 -37.33567047]
[-239.66638184 -25.12273979]
[-225.68626404 -19.68616867]
[-211.70614624 -14.24959755]
[-197.72602844 -8.81302738]
[-183.74591064 -3.37645650]
[-169.76579285 2.06011391]
[-160.07135010 -7.91876173]
[-147.25979614 -13.45358944]
[-133.26211548 -13.67401695]
[-120.20190430 -8.51342869]
[-110.07318878 1.27592003]
[-104.43604279 14.23237324]
[-104.17630768 28.40305901]
[-90.31811523 34.14331055]
[-76.45992279 39.88356018]
[-62.60172653 45.62381363]
[-48.74353409 51.36406326]
[-34.53958130 56.18565750]
[-20.05069542 60.06794357]
[-5.56180763 63.95022583]
[8.92708015 67.83251190]
[23.41596794 71.71479797]
[37.90485382 75.59708405]
[52.39374161 79.47937012]
[66.88262939 83.36165619]
[83.44857025 66.83911133]
[106.61082458 63.53231812]
[127.13843536 74.75916290]
[139.96211243 66.97756195]
[152.78579712 59.19596100]
[165.60946655 51.41436386]
[178.43315125 43.63276291]
[191.25682068 35.85116577]
[204.08050537 28.06956673]
[205.09919739 18.56019020]
[210.34104919 10.72680664]
[218.49998474 6.29035234]
[227.64772034 6.15318012]
[235.68902588 10.21829891]
[248.99418640 3.29206991]
[262.29934692 -3.63415909]
[275.60452271 -10.56038857]
[288.90966797 -17.48661804]
[302.21484375 -24.41284752]
[308.39099121 -39.21942520]
[323.85693359 -43.48373795]
[336.74850464 -33.93457031]
[337.17642212 -17.89722633]
[324.81240845 -7.67418194]
[309.14108276 -11.10768414]
[295.83590698 -4.18145514]
[282.53073120 2.74477410]
[269.22558594 9.67100334]
[255.92042542 16.59723282]
[242.61524963 23.52346230]
[233.21995544 41.85367203]
[211.86210632 40.89324570]
[199.03842163 48.67484283]
[186.21475220 56.45643997]
[173.39106750 64.23803711]
[160.56738281 72.01963806]
[147.74371338 79.80123901]
[134.92002869 87.58283997]
[137.05667114 100.63069916]
[134.47726440 113.59828949]
[127.51006317 124.83528137]
[136.37969971 136.93194580]
[145.24935913 149.02862549]
[154.11900330 161.12528992]
[162.98864746 173.22195435]
[171.85829163 185.31863403]
[180.72793579 197.41529846]
[189.59757996 209.51196289]
[198.46722412 221.60862732]
[207.33686829 233.70530701]
[216.20651245 245.80197144]
[225.07615662 257.89865112]
[240.29623413 264.00448608]
[242.35028076 280.27447510]
[229.12527466 289.97146606]
[214.22596741 283.11999512]
[212.97949219 266.76828003]
[204.10984802 254.67161560]
[195.24018860 242.57495117]
[186.37054443 230.47827148]
[177.50090027 218.38160706]
[168.63125610 206.28494263]
[159.76161194 194.18827820]
[150.89196777 182.09159851]
[142.02232361 169.99493408]
[133.15267944 157.89826965]
[124.28303528 145.80158997]
[115.41339111 133.70492554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
[78 113]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[84 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[116 143]
[117 142]
[118 141]
[119 140]
[120 139]
[121 138]
[122 137]
[123 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% Start Annotations
9 75 0.0 1 colorpair
10 74 0.0 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
23 67 0.0 1 colorpair
24 66 0.0 1 colorpair
25 65 0.0 1 colorpair
26 64 0.16 1 colorpair
27 63 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
78 113 0.0 1 colorpair
79 112 0.0 1 colorpair
80 111 0.0 1 colorpair
81 110 0.0 1 colorpair
82 109 0.0 1 colorpair
83 108 0.0 1 colorpair
84 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
94 100 0.0 1 colorpair
116 143 0.0 1 colorpair
117 142 0.0 1 colorpair
118 141 0.0 1 colorpair
119 140 0.0 1 colorpair
120 139 0.0 1 colorpair
121 138 0.0 1 colorpair
122 137 0.0 1 colorpair
123 136 0.0 1 colorpair
124 135 0.0 1 colorpair
125 134 0.0 1 colorpair
126 133 0.0 1 colorpair
127 132 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
26 cmark

% End Annotations
showpage
end
%%EOF
