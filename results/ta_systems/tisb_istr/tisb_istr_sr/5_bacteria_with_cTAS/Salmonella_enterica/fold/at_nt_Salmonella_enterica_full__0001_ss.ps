%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:02:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAUUCAUCAAAAUUCGCGCCGAAAUUGCGCGUUCUGCACAGAACGCGUAUACUUCUGCUGUUGACAUAACACAGUGUGCUUCGCGGCUACCACCCGCAUUACGCUGUAAGAACCUCGCUU_____CGGCGAGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[234.71870422 251.64984131]
[226.10003662 253.57426453]
[217.31286621 254.47024536]
[208.47947693 254.32490540]
[199.72288513 253.13983154]
[191.16505432 250.93107605]
[182.92526245 247.72897339]
[175.11837769 243.57771301]
[167.85333252 238.53471375]
[161.23150635 232.66983032]
[155.34538269 226.06439209]
[150.27726746 218.81008911]
[146.09805298 211.00767517]
[142.86634827 202.76557922]
[140.62751770 194.19841003]
[139.41316223 185.42533875]
[139.24064636 176.56845093]
[140.11277771 167.75108337]
[142.01786804 159.09602356]
[144.92979431 150.72387695]
[148.80842590 142.75135803]
[153.60017395 135.28967285]
[142.43861389 125.26870728]
[131.27705383 115.24774933]
[120.11548615 105.22679138]
[99.19446564 118.35326385]
[84.26226807 102.64469910]
[70.03684235 97.88682556]
[55.81142044 93.12895966]
[40.34265137 101.22364044]
[24.11310005 95.76824951]
[16.96178818 80.58279419]
[2.63728786 76.13209534]
[-11.68721390 71.68140411]
[-26.01171494 67.23071289]
[-40.33621597 62.78002167]
[-55.81067657 66.07419586]
[-65.66904449 54.90898895]
[-79.99354553 50.45829773]
[-94.31804657 46.00760269]
[-108.64254761 41.55691147]
[-124.50994873 45.69908905]
[-135.83674622 33.84010315]
[-130.97091675 18.17946243]
[-114.91799164 14.82749176]
[-104.19185638 27.23241043]
[-89.86735535 31.68310356]
[-75.54285431 36.13379669]
[-61.21834946 40.58448792]
[-46.76847458 36.97196579]
[-35.88552475 48.45552063]
[-21.56102180 52.90621185]
[-7.23652124 57.35690308]
[7.08798027 61.80759811]
[21.41248131 66.25829315]
[31.90544891 58.70772934]
[45.02727509 58.60033035]
[55.96281052 66.20063782]
[60.56929016 78.90353394]
[74.79471588 83.66140747]
[89.02014160 88.41927338]
[97.03309631 81.87022400]
[108.74613190 81.14641571]
[108.10079193 66.16030884]
[107.45545959 51.17419434]
[106.81012726 36.18808365]
[106.16479492 21.20197105]
[102.64777374 12.69142723]
[105.67031097 5.88719273]
[94.08519745 -4.86272001]
[93.57811737 -20.65887260]
[104.44991302 -32.12968826]
[120.25054169 -32.46973419]
[131.60577393 -21.47726822]
[131.77874756 -5.67392588]
[120.66683960 5.56445122]
[121.15090942 20.55663872]
[121.79624176 35.54275131]
[122.44157410 50.52886200]
[123.08690643 65.51497650]
[123.73223877 80.50108337]
[130.13644409 94.06523132]
[141.29800415 104.08618927]
[152.45956421 114.10714722]
[163.62112427 124.12810516]
[189.78527832 108.70516205]
[219.88037109 104.90869141]
[248.98220825 113.32961273]
[272.34109497 132.56227112]
[284.87997437 124.32962799]
[297.41885376 116.09697723]
[309.95773315 107.86433411]
[311.60571289 92.31383514]
[322.89962769 81.49803162]
[338.50683594 80.52382660]
[351.05807495 89.85119629]
[354.62707520 105.07605743]
[347.52862549 119.00968933]
[333.11441040 125.07305145]
[318.19036865 120.40322113]
[305.65148926 128.63586426]
[293.11260986 136.86849976]
[280.57373047 145.10115051]
[283.99057007 152.64877319]
[286.55157471 160.52803040]
[288.22531128 168.64221191]
[288.99121094 176.89175415]
[288.83990479 185.17538452]
[287.77322388 193.39143372]
[285.80426025 201.43908691]
[282.95721436 209.21954346]
[279.26699829 216.63734436]
[274.77890015 223.60142517]
[269.54800415 230.02632141]
[279.56896973 241.18788147]
[289.58993530 252.34944153]
[299.61087036 263.51098633]
[309.63183594 274.67254639]
[319.65280151 285.83410645]
[329.67376709 296.99566650]
[339.69470215 308.15722656]
[349.71566772 319.31878662]
[359.73663330 330.48034668]
[369.75759888 341.64190674]
[384.97015381 339.07641602]
[399.14575195 345.16372681]
[407.76104736 357.96139526]
[408.06692505 373.38574219]
[399.96575928 386.51489258]
[386.04260254 393.15939331]
[370.74029541 391.19900513]
[358.94174194 381.25930786]
[354.41183472 366.51199341]
[358.59603882 351.66287231]
[348.57507324 340.50131226]
[338.55410767 329.33975220]
[328.53314209 318.17819214]
[318.51220703 307.01663208]
[308.49124146 295.85507202]
[298.47027588 284.69351196]
[288.44931030 273.53195190]
[278.42837524 262.37039185]
[268.40740967 251.20883179]
[258.38644409 240.04727173]
[250.97491455 244.83853149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 85]
[23 84]
[24 83]
[25 82]
[27 61]
[28 60]
[29 59]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[38 49]
[39 48]
[40 47]
[41 46]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[69 76]
[89 103]
[90 102]
[91 101]
[92 100]
[114 144]
[115 143]
[116 142]
[117 141]
[118 140]
[119 139]
[120 138]
[121 137]
[122 136]
[123 135]
[124 134]
] def

init

% Start Annotations
22 85 0.16 1 colorpair
23 84 0.0 1 colorpair
24 83 0.16 1 colorpair
25 82 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 0.6 colorpair
38 49 0.16 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
63 81 0.0 1 colorpair
64 80 0.0 1 colorpair
65 79 0.0 1 colorpair
66 78 0.0 1 colorpair
67 77 0.0 1 colorpair
69 76 0.0 1 colorpair
89 103 0.16 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
114 144 0.0 1 colorpair
115 143 0.0 1 colorpair
116 142 0.16 1 colorpair
117 141 0.0 1 colorpair
118 140 0.0 1 colorpair
119 139 0.0 1 colorpair
120 138 0.0 1 colorpair
121 137 0.0 1 colorpair
122 136 0.0 1 colorpair
123 135 0.0 1 colorpair
124 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
85 cmark
24 cmark
36 51 1 gmark
49 cmark
103 cmark
116 cmark

% End Annotations
showpage
end
%%EOF
