%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:02:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAUUCAUCAAAAUUCGCGCCGAAAUUGCGCGUUCUGCACAGAACGCGUAUACUUCUGCUGUUGACAUAACACAGUGUGCUUCGCGGCUACCACCCGCAUUACGCUGUAAGAACCUCGCUU_____CGGCGAGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[115.42327118 165.60641479]
[114.58625031 180.58305359]
[110.38416290 194.98243713]
[103.03472137 208.05859375]
[92.91868591 219.13404846]
[80.56014252 227.63500977]
[66.59936523 233.12106323]
[51.75964355 235.30798340]
[36.80979156 234.08247375]
[22.52433014 229.50802612]
[9.64336681 221.82162476]
[-1.16576087 211.42149353]
[-9.34305286 198.84643555]
[-14.46485806 184.74795532]
[-16.26582527 169.85646057]
[-14.65264988 154.94346619]
[-9.70890808 140.78157043]
[-1.69072497 128.10447693]
[8.98649120 117.56895447]
[21.76957512 109.72084808]
[35.99625778 104.96674347]
[50.92948151 103.55294800]
[65.80184174 105.55428314]
[80.56687164 102.90967560]
[66.34144592 98.15180206]
[50.79969025 101.11226654]
[41.18383789 89.73752594]
[26.95841599 84.97966003]
[12.73299217 80.22179413]
[-2.73577738 88.31647491]
[-18.96532822 82.86108398]
[-26.11664009 67.67562103]
[-40.44114304 63.22492981]
[-54.76564407 58.77423859]
[-69.09014130 54.32354736]
[-83.41464233 49.87285233]
[-97.73914337 45.42216110]
[-112.06364441 40.97146988]
[-126.38815308 36.52077866]
[-140.71264648 32.07008362]
[-155.03715515 27.61939240]
[-170.90455627 31.76156998]
[-182.23135376 19.90258408]
[-177.36552429 4.24194336]
[-161.31259155 0.88997233]
[-150.58645630 13.29489136]
[-136.26196289 17.74558258]
[-121.93745422 22.19627571]
[-107.61295319 26.64696884]
[-93.28845215 31.09766006]
[-78.96395111 35.54835129]
[-64.63945007 39.99904633]
[-50.31494904 44.44973755]
[-35.99044800 48.90042877]
[-21.66594887 53.35112000]
[-11.17298031 45.80056381]
[1.94884610 45.69316483]
[12.88438129 53.29346848]
[17.49086189 65.99636841]
[31.71628571 70.75423431]
[45.94170761 75.51210785]
[60.46596909 72.21132660]
[71.09931946 83.92637634]
[85.32474518 88.68424988]
[71.47278595 82.92896271]
[61.31268692 71.89390564]
[56.71867752 57.61472321]
[58.53821564 42.72549057]
[66.43564606 29.97282219]
[78.95413971 21.70920181]
[93.78440094 19.45902061]
[108.19069672 23.63736916]
[119.51550293 33.47346497]
[125.66972351 47.15284729]
[125.51810455 62.15208054]
[119.08860016 75.70426178]
[107.56998444 85.30800629]
[119.74307251 76.54353333]
[131.91615295 67.77906036]
[144.08924866 59.01458359]
[156.26232910 50.25011063]
[168.43540955 41.48563766]
[180.60850525 32.72116852]
[192.78158569 23.95669365]
[192.37709045 11.98877907]
[197.77565002 1.43497372]
[207.51712036 -5.10661459]
[219.08920288 -6.08952761]
[229.57484436 -1.38314950]
[242.11372375 -9.61579418]
[254.65260315 -17.84843826]
[267.19149780 -26.08108330]
[268.83944702 -41.63158798]
[280.13336182 -52.44738770]
[295.74057007 -53.42159653]
[308.29183960 -44.09421921]
[311.86080933 -28.86935997]
[304.76235962 -14.93573093]
[290.34814453 -8.87236595]
[275.42413330 -13.54220009]
[262.88525391 -5.30955601]
[250.34635925 2.92308831]
[237.80747986 11.15573311]
[235.23312378 29.22674370]
[220.05007935 39.92030716]
[201.54606628 36.12977982]
[189.37297058 44.89425278]
[177.19989014 53.65872574]
[165.02680969 62.42319870]
[152.85371399 71.18766785]
[140.68063354 79.95214081]
[128.50755310 88.71661377]
[116.33445740 97.48108673]
[114.72373962 112.39435577]
[124.74469757 123.55591583]
[134.76565552 134.71746826]
[144.78662109 145.87902832]
[154.80757141 157.04058838]
[164.82853699 168.20214844]
[174.84948730 179.36370850]
[184.87045288 190.52526855]
[194.89140320 201.68682861]
[204.91236877 212.84838867]
[214.93331909 224.00994873]
[224.95428467 235.17150879]
[240.57600403 234.46739197]
[252.96405029 244.01045227]
[256.26916504 259.29476929]
[248.93078613 273.10354614]
[234.41386414 278.91668701]
[219.57283020 273.98941040]
[211.41519165 260.64825439]
[213.79272461 245.19245911]
[203.77175903 234.03089905]
[193.75080872 222.86935425]
[183.72984314 211.70779419]
[173.70889282 200.54623413]
[163.68792725 189.38467407]
[153.66697693 178.22311401]
[143.64601135 167.06155396]
[133.62506104 155.89999390]
[123.60409546 144.73843384]
[113.58313751 133.57687378]
[103.56217957 122.41531372]
[107.00526428 137.01480103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 64]
[25 63]
[27 61]
[28 60]
[29 59]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[89 103]
[90 102]
[91 101]
[92 100]
[114 144]
[115 143]
[116 142]
[117 141]
[118 140]
[119 139]
[120 138]
[121 137]
[122 136]
[123 135]
[124 134]
[125 133]
] def

init

% Start Annotations
24 64 0.0 0.6 colorpair
25 63 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 0.6 colorpair
37 50 0.0 0.6 colorpair
38 49 0.16 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
77 113 0.0 0.6 colorpair
78 112 0.0 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
82 108 0.0 1 colorpair
83 107 0.0 0.2 colorpair
84 106 0.16 1 colorpair
89 103 0.16 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
114 144 0.0 1 colorpair
115 143 0.0 1 colorpair
116 142 0.16 1 colorpair
117 141 0.0 1 colorpair
118 140 0.0 1 colorpair
119 139 0.0 1 colorpair
120 138 0.0 1 colorpair
121 137 0.0 1 colorpair
122 136 0.0 1 colorpair
123 135 0.0 1 colorpair
124 134 0.0 1 colorpair
125 133 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
24 64 1 gmark
36 51 1 gmark
37 50 1 gmark
49 cmark
77 113 1 gmark
83 107 2 gmark
106 cmark
103 cmark
116 cmark

% End Annotations
showpage
end
%%EOF
