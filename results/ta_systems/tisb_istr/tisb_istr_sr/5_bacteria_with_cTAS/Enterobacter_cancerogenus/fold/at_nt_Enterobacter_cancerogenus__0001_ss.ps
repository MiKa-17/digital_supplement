%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:38:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAACGUCAAAAUCCGUGCCAUAAAUUGCGCGUUCGUCUUCGAUCGCGUAUACUUUUGCCGUUGACGUAACACAGUGUGUUCUGCGGAAACCAACCGCAAAACCCUGAUAAAAACCUCGCUUAGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[97.02946472 148.03184509]
[88.44117737 146.71484375]
[80.22969055 143.87501526]
[72.66266632 139.60496521]
[65.98679352 134.04385376]
[60.41967773 127.37299347]
[56.14280701 119.80982208]
[53.29558945 111.60089111]
[51.97084427 103.01379395]
[52.21175766 94.32845306]
[37.77381134 90.26081085]
[23.33586502 86.19316864]
[8.89791775 82.12552643]
[-5.54002810 78.05788422]
[-19.97797394 73.99024200]
[-34.41592026 69.92259979]
[-38.74968338 71.20574188]
[-42.84098053 71.01333618]
[-46.24310303 69.61376953]
[-48.64769745 67.39603424]
[-49.91269684 64.81201172]
[-63.93793869 59.49293518]
[-73.15076447 59.36668396]
[-78.21072388 53.89989471]
[-92.11573792 48.27400589]
[-102.29234314 59.48391342]
[-115.66509247 66.52249146]
[-130.61097717 68.55731964]
[-145.32354736 65.36192322]
[-158.03115845 57.34082413]
[-167.21040344 45.47845078]
[-171.76867676 31.21831894]
[-171.17417908 16.28741455]
[-185.07919312 10.66152668]
[-198.98420715 5.03563881]
[-212.88922119 -0.59024906]
[-226.79423523 -6.21613693]
[-240.69924927 -11.84202480]
[-256.39395142 -9.84542274]
[-265.29022217 -21.79138756]
[-279.19522095 -27.41727448]
[-293.10021973 -33.04316330]
[-309.25701904 -30.23415375]
[-319.55895996 -42.99354553]
[-313.40829468 -58.19556808]
[-297.13232422 -60.20168686]
[-287.47433472 -46.94817734]
[-273.56933594 -41.32228851]
[-259.66430664 -35.69639969]
[-244.96418762 -38.09540558]
[-235.07334900 -25.74703789]
[-221.16835022 -20.12114906]
[-207.26333618 -14.49526215]
[-193.35832214 -8.86937428]
[-179.45330811 -3.24348593]
[-165.54829407 2.38240218]
[-155.59317017 -8.76124382]
[-142.40139771 -15.83981228]
[-127.55599976 -17.98195839]
[-112.84597778 -14.91003418]
[-100.05067444 -6.97590876]
[-90.72457886 4.87922335]
[-86.00845337 19.23645782]
[-86.48985291 34.36899185]
[-72.58483887 39.99488068]
[-58.61886597 45.46768951]
[-44.59362030 50.78676605]
[-30.34827805 55.48465729]
[-15.91033173 59.55229950]
[-1.47238600 63.61994171]
[12.96555996 67.68758392]
[27.40350533 71.75522614]
[41.84145355 75.82286835]
[56.27939987 79.89051056]
[67.98839569 64.06756592]
[85.05319214 54.25641632]
[104.61871338 52.09853745]
[123.41148376 57.95496368]
[138.28732300 70.84586334]
[151.49179077 63.72954559]
[164.69625854 56.61322784]
[170.82479858 49.73331833]
[178.26988220 49.48923874]
[184.54806519 42.74561691]
[191.99673462 42.66514587]
[205.50103760 36.13569260]
[219.00534058 29.60623741]
[228.06143188 16.63327217]
[242.88764954 18.05891991]
[256.39196777 11.52946377]
[269.89627075 5.00000811]
[283.40057373 -1.52944720]
[296.90487671 -8.05890274]
[300.56411743 -23.26232147]
[313.17047119 -32.51507950]
[328.77163696 -31.44830132]
[340.00119019 -20.56569099]
[341.55688477 -5.00568438]
[332.70416260 7.88476038]
[317.62304688 12.01916981]
[303.43432617 5.44540071]
[289.93002319 11.97485638]
[276.42572021 18.50431252]
[262.92141724 25.03376770]
[249.41709900 31.56322289]
[241.32693481 44.06915665]
[225.53479004 43.11053848]
[212.03048706 49.63999557]
[198.52618408 56.16945267]
[185.09442139 62.84684753]
[171.81257629 69.81769562]
[158.60810852 76.93401337]
[145.40364075 84.05033875]
[148.09603882 101.62889099]
[144.22048950 118.98500824]
[134.30624390 133.74855042]
[143.22932434 145.80586243]
[152.15238953 157.86315918]
[161.07546997 169.92047119]
[169.99855042 181.97778320]
[178.92163086 194.03509521]
[187.84471130 206.09239197]
[196.76777649 218.14970398]
[205.69085693 230.20701599]
[214.61393738 242.26432800]
[223.53701782 254.32164001]
[238.78395081 260.36007690]
[240.90997314 276.62081909]
[227.72799683 286.37622070]
[212.79852295 279.59072876]
[211.47970581 263.24472046]
[202.55662537 251.18740845]
[193.63356018 239.13009644]
[184.71047974 227.07278442]
[175.78739929 215.01547241]
[166.86431885 202.95817566]
[157.94123840 190.90086365]
[149.01815796 178.84355164]
[140.09509277 166.78623962]
[131.17201233 154.72892761]
[122.24893188 142.67163086]
[114.21342468 145.97674561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[24 65]
[25 64]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
[42 47]
[79 113]
[80 112]
[81 111]
[83 110]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
10 74 0.0 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.0 1 colorpair
24 65 0.0 1 colorpair
25 64 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
42 47 0.0 1 colorpair
79 113 0.0 1 colorpair
80 112 0.0 1 colorpair
81 111 0.0 1 colorpair
83 110 0.0 1 colorpair
85 109 0.0 1 colorpair
86 108 0.0 1 colorpair
87 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.0 1 colorpair
119 138 0.0 1 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
