%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:33:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAACCAUCAAAAUUCGUGCCGAAAUUGCGUGUUCUUCGCAGAACGCGUAUACUUUUUU_CGUUGACAUAACACAGUGUGUUCGGCGGCUACCAACCGCACAACGCUGA_AAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[103.97352600 160.23815918]
[94.99359894 160.16111755]
[86.12445068 158.75282288]
[77.56234741 156.04441833]
[69.49675751 152.09584045]
[62.10614395 146.99447632]
[55.55406570 140.85319519]
[49.98550034 133.80790710]
[45.52367020 126.01449585]
[42.26731491 117.64543152]
[40.28848648 108.88591003]
[39.63097382 99.92974854]
[40.30932617 90.97515106]
[25.87138176 86.90750885]
[11.43343449 82.83986664]
[-3.00451112 78.77222443]
[-7.33827591 80.05536652]
[-11.42957115 79.86296082]
[-14.83169365 78.46339417]
[-17.23628998 76.24565887]
[-18.50128555 73.66162872]
[-32.52653122 68.34255981]
[-41.94737625 80.89102936]
[-54.50139236 90.28032684]
[-69.17337036 95.76132202]
[-84.77967834 96.90052795]
[-100.06375122 93.61437988]
[-113.79724884 86.17530823]
[-124.87879944 75.18913269]
[-132.42228699 61.54579926]
[-135.82774353 46.34724045]
[-134.82905579 30.81839752]
[-148.96775818 25.80870438]
[-163.10646057 20.79901314]
[-177.24516296 15.78932285]
[-191.38388062 10.77963066]
[-205.52258301 5.76993942]
[-219.66128540 0.76024806]
[-233.79998779 -4.24944353]
[-247.93869019 -9.25913525]
[-262.07739258 -14.26882648]
[-278.09521484 -10.75285435]
[-288.94766235 -23.04742622]
[-283.47067261 -38.50494003]
[-267.29852295 -41.22403336]
[-257.06771851 -28.40753174]
[-242.92900085 -23.39784050]
[-228.79029846 -18.38814926]
[-214.65159607 -13.37845707]
[-200.51289368 -8.36876583]
[-186.37419128 -3.35907459]
[-172.23547363 1.65061700]
[-158.09677124 6.66030836]
[-143.95806885 11.67000008]
[-129.81936646 16.67969131]
[-121.63461304 4.86689520]
[-110.65312195 -4.42228317]
[-97.62467957 -10.54532433]
[-83.44099426 -13.07616901]
[-69.07463837 -11.83485603]
[-55.51241302 -6.90030766]
[-43.68750763 1.39466166]
[-34.41531754 12.48578167]
[-28.33722496 25.61570740]
[-25.87621307 39.88573456]
[-27.20745659 54.31731415]
[-13.18221283 59.63638687]
[1.06313086 64.33428192]
[15.50107670 68.40192413]
[29.93902397 72.46955872]
[44.37696838 76.53720093]
[52.48030090 62.76691818]
[63.91229248 51.60473633]
[77.87215424 43.83254623]
[93.38203430 39.99477768]
[109.35548401 40.36025620]
[124.67360687 44.90338135]
[138.26338196 53.30591583]
[149.17289734 64.97927856]
[162.37736511 57.86295700]
[175.58183289 50.74663925]
[188.78630066 43.63031769]
[201.99076843 36.51399994]
[215.19523621 29.39768028]
[215.22727966 16.80880547]
[220.60594177 5.50697470]
[230.24308777 -2.36560702]
[242.25018311 -5.34615326]
[254.30810547 -2.92281222]
[264.11511230 4.37864065]
[277.61941528 -2.15081477]
[291.12371826 -8.68027020]
[304.62802124 -15.20972538]
[308.28726196 -30.41314507]
[320.89361572 -39.66590118]
[336.49478149 -38.59912491]
[347.72433472 -27.71651459]
[349.28002930 -12.15650749]
[340.42730713 0.73393756]
[325.34619141 4.86834621]
[311.15747070 -1.70542216]
[297.65316772 4.82403326]
[284.14886475 11.35348892]
[270.64456177 17.88294411]
[268.37530518 35.33461761]
[256.01797485 48.08335876]
[238.33705139 50.94549942]
[222.31155396 42.60214996]
[209.10708618 49.71846771]
[195.90261841 56.83478928]
[182.69815063 63.95110703]
[169.49368286 71.06742859]
[156.28921509 78.18374634]
[160.35279846 101.40113831]
[155.21615601 124.40493011]
[141.66229248 143.68841553]
[150.58537292 155.74572754]
[159.50845337 167.80303955]
[168.43153381 179.86033630]
[177.35459900 191.91764832]
[186.27767944 203.97496033]
[195.20075989 216.03227234]
[204.12384033 228.08956909]
[213.04692078 240.14688110]
[221.96998596 252.20419312]
[230.89306641 264.26150513]
[246.14001465 270.29995728]
[248.26602173 286.56069946]
[235.08406067 296.31610107]
[220.15457153 289.53060913]
[218.83575439 273.18457031]
[209.91268921 261.12725830]
[200.98960876 249.06996155]
[192.06652832 237.01264954]
[183.14344788 224.95533752]
[174.22036743 212.89804077]
[165.29730225 200.84072876]
[156.37422180 188.78341675]
[147.45114136 176.72610474]
[138.52806091 164.66880798]
[129.60498047 152.61149597]
[121.47283173 156.42111206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[90 104]
[91 103]
[92 102]
[93 101]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.16 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
79 113 0.0 1 colorpair
80 112 0.0 1 colorpair
81 111 0.0 1 colorpair
82 110 0.16 1 colorpair
83 109 0.0 1 colorpair
84 108 0.16 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.16 1 colorpair
119 138 0.0 1 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
66 cmark
110 cmark
108 cmark
118 cmark

% End Annotations
showpage
end
%%EOF
