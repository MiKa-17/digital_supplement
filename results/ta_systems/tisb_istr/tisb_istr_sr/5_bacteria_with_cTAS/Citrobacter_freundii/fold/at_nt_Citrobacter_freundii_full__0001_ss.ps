%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAACAUCAAAAUUCGUGCCGAAAUUGCGUGUUCUUCGUAGAACGCGUAUACUUUUUU_CGUUGACAUAACACAGUGUGUUCGGCGGCUACCAACCGCACAACGCUGAAAA_A_ACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[102.31478882 152.65270996]
[94.01817322 165.14936829]
[81.54300690 173.47824097]
[66.82047272 176.35000610]
[52.12966919 173.32011414]
[39.74477005 164.85758972]
[31.58299828 152.27246094]
[28.90781784 137.51293945]
[32.13335419 122.86384583]
[40.76028442 110.59289551]
[53.45313263 102.59967804]
[68.24701691 100.12155914]
[82.85483551 103.54355621]
[68.36595154 99.66127014]
[53.87705994 95.77898407]
[39.38817215 91.89669800]
[35.07482529 93.23381042]
[30.98466492 93.09464264]
[27.56684303 91.74121094]
[25.13414192 89.55754089]
[23.83440208 86.99260712]
[9.73901367 81.86230469]
[0.48692492 94.53667450]
[-11.94073772 104.09384918]
[-26.53874397 109.77104187]
[-42.12919235 111.11890411]
[-57.45654678 108.03704834]
[-71.28874969 100.78149414]
[-82.51627350 89.94344330]
[-90.24108124 76.40106964]
[-93.84850311 61.24838638]
[-93.05609131 45.70688629]
[-107.26004028 40.88529205]
[-121.46399689 36.06370163]
[-135.66795349 31.24210930]
[-149.87190247 26.42051697]
[-164.07585144 21.59892464]
[-178.27980042 16.77733421]
[-192.48374939 11.95574188]
[-206.68771362 7.13414955]
[-220.89166260 2.31255746]
[-236.86138916 6.04081869]
[-247.87605286 -6.10862923]
[-242.60472107 -21.63747597]
[-226.47007751 -24.57097626]
[-216.07006836 -11.89139462]
[-201.86611938 -7.06980228]
[-187.66217041 -2.24821043]
[-173.45820618 2.57338142]
[-159.25425720 7.39497328]
[-145.05030823 12.21656513]
[-130.84635925 17.03815651]
[-116.64240265 21.85974884]
[-102.43845367 26.68134117]
[-88.23449707 31.50293350]
[-80.20779419 19.58316612]
[-69.35137177 10.14936161]
[-56.40629578 3.85384631]
[-42.25837708 1.13443625]
[-27.87756538 2.18400121]
[-14.25144577 6.93679762]
[-2.31742334 15.07254982]
[7.10176945 26.03802299]
[13.35478878 39.08464050]
[16.00671959 53.31959152]
[14.86931515 67.76692200]
[28.96470451 72.89722443]
[43.27045822 77.40780640]
[57.75934601 81.29009247]
[72.24823761 85.17237854]
[86.73712158 89.05466461]
[75.31334686 79.33368683]
[72.23040009 64.65392303]
[78.77843475 51.15861893]
[92.21721649 44.49534225]
[106.92282104 47.45256042]
[116.74119568 58.79273224]
[117.56351471 73.77017212]
[109.04463196 86.11782837]
[122.03501129 78.61782837]
[135.02539062 71.11782837]
[148.01577759 63.61782455]
[161.00614929 56.11782455]
[173.99653625 48.61782455]
[173.65971375 36.03531647]
[178.70349121 24.58218002]
[188.10350037 16.43079376]
[200.01574707 13.09825325]
[212.13810730 15.16428471]
[222.15521240 22.17145348]
[235.46037292 15.24522400]
[248.76553345 8.31899548]
[262.07070923 1.39276600]
[265.27841187 -13.91228294]
[277.60543823 -23.53404617]
[293.23132324 -22.92942238]
[304.77801514 -12.38389587]
[306.79351807 3.12325788]
[298.32614136 16.27003670]
[283.37396240 20.84893036]
[268.99691772 14.69792843]
[255.69175720 21.62415695]
[242.38659668 28.55038643]
[229.08143616 35.47661591]
[227.32868958 52.98904419]
[215.35159302 66.09748077]
[197.76112366 69.47852325]
[181.49653625 61.60820770]
[168.50614929 69.10820770]
[155.51577759 76.60820770]
[142.52539062 84.10820770]
[129.53501892 91.60820770]
[116.54463196 99.10820770]
[113.77893066 113.85102844]
[123.16777802 125.54930115]
[132.55662537 137.24757385]
[141.94548035 148.94583130]
[149.81967163 153.72679138]
[151.40820312 161.00325012]
[159.17622375 165.95484924]
[160.60563660 173.26422119]
[169.47528076 185.36090088]
[178.34492493 197.45756531]
[187.21456909 209.55422974]
[196.08421326 221.65089417]
[204.95387268 233.74757385]
[213.82351685 245.84423828]
[229.04357910 251.95008850]
[231.09764099 268.22009277]
[217.87263489 277.91705322]
[202.97332764 271.06558228]
[201.72683716 254.71388245]
[192.85719299 242.61721802]
[183.98754883 230.52055359]
[175.11790466 218.42387390]
[166.24826050 206.32720947]
[157.37861633 194.23054504]
[148.50897217 182.13386536]
[139.50790405 170.13467407]
[130.24722290 158.33468628]
[120.85836792 146.63641357]
[111.46951294 134.93815613]
[102.08065796 123.23988342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[90 104]
[91 103]
[92 102]
[93 101]
[114 143]
[115 142]
[116 141]
[117 140]
[119 139]
[121 138]
[122 137]
[123 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% Start Annotations
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.16 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
79 113 0.0 1 colorpair
80 112 0.0 1 colorpair
81 111 0.0 1 colorpair
82 110 0.16 1 colorpair
83 109 0.0 1 colorpair
84 108 0.16 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
114 143 0.0 1 colorpair
115 142 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
119 139 0.0 1 colorpair
121 138 0.0 1 colorpair
122 137 0.0 1 colorpair
123 136 0.0 1 colorpair
124 135 0.0 1 colorpair
125 134 0.0 1 colorpair
126 133 0.0 1 colorpair
127 132 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
66 cmark
110 cmark
108 cmark

% End Annotations
showpage
end
%%EOF
