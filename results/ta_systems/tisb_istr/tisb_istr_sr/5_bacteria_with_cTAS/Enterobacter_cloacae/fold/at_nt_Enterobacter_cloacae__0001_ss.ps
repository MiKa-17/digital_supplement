%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:38:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAACGUCAAAAUCCGUGCCGGAAUUGCGCGUUCGUCUUCGAUCGCGUAUACUU_UUUGCGUUGACGUAACACAGUGUGUUCUGCGGCGACCAACCGCAAAACC_CUGA_UAAAAACCUCGCUCAGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[97.06577301 150.85997009]
[88.03760529 149.52015686]
[79.39338684 146.59091187]
[71.41058350 142.16622925]
[64.34542084 136.38813782]
[58.42465973 129.44209290]
[53.83834457 121.55104065]
[50.73368454 112.96826172]
[49.21032715 103.96924591]
[49.31716919 94.84282684]
[34.78037643 91.14396667]
[20.24357986 87.44510651]
[5.70678377 83.74624634]
[-8.83001137 80.04737854]
[-23.36680794 76.34851837]
[-37.90360260 72.64965820]
[-42.19616318 74.03969574]
[-46.28452682 73.95298004]
[-49.71722031 72.64520264]
[-52.17716599 70.49548340]
[-53.51089096 67.94983673]
[-67.67296600 63.00661087]
[-81.83504486 58.06338120]
[-95.99713135 53.12015152]
[-105.98341370 65.49011993]
[-119.57192993 73.69036102]
[-135.11808777 76.74975586]
[-150.74761963 74.31809998]
[-164.58259583 66.70609283]
[-174.96701050 54.84571457]
[-180.66503906 40.17622757]
[-181.00805664 24.46947861]
[-195.27391052 19.83422279]
[-209.53976440 15.19896889]
[-223.80560303 10.56371403]
[-238.07145691 5.92845869]
[-252.33729553 1.29320383]
[-267.85299683 4.38732576]
[-277.56640625 -6.90422726]
[-291.83224487 -11.53948212]
[-306.09808350 -16.17473793]
[-322.01763916 -12.23775768]
[-333.19039917 -24.24198723]
[-328.12280273 -39.83850479]
[-312.02792358 -42.98294830]
[-301.46282959 -30.44058418]
[-287.19699097 -25.80533028]
[-272.93115234 -21.17007446]
[-258.43582153 -24.59574127]
[-247.70204163 -12.97264385]
[-233.43620300 -8.33738899]
[-219.17034912 -3.70213413]
[-204.90449524 0.93312085]
[-190.63865662 5.56837559]
[-176.37280273 10.20363045]
[-167.97328186 -1.23807204]
[-156.42698669 -9.53014755]
[-142.86047363 -13.84717369]
[-128.60247803 -13.75236320]
[-115.05377960 -9.24172306]
[-103.54960632 -0.74574757]
[-95.22804260 10.91162682]
[-90.91741180 24.59291458]
[-91.05390167 38.95807266]
[-76.89182281 43.90130234]
[-62.72974014 48.84452820]
[-48.56766129 53.78775787]
[-34.20474243 58.11286545]
[-19.66794586 61.81172562]
[-5.13115025 65.51058960]
[9.40564537 69.20944977]
[23.94244003 72.90830994]
[38.47923660 76.60717010]
[53.01603317 80.30603027]
[64.87886047 63.09672928]
[82.65380096 52.09952927]
[103.34870911 49.16564560]
[123.47991180 54.78894806]
[139.65863037 68.02284241]
[152.59451294 60.42922211]
[165.53038025 52.83560181]
[173.51460266 39.17679596]
[188.40744019 39.40631104]
[194.27828979 32.30965042]
[201.70684814 31.79179192]
[214.80419922 24.48020172]
[227.90155029 17.16861153]
[236.17980957 3.68598866]
[251.06417847 4.23809290]
[264.16152954 -3.07349706]
[277.25888062 -10.38508701]
[290.35623169 -17.69667625]
[303.45358276 -25.00826645]
[306.21325684 -40.40041351]
[318.25424194 -50.37784195]
[333.89111328 -50.22951889]
[345.74066162 -40.02547455]
[348.20785522 -24.58374596]
[340.12777710 -11.19544792]
[325.31561279 -6.18212461]
[310.76516724 -11.91091347]
[297.66781616 -4.59932375]
[284.57046509 2.71226621]
[271.47311401 10.02385616]
[258.37576294 17.33544540]
[251.03431702 30.29509544]
[235.21313477 30.26596451]
[222.11578369 37.57755661]
[209.01843262 44.88914490]
[196.00105286 52.34218597]
[188.94210815 65.45783997]
[173.12400818 65.77147675]
[160.18812561 73.36509705]
[147.25225830 80.95871735]
[150.74462891 95.49129486]
[149.86920166 110.41195679]
[144.70130920 124.43640900]
[135.68579102 136.35752869]
[144.50257874 148.49278259]
[153.31935120 160.62803650]
[162.13613892 172.76329041]
[170.95291138 184.89854431]
[179.76968384 197.03379822]
[188.58647156 209.16905212]
[197.40324402 221.30430603]
[206.22003174 233.43955994]
[215.03680420 245.57481384]
[223.85359192 257.71008301]
[239.04687500 263.88226318]
[241.02992249 280.16107178]
[227.76272583 289.80026245]
[212.89344788 282.88385010]
[211.71832275 266.52685547]
[202.90155029 254.39160156]
[194.08477783 242.25634766]
[185.26799011 230.12109375]
[176.45121765 217.98582458]
[167.63442993 205.85057068]
[158.81765747 193.71531677]
[150.00088501 181.58006287]
[141.18409729 169.44480896]
[132.36732483 157.30955505]
[123.55054474 145.17430115]
[115.11185455 148.65159607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[23 65]
[24 64]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
[79 114]
[80 113]
[81 112]
[83 110]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[118 143]
[119 142]
[120 141]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% Start Annotations
10 74 0.16 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.16 1 colorpair
23 65 0.0 1 colorpair
24 64 0.16 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 0.6 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 0.6 colorpair
41 46 0.0 0.6 colorpair
79 114 0.16 1 colorpair
80 113 0.0 1 colorpair
81 112 0.0 1 colorpair
83 110 0.0 1 colorpair
85 109 0.16 1 colorpair
86 108 0.0 1 colorpair
87 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.16 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
118 143 0.0 1 colorpair
119 142 0.0 1 colorpair
120 141 0.0 1 colorpair
121 140 0.0 1 colorpair
122 139 0.0 1 colorpair
123 138 0.0 1 colorpair
124 137 0.0 1 colorpair
125 136 0.16 1 colorpair
126 135 0.0 1 colorpair
127 134 0.0 1 colorpair
128 133 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 cmark
66 cmark
64 cmark
34 53 1 gmark
40 47 1 gmark
41 46 1 gmark
79 cmark
109 cmark
104 cmark
136 cmark

% End Annotations
showpage
end
%%EOF
