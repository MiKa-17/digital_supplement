%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:38:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAACGUCAAAAUCCGUGCCGGAAUUGCGCGUUCGUCUUCGAUCGCGUAUACUU_UUCGCGUUGACGUAACACAGUGUGUUCUGCGGCAACCAACCGCAAAACC_CUGA_UAAAAACCUCGCUUAGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[259.62243652 156.27946472]
[250.55314636 154.97534180]
[241.85470581 152.07006836]
[233.80769348 147.65426636]
[226.67216492 141.86730957]
[220.67936707 134.89294434]
[216.02415466 126.95346832]
[212.85871887 118.30261230]
[211.28753662 109.21746063]
[211.36402893 99.98956299]
[196.82722473 96.29070282]
[182.29043579 92.59183502]
[167.75364685 88.89297485]
[153.21684265 85.19411469]
[138.68005371 81.49525452]
[124.14325714 77.79639435]
[135.01988220 92.21773529]
[137.13549805 111.74135590]
[128.32368469 131.04049683]
[109.61029053 144.05809021]
[85.29983521 145.86935425]
[71.03398895 150.50460815]
[56.76814270 155.13986206]
[42.50229645 159.77511597]
[28.23644638 164.41036987]
[22.54665375 178.97610474]
[8.80063248 186.43136597]
[-6.51116657 183.25601196]
[-16.15897942 170.94935608]
[-15.58740425 155.32221985]
[-5.06632137 143.75326538]
[10.43653584 141.70498657]
[23.60119247 150.14453125]
[37.86703873 145.50927734]
[52.13288879 140.87402344]
[66.39873505 136.23876953]
[80.66458130 131.60351562]
[80.66458130 124.10350800]
[80.66458130 101.60350800]
[66.39873505 96.96825409]
[52.13288879 92.33300018]
[36.21333313 96.26998138]
[25.04057503 84.26574707]
[30.10819054 68.66923523]
[46.20304871 65.52478790]
[56.76814270 78.06715393]
[71.03398895 82.70240784]
[85.29983521 87.33766174]
[94.24794769 75.29808807]
[103.19528198 63.25959778]
[94.64347076 50.93618011]
[86.09166718 38.61276245]
[77.53986359 26.28934479]
[62.24077606 27.64343452]
[48.32110977 21.15201950]
[39.52518463 8.56125832]
[38.21905899 -6.74199629]
[44.75407028 -20.64124680]
[57.37234116 -29.39766312]
[72.67961121 -30.65581703]
[86.55831146 -24.07726669]
[95.27513885 -11.43161201]
[96.48529816 3.87952995]
[89.86328125 17.73753929]
[98.41508484 30.06095695]
[106.96688843 42.38437271]
[115.51869965 54.70779037]
[127.84211731 63.25959778]
[142.37890625 66.95845795]
[156.91571045 70.65731812]
[171.45249939 74.35617828]
[185.98930359 78.05504608]
[200.52609253 81.75390625]
[215.06288147 85.45276642]
[227.11360168 68.10713196]
[245.08053589 57.09000778]
[265.91555786 54.22796249]
[286.10095215 59.96763229]
[302.24343872 73.30645752]
[315.17932129 65.71283722]
[328.11520386 58.11921310]
[336.09939575 44.46041107]
[350.99224854 44.68992615]
[356.86309814 37.59326553]
[364.29165649 37.07540512]
[377.38900757 29.76381683]
[390.48635864 22.45222664]
[398.76461792 8.96960354]
[413.64898682 9.52170753]
[426.74633789 2.21011782]
[439.84368896 -5.10147190]
[452.94104004 -12.41306210]
[466.03839111 -19.72465134]
[468.79806519 -35.11679840]
[480.83905029 -45.09422684]
[496.47592163 -44.94590378]
[508.32546997 -34.74185944]
[510.79266357 -19.30013084]
[502.71258545 -5.91183376]
[487.90042114 -0.89850998]
[473.34997559 -6.62729836]
[460.25262451 0.68429124]
[447.15527344 7.99588108]
[434.05792236 15.30747032]
[420.96057129 22.61906052]
[413.61914062 35.57870865]
[397.79794312 35.54957962]
[384.70059204 42.86116791]
[371.60324097 50.17276001]
[358.58587646 57.62580109]
[351.52691650 70.74145508]
[335.70880127 71.05509186]
[322.77294922 78.64871216]
[309.83706665 86.24233246]
[313.32943726 100.77490997]
[312.45401001 115.69557190]
[307.28613281 129.72003174]
[298.27059937 141.64114380]
[307.08737183 153.77639771]
[315.90417480 165.91165161]
[324.72094727 178.04690552]
[333.53771973 190.18215942]
[342.35449219 202.31741333]
[351.17126465 214.45266724]
[359.98806763 226.58792114]
[368.80484009 238.72317505]
[377.62161255 250.85842896]
[386.43838501 262.99368286]
[401.63168335 269.16589355]
[403.61471558 285.44470215]
[390.34753418 295.08386230]
[375.47827148 288.16744995]
[374.30313110 271.81045532]
[365.48635864 259.67520142]
[356.66958618 247.53996277]
[347.85281372 235.40470886]
[339.03601074 223.26943970]
[330.21923828 211.13418579]
[321.40246582 198.99893188]
[312.58569336 186.86367798]
[303.76892090 174.72842407]
[294.95211792 162.59317017]
[286.13534546 150.45791626]
[277.70379639 153.98091125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[39 48]
[40 47]
[41 46]
[50 67]
[51 66]
[52 65]
[53 64]
[79 114]
[80 113]
[81 112]
[83 110]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[118 143]
[119 142]
[120 141]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% Start Annotations
10 74 0.16 1 colorpair
11 73 0.0 1 colorpair
12 72 0.0 1 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 37 0.0 1 colorpair
22 36 0.0 1 colorpair
23 35 0.0 1 colorpair
24 34 0.0 1 colorpair
25 33 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 0.2 colorpair
41 46 0.0 0.6 colorpair
50 67 0.0 1 colorpair
51 66 0.16 1 colorpair
52 65 0.0 1 colorpair
53 64 0.32 1 colorpair
79 114 0.16 1 colorpair
80 113 0.0 1 colorpair
81 112 0.0 1 colorpair
83 110 0.0 1 colorpair
85 109 0.16 1 colorpair
86 108 0.0 1 colorpair
87 107 0.0 1 colorpair
89 105 0.0 1 colorpair
90 104 0.16 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
118 143 0.0 1 colorpair
119 142 0.0 1 colorpair
120 141 0.0 1 colorpair
121 140 0.0 1 colorpair
122 139 0.0 1 colorpair
123 138 0.0 1 colorpair
124 137 0.0 1 colorpair
125 136 0.16 1 colorpair
126 135 0.0 1 colorpair
127 134 0.0 1 colorpair
128 133 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 cmark
40 47 2 gmark
41 46 1 gmark
66 cmark
53 cmark
64 cmark
79 cmark
109 cmark
104 cmark
136 cmark

% End Annotations
showpage
end
%%EOF
