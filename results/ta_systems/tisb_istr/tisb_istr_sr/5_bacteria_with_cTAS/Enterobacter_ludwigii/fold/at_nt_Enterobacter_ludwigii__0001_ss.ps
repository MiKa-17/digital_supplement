%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAACGUCAAAAUCCGUGCCUGAAUUGCGCGUUCGUCUUCGAUCGCGUAUACUUUUUGCGUUGACGUAACACAGUGUGUUCUGCGGCGACCAACCGCAAAACCUCUGAAAAAAAACCUCGCUCAGGCGAGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[104.04858398 146.77903748]
[95.00260162 146.68721008]
[86.14212036 144.86233521]
[77.79605103 141.37214661]
[70.27420807 136.34620667]
[63.85578918 129.97108459]
[58.77906418 122.48341370]
[55.23247528 114.16115570]
[53.34767914 105.31323242]
[53.19463348 96.26807404]
[38.62450409 92.70278931]
[24.05437088 89.13749695]
[9.48424053 85.57221222]
[-5.08589029 82.00691986]
[-19.65602112 78.44163513]
[-34.22615433 74.87634277]
[-38.50930786 76.30723572]
[-42.60152817 76.25733185]
[-46.04806137 74.97877502]
[-48.52782059 72.84870148]
[-49.88320541 70.31272888]
[-64.08715820 65.49114227]
[-78.29110718 60.66954803]
[-87.37110901 72.75305176]
[-99.72469330 81.42665100]
[-114.13481903 85.85121155]
[-129.18655396 85.60546112]
[-143.40603638 80.72603607]
[-155.40480042 71.70269775]
[-164.01533508 59.42919540]
[-168.40467834 45.11473465]
[-168.15499878 30.16486549]
[-182.35894775 25.34327316]
[-196.56291199 20.52168083]
[-210.76686096 15.70008945]
[-224.97080994 10.87849712]
[-239.17475891 6.05690527]
[-254.72962952 8.94766808]
[-264.29440308 -2.47006226]
[-278.49835205 -7.29165411]
[-292.70230103 -12.11324596]
[-308.67202759 -8.38498497]
[-319.68670654 -20.53443336]
[-314.41537476 -36.06327820]
[-298.28073120 -38.99678040]
[-287.88070679 -26.31719780]
[-273.67675781 -21.49560547]
[-259.47280884 -16.67401505]
[-244.93389893 -19.90964890]
[-234.35316467 -8.14704704]
[-220.14921570 -3.32545471]
[-205.94526672 1.49613726]
[-191.74131775 6.31772900]
[-177.53736877 11.13932133]
[-163.33340454 15.96091270]
[-154.43058777 3.94838953]
[-142.23419189 -4.73597336]
[-127.93136597 -9.23143768]
[-112.91904449 -9.08574295]
[-98.66756439 -4.30057573]
[-86.57661438 4.66736746]
[-77.83779907 16.94993591]
[-73.31719208 31.35155296]
[-73.46951294 46.46559525]
[-59.26556396 51.28718567]
[-45.06161118 56.10877991]
[-30.66086388 60.30621338]
[-16.09073257 63.87150192]
[-1.52060211 67.43679047]
[13.04952908 71.00208282]
[27.61965942 74.56736755]
[42.18979263 78.13265228]
[56.75992203 81.69794464]
[67.53950500 66.07381439]
[83.62416077 55.99430084]
[102.38514709 53.10670853]
[120.75632477 57.88296509]
[135.73526001 69.54248047]
[148.55894470 61.76087952]
[161.38261414 53.97927856]
[169.16664124 40.20541000]
[184.06124878 40.21755219]
[189.82908630 33.03476334]
[197.25064087 32.40959549]
[210.24102783 24.90959358]
[223.23139954 17.40959358]
[231.31405640 3.80880904]
[246.20484924 4.14587164]
[259.19522095 -3.35412836]
[272.18560791 -10.85412884]
[285.17599487 -18.35412788]
[298.16638184 -25.85412788]
[300.70343018 -41.28453064]
[312.59902954 -51.43483353]
[328.23641968 -51.51237488]
[340.23211670 -41.48054504]
[342.92208862 -26.07606506]
[335.03625488 -12.57245922]
[320.29803467 -7.34571695]
[305.66638184 -12.86374760]
[292.67599487 -5.36374712]
[279.68560791 2.13625264]
[266.69522095 9.63625240]
[253.70484924 17.13625336]
[246.55134583 30.20058632]
[230.73139954 30.39997482]
[217.74102783 37.89997482]
[204.75064087 45.39997482]
[191.84284973 53.04122925]
[184.97605896 66.25850677]
[169.16421509 66.80295563]
[156.34053040 74.58455658]
[143.51686096 82.36615753]
[146.95375061 100.12054443]
[143.42575073 117.85705566]
[133.45616150 132.94473267]
[142.32580566 145.04139709]
[151.19544983 157.13806152]
[160.06509399 169.23474121]
[168.93473816 181.33140564]
[177.80438232 193.42807007]
[186.67402649 205.52474976]
[195.54367065 217.62141418]
[204.41331482 229.71807861]
[213.28295898 241.81475830]
[222.15260315 253.91142273]
[231.02224731 266.00808716]
[246.24232483 272.11392212]
[248.29637146 288.38394165]
[235.07136536 298.08090210]
[220.17205811 291.22943115]
[218.92558289 274.87774658]
[210.05593872 262.78106689]
[201.18629456 250.68440247]
[192.31665039 238.58772278]
[183.44700623 226.49105835]
[174.57736206 214.39439392]
[165.70771790 202.29771423]
[156.83805847 190.20104980]
[147.96841431 178.10438538]
[139.09877014 166.00770569]
[130.22912598 153.91104126]
[121.35948944 141.81437683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[21 66]
[22 65]
[23 64]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
[78 113]
[79 112]
[80 111]
[82 109]
[84 108]
[85 107]
[86 106]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[116 143]
[117 142]
[118 141]
[119 140]
[120 139]
[121 138]
[122 137]
[123 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% Start Annotations
10 73 0.0 1 colorpair
11 72 0.0 1 colorpair
12 71 0.0 1 colorpair
13 70 0.0 1 colorpair
14 69 0.0 1 colorpair
15 68 0.0 1 colorpair
16 67 0.0 1 colorpair
21 66 0.0 1 colorpair
22 65 0.0 1 colorpair
23 64 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
78 113 0.0 1 colorpair
79 112 0.0 1 colorpair
80 111 0.0 1 colorpair
82 109 0.0 1 colorpair
84 108 0.0 1 colorpair
85 107 0.0 1 colorpair
86 106 0.0 1 colorpair
88 104 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
116 143 0.0 1 colorpair
117 142 0.0 1 colorpair
118 141 0.0 1 colorpair
119 140 0.0 1 colorpair
120 139 0.0 1 colorpair
121 138 0.0 1 colorpair
122 137 0.0 1 colorpair
123 136 0.0 1 colorpair
124 135 0.0 1 colorpair
125 134 0.0 1 colorpair
126 133 0.0 1 colorpair
127 132 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
