%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAACCAUCAAAAUUCGUGCCGAAAUUGCGUGUUCUUCGCAGAACGCGUAUACUUUUUUCGUUGACAUAACACAGUGUGUUCGGCGGCUACCAACCGCACAGCACUGAAAAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[109.41119385 150.73326111]
[101.40670776 151.57960510]
[93.36798859 151.17080688]
[85.49065399 149.51679993]
[77.96639252 146.65785217]
[70.97830200 142.66351318]
[64.69642639 137.63101196]
[59.27363586 131.68276978]
[54.84188461 124.96356964]
[51.50902176 117.63689423]
[49.35614777 109.88104248]
[48.43564606 101.88474274]
[48.76992035 93.84258270]
[34.29544449 89.90689850]
[19.82097244 85.97121429]
[5.34649897 82.03553009]
[1.02095318 83.35964203]
[-3.07523942 83.20376587]
[-6.49197006 81.83285522]
[-8.91681576 79.63404083]
[-10.20357323 77.05895996]
[-24.27356911 71.85942078]
[-33.31453705 83.94830322]
[-45.38342667 92.99065399]
[-59.49702835 98.26050568]
[-74.50854492 99.33879089]
[-89.20079041 96.14664459]
[-102.38488770 88.95111847]
[-112.99646759 78.34285736]
[-120.18157196 65.18762970]
[-123.36540985 50.55566025]
[-122.29830170 35.63458252]
[-136.36830139 30.43504333]
[-150.43829346 25.23550606]
[-164.50828552 20.03596687]
[-178.57829285 14.83642769]
[-192.64828491 9.63688850]
[-206.71827698 4.43735027]
[-220.78826904 -0.76218849]
[-234.85827637 -5.96172714]
[-248.92826843 -11.16126633]
[-264.99194336 -7.86120510]
[-275.67791748 -20.30073357]
[-269.99337769 -35.68312836]
[-253.78610229 -38.18430328]
[-243.72872925 -25.23126221]
[-229.65873718 -20.03172302]
[-215.58872986 -14.83218479]
[-201.51873779 -9.63264656]
[-187.44874573 -4.43310738]
[-173.37875366 0.76643133]
[-159.30874634 5.96597004]
[-145.23875427 11.16550922]
[-131.16876221 16.36504745]
[-117.09876251 21.56458664]
[-108.20642090 9.53530884]
[-96.27268982 0.49000478]
[-82.25956726 -4.83146000]
[-67.29965210 -5.98983049]
[-52.60469437 -2.88270617]
[-39.36736298 4.24646568]
[-28.66450691 14.82744503]
[-21.36951637 28.00880241]
[-18.08107567 42.72642517]
[-19.07403183 57.78942871]
[-5.00403500 62.98896790]
[9.28218269 67.56105042]
[23.75665665 71.49673462]
[38.23112869 75.43241882]
[52.70560455 79.36810303]
[59.58125305 67.92571259]
[69.16222382 58.63012314]
[80.80723572 52.10351944]
[93.73686981 48.78273773]
[107.08570862 48.89004135]
[119.96028137 52.41825867]
[131.49887085 59.13122940]
[140.92915344 68.57964325]
[154.02874756 61.27204895]
[167.12832642 53.96445465]
[180.22790527 46.65686417]
[193.32749939 39.34926987]
[206.42707825 32.04167938]
[206.27622986 19.45174217]
[211.49156189 8.07151508]
[221.01568604 0.05958226]
[232.98056030 -3.09359431]
[245.07379150 -0.84267896]
[254.98539734 6.31935549]
[268.39538574 -0.40164620]
[281.80538940 -7.12264776]
[295.21539307 -13.84364986]
[298.65786743 -29.09761238]
[311.13128662 -38.52885818]
[326.74603271 -37.68424225]
[338.12933350 -26.96256447]
[339.90634155 -11.42627621]
[331.23800659 1.58886433]
[316.21725464 5.93750525]
[301.93640137 -0.43364841]
[288.52639771 6.28735352]
[275.11639404 13.00835514]
[261.70639038 19.72935677]
[259.68673706 37.21031189]
[247.51458740 50.13410187]
[229.87817383 53.25075531]
[213.73466492 45.14126205]
[200.63508606 52.44885254]
[187.53550720 59.75644684]
[174.43591309 67.06404114]
[161.33633423 74.37163544]
[148.23675537 81.67922211]
[150.46330261 110.76520538]
[136.56106567 136.41047668]
[145.53816223 148.42762756]
[154.51524353 160.44477844]
[163.49232483 172.46192932]
[172.46940613 184.47909546]
[181.44648743 196.49624634]
[190.42358398 208.51339722]
[199.40066528 220.53054810]
[208.37774658 232.54769897]
[217.35482788 244.56484985]
[226.33192444 256.58200073]
[235.30900574 268.59915161]
[250.58288574 274.56912231]
[252.78182983 290.82019043]
[239.64376831 300.63461304]
[224.68399048 293.91619873]
[223.29185486 277.57623291]
[214.31475830 265.55908203]
[205.33767700 253.54193115]
[196.36059570 241.52478027]
[187.38351440 229.50762939]
[178.40643311 217.49047852]
[169.42933655 205.47332764]
[160.45225525 193.45617676]
[151.47517395 181.43902588]
[142.49809265 169.42187500]
[133.52099609 157.40472412]
[124.54392242 145.38755798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 70]
[14 69]
[15 68]
[16 67]
[21 66]
[22 65]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[89 103]
[90 102]
[91 101]
[92 100]
[114 141]
[115 140]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% Start Annotations
13 70 0.0 1 colorpair
14 69 0.0 1 colorpair
15 68 0.0 1 colorpair
16 67 0.0 1 colorpair
21 66 0.0 1 colorpair
22 65 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
78 112 0.0 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
82 108 0.0 1 colorpair
83 107 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
114 141 0.0 1 colorpair
115 140 0.0 1 colorpair
116 139 0.0 1 colorpair
117 138 0.0 1 colorpair
118 137 0.0 1 colorpair
119 136 0.0 1 colorpair
120 135 0.0 1 colorpair
121 134 0.0 1 colorpair
122 133 0.0 1 colorpair
123 132 0.0 1 colorpair
124 131 0.0 1 colorpair
125 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
