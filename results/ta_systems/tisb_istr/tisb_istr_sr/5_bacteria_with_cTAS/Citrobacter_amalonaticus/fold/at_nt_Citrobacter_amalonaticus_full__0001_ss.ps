%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:33:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAGCGUCAAAAUCCGUGCCGAAAUUGCGUGUUCUUCGCAGAACGCGUAUACUUUUGCUGUUGACAUAACACAGUGUGCUUUGCGGCAACCAACCGCAUAACGCUGA_AAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[101.96318817 156.57385254]
[93.03675842 156.17799377]
[84.28380585 154.38249207]
[75.92242432 151.23207092]
[68.16092682 146.80520630]
[61.19268799 141.21221924]
[55.19132233 134.59243774]
[50.30634689 127.11079407]
[46.65947342 118.95369720]
[44.34156418 110.32437897]
[43.41036224 101.43782806]
[43.88907623 92.51544952]
[29.41460228 88.57976532]
[14.94012833 84.64408112]
[0.46565431 80.70839691]
[-14.00881958 76.77271271]
[-18.33436584 78.09682465]
[-22.43055725 77.94095612]
[-25.84728813 76.57004547]
[-28.27213287 74.37123108]
[-29.55889130 71.79615021]
[-43.62888718 66.59661102]
[-52.84418488 66.54856873]
[-57.95049286 61.12328720]
[-71.90202332 55.61376190]
[-87.57951355 57.74141312]
[-96.57524872 45.87018967]
[-110.52677917 40.36066437]
[-124.47830200 34.85114288]
[-140.35296631 42.10996628]
[-156.26759338 35.80293655]
[-162.60559082 20.26368332]
[-176.67558289 15.06414413]
[-190.74557495 9.86460495]
[-204.81558228 4.66506672]
[-218.88557434 -0.53447211]
[-232.95556641 -5.73401070]
[-247.02557373 -10.93354988]
[-261.09555054 -16.13308907]
[-275.16555786 -21.33262634]
[-289.23556519 -26.53216553]
[-305.29922485 -23.23210526]
[-315.98519897 -35.67163086]
[-310.30068970 -51.05402756]
[-294.09338379 -53.55520248]
[-284.03601074 -40.60216141]
[-269.96603394 -35.40262222]
[-255.89602661 -30.20308495]
[-241.82603455 -25.00354576]
[-227.75602722 -19.80400658]
[-213.68603516 -14.60446835]
[-199.61604309 -9.40493011]
[-185.54605103 -4.20539093]
[-171.47604370 0.99414772]
[-157.40605164 6.19368649]
[-146.52597046 -0.79460138]
[-133.41297913 -0.20701587]
[-122.89334869 7.96562672]
[-118.96878052 20.89961243]
[-105.01725006 26.40913773]
[-91.06572723 31.91866112]
[-76.38613892 29.39693069]
[-66.39249420 41.66223526]
[-52.44096756 47.17175674]
[-38.42934799 52.52661514]
[-24.35935402 57.72615433]
[-10.07313538 62.29824066]
[4.40133858 66.23392487]
[18.87581253 70.16960907]
[33.35028458 74.10529327]
[47.82476044 78.04097748]
[56.65219498 63.59365463]
[69.35723114 52.40299225]
[84.80335999 45.47003937]
[101.60887909 43.41496658]
[118.27048492 46.42161179]
[133.29772949 54.22101212]
[145.34638977 66.11549377]
[158.44596863 58.80790329]
[171.54554749 51.50030899]
[184.64514160 44.19271851]
[197.74472046 36.88512421]
[210.84429932 29.57753181]
[211.81916809 17.63463020]
[218.40231323 7.76674414]
[228.84107971 2.39051461]
[240.45687866 2.75405955]
[250.33227539 8.64918232]
[263.74227905 1.92818069]
[277.15228271 -4.79282093]
[290.56228638 -11.51382256]
[303.97229004 -18.23482513]
[307.41476440 -33.48878479]
[319.88815308 -42.92003250]
[335.50289917 -42.07541656]
[346.88623047 -31.35373878]
[348.66323853 -15.81745052]
[339.99487305 -2.80231047]
[324.97412109 1.54633045]
[310.69326782 -4.82482338]
[297.28326416 1.89617848]
[283.87326050 8.61717987]
[270.46328735 15.33818245]
[257.05328369 22.05918312]
[252.40357971 39.70546722]
[236.09143066 48.57132339]
[218.15190125 42.67711639]
[205.05230713 49.98470688]
[191.95272827 57.29230118]
[178.85314941 64.59989166]
[165.75355530 71.90748596]
[152.65397644 79.21508026]
[156.60169983 100.83749390]
[152.01599121 122.33364105]
[139.58818054 140.46270752]
[148.56526184 152.47985840]
[157.54234314 164.49700928]
[166.51942444 176.51416016]
[175.49652100 188.53131104]
[184.47360229 200.54846191]
[193.45068359 212.56561279]
[202.42776489 224.58277893]
[211.40486145 236.59992981]
[220.38194275 248.61708069]
[229.35902405 260.63421631]
[244.63290405 266.60421753]
[246.83184814 282.85525513]
[233.69378662 292.66970825]
[218.73400879 285.95126343]
[217.34187317 269.61132812]
[208.36479187 257.59417725]
[199.38769531 245.57701111]
[190.41061401 233.55986023]
[181.43353271 221.54270935]
[172.45645142 209.52555847]
[163.47937012 197.50840759]
[154.50227356 185.49124146]
[145.52519226 173.47409058]
[136.54811096 161.45693970]
[127.57102203 149.43978882]
[119.44813538 153.16224670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[21 66]
[22 65]
[24 64]
[25 63]
[27 61]
[28 60]
[29 59]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[115 140]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% Start Annotations
12 71 0.0 1 colorpair
13 70 0.0 1 colorpair
14 69 0.0 1 colorpair
15 68 0.0 1 colorpair
16 67 0.0 1 colorpair
21 66 0.0 1 colorpair
22 65 0.0 1 colorpair
24 64 0.0 1 colorpair
25 63 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
78 112 0.0 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.0 1 colorpair
82 108 0.0 1 colorpair
83 107 0.0 0.6 colorpair
88 104 0.0 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.0 1 colorpair
92 100 0.0 1 colorpair
115 140 0.0 1 colorpair
116 139 0.0 1 colorpair
117 138 0.0 1 colorpair
118 137 0.0 1 colorpair
119 136 0.0 1 colorpair
120 135 0.0 0.6 colorpair
121 134 0.0 1 colorpair
122 133 0.0 1 colorpair
123 132 0.0 1 colorpair
124 131 0.0 1 colorpair
125 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
83 107 1 gmark
120 135 1 gmark

% End Annotations
showpage
end
%%EOF
