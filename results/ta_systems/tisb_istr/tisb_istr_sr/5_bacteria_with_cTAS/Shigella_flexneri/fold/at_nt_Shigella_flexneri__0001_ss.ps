%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:45:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUAAAUACGUCAAAAUUCGUGCCGAAAUUGCGCGUUCUGCGCGGAACACGUAUACUUUCAGUGUUGACAUAAUACAGUGUGCUUUGCGGUUACCAGCCGCAGGCGGCUGACGAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[109.54167175 205.05784607]
[112.54606628 219.75387573]
[111.38095093 234.70855713]
[106.13669586 248.76194763]
[97.22006226 260.82403564]
[85.32264709 269.95919800]
[71.36726379 275.45895386]
[56.43632126 276.89666748]
[41.68791962 274.16085815]
[28.26599503 267.46368408]
[17.21158791 257.32464600]
[9.38211823 244.53015137]
[5.38486338 230.07255554]
[5.52986240 215.07325745]
[9.80587006 200.69564819]
[17.88122368 188.05488586]
[29.12957573 178.13145447]
[42.67354965 171.69656372]
[53.35295868 161.16326904]
[64.03237152 150.62998962]
[74.71177673 140.09669495]
[60.28978729 144.22055054]
[45.86779404 148.34439087]
[31.44580269 152.46824646]
[17.02381134 156.59210205]
[10.81848526 170.94577026]
[-3.18452096 177.90635681]
[-18.37341690 174.18728638]
[-27.57646942 161.54458618]
[-26.44827843 145.94775391]
[-15.52154255 134.76113892]
[0.04446827 133.26670837]
[12.89996052 142.17010498]
[27.32195282 138.04624939]
[41.74394608 133.92240906]
[56.16593552 129.79855347]
[70.58792877 125.67470551]
[64.85762024 114.84410095]
[62.86828232 103.03945160]
[64.64766693 91.48654175]
[69.84108734 81.33012390]
[77.76462555 73.52048492]
[87.49008179 68.72499847]
[85.16007233 53.90706635]
[82.83006287 39.08913422]
[80.50005341 24.27120590]
[78.17003632 9.45327568]
[75.84002686 -5.36465502]
[72.85937500 -8.77281380]
[71.32530212 -12.57774639]
[71.17997742 -16.25916862]
[72.19725800 -19.37272453]
[74.02384949 -21.59979057]
[73.02195740 -36.56629562]
[72.02007294 -51.53279877]
[71.01818085 -66.49929810]
[70.01628876 -81.46580505]
[69.01440430 -96.43230438]
[68.01251221 -111.39881134]
[65.34703827 -115.05873871]
[64.15770721 -118.98510742]
[64.34062195 -122.66485596]
[65.63099670 -125.67550659]
[67.64855194 -127.73116302]
[67.98274231 -142.72743225]
[68.31692505 -157.72370911]
[68.65110779 -172.71998596]
[68.98529053 -187.71626282]
[69.31947327 -202.71253967]
[63.62751770 -218.68244934]
[77.39762115 -228.57287598]
[90.71347046 -218.07885742]
[84.31575012 -202.37835693]
[83.98156738 -187.38208008]
[83.64738464 -172.38580322]
[83.31320190 -157.38952637]
[82.97901917 -142.39324951]
[82.64482880 -127.39697266]
[82.97901917 -112.40069580]
[83.98090363 -97.43419647]
[84.98279572 -82.46768951]
[85.98468781 -67.50119019]
[86.98657227 -52.53468704]
[87.98846436 -37.56818390]
[88.99035645 -22.60168076]
[90.65795898 -7.69466543]
[92.98796844 7.12326479]
[95.31797791 21.94119453]
[97.64798737 36.75912476]
[99.97800446 51.57705307]
[102.30801392 66.39498138]
[109.05722046 67.55634308]
[115.43203735 70.05879211]
[121.16896820 73.79887390]
[126.03085327 78.62200928]
[129.81674194 84.32881165]
[132.37011719 90.68340302]
[147.34686279 89.84830475]
[162.32359314 89.01320648]
[177.30033875 88.17810822]
[192.27706909 87.34300995]
[207.25379944 86.50791168]
[220.67367554 77.08246613]
[235.43026733 84.23614502]
[236.34326172 100.60985565]
[222.47344971 109.35973358]
[208.08889771 101.48464966]
[193.11216736 102.31974792]
[178.13543701 103.15484619]
[163.15869141 103.98994446]
[148.18196106 104.82504272]
[133.20521545 105.66014099]
[129.91654968 119.05581665]
[121.19947815 130.63633728]
[108.02391815 138.20834351]
[117.05558777 150.18450928]
[126.08726501 162.16069031]
[135.11894226 174.13687134]
[144.15060425 186.11305237]
[153.18228149 198.08923340]
[162.21395874 210.06541443]
[171.24562073 222.04159546]
[180.27729797 234.01777649]
[189.30897522 245.99395752]
[204.60986328 251.89436340]
[206.88273621 268.13525391]
[193.78945923 278.00936890]
[178.79927063 271.35906982]
[177.33279419 255.02561951]
[168.30111694 243.04945374]
[159.26945496 231.07327271]
[150.23777771 219.09709167]
[141.20610046 207.12091064]
[132.17442322 195.14472961]
[123.14275360 183.16854858]
[114.11108398 171.19236755]
[105.07940674 159.21618652]
[96.04773712 147.24000549]
[98.23208618 162.08010864]
[100.41644287 176.92021179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
21 37 0.0 0.6 colorpair
22 36 0.0 0.6 colorpair
23 35 0.0 0.6 colorpair
24 34 0.0 0.6 colorpair
25 33 0.0 0.6 colorpair
43 91 0.0 1 colorpair
44 90 0.0 0.6 colorpair
45 89 0.0 0.6 colorpair
46 88 0.0 1 colorpair
47 87 0.0 1 colorpair
48 86 0.0 1 colorpair
53 85 0.0 0.6 colorpair
54 84 0.0 0.6 colorpair
55 83 0.0 1 colorpair
56 82 0.16 1 colorpair
57 81 0.16 1 colorpair
58 80 0.16 1 colorpair
59 79 0.0 1 colorpair
64 78 0.16 0.6 colorpair
65 77 0.0 1 colorpair
66 76 0.16 1 colorpair
67 75 0.0 1 colorpair
68 74 0.0 1 colorpair
69 73 0.0 1 colorpair
97 112 0.0 1 colorpair
98 111 0.0 1 colorpair
99 110 0.0 1 colorpair
100 109 0.0 1 colorpair
101 108 0.16 1 colorpair
102 107 0.0 1 colorpair
115 138 0.0 1 colorpair
116 137 0.0 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 1 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
21 37 1 gmark
22 36 1 gmark
23 35 1 gmark
24 34 1 gmark
25 33 1 gmark
44 90 1 gmark
45 89 1 gmark
53 85 1 gmark
54 84 1 gmark
56 cmark
57 cmark
58 cmark
64 78 1 gmark
78 cmark
76 cmark
101 cmark

% End Annotations
showpage
end
%%EOF
