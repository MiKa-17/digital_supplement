%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:36:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAACAUCAAAAUCCGUGCCG_AAAUUGCGCGUUCGUCCCAGAACGCGUAUACUUCUUGCGUUGACAUAACACAGUGUGUUCGGCGGCUACCAACCGCA_AACACUGAAAAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[107.29851532 148.58998108]
[99.10107422 149.12684631]
[90.92876434 148.29045105]
[83.01002502 146.10418701]
[75.56620789 142.62915039]
[68.80538940 137.96249390]
[62.91656876 132.23468018]
[58.06435013 125.60578156]
[54.38436508 118.26113129]
[51.97948456 110.40601349]
[50.91693497 102.26001740]
[51.22641373 94.05084991]
[36.78846741 89.98320770]
[22.35052299 85.91556549]
[7.91257668 81.84792328]
[-6.52536917 77.78028107]
[-10.85913372 79.06342316]
[-14.95042896 78.87101746]
[-18.35255241 77.47145081]
[-20.75714874 75.25371552]
[-22.02214432 72.66969299]
[-36.04738617 67.35061646]
[-50.07263184 62.03154373]
[-58.90440369 73.45091248]
[-70.58981323 81.90036011]
[-84.17135620 86.69865417]
[-98.53930664 87.46329498]
[-112.52236938 84.14097595]
[-124.98316956 77.01119995]
[-134.91079712 66.66277313]
[-141.50276184 53.94522095]
[-144.22991943 39.89900970]
[-142.87887573 25.67045593]
[-156.78388977 20.04456902]
[-170.68890381 14.41868019]
[-184.59391785 8.79279232]
[-198.49891663 3.16690421]
[-212.40393066 -2.45898390]
[-226.30894470 -8.08487225]
[-240.21395874 -13.71076012]
[-254.11897278 -19.33664894]
[-268.02398682 -24.96253586]
[-284.18075562 -22.15352631]
[-294.48269653 -34.91291809]
[-288.33206177 -50.11494064]
[-272.05609131 -52.12105942]
[-262.39810181 -38.86754990]
[-248.49308777 -33.24166107]
[-234.58807373 -27.61577225]
[-220.68305969 -21.98988533]
[-206.77804565 -16.36399651]
[-192.87303162 -10.73810863]
[-178.96801758 -5.11222076]
[-165.06300354 0.51366740]
[-151.15798950 6.13955545]
[-137.25299072 11.76544380]
[-127.33365631 -0.31030872]
[-114.15841675 -8.75045490]
[-99.00418854 -12.72279358]
[-83.34410095 -11.82882690]
[-68.70424652 -6.14370537]
[-56.51498795 3.78993487]
[-47.97121429 17.01373863]
[-43.91519165 32.24608612]
[-44.75355911 48.00629807]
[-30.72831535 53.32537079]
[-16.70307159 58.64444733]
[-2.45772719 63.34233856]
[11.98021889 67.40998077]
[26.41816521 71.47762299]
[40.85610962 75.54526520]
[55.29405594 79.61290741]
[63.15813446 67.48950958]
[74.20884705 58.17810059]
[87.49035645 52.48406982]
[101.85388184 50.89991760]
[116.05706024 53.56266785]
[128.87138367 60.24200439]
[139.18849182 70.36019897]
[152.39295959 63.24388123]
[165.59742737 56.12756348]
[178.80189514 49.01124191]
[192.00636292 41.89492416]
[205.21083069 34.77860260]
[205.24287415 22.18972969]
[210.62153625 10.88789845]
[220.25868225 3.01531696]
[232.26577759 0.03477046]
[244.32368469 2.45811176]
[254.13069153 9.75956440]
[267.63497925 3.23010921]
[281.13928223 -3.29934621]
[294.64358521 -9.82880211]
[308.14788818 -16.35825729]
[321.65222168 -22.88771248]
[333.28002930 -35.22587967]
[348.35488892 -27.46803474]
[345.07336426 -10.83469582]
[328.18167114 -9.38340950]
[314.67736816 -2.85395384]
[301.17306519 3.67550159]
[287.66876221 10.20495701]
[274.16445923 16.73441315]
[260.66015625 23.26386833]
[258.39089966 40.71554184]
[246.03355408 53.46428299]
[228.35264587 56.32642365]
[212.32714844 47.98307419]
[199.12268066 55.09939194]
[185.91821289 62.21571350]
[172.71374512 69.33203125]
[159.50927734 76.44834900]
[146.30480957 83.56467438]
[147.95408630 110.70794678]
[134.91520691 134.57142639]
[143.83828735 146.62872314]
[152.76136780 158.68603516]
[161.68444824 170.74334717]
[170.60751343 182.80065918]
[179.53059387 194.85795593]
[188.45367432 206.91526794]
[197.37675476 218.97257996]
[206.29983521 231.02989197]
[215.22291565 243.08718872]
[224.14598083 255.14450073]
[233.06906128 267.20181274]
[248.31600952 273.24026489]
[250.44201660 289.50100708]
[237.26005554 299.25640869]
[222.33056641 292.47091675]
[221.01174927 276.12487793]
[212.08868408 264.06756592]
[203.16560364 252.01026917]
[194.24252319 239.95295715]
[185.31944275 227.89566040]
[176.39636230 215.83834839]
[167.47329712 203.78103638]
[158.55021667 191.72372437]
[149.62713623 179.66642761]
[140.70405579 167.60911560]
[131.78097534 155.55180359]
[122.85790253 143.49449158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[23 65]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
12 72 0.0 0.6 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.0 1 colorpair
23 65 0.0 0.6 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.16 1 colorpair
38 51 0.0 1 colorpair
39 50 0.0 0.6 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
42 47 0.16 1 colorpair
79 113 0.0 1 colorpair
80 112 0.0 1 colorpair
81 111 0.0 1 colorpair
82 110 0.0 0.6 colorpair
83 109 0.0 1 colorpair
84 108 0.16 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.16 1 colorpair
94 100 0.0 0.6 colorpair
95 99 0.0 1 colorpair
115 142 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.0 1 colorpair
119 138 0.0 1 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 72 1 gmark
23 65 1 gmark
37 cmark
39 50 1 gmark
42 cmark
47 cmark
82 110 1 gmark
108 cmark
101 cmark
94 100 1 gmark

% End Annotations
showpage
end
%%EOF
