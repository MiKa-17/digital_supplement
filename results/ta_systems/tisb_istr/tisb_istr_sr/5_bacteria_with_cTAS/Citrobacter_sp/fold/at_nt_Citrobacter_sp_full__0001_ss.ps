%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAAAAGCGUCAAAAUCCGUGCCG_AAAUUGCGUGUUCUUCGCAGAACGCGUAUACUUUUGCCGUUGACAUAACACAGUGUGCUCUGCGGCAACCAACCGCACACCGCUGA_AAAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[101.66455841 156.69233704]
[92.70249176 156.24534607]
[83.92308044 154.39048767]
[75.54608917 151.17419434]
[67.78119659 146.67698669]
[60.82276535 141.01142883]
[54.84496307 134.31930542]
[49.99742126 126.76816559]
[46.40147781 118.54699707]
[44.14714050 109.86157990]
[43.29084015 100.92932129]
[43.85400772 91.97380066]
[29.41605949 87.90615845]
[14.97811413 83.83851624]
[0.54016775 79.77087402]
[-13.89777851 75.70323181]
[-18.23154259 76.98637390]
[-22.32283783 76.79396820]
[-25.72496033 75.39440155]
[-28.12955666 73.17666626]
[-29.39455414 70.59264374]
[-43.41979599 65.27356720]
[-51.99325180 76.95853424]
[-63.29812622 86.00785065]
[-76.55439758 91.80522156]
[-90.84950256 93.95844269]
[-105.20115662 92.32595825]
[-118.62483978 87.02610016]
[-130.20133972 78.42858124]
[-139.13972473 67.12869263]
[-144.83132935 53.90607452]
[-146.89123535 39.67094803]
[-145.18426514 25.40145111]
[-159.08927917 19.77556419]
[-172.99429321 14.14967537]
[-186.89930725 8.52378750]
[-200.80432129 2.89789939]
[-214.70933533 -2.72798872]
[-228.61434937 -8.35387707]
[-242.51936340 -13.97976494]
[-256.42437744 -19.60565376]
[-270.32937622 -25.23154068]
[-286.48617554 -22.42253113]
[-296.78811646 -35.18192291]
[-290.63745117 -50.38394547]
[-274.36148071 -52.39006424]
[-264.70349121 -39.13655472]
[-250.79849243 -33.51066589]
[-236.89347839 -27.88477707]
[-222.98846436 -22.25889015]
[-209.08345032 -16.63300133]
[-195.17843628 -11.00711346]
[-181.27342224 -5.38122559]
[-167.36840820 0.24466249]
[-153.46339417 5.87055063]
[-139.55838013 11.49643898]
[-130.00839233 -0.78932470]
[-117.38085938 -9.90737057]
[-102.68727112 -15.11729240]
[-87.10742950 -15.99213600]
[-71.89473724 -12.45337200]
[-58.27532959 -4.77787209]
[-47.34927368 6.42373562]
[-40.00171280 20.25564003]
[-36.83115387 35.60847855]
[-38.10072327 51.24832153]
[-24.07547951 56.56739807]
[-9.83013630 61.26528931]
[4.60780954 65.33293152]
[19.04575539 69.40057373]
[33.48370361 73.46821594]
[47.92164993 77.53585815]
[56.92535782 63.10328293]
[69.80384064 51.98974991]
[85.39860535 45.19496536]
[102.30684662 43.33015823]
[119.00756836 46.56307602]
[133.99847412 54.60290146]
[145.93104553 66.72641754]
[159.13551331 59.61009598]
[172.33998108 52.49377441]
[185.54444885 45.37745667]
[198.74891663 38.26113510]
[197.90249634 25.28915215]
[202.03601074 13.01374912]
[210.49499512 3.26675081]
[221.98236084 -2.51166344]
[234.75721741 -3.48569751]
[246.89863586 0.45534548]
[256.59454346 8.68577766]
[270.09884644 2.15632248]
[283.60314941 -4.37313318]
[297.10745239 -10.90258884]
[300.76669312 -26.10600853]
[313.37304688 -35.35876465]
[328.97421265 -34.29198837]
[340.20376587 -23.40937805]
[341.75946045 -7.84937000]
[332.90676880 5.04107475]
[317.82562256 9.17548370]
[303.63690186 2.60171509]
[290.13259888 9.13117027]
[276.62829590 15.66062546]
[263.12399292 22.19008064]
[262.51983643 39.33290100]
[253.30851746 53.90813828]
[237.92700195 61.89278412]
[220.52940369 61.02986145]
[205.86523438 51.46560669]
[192.66076660 58.58192444]
[179.45629883 65.69824219]
[166.25183105 72.81456757]
[153.04736328 79.93088531]
[156.69775391 101.46882629]
[151.93707275 122.78887177]
[139.47157288 140.72821045]
[148.39465332 152.78552246]
[157.31773376 164.84281921]
[166.24081421 176.90013123]
[175.16389465 188.95744324]
[184.08695984 201.01475525]
[193.01004028 213.07206726]
[201.93312073 225.12936401]
[210.85620117 237.18667603]
[219.77928162 249.24398804]
[228.70234680 261.30130005]
[243.94929504 267.33975220]
[246.07531738 283.60049438]
[232.89334106 293.35589600]
[217.96386719 286.57040405]
[216.64505005 270.22436523]
[207.72196960 258.16705322]
[198.79888916 246.10975647]
[189.87580872 234.05244446]
[180.95272827 221.99513245]
[172.02966309 209.93783569]
[163.10658264 197.88052368]
[154.18350220 185.82321167]
[145.26042175 173.76589966]
[136.33734131 161.70860291]
[127.41426849 149.65129089]
[119.24041748 153.35353088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[21 67]
[22 66]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[90 104]
[91 103]
[92 102]
[93 101]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
12 72 0.0 0.2 colorpair
13 71 0.0 1 colorpair
14 70 0.0 1 colorpair
15 69 0.0 1 colorpair
16 68 0.0 1 colorpair
21 67 0.0 1 colorpair
22 66 0.16 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 52 0.16 0.6 colorpair
38 51 0.0 1 colorpair
39 50 0.0 0.6 colorpair
40 49 0.0 1 colorpair
41 48 0.0 0.6 colorpair
42 47 0.32 1 colorpair
79 113 0.0 1 colorpair
80 112 0.0 1 colorpair
81 111 0.0 1 colorpair
82 110 0.0 0.6 colorpair
83 109 0.0 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
93 101 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.16 1 colorpair
119 138 0.0 1 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 72 2 gmark
66 cmark
37 52 1 gmark
37 cmark
39 50 1 gmark
41 48 1 gmark
42 cmark
47 cmark
82 110 1 gmark
118 cmark

% End Annotations
showpage
end
%%EOF
