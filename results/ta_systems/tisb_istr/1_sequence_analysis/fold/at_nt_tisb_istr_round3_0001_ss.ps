%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 08:21:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUAAAUACGUCAAAAUUCGUGCCGAAAUUGCGCGUUCUGCGCGGAACACGUAUACUUUCAGUGUUGACAUAAUACAGUGUGCUUUGCGGUUACCAGCCGCAGGCGGCUGACGAAACCUCGCUCCGGCGGGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[95.37910461 157.60523987]
[86.87826538 156.28088379]
[78.66823578 153.70915222]
[70.93098450 149.94706726]
[63.83799362 145.07800293]
[57.54646301 139.20986938]
[52.19583130 132.47273254]
[47.90468597 125.01589966]
[44.76813126 117.00463867]
[42.85568237 108.61650085]
[42.20972443 100.03739929]
[42.84457779 91.45746613]
[28.42258644 87.33361053]
[14.00059414 83.20976257]
[-0.42139837 79.08591461]
[-4.02875280 84.97758484]
[-9.96442890 89.64553833]
[-17.75831795 92.18942261]
[-26.60283661 91.90432739]
[-41.55725098 93.07288361]
[-56.51166534 94.24143982]
[-71.46607971 95.40999603]
[-86.42048645 96.57855225]
[-101.37490082 97.74710846]
[-116.32931519 98.91566467]
[-129.48478699 107.70453644]
[-142.77613831 100.98225403]
[-157.73056030 102.15081024]
[-172.68496704 103.31936646]
[-180.68489075 116.61525726]
[-194.98521423 122.63861084]
[-210.08714294 119.07331085]
[-220.18368530 107.29030609]
[-221.39253235 91.82038879]
[-213.24882507 78.61206055]
[-198.88401794 72.74420166]
[-183.82165527 76.47311401]
[-173.85353088 88.36495209]
[-158.89910889 87.19639587]
[-143.94470215 86.02783966]
[-131.85887146 77.32255554]
[-117.49787140 83.96125031]
[-102.54345703 82.79269409]
[-87.58905029 81.62413788]
[-72.63463593 80.45558167]
[-57.68022156 79.28702545]
[-42.72580719 78.11846924]
[-27.77139473 76.94991302]
[-21.00624275 63.56212997]
[-28.93612671 50.82961655]
[-36.86601257 38.09710312]
[-44.79589844 25.36458778]
[-60.05503082 26.55515099]
[-74.11502838 20.50741577]
[-83.74500275 8.61110592]
[-86.73205566 -6.40009308]
[-82.38978577 -21.07671738]
[-71.71601868 -32.04618454]
[-57.16350174 -36.78779602]
[-42.07630157 -34.21195984]
[-29.92134285 -24.91058540]
[-23.49174690 -11.02106094]
[-24.26498795 4.26490259]
[-32.06338120 17.43470192]
[-24.13349724 30.16721725]
[-16.20361328 42.89973068]
[-8.27372742 55.63224792]
[3.70245194 64.66391754]
[18.12444496 68.78777313]
[32.54643631 72.91162109]
[46.96842957 77.03546906]
[56.25135803 62.24058151]
[69.53044128 50.89477158]
[85.59272766 44.03440857]
[102.97101593 42.28613281]
[120.07792664 45.80965042]
[135.35084534 54.28310013]
[147.39469910 66.93249512]
[160.70628357 60.01861954]
[174.01786804 53.10474777]
[187.32945251 46.19087219]
[193.56495667 39.40301132]
[201.01551819 39.27499008]
[214.47784424 32.65940094]
[227.94015503 26.04381180]
[241.40248108 19.42822075]
[254.86479187 12.81263161]
[261.24996948 6.16537476]
[268.70153809 6.20337725]
[282.30789185 -0.11064397]
[295.91427612 -6.42466545]
[309.52062988 -12.73868656]
[323.12698364 -19.05270767]
[336.73336792 -25.36672974]
[348.55578613 -37.51855087]
[363.50546265 -29.52211571]
[359.96002197 -12.94302750]
[343.04739380 -11.76036644]
[329.44100952 -5.44634438]
[315.83465576 0.86767685]
[302.22830200 7.18169832]
[288.62191772 13.49571991]
[275.01556396 19.80974197]
[261.48037720 26.27494812]
[248.01806641 32.89053726]
[234.55574036 39.50612640]
[221.09342957 46.12171936]
[207.63111877 52.73730850]
[194.24333191 59.50246048]
[180.93174744 66.41633606]
[167.62016296 73.33020782]
[154.30857849 80.24407959]
[157.76025391 101.86294556]
[152.92265320 123.21444702]
[140.49000549 141.23440552]
[149.52168274 153.21058655]
[158.55335999 165.18676758]
[167.58503723 177.16294861]
[176.61669922 189.13912964]
[185.64837646 201.11529541]
[194.68005371 213.09147644]
[203.71173096 225.06765747]
[212.74339294 237.04383850]
[221.77507019 249.02001953]
[237.07595825 254.92044067]
[239.34883118 271.16131592]
[226.25555420 281.03543091]
[211.26536560 274.38513184]
[209.79888916 258.05169678]
[200.76721191 246.07551575]
[191.73554993 234.09933472]
[182.70387268 222.12315369]
[173.67219543 210.14697266]
[164.64053345 198.17079163]
[155.60885620 186.19461060]
[146.57717896 174.21842957]
[137.54550171 162.24226379]
[128.51383972 150.26608276]
[120.73537445 153.94219971]
[112.49736023 156.42280579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 71]
[13 70]
[14 69]
[15 68]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
[49 67]
[50 66]
[51 65]
[52 64]
[78 112]
[79 111]
[80 110]
[81 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
12 71 0.0 1 colorpair
13 70 0.0 1 colorpair
14 69 0.0 1 colorpair
15 68 0.0 1 colorpair
19 48 0.0 1 colorpair
20 47 0.0 1 colorpair
21 46 0.0 1 colorpair
22 45 0.0 1 colorpair
23 44 0.0 1 colorpair
24 43 0.16 1 colorpair
25 42 0.16 1 colorpair
27 40 0.16 1 colorpair
28 39 0.0 1 colorpair
29 38 0.0 1 colorpair
49 67 0.0 1 colorpair
50 66 0.0 0.6 colorpair
51 65 0.0 0.6 colorpair
52 64 0.0 0.2 colorpair
78 112 0.16 1 colorpair
79 111 0.0 1 colorpair
80 110 0.0 1 colorpair
81 109 0.16 1 colorpair
83 108 0.16 1 colorpair
84 107 0.16 0.6 colorpair
85 106 0.0 1 colorpair
86 105 0.0 1 colorpair
87 104 0.16 1 colorpair
89 103 0.0 1 colorpair
90 102 0.0 1 colorpair
91 101 0.16 1 colorpair
92 100 0.0 1 colorpair
93 99 0.0 1 colorpair
94 98 0.0 1 colorpair
115 138 0.0 1 colorpair
116 137 0.0 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 0.2 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
43 cmark
25 cmark
40 cmark
50 66 1 gmark
51 65 1 gmark
52 64 2 gmark
78 cmark
109 cmark
108 cmark
84 107 1 gmark
107 cmark
104 cmark
101 cmark
119 134 2 gmark

% End Annotations
showpage
end
%%EOF
