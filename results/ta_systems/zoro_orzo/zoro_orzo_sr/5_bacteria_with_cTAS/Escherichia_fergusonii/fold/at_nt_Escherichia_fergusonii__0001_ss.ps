%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 01:50:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGUACGAAAUGUUGCACAAUCAGUAAGUUAACGUC__AAAGUAGUAAAUAAAAGAACCUGCCUCACCAGCAGGUUUUUUU_\
) } def
/len { sequence length } bind def

/coor [
[115.68727112 160.09802246]
[97.63477325 162.06665039]
[79.78444672 158.72984314]
[63.66214371 150.37284851]
[50.64597702 137.70999146]
[41.84856796 121.82372284]
[38.02191925 104.07196045]
[23.04496384 103.24078369]
[8.06800938 102.40961456]
[-6.90894461 101.57844543]
[-16.74184608 113.43678284]
[-31.49938774 117.18756104]
[-45.47053146 111.59549713]
[-53.37523270 98.99971771]
[-68.35218811 98.16854095]
[-83.32913971 97.33737183]
[-98.30609131 96.50620270]
[-113.28305054 95.67502594]
[-123.85036469 107.20176697]
[-139.36129761 109.18795776]
[-152.49206543 100.69577026]
[-157.04270935 85.73497009]
[-150.86454773 71.36957550]
[-136.87474060 64.38249969]
[-121.67884064 68.07281494]
[-112.45187378 80.69807434]
[-97.47492218 81.52924347]
[-82.49797058 82.36042023]
[-67.52101135 83.19158936]
[-52.54405975 84.02275848]
[-43.29414368 72.37900543]
[-28.79001999 68.36722565]
[-14.53813362 73.72792816]
[-6.07777262 86.60148621]
[8.89918137 87.43266296]
[23.87613487 88.26383209]
[38.85308838 89.09500885]
[42.17901230 77.31526947]
[47.75047302 66.41651154]
[55.35109711 56.82201004]
[64.68569946 48.90436554]
[75.39177704 42.97106934]
[87.05353546 39.25255203]
[99.21807861 37.89321899]
[111.41299438 38.94586563]
[123.16467285 42.36961365]
[134.01672363 48.03149414]
[143.54771423 55.71162033]
[151.38746643 65.11173248]
[157.23155212 75.86676788]
[160.85298157 87.55903625]
[162.11112976 99.73446655]
[160.95713806 111.92020416]
[175.22297668 116.55545807]
[189.48883057 121.19071960]
[203.75468445 125.82597351]
[218.02052307 130.46122742]
[232.28637695 135.09648132]
[246.55221558 139.73173523]
[260.81805420 144.36698914]
[275.08392334 149.00224304]
[289.34976196 153.63749695]
[303.61560059 158.27275085]
[317.88146973 162.90800476]
[331.04611206 154.46847534]
[346.54898071 156.51675415]
[357.07006836 168.08570862]
[357.64163208 183.71284485]
[347.99380493 196.01950073]
[332.68200684 199.19483948]
[318.93600464 191.73957825]
[313.24621582 177.17385864]
[298.98034668 172.53860474]
[284.71450806 167.90335083]
[270.44866943 163.26809692]
[256.18280029 158.63284302]
[241.91696167 153.99758911]
[227.65112305 149.36233521]
[213.38526917 144.72708130]
[199.11941528 140.09181213]
[184.85357666 135.45655823]
[170.58772278 130.82130432]
[156.32188416 126.18605804]
[146.34095764 141.35673523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 37]
[8 36]
[9 35]
[10 34]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
] def

init

% Start Annotations
7 37 0.16 0.6 colorpair
8 36 0.0 1 colorpair
9 35 0.0 0.6 colorpair
10 34 0.0 0.2 colorpair
14 30 0.16 0.2 colorpair
15 29 0.16 1 colorpair
16 28 0.16 1 colorpair
17 27 0.16 1 colorpair
18 26 0.0 1 colorpair
53 83 0.0 1 colorpair
54 82 0.0 1 colorpair
55 81 0.0 1 colorpair
56 80 0.0 1 colorpair
57 79 0.0 1 colorpair
58 78 0.0 1 colorpair
59 77 0.0 1 colorpair
60 76 0.0 1 colorpair
61 75 0.0 1 colorpair
62 74 0.0 1 colorpair
63 73 0.0 1 colorpair
64 72 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 37 1 gmark
7 cmark
9 35 1 gmark
10 34 2 gmark
14 30 2 gmark
30 cmark
29 cmark
28 cmark
27 cmark

% End Annotations
showpage
end
%%EOF
