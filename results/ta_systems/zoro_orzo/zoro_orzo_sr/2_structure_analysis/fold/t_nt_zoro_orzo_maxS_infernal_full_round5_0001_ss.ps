%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 21:18:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACGCUGACACAAAAGUUAACCGUGCUCAUUGCCGUACUGGAGCUAUUAGUGGCUCUGUUACGGUUGAUUGAUUUGUUGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[95.92243958 110.70542145]
[83.01922607 118.35440826]
[70.11601257 126.00340271]
[57.21279526 133.65238953]
[56.93050766 147.55410767]
[49.82385635 159.37844849]
[37.87061310 166.04515076]
[24.29388618 165.88075256]
[12.69328022 159.03723145]
[-0.46626019 166.23629761]
[-13.62580109 173.43536377]
[-15.46884727 188.84259033]
[-26.04071617 200.20108032]
[-41.27630615 203.14324951]
[-55.31722641 196.53778076]
[-62.76445389 182.92460632]
[-60.75437546 167.53828430]
[-50.05990982 156.29515076]
[-34.79329681 153.51843262]
[-20.82486343 160.27581787]
[-7.66532230 153.07676697]
[5.49421787 145.87770081]
[7.00769901 129.63128662]
[17.95841217 117.31362915]
[34.23823929 113.83943176]
[49.56380844 120.74917603]
[62.46702194 113.10018158]
[75.37023926 105.45119476]
[88.27345276 97.80220795]
[89.92247009 93.13491058]
[93.38281250 89.44627380]
[98.13327789 87.41810608]
[105.10412598 74.13626862]
[112.07496643 60.85442734]
[106.29810333 50.17325592]
[106.49602509 38.15283966]
[112.49912262 27.87705231]
[122.66368866 21.92395973]
[134.32019043 21.71933365]
[142.19076538 8.95006752]
[150.06132507 -3.81919956]
[157.93190002 -16.58846664]
[158.58627319 -32.39613342]
[171.85096741 -39.17086792]
[179.72152710 -51.94013214]
[187.59210205 -64.70939636]
[195.46266174 -77.47866821]
[203.33323669 -90.24793243]
[211.20379639 -103.01719666]
[219.07437134 -115.78646851]
[215.18133545 -131.10377502]
[223.33120728 -144.64463806]
[238.68881226 -148.37551880]
[252.14276123 -140.08293152]
[255.71105957 -124.68673706]
[247.27670288 -111.32122040]
[231.84364319 -107.91590118]
[223.97306824 -95.14662933]
[216.10250854 -82.37736511]
[208.23193359 -69.60810089]
[200.36137390 -56.83883286]
[192.49079895 -44.06956482]
[184.62023926 -31.30029869]
[184.52882385 -16.40597534]
[170.70115662 -8.71789837]
[162.83059692 4.05136776]
[154.96002197 16.82063484]
[147.08946228 29.58990097]
[152.47291565 46.92000580]
[143.51649475 63.06224060]
[125.35681152 67.82527161]
[118.38596344 81.10711670]
[111.41511536 94.38895416]
[125.06729889 88.17462921]
[139.95802307 86.36737061]
[154.70039368 89.13552094]
[167.92131042 96.22124481]
[178.38938904 106.96458435]
[185.12963867 120.36492157]
[187.51428223 135.17416382]
[185.32121277 150.01296997]
[178.75469971 163.49929810]
[168.42633057 174.37702942]
[155.29809570 181.63301086]
[140.59272766 184.59144592]
[125.67989349 182.97677612]
[111.94853973 176.93939209]
[100.67760468 167.04161072]
[92.91684723 154.20530701]
[89.38909912 139.62605286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[9 22]
[10 21]
[11 20]
[32 73]
[33 72]
[34 71]
[39 68]
[40 67]
[41 66]
[42 65]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
] def

init

% Start Annotations
1 29 0.0 1 colorpair
2 28 0.0 1 colorpair
3 27 0.16 1 colorpair
4 26 0.16 1 colorpair
10 21 0.16 1 colorpair
11 20 0.16 1 colorpair
32 73 0.0 1 colorpair
33 72 0.16 1 colorpair
34 71 0.16 1 colorpair
39 68 0.32 1 colorpair
40 67 0.0 1 colorpair
41 66 0.32 0.6 colorpair
42 65 0.16 1 colorpair
44 63 0.32 1 colorpair
45 62 0.0 1 colorpair
46 61 0.16 1 colorpair
47 60 0.0 0.2 colorpair
48 59 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
27 cmark
26 cmark
9 22 10 gmark
22 cmark
10 cmark
20 cmark
33 cmark
34 cmark
39 cmark
68 cmark
41 66 1 gmark
41 cmark
66 cmark
42 cmark
44 cmark
63 cmark
61 cmark
47 60 2 gmark
59 cmark
49 58 49 gmark
49 cmark
50 57 5 gmark
57 cmark

% End Annotations
showpage
end
%%EOF
