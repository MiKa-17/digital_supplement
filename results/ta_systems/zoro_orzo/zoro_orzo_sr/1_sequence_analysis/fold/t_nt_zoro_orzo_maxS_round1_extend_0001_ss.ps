%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 18:09:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACGCUGACACAAAAGUUAACCGUGCUCAUUGCCGUACUGGAGCUAUUAGUGGCUCUGUUACGGUUGAUUGAUUUGUUGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[62.25248718 465.29702759]
[48.96233368 472.88848877]
[33.66614914 473.42257690]
[19.87887764 466.77651978]
[10.76873875 454.47760010]
[8.42917442 439.35195923]
[13.39779949 424.87536621]
[24.53285980 414.37445068]
[39.27560043 410.26226807]
[42.36049652 395.58291626]
[45.44539642 380.90356445]
[35.33317947 370.00030518]
[33.55929184 355.05648804]
[41.01213455 341.77838135]
[55.01635361 335.36059570]
[58.10125351 320.68124390]
[61.18614960 306.00186157]
[64.27104950 291.32250977]
[67.35594940 276.64315796]
[69.93233490 261.86608887]
[71.99713898 247.00888062]
[74.06193542 232.15167236]
[76.12673950 217.29446411]
[78.19154358 202.43725586]
[80.25634766 187.58004761]
[82.32115173 172.72283936]
[84.38595581 157.86564636]
[86.45075226 143.00843811]
[88.51555634 128.15122986]
[90.58036041 113.29402161]
[84.08058929 103.46884155]
[85.90338135 91.83017731]
[95.09580231 84.46264648]
[97.67218781 69.68556213]
[88.85175323 56.84664917]
[91.67507935 41.89728546]
[103.96937561 33.56747055]
[106.54576111 18.79038429]
[109.12214661 4.01329994]
[107.10846710 -2.65160251]
[108.68428040 -8.39603519]
[112.42000580 -11.67940235]
[116.00974274 -26.24352837]
[119.59947205 -40.80765533]
[123.18920898 -55.37178421]
[126.77894592 -69.93591309]
[119.74317169 -84.35386658]
[126.75871277 -98.78167725]
[142.44384766 -102.15155792]
[154.76628113 -91.87843323]
[154.27330017 -75.84295654]
[141.34307861 -66.34617615]
[137.75334167 -51.78204727]
[134.16360474 -37.21792221]
[130.57386780 -22.65379333]
[126.98413086 -8.08966732]
[123.89923096 6.58968592]
[121.32284546 21.36676979]
[118.74645996 36.14385605]
[127.49645233 48.14274216]
[125.09413147 63.16550827]
[112.44927216 72.26194763]
[109.87288666 87.03903198]
[116.09674072 102.52099609]
[105.43756866 115.35882568]
[103.37276459 130.21603394]
[101.30796051 145.07324219]
[99.24315643 159.93043518]
[97.17835999 174.78764343]
[95.11355591 189.64485168]
[93.04875183 204.50205994]
[90.98394775 219.35926819]
[88.91914368 234.21647644]
[86.85433960 249.07368469]
[84.78954315 263.93087769]
[87.03206635 270.52230835]
[85.65547180 276.31771851]
[82.03530121 279.72805786]
[78.95040131 294.40740967]
[75.86550140 309.08676147]
[72.78060150 323.76611328]
[69.69570923 338.44549561]
[79.93194580 349.95745850]
[81.40953064 365.11233521]
[73.77041626 378.07797241]
[60.12474823 383.98846436]
[57.03985214 398.66781616]
[53.95495224 413.34716797]
[65.79530334 423.04586792]
[71.76152802 437.14062500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 88]
[10 87]
[11 86]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[33 63]
[34 62]
[37 59]
[38 58]
[39 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
] def

init

% Start Annotations
9 88 0.0 1 colorpair
10 87 0.0 1 colorpair
11 86 0.0 1 colorpair
15 82 0.0 1 colorpair
16 81 0.0 1 colorpair
17 80 0.16 1 colorpair
18 79 0.0 1 colorpair
19 78 0.0 1 colorpair
20 75 0.0 1 colorpair
21 74 0.0 1 colorpair
22 73 0.0 1 colorpair
23 72 0.0 1 colorpair
24 71 0.0 1 colorpair
25 70 0.0 0.6 colorpair
26 69 0.16 1 colorpair
27 68 0.16 0.6 colorpair
28 67 0.0 1 colorpair
29 66 0.0 1 colorpair
30 65 0.0 1 colorpair
33 63 0.16 1 colorpair
34 62 0.0 1 colorpair
37 59 0.16 0.6 colorpair
38 58 0.0 0.2 colorpair
39 57 0.32 0.2 colorpair
42 56 0.0 1 colorpair
43 55 0.16 1 colorpair
44 54 0.0 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
17 cmark
25 70 1 gmark
26 cmark
27 68 1 gmark
27 cmark
33 cmark
37 59 1 gmark
59 cmark
38 58 2 gmark
39 57 2 gmark
39 cmark
57 cmark
43 cmark

% End Annotations
showpage
end
%%EOF
