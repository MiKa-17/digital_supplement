%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 20:11:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACGCUGACACAAAAGUUAACCGUGCUCAUUGCCGUACUGGAGCUAUUAGUGGCUCUGUUACGGUUGAUUGAUUUGUUGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[85.59223175 296.45999146]
[72.30207825 304.05148315]
[57.00589371 304.58554077]
[43.21862411 297.93951416]
[34.10848618 285.64056396]
[31.76892090 270.51492310]
[36.73754501 256.03836060]
[47.87260437 245.53744507]
[62.61534500 241.42524719]
[65.70024109 226.74589539]
[68.78514099 212.06654358]
[58.67292404 201.16328430]
[56.89903641 186.21948242]
[64.35188293 172.94136047]
[78.35610199 166.52357483]
[81.44099426 151.84420776]
[84.52589417 137.16485596]
[87.61079407 122.48551178]
[90.69569397 107.80615997]
[93.27207947 93.02907562]
[95.33688354 78.17186737]
[97.40168762 63.31465912]
[99.46648407 48.45745087]
[101.53128815 33.60024643]
[103.59609222 18.74303818]
[105.66089630 3.88583183]
[107.72570038 -10.97137451]
[109.79050446 -25.82858086]
[111.85530090 -40.68578720]
[113.92010498 -55.54299545]
[102.27726746 -46.08549118]
[87.61601257 -42.91572571]
[73.10618591 -46.71902466]
[61.88492966 -56.67308807]
[56.37835312 -70.62577820]
[57.77701187 -85.56043243]
[65.77851105 -98.24806213]
[78.65286255 -105.94552612]
[93.61655426 -106.98857117]
[107.43432617 -101.15168762]
[117.11868286 -89.69685364]
[120.57579803 -75.10380554]
[128.00093079 -88.13712311]
[129.58935547 -97.35599518]
[135.91397095 -101.48577118]
[143.78454590 -114.25504303]
[151.65510559 -127.02430725]
[159.52568054 -139.79357910]
[167.39624023 -152.56283569]
[175.26681519 -165.33210754]
[183.13737488 -178.10137939]
[183.06797791 -194.50038147]
[197.36958313 -202.52510071]
[211.32992554 -193.92037964]
[210.58779907 -177.53804016]
[195.90664673 -170.23080444]
[188.03607178 -157.46154785]
[180.16551208 -144.69227600]
[172.29493713 -131.92300415]
[164.42437744 -119.15373993]
[156.55380249 -106.38447571]
[148.68324280 -93.61520386]
[141.03425598 -80.71199036]
[133.60911560 -67.67867279]
[128.77731323 -53.47819138]
[126.71250916 -38.62098694]
[124.64770508 -23.76377869]
[122.58290100 -8.90657234]
[120.51810455 5.95063448]
[118.45330048 20.80784035]
[116.38849640 35.66504669]
[114.32369232 50.52225494]
[112.25888824 65.37946320]
[110.19409180 80.23667145]
[108.12928772 95.09387207]
[110.37801361 100.09113312]
[109.53827667 105.98746490]
[105.37504578 110.89105225]
[102.29014587 125.57041168]
[99.20524597 140.24975586]
[96.12035370 154.92910767]
[93.03545380 169.60845947]
[103.27169037 181.12043762]
[104.74928284 196.27531433]
[97.11016083 209.24095154]
[83.46449280 215.15144348]
[80.37959290 229.83079529]
[77.29470062 244.51014709]
[89.13504791 254.20884705]
[95.10127258 268.30361938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 88]
[10 87]
[11 86]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[42 64]
[43 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% Start Annotations
9 88 0.0 1 colorpair
10 87 0.0 1 colorpair
11 86 0.0 1 colorpair
15 82 0.0 1 colorpair
16 81 0.0 1 colorpair
17 80 0.16 1 colorpair
18 79 0.0 1 colorpair
19 78 0.0 1 colorpair
20 75 0.16 1 colorpair
21 74 0.0 1 colorpair
22 73 0.0 1 colorpair
23 72 0.0 1 colorpair
24 71 0.0 1 colorpair
25 70 0.0 0.2 colorpair
26 69 0.16 1 colorpair
27 68 0.16 0.6 colorpair
28 67 0.0 1 colorpair
29 66 0.16 1 colorpair
30 65 0.0 1 colorpair
42 64 0.0 1 colorpair
43 63 0.16 1 colorpair
45 62 0.0 1 colorpair
46 61 0.16 1 colorpair
47 60 0.0 1 colorpair
48 59 0.16 1 colorpair
49 58 0.16 0.6 colorpair
50 57 0.16 0.6 colorpair
51 56 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
17 cmark
20 cmark
25 70 2 gmark
26 cmark
27 68 1 gmark
27 cmark
66 cmark
43 cmark
61 cmark
59 cmark
49 58 1 gmark
49 cmark
50 57 1 gmark
57 cmark

% End Annotations
showpage
end
%%EOF
