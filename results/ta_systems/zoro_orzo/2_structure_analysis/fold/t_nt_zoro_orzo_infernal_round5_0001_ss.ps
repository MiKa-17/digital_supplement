%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 20:56:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACGCUGACACAAAAGUUAACCGUGCUCAUUGCCGUACUGGAGCUAUUAGUGGCUCUGUUACGGUUGAUUGAUUUGUUGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[100.04102325 203.93432617]
[89.71711731 193.05236816]
[82.12579346 180.11514282]
[77.66152191 165.79487610]
[76.55625153 150.83564758]
[78.86742401 136.01477051]
[84.47494507 122.10233307]
[93.08670807 109.82209015]
[78.58670807 113.66268158]
[64.08671570 117.50326538]
[59.98480988 133.41525269]
[48.52851868 145.06506348]
[32.86705017 149.38337708]
[17.23942184 145.29818726]
[5.82714558 133.99902344]
[-8.53164864 138.33779907]
[-19.35425568 150.65864563]
[-35.38053513 147.18151855]
[-40.12402344 131.48338318]
[-28.70502663 119.71314240]
[-12.87042999 123.97901154]
[1.48836398 119.64022827]
[3.76013088 106.05780792]
[11.73832607 94.75160980]
[23.89009285 87.99411774]
[37.83688736 87.17414093]
[50.81997299 92.51174164]
[60.24612808 103.00327301]
[74.74612427 99.16268158]
[89.24611664 95.32209778]
[92.57309723 91.08676910]
[97.39607239 88.82272339]
[104.36692047 75.54088593]
[111.33776855 62.25904465]
[111.45818329 55.29762650]
[114.71479034 50.31002426]
[119.27547455 48.32600403]
[127.14604187 35.55673981]
[135.01661682 22.78747177]
[142.88717651 10.01820564]
[150.75775146 -2.75106144]
[158.62831116 -15.52032757]
[159.28268433 -31.32799530]
[172.54737854 -38.10272980]
[180.41795349 -50.87199402]
[188.28851318 -63.64126205]
[196.15908813 -76.41053009]
[204.02964783 -89.17979431]
[211.90022278 -101.94905853]
[219.77078247 -114.71833038]
[215.87774658 -130.03562927]
[224.02761841 -143.57650757]
[239.38523865 -147.30737305]
[252.83917236 -139.01478577]
[256.40747070 -123.61859894]
[247.97311401 -110.25308228]
[232.54005432 -106.84776306]
[224.66947937 -94.07849121]
[216.79891968 -81.30922699]
[208.92834473 -68.53996277]
[201.05778503 -55.77069473]
[193.18721008 -43.00142670]
[185.31665039 -30.23216057]
[185.22523499 -15.33783627]
[171.39758301 -7.64976072]
[163.52700806 5.11950588]
[155.65644836 17.88877296]
[147.78587341 30.65803909]
[139.91531372 43.42730713]
[132.04473877 56.19657135]
[124.61961365 69.22988892]
[117.64876556 82.51173401]
[110.67791748 95.79357147]
[124.56763458 90.13003540]
[139.37908936 87.75916290]
[154.34263611 88.80414581]
[168.68078613 93.21068573]
[181.64849854 100.74981689]
[192.57196045 111.02979279]
[200.88357544 123.51646423]
[206.15148926 137.56100464]
[208.10194397 152.43365479]
[206.63360596 167.36161804]
[201.82276917 181.56921387]
[193.91941833 194.31822205]
[183.33419800 204.94616699]
[170.61715698 212.90083313]
[156.42904663 217.76887512]
[141.50712585 219.29734802]
[126.62673950 217.40682983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[10 28]
[15 22]
[16 21]
[32 73]
[33 72]
[34 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
] def

init

% Start Annotations
8 30 0.16 0.6 colorpair
9 29 0.16 1 colorpair
10 28 0.16 1 colorpair
15 22 0.16 1 colorpair
16 21 0.0 1 colorpair
32 73 0.0 1 colorpair
33 72 0.16 1 colorpair
34 71 0.16 1 colorpair
37 70 0.32 0.6 colorpair
38 69 0.0 0.6 colorpair
39 68 0.32 1 colorpair
40 67 0.0 1 colorpair
41 66 0.32 0.6 colorpair
42 65 0.16 1 colorpair
44 63 0.32 1 colorpair
45 62 0.0 1 colorpair
46 61 0.16 1 colorpair
47 60 0.0 0.2 colorpair
48 59 0.16 1 colorpair
49 58 0.16 0.6 colorpair
50 57 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 30 1 gmark
8 cmark
9 cmark
10 cmark
15 cmark
22 cmark
33 cmark
34 cmark
37 70 1 gmark
37 cmark
70 cmark
38 69 1 gmark
39 cmark
68 cmark
41 66 1 gmark
41 cmark
66 cmark
42 cmark
44 cmark
63 cmark
61 cmark
47 60 2 gmark
59 cmark
49 58 1 gmark
49 cmark
50 57 1 gmark
57 cmark

% End Annotations
showpage
end
%%EOF
