%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  1 17:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUAUAUA_GAAAAAGGGCAACAUG_CGCAAACAUGUUACCCUAAUGAGCCCGUUAAAAAGACGGUGGCUAUUUUAGAUUAAU__GAUUAAAU__AAAA_______ACCAU_C_AAA_CC_AGCCAAAGU__UA___GCGAUGGUUAUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[316.40472412 682.77185059]
[301.59503174 680.37371826]
[286.90985107 677.30395508]
[272.37957764 673.56896973]
[258.03439331 669.17651367]
[243.90397644 664.13574219]
[230.01763916 658.45703125]
[216.40414429 652.15216064]
[203.09173584 645.23419189]
[190.10798645 637.71752930]
[177.47981262 629.61767578]
[165.23339844 620.95141602]
[153.39410400 611.73681641]
[141.98648071 601.99285889]
[131.03416443 591.73980713]
[120.55987549 580.99890137]
[110.58530426 569.79235840]
[101.13113403 558.14343262]
[92.21694946 546.07629395]
[83.86124420 533.61596680]
[76.08132172 520.78820801]
[68.89331818 507.61965942]
[62.31211853 494.13760376]
[56.35137558 480.36996460]
[51.02343750 466.34530640]
[46.33934784 452.09265137]
[42.30881882 437.64160156]
[38.94020081 423.02206421]
[36.24047470 408.26437378]
[34.21524048 393.39907837]
[32.86869049 378.45703125]
[32.20362091 363.46914673]
[32.22140884 348.46655273]
[32.92201614 333.48031616]
[34.30398941 318.54150391]
[36.36446762 303.68106079]
[39.09917831 288.92980957]
[42.50245285 274.31829834]
[46.56723785 259.87683105]
[51.28510666 245.63534546]
[56.64628601 231.62335205]
[62.63965988 217.86988831]
[69.25280762 204.40345764]
[76.47201538 191.25198364]
[84.28233337 178.44271851]
[92.66756439 166.00221252]
[101.61032867 153.95625305]
[111.09210205 142.32980347]
[121.09321594 131.14695740]
[110.37897491 120.64909363]
[99.66474152 110.15122986]
[92.11387634 107.18378448]
[88.84177399 99.32825470]
[78.34390259 88.61402130]
[67.84603882 77.89978027]
[51.88304901 76.29901123]
[43.30322647 62.74296951]
[48.68827820 47.63069916]
[63.90725327 42.55503464]
[77.28545380 51.40959549]
[78.56027985 67.40191650]
[89.05814362 78.11615753]
[99.55600739 88.83039093]
[110.16260529 99.43698883]
[120.87684631 109.93485260]
[131.59107971 120.43272400]
[142.56758118 110.20557404]
[153.99819946 100.48861694]
[165.85923767 91.30199432]
[178.12611389 82.66473389]
[190.77339172 74.59475708]
[203.77487183 67.10877228]
[217.10359192 60.22230911]
[230.73193359 53.94963074]
[244.63165283 48.30374527]
[258.77395630 43.29635239]
[273.12948608 38.93782806]
[287.66851807 35.23720551]
[302.36093140 32.20216370]
[317.17623901 29.83898163]
[332.08377075 28.15256500]
[347.05261230 27.14640617]
[362.05172729 26.82259178]
[377.05001831 27.18179321]
[392.01644897 28.22326469]
[406.91995239 29.94484901]
[421.72964478 32.34297562]
[436.41485596 35.41267395]
[450.94512939 39.14758682]
[465.29034424 43.53996658]
[479.42077637 48.58071518]
[493.30712891 54.25938034]
[506.92065430 60.56418991]
[520.23309326 67.48208618]
[533.21685791 74.99871826]
[545.84509277 83.09851837]
[558.09155273 91.76468658]
[569.93084717 100.97927094]
[581.33850098 110.72316742]
[592.29089355 120.97618866]
[602.76519775 131.71707153]
[612.73980713 142.92355347]
[622.19403076 154.57241821]
[631.10827637 166.63951111]
[639.46405029 179.09983826]
[647.24401855 191.92755127]
[654.43206787 205.09608459]
[661.01330566 218.57812500]
[666.97412109 232.34573364]
[672.30212402 246.37039185]
[676.98626709 260.62301636]
[681.01684570 275.07403564]
[684.38549805 289.69357300]
[687.08526611 304.45126343]
[689.11059570 319.31652832]
[690.45721436 334.25857544]
[691.12231445 349.24642944]
[691.10461426 364.24905396]
[690.40405273 379.23529053]
[689.02215576 394.17410278]
[686.96173096 409.03457642]
[684.22705078 423.78582764]
[680.82385254 438.39733887]
[676.75909424 452.83883667]
[672.04132080 467.08032227]
[666.68017578 481.09234619]
[660.68688965 494.84585571]
[654.07379150 508.31228638]
[646.85461426 521.46380615]
[639.04437256 534.27307129]
[630.65917969 546.71362305]
[621.71643066 558.75964355]
[612.23474121 570.38610840]
[602.23364258 581.56896973]
[591.73394775 592.28509521]
[580.75738525 602.51220703]
[569.32678223 612.22912598]
[557.46569824 621.41571045]
[545.19879150 630.05291748]
[532.55145264 638.12280273]
[519.54998779 645.60876465]
[506.22122192 652.49517822]
[492.59283447 658.76782227]
[478.69308472 664.41363525]
[464.55078125 669.42095947]
[450.19522095 673.77941895]
[435.65615845 677.47998047]
[420.96374512 680.51495361]
[406.14843750 682.87811279]
[391.24090576 684.56445312]
[376.27206421 685.57055664]
[361.27294922 685.89428711]
[346.27462769 685.53503418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[49 66]
[50 65]
[51 64]
[53 63]
[54 62]
[55 61]
] def

init

% Start Annotations
49 66 0.16 1 colorpair
50 65 0.0 0.6 colorpair
51 64 0.0 0.6 colorpair
53 63 0.0 0.6 colorpair
54 62 0.0 1 colorpair
55 61 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
49 cmark
50 65 1 gmark
51 64 1 gmark
53 63 1 gmark

% End Annotations
showpage
end
%%EOF
