%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  1 17:33:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUAUAUA_GA_AAAAGGGCAACAUGC_GCAAACAUGUUACCCUAAUGAGCCCGUUAAAAAGACGGUGGCUAUUUU___UUAAAGAUU__AU__AUAACCAUUUAACCAUCGA_AACCAGCCAAAGUUAGCGAUGGUUAUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[265.69326782 227.66755676]
[255.44938660 222.54690552]
[245.48104858 216.90850830]
[235.81436157 210.76713562]
[226.47470093 204.13890076]
[217.48658752 197.04116821]
[208.87355042 189.49256897]
[200.65821838 181.51286316]
[192.86213684 173.12300110]
[185.50575256 164.34497070]
[178.60835266 155.20179749]
[172.18804932 145.71743774]
[166.26168823 135.91677856]
[160.84478760 125.82551575]
[155.95159912 115.47010803]
[151.59494019 104.87770844]
[147.78623962 94.07610321]
[133.36929321 98.21755219]
[118.95234680 102.35900879]
[111.84210968 114.98401642]
[97.91579437 118.98452759]
[85.18910980 112.05793762]
[70.77216339 116.19939423]
[59.64465332 127.44612885]
[45.27584839 123.52353668]
[30.85890007 127.66499329]
[24.67110443 142.02622986]
[10.67660618 149.00390625]
[-4.51681852 145.30339050]
[-13.73529911 132.67193604]
[-12.62615204 117.07373810]
[-1.71308124 105.87378693]
[13.85109425 104.36035919]
[26.71744537 113.24804688]
[41.13439178 109.10659027]
[51.23070908 98.15608215]
[66.63070679 101.78244781]
[81.04765320 97.64099121]
[88.15789032 85.01598358]
[102.08420563 81.01547241]
[114.81089020 87.94206238]
[129.22782898 83.80060577]
[143.64477539 79.65915680]
[138.39179993 50.80931854]
[136.95870972 21.52202225]
[139.36968994 -7.69918776]
[145.58282471 -36.35196304]
[155.49078369 -63.94379807]
[168.92282104 -90.00047302]
[185.64753723 -114.07422638]
[205.37702942 -135.75144958]
[227.77172852 -154.65977478]
[219.27119446 -167.01863098]
[210.77067566 -179.37747192]
[202.27014160 -191.73631287]
[193.76962280 -204.09515381]
[178.31916809 -208.41526794]
[172.19650269 -223.24403381]
[180.09840393 -237.20611572]
[195.96319580 -239.59098816]
[207.62078857 -228.56918335]
[206.12846375 -212.59568787]
[214.62899780 -200.23684692]
[223.12951660 -187.87799072]
[231.63003540 -175.51914978]
[240.13056946 -163.16030884]
[249.92848206 -169.07940674]
[260.01663208 -174.48918152]
[270.36856079 -179.37542725]
[280.95715332 -183.72532654]
[291.75457764 -187.52746582]
[302.73257446 -190.77186584]
[313.86233521 -193.45001221]
[325.11468506 -195.55487061]
[336.46008301 -197.08091736]
[347.86880493 -198.02415466]
[359.31091309 -198.38208008]
[370.75640869 -198.15376282]
[382.17529297 -197.33979797]
[393.53756714 -195.94230652]
[404.81350708 -193.96493530]
[415.97344971 -191.41288757]
[426.98818970 -188.29283142]
[437.82882690 -184.61294556]
[448.46691895 -180.38288879]
[458.87454224 -175.61373901]
[469.02444458 -170.31797791]
[478.88998413 -164.50952148]
[488.44525146 -158.20358276]
[497.66522217 -151.41670227]
[506.52572632 -144.16665649]
[515.00347900 -136.47245789]
[523.07623291 -128.35429382]
[530.72290039 -119.83343506]
[537.92333984 -110.93223572]
[544.65863037 -101.67402649]
[550.91119385 -92.08309937]
[556.66461182 -82.18458557]
[561.90374756 -72.00444794]
[566.61480713 -61.56939316]
[570.78558350 -50.90676880]
[574.40502930 -40.04454422]
[577.46362305 -29.01120758]
[579.95336914 -17.83568764]
[581.86773682 -6.54729414]
[583.20172119 4.82436895]
[583.95178223 16.24947929]
[584.11596680 27.69807243]
[583.69378662 39.14012527]
[582.68646240 50.54562759]
[581.09649658 61.88466644]
[578.92810059 73.12750244]
[576.18695068 84.24465179]
[572.88024902 95.20695496]
[569.01666260 105.98566437]
[564.60626221 116.55250549]
[559.66070557 126.87975311]
[554.19287109 136.94033813]
[548.21710205 146.70785522]
[541.74914551 156.15670776]
[534.80584717 165.26208496]
[527.40551758 174.00012207]
[519.56744385 182.34786987]
[511.31228638 190.28347778]
[502.66162109 197.78608704]
[493.63815308 204.83602905]
[484.26556396 211.41482544]
[474.56838989 217.50518799]
[464.57208252 223.09115601]
[454.30285645 228.15808105]
[443.78762817 232.69265747]
[433.05398560 236.68296814]
[422.13009644 240.11857605]
[411.04455566 242.99044800]
[399.82644653 245.29104614]
[388.50521851 247.01434326]
[377.11056519 248.15577698]
[365.67233276 248.71238708]
[354.22055054 248.68269348]
[342.78521729 248.06675720]
[331.39636230 246.86619568]
[320.08383179 245.08413696]
[308.87731934 242.72528076]
[297.80618286 239.79577637]
[286.89947510 236.30331421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 43]
[18 42]
[19 41]
[22 38]
[23 37]
[25 35]
[26 34]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% Start Annotations
18 42 0.0 0.2 colorpair
19 41 0.0 0.2 colorpair
22 38 0.0 0.2 colorpair
52 66 0.0 0.6 colorpair
53 65 0.0 0.6 colorpair
54 64 0.0 1 colorpair
55 63 0.0 1 colorpair
56 62 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
17 43 3 gmark
17 cmark
43 cmark
18 42 2 gmark
19 41 2 gmark
22 38 2 gmark
23 37 6 gmark
23 cmark
37 cmark
25 35 3 gmark
25 cmark
35 cmark
26 34 5 gmark
26 cmark
34 cmark
52 66 1 gmark
53 65 1 gmark

% End Annotations
showpage
end
%%EOF
