%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  1 18:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______UAUAUAUA_GA_AAAAGGGCAACAUG_C_AGAAACAUGUCGCCCUAAUGAGCCCGUUAAAAAGACGGUGGCUAU_U__UUA_AUUAAUGAUUAAAUAA_________UAACC____AU__CAAAACCGGCCAAAGUU___AG_C__GAUGGUUAUUUUUU___________________\
) } def
/len { sequence length } bind def

/coor [
[308.64364624 425.71414185]
[294.83654785 419.85202026]
[281.30261230 413.38421631]
[268.06835938 406.32342529]
[255.15975952 398.68353271]
[242.60214233 390.47949219]
[230.42013550 381.72741699]
[218.63764954 372.44448853]
[207.27780151 362.64889526]
[196.36286926 352.35986328]
[185.91426086 341.59756470]
[175.95249939 330.38314819]
[166.49711609 318.73858643]
[157.56665039 306.68676758]
[149.17864990 294.25128174]
[141.34953308 281.45654297]
[134.09471130 268.32766724]
[127.42836761 254.89041138]
[121.36361694 241.17112732]
[115.91233826 227.19673157]
[111.08522797 212.99465942]
[106.89176941 198.59274292]
[103.34017181 184.01927185]
[100.43742371 169.30281067]
[98.18920135 154.47225952]
[96.59992218 139.55668640]
[95.67271423 124.58537292]
[95.40950012 109.56175995]
[81.25724030 114.53302765]
[67.10497284 119.50428772]
[52.95271301 124.47555542]
[38.80044937 129.44682312]
[34.48487091 144.35169983]
[22.21199799 153.84675598]
[6.70099878 154.28096008]
[-6.08383036 145.48733521]
[-11.22646141 130.84722900]
[-6.74944830 115.99003601]
[5.62570620 106.62866974]
[21.14050293 106.36276245]
[33.82918549 115.29455566]
[47.98144913 110.32328796]
[62.13371277 105.35202789]
[76.28597260 100.38076782]
[90.43824005 95.40950012]
[91.45088196 80.44371796]
[78.09730530 73.61129761]
[64.74372864 66.77887726]
[51.39015198 59.94645691]
[41.28298950 71.14947510]
[28.62013435 79.35401917]
[14.26496506 84.00068665]
[-0.80375999 84.77266693]
[-15.55862999 81.61731720]
[-28.99363327 74.74977875]
[-40.19274902 64.63828278]
[-48.39240265 51.97226334]
[-53.03352737 37.61530304]
[-53.79968643 22.54628181]
[-50.63864136 7.79263115]
[-43.76591492 -5.63971949]
[-33.65010071 -16.83493042]
[-20.98091507 -25.02969360]
[-6.62216234 -29.66527557]
[8.44715405 -30.42561531]
[23.19958305 -27.25887299]
[36.62928009 -20.38096046]
[47.82058334 -10.26082516]
[56.01045227 2.41152358]
[60.64049149 16.77206612]
[61.39501190 31.84167480]
[58.22257614 46.59288025]
[71.57614899 53.42530060]
[84.92972565 60.25772095]
[98.28330231 67.09014130]
[100.56346130 52.26446152]
[103.49790192 37.55429459]
[107.08087921 22.98850060]
[111.30535126 8.59566116]
[116.16303253 -5.59598827]
[121.64439392 -19.55860329]
[127.73868561 -33.26479340]
[134.43394470 -46.68766403]
[141.71704102 -59.80088425]
[149.57368469 -72.57872009]
[157.98846436 -84.99611664]
[166.94485474 -97.02869415]
[176.42530823 -108.65285492]
[186.41119385 -119.84579468]
[196.88294983 -130.58554077]
[207.82002258 -140.85104370]
[219.20095825 -150.62216187]
[231.00340271 -159.87969971]
[243.20423889 -168.60551453]
[255.77949524 -176.78248596]
[268.70452881 -184.39456177]
[281.95394897 -191.42681885]
[295.50180054 -197.86544800]
[309.32147217 -203.69783020]
[323.38583374 -208.91252136]
[337.66735840 -213.49928284]
[352.13796997 -217.44911194]
[366.76931763 -220.75427246]
[381.53265381 -223.40827942]
[396.39904785 -225.40591431]
[411.33929443 -226.74327087]
[426.32412720 -227.41770935]
[441.32412720 -227.42791748]
[456.30987549 -226.77388000]
[471.25192261 -225.45687866]
[486.12103271 -223.47947693]
[500.88796997 -220.84558105]
[515.52380371 -217.56034851]
[529.99975586 -213.63021851]
[544.28753662 -209.06289673]
[558.35900879 -203.86737061]
[572.18658447 -198.05380249]
[585.74316406 -191.63362122]
[599.00219727 -184.61941528]
[611.93756104 -177.02493286]
[624.52392578 -168.86509705]
[636.73663330 -160.15589905]
[648.55169678 -150.91444397]
[659.94592285 -141.15884399]
[670.89691162 -130.90823364]
[681.38330078 -120.18275452]
[691.38446045 -109.00342560]
[700.88067627 -97.39218140]
[709.85345459 -85.37180328]
[718.28515625 -72.96588135]
[726.15917969 -60.19875336]
[733.46014404 -47.09546280]
[740.17364502 -33.68171692]
[746.28662109 -19.98383904]
[751.78698730 -6.02869940]
[756.66394043 8.15632343]
[760.90802002 22.54339790]
[764.51080322 37.10429764]
[767.46527100 51.81045914]
[769.76562500 66.63301849]
[771.40734863 81.54291534]
[772.38714600 96.51087189]
[772.70324707 111.50754547]
[772.35485840 126.50350189]
[771.34277344 141.46931458]
[769.66900635 156.37564087]
[767.33673096 171.19320679]
[764.35058594 185.89297485]
[760.71643066 200.44607544]
[756.44140625 214.82397461]
[751.53387451 228.99847412]
[746.00341797 242.94172668]
[739.86102295 256.62640381]
[733.11859131 270.02566528]
[725.78942871 283.11318970]
[717.88793945 295.86334229]
[709.42956543 308.25106812]
[700.43090820 320.25210571]
[690.90966797 331.84286499]
[680.88452148 343.00061035]
[670.37506104 353.70349121]
[659.40197754 363.93048096]
[647.98675537 373.66152954]
[636.15185547 382.87753296]
[623.92041016 391.56039429]
[611.31646729 399.69308472]
[598.36474609 407.25970459]
[585.09069824 414.24533081]
[571.52032471 420.63629150]
[557.68023682 426.42007446]
[543.59759521 431.58526611]
[529.30004883 436.12179565]
[514.81561279 440.02075195]
[500.17276001 443.27444458]
[485.40017700 445.87655640]
[470.52688599 447.82189941]
[455.58200073 449.10671997]
[440.59487915 449.72848511]
[425.59494019 449.68597412]
[410.61160278 448.97924805]
[395.67425537 447.60974121]
[380.81219482 445.58007812]
[366.05462646 442.89428711]
[351.43045044 439.55761719]
[336.96835327 435.57662964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[46 75]
[47 74]
[48 73]
[49 72]
] def

init

% Start Annotations
28 45 0.16 0.6 colorpair
31 42 0.16 0.2 colorpair
46 75 0.16 0.6 colorpair
47 74 0.16 0.6 colorpair
48 73 0.0 0.6 colorpair
49 72 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
28 45 1 gmark
28 cmark
45 cmark
29 44 11 gmark
29 cmark
44 cmark
30 43 3 gmark
30 cmark
43 cmark
31 42 2 gmark
31 cmark
42 cmark
32 41 5 gmark
32 cmark
41 cmark
46 75 1 gmark
46 cmark
47 74 1 gmark
47 cmark
48 73 1 gmark
49 72 1 gmark
49 cmark

% End Annotations
showpage
end
%%EOF
