%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  2 02:08:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUAUA_GAAAAAGGGCAACAUGCGCAAACAUGU_UACCCUAAUGAGCCCGUUAAAAAGACGGUGGCUAUUUUAGAUUAAAGAUUAAAUUAAUAACCAUUUAACCAUCGAAACCAGCCAAAGUU___AGCGAUGGUUAUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[139.64118958 242.43508911]
[124.59637451 245.78819275]
[109.28421783 247.55671692]
[93.87115479 247.72142029]
[78.52469635 246.28051758]
[63.41166306 243.24969482]
[48.69631195 238.66186523]
[34.53858566 232.56689453]
[21.09236526 225.03105164]
[8.50380039 216.13623047]
[-3.09028149 205.97912598]
[-13.56386471 194.67010498]
[-22.80311012 182.33210754]
[-30.70759392 169.09924316]
[-37.19140625 155.11532593]
[-51.37592316 159.99378967]
[-65.56044006 164.87225342]
[-79.74495697 169.75073242]
[-90.27846527 181.55563354]
[-104.83022308 178.37828064]
[-118.96179962 183.40805054]
[-133.03883362 188.58851624]
[-143.31765747 200.61582947]
[-157.93399048 197.75016785]
[-172.01101685 202.93064880]
[-178.41078186 217.38121033]
[-193.18406677 222.99595642]
[-207.56616211 216.44378662]
[-213.02441406 201.61195374]
[-206.32054138 187.29994202]
[-191.43183899 181.99880981]
[-177.19149780 188.85362244]
[-163.11447144 183.67314148]
[-153.84252930 172.01638794]
[-138.21929932 174.51148987]
[-124.14228058 169.33102417]
[-118.91425323 164.03166199]
[-109.70869446 164.19377136]
[-100.18975830 152.73780823]
[-84.62342834 155.56620789]
[-70.43891144 150.68774414]
[-56.25439072 145.80926514]
[-42.06987381 140.93080139]
[-46.43779755 120.37527466]
[-47.84731674 99.40811920]
[-46.26996613 78.45291901]
[-41.73760605 57.93302155]
[-34.34180450 38.26298141]
[-24.23197174 19.84017754]
[-11.61235142 3.03679609]
[3.26210833 -11.80769348]
[-5.96439075 -23.63442993]
[-15.19089031 -35.46116638]
[-24.41738892 -47.28790283]
[-33.64389038 -59.11464310]
[-49.32563400 -62.50025558]
[-56.32670593 -76.93509674]
[-49.27647400 -91.34598541]
[-33.58327866 -94.67813110]
[-21.28559494 -84.37538910]
[-21.81715202 -68.34114075]
[-12.59065247 -56.51440430]
[-3.36415315 -44.68766785]
[5.86234617 -32.86093140]
[15.08884525 -21.03419304]
[24.87542343 -27.34000969]
[35.12781906 -32.85623932]
[45.78246307 -37.54867935]
[56.77329254 -41.38822937]
[68.03215027 -44.35108948]
[79.48922729 -46.41888046]
[91.07348633 -47.57878494]
[102.71309662 -47.82360840]
[114.33588409 -47.15183258]
[125.86978149 -45.56762695]
[137.24327087 -43.08081436]
[148.38581848 -39.70681000]
[159.22834778 -35.46653366]
[169.70362854 -30.38628578]
[179.74670410 -24.49756050]
[189.29530334 -17.83687401]
[198.29020691 -10.44552517]
[206.67565918 -2.36934590]
[214.39965820 6.34158659]
[221.41430664 15.63325882]
[227.67610168 25.44805717]
[233.14624023 35.72512436]
[237.79077148 46.40073395]
[241.58093262 57.40869522]
[244.49319458 68.68074799]
[246.50952148 80.14699554]
[247.61738586 91.73634338]
[247.80993652 103.37693787]
[247.08596802 114.99658966]
[245.44998169 126.52325439]
[242.91210938 137.88545227]
[257.19763184 142.45968628]
[271.48318481 147.03393555]
[285.76870728 151.60816956]
[300.05422974 156.18240356]
[314.33975220 160.75663757]
[328.62530518 165.33087158]
[335.91857910 152.16676331]
[345.64016724 140.67863464]
[357.41638184 131.30807495]
[370.79455566 124.41526794]
[385.26046753 120.26513672]
[400.25808716 119.01721954]
[415.21096802 120.71947479]
[429.54434204 125.30648041]
[442.70727539 132.60191345]
[454.19384766 142.32534790]
[463.56246948 154.10307312]
[470.45312500 167.48234558]
[474.60092163 181.94894409]
[475.84640503 196.94677734]
[474.14172363 211.89936829]
[469.55239868 226.23200989]
[462.25485229 239.39376831]
[452.52954102 250.87873840]
[440.75030518 260.24548340]
[427.36990356 267.13397217]
[412.90264893 271.27941895]
[397.90463257 272.52246094]
[382.95230103 270.81536865]
[368.62039185 266.22372437]
[355.45983887 258.92404175]
[343.97644043 249.19688416]
[334.61160278 237.41613770]
[327.72528076 224.03462219]
[323.58218384 209.56669617]
[322.34155273 194.56845093]
[324.05105591 179.61640930]
[309.76553345 175.04217529]
[295.47998047 170.46792603]
[281.19445801 165.89369202]
[266.90893555 161.31945801]
[252.62341309 156.74522400]
[238.33787537 152.17098999]
[232.15437317 166.29026794]
[224.53448486 179.68904114]
[215.56100464 192.22164917]
[205.33148193 203.75190735]
[193.95710754 214.15446472]
[181.56149292 223.31626892]
[168.27938843 231.13772583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 43]
[16 42]
[17 41]
[18 40]
[20 38]
[21 36]
[22 35]
[24 33]
[25 32]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[96 139]
[97 138]
[98 137]
[99 136]
[100 135]
[101 134]
[102 133]
] def

init

% Start Annotations
15 43 0.16 0.6 colorpair
16 42 0.0 0.6 colorpair
17 41 0.0 0.6 colorpair
18 40 0.0 0.6 colorpair
20 38 0.0 0.6 colorpair
21 36 0.0 1 colorpair
22 35 0.16 1 colorpair
24 33 0.0 0.6 colorpair
25 32 0.0 0.2 colorpair
51 65 0.0 0.6 colorpair
52 64 0.0 1 colorpair
53 63 0.0 1 colorpair
54 62 0.0 1 colorpair
55 61 0.0 1 colorpair
96 139 0.0 1 colorpair
97 138 0.0 1 colorpair
98 137 0.16 1 colorpair
99 136 0.0 1 colorpair
100 135 0.16 1 colorpair
101 134 0.0 1 colorpair
102 133 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 43 1 gmark
15 cmark
16 42 1 gmark
17 41 1 gmark
18 40 1 gmark
20 38 1 gmark
22 cmark
35 cmark
24 33 1 gmark
25 32 2 gmark
51 65 1 gmark
98 cmark
100 cmark
135 cmark
102 133 1 gmark
102 cmark

% End Annotations
showpage
end
%%EOF
