%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  2 01:33:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGCAUUA_CU_GAAAUCUUUAGAAAGGAGACGCCU_A_AUGAU____________UACAAUUAGUACCAUGUUGCAGUUUGGUUUAUUCCUUAUUGCAUUGAUAGGUCUAGUAAUCAAGCUUAUUGAAUUAAGCAAUAAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[190.28164673 134.20739746]
[178.50563049 124.91066742]
[167.23229980 115.01036835]
[156.49258423 104.53363800]
[146.31588745 93.50919342]
[136.73010254 81.96724701]
[124.70511627 90.93383026]
[112.68013000 99.90042114]
[127.67786407 100.16088104]
[141.18302917 106.68856049]
[150.70433044 118.27928925]
[154.48535156 132.79492188]
[151.82862854 147.55778503]
[143.22424316 159.84454346]
[130.25944519 167.38868713]
[115.32585144 168.79852295]
[101.17825317 163.81399536]
[90.42646027 153.35459900]
[85.05386353 139.34977722]
[86.05152893 124.38298798]
[93.23342896 111.21747589]
[79.49682617 117.24290466]
[65.76022339 123.26833344]
[52.02362823 129.29376221]
[38.28702545 135.31919861]
[31.13921165 149.68194580]
[15.42377472 152.90756226]
[3.19625592 142.52163696]
[3.83656001 126.49137115]
[16.85350037 117.11380005]
[32.26159668 121.58259583]
[45.99819565 115.55716705]
[59.73479462 109.53173828]
[73.47139740 103.50630188]
[87.20799255 97.48087311]
[93.39339447 88.96780396]
[103.71353912 87.87542725]
[115.73853302 78.90884399]
[127.76351929 69.94226074]
[119.43656921 57.46165085]
[111.77421570 44.56234741]
[104.79746246 31.27970695]
[98.52542877 17.65013313]
[92.97531891 3.71098518]
[88.16232300 -10.49953079]
[84.09965515 -24.94246483]
[80.79843140 -39.57822800]
[78.26772308 -54.36670685]
[76.51444244 -69.26736450]
[75.54341125 -84.23936462]
[75.35728455 -99.24166870]
[75.95657349 -114.23314667]
[77.33963776 -129.17271423]
[79.50268555 -144.01942444]
[82.43978882 -158.73258972]
[86.14289093 -173.27186584]
[90.60185242 -187.59741211]
[95.80444336 -201.66996765]
[101.73640442 -215.45095825]
[108.38147736 -228.90258789]
[115.72145081 -241.98802185]
[123.73620605 -254.67137146]
[132.40377808 -266.91787720]
[141.70039368 -278.69396973]
[151.60058594 -289.96737671]
[162.07722473 -300.70721436]
[173.10157776 -310.88400269]
[184.64343262 -320.46987915]
[196.67117310 -329.43856812]
[209.15179443 -337.76547241]
[222.05111694 -345.42779541]
[235.33378601 -352.40451050]
[248.96337891 -358.67651367]
[262.90255737 -364.22656250]
[277.11306763 -369.03952026]
[291.55603027 -373.10214233]
[306.19180298 -376.40332031]
[320.98028564 -378.93399048]
[335.88095093 -380.68722534]
[350.85293579 -381.65820312]
[365.85525513 -381.84429932]
[380.84674072 -381.24496460]
[395.78628540 -379.86184692]
[410.63299561 -377.69876099]
[425.34616089 -374.76162720]
[439.88540649 -371.05847168]
[454.21096802 -366.59945679]
[468.28347778 -361.39682007]
[482.06445312 -355.46484375]
[495.51608276 -348.81970215]
[508.60147095 -341.47970581]
[521.28479004 -333.46490479]
[533.53131104 -324.79730225]
[545.30737305 -315.50064087]
[556.58074951 -305.60043335]
[567.32055664 -295.12374878]
[577.49731445 -284.09936523]
[587.08312988 -272.55746460]
[596.05181885 -260.52972412]
[604.37866211 -248.04907227]
[612.04095459 -235.14971924]
[619.01763916 -221.86703491]
[625.28955078 -208.23742676]
[630.83959961 -194.29823303]
[635.65252686 -180.08769226]
[639.71508789 -165.64472961]
[643.01623535 -151.00895691]
[645.54681396 -136.22045898]
[647.30004883 -121.31978607]
[648.27099609 -106.34778595]
[648.45703125 -91.34548187]
[647.85760498 -76.35400391]
[646.47448730 -61.41444397]
[644.31134033 -46.56774521]
[641.37414551 -31.85460091]
[637.67095947 -17.31534386]
[633.21191406 -2.98982215]
[628.00921631 11.08269787]
[622.07720947 24.86364365]
[615.43200684 38.31524277]
[608.09197998 51.40062714]
[600.07714844 64.08393097]
[591.40948486 76.33038330]
[582.11279297 88.10642242]
[572.21252441 99.37977600]
[561.73583984 110.11953735]
[550.71142578 120.29626465]
[539.16949463 129.88208008]
[527.14172363 138.85069275]
[514.66107178 147.17753601]
[501.76168823 154.83976746]
[488.47897339 161.81640625]
[474.84933472 168.08830261]
[460.91015625 173.63829041]
[446.69958496 178.45115662]
[432.25662231 182.51370239]
[417.62081909 185.81478882]
[402.83230591 188.34536743]
[387.93164062 190.09851074]
[372.95962524 191.06941223]
[357.95733643 191.25540161]
[342.96585083 190.65597534]
[328.02630615 189.27276611]
[313.17959595 187.10958862]
[298.46646118 184.17236328]
[283.92721558 180.46911621]
[269.60171509 176.01002502]
[255.52922058 170.80731201]
[241.74829102 164.87522888]
[228.29670715 158.23002625]
[215.21134949 150.88993835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
] def

init

% Start Annotations
6 39 0.0 0.2 colorpair
7 38 0.0 1 colorpair
8 37 0.16 1 colorpair
21 35 0.0 0.6 colorpair
22 34 0.0 0.2 colorpair
23 33 0.0 1 colorpair
24 32 0.0 1 colorpair
25 31 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 39 2 gmark
8 cmark
21 35 1 gmark
22 34 2 gmark
25 31 1 gmark

% End Annotations
showpage
end
%%EOF
