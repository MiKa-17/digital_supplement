%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  2 01:33:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGCAUUA_CU_GAAAUCUUUAGAAAGGAGACGCCU_A_AUGAU____________UACAAUUAGUACCAUGUUGCAGUUUGGUUUAUUCCUUAUUGCAUUGAUAGGUCUAGUAAUCAAGCUUAUUGAAUUAAGCAAUAAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[201.14743042 130.10124207]
[186.91952515 122.56285095]
[173.41864014 113.78781128]
[160.75201416 103.84571838]
[149.02020264 92.81542206]
[138.31639099 80.78440857]
[126.29141235 89.75099182]
[114.26641846 98.71757507]
[108.56246185 111.48301697]
[94.70016479 113.30741119]
[82.67517853 122.27399445]
[97.64084625 123.28825378]
[109.76963806 132.11392212]
[115.33850098 146.04187012]
[112.63800049 160.79678345]
[102.49710083 171.84947205]
[88.02864838 175.80722046]
[73.67387390 171.45515442]
[63.83913040 160.12916565]
[61.54329300 145.30590820]
[67.49076843 131.53590393]
[54.01490021 138.12385559]
[40.53903580 144.71179199]
[27.06317139 151.29974365]
[13.58730698 157.88769531]
[2.01310468 170.27616882]
[-13.09527683 162.58375549]
[-9.88590717 145.93634033]
[6.99935770 144.41183472]
[20.47522163 137.82388306]
[33.95108795 131.23593140]
[47.42695236 124.64798737]
[60.90281677 118.06003571]
[73.70858765 110.24900818]
[85.73358154 101.28242493]
[91.43753815 88.51698303]
[105.29983521 86.69258881]
[117.32482147 77.72600555]
[129.34980774 68.75941467]
[121.88637543 56.85715485]
[115.37001801 44.41144943]
[109.84004974 31.49750328]
[105.32984924 18.19335175]
[101.86660767 4.57937908]
[99.47121429 -9.26216221]
[98.15808105 -23.24764824]
[97.93511200 -37.29258728]
[98.80360413 -51.31213379]
[100.75827026 -65.22159576]
[103.78724670 -78.93695068]
[107.87219238 -92.37535858]
[112.98840332 -105.45565033]
[119.10491180 -118.09882355]
[126.18473816 -130.22851562]
[134.18507385 -141.77146912]
[143.05754089 -152.65798950]
[152.74853516 -162.82234192]
[163.19944763 -172.20314026]
[174.34712219 -180.74375916]
[186.12419128 -188.39263916]
[198.45950317 -195.10360718]
[211.27848816 -200.83615112]
[224.50370789 -205.55570984]
[238.05525208 -209.23377991]
[251.85122681 -211.84820557]
[265.80831909 -213.38323975]
[279.84216309 -213.82965088]
[293.86798096 -213.18476868]
[307.80111694 -211.45256042]
[321.55731201 -208.64352417]
[335.05352783 -204.77467346]
[348.20822144 -199.86941528]
[360.94195557 -193.95742798]
[373.17782593 -187.07447815]
[384.84194946 -179.26217651]
[395.86383057 -170.56774902]
[406.17700195 -161.04376221]
[415.71908569 -150.74777222]
[424.43258667 -139.74201965]
[432.26480103 -128.09301758]
[439.16851807 -115.87116241]
[452.77764893 -122.17919922]
[466.38677979 -128.48724365]
[479.99591064 -134.79527283]
[493.60507202 -141.10331726]
[507.21420288 -147.41134644]
[520.82336426 -153.71939087]
[517.10888672 -168.29736328]
[516.13659668 -183.30967712]
[517.93963623 -198.24499512]
[522.45654297 -212.59463501]
[529.53350830 -225.86984253]
[538.92944336 -237.61849976]
[550.32440186 -247.44041443]
[563.33020020 -255.00108337]
[577.50390625 -260.04296875]
[592.36279297 -262.39437866]
[607.40069580 -261.97518921]
[622.10546875 -258.79968262]
[635.97631836 -252.97605896]
[648.54071045 -244.70262146]
[659.37078857 -234.26116943]
[668.09771729 -222.00735474]
[674.42413330 -208.35850525]
[678.13464355 -193.77952576]
[679.10290527 -178.76695251]
[677.29583740 -163.83212280]
[672.77502441 -149.48370361]
[665.69451904 -136.21040344]
[656.29541016 -124.46428680]
[644.89782715 -114.64543152]
[631.88995361 -107.08827972]
[617.71490479 -102.05020142]
[602.85540771 -99.70281219]
[587.81762695 -100.12605286]
[573.11370850 -103.30550385]
[559.24444580 -109.13288116]
[546.68225098 -117.40970612]
[535.85498047 -127.85407257]
[527.13134766 -140.11024475]
[513.52221680 -133.80221558]
[499.91308594 -127.49417114]
[486.30395508 -121.18613434]
[472.69482422 -114.87809753]
[459.08569336 -108.57006073]
[445.47653198 -102.26202393]
[450.96707153 -87.13792419]
[455.08981323 -71.58475494]
[457.81201172 -55.72594833]
[459.11196899 -39.68736267]
[458.97927856 -23.59629440]
[457.41491699 -7.58046627]
[454.43124390 8.23299503]
[450.05181885 23.71855927]
[444.31140137 38.75329208]
[437.25543213 53.21783447]
[428.93981934 66.99733734]
[419.43057251 79.98239899]
[408.80307007 92.06990051]
[397.14160156 103.16385651]
[384.53869629 113.17614746]
[371.09429932 122.02724457]
[356.91510010 129.64683533]
[342.11364746 135.97436523]
[326.80731201 140.95954895]
[311.11764526 144.56272888]
[295.16909790 146.75526428]
[279.08825684 147.51963806]
[263.00277710 146.84971619]
[247.04034424 144.75076294]
[231.32765198 141.23933411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[10 35]
[11 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[81 126]
[82 125]
[83 124]
[84 123]
[85 122]
[86 121]
[87 120]
] def

init

% Start Annotations
6 39 0.0 0.2 colorpair
7 38 0.0 1 colorpair
8 37 0.16 1 colorpair
10 35 0.0 1 colorpair
11 34 0.16 0.2 colorpair
21 33 0.0 0.6 colorpair
22 32 0.0 1 colorpair
23 31 0.0 0.6 colorpair
24 30 0.0 1 colorpair
25 29 0.0 1 colorpair
81 126 0.16 1 colorpair
83 124 0.16 0.2 colorpair
84 123 0.0 0.2 colorpair
85 122 0.32 1 colorpair
86 121 0.0 1 colorpair
87 120 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 39 2 gmark
8 cmark
11 34 2 gmark
11 cmark
21 33 1 gmark
23 31 1 gmark
81 cmark
82 125 5 gmark
82 cmark
125 cmark
83 124 2 gmark
124 cmark
84 123 2 gmark
85 cmark
122 cmark

% End Annotations
showpage
end
%%EOF
