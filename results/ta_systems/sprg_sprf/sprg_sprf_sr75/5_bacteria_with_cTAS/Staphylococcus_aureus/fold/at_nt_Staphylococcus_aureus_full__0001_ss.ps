%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  2 02:17:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUAUA_GAAAAAGGGCAACAUGCGCAAACAUGUUACCCUAAUGAGCCCGUUAAAAAGACGGUGGCUAUUUUAGAUUAAAGAUUAAAUUAAUAACCAUUUAACCAUCGAAACCAGCCAAAGUUAG___CGAUGGUUAUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[101.59433746 281.43643188]
[86.13397217 280.91284180]
[70.77439880 279.07424927]
[55.62725449 275.93402100]
[40.80264282 271.51498413]
[26.40831566 265.84927368]
[12.54890156 258.97805786]
[-0.67485923 250.95129395]
[-13.16684818 241.82730103]
[-24.83626556 231.67242432]
[-35.59828949 220.56045532]
[-45.37469482 208.57217407]
[-54.09442139 195.79472351]
[-61.69408798 182.32096863]
[-68.11845398 168.24885559]
[-82.23821259 173.31169128]
[-96.35797119 178.37454224]
[-110.47772980 183.43737793]
[-117.28037262 197.45030212]
[-131.67193604 202.38360596]
[-144.98919678 195.81196594]
[-159.10894775 200.87480164]
[-173.22871399 205.93765259]
[-187.34846497 211.00048828]
[-201.46823120 216.06333923]
[-207.98834229 230.45999146]
[-222.80795288 235.95129395]
[-237.13487244 229.27934265]
[-242.46919250 214.40249634]
[-235.64613342 200.14691162]
[-220.71371460 194.97018433]
[-206.53106689 201.94357300]
[-192.41131592 196.88073730]
[-178.29154968 191.81788635]
[-164.17179871 186.75505066]
[-150.05203247 181.69219971]
[-143.94485474 168.15565491]
[-129.69754028 162.82008362]
[-115.54057312 169.31762695]
[-101.42081451 164.25477600]
[-87.30105591 159.19194031]
[-73.18129730 154.12908936]
[-79.12706757 128.90005493]
[-81.41726685 103.08123016]
[-80.00516510 77.19952393]
[-74.91956329 51.78312683]
[-66.26425934 27.35072517]
[-54.21587753 4.40092707]
[-39.02030945 -16.59791374]
[-20.98765564 -35.21725845]
[-30.51914024 -46.79961014]
[-40.05062485 -58.38195801]
[-49.58210754 -69.96430969]
[-59.11359406 -81.54665375]
[-74.87821960 -84.52256775]
[-82.25297546 -98.77011108]
[-75.58058167 -113.35978699]
[-59.97952271 -117.09964752]
[-47.41759872 -107.12078857]
[-47.53124237 -91.07814026]
[-37.99975967 -79.49578857]
[-28.46827507 -67.91344452]
[-18.93679047 -56.33109283]
[-9.40530586 -44.74874496]
[-1.08055961 -50.67992783]
[7.56497622 -56.13291168]
[16.50386429 -61.09039307]
[25.70773506 -65.53663635]
[35.14737701 -69.45754242]
[44.79283905 -72.84064484]
[54.61350632 -75.67523193]
[64.57820892 -77.95228577]
[74.65532684 -79.66459656]
[84.81288147 -80.80672455]
[95.01863098 -81.37504578]
[105.24019623 -81.36775208]
[115.44512177 -80.78486633]
[125.60103607 -79.62825012]
[135.67570496 -77.90155792]
[145.63714600 -75.61028290]
[155.45375061 -72.76168823]
[165.09437561 -69.36481476]
[174.52842712 -65.43045044]
[183.72593689 -60.97107697]
[192.65774536 -56.00084305]
[201.29548645 -50.53552628]
[209.61175537 -44.59246826]
[217.58016968 -38.19053268]
[225.17543030 -31.35003853]
[232.37342834 -24.09268951]
[239.15133667 -16.44151878]
[245.48762512 -8.42081165]
[251.36219788 -0.05601921]
[256.75640869 8.62631035]
[261.65313721 17.59862328]
[266.03683472 26.83244705]
[269.89358521 36.29847336]
[273.21118164 45.96666336]
[275.97909546 55.80633163]
[278.18850708 65.78625488]
[279.83239746 75.87475586]
[280.90557861 86.03982544]
[281.40466309 96.24919891]
[281.32803345 106.47047424]
[280.67593384 116.67121124]
[279.45043945 126.81904602]
[277.65542603 136.88175964]
[275.29663086 146.82743835]
[272.38150024 156.62449646]
[268.91931152 166.24185181]
[264.92105103 175.64898682]
[260.39938354 184.81604004]
[255.36866760 193.71391296]
[249.84487915 202.31439209]
[243.84553528 210.59014893]
[237.38969421 218.51495361]
[248.33305359 228.77374268]
[259.27642822 239.03253174]
[270.21978760 249.29132080]
[283.88650513 242.68940735]
[299.01553345 241.47418213]
[313.56079102 245.81001282]
[325.55520630 255.11050415]
[333.37655640 268.11782837]
[335.96710205 283.07287598]
[332.97650146 297.95309448]
[324.80920410 310.74606323]
[312.56976318 319.72158813]
[297.91345215 323.66586304]
[282.82244873 322.04544067]
[269.33764648 315.07946777]
[259.28277588 303.71002197]
[254.01770020 289.47473145]
[254.25444031 274.29882812]
[259.96099854 260.23468018]
[249.01762390 249.97589111]
[238.07426453 239.71710205]
[227.13090515 229.45831299]
[215.64173889 239.81669617]
[203.31201172 249.15879822]
[190.23135376 257.41671753]
[176.49482727 264.53042603]
[162.20228577 270.44821167]
[147.45762634 275.12707520]
[132.36799622 278.53298950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 42]
[16 41]
[17 40]
[18 39]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[116 138]
[117 137]
[118 136]
[119 135]
] def

init

% Start Annotations
15 42 0.0 1 colorpair
16 41 0.0 1 colorpair
17 40 0.0 1 colorpair
18 39 0.0 1 colorpair
21 36 0.0 1 colorpair
22 35 0.0 1 colorpair
23 34 0.0 0.2 colorpair
24 33 0.0 1 colorpair
25 32 0.0 0.2 colorpair
50 64 0.0 0.2 colorpair
51 63 0.0 1 colorpair
52 62 0.0 1 colorpair
53 61 0.0 1 colorpair
54 60 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
23 34 2 gmark
25 32 2 gmark
50 64 2 gmark
116 138 8 gmark
116 cmark
117 137 4 gmark
117 cmark
118 136 4 gmark
118 cmark
119 135 4 gmark

% End Annotations
showpage
end
%%EOF
