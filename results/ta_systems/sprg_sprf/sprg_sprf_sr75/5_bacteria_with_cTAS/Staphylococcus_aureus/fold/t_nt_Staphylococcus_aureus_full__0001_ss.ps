%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  2 02:17:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGCAUUACUGAAAUCUUUAGAAAGGAGACGCCU_____________AAUGAUUACAAUUAGUACCAUGUUGCAGUUUGGUUUAUUCCUUAUUGCAUUGAUAGGUCUAGUAAUCAAGCUUAUUGAAUUAAGCAAUAAAAAAUAA_\
) } def
/len { sequence length } bind def

/coor [
[191.30525208 131.48771667]
[179.26026917 122.54222107]
[167.69996643 112.97859192]
[156.65602112 102.82305145]
[146.15872192 92.10343170]
[136.23681641 80.84911346]
[124.48142242 90.16633606]
[112.72602081 99.48355103]
[127.70202637 100.33166504]
[140.42367554 108.27896118]
[147.75408936 121.36579132]
[147.88571167 136.36521912]
[140.78610229 149.57867432]
[128.20588684 157.74800110]
[113.24707031 158.85881042]
[99.59820557 152.63720703]
[90.62481689 140.61727905]
[88.53956604 125.76293945]
[93.85593414 111.73793030]
[80.56287384 118.68737030]
[67.26982117 125.63681030]
[53.97676849 132.58624268]
[40.68371582 139.53569031]
[34.53342056 154.35302734]
[19.07495308 158.64433289]
[6.16672134 149.11767578]
[5.71081972 133.08110046]
[18.05697632 122.83649445]
[33.73427582 126.24263763]
[47.02732849 119.29319763]
[60.32038498 112.34375763]
[73.61343384 105.39431763]
[86.90649414 98.44487762]
[92.78018951 89.23606873]
[103.40880585 87.72814941]
[115.16420746 78.41093445]
[126.91960907 69.09371185]
[118.22831726 56.86403275]
[110.18898773 44.19624329]
[102.82366180 31.12507057]
[96.15251923 17.68633842]
[90.19385529 3.91688108]
[84.96399689 -10.14555836]
[80.47727203 -24.46243477]
[76.74598694 -38.99451065]
[73.78037262 -53.70194626]
[71.58854675 -68.54444122]
[70.17652130 -83.48130035]
[69.54817200 -98.47158813]
[69.70521545 -113.47422028]
[70.64721680 -128.44807434]
[72.37160492 -143.35211182]
[74.87364960 -158.14546204]
[78.14648438 -172.78759766]
[82.18115234 -187.23838806]
[86.96658325 -201.45820618]
[92.48966980 -215.40808105]
[98.73526764 -229.04978943]
[105.68625641 -242.34593201]
[113.32358551 -255.26007080]
[121.62632751 -267.75680542]
[130.57171631 -279.80184937]
[140.13523865 -291.36224365]
[150.29067993 -302.40628052]
[161.01020813 -312.90368652]
[172.26443481 -322.82568359]
[184.02250671 -332.14508057]
[196.25221252 -340.83633423]
[208.92002869 -348.87561035]
[221.99122620 -356.24090576]
[235.42997742 -362.91201782]
[249.19946289 -368.87063599]
[263.26190186 -374.10046387]
[277.57879639 -378.58712769]
[292.11090088 -382.31835938]
[306.81832886 -385.28393555]
[321.66082764 -387.47573853]
[336.59768677 -388.88769531]
[351.58798218 -389.51602173]
[366.59063721 -389.35891724]
[381.56448364 -388.41687012]
[396.46850586 -386.69244385]
[411.26184082 -384.19033813]
[425.90396118 -380.91748047]
[440.35473633 -376.88275146]
[454.57455444 -372.09729004]
[468.52441406 -366.57415771]
[482.16610718 -360.32852173]
[495.46221924 -353.37750244]
[508.37634277 -345.74011230]
[520.87304688 -337.43734741]
[532.91809082 -328.49191284]
[544.47845459 -318.92834473]
[555.52246094 -308.77288818]
[566.01983643 -298.05331421]
[575.94177246 -286.79907227]
[585.26110840 -275.04095459]
[593.95233154 -262.81121826]
[601.99157715 -250.14338684]
[609.35687256 -237.07217407]
[616.02789307 -223.63340759]
[621.98651123 -209.86390686]
[627.21624756 -195.80143738]
[631.70288086 -181.48452759]
[635.43408203 -166.95243835]
[638.39965820 -152.24497986]
[640.59136963 -137.40248108]
[642.00329590 -122.46560669]
[642.63153076 -107.47531128]
[642.47442627 -92.47267914]
[641.53234863 -77.49883270]
[639.80786133 -62.59481430]
[637.30572510 -47.80147171]
[634.03277588 -33.15935516]
[629.99804688 -18.70859528]
[625.21252441 -4.48880482]
[619.68933105 9.46104336]
[613.44366455 23.10271263]
[606.49261475 36.39881134]
[598.85522461 49.31289673]
[590.55236816 61.80957413]
[581.60693359 73.85458374]
[572.04333496 85.41492462]
[561.88781738 96.45889282]
[551.16821289 106.95623016]
[539.91394043 116.87815857]
[528.15582275 126.19748688]
[515.92602539 134.88867188]
[503.25817871 142.92787170]
[490.18695068 150.29309082]
[476.74816895 156.96411133]
[462.97863770 162.92265320]
[448.91616821 168.15237427]
[434.59924316 172.63897705]
[420.06713867 176.37013245]
[405.35968018 179.33561707]
[390.51715088 181.52729797]
[375.58029175 182.93919373]
[360.58999634 183.56739807]
[345.58734131 183.41023254]
[330.61349487 182.46809387]
[315.70950317 180.74356079]
[300.91616821 178.24139404]
[286.27404785 174.96841431]
[271.82330322 170.93362427]
[257.60351562 166.14805603]
[243.65370178 160.62484741]
[230.01205444 154.37913513]
[216.71597290 147.42802429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
] def

init

% Start Annotations
6 37 0.0 1 colorpair
7 36 0.0 1 colorpair
8 35 0.0 1 colorpair
19 33 0.0 1 colorpair
20 32 0.0 1 colorpair
21 31 0.0 1 colorpair
22 30 0.0 1 colorpair
23 29 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
