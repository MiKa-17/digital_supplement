%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  2 02:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGCAUUACUGAAAUCUUUAGAAAGGAGACGCCUAAUGAUUACAAUUAGUACCAUGUUGCAGUUUGGUUUAUUCCUUAUUGCAUUGAUAGGUCUAGUAAUCAAGCUUAUUGAAUUAAGCAAUAAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[71.19067383 158.94338989]
[82.99412537 149.68643188]
[89.16523743 136.01464844]
[77.19497681 145.05416870]
[65.22471619 154.09368896]
[53.25445938 163.13320923]
[54.16857910 181.16700745]
[44.21933365 196.04830933]
[27.49929047 201.99114990]
[10.68820477 196.81913757]
[-0.85180479 206.40184021]
[-6.52579641 221.17060852]
[-21.26026917 223.34881592]
[-32.80027771 232.93151855]
[-44.34028625 242.51422119]
[-55.88029861 252.09692383]
[-67.42030334 261.67962646]
[-75.74320221 276.45004272]
[-92.24040985 272.54129028]
[-93.05127716 255.60673523]
[-77.00300598 250.13961792]
[-65.46299744 240.55691528]
[-53.92298889 230.97421265]
[-42.38298035 221.39151001]
[-30.84297180 211.80880737]
[-25.99439812 197.72546387]
[-10.43450737 194.86183167]
[1.10550272 185.27912903]
[-1.47486806 173.31384277]
[1.32793379 161.32418823]
[9.03549671 151.62925720]
[20.21465874 146.13140869]
[32.74369431 145.94323730]
[44.21494293 151.16294861]
[56.18519974 142.12342834]
[68.15545654 133.08390808]
[80.12571716 124.04439545]
[71.82559967 108.22157288]
[73.82559204 91.55170441]
[84.21874237 79.76837921]
[98.42221069 76.23907471]
[102.19281769 61.72072601]
[105.96342468 47.20237732]
[109.73403168 32.68402481]
[113.50463867 18.16567421]
[117.27524567 3.64732218]
[121.04586029 -10.87102890]
[119.59681702 -16.07368088]
[120.28022766 -20.81533051]
[122.54388428 -24.34381866]
[125.61309814 -26.24630356]
[130.37997437 -40.46871185]
[135.14685059 -54.69112396]
[134.91392517 -63.91454697]
[140.19155884 -69.18476105]
[145.28567505 -83.29327393]
[150.37977600 -97.40178680]
[150.35995483 -106.62812805]
[155.75791931 -111.77503967]
[161.17654419 -125.76212311]
[166.59516907 -139.74920654]
[171.52598572 -153.91560364]
[175.96307373 -168.24432373]
[180.40017700 -182.57304382]
[184.83726501 -196.90176392]
[189.27435303 -211.23048401]
[193.71144104 -225.55920410]
[186.59768677 -239.41677856]
[191.30165100 -253.88493347]
[204.55656433 -260.58142090]
[208.99366760 -274.91012573]
[201.40339661 -288.77243042]
[205.91853333 -303.91802979]
[219.86030579 -311.36129761]
[234.95732117 -306.68630981]
[242.25277710 -292.66662598]
[237.41842651 -277.61987305]
[223.32238770 -270.47302246]
[218.88528442 -256.14431763]
[226.03613281 -243.12890625]
[221.74041748 -228.53433228]
[208.04016113 -221.12211609]
[203.60307312 -206.79339600]
[199.16598511 -192.46467590]
[194.72889709 -178.13595581]
[190.29179382 -163.80723572]
[185.85470581 -149.47851562]
[187.23493958 -146.14167786]
[187.01161194 -141.95544434]
[184.79704285 -137.70739746]
[180.58226013 -134.33058167]
[175.16363525 -120.34349823]
[169.74501038 -106.35641479]
[164.48828125 -92.30767822]
[159.39418030 -78.19916534]
[154.30006409 -64.09066010]
[149.36924744 -49.92425156]
[144.60238647 -35.70184326]
[139.83551025 -21.47943306]
[135.56420898 -7.10042143]
[131.79359436 7.41792965]
[128.02299500 21.93628120]
[124.25238800 36.45463181]
[120.48178101 50.97298431]
[116.71116638 65.49133301]
[112.94055939 80.00968170]
[127.43734741 98.08551788]
[120.42435455 123.57892609]
[132.60021973 132.33955383]
[144.77607727 141.10017395]
[156.95193481 149.86079407]
[169.12779236 158.62141418]
[184.68359375 155.82994080]
[197.60919189 164.92414856]
[200.23603821 180.50860596]
[191.00567627 193.33732605]
[175.39433289 195.79925537]
[162.66390991 186.43377686]
[160.36717224 170.79727173]
[148.19131470 162.03665161]
[136.01545715 153.27603149]
[123.83959198 144.51541138]
[111.66373444 135.75479126]
[118.14899445 149.28036499]
[130.16281128 158.26190186]
[137.95257568 171.08062744]
[140.39079285 185.88113403]
[137.12452698 200.52120972]
[128.62657166 212.88182068]
[116.12690735 221.17388916]
[101.43475342 224.19721985]
[86.67665863 221.51422119]
[73.98870850 213.51321411]
[65.20738220 201.35227966]
[61.60368347 186.79159546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[6 34]
[10 28]
[11 27]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[41 106]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[51 99]
[52 98]
[53 97]
[55 96]
[56 95]
[57 94]
[59 93]
[60 92]
[61 91]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[70 79]
[71 78]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% Start Annotations
3 37 0.0 1 colorpair
4 36 0.0 1 colorpair
5 35 0.0 1 colorpair
6 34 0.0 1 colorpair
10 28 0.0 1 colorpair
11 27 0.0 1 colorpair
13 25 0.0 1 colorpair
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
17 21 0.0 1 colorpair
41 106 0.0 1 colorpair
42 105 0.0 1 colorpair
43 104 0.0 1 colorpair
44 103 0.0 1 colorpair
45 102 0.0 1 colorpair
46 101 0.0 1 colorpair
47 100 0.0 1 colorpair
51 99 0.0 1 colorpair
52 98 0.0 1 colorpair
53 97 0.0 1 colorpair
55 96 0.0 1 colorpair
56 95 0.0 1 colorpair
57 94 0.0 1 colorpair
59 93 0.0 1 colorpair
60 92 0.0 1 colorpair
61 91 0.0 1 colorpair
62 87 0.0 1 colorpair
63 86 0.0 1 colorpair
64 85 0.0 1 colorpair
65 84 0.0 1 colorpair
66 83 0.0 1 colorpair
67 82 0.0 1 colorpair
70 79 0.0 1 colorpair
71 78 0.0 1 colorpair
108 123 0.0 1 colorpair
109 122 0.0 1 colorpair
110 121 0.0 1 colorpair
111 120 0.0 1 colorpair
112 119 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
