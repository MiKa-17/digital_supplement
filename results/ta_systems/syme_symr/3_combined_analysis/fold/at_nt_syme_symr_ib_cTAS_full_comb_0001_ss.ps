%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 19:24:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAU_GAU_U_GCUAU__UC_CCC_U_U_A__AAUAGU_GAUUG_UGAUUAGCGGUG__CGGGUG_UG_UU_GC_C_G_CACAUCCGCACCGCGCU_____\
) } def
/len { sequence length } bind def

/coor [
[-13.12422085 276.44351196]
[-25.67137337 284.68325806]
[-38.92527771 291.73016357]
[-52.77285767 297.52404785]
[-67.09596252 302.01553345]
[-81.77238464 305.16625977]
[-96.67692566 306.94937134]
[-111.68240356 307.34963989]
[-126.66080475 306.36364746]
[-141.48432922 303.99981689]
[-156.02651978 300.27832031]
[-170.16328430 295.23089600]
[-183.77401733 288.90063477]
[-196.74259949 281.34149170]
[-208.95838928 272.61801147]
[-220.31715393 262.80459595]
[-230.72198486 251.98497009]
[-240.08412170 240.25146484]
[-248.32366943 227.70417786]
[-255.37033081 214.45014954]
[-261.16400146 200.60247803]
[-265.65524292 186.27929688]
[-268.80572510 171.60282898]
[-270.58859253 156.69825745]
[-270.98858643 141.69276428]
[-270.00238037 126.71438599]
[-267.63830566 111.89089966]
[-263.91656494 97.34877777]
[-258.86889648 83.21209717]
[-252.53839111 69.60146332]
[-244.97904968 56.63300323]
[-236.25535583 44.41735840]
[-226.44175720 33.05875778]
[-215.62196350 22.65410614]
[-203.88830566 13.29217243]
[-191.34086609 5.05283499]
[-178.08673096 -1.99361193]
[-164.23896790 -7.78704834]
[-149.91571045 -12.27804661]
[-135.23918152 -15.42828846]
[-120.33457947 -17.21089935]
[-105.32908630 -17.61066628]
[-90.35072327 -16.62418365]
[-75.52727509 -14.25986290]
[-60.98521423 -10.53787994]
[-46.84861374 -5.48998785]
[-33.23808670 0.84074497]
[-20.26975250 8.40030575]
[-8.05425644 17.12419701]
[3.30418253 26.93799019]
[13.70865536 37.75795364]
[23.07039261 49.49177170]
[31.30952072 62.03933716]
[38.35574722 75.29359436]
[44.14895248 89.14146423]
[48.63971329 103.46479034]
[63.30561447 100.31657410]
[77.97151947 97.16835785]
[92.63742065 94.02014160]
[96.52826691 90.23569489]
[102.29312134 88.99516296]
[108.28297424 91.15298462]
[123.11220551 88.89601898]
[137.94143677 86.63905334]
[152.77066040 84.38208771]
[167.59989929 82.12511444]
[182.42912292 79.86814880]
[190.60142517 75.41637421]
[197.73966980 77.77400970]
[202.17137146 63.20417786]
[212.15090942 51.70075989]
[225.94929504 45.25679398]
[241.17584229 44.98873901]
[255.19248962 50.94302750]
[265.57073975 62.08805084]
[270.51254272 76.49286652]
[269.16165161 91.66175079]
[261.75213623 104.96659851]
[249.56774902 114.10227203]
[234.71949768 117.48595428]
[219.77993774 114.53141022]
[207.33743286 105.75052643]
[199.54771423 92.66464233]
[184.68609619 94.69738007]
[169.85685730 96.95434570]
[155.02763367 99.21131897]
[140.19839478 101.46828461]
[125.36917114 103.72525024]
[110.53993988 105.98221588]
[95.78563690 108.68604279]
[81.11973572 111.83425903]
[66.45383453 114.98247528]
[51.78792953 118.13069153]
[53.57128143 133.03520203]
[53.97180176 148.04067993]
[52.98606491 163.01908875]
[50.62248611 177.84265137]
[46.90122986 192.38490295]
[41.85404587 206.52175903]
[35.52399445 220.13259888]
[27.96508026 233.10130310]
[19.24179840 245.31724548]
[9.42857456 256.67617798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[56 93]
[57 92]
[58 91]
[59 90]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[69 83]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
56 93 178 gmark
56 cmark
93 cmark
57 92 346 gmark
57 cmark
92 cmark
58 91 223 gmark
58 cmark
91 cmark
59 90 180 gmark
59 cmark
90 cmark
62 89 298 gmark
62 cmark
89 cmark
63 88 203 gmark
63 cmark
88 cmark
64 87 306 gmark
64 cmark
87 cmark
65 86 172 gmark
65 cmark
86 cmark
66 85 33 gmark
66 cmark
85 cmark
67 84 23 gmark
67 cmark
84 cmark
69 83 25 gmark
69 cmark
83 cmark

% End Annotations
showpage
end
%%EOF
