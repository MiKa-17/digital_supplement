%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 17:52:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGAUUGCUAUUCCC_UU_U_A_AAUAGUGAUUGUGAUUAGCGGUGCGGGUGUGUUGCCGCACAUCCGCACCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[32.44344330 113.46337128]
[31.11611938 99.59750366]
[16.21508980 97.87725067]
[1.31405759 96.15700531]
[-13.58697414 94.43675232]
[-28.48800468 92.71649933]
[-43.38903809 90.99624634]
[-58.29006958 89.27599335]
[-70.59915924 98.82188416]
[-85.68642426 96.86503601]
[-94.71110535 85.07136536]
[-109.61213684 83.35111237]
[-124.51316833 81.63085938]
[-139.41419983 79.91061401]
[-154.31523132 78.19036102]
[-169.21626282 76.47010803]
[-177.78361511 89.15313721]
[-191.26921082 96.39173889]
[-206.57415771 96.52253723]
[-220.18148804 89.51548004]
[-228.96435547 76.98072815]
[-230.90451050 61.79868698]
[-225.55610657 47.45807266]
[-214.14819336 37.25425339]
[-199.30220032 33.53199387]
[-184.42964172 37.14663696]
[-172.94813538 47.26757050]
[-167.49601746 61.56907654]
[-152.59498596 63.28932953]
[-137.69395447 65.00958252]
[-122.79292297 66.72982788]
[-107.89189148 68.45008087]
[-92.99085999 70.17033386]
[-81.51633453 60.74319839]
[-66.38005829 62.27550888]
[-56.56981659 74.37496185]
[-41.66878510 76.09521484]
[-26.76775360 77.81546783]
[-11.86672211 79.53572083]
[3.03430891 81.25597382]
[17.93534088 82.97621918]
[32.83637238 84.69647217]
[38.21643066 69.53787231]
[46.96522141 56.04021072]
[58.60572052 44.93944550]
[72.50323486 36.84084702]
[87.90000153 32.18598175]
[103.95652008 31.22866249]
[119.79730988 34.02108383]
[134.55865479 40.41098785]
[147.43569946 50.04996872]
[157.72631836 62.41246414]
[164.86943054 76.82440948]
[168.47555542 92.50000000]
[183.47555542 92.50000000]
[198.47555542 92.50000000]
[213.47555542 92.50000000]
[228.47555542 92.50000000]
[239.47224426 81.14886475]
[255.27565002 80.98176575]
[266.50988770 92.09785461]
[266.50988770 107.90214539]
[255.27565002 119.01823425]
[239.47224426 118.85113525]
[228.47555542 107.50000000]
[213.47555542 107.50000000]
[198.47555542 107.50000000]
[183.47555542 107.50000000]
[168.47555542 107.50000000]
[165.56680298 121.12216187]
[159.97709656 133.88066101]
[151.93499756 145.25381470]
[141.76933289 154.77658081]
[129.89575195 162.05960083]
[116.79978180 166.80506897]
[103.01688385 168.81895447]
[89.11062622 168.01890564]
[75.64962769 164.43765259]
[63.18428421 158.22158813]
[52.22429657 149.62492371]
[43.21780777 138.99914551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% Start Annotations
2 42 0.0 0.6 colorpair
3 41 0.16 0.6 colorpair
4 40 0.0 0.6 colorpair
5 39 0.16 0.6 colorpair
6 38 0.16 0.6 colorpair
7 37 0.16 0.6 colorpair
8 36 0.16 0.6 colorpair
12 32 0.16 0.6 colorpair
13 31 0.0 0.6 colorpair
14 30 0.0 0.2 colorpair
15 29 0.0 0.6 colorpair
16 28 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 42 1 gmark
3 41 1 gmark
41 cmark
4 40 1 gmark
5 39 1 gmark
5 cmark
6 38 1 gmark
38 cmark
7 37 1 gmark
7 cmark
8 36 1 gmark
8 cmark
11 33 14 gmark
11 cmark
33 cmark
12 32 1 gmark
12 cmark
13 31 1 gmark
14 30 2 gmark
15 29 1 gmark
16 28 1 gmark
54 69 31 gmark
54 cmark
69 cmark
55 68 6 gmark
55 cmark
68 cmark
56 67 4 gmark
67 cmark
57 66 3 gmark
58 65 3 gmark

% End Annotations
showpage
end
%%EOF
