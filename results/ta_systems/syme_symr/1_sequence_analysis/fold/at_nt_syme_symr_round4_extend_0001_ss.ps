%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 18:23:47 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AGUCAUGAUUGCUAUUCCC_U_U_U_A_AAUAGUGAUUGUGAUUAGCGGUGCGGGUGUGUUGCCGCACAUCCGCACCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[93.78228760 128.24736023]
[86.04105377 125.33222198]
[79.44154358 120.34510803]
[74.52355194 113.69393921]
[71.68931580 105.92272186]
[71.17065430 97.66707611]
[57.04464722 92.62169647]
[42.91863632 87.57631683]
[28.79262733 82.53093719]
[14.66661739 77.48555756]
[0.54060721 72.44017792]
[-13.58540249 67.39480591]
[-27.73432159 73.90985107]
[-41.98823166 68.59188843]
[-48.11214066 55.06290817]
[-62.23814774 50.01753235]
[-76.36415863 44.97215271]
[-90.49016571 39.92677307]
[-104.61618042 34.88139725]
[-118.74218750 29.83601761]
[-129.56796265 40.59545517]
[-143.99278259 45.58413696]
[-159.15263367 43.81155396]
[-172.03747559 35.62965393]
[-180.08903503 22.66296005]
[-181.70866394 7.48601913]
[-176.57478333 -6.88777781]
[-165.70672607 -17.60450172]
[-151.26235962 -22.53633881]
[-136.10961914 -20.70407104]
[-123.25709534 -12.47149467]
[-115.25666046 0.52680564]
[-113.69680786 15.71000767]
[-99.57080078 20.75538635]
[-85.44479370 25.80076408]
[-71.31877899 30.84614372]
[-57.19277191 35.89152145]
[-43.06676102 40.93690109]
[-29.75764656 34.34880066]
[-15.35999012 39.26430130]
[-8.54002476 53.26879501]
[5.58598566 58.31417084]
[19.71199608 63.35955048]
[33.83800507 68.40493011]
[47.96401596 73.45030975]
[62.09002686 78.49568176]
[76.21603394 83.54106140]
[94.89654541 71.53022003]
[116.58592224 76.30441284]
[128.49667358 95.04890442]
[143.43559265 96.40119934]
[158.37451172 97.75349426]
[173.31343079 99.10578918]
[188.25234985 100.45808411]
[203.19126892 101.81037903]
[218.13018799 103.16268158]
[233.06910706 104.51497650]
[248.00802612 105.86727142]
[262.94692993 107.21956635]
[277.88586426 108.57186127]
[292.82476807 109.92415619]
[307.76370239 111.27645874]
[322.70260620 112.62875366]
[334.67785645 102.31522369]
[350.43197632 103.57353210]
[360.61831665 115.65715790]
[359.19351196 131.39709473]
[347.00286865 141.45510864]
[331.27890015 139.86396790]
[321.35031128 127.56767273]
[306.41140747 126.21537781]
[291.47247314 124.86307526]
[276.53356934 123.51078033]
[261.59463501 122.15848541]
[246.65573120 120.80619049]
[231.71681213 119.45389557]
[216.77789307 118.10160065]
[201.83897400 116.74929810]
[186.90005493 115.39700317]
[171.96113586 114.04470825]
[157.02221680 112.69241333]
[142.08329773 111.34011841]
[127.14437103 109.98782349]
[123.20719910 117.26266479]
[117.37186432 123.12557220]
[110.11565399 127.09699249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% Start Annotations
6 47 0.0 1 colorpair
7 46 0.16 0.6 colorpair
8 45 0.16 1 colorpair
9 44 0.16 1 colorpair
10 43 0.32 1 colorpair
11 42 0.16 0.6 colorpair
12 41 0.16 0.6 colorpair
16 37 0.16 1 colorpair
17 36 0.0 1 colorpair
18 35 0.0 0.2 colorpair
19 34 0.0 1 colorpair
20 33 0.0 1 colorpair
50 83 0.16 1 colorpair
51 82 0.16 1 colorpair
52 81 0.32 1 colorpair
53 80 0.32 0.6 colorpair
55 78 0.48 1 colorpair
57 76 0.32 0.6 colorpair
61 72 0.16 0.6 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 46 1 gmark
46 cmark
8 cmark
9 cmark
10 cmark
43 cmark
11 42 1 gmark
11 cmark
12 41 1 gmark
12 cmark
15 38 13 gmark
15 cmark
38 cmark
16 cmark
18 35 2 gmark
83 cmark
51 cmark
52 cmark
81 cmark
53 80 1 gmark
53 cmark
80 cmark
54 79 6 gmark
54 cmark
79 cmark
55 cmark
78 cmark
56 77 4 gmark
56 cmark
77 cmark
57 76 1 gmark
57 cmark
76 cmark
58 75 3 gmark
58 cmark
75 cmark
59 74 4 gmark
59 cmark
74 cmark
60 73 3 gmark
60 cmark
73 cmark
61 72 1 gmark
72 cmark

% End Annotations
showpage
end
%%EOF
