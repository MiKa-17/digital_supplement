%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 01:48:45 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGAUUGCUAUUCCCUA_UAAAUAGUGAUUGUGAUGAGCGGUGCGGGUGUGUUGGCGCACAUCCGCACCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[81.21893311 115.56915283]
[76.38044739 106.10277557]
[61.40712738 105.20854187]
[46.43380737 104.31431580]
[31.46048546 103.42008972]
[16.48716354 102.52586365]
[1.51384282 101.63163757]
[-13.45947838 100.73741150]
[-23.34222412 112.55424500]
[-38.11542892 116.24285126]
[-52.06290054 110.59201050]
[-59.91449738 97.96305084]
[-74.88781738 97.06882477]
[-89.86113739 96.17459869]
[-104.83445740 95.28037262]
[-119.80778503 94.38614655]
[-129.55624390 106.45872498]
[-144.54772949 110.46311951]
[-159.01768494 104.85956573]
[-167.40214539 91.80274963]
[-166.47708130 76.31327057]
[-156.59823608 64.34716034]
[-141.56419373 60.50562286]
[-127.15586853 66.26581573]
[-118.91355896 79.41282654]
[-103.94023132 80.30705261]
[-88.96691132 81.20127869]
[-73.99359131 82.09550476]
[-59.02026749 82.98973083]
[-49.72140884 71.38502502]
[-35.20051956 67.43435669]
[-20.97133255 72.85502625]
[-12.56525230 85.76409149]
[2.40806961 86.65831757]
[17.38139153 87.55254364]
[32.35471344 88.44676971]
[47.32803345 89.34099579]
[62.30135727 90.23522186]
[77.27468109 91.12944794]
[90.51018524 77.52622986]
[109.48981476 77.52622986]
[122.72531891 91.12944794]
[137.69863892 90.23522186]
[152.67196655 89.34099579]
[167.64529419 88.44676971]
[180.95965576 79.90052795]
[194.12554932 86.86533356]
[209.09887695 85.97110748]
[224.07218933 85.07688141]
[239.04551697 84.18265533]
[254.01882935 83.28842163]
[268.99215698 82.39419556]
[283.96548462 81.49996948]
[298.93881226 80.60574341]
[313.91210938 79.71151733]
[328.88543701 78.81729126]
[342.26800537 69.33892822]
[357.05270386 76.43428040]
[358.03036499 92.80426025]
[344.19519043 101.60883331]
[329.77966309 93.79061127]
[314.80633545 94.68483734]
[299.83303833 95.57906342]
[284.85971069 96.47328949]
[269.88638306 97.36752319]
[254.91307068 98.26174927]
[239.93974304 99.15597534]
[224.96641541 100.05020142]
[209.99310303 100.94442749]
[195.01977539 101.83865356]
[182.77639771 110.32093048]
[168.53952026 103.42008972]
[153.56619263 104.31431580]
[138.59286499 105.20854187]
[123.61955261 106.10277557]
[118.78106689 115.56915283]
[110.37579346 122.07872009]
[100.00000000 124.39522552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[42 75]
[43 74]
[44 73]
[45 72]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% Start Annotations
2 39 0.0 1 colorpair
3 38 0.0 1 colorpair
4 37 0.0 1 colorpair
5 36 0.0 1 colorpair
6 35 0.0 1 colorpair
7 34 0.16 1 colorpair
8 33 0.16 1 colorpair
12 29 0.0 1 colorpair
13 28 0.0 1 colorpair
14 27 0.0 1 colorpair
15 26 0.0 1 colorpair
16 25 0.0 1 colorpair
42 75 0.16 1 colorpair
43 74 0.16 1 colorpair
44 73 0.32 1 colorpair
45 72 0.32 0.6 colorpair
47 70 0.32 1 colorpair
48 69 0.32 0.6 colorpair
49 68 0.0 1 colorpair
50 67 0.32 0.6 colorpair
51 66 0.65 0.6 colorpair
52 65 0.32 1 colorpair
53 64 0.16 1 colorpair
54 63 0.0 1 colorpair
55 62 0.0 1 colorpair
56 61 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 cmark
8 cmark
75 cmark
43 cmark
44 cmark
73 cmark
45 72 1 gmark
45 cmark
72 cmark
47 cmark
70 cmark
48 69 1 gmark
48 cmark
69 cmark
50 67 1 gmark
50 cmark
67 cmark
51 66 1 gmark
51 cmark
66 cmark
52 cmark
65 cmark
64 cmark
56 61 2 gmark

% End Annotations
showpage
end
%%EOF
