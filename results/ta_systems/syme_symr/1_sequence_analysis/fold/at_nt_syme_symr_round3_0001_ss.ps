%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 09:31:33 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGAUUGCUAUUCCCUA_UA_AAUAGUGAUUGUGAUGAGCGGUGCGGGUGUGUUGGCGCACAUCCGCACCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[38.00590134 116.15052795]
[35.98490906 102.48509216]
[21.03114891 101.30820465]
[6.07738781 100.13132477]
[-8.87637234 98.95443726]
[-23.83013153 97.77754974]
[-38.78389359 96.60066223]
[-53.73765182 95.42377472]
[-65.69123077 105.41124725]
[-80.83970642 104.00469971]
[-90.28757477 92.54723358]
[-105.24133301 91.37034607]
[-120.19509125 90.19345856]
[-135.14884949 89.01657867]
[-150.10261536 87.83969116]
[-165.05636597 86.66280365]
[-174.30751038 99.00865173]
[-188.77268982 104.37168121]
[-203.83612061 101.04056549]
[-214.69113159 90.07825470]
[-217.87391663 74.98278046]
[-212.36886597 60.57105255]
[-199.93261719 51.44179916]
[-184.53353882 50.50813675]
[-171.08540344 58.06799316]
[-163.87948608 71.70904541]
[-148.92572021 72.88592529]
[-133.97196960 74.06281281]
[-119.01820374 75.23970032]
[-104.06444550 76.41658783]
[-89.11068726 77.59347534]
[-77.98680115 67.75504303]
[-62.80479431 68.73554993]
[-52.56076431 80.47001648]
[-37.60700607 81.64690399]
[-22.65324593 82.82379150]
[-7.69948578 84.00067139]
[7.25427437 85.17755890]
[22.20803452 86.35444641]
[37.16179276 87.53133392]
[42.29865265 72.16725159]
[51.12529373 58.58296585]
[63.07728958 47.64714813]
[77.39035797 40.05909729]
[93.14923096 36.30404663]
[109.34618378 36.62211227]
[124.94548035 40.99295807]
[138.94960022 49.13708878]
[150.46305847 60.53370667]
[158.74957275 74.45404816]
[163.27928162 90.00796509]
[178.26771545 89.41906738]
[193.25614929 88.83016968]
[208.24458313 88.24127197]
[223.23301697 87.65237427]
[238.22145081 87.06347656]
[248.76402283 75.28936005]
[264.54867554 74.50196075]
[276.21069336 85.16841888]
[276.83114624 100.96052551]
[266.04199219 112.50909424]
[250.24420166 112.96257019]
[238.81034851 102.05191040]
[223.82191467 102.64080811]
[208.83348083 103.22970581]
[193.84504700 103.81860352]
[178.85661316 104.40750122]
[163.86817932 104.99639893]
[161.31224060 118.57195282]
[155.90547180 131.28396606]
[147.89926147 142.54138184]
[137.66587830 151.82073975]
[125.68115997 158.69059753]
[112.50234222 162.83151245]
[98.74220276 164.05096436]
[85.04054260 162.29223633]
[72.03445435 157.63710022]
[60.32868195 150.30203247]
[50.46750259 140.62806702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% Start Annotations
2 40 0.0 0.6 colorpair
3 39 0.0 0.6 colorpair
4 38 0.0 0.6 colorpair
5 37 0.0 0.6 colorpair
6 36 0.16 0.6 colorpair
7 35 0.16 0.6 colorpair
8 34 0.16 0.6 colorpair
12 30 0.16 1 colorpair
13 29 0.0 1 colorpair
14 28 0.0 1 colorpair
15 27 0.0 1 colorpair
16 26 0.0 1 colorpair
54 65 0.16 0.2 colorpair
55 64 0.0 0.2 colorpair
56 63 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 40 1 gmark
3 39 1 gmark
4 38 1 gmark
5 37 1 gmark
6 36 1 gmark
36 cmark
7 35 1 gmark
7 cmark
8 34 1 gmark
8 cmark
11 31 12 gmark
11 cmark
31 cmark
12 cmark
51 68 11 gmark
68 cmark
52 67 10 gmark
52 cmark
67 cmark
53 66 4 gmark
53 cmark
66 cmark
54 65 2 gmark
65 cmark
55 64 2 gmark
56 63 2 gmark

% End Annotations
showpage
end
%%EOF
