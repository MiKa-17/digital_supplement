%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 06:00:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AGUCAUGAUUGCUAUUCCC_U_U_UA_AAUAGUGAUUGUGAUUAGCGGUGCGGGUGUGUUGCCGCACAUCCGCAUCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[94.22296143 128.36560059]
[86.42156982 125.56575012]
[79.73339081 120.66992950]
[74.70674133 114.07950592]
[71.75373077 106.33480072]
[71.11644745 98.07073975]
[56.91985321 93.22753143]
[42.72325897 88.38432312]
[28.52666092 83.54111481]
[14.33006477 78.69791412]
[0.13346793 73.85470581]
[-14.06312847 69.01149750]
[-28.11759758 75.72786713]
[-42.44597244 70.61393738]
[-48.76239395 57.17375565]
[-62.95898819 52.33054733]
[-77.15558624 47.48734283]
[-91.35218048 42.64413834]
[-105.54878235 37.80093002]
[-119.74537659 32.95772552]
[-130.80905151 43.53381729]
[-145.52359009 47.74578857]
[-160.50772095 44.62575912]
[-172.31817627 34.89068985]
[-178.24102783 20.77762794]
[-176.91522217 5.52964973]
[-168.64541626 -7.34936905]
[-155.33198547 -14.89992428]
[-140.03422546 -15.38695431]
[-126.26746368 -8.69854259]
[-117.19519806 3.62836218]
[-114.90216827 18.76112747]
[-100.70557404 23.60433388]
[-86.50897980 28.44754028]
[-72.31237793 33.29074478]
[-58.11578369 38.13395309]
[-43.91918564 42.97715759]
[-30.70547867 36.19973373]
[-16.23911667 40.90919876]
[-9.21992302 54.81490326]
[4.97667408 59.65810776]
[19.17327118 64.50131226]
[33.36986542 69.34452057]
[47.56646347 74.18772888]
[61.76306152 79.03093719]
[75.95965576 83.87413788]
[94.45603180 71.58792877]
[116.21446991 76.01933289]
[128.43234253 94.56092072]
[143.39231873 95.65584564]
[158.35231018 96.75077820]
[173.31228638 97.84570312]
[188.27227783 98.94063568]
[203.23225403 100.03556824]
[218.19224548 101.13049316]
[233.15222168 102.22542572]
[248.11221313 103.32035828]
[263.07220459 104.41528320]
[278.03216553 105.51021576]
[292.99215698 106.60514069]
[307.95214844 107.70007324]
[322.91213989 108.79500580]
[334.70806885 98.27685547]
[350.48150635 99.26377869]
[360.87435913 111.17025757]
[359.72073364 126.93238831]
[347.70501709 137.19877625]
[331.95596313 135.87855530]
[321.81719971 123.75498962]
[306.85720825 122.66005707]
[291.89724731 121.56513214]
[276.93725586 120.47019958]
[261.97726440 119.37526703]
[247.01728821 118.28034210]
[232.05729675 117.18540955]
[217.09732056 116.09047699]
[202.13732910 114.99555206]
[187.17735291 113.90061951]
[172.21736145 112.80569458]
[157.25737000 111.71076202]
[142.29739380 110.61582947]
[127.33740997 109.52090454]
[123.51877594 116.87745667]
[117.77198792 122.85033417]
[110.56819153 126.94985962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% Start Annotations
6 46 0.0 1 colorpair
7 45 0.16 0.6 colorpair
8 44 0.16 1 colorpair
9 43 0.16 1 colorpair
10 42 0.32 1 colorpair
11 41 0.16 0.6 colorpair
12 40 0.16 0.6 colorpair
16 36 0.16 1 colorpair
17 35 0.0 1 colorpair
18 34 0.0 0.2 colorpair
19 33 0.0 1 colorpair
20 32 0.0 1 colorpair
49 82 0.16 1 colorpair
50 81 0.16 1 colorpair
51 80 0.32 1 colorpair
52 79 0.32 0.2 colorpair
54 77 0.48 1 colorpair
56 75 0.32 0.6 colorpair
60 71 0.16 0.6 colorpair
61 70 0.0 1 colorpair
62 69 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 45 1 gmark
45 cmark
8 cmark
9 cmark
10 cmark
42 cmark
11 41 1 gmark
11 cmark
12 40 1 gmark
12 cmark
15 37 13 gmark
15 cmark
37 cmark
16 cmark
18 34 2 gmark
82 cmark
50 cmark
51 cmark
80 cmark
52 79 2 gmark
52 cmark
79 cmark
53 78 6 gmark
53 cmark
78 cmark
54 cmark
77 cmark
55 76 4 gmark
55 cmark
76 cmark
56 75 1 gmark
56 cmark
75 cmark
57 74 3 gmark
57 cmark
74 cmark
58 73 5 gmark
58 cmark
73 cmark
59 72 3 gmark
59 cmark
72 cmark
60 71 1 gmark
71 cmark

% End Annotations
showpage
end
%%EOF
