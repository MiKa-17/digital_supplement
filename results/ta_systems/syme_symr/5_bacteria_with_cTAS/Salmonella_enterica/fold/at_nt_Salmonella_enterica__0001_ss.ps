%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:52:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGAUGGCUAUUCCUUUU_A_AAUAGUGAUUGUGAUUAGCGAUGCGGUCGUGUUGCCGCACGGCCGUAUCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[80.93014526 115.20405579]
[76.27593231 105.65606689]
[61.32217026 104.47917938]
[46.36840820 103.30229187]
[31.41464806 102.12540436]
[16.46088982 100.94852448]
[1.50712883 99.77163696]
[-13.44663143 98.59474945]
[-28.40039062 97.41786194]
[-42.76508331 104.04856110]
[-54.84606171 95.33654022]
[-69.79981995 94.15965271]
[-84.75357819 92.98277283]
[-99.70733643 91.80588531]
[-114.66110229 90.62899780]
[-129.61485291 89.45211029]
[-138.86599731 101.79795837]
[-153.33117676 107.16098785]
[-168.39462280 103.82987976]
[-179.24961853 92.86756134]
[-182.43241882 77.77208710]
[-176.92735291 63.36035919]
[-164.49110413 54.23110580]
[-149.09202576 53.29744720]
[-135.64389038 60.85729980]
[-128.43797302 74.49835205]
[-113.48421478 75.67523956]
[-98.53045654 76.85211945]
[-83.57669067 78.02900696]
[-68.62293243 79.20589447]
[-53.66917419 80.38278198]
[-40.37407303 73.66790009]
[-27.22350502 82.46410370]
[-12.26974487 83.64099121]
[2.68401527 84.81787109]
[17.63777542 85.99475861]
[32.59153366 87.17164612]
[47.54529572 88.34853363]
[62.49905396 89.52542114]
[77.45281219 90.70230865]
[90.95056915 77.35203552]
[109.93161011 77.72477722]
[122.89482880 91.59467316]
[137.88327026 91.00577545]
[152.87170410 90.41687775]
[167.86013794 89.82798004]
[182.84857178 89.23908234]
[197.83700562 88.65018463]
[212.82543945 88.06128693]
[227.81387329 87.47238922]
[242.80230713 86.88349152]
[257.79074097 86.29460144]
[272.77917480 85.70570374]
[287.76760864 85.11680603]
[302.75604248 84.52790833]
[317.74447632 83.93901062]
[328.28704834 72.16489410]
[344.07171631 71.37749481]
[355.73370361 82.04395294]
[356.35418701 97.83605957]
[345.56503296 109.38462830]
[329.76724243 109.83810425]
[318.33337402 98.92744446]
[303.34494019 99.51634216]
[288.35650635 100.10523987]
[273.36807251 100.69413757]
[258.37963867 101.28303528]
[243.39120483 101.87193298]
[228.40277100 102.46083069]
[213.41433716 103.04972839]
[198.42590332 103.63862610]
[183.43746948 104.22751617]
[168.44903564 104.81641388]
[153.46060181 105.40531158]
[138.47215271 105.99420929]
[123.48372650 106.58310699]
[118.45824432 115.94100952]
[109.93161011 122.27522278]
[99.52115631 124.38428497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% Start Annotations
2 40 0.0 1 colorpair
3 39 0.16 1 colorpair
4 38 0.0 1 colorpair
5 37 0.16 1 colorpair
6 36 0.16 1 colorpair
7 35 0.16 1 colorpair
8 34 0.16 1 colorpair
9 33 0.16 0.6 colorpair
11 31 0.16 0.2 colorpair
12 30 0.0 1 colorpair
13 29 0.0 1 colorpair
14 28 0.0 1 colorpair
15 27 0.0 1 colorpair
16 26 0.0 1 colorpair
43 76 0.16 1 colorpair
44 75 0.16 1 colorpair
45 74 0.16 1 colorpair
46 73 0.16 1 colorpair
47 72 0.16 0.6 colorpair
48 71 0.32 1 colorpair
49 70 0.32 1 colorpair
50 69 0.32 1 colorpair
51 68 0.32 0.6 colorpair
52 67 0.65 0.6 colorpair
53 66 0.16 0.2 colorpair
54 65 0.0 1 colorpair
55 64 0.0 1 colorpair
56 63 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
39 cmark
5 cmark
36 cmark
7 cmark
8 cmark
9 33 1 gmark
33 cmark
11 31 2 gmark
11 cmark
31 cmark
76 cmark
44 cmark
74 cmark
46 cmark
73 cmark
47 72 1 gmark
47 cmark
72 cmark
48 cmark
71 cmark
49 cmark
70 cmark
50 cmark
69 cmark
51 68 1 gmark
51 cmark
68 cmark
52 67 1 gmark
52 cmark
67 cmark
53 66 2 gmark
53 cmark

% End Annotations
showpage
end
%%EOF
