%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:25:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGGUGGCUAUUCUCUGA_UAAUAGUUACUGUGAUUAGCGAUGCGCAGGUGUUGGCGCACCUUCGCAUCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[82.20554352 106.45065308]
[67.23222351 105.55642700]
[52.25890350 104.66220093]
[37.28557968 103.76797485]
[22.31225967 102.87374878]
[7.33893824 101.97952271]
[-7.63438320 101.08529663]
[-22.60770416 100.19106293]
[-37.58102798 99.29683685]
[-51.81791306 106.19767761]
[-64.06128693 97.71540070]
[-79.03461456 96.82117462]
[-94.00793457 95.92694855]
[-108.98125458 95.03272247]
[-123.95457458 94.13849640]
[-138.92790222 93.24427032]
[-148.67636108 105.31684113]
[-163.66784668 109.32124329]
[-178.13780212 103.71768951]
[-186.52226257 90.66086578]
[-185.59719849 75.17138672]
[-175.71835327 63.20527649]
[-160.68431091 59.36374283]
[-146.27598572 65.12393951]
[-138.03367615 78.27094269]
[-123.06034851 79.16517639]
[-108.08702850 80.05940247]
[-93.11370850 80.95362854]
[-78.14038086 81.84785461]
[-63.16706467 82.74208069]
[-50.00116730 75.77728271]
[-36.68679810 84.32351685]
[-21.71347809 85.21774292]
[-6.74015665 86.11196899]
[8.23316479 87.00619507]
[23.20648575 87.90042877]
[38.17980957 88.79465485]
[53.15312958 89.68888092]
[68.12644958 90.58310699]
[83.09976959 91.47733307]
[100.00000000 81.07241058]
[116.90023041 91.47733307]
[131.87355042 90.58310699]
[146.84686279 89.68888092]
[161.82019043 88.79465485]
[176.79351807 87.90042877]
[191.76683044 87.00619507]
[206.74015808 86.11196899]
[221.71347046 85.21774292]
[236.68679810 84.32351685]
[251.66012573 83.42929077]
[266.63345337 82.53506470]
[281.60675049 81.64083862]
[296.58007812 80.74661255]
[311.55340576 79.85238647]
[326.52673340 78.95815277]
[339.90927124 69.47978973]
[354.69400024 76.57514954]
[355.67163086 92.94512939]
[341.83648682 101.74970245]
[327.42095947 93.93148041]
[312.44763184 94.82570648]
[297.47430420 95.71993256]
[282.50097656 96.61415863]
[267.52767944 97.50838470]
[252.55435181 98.40261078]
[237.58102417 99.29683685]
[222.60771179 100.19106293]
[207.63438416 101.08529663]
[192.66105652 101.97952271]
[177.68774414 102.87374878]
[162.71441650 103.76797485]
[147.74110413 104.66220093]
[132.76777649 105.55642700]
[117.79445648 106.45065308]
[112.67591858 114.05612946]
[104.58374023 118.36417389]
[95.41625977 118.36417389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% Start Annotations
1 40 0.0 0.2 colorpair
2 39 0.0 1 colorpair
3 38 0.0 1 colorpair
4 37 0.0 1 colorpair
5 36 0.0 0.2 colorpair
6 35 0.0 1 colorpair
7 34 0.0 1 colorpair
9 32 0.32 0.6 colorpair
11 30 0.32 0.6 colorpair
12 29 0.0 1 colorpair
13 28 0.0 1 colorpair
14 27 0.0 1 colorpair
15 26 0.0 1 colorpair
16 25 0.0 1 colorpair
42 75 0.0 1 colorpair
43 74 0.16 1 colorpair
44 73 0.16 1 colorpair
45 72 0.0 1 colorpair
46 71 0.16 1 colorpair
47 70 0.16 1 colorpair
48 69 0.16 1 colorpair
49 68 0.16 1 colorpair
51 66 0.32 0.6 colorpair
52 65 0.32 1 colorpair
53 64 0.0 1 colorpair
54 63 0.0 1 colorpair
55 62 0.0 1 colorpair
56 61 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 40 2 gmark
5 36 2 gmark
8 33 3 gmark
8 cmark
33 cmark
9 32 1 gmark
9 cmark
32 cmark
11 30 1 gmark
11 cmark
30 cmark
43 cmark
73 cmark
46 cmark
71 cmark
70 cmark
48 cmark
68 cmark
50 67 4 gmark
50 cmark
67 cmark
51 66 1 gmark
51 cmark
66 cmark
52 cmark
65 cmark
56 61 1 gmark

% End Annotations
showpage
end
%%EOF
