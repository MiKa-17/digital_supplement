%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:28:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUGAUUAACUACCUCGUUUAGUUGCUUGUGGUGAGCGG_GCUGGCGGUGUUCCAACACCCCCGCACCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[82.52164459 117.03717804]
[76.93050385 107.97224426]
[61.93362427 108.27822113]
[46.93674469 108.58419800]
[31.93986702 108.89017487]
[16.94298744 109.19615173]
[1.94610929 109.50213623]
[-8.96246624 120.62152100]
[-24.17579269 120.71818542]
[-34.70920181 110.25000000]
[-49.70608139 110.55598450]
[-64.70295715 110.86196136]
[-79.69983673 111.16793823]
[-94.69671631 111.47391510]
[-102.68310547 124.67320251]
[-116.54779053 131.43885803]
[-131.86660767 129.61196899]
[-143.75137329 119.77551270]
[-148.40969849 105.06825256]
[-144.35513306 90.18321991]
[-132.88146973 79.87018585]
[-117.64992523 77.41999054]
[-103.52082062 83.61448669]
[-95.00269318 96.47703552]
[-80.00581360 96.17105865]
[-65.00893402 95.86508179]
[-50.01205826 95.55910492]
[-35.01517868 95.25312805]
[-24.91751862 84.36400604]
[-9.71290970 83.84006500]
[1.64013124 94.50525665]
[16.63701057 94.19927979]
[31.63388824 93.89329529]
[46.63076782 93.58731842]
[61.62764740 93.28134155]
[76.62452698 92.97536469]
[88.71389771 78.35786438]
[107.61981201 76.81170654]
[121.92353821 89.27074432]
[136.77085876 87.13602448]
[151.61817932 85.00130463]
[166.46549988 82.86657715]
[174.78527832 78.43705750]
[181.96066284 80.96044922]
[196.88269043 79.43310547]
[211.80473328 77.90576172]
[226.72677612 76.37841034]
[241.64880371 74.85106659]
[252.75871277 59.78757477]
[271.00576782 57.37558746]
[285.16043091 68.64701080]
[299.90832520 65.90846252]
[314.65621948 63.16991806]
[326.76428223 52.10976028]
[342.31280518 57.32281876]
[345.30679321 73.44634247]
[332.66629028 83.89383698]
[317.39477539 77.91780853]
[302.64688110 80.65635681]
[287.89898682 83.39490509]
[283.46591187 94.26311493]
[274.15954590 101.61381531]
[262.31958008 103.44625092]
[250.99884033 99.16669464]
[243.17614746 89.77310944]
[228.25411987 91.30045319]
[213.33207703 92.82779694]
[198.41003418 94.35514069]
[183.48800659 95.88248444]
[168.60021973 97.71389771]
[153.75289917 99.84862518]
[138.90557861 101.98334503]
[124.05825806 104.11807251]
[120.01424408 113.97098541]
[112.15946198 121.16378021]
[101.98949432 124.32694244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[39 73]
[40 72]
[41 71]
[42 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[51 60]
[52 59]
[53 58]
] def

init

% Start Annotations
2 36 0.0 1 colorpair
3 35 0.0 1 colorpair
4 34 0.0 1 colorpair
5 33 0.0 1 colorpair
6 32 0.16 1 colorpair
7 31 0.16 1 colorpair
10 28 0.16 1 colorpair
11 27 0.0 1 colorpair
12 26 0.0 1 colorpair
13 25 0.0 1 colorpair
14 24 0.0 1 colorpair
39 73 0.0 1 colorpair
40 72 0.0 1 colorpair
41 71 0.16 1 colorpair
42 70 0.0 1 colorpair
44 69 0.16 0.2 colorpair
45 68 0.16 0.2 colorpair
46 67 0.0 1 colorpair
47 66 0.16 0.2 colorpair
48 65 0.16 0.6 colorpair
51 60 0.0 0.2 colorpair
52 59 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
32 cmark
7 cmark
10 cmark
41 cmark
71 cmark
44 69 2 gmark
44 cmark
69 cmark
45 68 2 gmark
45 cmark
68 cmark
47 66 2 gmark
47 cmark
66 cmark
48 65 1 gmark
48 cmark
65 cmark
51 60 2 gmark
52 cmark
59 cmark
53 58 3 gmark
53 cmark
58 cmark

% End Annotations
showpage
end
%%EOF
