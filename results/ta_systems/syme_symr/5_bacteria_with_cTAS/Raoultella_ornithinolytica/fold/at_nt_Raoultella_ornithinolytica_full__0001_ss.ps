%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:50:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUAAUUGCUAUUCCCUAUAAAUAGUGAUUGUGAUGAGCGAUGCGGACGUGUUGC_CGCACGUCCGCAUCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[70.46314240 118.16007233]
[66.00547791 106.82546234]
[51.00844574 106.52722931]
[36.01140976 106.22899628]
[21.01437569 105.93076324]
[6.01734161 105.63253021]
[-8.97969341 105.33429718]
[-23.97672844 105.03606415]
[-38.97376251 104.73783112]
[-52.92504120 112.19922638]
[-65.49596405 104.21041107]
[-80.49299622 103.91217804]
[-95.49003601 103.61394501]
[-110.48706818 103.31571198]
[-125.48410034 103.01747894]
[-140.48114014 102.71924591]
[-150.63201904 114.61435699]
[-166.06254578 117.15068817]
[-179.48689270 109.13065338]
[-184.56649780 94.34107971]
[-178.90292358 79.76513672]
[-165.17033386 72.28515625]
[-149.85284424 75.43293762]
[-140.18290710 87.72221375]
[-125.18586731 88.02044678]
[-110.18883514 88.31867981]
[-95.19180298 88.61691284]
[-80.19476318 88.91514587]
[-65.19773102 89.21337891]
[-52.31914139 81.73065186]
[-38.67552948 89.74079895]
[-23.67849541 90.03903198]
[-8.68146038 90.33726501]
[6.31557417 90.63549805]
[21.31260872 90.93373108]
[36.30964279 91.23196411]
[51.30667877 91.53019714]
[66.30371094 91.82843018]
[74.75247192 76.23497009]
[89.80677795 66.85919952]
[107.52795410 66.15411377]
[123.27958679 74.30417633]
[132.94053650 89.17708588]
[147.86647034 87.68827820]
[162.79240417 86.19947052]
[177.71833801 84.71066284]
[192.64425659 83.22185516]
[205.60833740 74.15304565]
[219.04072571 80.58890533]
[233.96664429 79.10009766]
[248.89257812 77.61128998]
[263.81851196 76.12248993]
[278.74444580 74.63368225]
[293.67037964 73.14487457]
[302.33337402 60.12617111]
[317.35235596 55.77135849]
[331.63580322 62.13664246]
[338.43954468 76.21652985]
[334.55102539 91.36293030]
[321.80630493 100.42417908]
[306.22305298 99.12182617]
[295.15917969 88.07080841]
[280.23324585 89.55960846]
[265.30731201 91.04841614]
[250.38139343 92.53722382]
[235.45545959 94.02603149]
[220.52952576 95.51483917]
[208.63305664 104.47716522]
[194.13307190 98.14778900]
[179.20713806 99.63659668]
[164.28120422 101.12540436]
[149.35527039 102.61421204]
[134.42933655 104.10301971]
[130.88630676 115.75595856]
[123.53213501 125.46473694]
[113.27427673 132.03135681]
[101.37847900 134.64555359]
[89.31257629 132.98474121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% Start Annotations
2 38 0.0 1 colorpair
3 37 0.16 1 colorpair
4 36 0.0 1 colorpair
5 35 0.0 1 colorpair
6 34 0.0 1 colorpair
7 33 0.16 1 colorpair
8 32 0.0 0.2 colorpair
9 31 0.0 0.2 colorpair
11 29 0.0 0.2 colorpair
12 28 0.0 0.2 colorpair
13 27 0.0 0.2 colorpair
14 26 0.0 1 colorpair
15 25 0.16 1 colorpair
16 24 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
37 cmark
7 cmark
8 32 2 gmark
9 31 2 gmark
11 29 2 gmark
12 28 2 gmark
13 27 2 gmark
15 cmark
25 cmark
43 73 5 gmark
43 cmark
73 cmark
44 72 5 gmark
44 cmark
72 cmark
45 71 5 gmark
45 cmark
71 cmark
46 70 5 gmark
46 cmark
70 cmark
47 69 5 gmark
47 cmark
69 cmark
49 67 5 gmark
49 cmark
67 cmark
50 66 3 gmark
50 cmark
66 cmark
51 65 3 gmark
51 cmark
65 cmark
52 64 3 gmark
64 cmark
53 63 3 gmark
54 62 3 gmark

% End Annotations
showpage
end
%%EOF
