%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:27:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUAGU_AACUACUCCUGUUAGUUGCUUGUGGUUAGCUGUGCGGGUGUGUUGCGAGCACGCCUGCACAGCGUC\
) } def
/len { sequence length } bind def

/coor [
[82.76424408 107.85321808]
[67.76736450 108.15919495]
[52.77048492 108.46517181]
[37.77360535 108.77114868]
[22.77672768 109.07713318]
[7.77984905 109.38311005]
[-7.21703005 109.68908691]
[-22.21390915 109.99506378]
[-33.12248230 121.11444855]
[-48.33581161 121.21112061]
[-58.86922073 110.74293518]
[-73.86609650 111.04891205]
[-88.86297607 111.35488892]
[-103.85985565 111.66086578]
[-118.85673523 111.96685028]
[-128.52032471 124.26110840]
[-143.83619690 127.41680908]
[-157.57263184 119.94391632]
[-163.24372864 105.37090302]
[-158.17176819 90.57870483]
[-144.75157166 82.55174255]
[-129.31973267 85.08010101]
[-119.16271210 96.96997070]
[-104.16583252 96.66399384]
[-89.16895294 96.35800934]
[-74.17207336 96.05203247]
[-59.17519760 95.74605560]
[-49.07753754 84.85694122]
[-33.87292862 84.33300018]
[-22.51988602 94.99818420]
[-7.52300787 94.69220734]
[7.47387123 94.38623047]
[22.47075081 94.08025360]
[37.46762848 93.77427673]
[52.46450806 93.46829224]
[67.46138763 93.16231537]
[82.45826721 92.85633850]
[98.45616913 81.12247467]
[116.14797211 90.10115051]
[130.99530029 87.96642303]
[145.84262085 85.83170319]
[160.68994141 83.69698334]
[175.53726196 81.56225586]
[190.38458252 79.42753601]
[205.23190308 77.29280853]
[220.07922363 75.15808868]
[234.92654419 73.02336884]
[249.77386475 70.88864136]
[264.62118530 68.75392151]
[279.46850586 66.61920166]
[294.31582642 64.48447418]
[309.16314697 62.34975433]
[324.01046753 60.21503067]
[334.73709106 48.28527832]
[350.74295044 49.37740707]
[359.74966431 62.65363312]
[354.84811401 77.92957306]
[339.79830933 83.48683167]
[326.14520264 75.06235504]
[311.29788208 77.19707489]
[296.45056152 79.33179474]
[281.60324097 81.46652222]
[266.75592041 83.60124207]
[251.90858459 85.73596954]
[237.06126404 87.87068939]
[222.21394348 90.00540924]
[207.36662292 92.14013672]
[192.51930237 94.27485657]
[177.67198181 96.40957642]
[162.82466125 98.54430389]
[147.97734070 100.67902374]
[133.13002014 102.81374359]
[118.28269958 104.94847107]
[113.80324554 112.96976471]
[106.07611084 117.93949127]
[96.91936493 118.68833923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
] def

init

% Start Annotations
1 37 0.0 0.6 colorpair
2 36 0.0 1 colorpair
3 35 0.0 1 colorpair
4 34 0.0 1 colorpair
5 33 0.0 1 colorpair
6 32 0.0 1 colorpair
7 31 0.16 0.6 colorpair
8 30 0.32 1 colorpair
11 27 0.0 1 colorpair
12 26 0.0 1 colorpair
13 25 0.0 1 colorpair
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
39 73 0.0 1 colorpair
40 72 0.0 1 colorpair
41 71 0.16 1 colorpair
42 70 0.0 1 colorpair
43 69 0.16 1 colorpair
44 68 0.16 1 colorpair
45 67 0.16 1 colorpair
46 66 0.0 1 colorpair
47 65 0.16 1 colorpair
48 64 0.16 1 colorpair
49 63 0.16 1 colorpair
50 62 0.0 1 colorpair
51 61 0.16 1 colorpair
52 60 0.0 1 colorpair
53 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 37 1 gmark
7 31 1 gmark
7 cmark
8 cmark
30 cmark
41 cmark
71 cmark
69 cmark
44 cmark
68 cmark
45 cmark
67 cmark
47 cmark
65 cmark
48 cmark
64 cmark
49 cmark
51 cmark
61 cmark

% End Annotations
showpage
end
%%EOF
