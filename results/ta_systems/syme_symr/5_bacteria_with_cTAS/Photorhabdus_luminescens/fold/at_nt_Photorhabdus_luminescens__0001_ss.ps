%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:49:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAU_AAUCAACUACCUCUGAUAGUUGGUUGUGGUUAGCGGUGCUGGAAUGUUCCC_GCAUCUCAACACCGCGUA\
) } def
/len { sequence length } bind def

/coor [
[82.61478424 107.50000000]
[67.61478424 107.50000000]
[52.61478043 107.50000000]
[37.61478043 107.50000000]
[22.61478043 107.50000000]
[7.61478138 107.50000000]
[-1.24493992 110.69898224]
[-7.98616600 107.18577576]
[-22.97400093 106.58178711]
[-37.96183777 105.97779846]
[-52.94967270 105.37380981]
[-67.93750763 104.76982117]
[-82.92533875 104.16583252]
[-97.91317749 103.56184387]
[-112.90100861 102.95785522]
[-127.88884735 102.35386658]
[-138.28018188 114.03951263]
[-153.75921631 116.26065063]
[-167.01722717 107.96853638]
[-171.79418945 93.07845306]
[-165.83456421 78.62104034]
[-151.95230103 71.42263794]
[-136.70219421 74.88212585]
[-127.28485870 87.36602783]
[-112.29701996 87.97002411]
[-97.30918884 88.57401276]
[-82.32135010 89.17800140]
[-67.33351898 89.78199005]
[-52.34568024 90.38597870]
[-37.35784531 90.98996735]
[-22.37001228 91.59395599]
[-7.38217688 92.19794464]
[7.61478138 92.50000000]
[22.61478043 92.50000000]
[37.61478043 92.50000000]
[52.61478043 92.50000000]
[67.61478424 92.50000000]
[82.61478424 92.50000000]
[98.85679626 81.10055542]
[116.35443878 90.45912933]
[131.24507141 88.65107727]
[146.13569641 86.84302521]
[161.02633667 85.03497314]
[175.91696167 83.22692871]
[190.80760193 81.41887665]
[205.69822693 79.61082458]
[220.58886719 77.80277252]
[235.47950745 75.99472809]
[250.37013245 74.18667603]
[265.26077271 72.37862396]
[280.15139771 70.57057190]
[295.04202271 68.76252747]
[309.93267822 66.95447540]
[324.82330322 65.14642334]
[335.80941772 53.45518494]
[351.78738403 54.89865875]
[360.50030518 68.36953735]
[355.26437378 83.53411102]
[340.09609985 88.75942230]
[326.63134766 80.03705597]
[311.74072266 81.84510803]
[296.85009766 83.65316010]
[281.95944214 85.46120453]
[267.06881714 87.26925659]
[252.17817688 89.07730865]
[237.28755188 90.88536072]
[222.39691162 92.69340515]
[207.50628662 94.50145721]
[192.61564636 96.30950928]
[177.72502136 98.11756134]
[162.83438110 99.92560577]
[147.94375610 101.73365784]
[133.05311584 103.54170990]
[118.16248322 105.34976196]
[113.51329041 113.26222992]
[105.68938446 118.05897522]
[96.52886200 118.61309052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% Start Annotations
1 38 0.0 1 colorpair
2 37 0.0 1 colorpair
3 36 0.0 1 colorpair
4 35 0.0 1 colorpair
5 34 0.0 1 colorpair
6 33 0.16 1 colorpair
8 32 0.0 0.6 colorpair
9 31 0.16 1 colorpair
10 30 0.16 1 colorpair
11 29 0.16 0.6 colorpair
12 28 0.0 0.6 colorpair
13 27 0.0 1 colorpair
14 26 0.0 1 colorpair
15 25 0.0 1 colorpair
16 24 0.0 0.6 colorpair
40 74 0.16 1 colorpair
41 73 0.0 1 colorpair
42 72 0.0 1 colorpair
43 71 0.0 1 colorpair
44 70 0.16 0.6 colorpair
45 69 0.16 1 colorpair
46 68 0.16 0.6 colorpair
47 67 0.0 0.6 colorpair
48 66 0.16 1 colorpair
49 65 0.16 1 colorpair
50 64 0.32 1 colorpair
51 63 0.16 1 colorpair
52 62 0.16 1 colorpair
53 61 0.0 1 colorpair
54 60 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
33 cmark
8 32 1 gmark
9 cmark
10 cmark
11 29 1 gmark
11 cmark
12 28 1 gmark
16 24 1 gmark
74 cmark
44 70 1 gmark
44 cmark
70 cmark
45 cmark
69 cmark
46 68 1 gmark
46 cmark
68 cmark
47 67 1 gmark
66 cmark
65 cmark
50 cmark
64 cmark
51 cmark
63 cmark
52 cmark
62 cmark

% End Annotations
showpage
end
%%EOF
