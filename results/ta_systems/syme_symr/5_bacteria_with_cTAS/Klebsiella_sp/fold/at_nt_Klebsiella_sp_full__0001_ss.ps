%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:45:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGGUCGCUAUUCCUGGUA_AAUAGUAAUUGUGAUCAGCGGUGCGGGUGUGUUGGCGCACAUUCGCACCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[81.21893311 115.56915283]
[76.38044739 106.10277557]
[61.40712738 105.20854187]
[46.43380737 104.31431580]
[31.46048546 103.42008972]
[16.48716354 102.52586365]
[1.51384282 101.63163757]
[-13.45947838 100.73741150]
[-28.43280029 99.84318542]
[-43.40612030 98.94895935]
[-58.37944412 98.05473328]
[-73.35276794 97.16049957]
[-88.32608795 96.26627350]
[-103.29940796 95.37204742]
[-118.27272797 94.47782135]
[-133.24604797 93.58359528]
[-142.99452209 105.65617371]
[-157.98599243 109.66056824]
[-172.45596313 104.05701447]
[-180.84040833 91.00019836]
[-179.91535950 75.51071930]
[-170.03649902 63.54460526]
[-155.00247192 59.70307159]
[-140.59414673 65.46326447]
[-132.35182190 78.61027527]
[-117.37850189 79.50450134]
[-102.40518188 80.39872742]
[-87.43186188 81.29295349]
[-72.45854187 82.18717957]
[-57.48521805 83.08140564]
[-42.51189423 83.97563171]
[-27.53857422 84.86986542]
[-12.56525230 85.76409149]
[2.40806961 86.65831757]
[17.38139153 87.55254364]
[32.35471344 88.44676971]
[47.32803345 89.34099579]
[62.30135727 90.23522186]
[77.27468109 91.12944794]
[90.51018524 77.52622986]
[109.48981476 77.52622986]
[122.72531891 91.12944794]
[137.69863892 90.23522186]
[152.67196655 89.34099579]
[167.64529419 88.44676971]
[182.61860657 87.55254364]
[197.59193420 86.65831757]
[212.56524658 85.76409149]
[227.53857422 84.86986542]
[242.51190186 83.97563171]
[257.48522949 83.08140564]
[272.45852661 82.18717957]
[287.43185425 81.29295349]
[302.40518188 80.39872742]
[317.37850952 79.50450134]
[332.35183716 78.61027527]
[345.73437500 69.13191223]
[360.51910400 76.22726440]
[361.49673462 92.59724426]
[347.66159058 101.40181732]
[333.24606323 93.58359528]
[318.27273560 94.47782135]
[303.29940796 95.37204742]
[288.32608032 96.26627350]
[273.35275269 97.16049957]
[258.37945557 98.05473328]
[243.40612793 98.94895935]
[228.43280029 99.84318542]
[213.45947266 100.73741150]
[198.48616028 101.63163757]
[183.51283264 102.52586365]
[168.53952026 103.42008972]
[153.56619263 104.31431580]
[138.59286499 105.20854187]
[123.61955261 106.10277557]
[118.78106689 115.56915283]
[110.37579346 122.07872009]
[100.00000000 124.39522552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% Start Annotations
2 39 0.0 0.2 colorpair
3 38 0.0 0.2 colorpair
4 37 0.0 0.2 colorpair
5 36 0.0 0.6 colorpair
6 35 0.16 0.6 colorpair
7 34 0.0 0.2 colorpair
8 33 0.16 0.2 colorpair
9 32 0.16 0.2 colorpair
10 31 0.16 0.2 colorpair
12 29 0.0 0.6 colorpair
13 28 0.0 0.6 colorpair
14 27 0.0 0.2 colorpair
15 26 0.0 0.6 colorpair
16 25 0.16 0.6 colorpair
42 75 0.0 0.2 colorpair
43 74 0.16 0.2 colorpair
44 73 0.32 0.2 colorpair
45 72 0.16 0.2 colorpair
46 71 0.16 0.2 colorpair
47 70 0.32 0.2 colorpair
48 69 0.0 0.2 colorpair
49 68 0.16 0.2 colorpair
50 67 0.16 0.2 colorpair
51 66 0.16 0.2 colorpair
52 65 0.16 1 colorpair
53 64 0.0 0.2 colorpair
54 63 0.0 1 colorpair
55 62 0.0 1 colorpair
56 61 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 39 2 gmark
3 38 2 gmark
4 37 2 gmark
5 36 1 gmark
6 35 1 gmark
6 cmark
7 34 2 gmark
8 33 2 gmark
8 cmark
9 32 2 gmark
32 cmark
10 31 2 gmark
10 cmark
31 cmark
11 30 3 gmark
11 cmark
30 cmark
12 29 1 gmark
13 28 1 gmark
14 27 2 gmark
15 26 1 gmark
16 25 1 gmark
25 cmark
42 75 2 gmark
43 74 2 gmark
43 cmark
44 73 2 gmark
44 cmark
73 cmark
45 72 2 gmark
45 cmark
72 cmark
46 71 2 gmark
46 cmark
71 cmark
47 70 2 gmark
47 cmark
70 cmark
48 69 2 gmark
49 68 2 gmark
68 cmark
50 67 2 gmark
50 cmark
67 cmark
51 66 2 gmark
51 cmark
66 cmark
52 cmark
65 cmark
53 64 2 gmark

% End Annotations
showpage
end
%%EOF
