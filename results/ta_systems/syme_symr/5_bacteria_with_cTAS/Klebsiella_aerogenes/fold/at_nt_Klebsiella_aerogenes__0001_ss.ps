%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:42:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUAAU__CAACUCCUGGUAAAUAGU__CUGUGAUGAGCGAUAUGGAGGUGUU_CCAGCACAUCCAUACCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[81.85275269 116.30351257]
[76.64174652 107.03697968]
[61.64471436 106.73874664]
[46.64767838 106.44051361]
[31.65064430 106.14228058]
[16.65361023 105.84404755]
[1.65657449 105.54581451]
[-13.34046078 105.24758148]
[-28.33749580 104.94934845]
[-42.28877258 112.41074371]
[-54.85969543 104.42192078]
[-69.85672760 104.12369537]
[-84.85376740 103.82546234]
[-99.85079956 103.52722931]
[-114.84783936 103.22899628]
[-129.84486389 102.93076324]
[-139.99574280 114.82587433]
[-155.42626953 117.36219788]
[-168.85061646 109.34217072]
[-173.93022156 94.55258942]
[-168.26664734 79.97665405]
[-154.53407288 72.49666595]
[-139.21658325 75.64445496]
[-129.54663086 87.93372345]
[-114.54960632 88.23195648]
[-99.55256653 88.53018951]
[-84.55553436 88.82842255]
[-69.55849457 89.12665558]
[-54.56146240 89.42488861]
[-41.68287277 81.94216156]
[-28.03926277 89.95231628]
[-13.04222775 90.25054932]
[1.95480728 90.54878235]
[16.95184135 90.84701538]
[31.94887733 91.14524078]
[46.94591141 91.44347382]
[61.94294739 91.74170685]
[76.93997955 92.03993988]
[89.62420654 77.92127991]
[108.58882904 77.16671753]
[122.35469055 90.23298645]
[137.28062439 88.74417877]
[152.20655823 87.25537109]
[167.13249207 85.76656342]
[182.05842590 84.27775574]
[196.98435974 82.78894806]
[211.91029358 81.30014038]
[226.83621216 79.81133270]
[241.76214600 78.32252502]
[256.68807983 76.83371735]
[271.61401367 75.34491730]
[286.53994751 73.85610962]
[301.46588135 72.36730194]
[316.39181519 70.87849426]
[331.31774902 69.38968658]
[342.55166626 57.93635559]
[358.49505615 59.72160721]
[366.91757202 73.37595367]
[361.35812378 88.42494202]
[346.08148193 93.32428741]
[332.80654907 84.31562042]
[317.88061523 85.80442810]
[302.95468140 87.29323578]
[288.02874756 88.78203583]
[273.10281372 90.27084351]
[258.17687988 91.75965118]
[243.25096130 93.24845886]
[228.32502747 94.73726654]
[213.39909363 96.22607422]
[198.47315979 97.71488190]
[183.54722595 99.20368958]
[168.62129211 100.69249725]
[153.69535828 102.18130493]
[138.76943970 103.67011261]
[123.84349823 105.15891266]
[119.38519287 114.81017303]
[111.24536133 121.64875793]
[100.96987152 124.37593842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% Start Annotations
2 38 0.0 1 colorpair
3 37 0.16 1 colorpair
4 36 0.0 1 colorpair
5 35 0.0 1 colorpair
6 34 0.0 1 colorpair
7 33 0.16 1 colorpair
8 32 0.0 0.2 colorpair
9 31 0.0 0.2 colorpair
11 29 0.0 0.2 colorpair
12 28 0.0 1 colorpair
13 27 0.16 1 colorpair
14 26 0.0 1 colorpair
15 25 0.16 1 colorpair
16 24 0.0 1 colorpair
41 75 0.0 1 colorpair
42 74 0.0 1 colorpair
43 73 0.16 1 colorpair
44 72 0.16 1 colorpair
45 71 0.0 1 colorpair
46 70 0.32 1 colorpair
47 69 0.32 1 colorpair
48 68 0.0 1 colorpair
49 67 0.16 0.6 colorpair
50 66 0.32 1 colorpair
51 65 0.48 1 colorpair
52 64 0.0 1 colorpair
53 63 0.0 1 colorpair
54 62 0.0 1 colorpair
55 61 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
37 cmark
7 cmark
8 32 2 gmark
9 31 2 gmark
11 29 2 gmark
13 cmark
27 cmark
15 cmark
25 cmark
43 cmark
73 cmark
44 cmark
72 cmark
46 cmark
70 cmark
47 cmark
69 cmark
49 67 1 gmark
67 cmark
50 cmark
66 cmark
51 cmark
65 cmark
55 61 2 gmark

% End Annotations
showpage
end
%%EOF
