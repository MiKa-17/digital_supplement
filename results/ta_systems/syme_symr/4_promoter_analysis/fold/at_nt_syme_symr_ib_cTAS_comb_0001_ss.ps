%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 20:19:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAU_GAU_C_ACU__AU__U_C_C__C_U_U_____AAUAGUGAUU_GUGAUUAGCGGUGCGGGCG_UG_U_U_GC_A_G_CACGUUCGCACCGCGCU_____\
) } def
/len { sequence length } bind def

/coor [
[-122.62757874 264.85531616]
[-134.23756409 274.37017822]
[-146.67594910 282.77322388]
[-159.83662415 289.99273682]
[-173.60728455 295.96713257]
[-187.87046814 300.64544678]
[-202.50445557 303.98773193]
[-217.38441467 305.96548462]
[-232.38337708 306.56182861]
[-247.37338257 305.77169800]
[-262.22653198 303.60180664]
[-276.81613159 300.07070923]
[-291.01766968 295.20849609]
[-304.70996094 289.05664062]
[-317.77624512 281.66766357]
[-330.10501099 273.10458374]
[-341.59106445 263.44046021]
[-352.13641357 252.75776672]
[-361.65109253 241.14762878]
[-370.05395508 228.70909119]
[-377.27325439 215.54830933]
[-383.24740601 201.77754211]
[-387.92547607 187.51428223]
[-391.26751709 172.88023376]
[-393.24502563 158.00024414]
[-393.84112549 143.00126648]
[-393.05075073 128.01127625]
[-390.88061523 113.15815735]
[-387.34924316 98.56863403]
[-382.48678589 84.36717987]
[-376.33471680 70.67497253]
[-368.94552612 57.60881805]
[-360.38223267 45.28020096]
[-350.71792603 33.79430389]
[-340.03506470 23.24912453]
[-328.42477417 13.73463154]
[-315.98608398 5.33200121]
[-302.82519531 -1.88707638]
[-289.05432129 -7.86100960]
[-274.79098511 -12.53882980]
[-260.15689087 -15.88062763]
[-245.27685547 -17.85788918]
[-230.27786255 -18.45374680]
[-215.28788757 -17.66311646]
[-200.43479919 -15.49274158]
[-185.84533691 -11.96114254]
[-171.64396667 -7.09844828]
[-157.95185852 -0.94614726]
[-144.88583374 6.44327021]
[-132.55735779 15.00675964]
[-121.07162476 24.67125702]
[-110.52661896 35.35430908]
[-101.01232147 46.96476746]
[-92.60989380 59.40357590]
[-85.39103699 72.56460571]
[-79.41733551 86.33557129]
[-74.73975372 100.59898376]
[-71.39820099 115.23313904]
[-56.52893066 113.25705719]
[-41.65966415 111.28097534]
[-26.79039955 109.30488586]
[-11.92113209 107.32880402]
[2.94813418 105.35271454]
[17.81739998 103.37663269]
[32.68666840 101.40055084]
[47.55593491 99.42446136]
[62.42520142 97.44837952]
[77.29446411 95.47229004]
[92.16373444 93.49620819]
[99.23014069 89.33856964]
[107.49776459 91.68701172]
[122.41863251 90.14828491]
[127.54696655 75.77250671]
[138.41087341 65.05158997]
[152.85333252 60.11417007]
[168.00679016 61.94058609]
[180.86248779 70.16819763]
[188.86795044 83.16340637]
[190.43365479 98.34600067]
[185.24876404 112.70147705]
[174.34271240 123.37953186]
[159.88092041 128.26004028]
[144.73478699 126.37396240]
[131.91157532 118.09578705]
[123.95735931 105.06916046]
[109.03649139 106.60787964]
[94.13981628 108.36547852]
[79.27055359 110.34156036]
[64.40128326 112.31764221]
[49.53202057 114.29373169]
[34.66275024 116.26981354]
[19.79348564 118.24590302]
[4.92421913 120.22198486]
[-9.94504738 122.19806671]
[-24.81431389 124.17415619]
[-39.68358231 126.15023804]
[-54.55284882 128.12632751]
[-69.42211151 130.10240173]
[-68.82550812 145.10136414]
[-69.61538696 160.09138489]
[-71.78501892 174.94458008]
[-75.31588745 189.53422546]
[-80.17787170 203.73582458]
[-86.32949066 217.42825317]
[-93.71825409 230.49464417]
[-102.28112793 242.82354736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[71 86]
[72 85]
] def

init

% Start Annotations
58 98 0.16 1 colorpair
59 97 0.16 1 colorpair
71 86 0.48 1 colorpair
72 85 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
98 cmark
59 cmark
60 96 4 gmark
60 cmark
96 cmark
61 95 5 gmark
61 cmark
95 cmark
62 94 10 gmark
62 cmark
94 cmark
63 93 7 gmark
63 cmark
93 cmark
64 92 19 gmark
64 cmark
92 cmark
65 91 11 gmark
65 cmark
91 cmark
66 90 43 gmark
66 cmark
90 cmark
67 89 27 gmark
67 cmark
89 cmark
68 88 9 gmark
68 cmark
88 cmark
69 87 3 gmark
69 cmark
87 cmark
71 cmark
86 cmark
85 cmark

% End Annotations
showpage
end
%%EOF
