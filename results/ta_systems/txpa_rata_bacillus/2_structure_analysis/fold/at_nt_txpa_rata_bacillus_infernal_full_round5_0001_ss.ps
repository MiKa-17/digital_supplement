%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 21:33:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCAAAAGUAUUGCAAAU__________ACU_UCAUUUAAUGUGUUAUAAUCAGAACU_GUAAU_ACAUU_UGAUUGGUUAUA___GUGUA__UUUCUUUAAUGAGAAAUGCAUAAAAUAAAA_AGACCAGGGUGCUGGCAGCACCCCGGCUCUGUACAAAAAGC___UGCCCAUC\
) } def
/len { sequence length } bind def

/coor [
[-71.93005371 843.44122314]
[-86.93195343 843.49993896]
[-101.92419434 842.95837402]
[-116.88275146 841.81738281]
[-131.78369141 840.07885742]
[-146.60313416 837.74554443]
[-161.31736755 834.82110596]
[-175.90280151 831.31036377]
[-190.33610535 827.21887207]
[-204.59414673 822.55322266]
[-218.65409851 817.32080078]
[-232.49343872 811.53002930]
[-246.09002686 805.19018555]
[-259.42205811 798.31146240]
[-272.46820068 790.90478516]
[-285.20758057 782.98211670]
[-297.61975098 774.55609131]
[-309.68487549 765.64013672]
[-321.38360596 756.24865723]
[-332.69723511 746.39666748]
[-343.60760498 736.09985352]
[-354.09729004 725.37475586]
[-364.14947510 714.23858643]
[-373.74801636 702.70916748]
[-382.87762451 690.80493164]
[-391.52362061 678.54492188]
[-399.67218018 665.94885254]
[-407.31024170 653.03686523]
[-414.42559814 639.82952881]
[-421.00683594 626.34814453]
[-427.04339600 612.61425781]
[-432.52566528 598.64984131]
[-437.44482422 584.47723389]
[-441.79299927 570.11920166]
[-445.56323242 555.59863281]
[-448.74948120 540.93890381]
[-451.34664917 526.16339111]
[-453.35055542 511.29583740]
[-454.75805664 496.35998535]
[-455.56683350 481.37979126]
[-455.77560425 466.37924194]
[-455.38403320 451.38232422]
[-454.39276123 436.41311646]
[-452.80337524 421.49551392]
[-450.61840820 406.65347290]
[-447.84136963 391.91073608]
[-444.47671509 377.29089355]
[-440.52978516 362.81738281]
[-436.00695801 348.51339722]
[-430.91546631 334.40179443]
[-425.26342773 320.50521851]
[-419.05993652 306.84588623]
[-412.31491089 293.44570923]
[-405.03912354 280.32611084]
[-397.24429321 267.50814819]
[-388.94281006 255.01228333]
[-380.14807129 242.85858154]
[-370.87408447 231.06648254]
[-361.13571167 219.65487671]
[-350.94857788 208.64204407]
[-340.32897949 198.04559326]
[-329.29391479 187.88252258]
[-317.86108398 178.16909790]
[-306.04876709 168.92088318]
[-293.87588501 160.15266418]
[-281.36193848 151.87850952]
[-268.52697754 144.11166382]
[-255.39152527 136.86454773]
[-241.97665405 130.14878845]
[-228.30381775 123.97512054]
[-214.39492798 118.35344696]
[-200.27226257 113.29276276]
[-185.95841980 108.80117798]
[-171.47633362 104.88587189]
[-156.84919739 101.55313110]
[-142.10041809 98.80828857]
[-127.25363922 96.65573120]
[-112.33261871 95.09890747]
[-97.36125946 94.14031982]
[-82.36354065 93.78150177]
[-67.36347198 94.02302551]
[-52.38507462 94.86449432]
[-37.45233536 96.30457306]
[-22.58917427 98.34095764]
[-7.81938839 100.97037506]
[6.83336926 104.18862915]
[21.34563446 107.99054718]
[35.69416428 112.37005615]
[49.85598373 117.32013702]
[63.80841064 122.83287048]
[77.52910614 128.89941406]
[84.13883209 115.43421936]
[90.74855804 101.96901703]
[90.21524811 96.71926117]
[92.67704010 91.55006409]
[97.83383179 88.15341187]
[104.91204071 74.92847443]
[100.56021881 59.97188950]
[107.92692566 46.66075134]
[122.21256256 42.60413361]
[129.29077148 29.37919426]
[128.22267151 13.01486588]
[142.00895691 4.13396549]
[156.46746826 11.87240124]
[156.72453308 28.26953316]
[142.51570129 36.45739746]
[135.43750000 49.68233871]
[139.98571777 63.81914520]
[132.99580383 77.33194733]
[118.13697815 82.00668335]
[111.05876923 95.23162079]
[104.21375275 108.57874298]
[97.60402679 122.04393768]
[90.99430084 135.50914001]
[104.18605804 142.65322876]
[117.08141327 150.31939697]
[129.65972900 158.49537659]
[141.90084839 167.16804504]
[153.78518677 176.32354736]
[165.29368591 185.94720459]
[176.40794373 196.02360535]
[187.11013794 206.53660583]
[197.38314819 217.46939087]
[207.21052551 228.80442810]
[216.57650757 240.52359009]
[225.46611023 252.60810852]
[233.86511230 265.03860474]
[241.76004028 277.79519653]
[249.13825989 290.85742188]
[255.98796082 304.20443726]
[262.29815674 317.81478882]
[268.05877686 331.66671753]
[273.26055908 345.73800659]
[277.89517212 360.00619507]
[281.95523071 374.44836426]
[285.43420410 389.04141235]
[288.32653809 403.76196289]
[290.62759399 418.58645630]
[292.33367920 433.49114990]
[293.44204712 448.45217896]
[293.95098877 463.44555664]
[293.85958862 478.44729614]
[293.16809082 493.43334961]
[291.87753296 508.37976074]
[289.99002075 523.26257324]
[287.50857544 538.05792236]
[284.43713379 552.74212646]
[280.78067017 567.29174805]
[276.54498291 581.68341064]
[271.73690796 595.89404297]
[266.36410522 609.90093994]
[260.43518066 623.68170166]
[253.95965576 637.21417236]
[246.94787598 650.47674561]
[239.41110229 663.44812012]
[231.36135864 676.10760498]
[222.81156921 688.43487549]
[213.77542114 700.41015625]
[204.26737976 712.01440430]
[194.30265808 723.22888184]
[183.89724731 734.03570557]
[173.06777954 744.41760254]
[161.83160400 754.35784912]
[150.20672607 763.84057617]
[138.21174622 772.85064697]
[125.86589050 781.37359619]
[113.18891907 789.39569092]
[100.20113373 796.90423584]
[86.92333221 803.88708496]
[73.37678528 810.33312988]
[59.58317947 816.23205566]
[45.56460571 821.57434082]
[31.34351349 826.35144043]
[16.94267654 830.55578613]
[2.38515759 834.18054199]
[-12.30573177 837.22003174]
[-27.10646439 839.66925049]
[-41.99333954 841.52435303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[91 114]
[92 113]
[93 112]
[96 111]
[97 110]
[100 107]
[101 106]
] def

init

% Start Annotations
91 114 0.0 0.2 colorpair
92 113 0.32 1 colorpair
93 112 0.16 1 colorpair
96 111 0.16 1 colorpair
97 110 0.0 1 colorpair
100 107 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
91 114 2 gmark
92 cmark
113 cmark
93 cmark
111 cmark
100 107 2 gmark
101 106 24 gmark
106 cmark

% End Annotations
showpage
end
%%EOF
