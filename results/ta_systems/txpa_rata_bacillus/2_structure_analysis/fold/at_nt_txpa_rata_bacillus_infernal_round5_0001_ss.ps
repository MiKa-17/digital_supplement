%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 21:33:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCAAAAGUAUU_GCAAAU__________GUUUCAUUUAAUGUGUUAUAAUCAGAACU_GUAAUACAUU_UGAUUGGUUAUAG_____UGUAUUUCUUUAAUAAGAAAUGCAUAAAAUAAAA_A_G__ACCAGGGUGCUGGCAGCACCCCGGCUCUGUACAA_AAAGCUGCCCAUC\
) } def
/len { sequence length } bind def

/coor [
[115.93296051 437.82394409]
[102.47454071 438.19039917]
[89.01220703 438.02090454]
[75.56728363 437.31573486]
[62.16108322 436.07601929]
[48.81484604 434.30368042]
[35.54972458 432.00155640]
[22.38673973 429.17327881]
[9.34675598 425.82336426]
[-3.54956436 421.95706177]
[-16.28178406 417.58056641]
[-28.82972336 412.70077515]
[-41.17350006 407.32540894]
[-53.29354858 401.46304321]
[-65.17066193 395.12289429]
[-76.78602600 388.31506348]
[-88.12122345 381.05032349]
[-99.15828705 373.34017944]
[-109.87973785 365.19683838]
[-120.26858521 356.63323975]
[-130.30834961 347.66293335]
[-139.98313904 338.30017090]
[-149.27760315 328.55972290]
[-158.17703247 318.45706177]
[-166.66729736 308.00823975]
[-174.73497009 297.22973633]
[-182.36724854 286.13867188]
[-189.55204773 274.75262451]
[-196.27796936 263.08966064]
[-202.53436279 251.16821289]
[-208.31130981 239.00720215]
[-213.59967041 226.62590027]
[-218.39103699 214.04393005]
[-222.67782593 201.28123474]
[-226.45326233 188.35801697]
[-229.71133423 175.29478455]
[-232.44689941 162.11222839]
[-234.65560913 148.83123779]
[-236.33398438 135.47285461]
[-237.47933960 122.05825806]
[-238.08987427 108.60870361]
[-238.16461182 95.14550781]
[-237.70344543 81.69000244]
[-236.70709229 68.26351929]
[-235.17713928 54.88732910]
[-233.11601257 41.58263397]
[-230.52697754 28.37051201]
[-227.41413879 15.27190781]
[-223.78242493 2.30757737]
[-219.63758850 -10.50193405]
[-214.98622131 -23.13632584]
[-209.83564758 -35.57557678]
[-204.19407654 -47.79997253]
[-198.07043457 -59.79014206]
[-191.47441101 -71.52707672]
[-184.41647339 -82.99218750]
[-176.90780640 -94.16729736]
[-168.96029663 -105.03469849]
[-160.58656311 -115.57717133]
[-151.79985046 -125.77799988]
[-142.61408997 -135.62103271]
[-133.04385376 -145.09065247]
[-123.10430908 -154.17187500]
[-112.81118011 -162.85028076]
[-102.18080902 -171.11213684]
[-91.23001862 -178.94435120]
[-79.97618103 -186.33450317]
[-68.43711853 -193.27087402]
[-56.63113022 -199.74249268]
[-44.57691574 -205.73907471]
[-32.29357910 -211.25114441]
[-19.80059052 -216.26995850]
[-7.11774731 -220.78756714]
[5.73485231 -224.79678345]
[18.73683929 -228.29129028]
[31.86761093 -231.26551819]
[45.10635376 -233.71478271]
[58.43209076 -235.63519287]
[71.82370758 -237.02368164]
[85.25997162 -237.87808228]
[98.71959686 -238.19703674]
[112.18124390 -237.98001099]
[125.62359619 -237.22737122]
[139.02534485 -235.94030762]
[152.36523438 -234.12086487]
[165.62214661 -231.77191162]
[178.77505493 -228.89718628]
[191.80313110 -225.50123596]
[204.68571472 -221.58944702]
[217.40240479 -217.16799927]
[229.93304443 -212.24394226]
[242.25776672 -206.82502747]
[248.86747742 -220.29022217]
[255.47720337 -233.75543213]
[262.08694458 -247.22062683]
[268.69665527 -260.68582153]
[275.30636597 -274.15103149]
[266.68359375 -286.86096191]
[265.58700562 -302.18066406]
[272.31164551 -315.98919678]
[285.04855347 -324.57211304]
[300.37161255 -325.62063599]
[314.15899658 -318.85278320]
[322.70193481 -306.08901978]
[323.70245361 -290.76275635]
[316.89138794 -276.99664307]
[304.10092163 -268.49377441]
[288.77157593 -267.54129028]
[282.16186523 -254.07609558]
[275.55212402 -240.61090088]
[268.94241333 -227.14570618]
[262.33267212 -213.68051147]
[255.72296143 -200.21530151]
[273.41024780 -190.35798645]
[290.47592163 -179.45982361]
[306.85879517 -167.55990601]
[322.50018311 -154.70089722]
[337.34396362 -140.92886353]
[351.33694458 -126.29318237]
[364.42901611 -110.84632874]
[376.57315063 -94.64366150]
[387.72592163 -77.74327087]
[397.84725952 -60.20573807]
[406.90093994 -42.09392166]
[414.85449219 -23.47275162]
[421.67941284 -4.40897608]
[427.35119629 15.02906799]
[431.84957886 34.77170181]
[435.15838623 54.74815750]
[437.26577759 74.88682556]
[438.16418457 95.11550903]
[437.85040283 115.36170959]
[436.32553101 135.55284119]
[433.59506226 155.61653137]
[429.66879272 175.48085022]
[424.56076050 195.07460022]
[438.85879517 199.60958862]
[453.15682983 204.14457703]
[467.45486450 208.67956543]
[480.55996704 200.14781189]
[496.07681274 202.08720398]
[506.67886353 213.58201599]
[507.36013794 229.20475769]
[497.79895020 241.57884216]
[482.50982666 244.86160278]
[468.71179199 237.50302124]
[462.91989136 222.97760010]
[448.62185669 218.44261169]
[434.32382202 213.90762329]
[420.02578735 209.37263489]
[415.41903687 222.02337646]
[410.31243896 234.48072815]
[404.71405029 246.72496033]
[398.63278198 258.73669434]
[392.07824707 270.49682617]
[385.06082153 281.98678589]
[377.59167480 293.18835449]
[369.68258667 304.08374023]
[361.34613037 314.65573120]
[352.59548950 324.88751221]
[343.44454956 334.76290894]
[333.90780640 344.26626587]
[324.00036621 353.38250732]
[313.73794556 362.09722900]
[303.13681030 370.39657593]
[292.21374512 378.26739502]
[280.98608398 385.69723511]
[269.47158813 392.67431641]
[257.68850708 399.18756104]
[245.65554810 405.22668457]
[233.39175415 410.78210449]
[220.91656494 415.84497070]
[208.24975586 420.40734863]
[195.41139221 424.46191406]
[182.42182922 428.00231934]
[169.30163574 431.02288818]
[156.07162476 433.51889038]
[142.75274658 435.48632812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[136 150]
[137 149]
[138 148]
[139 147]
] def

init

% Start Annotations
92 113 0.0 1 colorpair
93 112 0.32 1 colorpair
94 111 0.16 1 colorpair
95 110 0.16 1 colorpair
96 109 0.0 1 colorpair
136 150 0.32 0.2 colorpair
137 149 0.16 0.2 colorpair
138 148 0.16 0.6 colorpair
139 147 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
93 cmark
112 cmark
94 cmark
110 cmark
97 108 3 gmark
108 cmark
136 150 2 gmark
136 cmark
150 cmark
137 149 2 gmark
137 cmark
149 cmark
138 148 1 gmark
148 cmark

% End Annotations
showpage
end
%%EOF
