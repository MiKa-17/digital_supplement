%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Mar  7 14:29:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________A_____AUG__CC___GCAAAAAACUAUG__________UUAU_UGGGCCUGAUCGUUAUCUGUUUCACGGUAUUGAUAUUCACAUUGAUGACGCGGAA_AUCGCUGUGCGAGCUGCGAAUCAGAGACGGCAAUACGGAGGUU_GCGGCCUUUUUGGC___UUACGAAUCCG___A__A______\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50580597 92.04254150]
[62.53254318 91.12802887]
[47.59412766 89.75730896]
[32.70446396 87.93167114]
[17.87740135 85.65279388]
[3.12673163 82.92281342]
[-11.53382301 79.74427032]
[-26.09062576 76.12010193]
[-40.53013611 72.05370331]
[-54.83891678 67.54883575]
[-69.00366211 62.60971069]
[-83.01119995 57.24090576]
[-96.84848785 51.44742584]
[-110.50266266 45.23465347]
[-123.96102142 38.60836792]
[-137.21104431 31.57473946]
[-150.24040222 24.14030647]
[-163.03698730 16.31198502]
[-175.58888245 8.09705830]
[-187.88441467 -0.49683222]
[-199.91213989 -9.46169281]
[-211.66088867 -18.78918266]
[-223.11972046 -28.47062683]
[-234.27796936 -38.49701691]
[-245.12525940 -48.85903168]
[-255.65150452 -59.54702377]
[-265.84692383 -70.55105591]
[-275.70199585 -81.86089325]
[-285.20758057 -93.46601105]
[-294.35485840 -105.35561371]
[-303.13525391 -117.51864624]
[-311.54067993 -129.94378662]
[-319.56326294 -142.61947632]
[-327.19552612 -155.53393555]
[-334.43045044 -168.67514038]
[-341.26119995 -182.03088379]
[-347.68151855 -195.58871460]
[-353.68536377 -209.33602905]
[-359.26718140 -223.26005554]
[-364.42175293 -237.34782410]
[-369.14434814 -251.58624268]
[-373.43048096 -265.96203613]
[-377.27624512 -280.46188354]
[-380.67803955 -295.07226562]
[-383.63265991 -309.77957153]
[-386.13739014 -324.57015991]
[-388.18994141 -339.43023682]
[-389.78833008 -354.34600830]
[-390.93109131 -369.30358887]
[-391.61718750 -384.28906250]
[-391.84594727 -399.28848267]
[-391.61721802 -414.28790283]
[-390.93112183 -429.27337646]
[-389.78836060 -444.23095703]
[-388.19000244 -459.14672852]
[-386.13748169 -474.00680542]
[-383.63278198 -488.79739380]
[-380.67816162 -503.50473022]
[-377.27639771 -518.11511230]
[-373.43066406 -532.61492920]
[-369.14450073 -546.99078369]
[-364.42196655 -561.22918701]
[-359.26739502 -575.31695557]
[-353.68557739 -589.24096680]
[-347.68176270 -602.98828125]
[-341.26147461 -616.54614258]
[-334.43069458 -629.90185547]
[-327.19583130 -643.04309082]
[-319.56356812 -655.95758057]
[-311.54098511 -668.63330078]
[-303.13558960 -681.05841064]
[-294.35519409 -693.22149658]
[-285.20794678 -705.11108398]
[-275.70236206 -716.71618652]
[-265.84729004 -728.02606201]
[-255.65190125 -739.03009033]
[-245.12567139 -749.71807861]
[-234.27839661 -760.08013916]
[-223.12014771 -770.10656738]
[-211.66134644 -779.78802490]
[-199.91261292 -789.11547852]
[-187.88488770 -798.08038330]
[-175.58937073 -806.67425537]
[-163.03747559 -814.88922119]
[-150.24090576 -822.71752930]
[-137.21156311 -830.15197754]
[-123.96154785 -837.18566895]
[-110.50319672 -843.81195068]
[-96.84902191 -850.02471924]
[-83.01174164 -855.81823730]
[-69.00421143 -861.18707275]
[-54.83947372 -866.12622070]
[-40.53069305 -870.63110352]
[-26.09119034 -874.69750977]
[-11.53439236 -878.32165527]
[3.12615895 -881.50024414]
[17.87682533 -884.23022461]
[32.70388412 -886.50915527]
[47.59354782 -888.33477783]
[62.53195953 -889.70550537]
[77.50522614 -890.62005615]
[92.49941254 -891.07751465]
[107.50058746 -891.07751465]
[122.49477386 -890.62005615]
[137.46804810 -889.70550537]
[152.40644836 -888.33477783]
[167.29611206 -886.50915527]
[182.12316895 -884.23022461]
[196.87384033 -881.50024414]
[211.53439331 -878.32165527]
[226.09118652 -874.69750977]
[240.53070068 -870.63110352]
[254.83947754 -866.12622070]
[269.00421143 -861.18707275]
[283.01174927 -855.81823730]
[296.84902954 -850.02471924]
[310.50320435 -843.81195068]
[323.96154785 -837.18566895]
[337.21154785 -830.15197754]
[350.24090576 -822.71752930]
[363.03747559 -814.88922119]
[375.58935547 -806.67425537]
[387.88488770 -798.08038330]
[399.91259766 -789.11547852]
[411.66134644 -779.78802490]
[423.12014771 -770.10656738]
[434.27838135 -760.08013916]
[445.12567139 -749.71807861]
[455.65191650 -739.03009033]
[465.84729004 -728.02606201]
[475.70236206 -716.71618652]
[485.20794678 -705.11108398]
[494.35519409 -693.22149658]
[503.13558960 -681.05841064]
[511.54098511 -668.63330078]
[519.56353760 -655.95758057]
[527.19580078 -643.04309082]
[534.43072510 -629.90185547]
[541.26147461 -616.54614258]
[547.68176270 -602.98828125]
[553.68560791 -589.24096680]
[559.26739502 -575.31695557]
[564.42193604 -561.22918701]
[569.14453125 -546.99078369]
[573.43066406 -532.61492920]
[577.27636719 -518.11511230]
[580.67816162 -503.50473022]
[583.63275146 -488.79739380]
[586.13751221 -474.00680542]
[588.19000244 -459.14672852]
[589.78839111 -444.23095703]
[590.93115234 -429.27337646]
[591.61718750 -414.28790283]
[591.84594727 -399.28848267]
[591.61718750 -384.28906250]
[590.93109131 -369.30358887]
[589.78833008 -354.34600830]
[588.18994141 -339.43023682]
[586.13739014 -324.57015991]
[583.63269043 -309.77957153]
[580.67803955 -295.07226562]
[577.27624512 -280.46188354]
[573.43048096 -265.96203613]
[569.14434814 -251.58624268]
[564.42175293 -237.34782410]
[559.26715088 -223.26005554]
[553.68536377 -209.33602905]
[547.68151855 -195.58871460]
[541.26123047 -182.03088379]
[534.43041992 -168.67514038]
[527.19555664 -155.53393555]
[519.56323242 -142.61947632]
[511.54067993 -129.94378662]
[503.13525391 -117.51864624]
[494.35485840 -105.35561371]
[485.20758057 -93.46601105]
[475.70199585 -81.86089325]
[465.84692383 -70.55105591]
[455.65148926 -59.54702377]
[445.12524414 -48.85903168]
[434.27795410 -38.49701691]
[423.11972046 -28.47062683]
[411.66088867 -18.78918266]
[399.91213989 -9.46169281]
[387.88439941 -0.49683222]
[375.58886719 8.09705830]
[363.03698730 16.31198502]
[350.24041748 24.14030647]
[337.21105957 31.57473946]
[323.96102905 38.60836792]
[310.50265503 45.23465347]
[296.84848022 51.44742584]
[283.01119995 57.24090576]
[269.00366211 62.60971069]
[254.83891296 67.54883575]
[240.53013611 72.05370331]
[226.09062195 76.12010193]
[211.53382874 79.74427032]
[196.87327576 82.92281342]
[182.12260437 85.65279388]
[167.29553223 87.93167114]
[152.40586853 89.75730896]
[137.46745300 91.12802887]
[122.49419403 92.04254150]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
