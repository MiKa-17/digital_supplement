%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:58:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAA___GCCGCAAAAGGCGAUGUUAUUCGGCCUGAUCGUCAUCUGUUUCACCGUUUUAAUAUUGACGCUGGUAACGCGGAAAGACCUCUGCGAGGUACGCAUCCGAAACGGACAGACGGAGGUCGCUGCCUUCAUGGCUUACGAAUCUGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[158.25109863 522.16217041]
[155.77330017 507.32870483]
[155.90913391 492.29031372]
[158.65446472 477.50402832]
[163.92588806 463.41915894]
[171.56320190 450.46377563]
[181.33430481 439.03149414]
[192.94227600 429.46981812]
[206.03436279 422.06924438]
[201.02961731 407.92877197]
[196.02487183 393.78833008]
[191.02012634 379.64785767]
[186.01539612 365.50741577]
[171.10108948 364.80517578]
[157.55522156 358.42907715]
[147.45520020 347.32257080]
[142.36317444 333.15713501]
[143.08436584 318.08090210]
[149.54000854 304.39266968]
[160.77452087 294.19158936]
[155.76977539 280.05114746]
[144.61749268 283.13372803]
[133.29708862 285.52624512]
[121.85121155 287.21966553]
[110.32300568 288.20764160]
[98.75589752 288.48641968]
[87.19347382 288.05496216]
[75.67931366 286.91491699]
[64.25679016 285.07052612]
[52.96895599 282.52880859]
[41.85833740 279.29925537]
[30.96680260 275.39413452]
[20.33539200 270.82806396]
[10.00416660 265.61831665]
[0.01205333 259.78451538]
[-9.60329437 253.34861755]
[-18.80564690 246.33488464]
[-27.56032562 238.76974487]
[-35.83434677 230.68171692]
[-43.59652710 222.10125732]
[-50.81762314 213.06071472]
[-57.47042084 203.59414673]
[-63.52985764 193.73722839]
[-68.97309113 183.52708435]
[-73.77962494 173.00221252]
[-77.93133545 162.20225525]
[-81.41258240 151.16792297]
[-84.21025085 139.94078064]
[-86.31378937 128.56312561]
[-87.71528625 117.07785797]
[-88.40944672 105.52823639]
[-88.39366150 93.95777893]
[-87.66799164 82.41008759]
[-86.23516846 70.92868042]
[-84.10059357 59.55681992]
[-81.27231598 48.33734894]
[-77.76097870 37.31254959]
[-73.57981873 26.52396202]
[-68.74459076 16.01224136]
[-63.27351761 5.81699371]
[-57.18721771 -4.02336264]
[-50.50861359 -13.47174740]
[-43.26288223 -22.49255943]
[-35.47732162 -31.05180740]
[-27.18126678 -39.11724091]
[-18.40598106 -46.65846252]
[-9.18452835 -53.64706039]
[0.44834167 -60.05670166]
[10.45633316 -65.86323547]
[20.80173302 -71.04477692]
[31.44556236 -75.58180237]
[42.34770966 -79.45722198]
[53.46709824 -82.65642548]
[64.76182556 -85.16735840]
[76.18933868 -86.98056793]
[87.70656586 -88.08921051]
[99.27011871 -88.48912048]
[110.83642578 -88.17877960]
[122.36189270 -87.15936279]
[133.80310059 -85.43470764]
[137.07818604 -100.07280731]
[129.73336792 -114.33580780]
[136.43640137 -128.91143799]
[152.04527283 -132.61851501]
[164.58621216 -122.61329651]
[164.43887329 -106.57091522]
[151.71627808 -96.79772949]
[148.44120789 -82.15962982]
[164.28662109 -77.18891144]
[179.63302612 -70.84279633]
[194.36129761 -63.17053986]
[208.35711670 -54.23170090]
[221.51181030 -44.09566116]
[231.63029480 -55.16889191]
[232.34754944 -71.19590759]
[245.40936279 -80.51087189]
[260.79583740 -75.96814728]
[266.70376587 -61.05252075]
[258.60110474 -47.20598602]
[242.70352173 -45.05041885]
[232.58505249 -33.97718430]
[246.50102234 -18.60072517]
[258.64352417 -1.78855252]
[268.86560059 16.25581360]
[277.04348755 35.31393814]
[283.07818604 55.15511703]
[286.89663696 75.53916168]
[288.45260620 96.21931458]
[287.72729492 116.94523621]
[284.72946167 137.46603394]
[279.49542236 157.53327942]
[272.08847046 176.90405273]
[262.59835815 195.34388733]
[251.13989258 212.62953186]
[237.85182190 228.55175781]
[222.89500427 242.91780090]
[206.45048523 255.55377197]
[188.71733093 266.30670166]
[169.91023254 275.04638672]
[174.91497803 289.18685913]
[190.06527710 290.04949951]
[203.69433594 296.62915039]
[213.73884583 307.89508057]
[218.69143677 322.10986328]
[217.82681274 337.09707642]
[211.30780029 350.57476807]
[200.15583801 360.50265503]
[205.16058350 374.64312744]
[210.16532898 388.78356934]
[215.17007446 402.92404175]
[220.17481995 417.06448364]
[235.00744629 414.58163452]
[250.04586792 414.71237183]
[264.83306885 417.45266724]
[278.91973877 422.71929932]
[291.87774658 430.35220337]
[303.31332397 440.11941528]
[312.87896729 451.72412109]
[320.28399658 464.81369019]
[325.30334473 478.99035645]
[327.78451538 493.82324219]
[327.65209961 508.86166382]
[324.91012573 523.64855957]
[319.64187622 537.73461914]
[312.00750732 550.69177246]
[302.23901367 562.12622070]
[290.63320923 571.69055176]
[277.54278564 579.09411621]
[263.36557007 584.11181641]
[248.53239441 586.59130859]
[233.49400330 586.45721436]
[218.70741272 583.71356201]
[204.62194824 578.44372559]
[191.66567993 570.80786133]
[180.23231506 561.03808594]
[170.66929626 549.43115234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[20 120]
[21 119]
[80 88]
[81 87]
[93 101]
[94 100]
] def

init

% Start Annotations
10 130 0.0 0.2 colorpair
12 128 0.16 0.2 colorpair
20 120 0.16 0.6 colorpair
21 119 0.32 0.6 colorpair
80 88 0.16 1 colorpair
93 101 0.32 0.2 colorpair
94 100 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 131 6 gmark
131 cmark
10 130 2 gmark
11 129 5 gmark
11 cmark
129 cmark
12 128 2 gmark
128 cmark
13 127 6 gmark
13 cmark
127 cmark
20 120 1 gmark
20 cmark
120 cmark
21 119 1 gmark
21 cmark
119 cmark
88 cmark
81 87 7 gmark
81 cmark
87 cmark
93 101 2 gmark
93 cmark
101 cmark
94 100 2 gmark

% End Annotations
showpage
end
%%EOF
