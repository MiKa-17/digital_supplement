%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:58:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____GAAG_CAGCAAAAGGCGAUGUUAAUCGCCCUGAUCGUCAUCUGUUUAACCGUCAUAGUGACGGCACUGGUAACGAGGAAAGACCUCUGCGAGGUACGAAUCCGAACCGGCCAGACGGAGGUCGCUGUCUUCACAGCUUACGAACCUGAGG__\
) } def
/len { sequence length } bind def

/coor [
[86.38503265 300.72125244]
[74.49641418 299.55938721]
[62.69770432 297.69403076]
[51.03050232 295.13168335]
[39.53593826 291.88143921]
[28.25453568 287.95471191]
[17.22606659 283.36538696]
[6.48940945 278.12960815]
[-3.91758370 272.26583862]
[-13.95822334 265.79476929]
[-23.59711266 258.73922729]
[-32.80027008 251.12403870]
[-41.53525162 242.97607422]
[-49.77126312 234.32406616]
[-57.47926712 225.19851685]
[-64.63209534 215.63157654]
[-71.20452118 205.65698242]
[-77.17337799 195.30992126]
[-82.51762390 184.62684631]
[-87.21842957 173.64541626]
[-91.25920105 162.40437317]
[-94.62570953 150.94331360]
[-109.26834869 154.19799805]
[-123.91099548 157.45268250]
[-138.55363464 160.70735168]
[-140.22456360 175.75683594]
[-146.69375610 189.44728088]
[-157.25949097 200.29365540]
[-170.77568054 207.11943054]
[-185.77619934 209.18418884]
[-200.63389587 206.26396179]
[-213.73710632 198.67552185]
[-223.66452026 187.24200439]
[-229.33924866 173.20361328]
[-230.14576721 158.08316040]
[-225.99658203 143.52078247]
[-217.34178162 131.09608459]
[-205.12013245 122.15682983]
[-190.65739441 117.67266846]
[-175.52235413 118.13000488]
[-161.35675049 123.47924042]
[-149.69715881 133.14012146]
[-141.80831909 146.06471252]
[-127.16567993 142.81002808]
[-112.52303314 139.55534363]
[-97.88038635 136.30065918]
[-100.60855865 115.18527222]
[-101.08996582 93.89981079]
[-99.31921387 72.68266296]
[-95.31613922 51.77146530]
[-89.12557983 31.40041542]
[-80.81685638 11.79766369]
[-70.48303223 -6.81724501]
[-58.23983765 -24.23582840]
[-44.22439957 -40.26300049]
[-28.59368515 -54.71926498]
[-37.74481201 -66.60441589]
[-46.89593887 -78.48957062]
[-62.40267181 -77.92308044]
[-75.26203918 -86.60733032]
[-80.52936554 -101.20304871]
[-76.17923737 -116.09788513]
[-63.88438416 -125.56446838]
[-48.37242126 -125.96269989]
[-35.60801315 -117.13946533]
[-30.49933815 -102.48746490]
[-35.01078796 -87.64070129]
[-25.85965919 -75.75554657]
[-16.70853233 -63.87039185]
[-2.58988047 -73.05982208]
[12.24806881 -81.03586578]
[27.70128250 -87.74259949]
[43.66141129 -93.13298798]
[60.01655197 -97.16924286]
[76.65203094 -99.82306671]
[93.45121765 -101.07585907]
[110.29631042 -100.91882324]
[127.06922150 -99.35306549]
[143.65232849 -96.38956451]
[159.92938232 -92.04909515]
[175.78623962 -86.36209869]
[191.11174011 -79.36843872]
[205.79841614 -71.11716461]
[219.74328613 -61.66611099]
[232.84860229 -51.08155441]
[245.02246094 -39.43770599]
[256.17950439 -26.81620407]
[266.24151611 -13.30554295]
[275.13793945 0.99954796]
[288.46218872 -5.88991117]
[301.78640747 -12.77937031]
[315.11065674 -19.66883087]
[311.12176514 -34.18717957]
[310.23898315 -49.21762848]
[312.50088501 -64.10311127]
[317.80859375 -78.19288635]
[325.93008423 -90.87102509]
[336.51028442 -101.58329010]
[349.08673096 -109.86138153]
[363.10961914 -115.34342194]
[377.96588135 -117.78974915]
[393.00613403 -117.09343719]
[407.57284546 -113.28491974]
[421.02920532 -106.53067780]
[432.78698730 -97.12599182]
[442.33221436 -85.48198700]
[449.24752808 -72.10769653]
[453.23071289 -57.58777618]
[454.10757446 -42.55698395]
[451.83984375 -27.67239571]
[446.52658081 -13.58470249]
[438.40011597 -0.90976030]
[427.81567383 9.79833889]
[415.23599243 18.07148170]
[401.21093750 23.54800224]
[386.35369873 25.98849106]
[371.31375122 25.28626060]
[356.74853516 21.47200775]
[343.29483032 14.71247768]
[331.54074097 5.30316687]
[322.00012207 -6.34459066]
[308.67587280 0.54486847]
[295.35162354 7.43432760]
[282.02740479 14.32378674]
[286.79135132 25.27796555]
[290.89675903 36.49556732]
[294.32919312 47.93705368]
[297.07653809 59.56208038]
[299.12908936 71.32966614]
[300.47964478 83.19833374]
[301.12341309 95.12622833]
[301.05816650 107.07130432]
[300.28408813 118.99145508]
[298.80392456 130.84465027]
[296.62286377 142.58909607]
[293.74865723 154.18341064]
[290.19140625 165.58670044]
[285.96365356 176.75877380]
[281.08029175 187.66024780]
[275.55853271 198.25267029]
[269.41787720 208.49871826]
[262.67993164 218.36225891]
[255.36849976 227.80851746]
[247.50930786 236.80419922]
[239.13009644 245.31759644]
[230.26039124 253.31867981]
[220.93145752 260.77926636]
[211.17619324 267.67300415]
[201.02897644 273.97567749]
[190.52560425 279.66497803]
[179.70309448 284.72088623]
[168.59957886 289.12557983]
[157.25424194 292.86352539]
[145.70704651 295.92153931]
[133.99871826 298.28887939]
[122.17053223 299.95712280]
[110.26418304 300.92047119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 46]
[23 45]
[24 44]
[25 43]
[56 69]
[57 68]
[58 67]
[89 124]
[90 123]
[91 122]
[92 121]
] def

init

% Start Annotations
24 44 0.16 1 colorpair
57 68 0.32 1 colorpair
90 123 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 46 74 gmark
22 cmark
46 cmark
23 45 22 gmark
23 cmark
44 cmark
25 43 36 gmark
25 cmark
43 cmark
56 69 78 gmark
56 cmark
69 cmark
57 cmark
68 cmark
58 67 24 gmark
58 cmark
67 cmark
89 124 10 gmark
89 cmark
91 122 42 gmark
91 cmark
92 121 22 gmark
121 cmark

% End Annotations
showpage
end
%%EOF
