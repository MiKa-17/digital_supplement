%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 02:57:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUA_UCCUGAUGUGGUCUAGACAUAGGGA_GG_CCUCGUGG__GUUAAUG____________AAA________AAUUUACUACGGGGCUUUCUUCUUUCUGCCACACAACACGGUAACAAACCACCUUCA_CGUCAUGAGGCAGAAAGCCUCAAGCGCC____________\
) } def
/len { sequence length } bind def

/coor [
[-107.63031006 367.97512817]
[-119.28051758 358.52865601]
[-130.50148010 348.57611084]
[-141.27120972 338.13696289]
[-151.56864929 327.23165894]
[-161.37364197 315.88153076]
[-173.14733887 325.17562866]
[-184.92105103 334.46969604]
[-196.69476318 343.76376343]
[-189.62985229 357.04257202]
[-185.04971313 371.36953735]
[-183.10156250 386.28411865]
[-183.84802246 401.30685425]
[-187.26512146 415.95483398]
[-193.24299622 429.75717163]
[-201.58947754 442.27020264]
[-212.03627014 453.09167480]
[-224.24755859 461.87374878]
[-237.83078003 468.33404541]
[-252.34931946 472.26495361]
[-267.33642578 473.54010010]
[-282.31036377 472.11849976]
[-296.78976440 468.04583740]
[-310.30920410 461.45300293]
[-322.43402100 452.55200195]
[-332.77453613 441.62890625]
[-340.99826050 429.03488159]
[-346.84091187 415.17474365]
[-350.11462402 400.49404907]
[-350.71420288 385.46472168]
[-348.62030029 370.56991577]
[-343.90029907 356.28842163]
[-336.70593262 343.07931519]
[-327.26840210 331.36721802]
[-315.89114380 321.52865601]
[-302.93984985 313.87985229]
[-288.83087158 308.66671753]
[-274.01776123 306.05682373]
[-258.97668457 306.13406372]
[-244.19117737 308.89596558]
[-230.13648987 314.25375366]
[-217.26445007 322.03515625]
[-205.98883057 331.99005127]
[-194.21513367 322.69598389]
[-182.44142151 313.40191650]
[-170.66770935 304.10784912]
[-179.43115234 291.93551636]
[-187.64759827 279.38751221]
[-195.30096436 266.48831177]
[-202.37626648 253.26321411]
[-208.85964966 239.73809814]
[-214.73843384 225.93943787]
[-220.00108337 211.89424133]
[-224.63732910 197.63002014]
[-228.63809204 183.17466736]
[-231.99551392 168.55650330]
[-234.70304871 153.80413818]
[-236.75538635 138.94645691]
[-238.14851379 124.01252747]
[-238.87969971 109.03159332]
[-238.94750977 94.03297424]
[-238.35182190 79.04604340]
[-237.09378052 64.10012817]
[-235.17587280 49.22448730]
[-232.60183716 34.44824219]
[-229.37672424 19.80031776]
[-225.50685120 5.30938911]
[-220.99977112 -8.99617958]
[-215.86431885 -23.08838272]
[-210.11054993 -36.93963623]
[-203.74972534 -50.52282333]
[-196.79431152 -63.81135559]
[-189.25788879 -76.77922058]
[-181.15524292 -89.40103149]
[-172.50221252 -101.65207672]
[-163.31576538 -113.50838470]
[-153.61384583 -124.94673920]
[-143.41548157 -135.94474792]
[-132.74061584 -146.48089600]
[-121.61013794 -156.53453064]
[-110.04586029 -166.08599854]
[-98.07040405 -175.11657715]
[-85.70722198 -183.60861206]
[-72.98050690 -191.54547119]
[-59.91516876 -198.91162109]
[-46.53679657 -205.69264221]
[-32.87157059 -211.87524414]
[-18.94624138 -217.44734192]
[-4.78806925 -222.39801025]
[9.57522964 -226.71759033]
[24.11553764 -230.39759827]
[38.80439377 -233.43083191]
[53.61304474 -235.81135559]
[68.51249695 -237.53453064]
[83.47358704 -238.59695435]
[98.46703339 -238.99656677]
[113.46347809 -238.73257446]
[128.43356323 -237.80549622]
[143.34799194 -236.21714783]
[158.17756653 -233.97064209]
[172.89326477 -231.07037354]
[187.46624756 -227.52201843]
[201.86802673 -223.33253479]
[216.07040405 -218.51010132]
[230.04554749 -213.06416321]
[243.76612854 -207.00540161]
[257.20529175 -200.34565735]
[270.33670044 -193.09797668]
[283.13467407 -185.27655029]
[295.57415771 -176.89666748]
[307.63079834 -167.97476196]
[319.28097534 -158.52827454]
[330.50192261 -148.57569885]
[341.27163696 -138.13653564]
[351.56906128 -127.23120880]
[361.37402344 -115.88106537]
[370.66732788 -104.10832977]
[379.43081665 -91.93603516]
[387.64727783 -79.38802338]
[395.30065918 -66.48884583]
[402.37597656 -53.26376343]
[408.85940552 -39.73865891]
[414.73818970 -25.94001198]
[420.00088501 -11.89482880]
[424.63714600 2.36939263]
[428.63793945 16.82472992]
[431.99539185 31.44288826]
[434.70294189 46.19524765]
[436.75531006 61.05293274]
[438.14846802 75.98686218]
[438.87966919 90.96779633]
[438.94750977 105.96640778]
[438.35186768 120.95334625]
[437.09384155 135.89926147]
[435.17596436 150.77490234]
[432.60195923 165.55114746]
[429.37686157 180.19908142]
[425.50701904 194.69001770]
[420.99996948 208.99559021]
[415.86453247 223.08781433]
[410.11080933 236.93907166]
[403.75000000 250.52226257]
[396.79461670 263.81082153]
[389.25820923 276.77868652]
[381.15557861 289.40051270]
[372.50259399 301.65158081]
[363.31616211 313.50790405]
[353.61425781 324.94628906]
[343.41589355 335.94430542]
[332.74105835 346.48046875]
[321.61059570 356.53411865]
[310.04635620 366.08560181]
[298.07089233 375.11621094]
[285.70773315 383.60827637]
[272.98104858 391.54516602]
[259.91571045 398.91134644]
[246.53735352 405.69238281]
[232.87213135 411.87500000]
[218.94682312 417.44711304]
[204.78865051 422.39782715]
[190.42536926 426.71740723]
[175.88505554 430.39746094]
[161.19621277 433.43072510]
[146.38757324 435.81127930]
[131.48811340 437.53445435]
[116.52702332 438.59692383]
[101.53358459 438.99655151]
[86.53713989 438.73260498]
[71.56704712 437.80554199]
[56.65261459 436.21722412]
[41.82303619 433.97073364]
[27.10734367 431.07049561]
[12.53434181 427.52218628]
[-1.86744297 423.33270264]
[-16.06981850 418.51031494]
[-30.04498100 413.06439209]
[-43.76557541 407.00567627]
[-57.20474243 400.34594727]
[-70.33617401 393.09829712]
[-83.13416290 385.27688599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
] def

init

% Start Annotations
6 46 0.0 1 colorpair
7 45 0.0 1 colorpair
8 44 0.0 1 colorpair
9 43 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
