%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:13:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUG___AAGC_AGC__AAAAGGCGAUGUUAGUCGCCCUGAUCGUCAUCUGUUUCACCGUCAUAGUGUUCACACUGGUGACGAGGAAAGCCCUCUGCGAGGUGCGAAUCCGAAACGGCCAUACGGAGGUUGCUGCAUUCAUAGCUUACGAAUCUAAGG__\
) } def
/len { sequence length } bind def

/coor [
[349.76504517 269.02450562]
[335.45053101 264.53366089]
[321.34710693 259.41842651]
[307.48193359 253.68862915]
[293.88186646 247.35534668]
[280.57308960 240.43080139]
[267.58129883 232.92835999]
[254.93161011 224.86250305]
[242.64840698 216.24879456]
[230.75540161 207.10388184]
[219.27557373 197.44540405]
[208.23104858 187.29199219]
[197.64318848 176.66326904]
[187.53237915 165.57974243]
[177.91818237 154.06278992]
[168.81913757 142.13467407]
[160.25279236 129.81838989]
[152.23571777 117.13771820]
[144.78335571 104.11714935]
[137.91012573 90.78180695]
[124.28797150 97.06169891]
[110.66582489 103.34159851]
[97.10598755 109.75492096]
[83.60975647 116.30106354]
[70.11353302 122.84719849]
[56.61731339 129.39334106]
[47.87031174 143.26496887]
[31.49641228 142.35537720]
[24.33967209 127.60026550]
[33.76233673 114.17844391]
[50.07117462 115.89711761]
[63.56739807 109.35097504]
[77.06362152 102.80484009]
[90.55984497 96.25869751]
[95.89463043 90.15599060]
[104.38592529 89.71945190]
[118.00807190 83.43955231]
[131.63021851 77.15966034]
[125.95376587 63.27259064]
[120.89276123 49.14958954]
[116.45698547 34.81791687]
[112.65499878 20.30524063]
[109.49414062 5.63957119]
[106.98050690 -9.15078259]
[105.11896515 -24.03727150]
[103.91309357 -38.99115753]
[103.36521912 -53.98358154]
[103.47640991 -68.98559570]
[104.24644470 -83.96825409]
[105.67384338 -98.90262604]
[107.75583649 -113.75988770]
[110.48841858 -128.51135254]
[113.86631775 -143.12855530]
[117.88299561 -157.58328247]
[122.53071594 -171.84764099]
[127.80050659 -185.89407349]
[133.68218994 -199.69546509]
[140.16439819 -213.22520447]
[147.23464966 -226.45715332]
[154.87927246 -239.36578369]
[163.08352661 -251.92616272]
[171.83155823 -264.11404419]
[181.10650635 -275.90594482]
[190.89044189 -287.27902222]
[201.16448975 -298.21139526]
[211.90881348 -308.68194580]
[223.10269165 -318.67044067]
[234.72448730 -328.15762329]
[246.75180054 -337.12518311]
[259.16137695 -345.55575562]
[271.92932129 -353.43313599]
[285.03091431 -360.74209595]
[298.44091797 -367.46850586]
[312.13342285 -373.59942627]
[326.08203125 -379.12298584]
[340.25976562 -384.02850342]
[354.63931274 -388.30657959]
[369.19287109 -391.94888306]
[383.89239502 -394.94842529]
[398.70947266 -397.29943848]
[413.61550903 -398.99731445]
[428.58175659 -400.03881836]
[443.57928467 -400.42196655]
[458.57916260 -400.14596558]
[473.55245972 -399.21136475]
[488.47024536 -397.61999512]
[503.30374146 -395.37487793]
[518.02429199 -392.48040771]
[532.60351562 -388.94213867]
[547.01324463 -384.76690674]
[561.22564697 -379.96273804]
[575.21337891 -374.53897095]
[588.94934082 -368.50601196]
[602.40704346 -361.87554932]
[615.56048584 -354.66036987]
[628.38433838 -346.87435913]
[640.85382080 -338.53262329]
[652.94488525 -329.65121460]
[664.63415527 -320.24728394]
[675.89910889 -310.33898926]
[686.71795654 -299.94546509]
[697.06982422 -289.08676147]
[706.93475342 -277.78381348]
[716.29364014 -266.05850220]
[725.12854004 -253.93339539]
[733.42224121 -241.43193054]
[741.15887451 -228.57823181]
[748.32348633 -215.39712524]
[754.90216064 -201.91403198]
[760.88226318 -188.15499878]
[766.25225830 -174.14656067]
[771.00170898 -159.91577148]
[775.12158203 -145.49009705]
[778.60375977 -130.89739990]
[781.44165039 -116.16581726]
[783.62969971 -101.32380676]
[785.16375732 -86.40001678]
[786.04077148 -71.42324066]
[786.25909424 -56.42240143]
[785.81835938 -41.42644882]
[784.71929932 -26.46432877]
[782.96411133 -11.56492329]
[780.55621338 3.24300671]
[777.50018311 17.93087959]
[773.80194092 32.47034073]
[769.46862793 46.83332825]
[764.50866699 60.99211884]
[758.93151855 74.91937256]
[752.74804688 88.58821869]
[745.97009277 101.97226715]
[738.61083984 115.04568481]
[730.68444824 127.78323364]
[722.20623779 140.16032410]
[713.19250488 152.15307617]
[703.66070557 163.73832703]
[693.62927246 174.89372253]
[683.11749268 185.59773254]
[672.14575195 195.82968140]
[660.73510742 205.56982422]
[648.90765381 214.79937744]
[636.68621826 223.50050354]
[624.09442139 231.65640259]
[611.15649414 239.25135803]
[597.89746094 246.27069092]
[584.34289551 252.70085144]
[570.51898193 258.52944946]
[556.45245361 263.74520874]
[542.17028809 268.33804321]
[527.70025635 272.29913330]
[513.07019043 275.62081909]
[498.30831909 278.29669189]
[483.44314575 280.32156372]
[468.50341797 281.69155884]
[453.51791382 282.40399170]
[438.51556396 282.45751953]
[423.52536011 281.85202026]
[408.57623291 280.58868408]
[393.69699097 278.66992188]
[378.91641235 276.09945679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 38]
[21 37]
[22 36]
[23 34]
[24 33]
[25 32]
[26 31]
] def

init

% Start Annotations
20 38 0.0 1 colorpair
25 32 0.32 0.2 colorpair
26 31 0.48 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
21 37 5 gmark
21 cmark
37 cmark
22 36 6 gmark
22 cmark
36 cmark
23 34 6 gmark
23 cmark
34 cmark
24 33 6 gmark
24 cmark
33 cmark
25 32 2 gmark
25 cmark
32 cmark
26 31 1 gmark
26 cmark
31 cmark

% End Annotations
showpage
end
%%EOF
