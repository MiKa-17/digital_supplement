%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 02:02:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUGCCAAAAAAUACUCUGCUGUGAGGCGUGUUUAUGAUCUGUCUGACGCUGUUGAUCUUCACCUGGAUGACGCGCGACUCGCUGUGCGAGCUGCACUUCAGACAGGAGAAAACGGAGGUGGCGGCAGUGUUGGCUUACGAAGCAAA____\
) } def
/len { sequence length } bind def

/coor [
[158.27957153 436.37600708]
[143.44827271 438.61123657]
[128.53311157 440.19287109]
[113.56287384 441.11782837]
[98.56645966 441.38433838]
[83.57280731 440.99188232]
[68.61087036 439.94125366]
[53.70951462 438.23440552]
[38.89751816 435.87469482]
[24.20346260 432.86666870]
[9.65571594 429.21609497]
[-4.71764231 424.93005371]
[-18.88886833 420.01681519]
[-32.83060455 414.48587036]
[-46.51594543 408.34786987]
[-59.91847229 401.61465454]
[-73.01230621 394.29928589]
[-85.77218628 386.41580200]
[-98.17347717 377.97949219]
[-110.19224548 369.00659180]
[-121.80527496 359.51443481]
[-132.99017334 349.52136230]
[-143.72532654 339.04663086]
[-153.99003601 328.11047363]
[-163.76446533 316.73400879]
[-173.02976990 304.93917847]
[-181.76805115 292.74877930]
[-189.96243286 280.18630981]
[-197.59712219 267.27606201]
[-204.65736389 254.04289246]
[-211.12954712 240.51239014]
[-217.00115967 226.71066284]
[-222.26087952 212.66433716]
[-226.89854431 198.40055847]
[-230.90519714 183.94683838]
[-234.27313232 169.33106995]
[-236.99583435 154.58146667]
[-239.06802368 139.72651672]
[-240.48573303 124.79489136]
[-241.24621582 109.81539917]
[-241.34800720 94.81695557]
[-240.79089355 79.82852173]
[-239.57597351 64.87902832]
[-237.70558167 49.99731827]
[-235.18331909 35.21213150]
[-232.01406860 20.55200386]
[-228.20393372 6.04522991]
[-223.76028442 -8.28018570]
[-218.69169617 -22.39659309]
[-213.00794983 -36.27674103]
[-206.72000122 -49.89383698]
[-199.84001160 -63.22159958]
[-192.38125610 -76.23429871]
[-184.35810852 -88.90682220]
[-175.78608704 -101.21470642]
[-166.68171692 -113.13418579]
[-157.06259155 -124.64226532]
[-146.94726562 -135.71672058]
[-136.35525513 -146.33618164]
[-125.30702209 -156.48014832]
[-113.82388306 -166.12904358]
[-101.92801666 -175.26423645]
[-89.64236450 -183.86810303]
[-76.99065399 -191.92401123]
[-63.99730682 -199.41644287]
[-50.68740082 -206.33091736]
[-37.08662796 -212.65409851]
[-23.22124100 -218.37376404]
[-9.11800480 -223.47888184]
[5.19585848 -227.95959473]
[19.69272041 -231.80726624]
[34.34459686 -235.01446533]
[49.12320328 -237.57499695]
[64.00001526 -239.48391724]
[78.94631958 -240.73753357]
[93.93326569 -241.33345032]
[108.93191528 -241.27049255]
[123.91333008 -240.54878235]
[138.84857178 -239.16973877]
[153.70884705 -237.13600159]
[168.46543884 -234.45150757]
[183.08987427 -231.12142944]
[197.55392456 -227.15219116]
[211.82966614 -222.55146790]
[225.88955688 -217.32814026]
[239.70643616 -211.49227905]
[253.25364685 -205.05514526]
[266.50503540 -198.02919006]
[279.43502808 -190.42794800]
[292.01867676 -182.26611328]
[304.23165894 -173.55941772]
[316.05041504 -164.32469177]
[327.45214844 -154.57972717]
[338.41485596 -144.34338379]
[348.91732788 -133.63537598]
[358.93933105 -122.47638702]
[368.46151733 -110.88796997]
[377.46551514 -98.89247894]
[385.93389893 -86.51306915]
[393.85037231 -73.77364349]
[401.19964600 -60.69878387]
[407.96749878 -47.31373596]
[414.14093018 -33.64433289]
[419.70794678 -19.71695900]
[424.65786743 -5.55850172]
[428.98110962 8.80371284]
[432.66931152 23.34195900]
[435.71539307 38.02817917]
[438.11343384 52.83401871]
[439.85882568 67.73090363]
[440.94821167 82.69007111]
[441.37948608 97.68265533]
[441.15179443 112.67971039]
[440.26559448 127.65229034]
[438.72259521 142.57150269]
[436.52575684 157.40852356]
[433.67935181 172.13475037]
[430.18884277 186.72172546]
[426.06097412 201.14131165]
[421.30374146 215.36566162]
[415.92630005 229.36732483]
[409.93902588 243.11927795]
[403.35348511 256.59497070]
[396.18240356 269.76840210]
[388.43960571 282.61410522]
[380.14004517 295.10736084]
[392.25762939 303.94839478]
[404.37521362 312.78942871]
[418.38607788 306.49722290]
[433.66427612 308.06939697]
[446.10009766 317.08303833]
[452.34838867 331.11352539]
[450.72833252 346.38671875]
[441.67575073 358.79425049]
[427.62573242 364.99850464]
[412.35769653 363.33059692]
[399.97860718 354.23916626]
[393.81842041 340.16976929]
[395.53417969 324.90701294]
[383.41659546 316.06597900]
[371.29901123 307.22494507]
[361.93496704 318.94152832]
[352.06533813 330.23550415]
[341.70916748 341.08505249]
[330.88641357 351.46926880]
[319.61798096 361.36807251]
[307.92562866 370.76235962]
[295.83193970 379.63400269]
[283.36026001 387.96588135]
[270.53460693 395.74191284]
[257.37979126 402.94705200]
[243.92118835 409.56747437]
[230.18478394 415.59030151]
[216.19709778 421.00399780]
[201.98510742 425.79803467]
[187.57626343 429.96322632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[126 141]
[127 140]
[128 139]
] def

init

% Start Annotations
126 141 0.16 0.2 colorpair
128 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
126 141 2 gmark
141 cmark
127 140 3 gmark
127 cmark
140 cmark

% End Annotations
showpage
end
%%EOF
