%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:56:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________AAACUUUUAUCUGCUGCGUGUUUAUUCUCUGCUUCACGCUGCUGAUAUUCACCUAUCUGACCCGCAAAUCCCUGUGCGAGCUUCGCUACCGGGAUAAGGAGAGAGAGGUGGCGGCUUUGAUGGCUUACGAAUCCGGUAA_\
) } def
/len { sequence length } bind def

/coor [
[116.77259064 214.48213196]
[107.29326630 226.10720825]
[95.45015717 235.31268311]
[81.84552002 241.63043213]
[67.17120361 244.73916626]
[52.17342377 244.48081970]
[37.61487961 240.86851501]
[24.23591042 234.08595276]
[12.71687603 224.47804260]
[3.64355826 212.53338623]
[-2.52263880 198.85939026]
[-5.46814489 184.15144348]
[-5.04317284 169.15745544]
[-1.26933253 154.63995361]
[5.66146374 141.33717346]
[15.39676476 129.92559814]
[27.44149971 120.98555756]
[41.18315887 114.97167206]
[55.92293549 112.18976593]
[70.91142273 112.78132629]
[84.61752319 106.68684387]
[69.66743469 105.46420288]
[54.71734619 104.24156189]
[39.76725769 103.01892090]
[25.38234138 109.60563660]
[13.32808018 100.85668945]
[-1.62200832 99.63404846]
[-16.00692368 106.22076416]
[-28.06118393 97.47181702]
[-43.01127243 96.24918365]
[-57.96136093 95.02654266]
[-72.91145325 93.80390167]
[-87.86154175 92.58126068]
[-94.77288055 106.12016296]
[-106.34249115 115.97981262]
[-120.80606842 120.65668488]
[-135.95803833 119.43759918]
[-149.48783875 112.50845337]
[-159.33226013 100.92588806]
[-163.99011230 86.45616150]
[-162.75108337 71.30580902]
[-155.80415344 57.78514099]
[-144.20864868 47.95596313]
[-129.73280334 43.31715393]
[-114.58409119 44.57610321]
[-101.07257843 51.54082108]
[-91.25865936 63.14924622]
[-86.63890076 77.63117218]
[-71.68881226 78.85381317]
[-56.73872375 80.07645416]
[-41.78863525 81.29908752]
[-26.83854485 82.52172852]
[-13.52296066 75.84756470]
[-0.39936903 84.68395996]
[14.55071926 85.90660095]
[27.86630440 79.23243713]
[40.98989487 88.06883240]
[55.93998337 89.29147339]
[70.89007568 90.51411438]
[85.84016418 91.73675537]
[93.16133881 84.52011871]
[103.64747620 82.93364716]
[112.75865173 71.01783752]
[121.86983490 59.10203171]
[130.98100281 47.18622589]
[140.09219360 35.27042007]
[149.20336914 23.35461235]
[151.43934631 7.69220543]
[165.31645203 2.28155279]
[174.42762756 -9.63425350]
[183.53880310 -21.55006027]
[181.64669800 -37.01155090]
[191.05647278 -48.96607971]
[205.80830383 -50.67462540]
[214.91947937 -62.59043121]
[210.88166809 -72.57894135]
[211.38337708 -83.25984955]
[216.26512146 -92.68187714]
[224.57342529 -99.15206146]
[234.74635315 -101.53987885]
[244.90684509 -99.47434998]
[254.72976685 -110.81059265]
[264.55267334 -122.14683533]
[274.37557983 -133.48307800]
[284.19848633 -144.81932068]
[287.38821411 -160.31564331]
[301.57028198 -164.86743164]
[311.39318848 -176.20367432]
[321.09994507 -187.63951111]
[330.68957520 -199.17376709]
[340.27920532 -210.70802307]
[349.86883545 -222.24229431]
[355.34558105 -238.28727722]
[372.27963257 -237.46624756]
[376.17852783 -220.96670532]
[361.40307617 -212.65266418]
[351.81347656 -201.11840820]
[342.22384644 -189.58415222]
[332.63421631 -178.04989624]
[330.76507568 -170.85252380]
[322.72943115 -166.38075256]
[312.90652466 -155.04450989]
[310.41940308 -140.35902405]
[295.53472900 -134.99641418]
[285.71182251 -123.66016388]
[275.88891602 -112.32392120]
[266.06600952 -100.98767853]
[256.24310303 -89.65143585]
[259.11407471 -70.43485260]
[246.81237793 -55.00616074]
[226.83529663 -53.47925568]
[217.72412109 -41.56344604]
[219.94177246 -26.87952614]
[210.87149048 -14.66541195]
[195.45460510 -12.43888187]
[186.34342957 -0.52307564]
[177.23225403 11.39273071]
[175.64796448 26.20283890]
[161.11917114 32.46578979]
[152.00799561 44.38159561]
[142.89682007 56.29740143]
[133.78564453 68.21321106]
[124.67446136 80.12901306]
[115.56328583 92.04482269]
[116.02220917 107.03779602]
[125.84512329 118.37404633]
[135.66802979 129.71028137]
[150.55268860 135.07290649]
[153.03981018 149.75839233]
[162.86273193 161.09463501]
[172.68563843 172.43087769]
[182.50854492 183.76712036]
[197.95658875 182.30513000]
[211.29650879 190.23144531]
[217.39880371 204.49824524]
[213.91703796 219.61964417]
[202.19001770 229.78117371]
[186.72700500 231.07550049]
[173.47387695 223.00494385]
[167.52670288 208.67277527]
[171.17230225 193.59002686]
[161.34939575 182.25378418]
[151.52647400 170.91754150]
[141.70356750 159.58129883]
[127.52151489 155.02952576]
[124.33178711 139.53320312]
[114.50888062 128.19696045]
[104.68596649 116.86071014]
[107.87149811 131.51855469]
[117.20799255 143.25865173]
[123.67650604 156.79225159]
[126.94810486 171.43112183]
[126.85640717 186.43084717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 60]
[22 59]
[23 58]
[24 57]
[26 55]
[27 54]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[62 124]
[63 123]
[64 122]
[65 121]
[66 120]
[67 119]
[69 117]
[70 116]
[71 115]
[74 112]
[75 111]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[87 102]
[88 101]
[89 99]
[90 98]
[91 97]
[92 96]
[125 148]
[126 147]
[127 146]
[129 144]
[130 143]
[131 142]
[132 141]
] def

init

% Start Annotations
21 60 0.0 1 colorpair
22 59 0.0 1 colorpair
23 58 0.0 1 colorpair
24 57 0.0 1 colorpair
26 55 0.0 1 colorpair
27 54 0.0 1 colorpair
29 52 0.0 1 colorpair
30 51 0.0 1 colorpair
31 50 0.0 1 colorpair
32 49 0.0 1 colorpair
33 48 0.0 1 colorpair
62 124 0.0 1 colorpair
63 123 0.0 1 colorpair
64 122 0.0 1 colorpair
65 121 0.0 1 colorpair
66 120 0.0 1 colorpair
67 119 0.0 1 colorpair
69 117 0.0 1 colorpair
70 116 0.0 1 colorpair
71 115 0.0 1 colorpair
74 112 0.0 1 colorpair
75 111 0.0 1 colorpair
81 108 0.0 1 colorpair
82 107 0.0 1 colorpair
83 106 0.0 1 colorpair
84 105 0.0 1 colorpair
85 104 0.0 1 colorpair
87 102 0.0 1 colorpair
88 101 0.0 1 colorpair
89 99 0.0 1 colorpair
90 98 0.0 1 colorpair
91 97 0.0 1 colorpair
92 96 0.0 1 colorpair
125 148 0.0 1 colorpair
126 147 0.0 1 colorpair
127 146 0.0 1 colorpair
129 144 0.0 1 colorpair
130 143 0.0 1 colorpair
131 142 0.0 1 colorpair
132 141 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
