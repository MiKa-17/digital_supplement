%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 01:55:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGACGAAAUAUGCCUUAAUGGCAGUCAUCGCACUCUGCAUUACAGUGCUGGGAUUCACACUCCUCGUGAGGGACUCACUCUGUGAGUUCAGCGUCAGGGAGCGUGGUAUUGAGUUUAAGGCAGUUCUCGCUUACGAAUCGAAGA\
) } def
/len { sequence length } bind def

/coor [
[133.47821045 453.89840698]
[142.73361206 441.91442871]
[155.38011169 433.58706665]
[151.62525940 419.06460571]
[146.87367249 413.33728027]
[147.94778442 404.19641113]
[144.49993896 389.59802246]
[139.87014771 383.77178955]
[141.13674927 374.65557861]
[137.99745178 359.98776245]
[134.85815430 345.31994629]
[125.74810791 340.51205444]
[120.71506500 331.27264404]
[121.65455627 320.57205200]
[128.49548340 312.00637817]
[125.97732544 297.21923828]
[123.45916748 282.43212891]
[120.94100952 267.64501953]
[118.42284393 252.85789490]
[115.90468597 238.07077026]
[113.38652039 223.28366089]
[110.86836243 208.49653625]
[97.46006012 202.06571960]
[90.32514954 188.81591797]
[92.38438416 173.72908020]
[103.05571747 162.61921692]
[100.53755951 147.83210754]
[98.01939392 133.04498291]
[95.50123596 118.25786591]
[80.11856079 109.96016693]
[76.36011505 89.99552155]
[62.05568314 85.48074341]
[47.75125122 80.96596527]
[32.26219940 84.19083405]
[22.45391655 72.98160553]
[8.14948273 68.46682739]
[-6.20174980 64.10310364]
[-21.61937141 67.65380859]
[-31.66179657 56.65385437]
[-46.05823517 52.44166183]
[-60.45467377 48.22946930]
[-74.85111237 44.01727295]
[-91.75080872 45.37249374]
[-97.73136139 29.50840569]
[-84.14283752 19.36995506]
[-70.63891602 29.62083626]
[-56.24248123 33.83303070]
[-41.84604263 38.04522324]
[-27.44960403 42.25741577]
[-13.06171227 38.40542603]
[-1.98955703 49.70666122]
[5.36312294 48.55857086]
[12.66425896 54.16239548]
[26.96869087 58.67716980]
[41.43459702 55.12937927]
[52.26602936 66.66153717]
[66.57045746 71.17631531]
[80.87489319 75.69108582]
[94.56086731 69.55153656]
[100.70041656 55.86556244]
[106.83996582 42.17958832]
[112.97951508 28.49361229]
[119.11906433 14.80763531]
[125.25861359 1.12165940]
[131.39816284 -12.56431675]
[137.53770447 -26.25029182]
[143.67726135 -39.93626785]
[149.81680298 -53.62224579]
[148.40576172 -69.38040161]
[160.67457581 -77.82584381]
[166.66950989 -91.57578278]
[172.51914978 -105.38815308]
[178.36878967 -119.20053101]
[176.62583923 -134.92543030]
[188.71386719 -143.62765503]
[194.56350708 -157.44003296]
[200.41314697 -171.25241089]
[206.26280212 -185.06478882]
[212.11244202 -198.87715149]
[217.96208191 -212.68952942]
[223.81172180 -226.50190735]
[229.66137695 -240.31428528]
[230.27062988 -257.25726318]
[246.72015381 -261.36212158]
[255.21824646 -246.69177246]
[243.47373962 -234.46463013]
[237.62409973 -220.65226746]
[231.77445984 -206.83988953]
[225.92481995 -193.02751160]
[220.07516479 -179.21513367]
[214.22552490 -165.40277100]
[208.37588501 -151.59039307]
[202.52624512 -137.77801514]
[204.68760681 -123.04106903]
[192.18116760 -113.35088348]
[186.33152771 -99.53851318]
[180.48188782 -85.72613525]
[180.77151489 -78.29000092]
[174.36054993 -71.68629456]
[176.21073914 -56.90704727]
[163.50279236 -47.48269653]
[157.36323547 -33.79671860]
[151.22369385 -20.11074448]
[145.08413696 -6.42476797]
[138.94459534 7.26120806]
[132.80503845 20.94718361]
[126.66548920 34.63315964]
[120.52593994 48.31913757]
[114.38639069 62.00511169]
[108.24684906 75.69108582]
[122.06072235 97.20696259]
[110.28835297 115.73970795]
[112.80651855 130.52682495]
[115.32467651 145.31394958]
[117.84283447 160.10105896]
[131.58992004 167.05259705]
[138.52667236 180.60748291]
[136.17947388 195.47201538]
[125.65547943 205.97837830]
[128.17364502 220.76550293]
[130.69180298 235.55261230]
[133.20996094 250.33973694]
[135.72811890 265.12686157]
[138.24629211 279.91397095]
[140.76445007 294.70108032]
[143.28260803 309.48822021]
[156.85696411 324.33081055]
[149.52597046 342.18066406]
[152.66526794 356.84848022]
[155.80455017 371.51629639]
[159.09831238 386.15017700]
[162.54614258 400.74856567]
[166.14768982 415.30978394]
[169.90254211 429.83221436]
[185.00045776 430.98611450]
[198.90467834 436.98205566]
[210.10696411 447.16967773]
[217.39218140 460.44387817]
[219.97007751 475.36477661]
[217.56101990 490.31387329]
[210.42634583 503.66958618]
[199.33993530 513.98315430]
[185.50439453 520.13592529]
[170.42048645 521.46044922]
[155.72439575 517.81304932]
[143.01025391 509.58935547]
[133.65718079 497.68142700]
[128.67973328 483.38092041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 134]
[4 133]
[6 132]
[7 131]
[9 130]
[10 129]
[11 128]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[26 115]
[27 114]
[28 113]
[29 112]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 51]
[39 49]
[40 48]
[41 47]
[42 46]
[59 110]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[68 101]
[70 99]
[71 97]
[72 96]
[73 95]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% Start Annotations
3 134 0.0 1 colorpair
4 133 0.0 1 colorpair
6 132 0.0 1 colorpair
7 131 0.0 1 colorpair
9 130 0.0 1 colorpair
10 129 0.0 1 colorpair
11 128 0.0 1 colorpair
15 126 0.0 0.6 colorpair
16 125 0.0 1 colorpair
17 124 0.0 1 colorpair
18 123 0.0 1 colorpair
19 122 0.0 1 colorpair
20 121 0.0 1 colorpair
21 120 0.0 1 colorpair
22 119 0.0 1 colorpair
26 115 0.0 1 colorpair
27 114 0.0 1 colorpair
28 113 0.0 1 colorpair
29 112 0.0 1 colorpair
31 58 0.0 1 colorpair
32 57 0.0 1 colorpair
33 56 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 51 0.0 1 colorpair
39 49 0.0 1 colorpair
40 48 0.16 1 colorpair
41 47 0.0 1 colorpair
42 46 0.0 0.6 colorpair
59 110 0.0 1 colorpair
60 109 0.0 1 colorpair
61 108 0.0 1 colorpair
62 107 0.0 1 colorpair
63 106 0.0 0.6 colorpair
64 105 0.0 1 colorpair
65 104 0.0 1 colorpair
66 103 0.16 1 colorpair
67 102 0.0 1 colorpair
68 101 0.0 1 colorpair
70 99 0.0 1 colorpair
71 97 0.0 1 colorpair
72 96 0.0 1 colorpair
73 95 0.0 0.6 colorpair
75 93 0.16 1 colorpair
76 92 0.0 1 colorpair
77 91 0.0 1 colorpair
78 90 0.16 1 colorpair
79 89 0.0 1 colorpair
80 88 0.0 1 colorpair
81 87 0.0 1 colorpair
82 86 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 126 1 gmark
48 cmark
42 46 1 gmark
63 106 1 gmark
66 cmark
73 95 1 gmark
93 cmark
78 cmark

% End Annotations
showpage
end
%%EOF
