%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:05:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUGCCUGACAAACGGAGCGUAUUAAAACUGAUCGUUAUUUGUGCCACGGUUAUAUCAUUGGCAUGGAUAACACGCAGCCAGCUUUGCGAGCUGCGCAUCCGAUCGGGCAACACGGAGGUUGCGGCUAUUCUGGCUUACGAAUCCGAAC__\
) } def
/len { sequence length } bind def

/coor [
[93.79924774 345.69461060]
[81.17963409 354.01547241]
[66.66758728 358.24536133]
[51.55352020 358.00817871]
[37.18135452 353.32498169]
[24.82905579 344.61221313]
[15.59498501 332.64462280]
[10.30022812 318.48635864]
[9.41559219 303.39633179]
[13.01973629 288.71633911]
[20.79218483 275.75177002]
[32.04181290 265.65536499]
[45.76831818 259.32492065]
[60.75114059 257.32333374]
[63.22006226 242.52790833]
[65.68898010 227.73249817]
[68.15789795 212.93707275]
[61.11147690 196.89430237]
[72.85601807 182.74964905]
[75.01863861 167.90637207]
[77.18125153 153.06307983]
[79.34386444 138.21980286]
[71.18209839 125.90639496]
[68.49000549 112.92214966]
[70.66838074 101.35359955]
[76.41074371 92.78175354]
[83.97828674 88.07077026]
[91.52719116 87.28292084]
[97.43557739 89.72805023]
[92.56508636 75.54079437]
[87.69459534 61.35353470]
[82.82409668 47.16627884]
[77.95360565 32.97901917]
[73.08311462 18.79175949]
[64.24127197 6.67475367]
[52.21628571 -2.29183316]
[40.19129944 -11.25841999]
[28.16631126 -20.22500610]
[16.14132309 -29.19159317]
[4.11633635 -38.15818024]
[-7.90865135 -47.12476730]
[-19.93363953 -56.09135437]
[-31.95862579 -65.05793762]
[-43.98361206 -74.02452850]
[-56.00860214 -82.99111176]
[-68.03359222 -91.95769501]
[-80.05857849 -100.92428589]
[-95.49608612 -98.84556580]
[-107.56340027 -108.11026764]
[-109.45000458 -122.84037781]
[-125.05107117 -120.31407928]
[-137.82000732 -129.62696838]
[-140.18122864 -145.25387573]
[-130.73385620 -157.92362976]
[-115.08285522 -160.11949158]
[-102.51368713 -150.53871155]
[-100.48341370 -134.86537170]
[-85.82735443 -137.26023865]
[-73.50457001 -128.33813477]
[-71.09198761 -112.94927216]
[-59.06700134 -103.98268890]
[-47.04201508 -95.01609802]
[-35.01702881 -86.04951477]
[-22.99204063 -77.08292389]
[-10.96705246 -68.11634064]
[1.05793536 -59.14975357]
[13.08292294 -50.18316650]
[25.10791016 -41.21657944]
[37.13289642 -32.24999237]
[49.15788651 -23.28340721]
[61.18287277 -14.31682014]
[73.20786285 -5.35023403]
[73.11188507 -9.66620350]
[73.76151276 -14.02654648]
[79.21413422 -28.00041199]
[84.66675568 -41.97427750]
[90.11936951 -55.94814682]
[95.57199097 -69.92201233]
[101.02461243 -83.89588165]
[94.92232513 -98.22765350]
[100.65111542 -112.32146454]
[114.35188293 -118.05074310]
[119.80450439 -132.02461243]
[119.92943573 -148.97810364]
[136.25495911 -153.55123901]
[145.16873169 -139.12969971]
[133.77836609 -126.57199097]
[128.32574463 -112.59812927]
[134.52539062 -99.10368347]
[129.19473267 -84.85452271]
[114.99847412 -78.44326019]
[109.54586029 -64.46939087]
[104.09323883 -50.49552536]
[98.64061737 -36.52165985]
[93.18799591 -22.54779243]
[87.73538208 -8.57392693]
[101.00628662 -15.56557274]
[115.11907959 -10.48334122]
[120.88555908 3.36395693]
[114.55143738 16.96097565]
[100.24057007 21.45531082]
[87.27037048 13.92126751]
[92.14086914 28.10852623]
[97.01136017 42.29578400]
[101.88185120 56.48304367]
[106.75234222 70.67030334]
[111.62283325 84.85755920]
[123.55451965 93.94793701]
[138.52569580 94.87741852]
[153.49687195 95.80690002]
[168.46804810 96.73637390]
[183.43922424 97.66585541]
[195.11814880 87.01794434]
[210.90155029 87.83043671]
[221.42538452 99.62129974]
[220.44606018 115.39521790]
[208.54460144 125.79380798]
[192.78192139 124.64777374]
[182.50973511 112.63703156]
[167.53855896 111.70755005]
[152.56738281 110.77806854]
[137.59620667 109.84858704]
[122.62503815 108.91910553]
[117.31711578 122.94857788]
[129.15422058 132.16177368]
[140.99133301 141.37495422]
[152.82844543 150.58815002]
[164.66554260 159.80134583]
[180.87858582 164.75852966]
[180.60334778 181.71023560]
[164.23791504 186.13845825]
[155.45236206 171.63844299]
[143.61524963 162.42526245]
[131.77813721 153.21206665]
[119.94103241 143.99887085]
[108.10392761 134.78569031]
[94.18714905 140.38241577]
[92.02453613 155.22570801]
[89.86192322 170.06898499]
[87.69930267 184.91227722]
[94.78518677 195.73904419]
[92.63743591 208.09146118]
[82.95331573 215.40599060]
[80.48439789 230.20141602]
[78.01548004 244.99682617]
[75.54656219 259.79223633]
[89.06765747 266.55029297]
[99.99493408 276.99475098]
[107.35672760 290.19683838]
[110.49845123 304.98266602]
[109.14073181 320.03750610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 146]
[15 145]
[16 144]
[17 143]
[19 140]
[20 139]
[21 138]
[22 137]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[50 57]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[82 88]
[83 87]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[124 136]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% Start Annotations
14 146 0.0 1 colorpair
15 145 0.0 1 colorpair
16 144 0.0 1 colorpair
17 143 0.0 1 colorpair
19 140 0.0 1 colorpair
20 139 0.0 1 colorpair
21 138 0.0 1 colorpair
22 137 0.0 1 colorpair
29 107 0.0 1 colorpair
30 106 0.0 1 colorpair
31 105 0.0 1 colorpair
32 104 0.0 1 colorpair
33 103 0.0 1 colorpair
34 102 0.0 1 colorpair
35 72 0.0 1 colorpair
36 71 0.0 1 colorpair
37 70 0.0 1 colorpair
38 69 0.0 1 colorpair
39 68 0.0 1 colorpair
40 67 0.0 1 colorpair
41 66 0.0 1 colorpair
42 65 0.0 1 colorpair
43 64 0.0 1 colorpair
44 63 0.0 1 colorpair
45 62 0.0 1 colorpair
46 61 0.0 1 colorpair
47 60 0.0 1 colorpair
50 57 0.0 1 colorpair
74 96 0.0 1 colorpair
75 95 0.0 1 colorpair
76 94 0.0 1 colorpair
77 93 0.0 1 colorpair
78 92 0.0 1 colorpair
79 91 0.0 1 colorpair
82 88 0.0 1 colorpair
83 87 0.0 1 colorpair
108 123 0.0 1 colorpair
109 122 0.0 1 colorpair
110 121 0.0 1 colorpair
111 120 0.0 1 colorpair
112 119 0.0 1 colorpair
124 136 0.0 1 colorpair
125 135 0.0 1 colorpair
126 134 0.0 1 colorpair
127 133 0.0 1 colorpair
128 132 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
