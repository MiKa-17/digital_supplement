%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 01:58:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACCUGAUGAUGUUUAGGCAUGCAGACGGCCUCGUUGGUUAAUUGAAAA_AUUACCUUCGGGGCUUUCUUCUUUCUGCCUCAC__CAUAGCUGCAAAAC_UGCCGACAGCAUGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[81.76248932 263.15612793]
[91.50491333 250.40997314]
[90.85958099 235.42385864]
[79.74470520 225.57524109]
[78.87676239 210.38639832]
[89.28225708 198.79486084]
[88.63692474 183.80876160]
[87.99159241 168.82264709]
[87.34626007 153.83653259]
[86.70092010 138.85041809]
[86.05558777 123.86431122]
[79.43719482 137.32524109]
[74.06363678 151.32971191]
[65.45047760 163.61032104]
[54.11324310 173.43208313]
[40.73047256 180.20715332]
[26.10315323 183.53002930]
[11.10674381 183.20182800]
[-3.36119699 179.24218750]
[-16.43474197 171.88810730]
[-27.33142281 161.57975769]
[-35.39905548 148.93406677]
[-40.15478134 134.70793152]
[-41.31396484 119.75278473]
[-38.80722427 104.96372223]
[-32.78459549 91.22589874]
[-23.60653877 79.36152649]
[-11.82237530 70.08071136]
[1.86259794 63.93893051]
[16.62931442 61.30376816]
[31.59396553 62.33294678]
[45.86089706 66.96486664]
[58.57621002 74.92230225]
[68.97862244 85.72864532]
[82.77256012 91.62163544]
[73.49249268 79.83688354]
[64.21241760 68.05213928]
[49.59583664 61.99688339]
[47.80064774 47.21085739]
[38.52057648 35.42610931]
[29.24050522 23.64136124]
[19.96043396 11.85661316]
[10.68036270 0.07186532]
[1.40029156 -11.71288204]
[-7.87977934 -23.49763107]
[-23.32682991 -25.50421906]
[-32.57026291 -37.58782959]
[-30.56209183 -52.30186462]
[-39.84216309 -64.08660889]
[-49.12223434 -75.87136078]
[-63.74515152 -71.71940613]
[-78.84326935 -73.48442078]
[-92.11423492 -80.89723969]
[-101.53432465 -92.82746887]
[-105.66703033 -107.45584106]
[-103.88216400 -122.55162048]
[-96.45188904 -135.81282043]
[-84.50927734 -145.21720886]
[-69.87548828 -149.33067322]
[-54.78206253 -147.52593994]
[-41.53064728 -140.07823181]
[-32.14198303 -128.12326050]
[-28.04776955 -113.48406982]
[-29.87235069 -98.39303589]
[-37.33748627 -85.15142822]
[-28.05741501 -73.36668396]
[-18.77734375 -61.58193588]
[-4.00266361 -60.08380127]
[5.57652664 -48.26458740]
[3.90496826 -32.77770233]
[13.18503952 -20.99295425]
[22.46511078 -9.20820618]
[31.74518204 2.57654214]
[41.02525330 14.36128998]
[50.30532455 26.14603806]
[59.58539581 37.93078613]
[73.53820038 43.14311981]
[75.99716949 58.77206802]
[85.27723694 70.55681610]
[94.55730438 82.34156036]
[91.36331940 67.68556213]
[98.82169342 54.67123795]
[113.08166504 50.01791763]
[126.78076172 56.12812042]
[132.84613037 69.84713745]
[128.14619446 84.09180450]
[115.10551453 91.50788116]
[130.07426453 90.54025269]
[145.04302979 89.57262421]
[160.01177979 88.60499573]
[174.98054504 87.63737488]
[189.94929504 86.66974640]
[204.91806030 85.70211792]
[208.55989075 72.68502045]
[216.03985596 61.45380783]
[226.61129761 53.10406876]
[239.22680664 48.44502640]
[252.64205933 47.92114258]
[265.53848267 51.56973648]
[276.65289307 59.01872253]
[284.90121460 69.52449799]
[289.48419189 82.04615784]
[304.48071289 81.72341919]
[319.47723389 81.40068054]
[334.47375488 81.07793427]
[349.47030640 80.75519562]
[361.56143188 70.21083069]
[377.31756592 73.23139954]
[384.65194702 87.49978638]
[377.93823242 102.07049561]
[362.32662964 105.76613617]
[349.79302979 95.75172424]
[334.79650879 96.07446289]
[319.79998779 96.39720154]
[304.80346680 96.71994781]
[289.80691528 97.04268646]
[284.17327881 112.64559937]
[272.97686768 124.93558502]
[257.89877319 132.02584839]
[241.21884155 132.81343079]
[225.47093201 127.15067291]
[213.05807495 115.87197113]
[205.88568115 100.67087555]
[190.91693115 101.63850403]
[175.94816589 102.60613251]
[160.97941589 103.57375336]
[146.01065063 104.54138184]
[131.04190063 105.50901031]
[116.07313538 106.47663879]
[128.17234802 115.34282684]
[125.56207275 130.11396790]
[111.15698242 134.29647827]
[101.04170227 123.21897888]
[101.68703461 138.20509338]
[102.33236694 153.19119263]
[102.97769928 168.17730713]
[103.62303162 183.16342163]
[104.26837158 198.14953613]
[115.63180542 208.80364990]
[116.07278442 224.01087952]
[105.84568787 234.77853394]
[106.49102020 249.76463318]
[117.29309845 261.62612915]
[114.61224365 277.44360352]
[100.50496674 285.08325195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[6 138]
[7 137]
[8 136]
[9 135]
[10 134]
[11 133]
[35 80]
[36 79]
[37 78]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[48 67]
[49 66]
[50 65]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[92 124]
[93 123]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% Start Annotations
2 142 0.0 1 colorpair
3 141 0.0 1 colorpair
6 138 0.0 1 colorpair
7 137 0.0 1 colorpair
8 136 0.0 1 colorpair
9 135 0.0 1 colorpair
10 134 0.0 1 colorpair
11 133 0.0 1 colorpair
35 80 0.0 1 colorpair
36 79 0.0 1 colorpair
37 78 0.0 0.6 colorpair
39 76 0.16 1 colorpair
40 75 0.0 1 colorpair
41 74 0.0 1 colorpair
42 73 0.0 1 colorpair
43 72 0.0 1 colorpair
44 71 0.0 1 colorpair
45 70 0.0 1 colorpair
48 67 0.0 1 colorpair
49 66 0.0 1 colorpair
50 65 0.0 1 colorpair
87 129 0.0 1 colorpair
88 128 0.0 1 colorpair
89 127 0.0 0.6 colorpair
90 126 0.0 1 colorpair
91 125 0.0 0.6 colorpair
92 124 0.16 1 colorpair
93 123 0.16 1 colorpair
102 116 0.16 1 colorpair
103 115 0.16 0.6 colorpair
104 114 0.16 1 colorpair
105 113 0.16 1 colorpair
106 112 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
37 78 1 gmark
39 cmark
89 127 1 gmark
91 125 1 gmark
92 cmark
93 cmark
123 cmark
102 cmark
116 cmark
103 115 1 gmark
103 cmark
115 cmark
104 cmark
114 cmark
105 cmark
106 112 1 gmark

% End Annotations
showpage
end
%%EOF
