%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 01:56:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AAACUGCCAAAAUAUGCCCUUGUGGCGUGUGUAGUGAU_GUGUGUUUCACGCUGCUGGGAUUCACGUUACUGACACGAAAUUCGCUGUGCGAGUUAAGUAUCAAAGACCGUGAUAGGGAGGUUACGGCUGUUCUGGCUUACGAAUCCGAU___\
) } def
/len { sequence length } bind def

/coor [
[94.88863373 453.28698730]
[79.89932251 452.75173950]
[64.94622803 451.58081055]
[50.05631256 449.77630615]
[35.25639343 447.34146118]
[20.57314682 444.28070068]
[6.03303242 440.59951782]
[-8.33774662 436.30456543]
[-22.51329422 431.40356445]
[-36.46806335 425.90536499]
[-50.17691040 419.81982422]
[-63.61512756 413.15798950]
[-76.75849915 405.93179321]
[-89.58334351 398.15429688]
[-102.06654358 389.83950806]
[-114.18560028 381.00241089]
[-125.91869354 371.65893555]
[-137.24465942 361.82589722]
[-148.14309692 351.52105713]
[-158.59436035 340.76293945]
[-168.57962036 329.57095337]
[-178.08088684 317.96527100]
[-187.08102417 305.96679688]
[-195.56382751 293.59713745]
[-203.51400757 280.87863159]
[-210.91723633 267.83416748]
[-217.76016235 254.48724365]
[-224.03047180 240.86192322]
[-229.71685791 226.98277283]
[-234.80906677 212.87477112]
[-239.29794312 198.56338501]
[-243.17536926 184.07437134]
[-246.43437195 169.43383789]
[-249.06907654 154.66819763]
[-251.07473755 139.80403137]
[-252.44773865 124.86814117]
[-253.18560791 109.88743591]
[-253.28700256 94.88891602]
[-252.75175476 79.89960480]
[-251.58084106 64.94651031]
[-249.77633667 50.05659103]
[-247.34152222 35.25667191]
[-244.28077698 20.57342339]
[-240.59960938 6.03330612]
[-236.30465698 -8.33747673]
[-231.40367126 -22.51302719]
[-225.90545654 -36.46780396]
[-219.81996155 -50.17665482]
[-213.15811157 -63.61487579]
[-205.93193054 -76.75825500]
[-198.15444946 -89.58309937]
[-189.83967590 -102.06630707]
[-181.00259399 -114.18537903]
[-171.65911865 -125.91847229]
[-161.82609558 -137.24444580]
[-151.52124023 -148.14288330]
[-140.76313782 -158.59416199]
[-129.57116699 -168.57943726]
[-117.96548462 -178.08070374]
[-105.96701050 -187.08085632]
[-93.59738159 -195.56367493]
[-80.87886810 -203.51385498]
[-67.83440399 -210.91709900]
[-54.48749161 -217.76004028]
[-40.86218262 -224.03036499]
[-26.98303032 -229.71675110]
[-12.87504482 -234.80897522]
[1.43634772 -239.29785156]
[15.92535877 -243.17529297]
[30.56587791 -246.43431091]
[45.33152008 -249.06903076]
[60.19568253 -251.07470703]
[75.13156891 -252.44770813]
[90.11227417 -253.18559265]
[105.11080170 -253.28700256]
[120.10011292 -252.75177002]
[135.05320740 -251.58085632]
[149.94313049 -249.77638245]
[164.74305725 -247.34156799]
[179.42630005 -244.28083801]
[193.96641541 -240.59968567]
[208.33720398 -236.30474854]
[222.51275635 -231.40376282]
[236.46754456 -225.90556335]
[250.17639160 -219.82006836]
[256.83874512 -233.25930786]
[263.50109863 -246.69854736]
[270.16348267 -260.13778687]
[271.78131104 -277.01434326]
[288.44622803 -280.13162231]
[296.05499268 -264.98095703]
[283.60269165 -253.47541809]
[276.94033813 -240.03617859]
[270.27798462 -226.59695435]
[263.61563110 -213.15771484]
[276.75900269 -205.93151855]
[289.58383179 -198.15399170]
[302.06701660 -189.83918762]
[314.18606567 -181.00207520]
[325.91912842 -171.65856934]
[337.24508667 -161.82551575]
[348.14349365 -151.52064514]
[358.59475708 -140.76251221]
[368.57998657 -129.57051086]
[378.08123779 -117.96481323]
[387.08135986 -105.96632385]
[395.56414795 -93.59666443]
[403.51431274 -80.87814331]
[410.91751099 -67.83365631]
[417.76040649 -54.48672867]
[424.03070068 -40.86140060]
[429.71707153 -26.98223686]
[434.80926514 -12.87423897]
[439.29809570 1.43716466]
[443.17550659 15.92618561]
[446.43447876 30.56671143]
[449.06915283 45.33236313]
[451.07479858 60.19652557]
[452.44778442 75.13242340]
[453.18560791 90.11312866]
[453.28698730 105.11164856]
[452.75173950 120.10095978]
[451.58078003 135.05404663]
[449.77624512 149.94396973]
[447.34143066 164.74388123]
[444.28063965 179.42712402]
[440.59945679 193.96723938]
[436.30447388 208.33801270]
[431.40347290 222.51356506]
[425.90524292 236.46832275]
[419.81970215 250.17716980]
[413.15783691 263.61538696]
[405.93164062 276.75875854]
[398.15414429 289.58358765]
[389.83935547 302.06677246]
[381.00225830 314.18582153]
[371.65875244 325.91891479]
[361.82571411 337.24487305]
[351.52084351 348.14328003]
[340.76272583 358.59454346]
[329.57073975 368.57980347]
[317.96502686 378.08105469]
[305.96655273 387.08117676]
[293.59689331 395.56399536]
[280.87838745 403.51416016]
[267.83389282 410.91735840]
[254.48698425 417.76028442]
[240.86166382 424.03057861]
[226.98249817 429.71694946]
[212.87451172 434.80917358]
[198.56311035 439.29800415]
[184.07409668 443.17544556]
[169.43356323 446.43441772]
[154.66792297 449.06912231]
[139.80375671 451.07476807]
[124.86785889 452.44775391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% Start Annotations
85 95 0.0 0.2 colorpair
86 94 0.0 0.2 colorpair
87 93 0.16 0.2 colorpair
88 92 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
85 95 2 gmark
86 94 2 gmark
87 93 2 gmark
87 cmark
93 cmark
88 cmark

% End Annotations
showpage
end
%%EOF
