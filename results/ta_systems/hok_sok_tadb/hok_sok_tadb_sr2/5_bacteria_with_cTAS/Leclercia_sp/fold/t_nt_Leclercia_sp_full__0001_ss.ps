%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:56:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAAGAGGCUAUUCUGGAUGUGUCUAGCA_UCAGGAUGCCUCGUUGGUUAAUUGAAAAAUUACCUUCGGGGCUUUCUUCUUUCUGCCUCACAACAACCAUAACAAACCCAUAACGUCAUGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[218.59097290 257.88861084]
[202.35308838 243.86592102]
[190.75505066 225.80203247]
[184.75596619 205.17817688]
[184.85546875 183.68778992]
[191.05220032 163.09744263]
[178.17304993 155.40798950]
[165.29391479 147.71853638]
[152.41476440 140.02909851]
[139.53561401 132.33964539]
[126.64031982 143.57994080]
[110.75686646 149.93203735]
[93.66685486 150.68342590]
[77.28721619 145.74983215]
[63.45518494 135.68464661]
[51.30059052 144.47474670]
[39.14599228 153.26484680]
[26.99139786 162.05494690]
[14.83680248 170.84504700]
[8.63124275 186.02473450]
[-7.65188265 187.97200012]
[-17.26188850 174.68367004]
[-10.31282711 159.82963562]
[6.04670525 158.69044495]
[18.20130157 149.90034485]
[30.35589600 141.11024475]
[42.51049042 132.32015991]
[54.66508865 123.53005219]
[50.84486008 113.88128662]
[49.05369568 103.65951538]
[49.36553192 93.28668976]
[51.76749420 83.19097137]
[56.16043472 73.78911591]
[62.36301804 65.46920776]
[52.91894531 53.81547928]
[43.47486877 42.16174698]
[34.03079605 30.50801468]
[19.33091164 24.65788841]
[17.32898712 9.89843178]
[7.88491440 -1.75530040]
[-1.55915916 -13.40903282]
[-11.00323296 -25.06276512]
[-20.44730568 -36.71649551]
[-29.89138031 -48.37022781]
[-45.36499786 -50.16046143]
[-54.77661896 -62.11353683]
[-52.97454453 -76.85423279]
[-62.41862106 -88.50796509]
[-71.86269379 -100.16169739]
[-79.76078796 -104.90639496]
[-81.38283539 -112.17675018]
[-90.56862640 -124.03512573]
[-99.75442505 -135.89350891]
[-108.94021606 -147.75189209]
[-124.31612396 -153.45394897]
[-126.79883575 -169.66407776]
[-113.83434296 -179.70668030]
[-98.75940704 -173.25080872]
[-97.08183289 -156.93768311]
[-87.89604187 -145.07929993]
[-78.71025085 -133.22091675]
[-69.52445221 -121.36254120]
[-60.20896149 -109.60577393]
[-50.76488876 -97.95204163]
[-41.32081223 -86.29830933]
[-26.52661514 -85.00707245]
[-16.78297043 -73.32306671]
[-18.23764801 -57.81430435]
[-8.79357433 -46.16057205]
[0.65049958 -34.50683975]
[10.09457302 -22.85310555]
[19.53864670 -11.19937420]
[28.98271942 0.45435825]
[43.00710297 5.47093058]
[45.68452835 21.06394005]
[55.12860107 32.71767426]
[64.57267761 44.37140656]
[74.01674652 56.02513885]
[88.76576996 50.17320251]
[104.59896851 49.12989807]
[119.98834229 52.99591446]
[133.44869995 61.39815140]
[143.68101501 73.52573395]
[149.69781494 88.20826721]
[150.91842651 104.02879333]
[147.22506714 119.46050262]
[160.10421753 127.14994812]
[172.98335266 134.83940125]
[185.86250305 142.52883911]
[198.74165344 150.21829224]
[205.14424133 142.70501709]
[212.47651672 136.09884644]
[220.61114502 130.51383972]
[229.40695190 126.04624939]
[238.71136475 122.77300262]
[248.36311340 120.75028992]
[258.19491577 120.01263428]
[268.03646851 120.57228851]
[277.71737671 122.41904449]
[287.07006836 125.52040863]
[295.93273926 129.82217407]
[304.15216064 135.24938965]
[311.58627319 141.70762634]
[318.10662842 149.08464050]
[323.60073853 157.25233459]
[327.97387695 166.06898499]
[331.15075684 175.38166809]
[333.07690430 185.02893066]
[333.71942139 194.84361267]
[333.06771851 204.65571594]
[331.13357544 214.29533386]
[327.95104980 223.59562683]
[323.57571411 232.39572144]
[318.08380127 240.54344177]
[311.57086182 247.89796448]
[321.01492310 259.55169678]
[328.91302490 264.29638672]
[330.53506470 271.56674194]
[345.10290527 277.73837280]
[346.78012085 292.53823853]
[355.96591187 304.39663696]
[365.15170288 316.25500488]
[374.33749390 328.11340332]
[383.52328491 339.97177124]
[392.70907593 351.83016968]
[408.37908936 355.26965332]
[415.33050537 369.72848511]
[408.23077393 384.11505127]
[392.52621460 387.39321899]
[380.26403809 377.04827881]
[380.85070801 361.01596069]
[371.66491699 349.15756226]
[362.47912598 337.29919434]
[353.29333496 325.44079590]
[344.10751343 313.58242798]
[334.92172241 301.72402954]
[321.01092529 296.40060425]
[318.67669678 280.75253296]
[309.36120605 268.99575806]
[299.91711426 257.34204102]
[280.53543091 266.43054199]
[259.35961914 269.64779663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[34 78]
[35 77]
[36 76]
[37 75]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[47 65]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
[115 140]
[116 139]
[118 138]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% Start Annotations
6 90 0.0 1 colorpair
7 89 0.16 1 colorpair
8 88 0.0 1 colorpair
9 87 0.16 1 colorpair
10 86 0.0 1 colorpair
15 28 0.0 1 colorpair
16 27 0.16 1 colorpair
17 26 0.16 1 colorpair
18 25 0.16 1 colorpair
19 24 0.0 1 colorpair
34 78 0.16 1 colorpair
35 77 0.16 1 colorpair
36 76 0.0 1 colorpair
37 75 0.16 1 colorpair
39 73 0.16 1 colorpair
40 72 0.16 1 colorpair
41 71 0.0 0.6 colorpair
42 70 0.0 0.6 colorpair
43 69 0.0 1 colorpair
44 68 0.0 0.6 colorpair
47 65 0.0 0.6 colorpair
48 64 0.0 0.6 colorpair
49 63 0.0 0.6 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.16 1 colorpair
115 140 0.0 0.6 colorpair
116 139 0.0 1 colorpair
118 138 0.0 1 colorpair
120 136 0.0 1 colorpair
121 135 0.16 1 colorpair
122 134 0.0 1 colorpair
123 133 0.0 1 colorpair
124 132 0.0 0.6 colorpair
125 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 cmark
89 cmark
87 cmark
27 cmark
17 cmark
26 cmark
18 cmark
25 cmark
34 cmark
78 cmark
35 cmark
77 cmark
37 cmark
39 cmark
73 cmark
40 cmark
41 71 1 gmark
42 70 1 gmark
44 68 1 gmark
47 65 1 gmark
48 64 1 gmark
49 63 1 gmark
54 cmark
59 cmark
115 140 1 gmark
121 cmark
135 cmark
124 132 1 gmark

% End Annotations
showpage
end
%%EOF
