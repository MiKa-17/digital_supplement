%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCCAUACUGGUGUUGACUAGACAUACAGUGGGCCUCGUGGGUUAAUGAAAAUUAACUACGGGGCUUUCUGCUUUCUGCCACACAACAUCCAAACCACUCAAACAUCAUGAGGCAAAAAAGCCUCAAGCGCCG\
) } def
/len { sequence length } bind def

/coor [
[122.32186127 122.84843445]
[113.70910645 128.85095215]
[103.61555481 131.73712158]
[93.13146973 131.19519043]
[83.38928986 127.28371429]
[75.44131470 120.42517853]
[61.97900009 127.04076385]
[48.51668167 133.65635681]
[35.05436707 140.27194214]
[21.59205055 146.88752747]
[8.12973309 153.50312805]
[1.74456275 160.15037537]
[-5.70701504 160.11238098]
[-19.31337929 166.42640686]
[-32.91974258 172.74041748]
[-46.52610779 179.05444336]
[-60.13246918 185.36846924]
[-73.66764832 191.83366394]
[-87.12996674 198.44926453]
[-100.59228516 205.06484985]
[-114.05460358 211.68043518]
[-127.51691437 218.29603577]
[-134.03501892 232.95529175]
[-149.59574890 236.85954285]
[-162.26225281 227.01376343]
[-162.31787109 210.97080994]
[-149.71994019 201.03744507]
[-134.13250732 204.83370972]
[-120.67018890 198.21812439]
[-107.20787048 191.60253906]
[-93.74555969 184.98693848]
[-80.28324127 178.37135315]
[-75.62982178 172.55128479]
[-66.44649506 171.76210022]
[-52.84012604 165.44807434]
[-39.23376465 159.13406372]
[-25.62739944 152.82003784]
[-12.02103615 146.50601196]
[1.51414347 140.04080200]
[14.97646046 133.42521667]
[28.43877602 126.80963135]
[41.90109253 120.19403839]
[55.36341095 113.57844543]
[68.82572937 106.96286011]
[68.06016541 99.59525299]
[69.01217651 92.24942017]
[71.63056183 85.32036591]
[75.77451324 79.18071747]
[67.01189423 67.00629425]
[58.24928284 54.83187103]
[49.48666763 42.65744781]
[40.72405243 30.48302650]
[31.96143913 18.30860329]
[23.19882393 6.13417959]
[8.03318977 -0.10565928]
[6.12270927 -16.39314270]
[19.43272018 -25.97310257]
[34.27102280 -18.99049950]
[35.37324905 -2.62843513]
[44.13586044 9.54598808]
[52.89847565 21.72041130]
[61.66109085 33.89483643]
[70.42370605 46.06925964]
[79.18631744 58.24368286]
[87.94893646 70.41810608]
[113.12204742 70.87734985]
[130.14277649 89.42975616]
[145.06744385 87.92831421]
[159.99211121 86.42687988]
[172.94850159 77.34709930]
[186.38632202 83.77159882]
[201.31098938 82.27016449]
[216.23565674 80.76873016]
[231.16032410 79.26729584]
[239.03533936 66.02756500]
[253.03269958 60.03363800]
[267.70202637 63.39147568]
[277.46438599 74.60906219]
[292.38906860 73.10762787]
[307.31372070 71.60619354]
[322.23840332 70.10475159]
[337.16305542 68.60331726]
[351.80413818 57.49734116]
[367.52026367 65.22787476]
[382.40777588 63.39430618]
[397.29528809 61.56073761]
[412.18280029 59.72716904]
[424.93371582 50.36098862]
[438.51132202 56.48450851]
[453.39883423 54.65093994]
[455.04815674 39.67173767]
[460.10803223 25.47686386]
[468.30557251 12.83183002]
[479.19869995 2.41856527]
[492.20001221 -5.20135498]
[506.60830688 -9.61699867]
[521.64654541 -10.59023476]
[536.50384521 -8.06857872]
[550.37884521 -2.18801999]
[562.52331543 6.73431063]
[572.28234863 18.21724319]
[579.12963867 31.64151573]
[582.69598389 46.28317642]
[582.78894043 61.35261917]
[579.40356445 76.03716278]
[572.72241211 89.54489899]
[563.10577393 101.14736176]
[551.07226562 110.21884918]
[537.27087402 116.27014923]
[522.44586182 118.97492218]
[507.39672852 118.18729401]
[492.93505859 113.94976044]
[479.84075928 106.49082184]
[468.81994629 96.21275330]
[460.46701050 83.66981506]
[455.23239136 69.53845215]
[440.34487915 71.37202454]
[428.65884399 80.60705566]
[414.01638794 74.61467743]
[399.12887573 76.44824982]
[384.24136353 78.28181458]
[369.35385132 80.11538696]
[361.62222290 89.48416901]
[349.17669678 91.09236908]
[338.66448975 83.52798462]
[323.73983765 85.02941895]
[308.81515503 86.53086090]
[293.89050293 88.03229523]
[278.96582031 89.53372955]
[271.63345337 102.47105408]
[257.92694092 108.68353271]
[243.01614380 105.59779358]
[232.66175842 94.19196320]
[217.73709106 95.69339752]
[202.81242371 97.19483185]
[187.88775635 98.69626617]
[175.99887085 107.66865540]
[161.49354553 101.35154724]
[146.56887817 102.85298157]
[131.64421082 104.35442352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[67 140]
[68 139]
[69 138]
[71 136]
[72 135]
[73 134]
[74 133]
[78 129]
[79 128]
[80 127]
[81 126]
[82 125]
[84 122]
[85 121]
[86 120]
[87 119]
[89 117]
[90 116]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.0 1 colorpair
13 38 0.0 1 colorpair
14 37 0.0 1 colorpair
15 36 0.0 1 colorpair
16 35 0.0 1 colorpair
17 34 0.0 1 colorpair
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.0 1 colorpair
22 28 0.0 1 colorpair
48 65 0.0 1 colorpair
49 64 0.0 1 colorpair
50 63 0.0 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair
67 140 0.0 1 colorpair
68 139 0.0 1 colorpair
69 138 0.0 1 colorpair
71 136 0.0 1 colorpair
72 135 0.0 1 colorpair
73 134 0.0 1 colorpair
74 133 0.0 1 colorpair
78 129 0.0 1 colorpair
79 128 0.0 1 colorpair
80 127 0.0 1 colorpair
81 126 0.0 1 colorpair
82 125 0.0 1 colorpair
84 122 0.0 1 colorpair
85 121 0.0 1 colorpair
86 120 0.0 1 colorpair
87 119 0.0 1 colorpair
89 117 0.0 1 colorpair
90 116 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
