%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AACUACCGCGAAACACCCUGAUCUGGUGCGUAUUAAUAGUGUGCAUCACACUCCUGAUAUUCACAUACCUGACCCGGAAACCCCUAUGCGAAAUCCGGCAAAAGGACACGAACAGGGAGGUCGCGGCAAGCCUGGCUUACGAAUCCAAU___\
) } def
/len { sequence length } bind def

/coor [
[127.66439819 462.39797974]
[123.83702850 447.85836792]
[122.45515442 432.88702393]
[123.55648041 417.89248657]
[127.11096191 403.28372192]
[133.02162170 389.45932007]
[141.12721252 376.79641724]
[151.20661926 365.64047241]
[162.98486328 356.29577637]
[176.14062500 349.01733398]
[171.13587952 334.87686157]
[166.13113403 320.73641968]
[161.12638855 306.59594727]
[148.00019836 303.99386597]
[137.80133057 295.16409302]
[133.27471924 282.34112549]
[135.70866394 268.85205078]
[144.57048035 258.25338745]
[133.22082520 248.60794067]
[136.22174072 233.07394409]
[131.50093079 218.83618164]
[126.78012848 204.59840393]
[122.05931854 190.36064148]
[108.67401123 183.92875671]
[103.68361664 169.55688477]
[110.52073669 155.56076050]
[105.79992676 141.32299805]
[101.07911682 127.08522797]
[80.17334747 118.48452759]
[73.05668640 97.02815247]
[59.18418121 91.32258606]
[45.31167221 85.61701202]
[29.60575867 87.52353668]
[20.77819443 75.52673340]
[6.90568638 69.82115936]
[-6.96682119 64.11559296]
[-20.83932877 58.41001892]
[-34.71183777 52.70444870]
[-48.58434296 46.99887848]
[-61.76736450 54.96845627]
[-76.93799591 53.66257477]
[-88.29637909 43.79084015]
[-91.62406158 29.29723740]
[-105.49657440 23.59166718]
[-119.36907959 17.88609695]
[-133.24159241 12.18052578]
[-147.11408997 6.47495508]
[-164.06251526 6.04206228]
[-168.33833313 -10.36384392]
[-153.75723267 -19.01416397]
[-141.40852356 -7.39755249]
[-127.53601837 -1.69198203]
[-113.66350555 4.01358843]
[-99.79100037 9.71915913]
[-85.91849518 15.42472935]
[-73.35659790 7.46629333]
[-58.33956528 8.44240189]
[-46.64001465 18.18785477]
[-42.87877274 33.12637329]
[-29.00626564 38.83194351]
[-15.13375854 44.53751373]
[-1.26125062 50.24308395]
[12.61125660 55.94865417]
[26.48376465 61.65422440]
[41.19742203 59.33959579]
[51.01724243 71.74450684]
[64.88974762 77.45007324]
[78.76226044 83.15564728]
[84.13516235 78.02089691]
[90.70064545 74.53834534]
[97.96517181 72.96976471]
[105.38265991 73.43308258]
[112.31258392 60.12984848]
[119.24250793 46.82661057]
[111.49634552 31.82029152]
[114.17383575 15.31423664]
[126.02893829 3.75757003]
[142.26924133 1.54649365]
[148.93159485 -11.89273930]
[155.59394836 -25.33197403]
[162.25631714 -38.77120590]
[168.91867065 -52.21044159]
[158.65206909 -63.38904953]
[153.12055969 -77.52294159]
[153.07225037 -92.70062256]
[158.51367188 -106.86944580]
[168.70890808 -118.11318207]
[182.27912903 -124.91121674]
[197.38909912 -126.34416199]
[211.99530029 -122.21823120]
[224.12237549 -113.09142303]
[232.13021851 -100.19806671]
[234.93585205 -85.28186798]
[232.15983582 -70.36013794]
[224.17759705 -57.45090485]
[212.06866455 -48.30004120]
[197.47068787 -44.14513016]
[182.35789490 -45.54808426]
[175.69554138 -32.10884857]
[169.03318787 -18.66961479]
[162.37083435 -5.23038244]
[155.70846558 8.20885086]
[162.98239136 19.44085693]
[163.74844360 32.90913773]
[157.69859314 45.08772278]
[146.32327271 52.73504257]
[132.54574585 53.75653839]
[125.61582184 67.05977631]
[118.68589783 80.36301422]
[125.32020569 90.32212067]
[127.01992798 102.16732025]
[123.45382690 113.59014130]
[115.31687927 122.36441803]
[120.03768921 136.60218811]
[124.75849915 150.83995056]
[138.60325623 157.97859192]
[143.18801880 172.48497009]
[136.29708862 185.63983154]
[141.01789856 199.87759399]
[145.73870850 214.11537170]
[150.45951843 228.35313416]
[162.14683533 239.01695251]
[158.80824280 253.53256226]
[174.97190857 258.42425537]
[184.95265198 271.84078979]
[184.99008179 288.39672852]
[175.26684570 301.59121704]
[180.27159119 315.73165894]
[185.27633667 329.87213135]
[190.28108215 344.01257324]
[205.08638000 341.39477539]
[220.12062073 341.24966431]
[234.97369385 343.58123779]
[249.24037170 348.32592773]
[262.53143311 355.35421753]
[274.48434448 364.47442627]
[284.77294922 375.43774414]
[293.11660767 387.94506836]
[299.28771973 401.65518188]
[303.11788940 416.19409180]
[304.50265503 431.16513062]
[303.40420532 446.15991211]
[299.85253906 460.76934814]
[293.94454956 474.59487915]
[285.84140015 487.25936890]
[275.76412964 498.41726685]
[263.98770142 507.76419067]
[250.83334351 515.04516602]
[236.65992737 520.06158447]
[221.85412598 522.67657471]
[206.81985474 522.81878662]
[191.96723938 520.48431396]
[177.70147705 515.73687744]
[164.41174316 508.70602417]
[152.46061707 499.58352661]
[142.17410278 488.61822510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[13 127]
[18 123]
[20 121]
[21 120]
[22 119]
[23 118]
[26 115]
[27 114]
[28 113]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[72 109]
[73 108]
[74 107]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
] def

init

% Start Annotations
10 130 0.0 1 colorpair
11 129 0.0 1 colorpair
12 128 0.0 0.2 colorpair
13 127 0.0 1 colorpair
18 123 0.16 1 colorpair
20 121 0.0 1 colorpair
21 120 0.16 1 colorpair
22 119 0.0 1 colorpair
23 118 0.0 1 colorpair
26 115 0.16 1 colorpair
27 114 0.0 1 colorpair
28 113 0.16 0.2 colorpair
30 68 0.0 1 colorpair
31 67 0.0 1 colorpair
32 66 0.0 1 colorpair
34 64 0.0 1 colorpair
35 63 0.0 1 colorpair
36 62 0.0 1 colorpair
37 61 0.0 1 colorpair
38 60 0.0 1 colorpair
39 59 0.0 1 colorpair
43 55 0.0 1 colorpair
44 54 0.16 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
47 51 0.0 0.2 colorpair
72 109 0.16 1 colorpair
73 108 0.0 1 colorpair
74 107 0.16 1 colorpair
78 102 0.0 1 colorpair
79 101 0.0 1 colorpair
80 100 0.16 1 colorpair
81 99 0.0 0.2 colorpair
82 98 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 128 2 gmark
18 cmark
21 cmark
115 cmark
28 113 2 gmark
28 cmark
113 cmark
54 cmark
47 51 2 gmark
72 cmark
107 cmark
100 cmark
81 99 2 gmark

% End Annotations
showpage
end
%%EOF
