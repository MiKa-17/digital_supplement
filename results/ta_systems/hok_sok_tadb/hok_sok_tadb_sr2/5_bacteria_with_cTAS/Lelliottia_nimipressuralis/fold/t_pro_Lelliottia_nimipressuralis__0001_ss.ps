%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:57:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_A_GCCAUAACAAACUCCGCUAGGAGUUUUGUUUAUUGUUUGUAUGACGAUAGUGAUCUUCACCUUGAUGACCCGCGAUACGCUGUGCGAGUUGCAUUUAAGAAAGGAAAAACAAGAGGUGGCGGCAAAGUUGGCUUGCAACCCAG_____\
) } def
/len { sequence length } bind def

/coor [
[141.42118835 258.82269287]
[134.25248718 271.99880981]
[125.28363037 284.02209473]
[114.69675446 294.64837646]
[102.70688629 303.66189575]
[89.55752563 310.87951660]
[75.51571655 316.15469360]
[60.86663818 319.38031006]
[45.90780258 320.49081421]
[30.94300842 319.46371460]
[16.27618027 316.31979370]
[2.20518589 311.12295532]
[-10.98420525 303.97872925]
[-23.02412796 295.03219604]
[-33.67006302 284.46508789]
[-42.70579910 272.49197388]
[-49.94783020 259.35601807]
[-55.24907684 245.32403564]
[-58.50187683 230.68096924]
[-59.64016724 215.72422791]
[-58.64082718 200.75755310]
[-55.52415848 186.08491516]
[-50.35345459 172.00430298]
[-43.23373032 158.80166626]
[-34.30957413 146.74514771]
[-23.76223755 136.07962036]
[-11.80591869 127.02166748]
[1.31655478 119.75525665]
[15.33867931 114.42797089]
[29.97567749 111.14798737]
[44.93028641 109.98193359]
[59.90389252 110.95417786]
[74.50439453 107.51537323]
[60.04259491 103.53335571]
[45.58079910 99.55134583]
[31.11900139 95.56932831]
[16.65720367 91.58731842]
[2.19540715 87.60530090]
[-12.26638985 83.62329102]
[-26.72818756 79.64127350]
[-38.76972961 89.42804718]
[-54.26584625 90.23425293]
[-67.25796509 81.74989319]
[-72.75035095 67.23736572]
[-68.63107300 52.27705002]
[-56.48407364 42.62147903]
[-40.98012161 41.98342514]
[-28.08080482 50.60823059]
[-22.74617386 65.17948151]
[-8.28437614 69.16149139]
[6.17742062 73.14350891]
[20.63921738 77.12551880]
[35.10101318 81.10753632]
[49.56281281 85.08954620]
[64.02460480 89.07156372]
[78.48640442 93.05357361]
[65.12367249 86.23907471]
[59.78012466 72.22313690]
[65.21464539 58.24222183]
[78.62138367 51.51470566]
[93.07839966 55.51402283]
[101.12152100 68.17530823]
[98.59700012 82.96328735]
[104.04962158 68.98942566]
[109.50224304 55.01555634]
[114.95486450 41.04169083]
[108.85256958 26.70991325]
[114.58136749 12.61610031]
[128.28213501 6.88682175]
[133.73475647 -7.08704424]
[139.18737793 -21.06091118]
[130.97962952 -34.09698105]
[132.00970459 -49.28882980]
[141.67346191 -60.82466888]
[156.10423279 -64.41510010]
[161.55685425 -78.38896179]
[167.00946045 -92.36283112]
[172.46208191 -106.33670044]
[177.91470337 -120.31056213]
[175.72317505 -135.97924805]
[187.55764771 -145.02330017]
[193.01026917 -158.99716187]
[198.46287537 -172.97102356]
[198.58781433 -189.92451477]
[214.91334534 -194.49765015]
[223.82711792 -180.07611084]
[212.43675232 -167.51840210]
[206.98413086 -153.54454041]
[201.53150940 -139.57067871]
[204.11305237 -124.90148926]
[191.88858032 -114.85794830]
[186.43595886 -100.88407898]
[180.98333740 -86.91020966]
[175.53071594 -72.93634796]
[170.07809448 -58.96247864]
[178.26341248 -46.54722977]
[177.56027222 -31.51494408]
[168.02896118 -19.64028549]
[153.16123962 -15.60829163]
[147.70861816 -1.63442492]
[142.25599670 12.33944130]
[148.45564270 25.83388329]
[143.12496948 40.08304596]
[128.92872620 46.49430847]
[123.47610474 60.46817398]
[118.02349091 74.44203949]
[112.57086945 88.41590881]
[118.05344391 74.45376587]
[129.57612610 64.85023499]
[144.29765320 61.97335434]
[158.58801270 66.53250122]
[168.92347717 77.40348053]
[172.75553894 91.90573120]
[169.13928223 106.46329498]
[158.96641541 117.48657227]
[144.74534607 122.25745392]
[129.98271179 119.59953308]
[118.31939697 110.16916656]
[129.96356201 119.62503052]
[141.60774231 129.08088684]
[157.19802856 131.77409363]
[162.20040894 145.80354309]
[173.84458923 155.25939941]
[185.58584595 164.59442139]
[197.42295837 173.80761719]
[209.26007080 183.02079773]
[224.51097107 179.56478882]
[238.39158630 186.76632690]
[244.34793091 201.22509766]
[239.56758118 216.11410522]
[226.30769348 224.40319824]
[210.82916260 222.17854309]
[200.44049072 210.49053955]
[200.04687500 194.85791016]
[188.20976257 185.64471436]
[176.37266541 176.43153381]
[169.11665344 174.79472351]
[164.38873291 166.90356445]
[152.74455261 157.44770813]
[137.98713684 155.43086243]
[132.15188599 140.72506714]
[120.50771332 131.26919556]
[108.86354065 121.81333923]
[114.54888153 135.69415283]
[125.15550232 146.30073547]
[134.14671326 158.30731201]
[141.33992004 171.47006226]
[146.58903503 185.52163696]
[149.78742981 200.17668152]
[150.87017822 215.13754272]
[149.81527710 230.10040283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[63 107]
[64 106]
[65 105]
[66 104]
[69 101]
[70 100]
[71 99]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[81 89]
[82 88]
[83 87]
[118 143]
[119 142]
[120 141]
[122 139]
[123 138]
[124 136]
[125 135]
[126 134]
] def

init

% Start Annotations
33 56 0.0 1 colorpair
34 55 0.16 1 colorpair
35 54 0.0 0.2 colorpair
36 53 0.16 0.2 colorpair
37 52 0.0 0.2 colorpair
38 51 0.16 1 colorpair
39 50 0.0 0.2 colorpair
40 49 0.32 1 colorpair
63 107 0.0 1 colorpair
64 106 0.16 0.2 colorpair
65 105 0.16 0.6 colorpair
66 104 0.16 1 colorpair
69 101 0.0 0.6 colorpair
70 100 0.32 1 colorpair
71 99 0.16 1 colorpair
75 95 0.16 1 colorpair
76 94 0.16 0.2 colorpair
77 93 0.16 1 colorpair
78 92 0.16 0.6 colorpair
79 91 0.16 0.6 colorpair
81 89 0.0 0.2 colorpair
82 88 0.16 0.6 colorpair
83 87 0.16 1 colorpair
118 143 0.16 0.2 colorpair
119 142 0.0 0.2 colorpair
120 141 0.16 1 colorpair
122 139 0.16 1 colorpair
123 138 0.0 0.2 colorpair
124 136 0.32 1 colorpair
125 135 0.0 0.6 colorpair
126 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
34 cmark
55 cmark
35 54 2 gmark
36 53 2 gmark
53 cmark
37 52 2 gmark
38 cmark
39 50 2 gmark
40 cmark
49 cmark
64 106 2 gmark
64 cmark
106 cmark
65 105 1 gmark
105 cmark
66 cmark
104 cmark
69 101 1 gmark
70 cmark
100 cmark
71 cmark
95 cmark
76 94 2 gmark
76 cmark
94 cmark
77 cmark
78 92 1 gmark
78 cmark
79 91 1 gmark
91 cmark
81 89 2 gmark
82 88 1 gmark
88 cmark
83 cmark
118 143 2 gmark
118 cmark
143 cmark
119 142 2 gmark
141 cmark
122 cmark
139 cmark
123 138 2 gmark
124 cmark
136 cmark
125 135 1 gmark

% End Annotations
showpage
end
%%EOF
