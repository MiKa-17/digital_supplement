%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 02:04:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGACUGCCGCAAAAAUCCCUGGUGUUUGGCUUAGUAGUGAUUUGUUUCACGCUAUUGUUAUUCACCUGGAUGGUGCGAGAUUCGCUGUGUGAAUUGCGUAUCAGGCAGGGAAGUAUUGAGCUGGCGGCAUUUUUAGCCUACGAAACUAAAAAG_\
) } def
/len { sequence length } bind def

/coor [
[131.80059814 420.77557373]
[117.65026093 421.86441040]
[103.46571350 422.32937622]
[89.27445221 422.16952515]
[75.10397339 421.38516235]
[60.98176193 419.97784424]
[46.93518066 417.95025635]
[32.99146271 415.30636597]
[19.17763329 412.05123901]
[5.52047253 408.19128418]
[-7.95354795 403.73388672]
[-21.21830940 398.68774414]
[-34.24810028 393.06259155]
[-47.01765823 386.86938477]
[-59.50223923 380.12011719]
[-71.67763519 372.82785034]
[-83.52024841 365.00671387]
[-95.00712585 356.67190552]
[-106.11599731 347.83953857]
[-116.82533264 338.52676392]
[-127.11436462 328.75161743]
[-136.96315002 318.53308105]
[-146.35261536 307.89089966]
[-155.26454163 296.84576416]
[-163.68165588 285.41906738]
[-171.58764648 273.63293457]
[-178.96717834 261.51022339]
[-185.80596924 249.07444763]
[-192.09072876 236.34970093]
[-197.80931091 223.36065674]
[-202.95062256 210.13247681]
[-207.50466919 196.69082642]
[-211.46266174 183.06173706]
[-214.81689453 169.27165222]
[-217.56088257 155.34729004]
[-219.68931580 141.31562805]
[-221.19804382 127.20388794]
[-222.08416748 113.03941345]
[-222.34596252 98.84966278]
[-221.98291016 84.66214752]
[-220.99571228 70.50435638]
[-219.38629150 56.40374374]
[-217.15777588 42.38763428]
[-214.31446838 28.48320770]
[-210.86189270 14.71740723]
[-206.80674744 1.11692047]
[-202.15686035 -12.29188919]
[-196.92127991 -25.48303032]
[-191.11013794 -38.43093491]
[-184.73471069 -51.11050034]
[-177.80734253 -63.49715042]
[-170.34147644 -75.56687927]
[-162.35156250 -87.29627991]
[-153.85310364 -98.66262054]
[-144.86257935 -109.64387512]
[-135.39741516 -120.21875763]
[-125.47593689 -130.36676025]
[-115.11740112 -140.06820679]
[-104.34187317 -149.30430603]
[-93.17024231 -158.05715942]
[-81.62417603 -166.30978394]
[-69.72604370 -174.04618835]
[-57.49890900 -181.25137329]
[-44.96647644 -187.91137695]
[-32.15303802 -194.01329041]
[-19.08343315 -199.54528809]
[-5.78299427 -204.49662781]
[7.72249603 -208.85774231]
[21.40685844 -212.62014771]
[35.24356842 -215.77656555]
[49.20580292 -218.32089233]
[63.26649475 -220.24816895]
[77.39839172 -221.55467224]
[91.57410431 -222.23786926]
[105.76615143 -222.29643250]
[119.94701385 -221.73025513]
[134.08921814 -220.54042053]
[148.16534424 -218.72926331]
[162.14810181 -216.30026245]
[176.01037598 -213.25813293]
[189.72532654 -209.60879517]
[203.26635742 -205.35929871]
[216.60720825 -200.51788330]
[229.72201538 -195.09394836]
[236.07630920 -208.68154907]
[242.43058777 -222.26916504]
[248.78488159 -235.85676575]
[255.13917542 -249.44436646]
[256.37191772 -266.35345459]
[272.96142578 -269.84976196]
[280.91354370 -254.87646484]
[268.72677612 -243.09008789]
[262.37249756 -229.50247192]
[256.01818848 -215.91487122]
[249.66390991 -202.32727051]
[243.30963135 -188.73965454]
[258.35317993 -180.77127075]
[272.95510864 -172.01980591]
[287.07464600 -162.50965881]
[300.67242432 -152.26736450]
[313.71051025 -141.32148743]
[326.15255737 -129.70256042]
[337.96383667 -117.44297028]
[349.11145020 -104.57693481]
[359.56427002 -91.14032745]
[369.29318237 -77.17061615]
[378.27099609 -62.70677185]
[386.47271729 -47.78913498]
[393.87542725 -32.45930481]
[400.45852661 -16.76004219]
[406.20364380 -0.73513067]
[411.09475708 15.57073498]
[415.11819458 32.11207581]
[418.26275635 48.84276199]
[420.51965332 65.71612549]
[421.88262939 82.68510437]
[422.34786987 99.70237732]
[421.91406250 116.72048187]
[420.58242798 133.69195557]
[418.35665894 150.56945801]
[415.24301147 167.30592346]
[411.25012207 183.85466003]
[406.38912964 200.16952515]
[400.67361450 216.20503235]
[394.11953735 231.91641235]
[386.74511719 247.25988770]
[378.57095337 262.19265747]
[369.61987305 276.67303467]
[359.91677856 290.66070557]
[371.80194092 299.81182861]
[383.68710327 308.96295166]
[398.91970825 305.42718506]
[412.83782959 312.55599976]
[418.86972046 326.98339844]
[414.16735840 341.89721680]
[400.95101929 350.25558472]
[385.46105957 348.11193848]
[375.01138306 336.47845459]
[374.53598022 320.84811401]
[362.65081787 311.69699097]
[350.76565552 302.54583740]
[341.60720825 313.38745117]
[331.98040771 323.81539917]
[321.90393066 333.80950928]
[311.39730835 343.35040283]
[300.48092651 352.41955566]
[289.17590332 360.99945068]
[277.50421143 369.07339478]
[265.48843384 376.62579346]
[253.15185547 383.64193726]
[240.51840210 390.10827637]
[227.61257935 396.01226807]
[214.45938110 401.34246826]
[201.08432007 406.08856201]
[187.51330566 410.24130249]
[173.77265930 413.79266357]
[159.88902283 416.73577881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
84 96 0.16 0.6 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.32 0.6 colorpair
88 92 0.16 1 colorpair
129 141 0.32 1 colorpair
130 140 0.0 0.6 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
84 96 1 gmark
84 cmark
96 cmark
87 93 1 gmark
87 cmark
93 cmark
88 cmark
129 cmark
141 cmark
130 140 1 gmark

% End Annotations
showpage
end
%%EOF
