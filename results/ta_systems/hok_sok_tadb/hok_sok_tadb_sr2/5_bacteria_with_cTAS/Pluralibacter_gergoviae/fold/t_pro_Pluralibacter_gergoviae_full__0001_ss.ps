%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:58:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______________AAAGCUGUUGUAUA__GCCUGGUAGUGGUCUGUCUGACGCUACUGGUGUUCACCUGGAUGGUAAGAGACUCACUCUGUGAGGUGCGUAUCAACCAGGGCAAUACGGAGUUUGCGGCGUUUCUGAACUACGAAG________\
) } def
/len { sequence length } bind def

/coor [
[93.74008942 427.92547607]
[78.72563171 428.04019165]
[63.78678131 426.53085327]
[49.09869766 423.41519165]
[34.83359146 418.72967529]
[21.15871048 412.52926636]
[8.23438644 404.88668823]
[-3.78784943 395.89154053]
[-14.76704216 385.64923096]
[-24.57446671 374.27990723]
[-33.09513474 361.91683960]
[-40.22914886 348.70498657]
[-45.89286423 334.79925537]
[-50.01987457 320.36267090]
[-52.56179810 305.56448364]
[-53.48883057 290.57821655]
[-52.79009628 275.57958984]
[-50.47379684 260.74444580]
[-46.56708527 246.24668884]
[-41.11576843 232.25631714]
[-34.18375397 218.93736267]
[-25.85232162 206.44598389]
[-16.21915245 194.92864990]
[-5.39718914 184.52035522]
[6.48668575 175.34317017]
[19.29314041 167.50468445]
[32.87202454 161.09678650]
[47.06413269 156.19461060]
[61.70307159 152.85563660]
[76.61720276 151.11901855]
[91.63167572 151.00509644]
[93.13950348 136.08108521]
[94.64733124 121.15705872]
[86.16912842 133.53121948]
[78.55890656 146.45735168]
[64.76052094 152.33990479]
[50.16485214 148.88064575]
[40.47426987 137.43107605]
[39.47478867 122.46441650]
[47.55688858 109.82797241]
[61.56455994 104.45860291]
[76.32812500 101.80584717]
[62.10007858 97.05583191]
[47.87203217 92.30580902]
[32.93468475 98.15860748]
[19.11817741 90.00485992]
[17.02134895 74.09941864]
[28.25271034 62.64358902]
[44.19652176 64.42529297]
[52.62205505 78.07776642]
[66.85009766 82.82778168]
[81.07814789 87.57780457]
[70.86914062 76.58798218]
[60.66013718 65.59815979]
[47.53550339 58.33565140]
[38.83587646 46.11613846]
[36.26841354 31.33749962]
[40.33694077 16.89980316]
[50.24307632 5.63621187]
[64.04290009 -0.24297903]
[79.02841949 0.41592678]
[92.25897217 7.48362970]
[101.13828278 19.57320786]
[103.92391968 34.31227875]
[100.06996155 48.80720139]
[100.92382050 63.78287888]
[101.77768707 78.75855255]
[108.20806885 65.20680237]
[96.14582062 56.21268845]
[86.07334900 45.04162598]
[78.37637329 32.12420654]
[73.34912109 17.95785904]
[71.18303680 3.08766937]
[71.95951080 -11.91457272]
[75.64684296 -26.47237587]
[82.10149384 -40.02668762]
[91.07369232 -52.05736923]
[102.21710968 -62.10316086]
[115.10221100 -69.77935791]
[129.23280334 -74.79254150]
[144.06518555 -76.95180511]
[159.02900696 -76.17601013]
[173.54927063 -72.49684143]
[179.97964478 -86.04859924]
[186.41003418 -99.60035706]
[192.84042358 -113.15211487]
[188.83081055 -128.68601990]
[198.59049988 -141.41897583]
[214.63270569 -141.58332825]
[224.65122986 -129.05300903]
[220.96069336 -113.44020081]
[206.39218140 -106.72172546]
[199.96179199 -93.16996765]
[193.53140259 -79.61820984]
[187.10101318 -66.06645203]
[199.13418579 -57.14586258]
[209.19892883 -46.04545975]
[216.90701294 -33.19060898]
[221.96061707 -19.07441711]
[224.16371155 -4.23878241]
[223.42979431 10.74637890]
[219.78518677 25.30504227]
[213.36816406 38.87720490]
[204.42366028 50.94044495]
[193.29393005 61.03001022]
[180.40547180 68.75672913]
[166.25268555 73.82203674]
[151.37887573 76.02947998]
[136.35542297 75.29238129]
[121.75982666 71.63718414]
[115.32943726 85.18894196]
[122.69825745 98.25418091]
[137.62228394 99.76201630]
[152.54631042 101.26984406]
[167.47032166 102.77767181]
[177.70591736 91.11524200]
[192.84907532 87.72932434]
[207.07693481 93.92185974]
[214.91860962 107.31169891]
[213.35879517 122.75017548]
[202.99729919 134.30088806]
[187.81829834 137.52233887]
[173.65844727 131.17581177]
[165.96249390 117.70169830]
[151.03846741 116.19387054]
[136.11445618 114.68603516]
[121.19042969 113.17820740]
[109.57135773 122.66488647]
[108.06352234 137.58891296]
[106.55569458 152.51293945]
[121.24394226 155.62782288]
[135.50930786 160.31256104]
[149.18452454 166.51222229]
[162.10925293 174.15409851]
[174.13197327 183.14863586]
[185.11172485 193.39033508]
[194.91975403 204.75914001]
[203.44108582 217.12174988]
[210.57580566 230.33320618]
[216.24028015 244.23864746]
[220.36805725 258.67501831]
[222.91078186 273.47305298]
[223.83862305 288.45925903]
[223.14070129 303.45791626]
[220.82519531 318.29321289]
[216.91926575 332.79116821]
[211.46868896 346.78182983]
[204.53739929 360.10116577]
[196.20663452 372.59298706]
[186.57409668 384.11083984]
[175.75268555 394.51971436]
[163.86930847 403.69754028]
[151.06327820 411.53671265]
[137.48474121 417.94534302]
[123.29289246 422.84826660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 130]
[32 129]
[33 128]
[42 52]
[43 51]
[44 50]
[67 111]
[68 110]
[83 95]
[84 94]
[85 93]
[86 92]
[112 127]
[113 126]
[114 125]
[115 124]
] def

init

% Start Annotations
31 130 0.0 1 colorpair
32 129 0.0 1 colorpair
33 128 0.0 1 colorpair
42 52 0.0 1 colorpair
43 51 0.0 1 colorpair
44 50 0.0 0.2 colorpair
67 111 0.0 1 colorpair
68 110 0.16 1 colorpair
83 95 0.16 1 colorpair
84 94 0.0 1 colorpair
85 93 0.0 1 colorpair
86 92 0.16 1 colorpair
112 127 0.0 1 colorpair
113 126 0.16 1 colorpair
114 125 0.16 1 colorpair
115 124 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
44 50 2 gmark
68 cmark
110 cmark
83 cmark
95 cmark
86 cmark
92 cmark
113 cmark
114 cmark
115 cmark

% End Annotations
showpage
end
%%EOF
