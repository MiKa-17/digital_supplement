%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 01:55:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGCGGCUAUUCUCAACUUGUC_GGAGUUGAGAGAUAGCCUCGGGUUAAUAGAAAUAUUGCCCGGGGCUUUUCUCUUUCUGUCCCUCGUCCAUGUGUACUUAAGACAGAAAGCCUUAAGCACC\
) } def
/len { sequence length } bind def

/coor [
[124.53744507 108.95399475]
[119.51802063 116.45980835]
[112.38308716 121.65290070]
[104.09151459 124.00939178]
[95.70027161 123.37515259]
[88.22994995 119.96841431]
[82.54065704 114.33601379]
[68.44526672 119.46631622]
[54.34988022 124.59661865]
[40.25448990 129.72691345]
[26.15910149 134.85722351]
[12.06371117 139.98751831]
[-1.96662652 145.29315186]
[-15.92973232 150.77325439]
[-29.89283943 156.25337219]
[-43.85594559 161.73348999]
[-57.81904984 167.21360779]
[-71.78215790 172.69372559]
[-85.74526215 178.17384338]
[-99.70836639 183.65394592]
[-113.67147827 189.13406372]
[-121.37904358 203.20436096]
[-137.20925903 205.80894470]
[-149.01853943 194.94981384]
[-147.74780273 178.95716858]
[-134.37185669 170.09919739]
[-119.15158844 175.17095947]
[-105.18848419 169.69084167]
[-91.22537994 164.21073914]
[-77.26227570 158.73062134]
[-63.29916763 153.25050354]
[-49.33605957 147.77038574]
[-35.37295532 142.29026794]
[-21.40984726 136.81015015]
[-7.44674206 131.33003235]
[-2.31351829 125.89813232]
[6.93340921 125.89213562]
[21.02879906 120.76183319]
[35.12418747 115.63153076]
[49.21957779 110.50122833]
[63.31496811 105.37092590]
[77.41035461 100.24062347]
[82.51023865 82.21525574]
[100.74717712 72.71372223]
[94.92065430 58.89158249]
[89.09413147 45.06943893]
[83.26761627 31.24729347]
[77.44109344 17.42515182]
[71.15598297 10.64259338]
[71.64636993 3.18504024]
[66.16625214 -10.77806568]
[60.68613815 -24.74117279]
[55.20602417 -38.70427704]
[42.05427551 -48.50037384]
[44.23054886 -64.75447845]
[59.49608612 -70.74575806]
[72.14701080 -60.31090164]
[69.16912842 -44.18439484]
[74.64924622 -30.22128677]
[80.12936401 -16.25818062]
[85.60947418 -2.29507518]
[91.26323700 11.59862900]
[97.08975983 25.42077255]
[102.91627502 39.24291611]
[108.74279785 53.06505966]
[114.56932068 66.88719940]
[126.74839020 75.64335632]
[141.70645142 76.76430511]
[156.67732239 77.69869995]
[171.65867615 78.44638824]
[186.64002991 79.19407654]
[201.62138367 79.94176483]
[210.00587463 67.14928436]
[223.57815552 60.31627274]
[238.64817810 61.18836975]
[251.17448425 69.43139648]
[257.84799194 82.74791718]
[272.82934570 83.49560547]
[287.81069946 84.24329376]
[302.79205322 84.99098206]
[317.77340698 85.73867035]
[332.75476074 86.48635864]
[347.73611450 87.23404694]
[362.71746826 87.98173523]
[377.69882202 88.72942352]
[386.08334351 75.93694305]
[399.65560913 69.10393524]
[414.72564697 69.97602844]
[427.25195312 78.21905518]
[433.92547607 91.53558350]
[448.90682983 92.28327179]
[458.53671265 80.11589813]
[473.48828125 75.96501160]
[488.01239014 81.42672729]
[496.52416992 94.40089417]
[495.75070190 109.89868164]
[485.98941040 121.96086884]
[470.99368286 125.94931030]
[456.52966309 120.33036041]
[448.15911865 107.26462555]
[433.17776489 106.51693726]
[425.21151733 119.10281372]
[411.92672729 126.05766296]
[396.84472656 125.42494202]
[384.02026367 117.27451324]
[376.95114136 103.71077728]
[361.96978760 102.96308899]
[346.98843384 102.21540070]
[332.00708008 101.46771240]
[317.02572632 100.72002411]
[302.04437256 99.97233582]
[287.06301880 99.22464752]
[272.08166504 98.47695923]
[257.10031128 97.72927094]
[249.13406372 110.31515503]
[235.84925842 117.27000427]
[220.76728821 116.63727570]
[207.94279480 108.48685455]
[200.87368774 94.92311859]
[185.89233398 94.17543030]
[170.91098022 93.42774200]
[155.92962646 92.68005371]
[149.01658630 95.52004242]
[140.58549500 91.72236633]
[125.62744141 90.60141754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[50 61]
[51 60]
[52 59]
[53 58]
[67 125]
[68 124]
[69 122]
[70 121]
[71 120]
[72 119]
[77 114]
[78 113]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[90 101]
[91 100]
] def

init

% Start Annotations
7 42 0.0 1 colorpair
8 41 0.0 1 colorpair
9 40 0.0 1 colorpair
10 39 0.0 1 colorpair
11 38 0.0 1 colorpair
12 37 0.0 1 colorpair
13 35 0.16 1 colorpair
14 34 0.0 1 colorpair
15 33 0.0 1 colorpair
16 32 0.0 1 colorpair
17 31 0.0 1 colorpair
18 30 0.0 1 colorpair
19 29 0.0 1 colorpair
20 28 0.16 1 colorpair
21 27 0.0 1 colorpair
44 66 0.0 1 colorpair
45 65 0.0 1 colorpair
46 64 0.0 1 colorpair
47 63 0.0 1 colorpair
48 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair
67 125 0.0 1 colorpair
68 124 0.0 1 colorpair
69 122 0.0 1 colorpair
70 121 0.0 1 colorpair
71 120 0.0 1 colorpair
72 119 0.0 1 colorpair
77 114 0.0 1 colorpair
78 113 0.0 1 colorpair
79 112 0.0 1 colorpair
80 111 0.0 1 colorpair
81 110 0.0 1 colorpair
82 109 0.0 1 colorpair
83 108 0.0 1 colorpair
84 107 0.0 1 colorpair
85 106 0.0 1 colorpair
90 101 0.0 1 colorpair
91 100 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
35 cmark
28 cmark

% End Annotations
showpage
end
%%EOF
