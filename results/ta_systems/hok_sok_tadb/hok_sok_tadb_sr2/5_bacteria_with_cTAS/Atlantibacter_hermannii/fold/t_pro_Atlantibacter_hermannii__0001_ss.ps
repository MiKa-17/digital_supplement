%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 01:55:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCACUACGCUAUCUGUUUGCGUGUUUAUUAGUUAUUUGCGUAACAGUACUGUUUUUUUCUUUAUUUAAUCGCGGUCUGCUUUGCGAAUUAAGAAUAAAGAACGGAAAUCAGGAGGUGGCGGCGAAAUUAGCCUGC\
) } def
/len { sequence length } bind def

/coor [
[117.36790466 378.75311279]
[126.54187012 366.88555908]
[141.15650940 363.50735474]
[154.60783386 370.14480591]
[150.29383850 355.77853394]
[145.97985840 341.41226196]
[141.66586304 327.04602051]
[137.35186768 312.67974854]
[133.03788757 298.31347656]
[125.93277740 296.56863403]
[119.84340668 292.39071655]
[115.58006287 286.27703857]
[113.73054504 278.98599243]
[114.57952118 271.44305420]
[118.06589508 264.62338257]
[123.78451538 259.42575073]
[121.10616302 244.66679382]
[118.42781067 229.90785217]
[115.74945831 215.14891052]
[112.90567780 200.42094421]
[109.89684296 185.72581482]
[106.88800049 171.03068542]
[96.75499725 160.11410522]
[101.56687164 145.04240417]
[98.55802917 130.34725952]
[95.54919434 115.65213776]
[84.09571838 103.44277954]
[89.47456360 87.58975220]
[86.13674927 72.96583557]
[82.79893494 58.34191513]
[79.46112061 43.71799469]
[76.12330627 29.09407806]
[72.78549194 14.47015858]
[58.20028305 9.86376476]
[47.94673538 -1.35058141]
[44.70466614 -16.09355736]
[49.24697113 -30.38423347]
[60.25832367 -40.41497421]
[56.92050934 -55.03889465]
[53.58269501 -69.66281128]
[50.24488068 -84.28672791]
[46.90706635 -98.91065216]
[43.56925201 -113.53456879]
[40.23143768 -128.15849304]
[26.11852837 -134.33360291]
[18.43760681 -147.48109436]
[19.95329094 -162.45329285]
[29.87580490 -173.52947998]
[26.53799248 -188.15339661]
[23.20017815 -202.77731323]
[18.20106888 -210.52316284]
[19.95543861 -217.76673889]
[16.94659615 -232.46186829]
[13.93775558 -247.15699768]
[10.92891407 -261.85211182]
[7.92007303 -276.54727173]
[-4.98623943 -285.26876831]
[-7.82829475 -300.21459961]
[0.56587547 -312.46502686]
[-2.44296575 -327.16015625]
[-17.03939629 -331.93927002]
[-27.27877235 -343.38699341]
[-30.40675354 -358.42401123]
[-25.58192635 -373.00537109]
[-14.10214710 -383.20883179]
[0.94458139 -386.28964233]
[15.51076508 -381.41915894]
[25.67817497 -369.90744019]
[28.71182632 -354.85113525]
[23.79568481 -340.30029297]
[12.25216484 -330.16900635]
[15.26100636 -315.47387695]
[27.79441261 -307.50836182]
[31.05514336 -292.64828491]
[22.61520386 -279.55609131]
[25.62404442 -264.86096191]
[28.63288689 -250.16583252]
[31.64172745 -235.47070312]
[34.65056992 -220.77557373]
[37.82409668 -206.11512756]
[41.16191101 -191.49121094]
[44.49972534 -176.86729431]
[58.24537277 -171.19322205]
[66.10715485 -158.36135864]
[64.89136505 -143.18324280]
[54.85535812 -131.49630737]
[58.19316864 -116.87238312]
[61.53098297 -102.24846649]
[64.86879730 -87.62454224]
[68.20661163 -73.00062561]
[71.54442596 -58.37670898]
[74.88224030 -43.75278854]
[89.15529633 -39.49304962]
[99.44826508 -28.58842850]
[102.92400360 -13.89878273]
[98.55159760 0.65384126]
[87.40941620 11.13234520]
[90.74723053 25.75626373]
[94.08504486 40.38018417]
[97.42285919 55.00410080]
[100.76067352 69.62802124]
[104.09848785 84.25193787]
[113.60387421 91.07063293]
[116.07884216 102.50399017]
[110.24432373 112.64329529]
[113.25316620 127.33842468]
[116.26200867 142.03355408]
[126.61021423 154.00122070]
[121.58312988 168.02183533]
[124.59197235 182.71696472]
[127.60081482 197.41210938]
[132.42486572 205.26817322]
[130.50840759 212.47055054]
[133.18675232 227.22949219]
[135.86511230 241.98844910]
[138.54345703 256.74737549]
[155.13475037 272.92663574]
[147.40414429 293.99948120]
[151.71813965 308.36575317]
[156.03211975 322.73202515]
[160.34611511 337.09826660]
[164.66011047 351.46453857]
[168.97409058 365.83081055]
[174.40194702 379.81430054]
[180.91020203 393.32882690]
[187.41845703 406.84338379]
[202.61611938 410.52645874]
[211.84907532 423.14733887]
[210.75782776 438.74679565]
[199.85760498 449.95925903]
[184.29518127 451.49053955]
[171.41864014 442.61761475]
[167.30790710 427.52999878]
[173.90393066 413.35162354]
[167.39567566 399.83709717]
[160.88742065 386.32257080]
[155.43667603 400.29714966]
[142.37007141 407.66357422]
[127.59194946 405.09317017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[16 116]
[17 115]
[18 114]
[19 113]
[20 111]
[21 110]
[22 109]
[24 107]
[25 106]
[26 105]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[48 82]
[49 81]
[50 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[59 72]
[60 71]
[124 136]
[125 135]
[126 134]
] def

init

% Start Annotations
4 123 0.0 1 colorpair
5 122 0.0 1 colorpair
6 121 0.0 1 colorpair
7 120 0.0 1 colorpair
8 119 0.0 1 colorpair
9 118 0.0 1 colorpair
16 116 0.0 1 colorpair
17 115 0.0 1 colorpair
18 114 0.0 1 colorpair
19 113 0.0 1 colorpair
20 111 0.0 1 colorpair
21 110 0.0 1 colorpair
22 109 0.0 1 colorpair
24 107 0.0 1 colorpair
25 106 0.0 1 colorpair
26 105 0.0 1 colorpair
28 102 0.0 1 colorpair
29 101 0.0 1 colorpair
30 100 0.0 1 colorpair
31 99 0.0 1 colorpair
32 98 0.0 1 colorpair
33 97 0.16 1 colorpair
38 92 0.16 1 colorpair
39 91 0.0 1 colorpair
40 90 0.0 1 colorpair
41 89 0.0 1 colorpair
42 88 0.0 1 colorpair
43 87 0.0 1 colorpair
44 86 0.0 1 colorpair
48 82 0.0 1 colorpair
49 81 0.0 1 colorpair
50 80 0.0 1 colorpair
52 79 0.16 1 colorpair
53 78 0.0 1 colorpair
54 77 0.0 1 colorpair
55 76 0.0 1 colorpair
56 75 0.0 1 colorpair
59 72 0.0 1 colorpair
60 71 0.0 1 colorpair
124 136 0.0 1 colorpair
125 135 0.0 1 colorpair
126 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
97 cmark
38 cmark
52 cmark

% End Annotations
showpage
end
%%EOF
