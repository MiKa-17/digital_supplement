%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:33:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________AUGCCGCAGAAAUAUGCAUUACU__GGCG_UUAAUAGUGAUGUGUUUCACGCUUUUAGUAUUCACCUGGAUGAUAAGAGAUUCACUGUGUGAGUUGCAUAUCAAACAGGGGAAUAAUGAGCUGGCGGCGUUUUUAGCCUACGAAUCGAAA__G\
) } def
/len { sequence length } bind def

/coor [
[110.56221008 397.45684814]
[97.55619049 397.63427734]
[84.55483246 397.24328613]
[71.58297729 396.28466797]
[58.66538620 394.76019287]
[45.82673264 392.67282104]
[33.09153748 390.02651978]
[20.48412132 386.82635498]
[8.02855968 383.07839966]
[-4.25136089 378.78985596]
[-16.33218765 373.96887207]
[-28.19085121 368.62469482]
[-39.80470276 362.76751709]
[-51.15156174 356.40853882]
[-62.20976257 349.55984497]
[-72.95818329 342.23458862]
[-83.37629700 334.44671631]
[-93.44421387 326.21112061]
[-103.14270020 317.54348755]
[-112.45323181 308.46041870]
[-121.35803986 298.97927856]
[-129.84010315 289.11810303]
[-137.88323975 278.89575195]
[-145.47207642 268.33178711]
[-152.59211731 257.44631958]
[-159.22978210 246.26020813]
[-165.37239075 234.79475403]
[-171.00819397 223.07188416]
[-176.12644958 211.11396790]
[-180.71737671 198.94386292]
[-184.77218628 186.58479309]
[-188.28317261 174.06037903]
[-191.24360657 161.39451599]
[-193.64784241 148.61141968]
[-195.49128723 135.73547363]
[-196.77043152 122.79129028]
[-197.48280334 109.80358124]
[-197.62705994 96.79714203]
[-197.20294189 83.79682922]
[-196.21122742 70.82745361]
[-194.65382385 57.91379547]
[-192.53372192 45.08050919]
[-189.85494995 32.35210419]
[-186.62261963 19.75289154]
[-182.84292603 7.30692768]
[-178.52307129 -4.96201563]
[-173.67131042 -17.03050804]
[-168.29690552 -28.87550354]
[-162.41012573 -40.47438049]
[-156.02221680 -51.80498505]
[-149.14537048 -62.84568405]
[-141.79270935 -73.57538605]
[-133.97828674 -83.97360992]
[-125.71703339 -94.02048492]
[-117.02471924 -103.69683838]
[-107.91793823 -112.98417664]
[-98.41409302 -121.86476898]
[-88.53132629 -130.32167053]
[-78.28851318 -138.33869934]
[-67.70521545 -145.90057373]
[-56.80163956 -152.99282837]
[-45.59861755 -159.60194397]
[-34.11753845 -165.71528625]
[-22.38032913 -171.32118225]
[-10.40940571 -176.40892029]
[1.77237177 -180.96879578]
[14.14173794 -184.99208069]
[26.67507172 -188.47111511]
[39.34843826 -191.39924622]
[52.13763046 -193.77087402]
[65.01822662 -195.58146667]
[77.96563721 -196.82759094]
[90.95512390 -197.50683594]
[103.96187592 -197.61793518]
[116.96107483 -197.16064453]
[129.92787170 -196.13586426]
[142.83752441 -194.54554749]
[155.66535950 -192.39271545]
[168.38688660 -189.68148804]
[180.97781372 -186.41703796]
[193.41410828 -182.60562134]
[205.67198181 -178.25448608]
[217.72807312 -173.37196350]
[229.55931091 -167.96737671]
[241.14314270 -162.05102539]
[252.45742798 -155.63423157]
[263.48056030 -148.72924805]
[274.19146729 -141.34925842]
[284.56973267 -133.50834656]
[294.16482544 -145.03805542]
[303.75991821 -156.56776428]
[313.35501099 -168.09745789]
[322.95010376 -179.62716675]
[319.29028320 -194.59085083]
[325.07568359 -208.67568970]
[337.89379883 -216.55986023]
[352.71905518 -215.39831543]
[362.31417847 -226.92802429]
[371.90927124 -238.45771790]
[381.50436401 -249.98742676]
[391.09945679 -261.51715088]
[400.69454956 -273.04684448]
[410.28964233 -284.57653809]
[415.77401733 -300.61892700]
[432.70767212 -299.78988647]
[436.59872437 -283.28848267]
[421.81933594 -274.98144531]
[412.22424316 -263.45175171]
[402.62915039 -251.92204285]
[393.03405762 -240.39233398]
[383.43896484 -228.86262512]
[373.84387207 -217.33291626]
[364.24877930 -205.80320740]
[368.08383179 -191.43553162]
[362.65902710 -177.39859009]
[349.85934448 -169.15109253]
[334.47979736 -170.03207397]
[324.88470459 -158.50236511]
[315.28961182 -146.97265625]
[305.69451904 -135.44296265]
[296.09942627 -123.91324615]
[311.12945557 -109.80105591]
[325.14648438 -94.68226624]
[338.08331299 -78.62940216]
[349.87783813 -61.71950150]
[360.47348022 -44.03368378]
[369.81936646 -25.65681076]
[377.87072754 -6.67704821]
[384.58886719 12.81453896]
[389.94158936 32.72443390]
[393.90319824 52.95710754]
[396.45471191 73.41548920]
[397.58383179 94.00141907]
[397.28521729 114.61613464]
[395.56024170 135.16072083]
[392.41720581 155.53660583]
[387.87115479 175.64602661]
[381.94396973 195.39251709]
[374.66403198 214.68132019]
[366.06625366 233.41990662]
[356.19195557 251.51834106]
[345.08847046 268.88980103]
[332.80908203 285.45095825]
[319.41268921 301.12234497]
[330.21124268 311.53347778]
[341.00979614 321.94458008]
[356.54028320 320.11758423]
[369.58325195 328.74395752]
[373.98022461 343.75067139]
[367.65509033 358.05194092]
[353.59436035 364.89517212]
[338.43710327 361.04919434]
[329.34008789 348.32998657]
[330.59866333 332.74313354]
[319.80010986 322.33203125]
[309.00158691 311.92089844]
[299.54315186 320.84985352]
[289.70364380 329.35705566]
[279.50186157 337.42623901]
[268.95724487 345.04199219]
[258.08999634 352.18975830]
[246.92083740 358.85592651]
[235.47108459 365.02777100]
[223.76261902 370.69345093]
[211.81781006 375.84216309]
[199.65945435 380.46411133]
[187.31076050 384.55044556]
[174.79533386 388.09335327]
[162.13706970 391.08609009]
[149.36013794 393.52291870]
[136.48893738 395.39920044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[89 121]
[90 120]
[91 119]
[92 118]
[93 117]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
[144 156]
[145 155]
[146 154]
] def

init

% Start Annotations
89 121 0.0 0.6 colorpair
90 120 0.32 0.6 colorpair
91 119 0.16 0.6 colorpair
92 118 0.16 0.2 colorpair
93 117 0.0 0.2 colorpair
97 113 0.16 1 colorpair
98 112 0.0 0.2 colorpair
99 111 0.16 0.2 colorpair
100 110 0.0 0.6 colorpair
101 109 0.0 0.6 colorpair
102 108 0.32 0.6 colorpair
103 107 0.16 1 colorpair
144 156 0.16 0.6 colorpair
145 155 0.0 1 colorpair
146 154 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
89 121 1 gmark
90 120 1 gmark
90 cmark
120 cmark
91 119 1 gmark
91 cmark
92 118 2 gmark
118 cmark
93 117 2 gmark
97 cmark
98 112 2 gmark
99 111 2 gmark
99 cmark
111 cmark
100 110 1 gmark
101 109 1 gmark
102 108 1 gmark
102 cmark
108 cmark
103 cmark
144 156 1 gmark
156 cmark
146 cmark

% End Annotations
showpage
end
%%EOF
