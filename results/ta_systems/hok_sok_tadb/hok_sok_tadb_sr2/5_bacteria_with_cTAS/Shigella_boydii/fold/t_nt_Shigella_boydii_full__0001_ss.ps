%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:11:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCCAUACUGAC_GUGGACUAGACAUGCAGAGGCCUCGUGGGUUAAUGAAAAUUAACUACGGGGCUUUUGUCC_______UUCUGCCACACGACAGGAUAACAAACCACCUUCACGUCAUGAGGCAGAAAGCCUCAAGCGCC____________\
) } def
/len { sequence length } bind def

/coor [
[112.84206390 231.39500427]
[125.33250427 222.83535767]
[121.30991364 208.38478088]
[108.25334930 201.30935669]
[103.96801758 186.71173096]
[111.47791290 173.06477356]
[107.45532990 158.61421204]
[103.43273926 144.16365051]
[99.41014862 129.71308899]
[95.38755798 115.26252747]
[91.98974609 129.87261963]
[93.94889069 144.74412537]
[92.12955475 159.63339233]
[86.64719391 173.59561157]
[77.84967804 185.74484253]
[66.29524994 195.31015015]
[52.71708679 201.68458557]
[37.97677612 204.46366882]
[23.00965691 203.47103882]
[8.76545143 198.76969910]
[-3.85198402 190.65795898]
[-14.04202080 179.65054321]
[-21.15805817 166.44592285]
[-24.74855614 151.88198853]
[-24.58567810 136.88287354]
[-20.67976379 122.40033722]
[-13.27865791 109.35336304]
[-2.85199070 98.56982422]
[9.93862057 90.73399353]
[24.28155899 86.34307861]
[39.26670456 85.67571259]
[53.94319153 88.77423096]
[67.38068390 95.44265747]
[82.30398560 96.95760345]
[69.93386078 88.47350311]
[57.56373596 79.98940277]
[45.19361115 71.50529480]
[32.82348633 63.02119446]
[20.37168121 54.65743256]
[4.59008884 53.53853226]
[-1.79167593 40.08036041]
[-14.32399273 31.83772850]
[-26.85630989 23.59509277]
[-37.90807343 33.84799194]
[-51.09271622 41.15748596]
[-65.64369202 45.09860992]
[-80.71503448 45.44223022]
[-95.43051147 42.16837311]
[-108.93458557 35.46737289]
[-120.44215393 25.72882080]
[-129.28416443 13.51889896]
[-134.94657898 -0.45252171]
[-137.10015869 -15.37316132]
[-135.61973572 -30.37555313]
[-130.59135437 -44.58747864]
[-122.30735779 -57.18267441]
[-111.24938202 -67.42887115]
[-98.06031036 -74.73036957]
[-83.50695038 -78.66267395]
[-68.43540192 -78.99715424]
[-53.72190857 -75.71437836]
[-40.22190094 -69.00518799]
[-28.72024345 -59.25966263]
[-19.88563156 -47.04438400]
[-14.23169708 -33.06953049]
[-12.08715248 -18.14758873]
[-13.57667828 -3.14609790]
[-18.61367607 11.06277561]
[-6.08135843 19.30541039]
[6.45095873 27.54804420]
[21.33615494 28.07737541]
[28.61431503 42.12511444]
[35.96703339 43.17849350]
[41.30759048 50.65106964]
[53.67771530 59.13516998]
[66.04784393 67.61927795]
[78.41796875 76.10337830]
[90.78809357 84.58747864]
[80.38776398 73.77854156]
[77.10041046 59.14319611]
[81.87915802 44.92477036]
[93.33847046 35.24571228]
[108.15586853 32.91233063]
[122.03524780 38.60116196]
[130.95246887 50.66280365]
[132.32209778 65.60014343]
[125.74702454 79.08229828]
[113.13595581 87.19956970]
[127.12921143 81.79690552]
[141.12246704 76.39424133]
[155.11572266 70.99157715]
[169.10897827 65.58890533]
[183.04919434 60.05081558]
[196.87939453 54.24344635]
[210.65263367 48.30224991]
[207.41133118 33.60903549]
[207.00958252 18.56792259]
[209.46191406 3.72263503]
[214.67965698 -10.39018059]
[222.47422791 -23.26035309]
[232.56381226 -34.42263412]
[244.58372498 -43.47351837]
[258.09942627 -50.08581543]
[272.62231445 -54.02049637]
[287.62744141 -55.13532639]
[302.57235718 -53.39000702]
[316.91680908 -48.84762955]
[330.14224243 -41.67239380]
[341.77059937 -32.12368393]
[351.38150024 -20.54668045]
[358.62753296 -7.35988379]
[363.24673462 6.96001291]
[365.07214355 21.89535332]
[364.03778076 36.90623474]
[360.18099976 51.45002365]
[353.64123535 65.00096893]
[344.65490723 77.06921387]
[333.54687500 87.21849823]
[320.71865845 95.08193207]
[306.63403320 100.37525940]
[291.80209351 102.90712738]
[276.75903320 102.58601379]
[262.04867554 99.42352295]
[248.20274353 93.53397369]
[235.72178650 85.13027954]
[225.05696106 74.51622009]
[216.59382629 62.07548904]
[202.82058716 68.01668549]
[197.90011597 73.58094788]
[188.72218323 73.93667603]
[183.69474792 79.40447998]
[174.51164246 79.58216095]
[160.51838684 84.98483276]
[146.52513123 90.38749695]
[132.53187561 95.79016113]
[118.53862000 101.19282532]
[115.02992249 107.40972137]
[109.83811951 111.23993683]
[113.86071014 125.69049835]
[117.88330078 140.14106750]
[121.90589142 154.59162903]
[125.92848206 169.04219055]
[139.40957642 176.84590149]
[143.28320312 191.55812073]
[135.76046753 204.36219788]
[139.78306580 218.81275940]
[154.89973450 219.68745422]
[168.91238403 225.42543030]
[180.30102539 235.40428162]
[187.83030701 248.54158020]
[190.68350220 263.41229248]
[188.55113220 278.40335083]
[181.66448975 291.88864136]
[170.77058411 302.40536499]
[157.05111694 308.81274414]
[141.99424744 310.41580200]
[127.23326874 307.04058838]
[114.36930847 299.05325317]
[104.79777527 287.32022095]
[99.55690765 273.11416626]
[99.21519470 257.97607422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 146]
[3 145]
[6 142]
[7 141]
[8 140]
[9 139]
[10 138]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[39 72]
[41 70]
[42 69]
[43 68]
[88 136]
[89 135]
[90 134]
[91 133]
[92 132]
[93 130]
[94 128]
[95 127]
] def

init

% Start Annotations
2 146 0.0 1 colorpair
3 145 0.0 1 colorpair
6 142 0.0 1 colorpair
7 141 0.0 1 colorpair
8 140 0.0 1 colorpair
9 139 0.16 1 colorpair
10 138 0.0 1 colorpair
34 78 0.16 1 colorpair
35 77 0.16 1 colorpair
36 76 0.16 1 colorpair
37 75 0.0 0.6 colorpair
38 74 0.16 1 colorpair
39 72 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.16 1 colorpair
43 68 0.16 1 colorpair
89 135 0.0 1 colorpair
90 134 0.0 0.2 colorpair
91 133 0.0 1 colorpair
92 132 0.0 1 colorpair
93 130 0.0 1 colorpair
94 128 0.0 1 colorpair
95 127 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
139 cmark
34 cmark
35 cmark
77 cmark
36 cmark
37 75 1 gmark
38 cmark
42 cmark
43 cmark
88 136 4 gmark
88 cmark
136 cmark
90 134 2 gmark
95 127 2 gmark
95 cmark

% End Annotations
showpage
end
%%EOF
