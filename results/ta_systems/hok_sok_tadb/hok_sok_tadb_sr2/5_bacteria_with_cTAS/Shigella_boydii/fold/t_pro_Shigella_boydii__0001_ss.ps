%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:11:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUG___AAGC___AGCAAAAGGCGAUGUUAAUCGCCCUGAUCGUCAUCUGUUUAACCGUCAUAGUGUUCACACUGGUGACGAGAAAAGCCCUCUGCGAGGUGCGAAUCCGAAACGGCCAUACGGAGGUCGCUGCAUUCAUAGCUUACGAAUCUAAGGAG\
) } def
/len { sequence length } bind def

/coor [
[37.04797363 452.52185059]
[22.34111786 449.57647705]
[7.77050114 446.01782227]
[-6.63831377 441.85214233]
[-20.86005020 437.08673096]
[-34.86975479 431.72998047]
[-48.64285278 425.79122925]
[-62.15518188 419.28094482]
[-75.38303375 412.21054077]
[-88.30320740 404.59237671]
[-100.89303589 396.43988037]
[-113.13042450 387.76733398]
[-124.99391174 378.58996582]
[-136.46269226 368.92382812]
[-147.51663208 358.78588867]
[-158.13633728 348.19400024]
[-168.30319214 337.16665649]
[-177.99934387 325.72326660]
[-187.20779419 313.88385010]
[-195.91238403 301.66925049]
[-204.09785461 289.10083008]
[-211.74981689 276.20065308]
[-218.85487366 262.99139404]
[-232.35110474 269.53750610]
[-245.84732056 276.08364868]
[-259.34353638 282.62979126]
[-268.09054565 296.50143433]
[-284.46444702 295.59182739]
[-291.62118530 280.83673096]
[-282.19851685 267.41488647]
[-265.88967896 269.13357544]
[-252.39346313 262.58743286]
[-238.89724731 256.04129028]
[-225.40101624 249.49516296]
[-231.37579346 235.73765564]
[-236.76921082 221.74201965]
[-241.57183838 207.53280640]
[-245.77522278 193.13493347]
[-249.37200928 178.57368469]
[-252.35586548 163.87458801]
[-254.72158813 149.06344604]
[-256.46499634 134.16621399]
[-257.58303833 119.20904541]
[-258.07379150 104.21817780]
[-257.93630981 89.21990967]
[-257.17092896 74.24055481]
[-255.77894592 59.30639267]
[-253.76278687 44.44361877]
[-251.12602234 29.67831230]
[-247.87326050 15.03637123]
[-244.01020813 0.54348588]
[-239.54365540 -13.77491951]
[-234.48141479 -27.89372444]
[-228.83238220 -41.78816223]
[-222.60647583 -55.43385315]
[-215.81460571 -68.80686188]
[-208.46868896 -81.88372803]
[-200.58161926 -94.64150238]
[-192.16722107 -107.05781555]
[-183.24026489 -119.11087799]
[-173.81640625 -130.77954102]
[-163.91218567 -142.04335022]
[-153.54496765 -152.88252258]
[-142.73295593 -163.27806091]
[-131.49510193 -173.21171570]
[-119.85112000 -182.66607666]
[-107.82145691 -191.62452698]
[-95.42720032 -200.07138062]
[-82.69009399 -207.99180603]
[-69.63249207 -215.37190247]
[-56.27729797 -222.19874573]
[-42.64794159 -228.46032715]
[-28.76833153 -234.14569092]
[-14.66281700 -239.24484253]
[-0.35614583 -243.74884033]
[14.12658405 -247.64979553]
[28.75996399 -250.94085693]
[43.51832581 -253.61624146]
[58.37577057 -255.67126465]
[73.30624390 -257.10232544]
[88.28354645 -257.90689087]
[103.28140259 -258.08358765]
[118.27349854 -257.63208008]
[133.23353577 -256.55316162]
[148.13526917 -254.84872437]
[162.95257568 -252.52177429]
[177.65942383 -249.57637024]
[192.23002625 -246.01770020]
[206.63883972 -241.85198975]
[220.86056519 -237.08656311]
[234.87026978 -231.72976685]
[248.64335632 -225.79100037]
[262.15567017 -219.28068542]
[275.38351440 -212.21025085]
[288.30368042 -204.59210205]
[300.89349365 -196.43959045]
[313.13085938 -187.76701355]
[324.99435425 -178.58959961]
[336.46310425 -168.92344666]
[347.51702881 -158.78552246]
[358.13671875 -148.19358826]
[368.30355835 -137.16624451]
[377.99969482 -125.72282410]
[387.20812988 -113.88341522]
[395.91268921 -101.66878510]
[404.09814453 -89.10035706]
[411.75009155 -76.20018005]
[418.85513306 -62.99089050]
[425.40078735 -49.49565887]
[431.37557983 -35.73816299]
[436.76904297 -21.74253273]
[441.57168579 -7.53332853]
[445.77508545 6.86452627]
[449.37188721 21.42577171]
[452.35577393 36.12486267]
[454.72149658 50.93601608]
[456.46493530 65.83323669]
[457.58300781 80.79040527]
[458.07376099 95.78127289]
[457.93634033 110.77953339]
[457.17095947 125.75889587]
[455.77899170 140.69305420]
[453.76287842 155.55583191]
[451.12612915 170.32115173]
[447.87338257 184.96308899]
[444.01037598 199.45597839]
[439.54382324 213.77439880]
[434.48162842 227.89320374]
[428.83261108 241.78765869]
[422.60671997 255.43334961]
[415.81488037 268.80636597]
[408.46896362 281.88323975]
[400.58190918 294.64105225]
[392.16754150 307.05737305]
[383.24060059 319.11044312]
[373.81677246 330.77911377]
[363.91256714 342.04293823]
[353.54534912 352.88214111]
[342.73336792 363.27767944]
[331.49551392 373.21136475]
[319.85156250 382.66574097]
[307.82189941 391.62420654]
[295.42767334 400.07107544]
[282.69058228 407.99151611]
[269.63296509 415.37164307]
[256.27780151 422.19848633]
[242.64845276 428.46011353]
[228.76884460 434.14547729]
[214.66334534 439.24465942]
[200.35667419 443.74868774]
[185.87394714 447.64965820]
[171.24057007 450.94073486]
[156.48222351 453.61614990]
[141.62477112 455.67120361]
[126.69430542 457.10226440]
[111.71701050 457.90689087]
[96.71915436 458.08358765]
[81.72705078 457.63211060]
[66.76701355 456.55322266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 34]
[24 33]
[25 32]
[26 31]
] def

init

% Start Annotations
25 32 0.32 0.2 colorpair
26 31 0.48 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
23 34 5 gmark
23 cmark
34 cmark
24 33 5 gmark
24 cmark
33 cmark
25 32 2 gmark
25 cmark
32 cmark
26 31 1 gmark
26 cmark
31 cmark

% End Annotations
showpage
end
%%EOF
