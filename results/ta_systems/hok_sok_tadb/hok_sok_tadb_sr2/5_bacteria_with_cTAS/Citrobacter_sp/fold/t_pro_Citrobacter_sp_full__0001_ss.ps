%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 01:56:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AACUGCCACGAAGUACCCUUAUCUGGUGUGUGUUAAUAGUGUGUCUCACACUGCUGAUAUUCACAUACCUGACCCGAAAAUCGCUCUGCGAAAUCCGCUACAGGGACGGAAACAGGGAGGUGGCGGCUUUAAUGGCUUACGAAUCCGCUAA_\
) } def
/len { sequence length } bind def

/coor [
[65.60150146 260.80407715]
[59.03652573 247.23950195]
[55.77730942 232.52644348]
[55.99961472 217.45835876]
[59.69145203 202.84783936]
[66.65372467 189.48283386]
[76.51097107 178.08409119]
[88.73159790 169.26632690]
[102.65657043 163.50506592]
[100.26559448 148.69685364]
[97.87461853 133.88864136]
[95.48364258 119.08042145]
[90.48248291 133.22215271]
[91.34050751 148.19758606]
[87.19657898 162.61383057]
[78.51726532 174.84777832]
[66.27973938 183.52204895]
[51.86179733 187.66003418]
[36.88671112 186.79583740]
[23.04049110 181.02676392]
[11.88204288 171.00234985]
[4.66766882 157.85119629]
[2.20961523 143.05397034]
[4.78462791 128.27664185]
[12.10279369 115.18296051]
[23.34017944 105.24710846]
[37.23159409 99.58773041]
[52.21304703 98.84201050]
[66.59580231 103.09291077]
[81.50546265 101.44918823]
[67.63295746 95.74361420]
[53.76045227 90.03804779]
[38.05453873 91.94457245]
[29.22697258 79.94776154]
[15.35446548 74.24219513]
[1.48195779 68.53662109]
[-12.39054966 62.83105469]
[-26.26305771 57.12548447]
[-40.70332336 62.96641159]
[-54.69074249 56.98253250]
[-60.17018509 43.17995071]
[-74.04269409 37.47438049]
[-87.91519928 31.76881027]
[-101.78770447 26.06324005]
[-115.66021729 20.35766792]
[-129.53271484 14.65209770]
[-144.83314514 19.47666740]
[-158.06385803 10.40318584]
[-159.07536316 -5.60794783]
[-147.09175110 -16.27436256]
[-131.30580139 -13.41369629]
[-123.82714844 0.77959061]
[-109.95464325 6.48516130]
[-96.08213806 12.19073200]
[-82.20962524 17.89630127]
[-68.33712006 23.60187340]
[-54.46461487 29.30744362]
[-40.85977554 23.35396194]
[-26.70980072 28.94260216]
[-20.55748749 43.25297546]
[-6.68497896 48.95854568]
[7.18752813 54.66411591]
[21.06003571 60.36968613]
[34.93254471 66.07525635]
[49.64620209 63.76063156]
[59.46602249 76.16553497]
[73.33853149 81.87110901]
[87.21103668 87.57667542]
[93.22595978 83.94607544]
[100.02249146 82.98050690]
[106.49951935 84.70961761]
[117.05292511 74.05008698]
[127.60633850 63.39055634]
[138.15974426 52.73102951]
[140.23320007 46.35774612]
[144.58296204 42.59157181]
[149.35510254 41.86676025]
[160.32653809 31.63800621]
[171.29798889 21.40925026]
[161.73995972 -0.75276119]
[162.05142212 -24.85210991]
[172.15057373 -46.69816971]
[190.25602722 -62.50340652]
[213.20097351 -69.54004669]
[236.98706055 -66.61081696]
[243.64942932 -80.05004883]
[250.31178284 -93.48928070]
[256.97415161 -106.92852020]
[258.59197998 -123.80509186]
[275.25689697 -126.92237091]
[282.86566162 -111.77169037]
[270.41336060 -100.26615906]
[263.75100708 -86.82692719]
[257.08865356 -73.38769531]
[250.42630005 -59.94845963]
[256.56771851 -55.22025681]
[262.01861572 -49.70632553]
[266.67916870 -43.50655365]
[270.46398926 -36.73337173]
[273.30343628 -29.50975990]
[275.14520264 -21.96696663]
[275.95498657 -14.24216366]
[275.71731567 -6.47592497]
[274.43579102 1.19031596]
[272.13302612 8.61684990]
[268.85021973 15.66823387]
[264.64648438 22.21576309]
[259.59774780 28.13982201]
[253.79537964 33.33206558]
[247.34452820 37.69739914]
[240.36224365 41.15573120]
[232.97534180 43.64342499]
[225.31808472 45.11448669]
[217.52973938 45.54140854]
[209.75209045 44.91567612]
[202.12681580 43.24795151]
[194.79292297 40.56787491]
[187.88417053 36.92355347]
[181.52674866 32.38069153]
[170.55529785 42.60944748]
[159.58386230 52.83820343]
[148.81927490 63.28443909]
[138.26586914 73.94396973]
[127.71245575 84.60349274]
[117.15904999 95.26302338]
[128.86506653 85.88384247]
[143.53340149 82.74696350]
[158.05165100 86.51799011]
[169.33924866 96.39675140]
[175.00115967 110.28713989]
[173.83598328 125.24182129]
[166.09097290 138.08763123]
[153.40950012 146.09889221]
[138.48239136 147.57572937]
[124.47692108 142.20477295]
[114.36486816 131.12568665]
[110.29185486 116.68945312]
[112.68283081 131.49766541]
[115.07380676 146.30587769]
[117.46478271 161.11408997]
[132.49533081 162.20010376]
[146.87008667 166.72370911]
[159.81385803 174.44094849]
[170.62858582 184.93562317]
[178.73104858 197.64179993]
[183.68429565 211.87423706]
[185.22119141 226.86538696]
[183.25888062 241.80680847]
[177.90316772 255.89271545]
[169.44287109 268.36349487]
[158.33427429 278.54660034]
[145.17642212 285.89285278]
[130.67890930 290.00613403]
[115.62357330 290.66455078]
[100.82231903 287.83264160]
[87.07337189 281.66308594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[71 125]
[72 124]
[73 123]
[74 122]
[77 121]
[78 120]
[79 119]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% Start Annotations
9 140 0.0 0.2 colorpair
10 139 0.0 1 colorpair
11 138 0.0 1 colorpair
12 137 0.16 1 colorpair
30 68 0.0 1 colorpair
31 67 0.0 1 colorpair
32 66 0.16 1 colorpair
34 64 0.0 1 colorpair
35 63 0.0 1 colorpair
36 62 0.32 1 colorpair
37 61 0.16 1 colorpair
38 60 0.0 1 colorpair
41 57 0.16 1 colorpair
42 56 0.0 0.2 colorpair
43 55 0.0 1 colorpair
44 54 0.16 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
71 125 0.0 1 colorpair
72 124 0.16 1 colorpair
73 123 0.0 1 colorpair
74 122 0.0 1 colorpair
77 121 0.0 1 colorpair
78 120 0.0 0.2 colorpair
79 119 0.0 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.16 1 colorpair
88 92 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 140 2 gmark
12 cmark
66 cmark
36 cmark
62 cmark
37 cmark
61 cmark
57 cmark
42 56 2 gmark
54 cmark
72 cmark
78 120 2 gmark
87 cmark
93 cmark

% End Annotations
showpage
end
%%EOF
