%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 02:05:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AAUGCCACUAAAAACUCUGUUAUGGUGCGUAUUUAUUGUGUGUCUGACACUGCUGAUAUUCACCUUUAUGACACGAAAAUCGCUCUGCGAGAUUCGAAUCAAGGAUGGACAUAGGGAGGUGGCGGCUAUAAUGGCCUACGAAUCCGGU___\
) } def
/len { sequence length } bind def

/coor [
[144.25872803 445.72793579]
[129.34376526 447.31192017]
[114.37447357 448.25277710]
[99.37856293 448.54876709]
[84.38379669 448.19931030]
[69.41795349 447.20507812]
[54.50873947 445.56790161]
[39.68376160 443.29080200]
[24.97047997 440.37802124]
[10.39613342 436.83493042]
[-4.01228809 432.66812134]
[-18.22810173 427.88525391]
[-32.22498703 422.49523926]
[-45.97702026 416.50805664]
[-59.45873642 409.93475342]
[-72.64517212 402.78750610]
[-85.51190948 395.07958984]
[-98.03512573 386.82525635]
[-110.19162750 378.03976440]
[-121.95890045 368.73944092]
[-133.31515503 358.94143677]
[-144.23936462 348.66397095]
[-154.71130371 337.92602539]
[-164.71156311 326.74746704]
[-174.22164917 315.14904785]
[-183.22393799 303.15222168]
[-191.70176697 290.77920532]
[-199.63943481 278.05291748]
[-207.02223206 264.99691772]
[-213.83650208 251.63537598]
[-220.06961060 237.99304199]
[-225.71002197 224.09516907]
[-230.74729919 209.96749878]
[-235.17211914 195.63621521]
[-238.97627258 181.12782288]
[-242.15270996 166.46919250]
[-244.69557190 151.68748474]
[-246.60012817 136.81005859]
[-247.86286926 121.86447906]
[-248.48144531 106.87840271]
[-248.45471191 91.87959290]
[-247.78273010 76.89582062]
[-246.46673584 61.95483017]
[-244.50915527 47.08428955]
[-241.91363525 32.31173706]
[-238.68496704 17.66452980]
[-234.82911682 3.16978645]
[-230.35325623 -11.14564896]
[-225.26565552 -25.25526810]
[-219.57574463 -39.13294220]
[-213.29405212 -52.75297928]
[-206.43220520 -66.09014893]
[-199.00291443 -79.11975861]
[-191.01994324 -91.81768036]
[-182.49807739 -104.16040039]
[-173.45307922 -116.12506104]
[-163.90171814 -127.68951416]
[-153.86166382 -138.83233643]
[-143.35153198 -149.53289795]
[-132.39076233 -159.77137756]
[-120.99964905 -169.52882385]
[-109.19931030 -178.78717041]
[-97.01157379 -187.52925110]
[-84.45901489 -195.73890686]
[-71.56488800 -203.40092468]
[-58.35306168 -210.50111389]
[-44.84799957 -217.02632141]
[-31.07471657 -222.96447754]
[-17.05871010 -228.30456543]
[-2.82593966 -233.03672791]
[11.59724140 -237.15216064]
[26.18412399 -240.64328003]
[40.90769577 -243.50361633]
[55.74069214 -245.72784424]
[70.65564728 -247.31187439]
[85.62493896 -248.25276184]
[100.62085724 -248.54876709]
[115.61561584 -248.19934082]
[130.58146667 -247.20513916]
[145.49067688 -245.56797791]
[160.31565857 -243.29090881]
[175.02894592 -240.37815857]
[189.60330200 -236.83509827]
[204.01173401 -232.66828918]
[218.22755432 -227.88546753]
[232.22444153 -222.49546814]
[245.97648621 -216.50828552]
[259.45822144 -209.93501282]
[272.64465332 -202.78779602]
[285.51141357 -195.07989502]
[298.03463745 -186.82557678]
[310.19116211 -178.04011536]
[321.95843506 -168.73980713]
[333.31472778 -158.94183350]
[344.23895264 -148.66436768]
[354.71090698 -137.92643738]
[364.71118164 -126.74791718]
[374.22128296 -115.14951324]
[383.22360229 -103.15270233]
[391.70144653 -90.77970123]
[399.63912964 -78.05342102]
[407.02194214 -64.99742889]
[413.83624268 -51.63589859]
[420.06936646 -37.99357224]
[425.70980835 -24.09571266]
[430.74713135 -9.96805859]
[435.17196655 4.36323071]
[438.97613525 18.87161827]
[442.15258789 33.53023529]
[444.69549561 48.31193924]
[446.60006714 63.18935776]
[447.86282349 78.13494110]
[448.48144531 93.12101746]
[448.45474243 108.11982727]
[447.78277588 123.10359955]
[446.46679688 138.04458618]
[444.50924683 152.91513062]
[441.91375732 167.68768311]
[438.68508911 182.33489990]
[434.82928467 196.82965088]
[430.35345459 211.14509583]
[425.26586914 225.25473022]
[419.57598877 239.13241577]
[413.29431152 252.75245667]
[406.43249512 266.08963013]
[399.00320435 279.11926270]
[391.02026367 291.81719971]
[382.49841309 304.15994263]
[373.45343018 316.12460327]
[385.01879883 325.67672729]
[396.58413696 335.22882080]
[411.92871094 332.21588135]
[425.59497070 339.81637573]
[431.13012695 354.44155884]
[425.92062378 369.18588257]
[412.42626953 377.08752441]
[397.01864624 374.41558838]
[386.97277832 362.43164062]
[387.03204346 346.79415894]
[375.46667480 337.24206543]
[363.90133667 327.68994141]
[353.86126709 338.83276367]
[343.35110474 349.53329468]
[332.39031982 359.77175903]
[320.99920654 369.52920532]
[309.19885254 378.78750610]
[297.01107788 387.52957153]
[284.45852661 395.73922729]
[271.56439209 403.40121460]
[258.35253906 410.50137329]
[244.84747314 417.02655029]
[231.07417297 422.96469116]
[217.05816650 428.30477905]
[202.82537842 433.03689575]
[188.40219116 437.15231323]
[173.81530762 440.64340210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
130 140 0.0 0.2 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
129 141 4 gmark
129 cmark
141 cmark
130 140 2 gmark

% End Annotations
showpage
end
%%EOF
