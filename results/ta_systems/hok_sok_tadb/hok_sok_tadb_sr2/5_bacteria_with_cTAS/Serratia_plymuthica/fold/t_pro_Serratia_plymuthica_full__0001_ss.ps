%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:10:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__A_AUGCAGCAGGAACGGGUCGUUCUGAGGCUGAUGAUUAUCUGCAUGACGCUGAUUGCGUUCAUGUUGAUCACUCGCGGUUCGCUAUGUGAACUGCGCAUCAAACUGGGAGACACGGAGGUUGCGGCCAUUUUGGCUUACGAAUCCGAAG__\
) } def
/len { sequence length } bind def

/coor [
[90.83660889 304.47399902]
[79.74351501 314.68215942]
[66.52945709 321.93832397]
[51.96267319 325.82064819]
[36.89006424 326.10336304]
[22.18793297 322.77008057]
[8.71103859 316.01458740]
[-2.75708771 306.22964478]
[-11.54970551 293.98410034]
[-17.15562248 279.98989868]
[-19.24891853 265.06069946]
[-17.70789337 250.06439209]
[-12.62213802 235.87290955]
[-4.28733253 223.31127930]
[6.81194830 213.10983276]
[20.03040695 205.86167908]
[34.59954071 201.98820496]
[49.67231750 201.71461487]
[52.98895264 187.08587646]
[56.30559158 172.45713806]
[50.19576263 156.03282166]
[62.74057007 142.59005737]
[65.76004791 127.89710999]
[68.77952576 113.20416260]
[59.08551025 124.65082550]
[54.36053085 138.88720703]
[44.96199036 150.57769775]
[32.07300568 158.25064087]
[17.31608772 160.94013977]
[2.54889655 158.30764771]
[-10.36962509 150.68453979]
[-19.81324577 139.03044128]
[-24.59316635 124.81240845]
[-24.10767746 109.82026672]
[-18.41789055 95.94127655]
[-8.24005795 84.92257690]
[5.14459753 78.15123749]
[20.05116844 76.47966766]
[34.60316086 80.11828613]
[46.97013474 88.61044312]
[61.61014557 91.87695312]
[50.32837296 81.99153137]
[39.04660034 72.10610199]
[23.56814194 68.83076477]
[19.09482765 54.62376785]
[7.81305647 44.73834229]
[-3.46871591 34.85292053]
[-14.75048828 24.96749496]
[-26.03226089 15.08207035]
[-37.31403351 5.19664574]
[-55.43171692 2.06141949]
[-60.48384094 -14.71844959]
[-71.96364594 -24.37319565]
[-88.00659180 -24.43104362]
[-97.85060120 -37.09891510]
[-93.94419861 -52.65910721]
[-79.28402710 -59.17516708]
[-65.11612701 -51.64853668]
[-62.30889893 -35.85299683]
[-50.82909393 -26.19825172]
[-38.71711349 -26.91809654]
[-29.06751442 -18.91745949]
[-27.42860794 -6.08512640]
[-16.14683723 3.80029798]
[-4.86506414 13.68572235]
[6.41670847 23.57114601]
[17.69848061 33.45656967]
[28.98025322 43.34199524]
[43.65176392 45.91026306]
[48.93202591 60.82432938]
[60.21379852 70.70975494]
[71.49556732 80.59517670]
[78.69564819 78.49544525]
[74.49640656 64.09523010]
[88.89669800 59.89620972]
[93.09580231 74.29598999]
[100.29588318 72.19625854]
[104.49534607 57.79610062]
[108.69480896 43.39594269]
[112.89427185 28.99578476]
[103.29004669 16.80814934]
[102.71741486 1.30164409]
[111.39657593 -11.56116486]
[125.99020386 -16.83426285]
[140.88676453 -12.49003887]
[150.35820007 -0.19893360]
[150.76258850 15.31287193]
[141.94439697 28.08077049]
[127.29442596 33.19524765]
[123.09496307 47.59540558]
[118.89550018 61.99555969]
[114.69603729 76.39572144]
[119.75205994 81.93527222]
[130.83132935 71.82340240]
[140.94302368 82.90282440]
[129.86410522 93.01438141]
[134.92012024 98.55393219]
[149.64291382 95.68350983]
[164.36570740 92.81308746]
[172.24467468 88.07357025]
[179.41581726 90.03685760]
[194.19375610 87.46540833]
[208.97171021 84.89395905]
[214.75007629 75.59159088]
[224.50796509 71.12725067]
[234.88932800 72.76871490]
[242.46907043 79.72801971]
[257.33908081 77.75756836]
[272.20910645 75.78711700]
[280.44677734 62.49522400]
[295.31716919 57.65725327]
[309.79888916 63.55755615]
[317.05413818 77.41018677]
[313.65719604 92.67435455]
[301.21200562 102.14279175]
[285.59481812 101.34478760]
[274.17956543 90.65713501]
[259.30953979 92.62758636]
[244.43952942 94.59803772]
[230.07940674 107.49572754]
[211.54315186 99.67190552]
[196.76521301 102.24335480]
[181.98725891 104.81480408]
[167.23612976 107.53588104]
[152.51333618 110.40630341]
[137.79054260 113.27672577]
[134.17811584 127.83524323]
[145.85122681 137.25534058]
[157.52433777 146.67544556]
[169.19746399 156.09555054]
[180.87057495 165.51565552]
[196.99385071 170.75743103]
[196.42030334 187.70167542]
[179.97946167 191.84115601]
[171.45046997 177.18876648]
[159.77735901 167.76866150]
[148.10423279 158.34855652]
[136.43112183 148.92846680]
[124.75800323 139.50836182]
[95.91150665 134.65180969]
[83.47247314 116.22364044]
[80.45299530 130.91659546]
[77.43351746 145.60954285]
[83.87892151 156.82611084]
[81.02165985 169.03106689]
[70.93432617 175.77377319]
[67.61769104 190.40251160]
[64.30104828 205.03125000]
[77.78203583 211.77857971]
[89.25609589 221.55657959]
[98.05613708 233.79679871]
[103.67053223 247.78756714]
[105.77288055 262.71551514]
[104.24095154 277.71273804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 148]
[19 147]
[20 146]
[22 143]
[23 142]
[24 141]
[41 72]
[42 71]
[43 70]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[52 60]
[53 59]
[77 92]
[78 91]
[79 90]
[80 89]
[97 126]
[98 125]
[99 124]
[101 123]
[102 122]
[103 121]
[107 119]
[108 118]
[109 117]
[127 139]
[128 138]
[129 137]
[130 136]
[131 135]
] def

init

% Start Annotations
18 148 0.0 1 colorpair
19 147 0.0 0.2 colorpair
20 146 0.16 1 colorpair
22 143 0.16 1 colorpair
23 142 0.0 0.2 colorpair
24 141 0.0 1 colorpair
41 72 0.0 1 colorpair
42 71 0.16 0.2 colorpair
43 70 0.16 1 colorpair
45 68 0.0 1 colorpair
46 67 0.16 0.2 colorpair
47 66 0.16 1 colorpair
48 65 0.16 1 colorpair
49 64 0.16 1 colorpair
50 63 0.0 1 colorpair
52 60 0.0 1 colorpair
53 59 0.16 0.2 colorpair
77 92 0.0 1 colorpair
78 91 0.16 1 colorpair
79 90 0.0 1 colorpair
80 89 0.16 1 colorpair
97 126 0.0 1 colorpair
98 125 0.0 1 colorpair
99 124 0.16 1 colorpair
101 123 0.0 1 colorpair
102 122 0.0 1 colorpair
103 121 0.0 1 colorpair
107 119 0.16 1 colorpair
108 118 0.16 1 colorpair
109 117 0.0 1 colorpair
127 139 0.16 1 colorpair
128 138 0.0 1 colorpair
129 137 0.0 1 colorpair
130 136 0.0 1 colorpair
131 135 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 147 2 gmark
20 cmark
22 cmark
23 142 2 gmark
42 71 2 gmark
71 cmark
43 cmark
46 67 2 gmark
46 cmark
67 cmark
47 cmark
48 cmark
65 cmark
49 cmark
64 cmark
53 59 2 gmark
53 cmark
59 cmark
91 cmark
80 cmark
99 cmark
107 cmark
108 cmark
127 cmark

% End Annotations
showpage
end
%%EOF
