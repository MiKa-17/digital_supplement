%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:57:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGCGGCUAAUCUCUGAUGUGUCUAGUAUCAAGAUUGAGCCUCGGGUUAAUUGAAAAAUUACUCGGGGCUUUUCUCUUUUUGCCACACAACACGGUAACAAACCAACCAAACGUUAUGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[228.88948059 275.43634033]
[219.44540405 263.78262329]
[210.00134277 252.12887573]
[196.91712952 258.22872925]
[182.74116516 261.00732422]
[168.30342102 260.29736328]
[154.45031738 256.13586426]
[141.99507141 248.76239014]
[131.67002869 238.60517883]
[124.08351135 226.25628662]
[119.68405914 212.43708801]
[118.73386383 197.95614624]
[121.29315948 183.66189575]
[127.21643829 170.39291382]
[136.16069031 158.92874146]
[126.97489166 147.07037354]
[113.06410217 141.74691772]
[110.72985840 126.09886169]
[101.54405975 114.24047852]
[88.67607880 108.77178192]
[86.59755707 94.94531250]
[77.41176605 83.08692932]
[68.22596741 71.22854614]
[59.04018021 59.37016678]
[49.85438538 47.51178360]
[38.90632248 46.75270081]
[30.38505554 40.19281769]
[26.99321747 30.22062874]
[29.63492584 20.25202751]
[20.97887039 8.00161171]
[12.32281303 -4.24880362]
[-2.99930406 -7.05423975]
[-11.60326481 -19.60121155]
[-8.83428478 -34.19121933]
[-17.49034119 -46.44163513]
[-26.14639854 -58.69205093]
[-34.80245590 -70.94246674]
[-52.06093597 -73.56330872]
[-61.92216492 -87.55747986]
[-58.71293640 -104.03065491]
[-67.63601685 -116.08795929]
[-76.55908966 -128.14526367]
[-85.48217010 -140.20257568]
[-94.40525055 -152.25988770]
[-103.32832336 -164.31719971]
[-112.25140381 -176.37449646]
[-121.17448425 -188.43180847]
[-130.09756470 -200.48912048]
[-139.02062988 -212.54643250]
[-147.94371033 -224.60372925]
[-155.62577820 -229.69076538]
[-156.92692566 -237.02534485]
[-165.58297729 -249.27577209]
[-174.23902893 -261.52618408]
[-182.89509583 -273.77661133]
[-198.00570679 -280.14852905]
[-199.77400208 -296.45205688]
[-186.38090515 -305.91552734]
[-171.60409546 -298.80371094]
[-170.64466858 -282.43264771]
[-161.98861694 -270.18225098]
[-153.33256531 -257.93182373]
[-144.67649841 -245.68141174]
[-135.88639832 -233.52680969]
[-126.96332550 -221.46949768]
[-118.04025269 -209.41220093]
[-109.11717224 -197.35488892]
[-100.19409180 -185.29757690]
[-91.27101898 -173.24026489]
[-82.34793854 -161.18296814]
[-73.42486572 -149.12565613]
[-64.50178528 -137.06834412]
[-55.57870865 -125.01103973]
[-46.65562820 -112.95372772]
[-33.72603607 -112.84064484]
[-23.07763672 -105.16723633]
[-18.75254822 -92.56874847]
[-22.55203819 -79.59852600]
[-13.89598179 -67.34810638]
[-5.23992586 -55.09769440]
[3.41613078 -42.84727859]
[18.09316826 -40.58449936]
[27.04615211 -28.28414536]
[24.57322884 -12.90486050]
[33.22928619 -0.65444452]
[41.88534164 11.59597111]
[59.97619629 18.29373360]
[61.71276855 38.32599258]
[70.89855957 50.18437576]
[80.08435059 62.04275513]
[89.27014160 73.90113831]
[98.45594025 85.75952148]
[111.32392120 91.22821808]
[113.40244293 105.05468750]
[122.58823395 116.91307068]
[137.15606689 123.08470154]
[138.83328247 137.88456726]
[148.01907349 149.74295044]
[162.39794922 143.64964294]
[177.85067749 141.47091675]
[193.33169556 143.34843445]
[207.79502869 149.14953613]
[220.26492310 158.47673035]
[229.90171814 170.69479370]
[236.05838013 184.97410583]
[238.32389832 200.34696960]
[236.55076599 215.77320862]
[230.86456299 230.21049500]
[221.65507507 242.68479919]
[231.09913635 254.33853149]
[240.54321289 265.99227905]
[255.93292236 265.31170654]
[268.62408447 273.72528076]
[273.86553955 287.83169556]
[269.84362793 302.14819336]
[279.28771973 313.80194092]
[288.73178101 325.45565796]
[298.17584229 337.10940552]
[306.07394409 341.85409546]
[307.69601440 349.12445068]
[316.88180542 360.98281860]
[326.06759644 372.84121704]
[335.25338745 384.69958496]
[344.43917847 396.55795288]
[353.62496948 408.41635132]
[369.29498291 411.85583496]
[376.24639893 426.31466675]
[369.14666748 440.70123291]
[353.44210815 443.97943115]
[341.17990112 433.63446045]
[341.76657104 417.60214233]
[332.58078003 405.74377441]
[323.39498901 393.88537598]
[314.20919800 382.02700806]
[305.02340698 370.16860962]
[295.83761597 358.31024170]
[286.52212524 346.55346680]
[277.07806396 334.89971924]
[267.63397217 323.24600220]
[258.18991089 311.59225464]
[243.35075378 312.56057739]
[230.63644409 304.51007080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[15 98]
[16 97]
[18 95]
[19 94]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[29 86]
[30 85]
[31 84]
[34 81]
[35 80]
[36 79]
[37 78]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[52 63]
[53 62]
[54 61]
[55 60]
[115 140]
[116 139]
[117 138]
[118 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% Start Annotations
1 111 0.0 1 colorpair
2 110 0.0 1 colorpair
3 109 0.0 1 colorpair
15 98 0.0 1 colorpair
16 97 0.0 1 colorpair
18 95 0.0 1 colorpair
19 94 0.0 1 colorpair
21 92 0.0 1 colorpair
22 91 0.0 1 colorpair
23 90 0.0 1 colorpair
24 89 0.0 1 colorpair
25 88 0.0 1 colorpair
29 86 0.0 1 colorpair
30 85 0.0 1 colorpair
31 84 0.0 1 colorpair
34 81 0.0 1 colorpair
35 80 0.0 1 colorpair
36 79 0.0 1 colorpair
37 78 0.0 1 colorpair
40 74 0.0 1 colorpair
41 73 0.0 1 colorpair
42 72 0.0 1 colorpair
43 71 0.0 1 colorpair
44 70 0.0 1 colorpair
45 69 0.0 1 colorpair
46 68 0.0 1 colorpair
47 67 0.0 1 colorpair
48 66 0.0 1 colorpair
49 65 0.0 1 colorpair
50 64 0.0 1 colorpair
52 63 0.0 1 colorpair
53 62 0.0 1 colorpair
54 61 0.0 1 colorpair
55 60 0.0 1 colorpair
115 140 0.0 1 colorpair
116 139 0.0 1 colorpair
117 138 0.0 1 colorpair
118 137 0.0 1 colorpair
120 136 0.0 1 colorpair
121 135 0.0 1 colorpair
122 134 0.0 1 colorpair
123 133 0.0 1 colorpair
124 132 0.0 1 colorpair
125 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
