%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:55:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGA___AUGCCGCAAAAGUAUCUGUUGUUUGGCUUAAUAGUGAUUUGCUUCACUAUUUUAUUAUUCACCUGGAUGGUUCGUGAUUCGCUAUGUGAAUUACAGCUCAGACAGGGAAAUAUUGAGCUGGUGGCAUUCUUAGCCUGUGAAAUUAAAC_G\
) } def
/len { sequence length } bind def

/coor [
[-38.26126099 563.65942383]
[-49.84247589 562.76251221]
[-61.36032104 561.25585938]
[-72.78269958 559.14355469]
[-84.07779694 556.43145752]
[-95.21414185 553.12719727]
[-106.16070557 549.23986816]
[-116.88699341 544.78039551]
[-127.36312103 539.76116943]
[-137.55989075 534.19616699]
[-147.44891357 528.10083008]
[-157.00260925 521.49212646]
[-166.19438171 514.38854980]
[-174.99859619 506.80984497]
[-183.39073181 498.77706909]
[-191.34741211 490.31265259]
[-198.84645081 481.44015503]
[-205.86694336 472.18426514]
[-212.38935852 462.57080078]
[-218.39549255 452.62649536]
[-223.86860657 442.37908936]
[-228.79344177 431.85711670]
[-233.15629578 421.08987427]
[-236.94497681 410.10733032]
[-240.14894104 398.94012451]
[-242.75924683 387.61935425]
[-244.76861572 376.17654419]
[-246.17144775 364.64355469]
[-246.96382141 353.05255127]
[-247.14350891 341.43582153]
[-246.71002197 329.82568359]
[-245.66455078 318.25451660]
[-244.00999451 306.75454712]
[-241.75094604 295.35781860]
[-238.89372253 284.09606934]
[-235.44624329 273.00070190]
[-231.41813660 262.10260010]
[-226.82057190 251.43215942]
[-221.66638184 241.01907349]
[-215.96992493 230.89236450]
[-209.74702454 221.08026123]
[-203.01504517 211.61010742]
[-195.79272461 202.50827026]
[-188.10017395 193.80010986]
[-179.95881653 185.50991821]
[-171.39131165 177.66076660]
[-162.42155457 170.27455139]
[-153.07450867 163.37184143]
[-143.37620544 156.97187805]
[-133.35365295 151.09249878]
[-123.03479004 145.75007629]
[-112.44834900 140.95951843]
[-101.62380981 136.73417664]
[-90.59133911 133.08583069]
[-79.38166046 130.02464294]
[-68.02599335 127.55915833]
[-56.55598450 125.69625092]
[-45.00358200 124.44111633]
[-33.40096283 123.79725647]
[-21.78045464 123.76647949]
[-10.17442989 124.34888458]
[1.38477981 125.54284668]
[12.86497116 127.34505463]
[24.23416138 129.75048828]
[35.46067429 132.75247192]
[46.51323318 136.34263611]
[57.36104965 140.51098633]
[67.97389221 145.24592590]
[74.90381622 131.94268799]
[81.83374786 118.63945007]
[74.32155609 104.24963379]
[76.79732513 88.20687103]
[88.29807281 76.75119781]
[104.35043335 74.33843994]
[111.01278687 60.89920807]
[117.67514801 47.45997620]
[110.64763641 33.75157547]
[113.01192474 18.70951653]
[123.65430450 8.06978607]
[138.34524536 5.76449585]
[145.00759888 -7.67473745]
[151.66995239 -21.11397171]
[146.85385132 -35.92757416]
[153.80187988 -49.46195984]
[167.95405579 -53.96208954]
[174.61642456 -67.40132141]
[181.27877808 -80.84056091]
[187.94113159 -94.27979279]
[189.55899048 -111.15637207]
[206.22389221 -114.27364349]
[213.83264160 -99.12296295]
[201.38037109 -87.61743164]
[194.71800232 -74.17819977]
[188.05564880 -60.73896790]
[181.39329529 -47.29973221]
[186.38014221 -33.31163406]
[179.81500244 -19.58743095]
[165.10919189 -14.45161343]
[158.44682312 -1.01238024]
[151.78446960 12.42685318]
[158.84434509 25.51487350]
[156.81976318 40.42678452]
[146.27947998 51.41568375]
[131.11437988 54.12233353]
[124.45202637 67.56156921]
[117.78966522 81.00080109]
[124.84310150 92.23712158]
[125.44205475 105.49031830]
[119.43091583 117.31707764]
[108.37144470 124.64469147]
[95.13697815 125.56937408]
[88.20705414 138.87260437]
[81.27713013 152.17584229]
[101.13346863 164.85206604]
[119.52112579 179.57670593]
[136.22972107 196.18101501]
[151.06808472 214.47480774]
[163.86651611 234.24853516]
[174.47862244 255.27571106]
[182.78309631 277.31555176]
[188.68504333 300.11569214]
[192.11706543 323.41506958]
[193.04006958 346.94686890]
[191.44363403 370.44177246]
[187.34625244 393.63076782]
[180.79501343 416.24844360]
[171.86506653 438.03588867]
[160.65881348 458.74380493]
[147.30471802 478.13516235]
[158.87007141 487.68728638]
[170.43540955 497.23937988]
[185.77999878 494.22644043]
[199.44625854 501.82693481]
[204.98139954 516.45214844]
[199.77191162 531.19647217]
[186.27754211 539.09808350]
[170.86991882 536.42614746]
[160.82406616 524.44219971]
[160.88331604 508.80474854]
[149.31796265 499.25262451]
[137.75260925 489.70053101]
[129.82972717 498.19317627]
[121.46974182 506.25604248]
[112.69590759 513.86663818]
[103.53268433 521.00372314]
[94.00558472 527.64739990]
[84.14114380 533.77923584]
[73.96684265 539.38214111]
[63.51102066 544.44036865]
[52.80280304 548.93994141]
[41.87201309 552.86828613]
[30.74910164 556.21447754]
[19.46505547 558.96911621]
[8.05130482 561.12457275]
[-3.46035385 562.67474365]
[-15.03785133 563.61547852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[68 113]
[69 112]
[70 111]
[74 106]
[75 105]
[76 104]
[80 100]
[81 99]
[82 98]
[85 95]
[86 94]
[87 93]
[88 92]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
68 113 0.0 0.2 colorpair
69 112 0.32 0.2 colorpair
74 106 0.0 1 colorpair
75 105 0.16 0.2 colorpair
76 104 0.16 0.2 colorpair
80 100 0.0 0.2 colorpair
81 99 0.32 0.2 colorpair
82 98 0.16 1 colorpair
85 95 0.0 0.6 colorpair
86 94 0.0 0.6 colorpair
87 93 0.32 0.6 colorpair
88 92 0.16 1 colorpair
129 141 0.32 1 colorpair
130 140 0.0 0.2 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
68 113 2 gmark
69 112 2 gmark
69 cmark
112 cmark
70 111 3 gmark
70 cmark
75 105 2 gmark
105 cmark
76 104 2 gmark
76 cmark
80 100 2 gmark
81 99 2 gmark
81 cmark
99 cmark
82 cmark
85 95 1 gmark
86 94 1 gmark
87 93 1 gmark
87 cmark
93 cmark
88 cmark
129 cmark
141 cmark
130 140 2 gmark

% End Annotations
showpage
end
%%EOF
