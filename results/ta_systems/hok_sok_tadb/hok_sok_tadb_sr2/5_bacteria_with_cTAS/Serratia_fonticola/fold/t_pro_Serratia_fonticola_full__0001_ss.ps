%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:05:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AUGCCGCAAAAAUUAGUAGUAAUAAACCUGGUCGUUAUCUGUAUCACCGUAAUCGUGUUGACCUGGAUAACCCGCAAAAAACUCUGUGAGAUCCGCAUUCGAACCGGAAAAACGGAGGUUGCGGCCAUUAUGGCUUAC__GAAUCCGCAC__\
) } def
/len { sequence length } bind def

/coor [
[-8.14855099 492.15524292]
[-21.66489029 498.67245483]
[-35.58240891 504.28213501]
[-49.84024429 508.95971680]
[-64.37605286 512.68475342]
[-79.12627411 515.44097900]
[-94.02639771 517.21630859]
[-109.01128387 518.00305176]
[-124.01540375 517.79760742]
[-138.97314453 516.60107422]
[-153.81909180 514.41851807]
[-168.48834229 511.25958252]
[-182.91673279 507.13806152]
[-197.04119873 502.07196045]
[-210.79994202 496.08343506]
[-224.13282776 489.19866943]
[-236.98153687 481.44778442]
[-249.28990173 472.86465454]
[-261.00408936 463.48681641]
[-272.07284546 453.35528564]
[-282.44784546 442.51437378]
[-292.08364868 431.01147461]
[-300.93814087 418.89688110]
[-308.97262573 406.22357178]
[-316.15194702 393.04696655]
[-322.44473267 379.42465210]
[-327.82342529 365.41625977]
[-332.26455688 351.08300781]
[-335.74868774 336.48757935]
[-338.26055908 321.69378662]
[-339.78918457 306.76632690]
[-340.32794189 291.77047729]
[-339.87438965 276.77182007]
[-338.43057251 261.83590698]
[-336.00280762 247.02810669]
[-332.60168457 232.41310120]
[-328.24206543 218.05485535]
[-322.94302368 204.01612854]
[-316.72775269 190.35830688]
[-309.62338257 177.14111328]
[-301.66104126 164.42236328]
[-292.87551880 152.25765991]
[-283.30520630 140.70019531]
[-272.99200439 129.80050659]
[-261.98095703 119.60625458]
[-250.32023621 110.16202545]
[-238.06085205 101.50910950]
[-225.25637817 93.68534088]
[-211.96282959 86.72494507]
[-198.23832703 80.65834045]
[-184.14286804 75.51206970]
[-169.73812866 71.30863190]
[-155.08706665 68.06639862]
[-140.25375366 65.79956055]
[-125.30305481 64.51802826]
[-110.30034637 64.22739410]
[-95.31123352 64.92894745]
[-80.40125275 66.61959839]
[-65.63561249 69.29197693]
[-51.07887650 72.93437958]
[-36.79469681 77.53088379]
[-22.84553146 83.06139374]
[-9.29238319 89.50172424]
[3.80548644 96.82371521]
[16.39080238 104.99534607]
[28.40853310 113.98088074]
[39.80612564 123.74103546]
[50.53374100 134.23312378]
[61.70765305 124.22593689]
[72.88156128 114.21875763]
[69.16117859 105.98835754]
[67.94900513 96.80607605]
[69.47927856 87.43852997]
[73.75163269 78.70610046]
[80.52035522 71.41127777]
[89.30543518 66.26534271]
[99.42546844 63.82040024]
[110.05009460 64.41284943]
[115.61658478 50.48395157]
[121.18307495 36.55505371]
[111.80172729 24.47459412]
[109.74031830 9.41978168]
[115.45325470 -4.55264521]
[127.31356049 -13.72810173]
[142.07472229 -15.72158813]
[147.64120483 -29.65048599]
[147.90451050 -46.60238647]
[164.26681519 -51.04212952]
[173.06259155 -36.54830933]
[161.57009888 -24.08399391]
[156.00361633 -10.15509701]
[165.32519531 1.46272254]
[167.59509277 16.28512192]
[162.10470581 30.34649086]
[150.23529053 39.83403778]
[135.11196899 42.12154770]
[129.54548645 56.05044174]
[123.97898865 69.97933960]
[133.64633179 81.44853973]
[148.31645203 78.32007599]
[162.98658752 75.19161987]
[163.75553894 60.12273788]
[168.39932251 45.76663971]
[176.60133362 33.10213852]
[187.80232239 22.99272537]
[201.23860168 16.12767792]
[215.99404907 12.97506332]
[231.06263733 13.74983501]
[245.41694641 18.39916611]
[258.07827759 26.60605812]
[268.18334961 37.81095123]
[275.04321289 51.24987793]
[278.19012451 66.00654602]
[277.40954590 81.07482910]
[272.75466919 95.42733765]
[264.54290771 108.08550262]
[253.33410645 118.18626404]
[239.89253235 125.04093170]
[225.13464355 128.18214417]
[210.06666565 127.39574432]
[195.71595764 122.73532867]
[183.06095886 114.51866150]
[172.96452332 103.30596924]
[166.11505127 89.86174774]
[151.44491577 92.99021149]
[136.77479553 96.11867523]
[127.72662354 121.12838745]
[105.32383728 132.30390930]
[82.88874817 125.39266968]
[71.71483612 135.39985657]
[60.54092407 145.40702820]
[69.79128265 157.22213745]
[78.24054718 169.62277222]
[85.85176849 182.55470276]
[92.59166718 195.96139526]
[98.43077087 209.78422546]
[103.34354401 223.96273804]
[107.30850220 238.43495178]
[110.30831146 253.13755798]
[112.32985687 268.00628662]
[113.36429596 282.97610474]
[113.40711212 297.98156738]
[112.45809937 312.95706177]
[110.52142334 327.83706665]
[107.60555267 342.55657959]
[103.72322845 357.05117798]
[98.89143372 371.25747681]
[93.13130188 385.11340332]
[86.46800232 398.55834961]
[78.93069458 411.53347778]
[70.55232239 423.98211670]
[61.36952972 435.84982300]
[51.42247009 447.08465576]
[40.75463486 457.63754272]
[29.41267967 467.46228027]
[17.44619370 476.51596069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[68 131]
[69 130]
[70 129]
[78 98]
[79 97]
[80 96]
[85 91]
[86 90]
[99 126]
[100 125]
[101 124]
] def

init

% Start Annotations
68 131 0.0 1 colorpair
69 130 0.0 1 colorpair
70 129 0.0 1 colorpair
78 98 0.0 1 colorpair
79 97 0.32 1 colorpair
80 96 0.16 1 colorpair
85 91 0.16 0.2 colorpair
86 90 0.0 1 colorpair
99 126 0.0 1 colorpair
100 125 0.16 1 colorpair
101 124 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
79 cmark
97 cmark
80 cmark
85 91 2 gmark
85 cmark
100 cmark
101 cmark

% End Annotations
showpage
end
%%EOF
