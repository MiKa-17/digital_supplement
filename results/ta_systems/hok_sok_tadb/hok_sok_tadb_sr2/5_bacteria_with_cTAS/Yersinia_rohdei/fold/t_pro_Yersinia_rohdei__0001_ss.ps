%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:24:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCCACAAAAUACGCUUGUUUGGUGCCUAUUGAUUGUUUGUAUAACAGUUCUGGCAUUUACAUUAAUUACGCAUAAGUCACUGUGUGAAUUACGCCUAAAAGAUGGAAACAAGGAAGUUGCGGCCAUUUUAGCUUACGAAUCUGAAAGG\
) } def
/len { sequence length } bind def

/coor [
[222.65315247 371.71429443]
[224.00932312 361.10018921]
[229.72172546 351.95639038]
[222.81472778 338.64123535]
[215.90773010 325.32608032]
[203.17903137 317.59115601]
[203.69273376 301.77828979]
[196.78573608 288.46313477]
[189.87873840 275.14797974]
[177.19886780 275.93588257]
[165.12565613 271.83340454]
[155.48022461 263.42172241]
[149.73173523 251.93489075]
[148.77369690 239.07870483]
[152.78521729 226.77757263]
[161.19885254 216.88636780]
[154.85173035 203.29542542]
[148.50459290 189.70446777]
[142.15747070 176.11352539]
[135.81034851 162.52256775]
[129.46321106 148.93161011]
[123.11608124 135.34066772]
[75.04718781 110.45844269]
[60.18413925 108.43611145]
[45.32109451 106.41377258]
[30.45804787 104.39144135]
[15.59500027 102.36911011]
[0.73195350 100.34677124]
[-7.20623493 109.29987335]
[-18.37687302 113.24015045]
[-29.93829346 111.28890228]
[-39.00893021 104.05072784]
[-43.38550186 93.43299866]
[-58.15155792 90.79413605]
[-72.91761017 88.15527344]
[-87.68367004 85.51640320]
[-102.44972229 82.87754059]
[-117.21578217 80.23867798]
[-131.98184204 77.59981537]
[-145.91380310 85.55467987]
[-160.76571655 79.48837280]
[-165.14447021 64.05444336]
[-155.69105530 51.09248352]
[-139.65731812 50.54579926]
[-129.34297180 62.83375931]
[-114.57691193 65.47262573]
[-99.81085968 68.11148834]
[-85.04480743 70.75035095]
[-70.27874756 73.38921356]
[-55.51269531 76.02807617]
[-40.74663925 78.66694641]
[-26.44806862 67.31140137]
[-8.06604004 69.99438477]
[2.75428796 85.48372650]
[17.61733437 87.50605774]
[32.48038101 89.52839661]
[47.34342957 91.55072784]
[62.20647430 93.57306671]
[77.06951904 95.59539795]
[63.37488174 89.47520447]
[58.65676117 75.23654175]
[65.98691559 62.14957047]
[80.59300995 58.73461533]
[92.96568298 67.21499634]
[95.04977417 82.06909943]
[97.22660828 67.22789764]
[99.40344238 52.38669205]
[101.58028412 37.54548645]
[103.75711823 22.70428085]
[101.89950562 13.69311333]
[106.13671875 7.57824087]
[108.62184143 -7.21446609]
[111.10695648 -22.00717354]
[113.59207916 -36.79988098]
[116.07719421 -51.59258652]
[118.56231689 -66.38529205]
[109.18991089 -79.11061096]
[111.64335632 -94.72330475]
[124.46704865 -103.96063995]
[140.05293274 -101.34226990]
[149.15417480 -88.42163086]
[146.37117004 -72.86430359]
[133.35502625 -63.90017700]
[130.86990356 -49.10746765]
[128.38478088 -34.31476212]
[125.89966583 -19.52205467]
[123.41455078 -4.72934771]
[120.92942810 10.06335926]
[118.59832764 24.88111687]
[116.42148590 39.72232437]
[114.24465179 54.56352997]
[112.06781006 69.40473175]
[109.89097595 84.24594116]
[116.02216339 88.56549835]
[128.28453064 97.20461273]
[134.41571045 101.52416992]
[147.65829468 94.47903442]
[149.68086243 79.09434509]
[160.38446045 67.85989380]
[175.65332031 65.09556580]
[189.61625671 71.86430359]
[196.90425110 85.56338501]
[194.71490479 100.92523193]
[183.89007568 112.04290771]
[168.59213257 114.64143372]
[154.70343018 107.72162628]
[141.46084595 114.76675415]
[136.70703125 128.99353027]
[143.05416870 142.58448792]
[149.40129089 156.17544556]
[155.74842834 169.76638794]
[162.09555054 183.35734558]
[168.44268799 196.94828796]
[174.78981018 210.53924561]
[192.27468872 211.62310791]
[206.75076294 221.33099365]
[214.31301880 236.93646240]
[212.97592163 254.13722229]
[203.19389343 268.24096680]
[210.10089111 281.55612183]
[217.00788879 294.87127686]
[230.23063660 303.55862427]
[229.22288513 318.41909790]
[236.12988281 331.73425293]
[243.03688049 345.04940796]
[262.44372559 350.01141357]
[271.89227295 367.33026123]
[265.75164795 385.76019287]
[273.47573853 398.61862183]
[281.19979858 411.47702026]
[288.92388916 424.33541870]
[296.64797974 437.19381714]
[304.37207031 450.05221558]
[319.79513550 450.41622925]
[332.56024170 459.07971191]
[338.59405518 473.27816772]
[335.97125244 488.48092651]
[325.52874756 499.83688354]
[310.59866333 503.72232056]
[295.94519043 498.89749146]
[286.24417114 486.90191650]
[284.59118652 471.56335449]
[291.51367188 457.77630615]
[283.78958130 444.91790771]
[276.06549072 432.05950928]
[268.34140015 419.20111084]
[260.61730957 406.34268188]
[252.89323425 393.48428345]
[242.52124023 393.76895142]
[232.90560913 389.65933228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[5 123]
[7 121]
[8 120]
[9 119]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[21 109]
[22 108]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[96 107]
[97 106]
[128 148]
[129 147]
[130 146]
[131 145]
[132 144]
[133 143]
] def

init

% Start Annotations
3 125 0.0 1 colorpair
4 124 0.0 1 colorpair
5 123 0.0 1 colorpair
7 121 0.0 1 colorpair
8 120 0.0 1 colorpair
9 119 0.0 1 colorpair
16 114 0.0 1 colorpair
17 113 0.0 1 colorpair
18 112 0.0 1 colorpair
19 111 0.0 1 colorpair
20 110 0.0 1 colorpair
21 109 0.0 1 colorpair
22 108 0.0 1 colorpair
23 59 0.0 1 colorpair
24 58 0.0 1 colorpair
25 57 0.0 1 colorpair
26 56 0.0 1 colorpair
27 55 0.0 1 colorpair
28 54 0.0 1 colorpair
33 51 0.0 1 colorpair
34 50 0.0 1 colorpair
35 49 0.0 1 colorpair
36 48 0.0 1 colorpair
37 47 0.0 1 colorpair
38 46 0.0 1 colorpair
39 45 0.0 1 colorpair
65 93 0.0 1 colorpair
66 92 0.0 1 colorpair
67 91 0.0 1 colorpair
68 90 0.0 1 colorpair
69 89 0.0 1 colorpair
71 88 0.0 1 colorpair
72 87 0.0 1 colorpair
73 86 0.0 1 colorpair
74 85 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair
96 107 0.0 1 colorpair
97 106 0.0 1 colorpair
128 148 0.0 1 colorpair
129 147 0.0 1 colorpair
130 146 0.0 1 colorpair
131 145 0.0 1 colorpair
132 144 0.0 1 colorpair
133 143 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
