%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AAACUGCCGCAAAACGCCCUGGUGGGGAGCGUAUUAGUAGUGUGUAUCACGCUACUGGUAUUCACGUGGCUGGUGCGCAACUCGCUGUGCGAACUCCGGAUCAGAGAGGGGAAUAUGGAGGUGGCGGCUUUUCUGGCUUACGAAUCCAAU___\
) } def
/len { sequence length } bind def

/coor [
[138.97677612 428.03662109]
[124.67526245 429.42120361]
[110.32707214 430.18261719]
[95.95933533 430.31936646]
[81.59924316 429.83120728]
[67.27396393 428.71905518]
[53.01060104 426.98501587]
[38.83613205 424.63238525]
[24.77737236 421.66561890]
[10.86092186 418.09027100]
[-2.88689137 413.91317749]
[-16.44005966 409.14224243]
[-29.77294350 403.78640747]
[-42.86031723 397.85589600]
[-55.67742538 391.36187744]
[-68.20001221 384.31665039]
[-80.40440369 376.73355103]
[-92.26748657 368.62692261]
[-103.76683807 360.01208496]
[-114.88069916 350.90533447]
[-125.58804321 341.32394409]
[-135.86860657 331.28598022]
[-145.70294189 320.81048584]
[-155.07246399 309.91723633]
[-163.95941162 298.62686157]
[-172.34700012 286.96072388]
[-180.21936035 274.94088745]
[-187.56158447 262.59008789]
[-194.35980225 249.93170166]
[-200.60112000 236.98966980]
[-206.27377319 223.78846741]
[-211.36698914 210.35308838]
[-215.87115479 196.70892334]
[-219.77775574 182.88182068]
[-223.07937622 168.89790344]
[-225.76979065 154.78364563]
[-227.84390259 140.56575012]
[-229.29779053 126.27111816]
[-230.12869263 111.92678070]
[-230.33505249 97.55987549]
[-229.91647339 83.19758606]
[-228.87374878 68.86708832]
[-227.20886230 54.59548950]
[-224.92492676 40.40978622]
[-222.02630615 26.33681870]
[-218.51844788 12.40320778]
[-214.40802002 -1.36468315]
[-209.70278931 -14.94080925]
[-204.41163635 -28.29948616]
[-198.54460144 -41.41544342]
[-192.11276245 -54.26386261]
[-185.12829590 -66.82044220]
[-177.60441589 -79.06143188]
[-169.55534363 -90.96366119]
[-160.99633789 -102.50461578]
[-151.94355774 -113.66246796]
[-142.41413879 -124.41610718]
[-132.42611694 -134.74519348]
[-121.99839020 -144.63017273]
[-111.15067291 -154.05235291]
[-99.90349579 -162.99391174]
[-88.27812958 -171.43792725]
[-76.29657745 -179.36843872]
[-63.98149872 -186.77041626]
[-51.35619736 -193.62988281]
[-38.44455338 -199.93383789]
[-25.27099800 -205.67037964]
[-11.86044884 -210.82864380]
[1.76172125 -215.39886475]
[15.56974220 -219.37240601]
[29.53749084 -222.74176025]
[43.63854218 -225.50051880]
[57.84622192 -227.64349365]
[72.13364410 -229.16662598]
[86.47379303 -230.06703186]
[100.83952332 -230.34300232]
[115.20367432 -229.99401855]
[129.53906250 -229.02073669]
[143.81855774 -227.42501831]
[158.01515198 -225.20985413]
[172.10200500 -222.37944031]
[186.05244446 -218.93914795]
[199.84008789 -214.89547729]
[213.43885803 -210.25607300]
[226.82301331 -205.02970886]
[239.96725464 -199.22628784]
[246.62960815 -212.66552734]
[253.29196167 -226.10475159]
[254.90982056 -242.98133850]
[271.57470703 -246.09861755]
[279.18347168 -230.94793701]
[266.73120117 -219.44239807]
[260.06884766 -206.00317383]
[253.40647888 -192.56393433]
[267.88159180 -184.50479126]
[281.93444824 -175.73005676]
[295.52969360 -166.26179504]
[308.63314819 -156.12384033]
[321.21182251 -145.34165955]
[333.23413086 -133.94241333]
[344.66976929 -121.95473480]
[355.49005127 -109.40879822]
[365.66769409 -96.33615112]
[375.17712402 -82.76967621]
[383.99441528 -68.74349976]
[392.09744263 -54.29289246]
[399.46572876 -39.45420837]
[406.08084106 -24.26476479]
[411.92605591 -8.76276779]
[416.98672485 7.01279020]
[421.25009155 23.02223206]
[424.70547485 39.22528839]
[427.34411621 55.58120728]
[429.15945435 72.04885101]
[430.14685059 88.58679199]
[430.30386353 105.15344238]
[429.63009644 121.70713806]
[428.12725830 138.20622253]
[425.79907227 154.60922241]
[422.65145874 170.87486267]
[418.69229126 186.96223450]
[413.93154907 202.83088684]
[408.38119507 218.44088745]
[402.05520630 233.75299072]
[394.96948242 248.72866821]
[387.14181519 263.33026123]
[378.59194946 277.52105713]
[369.34136963 291.26531982]
[359.41333008 304.52853394]
[370.97869873 314.08065796]
[382.54403687 323.63275146]
[397.88861084 320.61981201]
[411.55487061 328.22030640]
[417.09002686 342.84548950]
[411.88052368 357.58981323]
[398.38616943 365.49145508]
[382.97854614 362.81951904]
[372.93267822 350.83557129]
[372.99194336 335.19808960]
[361.42657471 325.64599609]
[349.86123657 316.09387207]
[340.22805786 326.75466919]
[330.14041138 336.98648071]
[319.61737061 346.76995850]
[308.67886353 356.08657837]
[297.34558105 364.91873169]
[285.63891602 373.24969482]
[273.58108521 381.06372070]
[261.19485474 388.34600830]
[248.50367737 395.08279419]
[235.53155518 401.26135254]
[222.30302429 406.86996460]
[208.84312439 411.89804077]
[195.17730713 416.33602905]
[181.33142090 420.17556763]
[167.33168030 423.40942383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[86 94]
[87 93]
[88 92]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
86 94 0.0 0.2 colorpair
88 92 0.16 1 colorpair
129 141 0.32 0.2 colorpair
130 140 0.0 0.6 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
86 94 2 gmark
87 93 3 gmark
87 cmark
93 cmark
88 cmark
129 141 2 gmark
129 cmark
141 cmark
130 140 1 gmark

% End Annotations
showpage
end
%%EOF
