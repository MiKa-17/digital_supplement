%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGACUAACCUGAUGUUGUCUAGGCAUCGGGACAGCCUCGUGGGUGAUUACAUUACCUUCGGGGCUUUCUUCUUUCUGCCUCAGCACAACGGUAAAACUCAAUCCUGCUCUGAGGCGAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[199.48500061 253.48065186]
[190.83479309 241.22610474]
[175.96409607 241.20791626]
[163.81184387 232.33172607]
[159.16201782 217.83233643]
[163.99737549 203.20613098]
[155.34716797 190.95158386]
[146.69696045 178.69703674]
[131.87657166 180.18746948]
[118.20909119 174.01850891]
[109.40633392 161.75564575]
[107.91374207 146.63383484]
[114.23181915 132.70440674]
[105.58161163 120.44985962]
[96.93141174 108.19531250]
[93.88104248 107.43366241]
[91.05323029 105.50605011]
[88.89502716 102.49801636]
[87.81333923 98.66442871]
[88.11209869 94.40954590]
[80.61209869 81.41916656]
[73.11209869 68.42878723]
[65.61209869 55.43840408]
[58.11209488 42.44802094]
[50.46472168 29.54384995]
[42.67096329 16.72755814]
[34.73182678 4.00080919]
[26.64834785 -8.63475037]
[18.56486893 -21.27030945]
[10.48138905 -33.90586853]
[2.39790988 -46.54142761]
[-17.36174583 -49.70077896]
[-28.37534142 -66.04534912]
[-24.01980019 -84.95763397]
[-32.94671631 -97.01210022]
[-41.87363052 -109.06656647]
[-50.80054855 -121.12103271]
[-65.23134613 -127.60659790]
[-66.58776855 -142.43931580]
[-75.51467896 -154.49377441]
[-84.44159698 -166.54824829]
[-93.36851501 -178.60270691]
[-102.29543304 -190.65718079]
[-111.22234344 -202.71163940]
[-120.14926147 -214.76611328]
[-134.58006287 -221.25167847]
[-135.93647766 -236.08439636]
[-144.86340332 -248.13885498]
[-153.79031372 -260.19332886]
[-162.71722412 -272.24780273]
[-171.64414978 -284.30224609]
[-180.57106018 -296.35671997]
[-189.49797058 -308.41119385]
[-203.78330994 -317.54165649]
[-198.96423340 -333.79629517]
[-182.01078796 -333.66528320]
[-177.44351196 -317.33810425]
[-168.51660156 -305.28363037]
[-159.58967590 -293.22918701]
[-150.66276550 -281.17471313]
[-141.73583984 -269.12023926]
[-132.80892944 -257.06576538]
[-123.88201141 -245.01130676]
[-110.08972931 -239.38795471]
[-108.09479523 -223.69302368]
[-99.16787720 -211.63856506]
[-90.24096680 -199.58409119]
[-81.31404877 -187.52963257]
[-72.38713074 -175.47515869]
[-63.46021652 -163.42070007]
[-54.53329849 -151.36622620]
[-40.74101257 -145.74287415]
[-38.74608231 -130.04794312]
[-29.81916618 -117.99347687]
[-20.89225006 -105.93901062]
[-11.96533298 -93.88454437]
[-1.63221252 -95.16873932]
[8.36535263 -91.97976685]
[16.16622925 -84.83982086]
[20.28841400 -75.01307678]
[19.91030121 -64.28218079]
[15.03346920 -54.62490845]
[23.11694908 -41.98934937]
[31.20042801 -29.35378838]
[39.28390884 -16.71822929]
[47.36738586 -4.08267021]
[53.67602158 -0.10920815]
[55.48725128 8.93379974]
[63.28101349 21.75009155]
[69.49755859 25.86612701]
[71.10247803 34.94802094]
[78.60247803 47.93840408]
[86.10247803 60.92878342]
[93.60247803 73.91916656]
[101.10247803 86.90954590]
[109.18595886 99.54510498]
[117.83615875 111.79965210]
[126.48636627 124.05419922]
[141.72732544 122.76560974]
[155.47616577 129.23600769]
[164.08312988 141.63708496]
[165.31893921 156.58126831]
[158.95150757 170.04682922]
[167.60171509 182.30139160]
[176.25192261 194.55593872]
[191.65287781 194.89778137]
[203.75796509 204.13467407]
[208.05209351 218.55772400]
[203.08935547 232.57589722]
[211.73954773 244.83045959]
[220.80310059 256.78253174]
[230.26942444 268.41821289]
[239.73573303 280.05386353]
[249.20205688 291.68954468]
[257.11639404 296.42449951]
[258.74780273 303.69952393]
[267.94677734 315.54766846]
[277.14578247 327.39578247]
[286.34478760 339.24392700]
[295.54379272 351.09207153]
[304.74279785 362.94021606]
[320.12506104 368.62512207]
[322.62582397 384.83248901]
[309.67254639 394.88952637]
[294.59042358 388.45043945]
[292.89465332 372.13922119]
[283.69564819 360.29107666]
[274.49664307 348.44293213]
[265.29766846 336.59478760]
[256.09866333 324.74667358]
[246.89965820 312.89852905]
[237.56639099 301.15585327]
[228.10006714 289.52017212]
[218.63374329 277.88452148]
[209.16743469 266.24884033]
[205.62881470 265.54702759]
[202.27200317 263.04379272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[6 105]
[7 104]
[8 103]
[13 98]
[14 97]
[15 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 89]
[26 88]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[34 76]
[35 75]
[36 74]
[37 73]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[111 135]
[112 134]
[113 133]
[114 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% Start Annotations
1 110 0.0 1 colorpair
2 109 0.0 1 colorpair
6 105 0.0 1 colorpair
7 104 0.0 1 colorpair
8 103 0.0 1 colorpair
13 98 0.0 1 colorpair
14 97 0.0 1 colorpair
15 96 0.0 1 colorpair
20 95 0.0 1 colorpair
21 94 0.0 1 colorpair
22 93 0.0 1 colorpair
23 92 0.0 1 colorpair
24 91 0.0 1 colorpair
25 89 0.0 1 colorpair
26 88 0.0 1 colorpair
27 86 0.0 1 colorpair
28 85 0.0 1 colorpair
29 84 0.0 1 colorpair
30 83 0.0 1 colorpair
31 82 0.0 1 colorpair
34 76 0.0 1 colorpair
35 75 0.0 1 colorpair
36 74 0.0 1 colorpair
37 73 0.0 1 colorpair
39 71 0.0 1 colorpair
40 70 0.0 1 colorpair
41 69 0.0 1 colorpair
42 68 0.0 1 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
45 65 0.0 1 colorpair
47 63 0.0 1 colorpair
48 62 0.0 1 colorpair
49 61 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
53 57 0.0 1 colorpair
111 135 0.0 1 colorpair
112 134 0.0 1 colorpair
113 133 0.0 1 colorpair
114 132 0.0 1 colorpair
116 131 0.0 1 colorpair
117 130 0.0 1 colorpair
118 129 0.0 1 colorpair
119 128 0.0 1 colorpair
120 127 0.0 1 colorpair
121 126 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
