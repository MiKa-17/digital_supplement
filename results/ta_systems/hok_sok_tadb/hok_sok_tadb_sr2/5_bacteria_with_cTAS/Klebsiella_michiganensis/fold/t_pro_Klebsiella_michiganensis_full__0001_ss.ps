%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AAUGCCGCAAAAGUAUCUGUUGUUGAGCUUAAUAGUAAUGUGCAUCACGAUUUUAUUAUUUACCUGGAUGGUGCGUAAUUCGCUGUGCGAACUACGGCUCAGGGAGGGGAAUAUGGAGCUGGUGGCUUUCUUAGCCUACGAA___AA____\
) } def
/len { sequence length } bind def

/coor [
[143.53092957 458.30978394]
[136.27474976 450.43713379]
[129.78739929 441.91900635]
[124.12601471 432.83023071]
[119.34046173 423.25057983]
[115.47291565 413.26428223]
[112.55748749 402.95904541]
[110.61991119 392.42544556]
[109.67733002 381.75607300]
[109.73816681 371.04467773]
[110.80198669 360.38543701]
[112.85955811 349.87207031]
[115.89290619 339.59701538]
[119.87548065 329.65066528]
[124.77238464 320.12045288]
[130.54066467 311.09024048]
[137.12971497 302.63943481]
[144.48168945 294.84246826]
[152.53207397 287.76791382]
[161.21015930 281.47802734]
[170.43971252 276.02825928]
[164.32038879 262.33325195]
[158.20106506 248.63821411]
[145.94474792 240.17465210]
[147.37905884 224.41859436]
[141.25973511 210.72357178]
[135.14041138 197.02853394]
[125.29056549 200.04885864]
[115.18863678 202.07199097]
[104.93533325 203.07777405]
[94.63282776 203.05619812]
[84.38382721 202.00746155]
[74.29046631 199.94201660]
[64.45335388 196.88044739]
[54.97053528 192.85328674]
[45.93651962 187.90066528]
[37.44135284 182.07192993]
[29.56970596 175.42518616]
[22.40003586 168.02668762]
[16.00379944 159.95018005]
[10.44474888 151.27613831]
[5.77829218 142.09103394]
[2.05093908 132.48641968]
[-0.70016032 122.55799866]
[-2.44758582 112.40475464]
[-3.17392087 102.12786865]
[-2.87192607 91.82977295]
[-1.54461145 81.61311340]
[0.79479361 71.57971191]
[4.12297249 61.82957458]
[8.40675354 52.45988083]
[13.60344028 43.56401825]
[19.66123772 35.23064804]
[26.51976776 27.54283142]
[34.11067200 20.57719421]
[42.35829163 14.40315914]
[51.18042374 9.08226395]
[60.48913956 4.66754150]
[55.76832962 -9.57022381]
[51.04751968 -23.80798912]
[36.08868790 -26.99868965]
[24.80984306 -37.18124771]
[20.17295265 -51.54667664]
[23.32802391 -66.20619965]
[33.32981491 -77.24385071]
[28.60900688 -91.48161316]
[23.88819695 -105.71937561]
[9.65298939 -112.58482361]
[4.52073002 -127.53258514]
[11.53629875 -141.69441223]
[26.53748131 -146.66835022]
[40.62434387 -139.50344849]
[45.43939972 -124.45050812]
[38.12596130 -110.44018555]
[42.84677124 -96.20242310]
[47.56758118 -81.96466064]
[62.18254471 -79.08917236]
[73.47101593 -69.21869659]
[78.33539581 -54.92869186]
[75.37449646 -40.02466965]
[65.28528595 -28.52879906]
[70.00609589 -14.29103279]
[74.72690582 -0.05326777]
[107.22146606 -2.94287825]
[138.99435425 4.45510912]
[145.65670776 -8.98412418]
[152.31906128 -22.42335701]
[158.98143005 -35.86259079]
[160.59927368 -52.73917007]
[177.26417542 -55.85644531]
[184.87294006 -40.70576096]
[172.42065430 -29.20023346]
[165.75830078 -15.76100063]
[159.09594727 -2.32176685]
[152.43359375 11.11746693]
[165.21676636 20.02401352]
[176.51344299 30.75349236]
[186.06610107 43.06133652]
[193.65702820 56.66701126]
[199.11317444 71.26039886]
[202.31019592 86.50885773]
[203.17520142 102.06482697]
[201.68849182 117.57373047]
[197.88395691 132.68206787]
[191.84829712 147.04547119]
[183.71910095 160.33654785]
[173.68165588 172.25233459]
[161.96475220 182.52124023]
[148.83544922 190.90921021]
[154.95477295 204.60424805]
[161.07409668 218.29927063]
[173.76811218 227.74238586]
[171.89610291 242.51889038]
[178.01542664 256.21392822]
[184.13475037 269.90893555]
[204.21347046 264.51055908]
[224.93469238 262.83859253]
[245.61282349 264.94723511]
[265.56390381 270.76556396]
[284.12823486 280.09997559]
[300.69216919 292.64065552]
[314.70846558 307.97177124]
[325.71426392 325.58538818]
[333.34643555 344.89816284]
[337.35363770 365.27078247]
[337.60437012 386.02902222]
[334.09152222 406.48620605]
[326.93246460 425.96566772]
[316.36508179 443.82345581]
[327.93041992 453.37554932]
[339.49578857 462.92767334]
[354.84036255 459.91473389]
[368.50662231 467.51522827]
[374.04177856 482.14041138]
[368.83227539 496.88473511]
[355.33789062 504.78637695]
[339.93029785 502.11441040]
[329.88442993 490.13049316]
[329.94366455 474.49301147]
[318.37832642 464.94091797]
[306.81298828 455.38879395]
[299.12216187 462.82217407]
[290.76846313 469.50296021]
[281.82528687 475.37234497]
[272.37115479 480.37863159]
[262.48910522 484.47772217]
[252.26600647 487.63345337]
[241.79167175 489.81799316]
[231.15817261 491.01199341]
[220.45895386 491.20486450]
[209.78807068 490.39477539]
[199.23934937 488.58874512]
[188.90554810 485.80255127]
[178.87751770 482.06054688]
[169.24346924 477.39550781]
[160.08815002 471.84838867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 115]
[22 114]
[23 113]
[25 111]
[26 110]
[27 109]
[58 83]
[59 82]
[60 81]
[65 76]
[66 75]
[67 74]
[85 95]
[86 94]
[87 93]
[88 92]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
22 114 0.16 1 colorpair
26 110 0.0 1 colorpair
27 109 0.32 1 colorpair
58 83 0.16 1 colorpair
59 82 0.16 1 colorpair
65 76 0.16 1 colorpair
67 74 0.0 1 colorpair
85 95 0.0 0.2 colorpair
86 94 0.0 0.2 colorpair
87 93 0.32 0.2 colorpair
88 92 0.16 1 colorpair
129 141 0.32 0.2 colorpair
130 140 0.0 0.2 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
21 115 4 gmark
21 cmark
115 cmark
22 cmark
114 cmark
23 113 4 gmark
23 cmark
25 111 4 gmark
25 cmark
111 cmark
27 cmark
109 cmark
58 cmark
83 cmark
82 cmark
60 81 6 gmark
60 cmark
81 cmark
76 cmark
66 75 4 gmark
66 cmark
85 95 2 gmark
86 94 2 gmark
87 93 2 gmark
87 cmark
93 cmark
88 cmark
129 141 2 gmark
129 cmark
141 cmark
130 140 2 gmark

% End Annotations
showpage
end
%%EOF
