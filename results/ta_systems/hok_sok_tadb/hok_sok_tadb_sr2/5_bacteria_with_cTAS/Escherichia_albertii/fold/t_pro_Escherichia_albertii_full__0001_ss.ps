%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 02:06:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AU___GCAGCAAAAAUAUAUGUUAA__UCGCCCUGAUCG_UCAUCUGUUUCACCGUCUUAGUAUUCACACUGAUGACAAGGAAAUCCCUGUGCGAGGUACGUAUCAGAAACGGACAUACGGAGGUCGCGGCCUUUAUAGCUUACGAACCUGAGG__\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50939178 91.91833496]
[62.55260468 90.75583649]
[47.65214920 89.01425934]
[32.83042526 86.69622040]
[18.10973358 83.80519867]
[3.51221204 80.34555817]
[-10.94018269 76.32249451]
[-25.22571182 71.74205780]
[-39.32289124 66.61114502]
[-53.21051407 60.93745804]
[-66.86769104 54.72954559]
[-80.27388763 47.99673462]
[-93.40892792 40.74916077]
[-106.25306702 32.99771881]
[-118.78697968 24.75406837]
[-130.99182129 16.03061104]
[-142.84922791 6.84046698]
[-154.34135437 -2.80254126]
[-165.45094299 -12.88390923]
[-176.16125488 -23.38847542]
[-186.45619202 -34.30043793]
[-196.32028198 -45.60338211]
[-205.73866272 -57.28031158]
[-214.69720459 -69.31365967]
[-223.18238831 -81.68533325]
[-231.18148804 -94.37671661]
[-238.68244934 -107.36872101]
[-245.67401123 -120.64181519]
[-252.14564514 -134.17602539]
[-258.08761597 -147.95098877]
[-263.49096680 -161.94599915]
[-268.34762573 -176.13999939]
[-272.65023804 -190.51165771]
[-276.39233398 -205.03933716]
[-279.56832886 -219.70118713]
[-282.17340088 -234.47515869]
[-284.20364380 -249.33903503]
[-285.65600586 -264.27044678]
[-286.52828979 -279.24697876]
[-286.81921387 -294.24603271]
[-286.52835083 -309.24511719]
[-285.65606689 -324.22161865]
[-284.20373535 -339.15304565]
[-282.17352295 -354.01693726]
[-279.56851196 -368.79092407]
[-276.39254761 -383.45275879]
[-272.65048218 -397.98046875]
[-268.34790039 -412.35211182]
[-263.49130249 -426.54614258]
[-258.08795166 -440.54116821]
[-252.14602661 -454.31613159]
[-245.67443848 -467.85037231]
[-238.68290710 -481.12347412]
[-231.18197632 -494.11550903]
[-223.18290710 -506.80691528]
[-214.69775391 -519.17858887]
[-205.73924255 -531.21197510]
[-196.32089233 -542.88891602]
[-186.45683289 -554.19189453]
[-176.16191101 -565.10388184]
[-165.45162964 -575.60845947]
[-154.34207153 -585.68988037]
[-142.84996033 -595.33288574]
[-130.99258423 -604.52307129]
[-118.78776550 -613.24658203]
[-106.25386810 -621.49023438]
[-93.40975189 -629.24169922]
[-80.27472687 -636.48931885]
[-66.86854553 -643.22216797]
[-53.21138000 -649.43011475]
[-39.32377243 -655.10382080]
[-25.22660637 -660.23480225]
[-10.94108868 -664.81524658]
[3.51129603 -668.83837891]
[18.10880852 -672.29803467]
[32.82949448 -675.18908691]
[47.65121078 -677.50714111]
[62.55166626 -679.24877930]
[77.50844574 -680.41131592]
[92.49905396 -680.99298096]
[107.50094604 -680.99298096]
[122.49155426 -680.41131592]
[137.44833374 -679.24877930]
[152.34878540 -677.50714111]
[167.17050171 -675.18908691]
[181.89118958 -672.29803467]
[196.48870850 -668.83837891]
[210.94108582 -664.81524658]
[225.22660828 -660.23480225]
[239.32377625 -655.10382080]
[253.21138000 -649.43011475]
[266.86856079 -643.22216797]
[280.27471924 -636.48931885]
[293.40975952 -629.24169922]
[306.25387573 -621.49023438]
[318.78775024 -613.24658203]
[330.99258423 -604.52307129]
[342.84994507 -595.33288574]
[354.34207153 -585.68988037]
[365.45162964 -575.60845947]
[376.16192627 -565.10388184]
[386.45681763 -554.19189453]
[396.32089233 -542.88891602]
[405.73925781 -531.21197510]
[414.69775391 -519.17858887]
[423.18292236 -506.80691528]
[431.18197632 -494.11550903]
[438.68292236 -481.12347412]
[445.67443848 -467.85037231]
[452.14602661 -454.31613159]
[458.08795166 -440.54116821]
[463.49130249 -426.54614258]
[468.34790039 -412.35211182]
[472.65048218 -397.98046875]
[476.39254761 -383.45275879]
[479.56851196 -368.79092407]
[482.17352295 -354.01693726]
[484.20373535 -339.15304565]
[485.65606689 -324.22161865]
[486.52835083 -309.24511719]
[486.81921387 -294.24603271]
[486.52828979 -279.24697876]
[485.65600586 -264.27044678]
[484.20364380 -249.33903503]
[482.17340088 -234.47515869]
[479.56832886 -219.70118713]
[476.39233398 -205.03933716]
[472.65023804 -190.51165771]
[468.34762573 -176.13999939]
[463.49096680 -161.94599915]
[458.08761597 -147.95098877]
[452.14562988 -134.17602539]
[445.67401123 -120.64181519]
[438.68246460 -107.36872101]
[431.18148804 -94.37671661]
[423.18240356 -81.68533325]
[414.69720459 -69.31365967]
[405.73867798 -57.28031158]
[396.32028198 -45.60338211]
[386.45620728 -34.30043793]
[376.16125488 -23.38847542]
[365.45092773 -12.88390923]
[354.34136963 -2.80254126]
[342.84921265 6.84046698]
[330.99182129 16.03061104]
[318.78698730 24.75406837]
[306.25308228 32.99771881]
[293.40893555 40.74916077]
[280.27389526 47.99673462]
[266.86770630 54.72954559]
[253.21051025 60.93745804]
[239.32289124 66.61114502]
[225.22570801 71.74205780]
[210.94018555 76.32249451]
[196.48779297 80.34555817]
[181.89027405 83.80519867]
[167.16957092 86.69622040]
[152.34785461 89.01425934]
[137.44738770 90.75583649]
[122.49060822 91.91833496]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
