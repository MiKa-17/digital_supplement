%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:06:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACUUAACGUUGUCA_GGCGUUAGAGUAGGCCUCGGGUUGAUGAAUAUCGACUCGGGGCUUUUCUCUUUGUAUC_UUUC______\
) } def
/len { sequence length } bind def

/coor [
[113.77424622 231.57914734]
[118.21353912 217.15016174]
[126.38206482 204.45458984]
[137.67367554 194.43449402]
[131.10295105 180.95022583]
[124.53224182 167.46594238]
[117.96152496 153.98167419]
[111.39080811 140.49739075]
[104.82009888 127.01312256]
[94.24511719 126.82952118]
[84.52513885 122.65988922]
[77.10424042 115.12370300]
[73.08494568 105.34059906]
[58.13409042 104.12738800]
[43.16555023 103.15644073]
[28.18324661 102.42800903]
[13.20094395 101.69957733]
[-1.78135824 100.97113800]
[-16.76366043 100.24270630]
[-31.74596214 99.51427460]
[-46.72826385 98.78584290]
[-57.21628189 110.38478851]
[-72.71322632 112.47731018]
[-85.90192413 104.07538605]
[-90.55506134 89.14614105]
[-84.47558594 74.73871613]
[-70.53402710 67.65585327]
[-55.31316757 71.24185944]
[-45.99983215 83.80354309]
[-31.01753044 84.53197479]
[-16.03522682 85.26040649]
[-1.05292499 85.98883820]
[13.92937756 86.71726990]
[28.91168022 87.44570923]
[43.89398193 88.17414093]
[50.86002350 85.29995728]
[59.34729767 89.17652893]
[74.29815674 90.38973999]
[86.40857697 76.16273499]
[104.82009888 72.98687744]
[111.39080811 59.50260544]
[117.96152496 46.01832962]
[124.53224182 32.53405380]
[131.10295105 19.04977608]
[137.67367554 5.56549978]
[144.24438477 -7.91877651]
[150.81510925 -21.40305328]
[157.38581848 -34.88732910]
[163.95652771 -48.37160492]
[159.03968811 -63.15208054]
[165.89541626 -76.73345184]
[180.01664734 -81.32981873]
[186.58735657 -94.81409454]
[184.89840698 -111.12603760]
[198.33737183 -120.52423096]
[213.07942200 -113.34062195]
[213.95918274 -96.96508789]
[200.07164001 -88.24337769]
[193.50093079 -74.75910187]
[198.58287048 -60.80527496]
[192.11132812 -47.03669739]
[177.44081116 -41.80088806]
[170.87008667 -28.31661415]
[164.29937744 -14.83233738]
[157.72866821 -1.34806120]
[151.15794373 12.13621521]
[144.58723450 25.62049103]
[138.01652527 39.10476685]
[131.44580078 52.58904266]
[124.87509155 66.07331848]
[118.30437469 79.55759430]
[126.36983490 92.41226959]
[126.36983490 107.58773041]
[118.30437469 120.44240570]
[124.87509155 133.92668152]
[131.44580078 147.41094971]
[138.01652527 160.89523315]
[144.58723450 174.37950134]
[151.15794373 187.86378479]
[166.00765991 185.14555359]
[181.03996277 186.53565979]
[195.13935852 191.93096924]
[207.25959778 200.93109131]
[216.50126648 212.86819458]
[222.17857361 226.85643005]
[223.87022400 241.85778809]
[221.45068359 256.75906372]
[215.09950256 270.45452881]
[205.28797913 281.92782593]
[192.74418640 290.32757568]
[178.39897156 295.03048706]
[163.31683350 295.68756104]
[148.61697388 292.25000000]
[135.39021301 284.97296143]
[124.61807251 274.39642334]
[117.09991455 261.30520630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[13 38]
[14 37]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 59]
[53 58]
] def

init

% Start Annotations
4 79 0.0 0.6 colorpair
5 78 0.0 0.6 colorpair
6 77 0.0 0.6 colorpair
7 76 0.0 0.6 colorpair
8 75 0.0 0.6 colorpair
9 74 0.0 0.6 colorpair
13 38 0.16 1 colorpair
14 37 0.0 1 colorpair
15 35 0.16 0.6 colorpair
16 34 0.0 1 colorpair
17 33 0.32 1 colorpair
18 32 0.0 0.6 colorpair
19 31 0.16 0.2 colorpair
20 30 0.0 0.6 colorpair
21 29 0.0 1 colorpair
40 71 0.16 0.6 colorpair
41 70 0.0 0.6 colorpair
42 69 0.0 0.6 colorpair
43 68 0.0 0.6 colorpair
44 67 0.0 0.6 colorpair
45 66 0.0 0.6 colorpair
46 65 0.0 0.6 colorpair
47 64 0.0 0.6 colorpair
48 63 0.0 0.6 colorpair
49 62 0.0 0.6 colorpair
52 59 0.0 0.6 colorpair
53 58 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 79 1 gmark
5 78 1 gmark
6 77 1 gmark
7 76 1 gmark
8 75 1 gmark
9 74 1 gmark
13 cmark
38 cmark
15 35 1 gmark
15 cmark
17 cmark
33 cmark
18 32 1 gmark
19 31 2 gmark
19 cmark
31 cmark
20 30 1 gmark
40 71 1 gmark
71 cmark
41 70 1 gmark
42 69 1 gmark
43 68 1 gmark
44 67 1 gmark
45 66 1 gmark
46 65 1 gmark
47 64 1 gmark
48 63 1 gmark
49 62 1 gmark
52 59 1 gmark
53 58 1 gmark
58 cmark

% End Annotations
showpage
end
%%EOF
