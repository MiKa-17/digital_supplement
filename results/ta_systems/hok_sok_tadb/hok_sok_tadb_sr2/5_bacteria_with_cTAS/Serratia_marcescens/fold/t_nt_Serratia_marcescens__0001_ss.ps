%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:06:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACUUAACGUUGUCGGGCGUUAGAGUAGGCCUCGGGUUGAUGAAUAUCGACUCGGGGCUUUUCUCUUUGUACC_UUUCA_____\
) } def
/len { sequence length } bind def

/coor [
[114.39558411 231.51264954]
[118.76667023 217.06286621]
[126.87514496 204.32885742]
[138.11929321 194.25553894]
[131.48497009 180.80245972]
[124.85063934 167.34936523]
[118.21630859 153.89627075]
[111.58197784 140.44317627]
[104.94764709 126.99008942]
[94.44440460 126.87153625]
[84.75524902 122.81538391]
[77.29997253 115.41599274]
[73.17102814 105.75762939]
[58.20314407 104.77658081]
[43.22121048 104.04056549]
[28.22924232 103.54978180]
[13.23727417 103.05899048]
[-1.75469494 102.56820679]
[-16.74666405 102.07742310]
[-31.73863220 101.58663177]
[-46.73060226 101.09584808]
[-58.09280396 112.08110809]
[-73.89321136 111.73104095]
[-84.75772858 100.25332642]
[-84.24063110 84.45750427]
[-72.64869690 73.71494293]
[-56.85921860 74.39901733]
[-46.23981476 86.10388184]
[-31.24784660 86.59466553]
[-16.25587845 87.08544922]
[-1.26390874 87.57624054]
[13.72805977 88.06702423]
[28.72002983 88.55780792]
[43.71199799 89.04859924]
[50.63414383 86.06313324]
[59.18418884 89.80870056]
[74.15207672 90.78974152]
[85.89311218 76.46407318]
[104.06190491 72.86248016]
[110.25251007 59.19952393]
[116.44311523 45.53656387]
[122.63372803 31.87360764]
[128.82432556 18.21065140]
[135.01493835 4.54769325]
[141.20553589 -9.11526394]
[147.39614868 -22.77822113]
[153.58674622 -36.44117737]
[159.77735901 -50.10413742]
[158.42515564 -65.86745453]
[170.72541809 -74.26702881]
[176.91603088 -87.92998505]
[183.10662842 -101.59294128]
[180.96162415 -117.85119629]
[194.13220215 -127.62197876]
[209.06959534 -120.85393524]
[210.40748596 -104.50945282]
[196.76959229 -95.40233612]
[190.57897949 -81.73937988]
[184.38838196 -68.07642365]
[186.18336487 -53.29037094]
[173.44030762 -43.91353226]
[167.24971008 -30.25057411]
[161.05909729 -16.58761597]
[154.86849976 -2.92465854]
[148.67788696 10.73829937]
[142.48728943 24.40125656]
[136.29667664 38.06421280]
[130.10607910 51.72717285]
[123.91547394 65.39012909]
[117.72486877 79.05308533]
[126.21089172 91.88006592]
[126.46253204 107.25799561]
[118.40074158 120.35575867]
[125.03507233 133.80885315]
[131.66940308 147.26193237]
[138.30372620 160.71502686]
[144.93806458 174.16812134]
[151.57238770 187.62121582]
[166.40908813 184.83287048]
[181.44779968 186.15196228]
[195.57252502 191.48062134]
[207.73513794 200.42340088]
[217.03308105 212.31671143]
[222.77639771 226.27796936]
[224.53887939 241.27117920]
[222.18974304 256.18374634]
[215.90332031 269.90902710]
[206.14610291 281.42852783]
[193.64212036 289.88745117]
[179.31927490 294.65805054]
[164.24041748 295.38635254]
[149.52447510 292.01828003]
[136.26350403 284.80377197]
[125.44152069 274.27822876]
[117.86161041 261.22265625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[13 37]
[14 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[50 59]
[51 58]
[52 57]
] def

init

% Start Annotations
4 78 0.0 0.6 colorpair
5 77 0.0 0.6 colorpair
6 76 0.0 0.6 colorpair
7 75 0.0 0.6 colorpair
8 74 0.0 0.6 colorpair
9 73 0.0 0.6 colorpair
13 37 0.16 1 colorpair
14 36 0.0 1 colorpair
15 34 0.16 0.6 colorpair
16 33 0.0 1 colorpair
17 32 0.32 1 colorpair
18 31 0.0 0.6 colorpair
19 30 0.16 0.2 colorpair
20 29 0.0 0.6 colorpair
21 28 0.0 0.2 colorpair
39 70 0.16 0.6 colorpair
40 69 0.0 0.6 colorpair
41 68 0.0 0.6 colorpair
42 67 0.0 0.6 colorpair
43 66 0.0 0.6 colorpair
44 65 0.0 0.6 colorpair
45 64 0.0 0.6 colorpair
46 63 0.0 0.6 colorpair
47 62 0.0 0.6 colorpair
48 61 0.0 0.6 colorpair
50 59 0.0 0.2 colorpair
51 58 0.0 0.6 colorpair
52 57 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 78 1 gmark
5 77 1 gmark
6 76 1 gmark
7 75 1 gmark
8 74 1 gmark
9 73 1 gmark
13 cmark
37 cmark
15 34 1 gmark
15 cmark
17 cmark
32 cmark
18 31 1 gmark
19 30 2 gmark
19 cmark
30 cmark
20 29 1 gmark
21 28 2 gmark
39 70 1 gmark
70 cmark
40 69 1 gmark
41 68 1 gmark
42 67 1 gmark
43 66 1 gmark
44 65 1 gmark
45 64 1 gmark
46 63 1 gmark
47 62 1 gmark
48 61 1 gmark
50 59 2 gmark
51 58 1 gmark
52 57 1 gmark
57 cmark

% End Annotations
showpage
end
%%EOF
