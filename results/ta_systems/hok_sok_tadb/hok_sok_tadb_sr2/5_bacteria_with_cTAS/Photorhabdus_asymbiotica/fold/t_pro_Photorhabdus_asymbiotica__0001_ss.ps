%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:57:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____CCGCAAAAAAUCGCAAUAUUUAGUUUGAUCAUUAUUUGUGUGACGUUACUCAUAUUCACAUGGAUAACAAGAGGCUCACUCUGUAAACUCCACAUCAAACAAGGUAAUACAGAGGUUGCGGCAAUCAUGGCUUACGAAUCCAG____\
) } def
/len { sequence length } bind def

/coor [
[215.31646729 511.58773804]
[220.53964233 497.47372437]
[228.41621399 484.65008545]
[238.64343262 473.60971069]
[250.82818604 464.77691650]
[244.55879211 451.14993286]
[238.28938293 437.52297974]
[232.01997375 423.89599609]
[225.75056458 410.26901245]
[219.48117065 396.64202881]
[213.21176147 383.01504517]
[199.90031433 381.61593628]
[188.93971252 373.74621582]
[183.26815796 361.38342285]
[184.47123718 347.72619629]
[192.34024048 336.36697388]
[186.35194397 322.61416626]
[180.36364746 308.86132812]
[174.37535095 295.10848999]
[168.38705444 281.35568237]
[156.21209717 272.77548218]
[157.79678345 257.03384399]
[151.80848694 243.28100586]
[145.82019043 229.52818298]
[139.83189392 215.77536011]
[133.84359741 202.02252197]
[121.66863251 193.44233704]
[123.25331116 177.70069885]
[117.26501465 163.94787598]
[111.27671814 150.19503784]
[105.28842163 136.44221497]
[99.30012512 122.68938446]
[93.31182861 108.93655396]
[84.14989471 97.05973053]
[72.36775970 87.77634430]
[60.58562088 78.49295807]
[48.80348206 69.20957184]
[37.02134705 59.92618942]
[25.23920822 50.64280319]
[13.45707130 41.35941696]
[1.67493391 32.07603455]
[-10.10720348 22.79264832]
[-21.88933945 13.50926208]
[-33.67147827 4.22587681]
[-45.45361328 -5.05750895]
[-57.23575211 -14.34089470]
[-69.01789093 -23.62427902]
[-80.80002594 -32.90766525]
[-94.48983002 -26.15843773]
[-109.75237274 -26.02596474]
[-123.55726624 -32.53654480]
[-133.16354370 -44.39749908]
[-136.66386414 -59.25382996]
[-133.36323547 -74.15579987]
[-123.91700745 -86.14460754]
[-110.20072937 -92.83987427]
[-94.93778992 -92.91223907]
[-81.15863800 -86.34735107]
[-71.59914398 -74.44865417]
[-68.15735626 -59.57865524]
[-71.51663971 -44.68980408]
[-59.73450470 -35.40641785]
[-47.95236588 -26.12303162]
[-36.17022705 -16.83964539]
[-24.38809204 -7.55626059]
[-12.60595512 1.72712505]
[-0.82381767 11.01051044]
[10.95831966 20.29389572]
[22.74045563 29.57728195]
[34.52259445 38.86066818]
[46.30472946 48.14405060]
[58.08686829 57.42743683]
[69.86900330 66.71082306]
[81.65113831 75.99420929]
[93.43328094 85.27759552]
[107.94190216 81.46973419]
[113.64656830 67.59685516]
[119.35123444 53.72397614]
[125.05589294 39.85109329]
[130.76055908 25.97821236]
[136.46522522 12.10533237]
[134.55766296 -3.60045648]
[146.55389404 -12.42880535]
[152.25856018 -26.30168533]
[152.69033813 -43.25013351]
[169.09597778 -47.52701950]
[177.74723816 -32.94649506]
[166.13143921 -20.59702301]
[160.42677307 -6.72414207]
[162.74237061 7.98936605]
[150.33810425 17.80999565]
[144.63343811 31.68287659]
[138.92877197 45.55575562]
[133.22410583 59.42863846]
[127.51944733 73.30152130]
[121.81478119 87.17440033]
[119.96126556 93.82994080]
[116.44229126 98.87899017]
[111.90660095 101.96596527]
[107.06465912 102.94825745]
[113.05295563 116.70108795]
[119.04125214 130.45391846]
[125.02954865 144.20674133]
[131.01783752 157.95957947]
[137.00613403 171.71240234]
[149.60942078 181.27627563]
[147.59642029 196.03422546]
[153.58471680 209.78706360]
[159.57301331 223.53988647]
[165.56130981 237.29270935]
[171.54960632 251.04554749]
[184.15289307 260.60943604]
[182.13989258 275.36737061]
[188.12818909 289.12020874]
[194.11648560 302.87301636]
[200.10478210 316.62585449]
[206.09307861 330.37869263]
[222.63024902 333.78778076]
[233.78337097 346.24316406]
[235.32202148 362.72479248]
[226.83874512 376.74563599]
[233.10813904 390.37261963]
[239.37754822 403.99960327]
[245.64695740 417.62658691]
[251.91636658 431.25357056]
[258.18576050 444.88055420]
[264.45516968 458.50750732]
[279.09045410 455.00112915]
[294.12860107 454.41760254]
[308.99157715 456.77938843]
[323.10809326 461.99569702]
[335.93557739 469.86605835]
[346.98092651 480.08792114]
[355.81961060 492.26837158]
[362.11190796 505.93927002]
[365.61593628 520.57513428]
[366.19702148 535.61334229]
[363.83282471 550.47595215]
[358.61422729 564.59161377]
[350.74179077 577.41784668]
[340.51815796 588.46154785]
[328.33624268 597.29821777]
[314.66433716 603.58831787]
[300.02792358 607.08996582]
[284.98959351 607.66864014]
[270.12738037 605.30200195]
[256.01254272 600.08111572]
[243.18763733 592.20666504]
[232.14558411 581.98120117]
[223.31083679 569.79791260]
[217.02297974 556.12493896]
[213.52368164 541.48797607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[8 124]
[9 123]
[10 122]
[11 121]
[16 117]
[17 116]
[18 115]
[19 114]
[20 113]
[22 111]
[23 110]
[24 109]
[25 108]
[26 107]
[28 105]
[29 104]
[30 103]
[31 102]
[32 101]
[33 100]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
[83 89]
[84 88]
] def

init

% Start Annotations
5 127 0.0 0.2 colorpair
6 126 0.0 1 colorpair
7 125 0.0 1 colorpair
8 124 0.0 1 colorpair
9 123 0.0 1 colorpair
10 122 0.0 1 colorpair
11 121 0.0 1 colorpair
16 117 0.0 1 colorpair
17 116 0.0 0.2 colorpair
18 115 0.0 1 colorpair
19 114 0.0 0.2 colorpair
20 113 0.0 1 colorpair
22 111 0.0 1 colorpair
23 110 0.0 1 colorpair
24 109 0.0 1 colorpair
25 108 0.0 1 colorpair
26 107 0.0 1 colorpair
28 105 0.0 1 colorpair
29 104 0.0 1 colorpair
30 103 0.0 1 colorpair
31 102 0.0 1 colorpair
32 101 0.0 1 colorpair
33 100 0.0 1 colorpair
34 75 0.0 1 colorpair
35 74 0.0 0.2 colorpair
36 73 0.0 0.2 colorpair
37 72 0.0 1 colorpair
38 71 0.0 1 colorpair
39 70 0.0 1 colorpair
40 69 0.0 1 colorpair
41 68 0.0 1 colorpair
42 67 0.0 1 colorpair
43 66 0.0 1 colorpair
44 65 0.16 1 colorpair
45 64 0.0 1 colorpair
46 63 0.0 1 colorpair
47 62 0.0 1 colorpair
48 61 0.0 1 colorpair
76 96 0.0 1 colorpair
77 95 0.0 0.2 colorpair
78 94 0.0 1 colorpair
79 93 0.0 1 colorpair
80 92 0.16 1 colorpair
81 91 0.0 1 colorpair
83 89 0.0 1 colorpair
84 88 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 127 2 gmark
17 116 2 gmark
19 114 2 gmark
35 74 2 gmark
36 73 2 gmark
65 cmark
77 95 2 gmark
80 cmark
92 cmark

% End Annotations
showpage
end
%%EOF
