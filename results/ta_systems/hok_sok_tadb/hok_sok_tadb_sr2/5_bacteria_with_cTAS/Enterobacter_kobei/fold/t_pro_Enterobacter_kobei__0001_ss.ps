%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 02:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUGCCAAAACGUACUCUGCUGUUAGGUUUGUUUCUGAUCUGUACGACGCUAUUGAUCUUCACCUGGAUGGUGCGUGAUUCGCUAUGUGAAUUGCAUUUCAGACAGGAGAAAACAGAGCUGGCAGCAGUGUUGGCUUACAAAGCAAA____\
) } def
/len { sequence length } bind def

/coor [
[128.37992859 526.38616943]
[134.89639282 512.75854492]
[144.98927307 501.51974487]
[157.84037781 493.58087158]
[153.85835266 479.11907959]
[149.87634277 464.65728760]
[145.89433289 450.19549561]
[137.21635437 462.43038940]
[122.46197510 465.13378906]
[110.00983429 456.77050781]
[106.93118286 442.08984375]
[114.97429657 429.42855835]
[129.57170105 425.97665405]
[142.43461609 433.69534302]
[140.27200317 418.85205078]
[130.78059387 407.37326050]
[136.44741821 392.60174561]
[134.28480530 377.75848389]
[132.12219238 362.91519165]
[129.95956421 348.07189941]
[127.79695129 333.22860718]
[125.63433838 318.38534546]
[123.47172546 303.54205322]
[121.30910492 288.69876099]
[119.14649200 273.85546875]
[116.98387146 259.01220703]
[107.49246216 247.53341675]
[113.15929413 232.76190186]
[110.99668121 217.91860962]
[108.83406067 203.07533264]
[106.67144775 188.23204041]
[104.50883484 173.38876343]
[102.34621429 158.54547119]
[100.18360138 143.70219421]
[97.86770630 128.88204956]
[95.39878845 114.08663177]
[86.06376648 102.34536743]
[72.20557404 96.60511017]
[58.34738159 90.86486053]
[44.48918915 85.12461090]
[33.76527405 95.89801025]
[19.73294830 101.74285889]
[4.53203297 101.76785278]
[-9.51943970 95.96918488]
[-20.27872467 85.23110962]
[-26.10510635 71.19110870]
[-26.11010551 55.99016953]
[-20.29295921 41.94633865]
[-9.54074001 31.20118904]
[4.50691605 25.39328194]
[19.70784378 25.40827751]
[33.74401474 31.24389267]
[44.47500992 42.01023865]
[50.26443100 56.06552124]
[50.22943878 71.26641846]
[64.08763123 77.00666809]
[77.94582367 82.74691772]
[91.80401611 88.48717499]
[98.70308685 85.54559326]
[92.82014465 71.74736786]
[106.61845398 65.86463928]
[112.50122070 79.66243744]
[119.40028381 76.72086334]
[124.85290527 62.74699402]
[130.30552673 48.77312851]
[135.75814819 34.79926300]
[129.65585327 20.46748543]
[135.38464355 6.37367201]
[149.08541870 0.64439380]
[154.53804016 -13.32947254]
[159.99064636 -27.30333900]
[157.79911804 -42.97202682]
[169.63359070 -52.01607132]
[167.44206238 -67.68476105]
[179.27653503 -76.72879791]
[184.72914124 -90.70266724]
[190.18176270 -104.67653656]
[195.63438416 -118.65039825]
[201.08700562 -132.62426758]
[206.53962708 -146.59812927]
[211.99224854 -160.57199097]
[217.44487000 -174.54586792]
[222.89749146 -188.51972961]
[223.02241516 -205.47322083]
[239.34794617 -210.04635620]
[248.26171875 -195.62481689]
[236.87135315 -183.06710815]
[231.41873169 -169.09324646]
[225.96611023 -155.11938477]
[220.51348877 -141.14550781]
[215.06086731 -127.17164612]
[209.60824585 -113.19777679]
[204.15563965 -99.22391510]
[198.70301819 -85.25004578]
[193.25039673 -71.27618408]
[195.83192444 -56.60699844]
[183.60745239 -46.56344986]
[186.18899536 -31.89426613]
[173.96452332 -21.85071945]
[168.51190186 -7.87685299]
[163.05928040 6.09701347]
[169.25892639 19.59145546]
[163.92825317 33.84061813]
[149.73200989 40.25188065]
[144.27938843 54.22574615]
[138.82676697 68.19961548]
[133.37414551 82.17347717]
[110.19420624 111.61771393]
[112.66313171 126.41313171]
[117.18839264 134.42222595]
[115.02688599 141.53958130]
[117.18949890 156.38285828]
[119.35211945 171.22615051]
[121.51473236 186.06942749]
[123.67734528 200.91271973]
[125.83996582 215.75599670]
[128.00257874 230.59928894]
[137.64868164 243.13975525]
[131.82716370 256.84957886]
[133.98977661 271.69287109]
[136.15238953 286.53613281]
[138.31500244 301.37942505]
[140.47763062 316.22271729]
[142.64024353 331.06600952]
[144.80285645 345.90927124]
[146.96546936 360.75256348]
[149.12808228 375.59585571]
[151.29071045 390.43914795]
[160.93679810 402.97961426]
[155.11528015 416.68942261]
[157.27789307 431.53271484]
[160.35612488 446.21347046]
[164.33813477 460.67526245]
[168.32015991 475.13705444]
[172.30216980 489.59884644]
[187.40574646 489.84048462]
[201.82905579 494.32882690]
[214.40283203 502.70001221]
[224.10778809 514.27545166]
[230.15718079 528.11676025]
[232.06063843 543.10186768]
[229.66381836 558.01599121]
[223.16104126 571.65014648]
[213.07946777 582.89910889]
[200.23634338 590.85089111]
[185.67280579 594.86090088]
[170.56947327 594.60412598]
[156.15069580 590.10125732]
[143.58532715 581.71746826]
[133.89201355 570.13226318]
[127.85651398 556.28491211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 135]
[5 134]
[6 133]
[7 132]
[14 131]
[15 130]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[35 109]
[36 108]
[37 58]
[38 57]
[39 56]
[40 55]
[63 107]
[64 106]
[65 105]
[66 104]
[69 101]
[70 100]
[71 99]
[73 97]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% Start Annotations
4 135 0.0 1 colorpair
5 134 0.0 1 colorpair
6 133 0.0 1 colorpair
7 132 0.0 1 colorpair
14 131 0.0 1 colorpair
15 130 0.0 1 colorpair
17 128 0.0 1 colorpair
18 127 0.0 1 colorpair
19 126 0.0 1 colorpair
20 125 0.0 1 colorpair
21 124 0.0 1 colorpair
22 123 0.0 1 colorpair
23 122 0.0 1 colorpair
24 121 0.0 1 colorpair
25 120 0.0 1 colorpair
26 119 0.0 1 colorpair
28 117 0.0 1 colorpair
29 116 0.0 1 colorpair
30 115 0.0 1 colorpair
31 114 0.0 1 colorpair
32 113 0.0 1 colorpair
33 112 0.0 1 colorpair
34 111 0.0 1 colorpair
35 109 0.0 1 colorpair
36 108 0.0 1 colorpair
37 58 0.0 1 colorpair
38 57 0.0 1 colorpair
39 56 0.0 1 colorpair
40 55 0.0 1 colorpair
63 107 0.0 1 colorpair
64 106 0.0 1 colorpair
65 105 0.0 1 colorpair
66 104 0.0 1 colorpair
69 101 0.0 1 colorpair
70 100 0.0 1 colorpair
71 99 0.0 1 colorpair
73 97 0.0 1 colorpair
75 95 0.0 1 colorpair
76 94 0.0 1 colorpair
77 93 0.0 1 colorpair
78 92 0.0 1 colorpair
79 91 0.0 1 colorpair
80 90 0.0 1 colorpair
81 89 0.0 1 colorpair
82 88 0.0 1 colorpair
83 87 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
