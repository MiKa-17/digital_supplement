%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:55:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AAUGCCGCAAAAGUAUCUGUUGUUUGGCUUAGUAGUGAUUUGCUUCACUAUUUUAUUAUUGACCUGGAUGGUUCGUGAUUCGCUAUGUGAAUUACAGCUCAGGCAGGGAAAUAUUGAGCUGGUGGC___AUUCUUAGCCUGUGAUAUUAA____\
) } def
/len { sequence length } bind def

/coor [
[94.18540192 340.79064941]
[91.18389893 326.06341553]
[90.46578979 311.05059814]
[92.04790497 296.10412598]
[95.89315033 281.57434082]
[101.91139984 267.80187988]
[109.96157074 255.10954285]
[119.85495758 243.79489136]
[131.35963440 234.12313843]
[144.20593262 226.32102966]
[138.46568298 212.46282959]
[132.72543335 198.60462952]
[126.98518372 184.74644470]
[117.40173340 187.22006226]
[107.60276794 188.61352539]
[97.70964813 188.90959167]
[87.84490204 188.10455322]
[78.13067627 186.20841980]
[68.68729401 183.24465942]
[59.63169479 179.24998474]
[51.07602310 174.27384949]
[43.12623978 168.37788391]
[35.88079834 161.63511658]
[29.42942047 154.12904358]
[23.85200882 145.95262146]
[19.21763229 137.20710754]
[15.58368587 128.00082397]
[12.99517155 118.44775391]
[11.48414707 108.66622925]
[11.06932449 98.77738190]
[-3.85844660 97.30712891]
[-18.78621674 95.83686829]
[-24.42927170 109.84873962]
[-33.79242706 121.70234680]
[-46.11665344 130.43676758]
[-60.40288162 135.34394836]
[-75.49298859 136.02607727]
[-90.16368866 132.42785645]
[-103.22570038 124.84098816]
[-113.62013245 113.88049316]
[-120.50436401 100.43489838]
[-123.32032013 85.59416962]
[-121.83972168 70.56139374]
[-116.18259430 56.55519485]
[-106.80753326 44.71099854]
[-94.47454071 35.98896027]
[-80.18338776 31.09613991]
[-65.09260559 30.42917252]
[-50.42552185 34.04212570]
[-37.37114334 41.64211655]
[-26.98772430 52.61304855]
[-20.11700439 66.06555176]
[-17.31595993 80.90909576]
[-2.38818932 82.37935638]
[12.53958130 83.84960938]
[14.93540382 74.03513336]
[18.42880440 64.55567932]
[22.97470856 55.53355789]
[28.51446342 47.08518219]
[34.97658920 39.31956100]
[42.27770233 32.33689117]
[50.32360077 26.22727394]
[59.01046753 21.06953621]
[68.22621918 16.93023109]
[77.85194397 13.86276436]
[87.76344299 11.90671730]
[97.83282471 11.08732796]
[107.93017578 11.41516972]
[117.92520142 12.88601112]
[127.68894196 15.48087502]
[137.09541321 19.16628075]
[146.02323914 23.89467430]
[154.84002686 11.75941849]
[163.65679932 -0.37583596]
[172.47358704 -12.51109123]
[162.14958191 -23.44960403]
[154.01356506 -36.09561539]
[148.34141541 -50.01764679]
[145.32492065 -64.74100494]
[145.06541443 -79.76396179]
[147.57023621 -94.57485199]
[152.75263977 -108.66951752]
[160.43476868 -121.56843567]
[170.35372925 -132.83306885]
[182.17060852 -142.08071899]
[195.48204041 -148.99763489]
[209.83403015 -153.34951782]
[224.73735046 -154.98956299]
[239.68429565 -153.86338806]
[254.16590881 -150.01078796]
[267.68939209 -143.56440735]
[276.50616455 -155.69966125]
[272.54779053 -170.82794189]
[279.28646851 -184.93908691]
[293.54037476 -191.37022400]
[308.57931519 -187.08477783]
[317.30227661 -174.10620117]
[315.59060669 -158.56257629]
[304.25250244 -147.79313660]
[288.64141846 -146.88287354]
[279.82464600 -134.74761963]
[290.13449097 -123.87807465]
[298.27359009 -111.29576111]
[303.96353149 -97.42838287]
[307.00912476 -82.74768066]
[307.30523682 -67.75331879]
[304.84033203 -52.95594406]
[299.69689941 -38.85974503]
[292.04873657 -25.94529724]
[282.15502930 -14.65317535]
[270.35168457 -5.36891794]
[257.03970337 1.59012842]
[242.67182922 5.98566151]
[227.73693848 7.66658163]
[212.74351501 6.57418537]
[198.20227051 2.74421406]
[184.60884094 -3.69431210]
[175.79205322 8.44094276]
[166.97528076 20.57619858]
[158.15850830 32.71145248]
[174.43157959 51.31632614]
[184.95581055 73.68136597]
[188.91833496 98.07917023]
[186.01310730 122.62532806]
[176.46450806 145.42398071]
[161.01005554 164.71424866]
[140.84338379 179.00619507]
[146.58363342 192.86437988]
[152.32388306 206.72257996]
[158.06413269 220.58076477]
[172.66476440 217.01399231]
[187.63876343 215.71791077]
[202.63511658 216.72290039]
[217.30227661 220.00540161]
[231.29643250 225.48846436]
[244.28953552 233.04357910]
[255.97702026 242.49360657]
[266.08489990 253.61705017]
[274.37625122 266.15316772]
[280.65670776 279.80807495]
[284.77902222 294.26168823]
[286.64657593 309.17520142]
[286.21560669 324.19900513]
[283.49621582 338.98092651]
[278.55212402 353.17443848]
[271.49923706 366.44686890]
[262.50289917 378.48706055]
[251.77398682 389.01278687]
[239.56399536 397.77731323]
[226.15916443 404.57516479]
[211.87370300 409.24700928]
[197.04249573 411.68331909]
[182.01319885 411.82699585]
[167.13812256 409.67465210]
[152.76596069 405.27679443]
[139.23361206 398.73645020]
[126.85830688 390.20693970]
[115.93013000 379.88824463]
[106.70526123 368.02224731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[13 127]
[30 55]
[31 54]
[32 53]
[72 120]
[73 119]
[74 118]
[75 117]
[91 101]
[92 100]
] def

init

% Start Annotations
10 130 0.0 1 colorpair
11 129 0.0 1 colorpair
13 127 0.0 0.2 colorpair
30 55 0.16 1 colorpair
31 54 0.32 1 colorpair
32 53 0.0 1 colorpair
72 120 0.32 0.2 colorpair
73 119 0.32 1 colorpair
74 118 0.16 0.2 colorpair
91 101 0.16 1 colorpair
92 100 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 128 10 gmark
12 cmark
128 cmark
13 127 2 gmark
30 cmark
55 cmark
31 cmark
54 cmark
72 120 2 gmark
72 cmark
120 cmark
73 cmark
119 cmark
74 118 2 gmark
118 cmark
75 117 12 gmark
117 cmark
101 cmark

% End Annotations
showpage
end
%%EOF
