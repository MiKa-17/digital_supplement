%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:33:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____ACUGCCGCAAAACAAUCUGUUCUGGUGCGUAUUAAUCGUGUGUUUCACGCUCUUGAUAUUCACAUGCCUGACCCGGAAAUCGCUU_UGCGAAGUCCGGCUCAGGGACGGGAACAGGGAGGUGGCGGCAUUCCUGGCUUACGAAUCCAAC_AG\
) } def
/len { sequence length } bind def

/coor [
[-68.21060181 473.18038940]
[-77.93795013 472.33749390]
[-87.60757446 470.98403931]
[-97.19269562 469.12374878]
[-106.66677094 466.76174927]
[-116.00355530 463.90463257]
[-125.17719269 460.56024170]
[-134.16226196 456.73782349]
[-142.93389893 452.44802856]
[-151.46780396 447.70263672]
[-159.74031067 442.51486206]
[-167.72853088 436.89901733]
[-175.41033936 430.87066650]
[-182.76443481 424.44647217]
[-189.77046204 417.64422607]
[-196.40899658 410.48278809]
[-202.66166687 402.98196411]
[-208.51112366 395.16250610]
[-213.94119263 387.04608154]
[-218.93679810 378.65518188]
[-223.48411560 370.01300049]
[-227.57052612 361.14349365]
[-231.18472290 352.07119751]
[-234.31668091 342.82125854]
[-236.95771790 333.41925049]
[-239.10049438 323.89126587]
[-240.73908997 314.26364136]
[-241.86895752 304.56307983]
[-242.48693848 294.81640625]
[-242.59132385 285.05062866]
[-242.18182373 275.29278564]
[-241.25955200 265.56991577]
[-239.82704163 255.90895081]
[-237.88827515 246.33660889]
[-235.44859314 236.87944031]
[-232.51475525 227.56362915]
[-229.09486389 218.41496277]
[-225.19839478 209.45878601]
[-220.83613586 200.71992493]
[-216.02014160 192.22256470]
[-210.76373291 183.99023438]
[-205.08149719 176.04577637]
[-198.98912048 168.41116333]
[-192.50349426 161.10754395]
[-185.64257812 154.15516663]
[-178.42533875 147.57330322]
[-170.87176514 141.38015747]
[-163.00279236 135.59291077]
[-154.84017944 130.22756958]
[-146.40653992 125.29904175]
[-137.72521973 120.82096100]
[-128.82026672 116.80574036]
[-119.71633911 113.26450348]
[-110.43862915 110.20706940]
[-101.01283264 107.64192200]
[-91.46506500 105.57616425]
[-81.82174683 104.01553345]
[-72.10959625 102.96436310]
[-62.35550690 102.42556000]
[-52.58648682 102.40063477]
[-42.82958984 102.88967133]
[-33.11184311 103.89131927]
[-23.46015358 105.40280914]
[-13.90125561 107.41997528]
[-4.46162271 109.93723297]
[4.83259964 112.94761658]
[13.95567036 116.44281006]
[22.88232040 120.41313934]
[31.58782387 124.84761047]
[40.04806900 129.73394775]
[48.23961639 135.05865479]
[56.13978195 140.80696106]
[65.75618744 129.29501343]
[75.37258911 117.78307343]
[84.98899841 106.27113342]
[87.41162109 89.69513702]
[103.18249512 84.04602814]
[112.56811523 72.34516907]
[121.95373535 60.64431000]
[130.00624084 47.98899078]
[136.62942505 34.53040695]
[143.25260925 21.07182503]
[136.18519592 7.38395262]
[138.50566101 -7.66492844]
[149.11700439 -18.33561325]
[163.80116272 -20.68368721]
[170.42434692 -34.14226913]
[177.04751587 -47.60085297]
[175.42210388 -63.91925049]
[188.89758301 -73.26502991]
[203.61152649 -66.02406311]
[204.42750549 -49.64522934]
[190.50610352 -40.97766876]
[183.88291931 -27.51908684]
[177.25973511 -14.06050491]
[184.35769653 -0.99310404]
[182.37655640 13.92464066]
[171.86834717 24.94419670]
[156.71118164 27.69500732]
[150.08801270 41.15359116]
[143.46482849 54.61217117]
[156.79901123 47.74200058]
[171.79901123 47.73269272]
[185.14172363 54.58631134]
[193.87121582 66.78450775]
[196.05355835 81.62490845]
[191.20527649 95.81977081]
[180.40045166 106.22438049]
[166.03279114 110.53369904]
[151.28527832 107.79305267]
[139.42509460 98.60959625]
[133.07971191 85.01782990]
[133.65460205 70.02993011]
[124.26897430 81.73078918]
[114.88335419 93.43164825]
[115.44866180 105.09865570]
[108.04973602 114.13715363]
[96.50093842 115.88754272]
[86.88452911 127.39948273]
[77.26812744 138.91142273]
[67.65172577 150.42335510]
[88.60297394 172.86145020]
[105.56855774 198.44308472]
[118.08534241 226.46826172]
[125.81189728 256.17028809]
[128.53784180 286.73675537]
[126.18953705 317.33172607]
[118.83211517 347.11874390]
[106.66766357 375.28347778]
[90.02963257 401.05615234]
[101.54157257 410.67254639]
[113.05351257 420.28897095]
[128.41464233 417.36157227]
[142.03834534 425.03808594]
[147.49189758 439.69390869]
[142.20033264 454.40896606]
[128.66213989 462.23529053]
[113.26964569 459.47753906]
[103.29072571 447.43780518]
[103.43711090 431.80090332]
[91.92517090 422.18450928]
[80.41323090 412.56808472]
[73.67011261 419.62725830]
[66.56490326 426.32199097]
[59.11727905 432.63372803]
[51.34785461 438.54501343]
[43.27814102 444.03939819]
[34.93048096 449.10171509]
[26.32798576 453.71792603]
[17.49447823 457.87521362]
[8.45441437 461.56210327]
[-0.76717103 464.76831055]
[-10.14474392 467.48501587]
[-19.65233803 469.70465088]
[-29.26362228 471.42105103]
[-38.95198441 472.62948608]
[-48.69058990 473.32656860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[72 121]
[73 120]
[74 119]
[75 118]
[77 115]
[78 114]
[79 113]
[80 101]
[81 100]
[82 99]
[86 95]
[87 94]
[88 93]
[130 142]
[131 141]
[132 140]
] def

init

% Start Annotations
72 121 0.16 1 colorpair
73 120 0.16 1 colorpair
74 119 0.0 1 colorpair
75 118 0.16 1 colorpair
77 115 0.16 0.6 colorpair
78 114 0.16 0.2 colorpair
79 113 0.0 0.2 colorpair
80 101 0.0 1 colorpair
81 100 0.16 0.6 colorpair
82 99 0.16 1 colorpair
86 95 0.0 1 colorpair
87 94 0.32 1 colorpair
88 93 0.0 1 colorpair
130 142 0.32 1 colorpair
131 141 0.0 1 colorpair
132 140 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
72 cmark
121 cmark
73 cmark
120 cmark
118 cmark
77 115 1 gmark
77 cmark
115 cmark
78 114 2 gmark
78 cmark
79 113 2 gmark
81 100 1 gmark
81 cmark
100 cmark
82 cmark
87 cmark
94 cmark
130 cmark
142 cmark

% End Annotations
showpage
end
%%EOF
