%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:58:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGAGGCUAUUCUGUUGGUGUCUAGUCAAGCAGAUGGCCUCGUGUGGUUGGUUAAUGAAAAUUAACUUCCUACGGGGCUUUCUUCUUUCUGCCGCACAACACGGUAACAAACCACCUGCACGUCAUGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[100.90550995 143.10444641]
[92.53939819 141.17025757]
[84.96997070 137.68058777]
[76.93257141 150.34552002]
[68.89516449 163.01043701]
[68.03348541 178.80815125]
[54.68105316 185.40829468]
[46.64365005 198.07321167]
[38.60624695 210.73812866]
[30.56884575 223.40304565]
[34.26060867 238.77011108]
[25.93380165 252.20289612]
[10.52857208 255.73197937]
[-2.81543064 247.26362610]
[-6.18144608 231.82194519]
[2.42752314 218.56822205]
[17.90392876 215.36564636]
[25.94132996 202.70072937]
[33.97873306 190.03581238]
[42.01613235 177.37089539]
[42.30292892 162.47904968]
[56.23024750 154.97303772]
[64.26765442 142.30810547]
[72.30505371 129.64318848]
[64.72936249 120.04273224]
[60.35898209 108.62082672]
[59.59108734 96.41548920]
[62.49546051 84.53589630]
[68.80815887 74.06165314]
[59.24679947 62.50395203]
[49.68544006 50.94625092]
[34.92718506 45.24497604]
[32.77621078 30.50650597]
[23.21484947 18.94880676]
[13.65349007 7.39110756]
[-1.10476351 1.68983305]
[-3.25573945 -13.04863930]
[-12.81709957 -24.60633850]
[-22.37845993 -36.16403580]
[-31.93981934 -47.72173691]
[-41.50117874 -59.27943420]
[-51.06253815 -70.83713531]
[-60.62389755 -82.39482880]
[-70.18525696 -93.95252991]
[-79.74662018 -105.51023102]
[-87.68294525 -110.16802979]
[-89.38412476 -117.41156006]
[-98.70134735 -129.16696167]
[-111.44184113 -131.43833923]
[-118.95661926 -141.47683716]
[-117.63317108 -153.54243469]
[-126.70216370 -165.49038696]
[-135.77114868 -177.43833923]
[-144.84013367 -189.38627625]
[-153.90911865 -201.33422852]
[-162.97810364 -213.28218079]
[-172.04708862 -225.23013306]
[-187.36631775 -231.08279419]
[-189.68983459 -247.31649780]
[-176.62742615 -257.23141479]
[-161.61656189 -250.62791443]
[-160.09915161 -234.29911804]
[-151.03016663 -222.35116577]
[-141.96116638 -210.40321350]
[-132.89218140 -198.45526123]
[-123.82319641 -186.50732422]
[-114.75421143 -174.55937195]
[-105.68522644 -162.61141968]
[-89.18061066 -156.73138428]
[-86.94594574 -138.48417664]
[-77.62872314 -126.72877502]
[-68.18891907 -115.07158661]
[-58.62755966 -103.51389313]
[-49.06620026 -91.95619202]
[-39.50484085 -80.39849091]
[-29.94347954 -68.84079742]
[-20.38212013 -57.28309631]
[-10.82076073 -45.72539520]
[-1.25940073 -34.16769791]
[8.30195904 -22.60999870]
[22.37631989 -17.73540878]
[25.21118927 -2.17025208]
[34.77254868 9.38744640]
[44.33390808 20.94514465]
[58.40826797 25.81973648]
[61.24313736 41.38489151]
[70.80449677 52.94259262]
[80.36585999 64.50028992]
[102.40927887 56.95341110]
[126.41960907 62.75929260]
[144.53797913 81.55401611]
[157.20289612 73.51660919]
[169.86782837 65.47920990]
[182.53274536 57.44180679]
[195.19766235 49.40440750]
[197.08634949 33.88129807]
[208.54646301 23.24176216]
[224.16690063 22.50946045]
[236.57214355 32.03016281]
[239.90483093 47.30848694]
[232.59136963 61.13047409]
[218.08496094 66.96980286]
[203.23506165 62.06932449]
[190.57014465 70.10672760]
[177.90522766 78.14412689]
[165.24031067 86.18153381]
[152.57539368 94.21893311]
[151.24725342 101.60040283]
[166.21510315 100.61880493]
[181.18295288 99.63719940]
[194.16209412 92.11777496]
[209.14796448 92.76847839]
[221.42649841 101.38461304]
[227.13523865 115.25581360]
[224.47839355 130.01864624]
[214.29171753 141.02917480]
[199.77964783 144.82385254]
[185.50718689 140.20896912]
[175.96485901 128.63815308]
[162.27790833 122.50074005]
[148.59097290 116.36333466]
[147.26284790 123.74480438]
[156.33183289 135.69274902]
[165.40081787 147.64070129]
[178.09095764 150.17839050]
[185.39384460 160.37205505]
[183.81800842 172.40730286]
[192.63479614 184.54255676]
[201.45156860 196.67781067]
[210.26835632 208.81306458]
[219.08512878 220.94831848]
[227.90190125 233.08357239]
[243.45874023 237.00332642]
[249.96221924 251.66908264]
[242.42344666 265.83050537]
[226.62550354 268.62420654]
[214.68724060 257.90704346]
[215.76664734 241.90036011]
[206.94987488 229.76510620]
[198.13310242 217.62985229]
[189.31631470 205.49459839]
[180.49954224 193.35932922]
[171.68275452 181.22407532]
[155.30490112 174.99967957]
[153.45286560 156.70968628]
[144.38388062 144.76173401]
[135.31489563 132.81378174]
[127.33953857 138.14845276]
[118.68302155 141.66305542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[7 20]
[8 19]
[9 18]
[10 17]
[29 88]
[30 87]
[31 86]
[33 84]
[34 83]
[35 82]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[47 71]
[48 70]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[122 147]
[123 146]
[124 145]
[127 143]
[128 142]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% Start Annotations
3 24 0.0 1 colorpair
4 23 0.0 1 colorpair
5 22 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.0 1 colorpair
9 18 0.0 1 colorpair
10 17 0.0 1 colorpair
29 88 0.0 1 colorpair
30 87 0.0 1 colorpair
31 86 0.0 1 colorpair
33 84 0.0 1 colorpair
34 83 0.0 1 colorpair
35 82 0.0 1 colorpair
37 80 0.0 1 colorpair
38 79 0.0 1 colorpair
39 78 0.0 1 colorpair
40 77 0.0 1 colorpair
41 76 0.0 1 colorpair
42 75 0.0 1 colorpair
43 74 0.0 1 colorpair
44 73 0.0 1 colorpair
45 72 0.0 1 colorpair
47 71 0.0 1 colorpair
48 70 0.0 1 colorpair
51 68 0.0 1 colorpair
52 67 0.0 1 colorpair
53 66 0.0 1 colorpair
54 65 0.0 1 colorpair
55 64 0.0 1 colorpair
56 63 0.0 1 colorpair
57 62 0.0 1 colorpair
91 107 0.0 1 colorpair
92 106 0.0 1 colorpair
93 105 0.0 1 colorpair
94 104 0.0 1 colorpair
95 103 0.0 1 colorpair
122 147 0.0 1 colorpair
123 146 0.0 1 colorpair
124 145 0.0 1 colorpair
127 143 0.0 1 colorpair
128 142 0.0 1 colorpair
129 141 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair
132 138 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
