%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 01:56:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_UGAAGGGCAAUGCUUUUAUCGGGAGCGUUAUUAUUGUCUGCCUGCCGGCAUUCAUGUUAACCCGCCUUUCACGGGAAACGCGUUGCGCGUUGCGCUUGCAGGGUGCGGGUAUAAAGGUUGUCGCUUCACUGGCUUAUCAAUCC___\
) } def
/len { sequence length } bind def

/coor [
[116.24088287 303.84161377]
[128.30674744 294.75363159]
[123.01058960 280.71972656]
[117.71442413 266.68582153]
[112.41825867 252.65190125]
[107.12209320 238.61799622]
[101.67727661 224.64108276]
[96.08442688 210.72274780]
[90.49158478 196.80441284]
[84.89873505 182.88607788]
[79.30588531 168.96774292]
[73.71304321 155.04940796]
[59.12009430 151.57868958]
[47.86000824 161.48881531]
[36.59992218 171.39894104]
[25.33983994 181.30905151]
[14.07975483 191.21917725]
[2.81966996 201.12930298]
[-5.07566404 216.13262939]
[-21.67830849 212.69918823]
[-22.97511292 195.79490662]
[-7.09045076 189.86921692]
[4.16963387 179.95909119]
[15.42971802 170.04896545]
[26.68980217 160.13885498]
[37.94988632 150.22872925]
[49.20997238 140.31860352]
[47.86408234 132.94035339]
[33.23126221 136.23893738]
[21.49612236 145.58166504]
[7.45248699 140.31134033]
[4.76139355 125.55471039]
[16.04062080 115.66638184]
[30.31727219 120.26425171]
[45.17230225 118.18385315]
[43.82641602 110.80560303]
[29.79250336 105.50943756]
[15.52979565 111.77146149]
[1.37286103 106.20047760]
[-4.50912237 92.56457520]
[-18.54303169 87.26840973]
[-32.57694244 81.97224426]
[-46.61085129 76.67607880]
[-62.69683838 79.86560059]
[-73.29702759 67.35289001]
[-67.50685883 52.00994492]
[-51.28275299 49.62027740]
[-41.31468964 62.64216995]
[-27.28077698 67.93833160]
[-13.24686718 73.23449707]
[0.78704268 78.53066254]
[14.21138191 72.18064880]
[28.51920700 77.35179138]
[35.08866882 91.47553253]
[49.12257767 96.77169800]
[54.25943375 82.39543915]
[63.16865158 70.73387146]
[74.72314453 62.67951584]
[87.62046051 58.70936584]
[100.52443695 58.86516571]
[112.20188904 62.77914429]
[119.51731873 49.68393326]
[126.83274078 36.58871841]
[134.14816284 23.49350739]
[141.46359253 10.39829636]
[148.77900696 -2.69691515]
[155.95504761 -15.86903000]
[162.99085999 -29.11656380]
[170.02668762 -42.36409760]
[177.06251526 -55.61163330]
[183.95735168 -68.93309784]
[190.71040344 -82.32698059]
[190.01445007 -98.13287354]
[202.65315247 -106.01402283]
[201.95721436 -121.81991577]
[214.59591675 -129.70106506]
[213.89996338 -145.50695801]
[226.53866577 -153.38810730]
[233.29171753 -166.78199768]
[240.04478455 -180.17588806]
[246.79783630 -193.56976318]
[253.55088806 -206.96365356]
[260.30395508 -220.35754395]
[262.03585815 -237.22279358]
[278.72143555 -240.22734070]
[286.22760010 -225.02557373]
[273.69784546 -213.60449219]
[266.94479370 -200.21060181]
[260.19171143 -186.81671143]
[253.43865967 -173.42282104]
[246.68560791 -160.02893066]
[239.93255615 -146.63505554]
[241.11152649 -131.78717041]
[227.98980713 -122.94800568]
[229.16876221 -108.10013580]
[216.04704285 -99.26096344]
[217.22601318 -84.41309357]
[204.10429382 -75.57392883]
[197.35122681 -62.18003845]
[197.14692688 -54.73988724]
[190.31005859 -48.57580566]
[183.27423096 -35.32827377]
[176.23840332 -22.08073807]
[169.20257568 -8.83320522]
[168.84039307 -1.39906812]
[161.87422180 4.61850882]
[154.55880737 17.71372032]
[147.24337769 30.80893326]
[139.92794800 43.90414429]
[132.61253357 56.99935532]
[125.29710388 70.09456635]
[136.14175415 80.94566345]
[142.32440186 95.68188477]
[142.48617554 112.30149841]
[136.12428284 128.34664917]
[123.73470306 141.26676941]
[106.80241394 148.82098389]
[87.63137817 149.45655823]
[93.22422791 163.37489319]
[98.81707001 177.29322815]
[104.40991974 191.21156311]
[110.00276947 205.12989807]
[115.59561157 219.04823303]
[121.74102783 225.90190125]
[121.15599823 233.32182312]
[126.45216370 247.35574341]
[131.74833679 261.38964844]
[137.04449463 275.42355347]
[142.34066772 289.45745850]
[157.40237427 288.30795288]
[172.17755127 291.44973755]
[185.46844482 298.62811279]
[196.19760132 309.26116943]
[203.49526978 322.48690796]
[206.76985168 337.23324585]
[205.75590515 352.30468750]
[200.53561401 366.47949219]
[191.53216553 378.60858154]
[179.47543335 387.70867920]
[165.34280396 393.04208374]
[150.27993774 394.17648315]
[135.50791931 391.01986694]
[122.22425079 383.82815552]
[111.50578308 373.18432617]
[104.22140503 359.95123291]
[100.96163940 345.20162964]
[101.99073029 330.13119507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[7 123]
[8 122]
[9 121]
[10 120]
[11 119]
[12 118]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[36 55]
[37 54]
[40 51]
[41 50]
[42 49]
[43 48]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 104]
[68 103]
[69 102]
[70 101]
[71 99]
[72 98]
[74 96]
[76 94]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% Start Annotations
2 129 0.0 1 colorpair
3 128 0.0 1 colorpair
4 127 0.0 1 colorpair
5 126 0.0 1 colorpair
6 125 0.0 1 colorpair
7 123 0.0 1 colorpair
8 122 0.0 1 colorpair
9 121 0.0 1 colorpair
10 120 0.0 1 colorpair
11 119 0.0 1 colorpair
12 118 0.0 1 colorpair
13 27 0.0 1 colorpair
14 26 0.0 1 colorpair
15 25 0.0 1 colorpair
16 24 0.0 1 colorpair
17 23 0.0 1 colorpair
18 22 0.0 1 colorpair
36 55 0.0 1 colorpair
37 54 0.0 1 colorpair
40 51 0.0 1 colorpair
41 50 0.0 1 colorpair
42 49 0.0 1 colorpair
43 48 0.0 1 colorpair
61 111 0.0 1 colorpair
62 110 0.0 1 colorpair
63 109 0.0 1 colorpair
64 108 0.0 1 colorpair
65 107 0.0 1 colorpair
66 106 0.0 1 colorpair
67 104 0.0 1 colorpair
68 103 0.0 1 colorpair
69 102 0.0 1 colorpair
70 101 0.0 1 colorpair
71 99 0.0 1 colorpair
72 98 0.0 1 colorpair
74 96 0.0 1 colorpair
76 94 0.0 1 colorpair
78 92 0.0 1 colorpair
79 91 0.0 1 colorpair
80 90 0.0 1 colorpair
81 89 0.0 1 colorpair
82 88 0.0 1 colorpair
83 87 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
