%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 21:28:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUA_UCCUG_AUGUUGUCUAG_ACAU_A__C_AG___G__GGCCUC_____GU__G__GGUU__AA_U___GA_A_A___AU______UAA________C____UACGGGGCUUUCUUCU_______UUCUGCCACACAAC_ACGGUAACAAACCAC________CUUCACGUC_AUGAGGC_AAAAAGCCUCAAGCGCC_____CAU_AUA\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50505066 92.07358551]
[62.52827454 91.22107697]
[47.58179092 89.94317627]
[32.67767334 88.24090576]
[17.82796860 86.11564636]
[3.04467964 83.56911469]
[-11.66024494 80.60337067]
[-26.27491951 77.22080994]
[-40.78753281 73.42416382]
[-55.18635559 69.21650696]
[-69.45974731 64.60124207]
[-83.59617615 59.58208466]
[-97.58420563 54.16310501]
[-111.41254425 48.34867859]
[-125.07000732 42.14350510]
[-138.54556274 35.55260086]
[-151.82830811 28.58129311]
[-164.90750122 21.23521614]
[-177.77259827 13.52030563]
[-190.41317749 5.44279814]
[-202.81903076 -2.99077678]
[-214.98013306 -11.77360344]
[-226.88665771 -20.89858246]
[-238.52897644 -30.35833931]
[-249.89765930 -40.14522934]
[-260.98355103 -50.25133896]
[-271.77767944 -60.66850281]
[-282.27133179 -71.38829803]
[-292.45599365 -82.40206146]
[-302.32345581 -93.70089722]
[-311.86572266 -105.27566528]
[-321.07513428 -117.11701202]
[-329.94418335 -129.21537781]
[-338.46572876 -141.56095886]
[-346.63290405 -154.14379883]
[-354.43908691 -166.95372009]
[-361.87796021 -179.98037720]
[-368.94351196 -193.21322632]
[-375.63003540 -206.64157104]
[-381.93215942 -220.25457764]
[-387.84472656 -234.04122925]
[-393.36303711 -247.99038696]
[-398.48254395 -262.09078979]
[-403.19915771 -276.33099365]
[-407.50909424 -290.69955444]
[-411.40881348 -305.18478394]
[-414.89517212 -319.77505493]
[-417.96539307 -334.45852661]
[-420.61694336 -349.22332764]
[-422.84771729 -364.05755615]
[-424.65588379 -378.94918823]
[-426.04003906 -393.88623047]
[-426.99899292 -408.85656738]
[-427.53198242 -423.84808350]
[-427.63861084 -438.84872437]
[-427.31878662 -453.84634399]
[-426.57272339 -468.82879639]
[-425.40109253 -483.78396606]
[-423.80477905 -498.69982910]
[-421.78512573 -513.56427002]
[-419.34371948 -528.36529541]
[-416.48257446 -543.09088135]
[-413.20394897 -557.72924805]
[-409.51055908 -572.26849365]
[-405.40533447 -586.69683838]
[-400.89163208 -601.00268555]
[-395.97308350 -615.17443848]
[-390.65365601 -629.20062256]
[-384.93765259 -643.06988525]
[-378.82968140 -656.77111816]
[-372.33471680 -670.29321289]
[-365.45800781 -683.62512207]
[-358.20504761 -696.75622559]
[-350.58178711 -709.67584229]
[-342.59432983 -722.37347412]
[-334.24911499 -734.83898926]
[-325.55294800 -747.06219482]
[-316.51281738 -759.03326416]
[-307.13604736 -770.74249268]
[-297.43020630 -782.18048096]
[-287.40313721 -793.33789062]
[-277.06295776 -804.20581055]
[-266.41799927 -814.77539062]
[-255.47689819 -825.03802490]
[-244.24848938 -834.98553467]
[-232.74182129 -844.60986328]
[-220.96623230 -853.90319824]
[-208.93121338 -862.85803223]
[-196.64649963 -871.46710205]
[-184.12202454 -879.72344971]
[-171.36790466 -887.62048340]
[-158.39445496 -895.15173340]
[-145.21215820 -902.31121826]
[-131.83166504 -909.09301758]
[-118.26378632 -915.49169922]
[-104.51950836 -921.50213623]
[-90.60992432 -927.11938477]
[-76.54627228 -932.33898926]
[-62.33993530 -937.15673828]
[-48.00238419 -941.56866455]
[-33.54521179 -945.57122803]
[-18.98009872 -949.16119385]
[-4.31882000 -952.33569336]
[10.42677402 -955.09210205]
[25.24476624 -957.42822266]
[40.12317657 -959.34222412]
[55.04998779 -960.83245850]
[70.01312256 -961.89782715]
[85.00050354 -962.53735352]
[100.00000000 -962.75054932]
[114.99949646 -962.53735352]
[129.98687744 -961.89782715]
[144.95001221 -960.83245850]
[159.87681580 -959.34222412]
[174.75523376 -957.42822266]
[189.57322693 -955.09210205]
[204.31881714 -952.33569336]
[218.98010254 -949.16119385]
[233.54521179 -945.57122803]
[248.00238037 -941.56866455]
[262.33993530 -937.15673828]
[276.54626465 -932.33898926]
[290.60992432 -927.11938477]
[304.51950073 -921.50213623]
[318.26379395 -915.49169922]
[331.83166504 -909.09301758]
[345.21215820 -902.31121826]
[358.39443970 -895.15173340]
[371.36788940 -887.62048340]
[384.12200928 -879.72344971]
[396.64648438 -871.46710205]
[408.93121338 -862.85803223]
[420.96621704 -853.90319824]
[432.74182129 -844.60986328]
[444.24847412 -834.98553467]
[455.47689819 -825.03802490]
[466.41799927 -814.77539062]
[477.06295776 -804.20581055]
[487.40313721 -793.33789062]
[497.43020630 -782.18048096]
[507.13604736 -770.74249268]
[516.51281738 -759.03326416]
[525.55297852 -747.06219482]
[534.24914551 -734.83898926]
[542.59429932 -722.37347412]
[550.58178711 -709.67584229]
[558.20507812 -696.75622559]
[565.45800781 -683.62512207]
[572.33471680 -670.29321289]
[578.82971191 -656.77111816]
[584.93762207 -643.06988525]
[590.65362549 -629.20062256]
[595.97308350 -615.17443848]
[600.89160156 -601.00268555]
[605.40533447 -586.69683838]
[609.51055908 -572.26849365]
[613.20397949 -557.72924805]
[616.48254395 -543.09088135]
[619.34375000 -528.36529541]
[621.78515625 -513.56427002]
[623.80480957 -498.69982910]
[625.40112305 -483.78396606]
[626.57275391 -468.82879639]
[627.31878662 -453.84634399]
[627.63861084 -438.84872437]
[627.53198242 -423.84808350]
[626.99896240 -408.85656738]
[626.04003906 -393.88623047]
[624.65588379 -378.94918823]
[622.84771729 -364.05755615]
[620.61694336 -349.22332764]
[617.96539307 -334.45852661]
[614.89520264 -319.77505493]
[611.40881348 -305.18478394]
[607.50909424 -290.69955444]
[603.19915771 -276.33099365]
[598.48254395 -262.09078979]
[593.36303711 -247.99038696]
[587.84472656 -234.04122925]
[581.93212891 -220.25457764]
[575.63006592 -206.64157104]
[568.94348145 -193.21322632]
[561.87792969 -179.98037720]
[554.43908691 -166.95372009]
[546.63287354 -154.14379883]
[538.46575928 -141.56095886]
[529.94415283 -129.21537781]
[521.07513428 -117.11701202]
[511.86572266 -105.27566528]
[502.32345581 -93.70089722]
[492.45599365 -82.40206146]
[482.27133179 -71.38829803]
[471.77767944 -60.66850281]
[460.98355103 -50.25133896]
[449.89767456 -40.14522934]
[438.52896118 -30.35833931]
[426.88665771 -20.89858246]
[414.98013306 -11.77360344]
[402.81903076 -2.99077678]
[390.41317749 5.44279814]
[377.77258301 13.52030563]
[364.90750122 21.23521614]
[351.82830811 28.58129311]
[338.54556274 35.55260086]
[325.07000732 42.14350510]
[311.41253662 48.34867859]
[297.58419800 54.16310501]
[283.59616089 59.58208466]
[269.45974731 64.60124207]
[255.18635559 69.21650696]
[240.78753662 73.42416382]
[226.27491760 77.22080994]
[211.66024780 80.60337067]
[196.95532227 83.56911469]
[182.17202759 86.11564636]
[167.32232666 88.24090576]
[152.41821289 89.94317627]
[137.47172546 91.22107697]
[122.49494934 92.07358551]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
