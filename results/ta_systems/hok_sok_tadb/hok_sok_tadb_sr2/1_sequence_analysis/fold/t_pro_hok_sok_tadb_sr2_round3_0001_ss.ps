%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 21:28:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________________________AUGAU___G__CC___G___CAAAAAUCUGUG_________UUAG_UGGCCCUGAUC___GUCAU______CUGUUUCACGGUACU_GGUAUUCACCUUGAUGACGCGGG_AAUCGCUGUGCGAGUUGCGGAUCAGAGA___CGGAAAUACGGAGGUU_GCGGCCUU___CUUGGCU___UACGAAU___C___CG_A_G_AAG_______________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50407410 92.11691284]
[62.52282333 91.35096741]
[47.56601715 90.20267487]
[32.64341736 88.67278290]
[17.76475716 86.76229095]
[2.93973994 84.47243500]
[-11.82196236 81.80471802]
[-26.51071930 78.76087189]
[-41.11695099 75.34289551]
[-55.63112640 71.55300903]
[-70.04377747 67.39368439]
[-84.34551239 62.86763382]
[-98.52698517 57.97781754]
[-112.57895660 52.72742081]
[-126.49225616 47.11986542]
[-140.25781250 41.15881348]
[-153.86663818 34.84815216]
[-167.30986023 28.19200134]
[-180.57870483 21.19469833]
[-193.66452026 13.86080837]
[-206.55877686 6.19511747]
[-219.25305176 -1.79737496]
[-231.73905945 -10.11145496]
[-244.00868225 -18.74169922]
[-256.05389404 -27.68247795]
[-267.86682129 -36.92795944]
[-279.43981934 -46.47211075]
[-290.76525879 -56.30870438]
[-301.83581543 -66.43132782]
[-312.64422607 -76.83338165]
[-323.18347168 -87.50807190]
[-333.44665527 -98.44843292]
[-343.42709351 -109.64733887]
[-353.11825562 -121.09747314]
[-362.51385498 -132.79138184]
[-371.60775757 -144.72142029]
[-380.39398193 -156.87980652]
[-388.86685181 -169.25863647]
[-397.02081299 -181.84979248]
[-404.85055542 -194.64509583]
[-412.35098267 -207.63618469]
[-419.51718140 -220.81457520]
[-426.34445190 -234.17169189]
[-432.82843018 -247.69882202]
[-438.96478271 -261.38711548]
[-444.74957275 -275.22766113]
[-450.17901611 -289.21142578]
[-455.24954224 -303.32931519]
[-459.95788574 -317.57205200]
[-464.30093384 -331.93041992]
[-468.27587891 -346.39501953]
[-471.88012695 -360.95639038]
[-475.11129761 -375.60507202]
[-477.96734619 -390.33151245]
[-480.44635010 -405.12606812]
[-482.54669189 -419.97912598]
[-484.26705933 -434.88095093]
[-485.60626221 -449.82186890]
[-486.56347656 -464.79214478]
[-487.13806152 -479.78195190]
[-487.32962036 -494.78152466]
[-487.13806152 -509.78112793]
[-486.56350708 -524.77093506]
[-485.60629272 -539.74121094]
[-484.26708984 -554.68212891]
[-482.54675293 -569.58398438]
[-480.44641113 -584.43701172]
[-477.96740723 -599.23156738]
[-475.11138916 -613.95800781]
[-471.88021851 -628.60668945]
[-468.27597046 -643.16809082]
[-464.30105591 -657.63269043]
[-459.95800781 -671.99102783]
[-455.24966431 -686.23376465]
[-450.17913818 -700.35168457]
[-444.74972534 -714.33544922]
[-438.96493530 -728.17596436]
[-432.82858276 -741.86431885]
[-426.34463501 -755.39141846]
[-419.51736450 -768.74853516]
[-412.35116577 -781.92694092]
[-404.85076904 -794.91802979]
[-397.02102661 -807.71331787]
[-388.86706543 -820.30450439]
[-380.39422607 -832.68334961]
[-371.60800171 -844.84173584]
[-362.51409912 -856.77178955]
[-353.11853027 -868.46569824]
[-343.42736816 -879.91583252]
[-333.44692993 -891.11474609]
[-323.18374634 -902.05511475]
[-312.64453125 -912.72979736]
[-301.83612061 -923.13189697]
[-290.76556396 -933.25451660]
[-279.44012451 -943.09112549]
[-267.86715698 -952.63525391]
[-256.05419922 -961.88073730]
[-244.00901794 -970.82153320]
[-231.73939514 -979.45178223]
[-219.25338745 -987.76586914]
[-206.55911255 -995.75836182]
[-193.66487122 -1003.42407227]
[-180.57905579 -1010.75799561]
[-167.31021118 -1017.75531006]
[-153.86700439 -1024.41149902]
[-140.25817871 -1030.72216797]
[-126.49263000 -1036.68322754]
[-112.57933807 -1042.29077148]
[-98.52736664 -1047.54113770]
[-84.34590149 -1052.43103027]
[-70.04417419 -1056.95703125]
[-55.63151932 -1061.11633301]
[-41.11734772 -1064.90625000]
[-26.51111984 -1068.32421875]
[-11.82236385 -1071.36816406]
[2.93933606 -1074.03588867]
[17.76435089 -1076.32568359]
[32.64301300 -1078.23620605]
[47.56560898 -1079.76611328]
[62.52241516 -1080.91442871]
[77.50366211 -1081.68041992]
[92.49958801 -1082.06347656]
[107.50041199 -1082.06347656]
[122.49633789 -1081.68041992]
[137.47758484 -1080.91442871]
[152.43438721 -1079.76611328]
[167.35699463 -1078.23620605]
[182.23564148 -1076.32568359]
[197.06066895 -1074.03588867]
[211.82235718 -1071.36816406]
[226.51112366 -1068.32421875]
[241.11734009 -1064.90625000]
[255.63151550 -1061.11633301]
[270.04415894 -1056.95703125]
[284.34588623 -1052.43103027]
[298.52737427 -1047.54113770]
[312.57934570 -1042.29077148]
[326.49264526 -1036.68322754]
[340.25817871 -1030.72216797]
[353.86700439 -1024.41149902]
[367.31021118 -1017.75531006]
[380.57907104 -1010.75799561]
[393.66488647 -1003.42407227]
[406.55911255 -995.75836182]
[419.25338745 -987.76586914]
[431.73941040 -979.45178223]
[444.00900269 -970.82153320]
[456.05419922 -961.88073730]
[467.86715698 -952.63525391]
[479.44012451 -943.09112549]
[490.76556396 -933.25451660]
[501.83612061 -923.13189697]
[512.64453125 -912.72979736]
[523.18377686 -902.05511475]
[533.44696045 -891.11474609]
[543.42736816 -879.91583252]
[553.11853027 -868.46569824]
[562.51409912 -856.77178955]
[571.60797119 -844.84173584]
[580.39422607 -832.68334961]
[588.86706543 -820.30450439]
[597.02105713 -807.71331787]
[604.85076904 -794.91802979]
[612.35119629 -781.92694092]
[619.51733398 -768.74853516]
[626.34466553 -755.39141846]
[632.82861328 -741.86431885]
[638.96496582 -728.17596436]
[644.74975586 -714.33544922]
[650.17913818 -700.35168457]
[655.24969482 -686.23376465]
[659.95800781 -671.99102783]
[664.30102539 -657.63269043]
[668.27600098 -643.16809082]
[671.88018799 -628.60668945]
[675.11138916 -613.95800781]
[677.96740723 -599.23156738]
[680.44641113 -584.43701172]
[682.54675293 -569.58398438]
[684.26708984 -554.68212891]
[685.60632324 -539.74121094]
[686.56347656 -524.77093506]
[687.13806152 -509.78112793]
[687.32965088 -494.78152466]
[687.13806152 -479.78195190]
[686.56347656 -464.79214478]
[685.60626221 -449.82186890]
[684.26702881 -434.88095093]
[682.54669189 -419.97912598]
[680.44635010 -405.12606812]
[677.96734619 -390.33151245]
[675.11132812 -375.60507202]
[671.88012695 -360.95639038]
[668.27587891 -346.39501953]
[664.30090332 -331.93041992]
[659.95788574 -317.57205200]
[655.24957275 -303.32931519]
[650.17901611 -289.21142578]
[644.74957275 -275.22766113]
[638.96478271 -261.38711548]
[632.82843018 -247.69882202]
[626.34448242 -234.17169189]
[619.51715088 -220.81457520]
[612.35095215 -207.63618469]
[604.85058594 -194.64509583]
[597.02081299 -181.84979248]
[588.86682129 -169.25863647]
[580.39398193 -156.87980652]
[571.60772705 -144.72142029]
[562.51385498 -132.79138184]
[553.11828613 -121.09747314]
[543.42706299 -109.64733887]
[533.44665527 -98.44843292]
[523.18347168 -87.50807190]
[512.64422607 -76.83338165]
[501.83581543 -66.43132782]
[490.76525879 -56.30870438]
[479.43981934 -46.47211075]
[467.86682129 -36.92795944]
[456.05389404 -27.68247795]
[444.00866699 -18.74169922]
[431.73907471 -10.11145496]
[419.25305176 -1.79737496]
[406.55877686 6.19511747]
[393.66452026 13.86080837]
[380.57870483 21.19469833]
[367.30984497 28.19200134]
[353.86663818 34.84815216]
[340.25781250 41.15881348]
[326.49224854 47.11986542]
[312.57894897 52.72742081]
[298.52697754 57.97781754]
[284.34552002 62.86763382]
[270.04379272 67.39368439]
[255.63111877 71.55300903]
[241.11694336 75.34289551]
[226.51071167 78.76087189]
[211.82196045 81.80471802]
[197.06025696 84.47243500]
[182.23524475 86.76229095]
[167.35658264 88.67278290]
[152.43397522 90.20267487]
[137.47717285 91.35096741]
[122.49592590 92.11691284]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
