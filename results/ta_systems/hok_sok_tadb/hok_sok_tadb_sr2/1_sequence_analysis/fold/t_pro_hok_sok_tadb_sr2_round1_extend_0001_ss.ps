%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 11:57:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUGCCGCGAAACACCCUUGUCUGGUGCGUAUUAAUCGUGUGUCUCACACUGUUGAUAUUCACUUACCUGACCCGGAAAUCGCUCUGCGAAAUCCGGUACAGGGACGGAAACAGGGAGGUGGCGGCUUUCAUGGCUUACGAAUCCGGUAAG\
) } def
/len { sequence length } bind def

/coor [
[181.26966858 419.26953125]
[166.65403748 422.63760376]
[151.90025330 425.33697510]
[137.03889465 427.36203003]
[122.10076904 428.70858765]
[107.11682892 429.37384033]
[92.11814880 429.35644531]
[77.13579559 428.65637207]
[62.20084000 427.27511597]
[47.34422302 425.21554565]
[32.59674835 422.48190308]
[17.98897362 419.07989502]
[3.55117869 415.01651001]
[-10.68671036 410.30023193]
[-24.69518471 404.94079590]
[-38.44520950 398.94934082]
[-51.90828705 392.33825684]
[-65.05651093 385.12124634]
[-77.86263275 377.31329346]
[-90.30010223 368.93057251]
[-102.34314728 359.99044800]
[-113.96681213 350.51144409]
[-125.14699554 340.51324463]
[-135.86051941 330.01651001]
[-146.08520508 319.04306030]
[-155.79981995 307.61560059]
[-164.98426819 295.75781250]
[-173.61949158 283.49429321]
[-181.68759155 270.85046387]
[-189.17185974 257.85250854]
[-196.05677795 244.52740479]
[-202.32806396 230.90272522]
[-207.97273254 217.00674438]
[-212.97909546 202.86824036]
[-217.33674622 188.51652527]
[-221.03666687 173.98133850]
[-224.07119751 159.29283142]
[-226.43405151 144.48141479]
[-228.12031555 129.57781982]
[-229.12649536 114.61290741]
[-229.45051575 99.61771393]
[-229.09169006 84.62331390]
[-228.05078125 69.66078186]
[-226.32994080 54.76113129]
[-223.93272400 39.95524979]
[-220.86412048 25.27381516]
[-217.13046265 10.74726295]
[-212.73951721 -3.59429908]
[-207.70036316 -17.72114754]
[-202.02346802 -31.60400009]
[-195.72056580 -45.21408463]
[-188.80474854 -58.52318954]
[-181.29034424 -71.50373077]
[-173.19291687 -84.12880707]
[-164.52925110 -96.37224579]
[-155.31732178 -108.20867920]
[-145.57620239 -119.61356354]
[-135.32608032 -130.56326294]
[-124.58821869 -141.03509521]
[-113.38486481 -151.00733948]
[-101.73923492 -160.45933533]
[-89.67547607 -169.37149048]
[-77.21858215 -177.72532654]
[-64.39437866 -185.50354004]
[-51.22943878 -192.69000244]
[-37.75105667 -199.26983643]
[-23.98716354 -205.22937012]
[-9.96628857 -210.55627441]
[4.28250742 -215.23950195]
[18.72969246 -219.26936340]
[33.34532166 -222.63746643]
[48.09910583 -225.33686829]
[62.96046066 -227.36196899]
[77.89858246 -228.70855713]
[92.88251495 -229.37384033]
[107.88120270 -229.35644531]
[122.86354828 -228.65641785]
[137.79850769 -227.27520752]
[152.65513611 -225.21565247]
[167.40261841 -222.48205566]
[182.01039124 -219.08004761]
[196.44819641 -215.01670837]
[210.68609619 -210.30046082]
[224.69458008 -204.94105530]
[238.44461060 -198.94961548]
[251.90771484 -192.33856201]
[265.05593872 -185.12158203]
[277.86209106 -177.31365967]
[290.29956055 -168.93095398]
[302.34262085 -159.99084473]
[313.96630859 -150.51187134]
[325.14651489 -140.51368713]
[335.86007690 -130.01698303]
[346.08477783 -119.04354095]
[355.79940796 -107.61609650]
[364.98388672 -95.75833893]
[373.61914062 -83.49484253]
[381.68725586 -70.85102844]
[389.17153931 -57.85309601]
[396.05648804 -44.52798843]
[402.32781982 -30.90332794]
[407.97250366 -17.00734901]
[412.97888184 -2.86885548]
[417.33657837 11.48285007]
[421.03652954 26.01802063]
[424.07107544 40.70652771]
[426.43395996 55.51793289]
[428.12023926 70.42153168]
[429.12646484 85.38643646]
[429.45050049 100.38162994]
[429.09173584 115.37603760]
[428.05084229 130.33856201]
[426.33001709 145.23822021]
[423.93286133 160.04411316]
[420.86425781 174.72555542]
[417.13064575 189.25210571]
[412.73971558 203.59367371]
[407.70059204 217.72053528]
[402.02371216 231.60339355]
[395.72085571 245.21350098]
[388.80505371 258.52261353]
[381.29067993 271.50317383]
[393.91683960 279.60131836]
[406.54302979 287.69943237]
[419.16918945 295.79757690]
[431.87078857 287.39581299]
[446.89263916 284.89300537]
[461.63211060 288.72280884]
[473.53555298 298.22167969]
[480.54055786 311.74386597]
[481.43350220 326.94656372]
[476.05969238 341.19586182]
[465.35012817 352.02291870]
[451.16033936 357.55191040]
[435.94879150 356.82492065]
[422.35095215 349.96789551]
[412.72277832 338.16882324]
[408.73236084 323.47201538]
[411.07107544 308.42373657]
[398.44488525 300.32562256]
[385.81872559 292.22747803]
[373.19253540 284.12933350]
[364.52886963 296.37277222]
[355.31689453 308.20919800]
[345.57577515 319.61404419]
[335.32562256 330.56372070]
[324.58773804 341.03555298]
[313.38436890 351.00775146]
[301.73870850 360.45974731]
[289.67492676 369.37185669]
[277.21801758 377.72567749]
[264.39379883 385.50387573]
[251.22886658 392.69030762]
[237.75045776 399.27011108]
[223.98655701 405.22961426]
[209.96566772 410.55648804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[122 142]
[123 141]
[124 140]
[125 139]
] def

init

% Start Annotations
122 142 0.0 0.6 colorpair
123 141 0.32 0.6 colorpair
124 140 0.0 0.6 colorpair
125 139 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
122 142 1 gmark
123 141 1 gmark
123 cmark
141 cmark
124 140 1 gmark
139 cmark

% End Annotations
showpage
end
%%EOF
