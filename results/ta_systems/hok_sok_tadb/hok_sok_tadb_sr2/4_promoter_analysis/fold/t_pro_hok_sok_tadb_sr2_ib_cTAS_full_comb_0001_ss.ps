%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 00:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________G______AUG___CA___GCAAAAGGCU_AUGUUAAUGGCCCU_________GAUCGUCAUCUGUUUCACGGUCUUAGUAUUCACACUGGUGACGAGG_AAAUCGCUCUGCGAGGUGCGAAUCCGAGACGGCCAUACGGAGGUGGCUGC___C_UUCAUAGC___UUAC__GAA_UCC__GAG_________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50543213 92.05757141]
[62.53043747 91.17308044]
[47.58804703 89.84729767]
[32.69125748 88.08137512]
[17.85303497 85.87685394]
[3.08628798 83.23564911]
[-11.59613419 80.16005707]
[-26.18145752 76.65275574]
[-40.65699005 72.71680450]
[-55.01013565 68.35561371]
[-69.22840881 63.57298660]
[-83.29943085 58.37308121]
[-97.21096802 52.76042557]
[-110.95091248 46.73989868]
[-124.50730896 40.31674576]
[-137.86836243 33.49654770]
[-151.02244568 26.28524399]
[-163.95811462 18.68910789]
[-176.66410828 10.71474934]
[-189.12937927 2.36910510]
[-201.34307861 -6.34056187]
[-213.29458618 -15.40667439]
[-224.97348022 -24.82134247]
[-236.36962891 -34.57637405]
[-247.47309875 -44.66328430]
[-258.27423096 -55.07329559]
[-268.76364136 -65.79734802]
[-278.93215942 -76.82611084]
[-288.77099609 -88.14999390]
[-298.27154541 -99.75913239]
[-307.42556763 -111.64344025]
[-316.22509766 -123.79256439]
[-324.66247559 -136.19593811]
[-332.73031616 -148.84277344]
[-340.42166138 -161.72204590]
[-347.72979736 -174.82258606]
[-354.64837646 -188.13296509]
[-361.17135620 -201.64161682]
[-367.29306030 -215.33677673]
[-373.00817871 -229.20654297]
[-378.31173706 -243.23883057]
[-383.19909668 -257.42141724]
[-387.66604614 -271.74200439]
[-391.70864868 -286.18811035]
[-395.32345581 -300.74719238]
[-398.50726318 -315.40652466]
[-401.25732422 -330.15338135]
[-403.57122803 -344.97494507]
[-405.44699097 -359.85830688]
[-406.88293457 -374.79049683]
[-407.87786865 -389.75857544]
[-408.43087769 -404.74945068]
[-408.54153442 -419.75015259]
[-408.20968628 -434.74755859]
[-407.43563843 -449.72866821]
[-406.22006226 -464.68045044]
[-404.56405640 -479.58984375]
[-402.46899414 -494.44390869]
[-399.93676758 -509.22973633]
[-396.96951294 -523.93444824]
[-393.56988525 -538.54522705]
[-389.74075317 -553.04937744]
[-385.48553467 -567.43432617]
[-380.80789185 -581.68743896]
[-375.71188354 -595.79644775]
[-370.20196533 -609.74902344]
[-364.28292847 -623.53295898]
[-357.95989990 -637.13635254]
[-351.23843384 -650.54736328]
[-344.12429810 -663.75421143]
[-336.62377930 -676.74554443]
[-328.74331665 -689.51000977]
[-320.48980713 -702.03649902]
[-311.87045288 -714.31408691]
[-302.89273071 -726.33209229]
[-293.56442261 -738.08013916]
[-283.89370728 -749.54791260]
[-273.88894653 -760.72546387]
[-263.55886841 -771.60302734]
[-252.91244507 -782.17126465]
[-241.95896912 -792.42083740]
[-230.70794678 -802.34289551]
[-219.16917419 -811.92877197]
[-207.35269165 -821.17022705]
[-195.26879883 -830.05908203]
[-182.92797852 -838.58764648]
[-170.34097290 -846.74859619]
[-157.51875305 -854.53466797]
[-144.47247314 -861.93920898]
[-131.21347046 -868.95574951]
[-117.75328827 -875.57818604]
[-104.10364532 -881.80072021]
[-90.27640533 -887.61791992]
[-76.28360748 -893.02484131]
[-62.13742447 -898.01666260]
[-47.85016632 -902.58905029]
[-33.43426514 -906.73809814]
[-18.90225983 -910.46014404]
[-4.26679897 -913.75195312]
[10.45938396 -916.61071777]
[25.26347733 -919.03381348]
[40.13259888 -921.01928711]
[55.05381012 -922.56530762]
[70.01412964 -923.67059326]
[85.00054169 -924.33416748]
[100.00000000 -924.55541992]
[114.99945831 -924.33416748]
[129.98587036 -923.67059326]
[144.94619751 -922.56530762]
[159.86740112 -921.01928711]
[174.73652649 -919.03381348]
[189.54061890 -916.61071777]
[204.26679993 -913.75195312]
[218.90225220 -910.46014404]
[233.43426514 -906.73809814]
[247.85015869 -902.58905029]
[262.13742065 -898.01666260]
[276.28359985 -893.02484131]
[290.27639771 -887.61791992]
[304.10363770 -881.80072021]
[317.75329590 -875.57818604]
[331.21347046 -868.95574951]
[344.47247314 -861.93920898]
[357.51876831 -854.53466797]
[370.34097290 -846.74859619]
[382.92797852 -838.58764648]
[395.26879883 -830.05908203]
[407.35269165 -821.17022705]
[419.16918945 -811.92877197]
[430.70794678 -802.34289551]
[441.95895386 -792.42083740]
[452.91244507 -782.17126465]
[463.55886841 -771.60302734]
[473.88894653 -760.72546387]
[483.89370728 -749.54791260]
[493.56442261 -738.08013916]
[502.89273071 -726.33209229]
[511.87045288 -714.31408691]
[520.48980713 -702.03649902]
[528.74334717 -689.51000977]
[536.62377930 -676.74554443]
[544.12432861 -663.75421143]
[551.23840332 -650.54736328]
[557.95989990 -637.13635254]
[564.28289795 -623.53295898]
[570.20196533 -609.74902344]
[575.71185303 -595.79644775]
[580.80786133 -581.68743896]
[585.48553467 -567.43432617]
[589.74078369 -553.04937744]
[593.56988525 -538.54522705]
[596.96954346 -523.93444824]
[599.93676758 -509.22973633]
[602.46899414 -494.44390869]
[604.56402588 -479.58984375]
[606.22009277 -464.68045044]
[607.43560791 -449.72866821]
[608.20965576 -434.74755859]
[608.54150391 -419.75015259]
[608.43090820 -404.74945068]
[607.87786865 -389.75857544]
[606.88293457 -374.79049683]
[605.44696045 -359.85830688]
[603.57122803 -344.97494507]
[601.25732422 -330.15338135]
[598.50726318 -315.40652466]
[595.32342529 -300.74719238]
[591.70867920 -286.18811035]
[587.66601562 -271.74200439]
[583.19909668 -257.42141724]
[578.31170654 -243.23883057]
[573.00817871 -229.20654297]
[567.29302979 -215.33677673]
[561.17132568 -201.64161682]
[554.64837646 -188.13296509]
[547.72979736 -174.82258606]
[540.42169189 -161.72204590]
[532.73034668 -148.84277344]
[524.66247559 -136.19593811]
[516.22509766 -123.79256439]
[507.42556763 -111.64344025]
[498.27154541 -99.75913239]
[488.77099609 -88.14999390]
[478.93215942 -76.82611084]
[468.76364136 -65.79734802]
[458.27423096 -55.07329559]
[447.47311401 -44.66328430]
[436.36962891 -34.57637405]
[424.97348022 -24.82134247]
[413.29458618 -15.40667439]
[401.34307861 -6.34056187]
[389.12939453 2.36910510]
[376.66412354 10.71474934]
[363.95809937 18.68910789]
[351.02243042 26.28524399]
[337.86834717 33.49654770]
[324.50732422 40.31674576]
[310.95092773 46.73989868]
[297.21096802 52.76042557]
[283.29943848 58.37308121]
[269.22839355 63.57298660]
[255.01013184 68.35561371]
[240.65698242 72.71680450]
[226.18145752 76.65275574]
[211.59613037 80.16005707]
[196.91371155 83.23564911]
[182.14697266 85.87685394]
[167.30874634 88.08137512]
[152.41195679 89.84729767]
[137.46955872 91.17308044]
[122.49456787 92.05757141]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
