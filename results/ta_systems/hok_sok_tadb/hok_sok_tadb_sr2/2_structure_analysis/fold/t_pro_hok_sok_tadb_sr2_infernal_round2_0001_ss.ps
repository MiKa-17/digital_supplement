%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Mar  7 03:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___A__UGC_C_GCAA___A_AAUCUGUGU_________UAG_UGGCC_CUGA_U_CGUCAUCUGU______UUCACGGUGUUGG_UAUUCACAUUGAUGACGCGG_GAAUCGCUGUGCGAGUUGCGUAUCAGAGACGGA______AA_UA_C__GGAGGUU_GC___GGC___UUUUUU______G__GC_UUA_CG_AA__UCC_______GA___\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50518799 92.06771851]
[62.52906036 91.20349121]
[47.58405685 89.90804291]
[32.68259430 88.18244934]
[17.83704567 86.02813721]
[3.05974817 83.44690704]
[-11.63702679 80.44089508]
[-26.24106979 77.01260376]
[-40.74025345 73.16487122]
[-55.12252808 68.90090942]
[-69.37595367 64.22424316]
[-83.48868561 59.13876343]
[-97.44900513 53.64870071]
[-111.24530792 47.75860596]
[-124.86614990 41.47337723]
[-138.30020142 34.79823303]
[-151.53630066 27.73872185]
[-164.56347656 20.30070305]
[-177.37089539 12.49035645]
[-189.94790649 4.31417084]
[-202.28407288 -4.22106314]
[-214.36915588 -13.10825539]
[-226.19309998 -22.34002495]
[-237.74609375 -31.90870094]
[-249.01853943 -41.80633926]
[-260.00106812 -52.02471161]
[-270.68457031 -62.55533981]
[-281.06018066 -73.38946533]
[-291.11923218 -84.51809692]
[-300.85342407 -95.93199158]
[-310.25463867 -107.62166595]
[-319.31509399 -119.57740021]
[-328.02722168 -131.78927612]
[-336.38381958 -144.24716187]
[-344.37792969 -156.94067383]
[-352.00292969 -169.85929871]
[-359.25247192 -182.99229431]
[-366.12051392 -196.32873535]
[-372.60140991 -209.85757446]
[-378.68972778 -223.56756592]
[-384.38040161 -237.44731140]
[-389.66876221 -251.48529053]
[-394.55035400 -265.66983032]
[-399.02114868 -279.98916626]
[-403.07745361 -294.43139648]
[-406.71585083 -308.98449707]
[-409.93334961 -323.63641357]
[-412.72729492 -338.37500000]
[-415.09533691 -353.18795776]
[-417.03549194 -368.06298828]
[-418.54620361 -382.98776245]
[-419.62619019 -397.94989014]
[-420.27453613 -412.93692017]
[-420.49069214 -427.93640137]
[-420.27453613 -442.93588257]
[-419.62622070 -457.92291260]
[-418.54626465 -472.88504028]
[-417.03555298 -487.80981445]
[-415.09539795 -502.68487549]
[-412.72738647 -517.49780273]
[-409.93347168 -532.23638916]
[-406.71597290 -546.88830566]
[-403.07757568 -561.44146729]
[-399.02130127 -575.88366699]
[-394.55050659 -590.20300293]
[-389.66891479 -604.38757324]
[-384.38058472 -618.42553711]
[-378.68991089 -632.30529785]
[-372.60162354 -646.01525879]
[-366.12075806 -659.54412842]
[-359.25271606 -672.88055420]
[-352.00317383 -686.01361084]
[-344.37820435 -698.93218994]
[-336.38409424 -711.62573242]
[-328.02752686 -724.08361816]
[-319.31539917 -736.29553223]
[-310.25497437 -748.25128174]
[-300.85375977 -759.94091797]
[-291.11959839 -771.35485840]
[-281.06051636 -782.48345947]
[-270.68493652 -793.31762695]
[-260.00146484 -803.84826660]
[-249.01892090 -814.06665039]
[-237.74649048 -823.96429443]
[-226.19349670 -833.53295898]
[-214.36956787 -842.76477051]
[-202.28450012 -851.65197754]
[-189.94833374 -860.18719482]
[-177.37133789 -868.36340332]
[-164.56393433 -876.17376709]
[-151.53675842 -883.61181641]
[-138.30065918 -890.67132568]
[-124.86661530 -897.34649658]
[-111.24578857 -903.63171387]
[-97.44948578 -909.52185059]
[-83.48917389 -915.01190186]
[-69.37644958 -920.09741211]
[-55.12302780 -924.77410889]
[-40.74075317 -929.03808594]
[-26.24157715 -932.88580322]
[-11.63753605 -936.31408691]
[3.05923557 -939.32012939]
[17.83653069 -941.90136719]
[32.68207550 -944.05572510]
[47.58353806 -945.78131104]
[62.52853775 -947.07678223]
[77.50466919 -947.94104004]
[92.49948120 -948.37329102]
[107.50051880 -948.37329102]
[122.49533081 -947.94104004]
[137.47146606 -947.07678223]
[152.41645813 -945.78131104]
[167.31793213 -944.05572510]
[182.16346741 -941.90136719]
[196.94076538 -939.32012939]
[211.63754272 -936.31408691]
[226.24157715 -932.88580322]
[240.74075317 -929.03808594]
[255.12303162 -924.77410889]
[269.37643433 -920.09741211]
[283.48916626 -915.01190186]
[297.44949341 -909.52185059]
[311.24578857 -903.63171387]
[324.86660767 -897.34649658]
[338.30065918 -890.67132568]
[351.53677368 -883.61181641]
[364.56393433 -876.17376709]
[377.37133789 -868.36340332]
[389.94833374 -860.18719482]
[402.28448486 -851.65197754]
[414.36956787 -842.76477051]
[426.19351196 -833.53295898]
[437.74649048 -823.96429443]
[449.01892090 -814.06665039]
[460.00146484 -803.84826660]
[470.68493652 -793.31762695]
[481.06051636 -782.48345947]
[491.11959839 -771.35485840]
[500.85375977 -759.94091797]
[510.25497437 -748.25128174]
[519.31536865 -736.29553223]
[528.02752686 -724.08361816]
[536.38409424 -711.62573242]
[544.37817383 -698.93218994]
[552.00317383 -686.01361084]
[559.25268555 -672.88055420]
[566.12072754 -659.54412842]
[572.60162354 -646.01525879]
[578.68994141 -632.30529785]
[584.38061523 -618.42553711]
[589.66894531 -604.38757324]
[594.55053711 -590.20300293]
[599.02130127 -575.88366699]
[603.07757568 -561.44146729]
[606.71594238 -546.88830566]
[609.93347168 -532.23638916]
[612.72735596 -517.49780273]
[615.09539795 -502.68487549]
[617.03558350 -487.80981445]
[618.54626465 -472.88504028]
[619.62622070 -457.92291260]
[620.27453613 -442.93588257]
[620.49072266 -427.93640137]
[620.27453613 -412.93692017]
[619.62615967 -397.94989014]
[618.54620361 -382.98776245]
[617.03552246 -368.06298828]
[615.09533691 -353.18795776]
[612.72729492 -338.37500000]
[609.93334961 -323.63641357]
[606.71588135 -308.98449707]
[603.07745361 -294.43139648]
[599.02117920 -279.98916626]
[594.55035400 -265.66983032]
[589.66876221 -251.48529053]
[584.38043213 -237.44731140]
[578.68969727 -223.56756592]
[572.60137939 -209.85757446]
[566.12054443 -196.32873535]
[559.25244141 -182.99229431]
[552.00292969 -169.85929871]
[544.37792969 -156.94067383]
[536.38378906 -144.24716187]
[528.02722168 -131.78927612]
[519.31506348 -119.57740021]
[510.25463867 -107.62166595]
[500.85342407 -95.93199158]
[491.11923218 -84.51809692]
[481.06018066 -73.38946533]
[470.68457031 -62.55533981]
[460.00106812 -52.02471161]
[449.01855469 -41.80633926]
[437.74609375 -31.90870094]
[426.19308472 -22.34002495]
[414.36914062 -13.10825539]
[402.28405762 -4.22106314]
[389.94790649 4.31417084]
[377.37088013 12.49035645]
[364.56347656 20.30070305]
[351.53631592 27.73872185]
[338.30020142 34.79823303]
[324.86614990 41.47337723]
[311.24530029 47.75860596]
[297.44900513 53.64870071]
[283.48867798 59.13876343]
[269.37594604 64.22424316]
[255.12252808 68.90090942]
[240.74024963 73.16487122]
[226.24107361 77.01260376]
[211.63702393 80.44089508]
[196.94024658 83.44690704]
[182.16294861 86.02813721]
[167.31741333 88.18244934]
[152.41593933 89.90804291]
[137.47094727 91.20349121]
[122.49481201 92.06771851]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
