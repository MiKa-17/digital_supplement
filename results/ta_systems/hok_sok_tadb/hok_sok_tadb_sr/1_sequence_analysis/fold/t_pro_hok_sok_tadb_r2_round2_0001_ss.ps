%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Jan 27 17:47:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________A___AUGCCGCAAA___AAGCGAUG_________UUAUUGGGCCUGAUCGUCAUCUGUUUCACGGUAAUGGUAUUCACAUUGAUGACGCGG_AAAUCGCUCUGCGAGGUGCGAAUCAGAAACGGCAAUACGGAGGUUGCGGCCUUCUUG___GCUUACGAAUCCG___AA__A__G\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50654602 92.01425171]
[62.53668976 91.04323578]
[47.60612488 89.58798218]
[32.73051453 87.65000916]
[17.92545891 85.23135376]
[3.20649028 82.33454895]
[-11.41095638 78.96263885]
[-25.91154861 75.11915588]
[-40.28007507 70.80812836]
[-54.50146866 66.03408051]
[-68.56081390 60.80202103]
[-82.44335938 55.11743927]
[-96.13454437 48.98629379]
[-109.62001038 42.41501999]
[-122.88562012 35.41050339]
[-135.91744995 27.98009682]
[-148.70182800 20.13159180]
[-161.22535706 11.87321854]
[-173.47489929 3.21364069]
[-185.43760681 -5.83805895]
[-197.10092163 -15.27238655]
[-208.45262146 -25.07944679]
[-219.48080444 -35.24895477]
[-230.17388916 -45.77024078]
[-240.52066040 -56.63227463]
[-250.51028442 -67.82365417]
[-260.13226318 -79.33265686]
[-269.37649536 -91.14719391]
[-278.23333740 -103.25488281]
[-286.69345093 -115.64302826]
[-294.74795532 -128.29862976]
[-302.38845825 -141.20840454]
[-309.60690308 -154.35884094]
[-316.39569092 -167.73611450]
[-322.74777222 -181.32621765]
[-328.65643311 -195.11486816]
[-334.11550903 -209.08763123]
[-339.11926270 -223.22984314]
[-343.66241455 -237.52667236]
[-347.74023438 -251.96311951]
[-351.34844971 -266.52404785]
[-354.48324585 -281.19415283]
[-357.14135742 -295.95809937]
[-359.31997681 -310.80038452]
[-361.01684570 -325.70541382]
[-362.23016357 -340.65759277]
[-362.95867920 -355.64120483]
[-363.20159912 -370.64056396]
[-362.95870972 -385.63989258]
[-362.23022461 -400.62353516]
[-361.01690674 -415.57568359]
[-359.32006836 -430.48074341]
[-357.14144897 -445.32302856]
[-354.48336792 -460.08697510]
[-351.34857178 -474.75708008]
[-347.74038696 -489.31802368]
[-343.66259766 -503.75445557]
[-339.11944580 -518.05126953]
[-334.11575317 -532.19354248]
[-328.65670776 -546.16625977]
[-322.74804688 -559.95495605]
[-316.39599609 -573.54504395]
[-309.60720825 -586.92236328]
[-302.38879395 -600.07281494]
[-294.74832153 -612.98260498]
[-286.69381714 -625.63818359]
[-278.23370361 -638.02636719]
[-269.37692261 -650.13403320]
[-260.13265991 -661.94860840]
[-250.51071167 -673.45764160]
[-240.52110291 -684.64898682]
[-230.17434692 -695.51104736]
[-219.48127747 -706.03234863]
[-208.45310974 -716.20190430]
[-197.10142517 -726.00897217]
[-185.43812561 -735.44329834]
[-173.47543335 -744.49499512]
[-161.22590637 -753.15460205]
[-148.70239258 -761.41302490]
[-135.91801453 -769.26153564]
[-122.88619232 -776.69195557]
[-109.62059784 -783.69647217]
[-96.13513947 -790.26776123]
[-82.44396210 -796.39892578]
[-68.56142426 -802.08355713]
[-54.50209045 -807.31561279]
[-40.28070450 -812.08972168]
[-25.91218185 -816.40075684]
[-11.41159534 -820.24426270]
[3.20584583 -823.61621094]
[17.92481041 -826.51300049]
[32.72986221 -828.93170166]
[47.60546875 -830.86968994]
[62.53603363 -832.32495117]
[77.50588989 -833.29595947]
[92.49934387 -833.78173828]
[107.50065613 -833.78173828]
[122.49411011 -833.29595947]
[137.46397400 -832.32495117]
[152.39453125 -830.86968994]
[167.27014160 -828.93170166]
[182.07519531 -826.51300049]
[196.79415894 -823.61621094]
[211.41159058 -820.24426270]
[225.91218567 -816.40075684]
[240.28070068 -812.08972168]
[254.50209045 -807.31561279]
[268.56143188 -802.08355713]
[282.44396973 -796.39892578]
[296.13513184 -790.26776123]
[309.62060547 -783.69647217]
[322.88619995 -776.69195557]
[335.91799927 -769.26153564]
[348.70239258 -761.41302490]
[361.22589111 -753.15460205]
[373.47543335 -744.49499512]
[385.43811035 -735.44329834]
[397.10144043 -726.00897217]
[408.45312500 -716.20190430]
[419.48129272 -706.03234863]
[430.17434692 -695.51104736]
[440.52111816 -684.64898682]
[450.51071167 -673.45764160]
[460.13265991 -661.94860840]
[469.37692261 -650.13403320]
[478.23370361 -638.02636719]
[486.69381714 -625.63818359]
[494.74832153 -612.98260498]
[502.38879395 -600.07281494]
[509.60720825 -586.92236328]
[516.39599609 -573.54504395]
[522.74804688 -559.95495605]
[528.65667725 -546.16625977]
[534.11572266 -532.19354248]
[539.11944580 -518.05126953]
[543.66259766 -503.75445557]
[547.74041748 -489.31802368]
[551.34857178 -474.75708008]
[554.48333740 -460.08697510]
[557.14147949 -445.32302856]
[559.32006836 -430.48074341]
[561.01690674 -415.57568359]
[562.23022461 -400.62353516]
[562.95867920 -385.63989258]
[563.20159912 -370.64056396]
[562.95867920 -355.64120483]
[562.23016357 -340.65759277]
[561.01684570 -325.70541382]
[559.32000732 -310.80038452]
[557.14135742 -295.95809937]
[554.48321533 -281.19415283]
[551.34844971 -266.52404785]
[547.74023438 -251.96311951]
[543.66241455 -237.52667236]
[539.11926270 -223.22984314]
[534.11553955 -209.08763123]
[528.65643311 -195.11486816]
[522.74780273 -181.32621765]
[516.39569092 -167.73611450]
[509.60690308 -154.35884094]
[502.38845825 -141.20840454]
[494.74795532 -128.29862976]
[486.69345093 -115.64302826]
[478.23333740 -103.25488281]
[469.37649536 -91.14719391]
[460.13226318 -79.33265686]
[450.51028442 -67.82365417]
[440.52066040 -56.63227463]
[430.17388916 -45.77024078]
[419.48080444 -35.24895477]
[408.45263672 -25.07944679]
[397.10092163 -15.27238655]
[385.43759155 -5.83805895]
[373.47491455 3.21364069]
[361.22537231 11.87321854]
[348.70184326 20.13159180]
[335.91744995 27.98009682]
[322.88562012 35.41050339]
[309.62002563 42.41501999]
[296.13455200 48.98629379]
[282.44335938 55.11743927]
[268.56082153 60.80202103]
[254.50146484 66.03408051]
[240.28007507 70.80812836]
[225.91154480 75.11915588]
[211.41094971 78.96263885]
[196.79350281 82.33454895]
[182.07453918 85.23135376]
[167.26948547 87.65000916]
[152.39387512 89.58798218]
[137.46330261 91.04323578]
[122.49345398 92.01425171]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
