%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 05:54:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________A_____AUG__CC___GCAAAAAACUAUG__________UUAUUGGGCCUGAUCGUUAUCUGUUUCACGGUAUUGAUAUUCACAUUGAUGACGCGGAA_AUCGCUGUGCGAGCUGCGUAUCAGAGACGGCAAUACGGAGGUU_GCGGCCUUUUUGGC___UUACGAAUCCG___A__A______\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50586700 92.04030609]
[62.53285980 91.12133789]
[47.59504700 89.74395752]
[32.70646286 87.90944672]
[17.88108826 85.61954498]
[3.13284922 82.87639618]
[-11.52439880 79.68257904]
[-26.07688904 76.04109192]
[-40.51095200 71.95535278]
[-54.81302643 67.42920685]
[-68.96968079 62.46689606]
[-82.96762085 57.07308578]
[-96.79368591 51.25284576]
[-110.43490601 45.01164246]
[-123.87844849 38.35533524]
[-137.11170959 31.29017639]
[-150.12222290 23.82280731]
[-162.89781189 15.96023750]
[-175.42643738 7.70985413]
[-187.69635010 -0.92059284]
[-199.69601440 -9.92299652]
[-211.41418457 -19.28890038]
[-222.83981323 -29.00950813]
[-233.96220398 -39.07568741]
[-244.77088928 -49.47798157]
[-255.25572205 -60.20662308]
[-265.40682983 -71.25153351]
[-275.21472168 -82.60233307]
[-284.67016602 -94.24836731]
[-293.76428223 -106.17868805]
[-302.48849487 -118.38209534]
[-310.83468628 -130.84712219]
[-318.79492188 -143.56207275]
[-326.36178589 -156.51498413]
[-333.52816772 -169.69369507]
[-340.28729248 -183.08583069]
[-346.63287354 -196.67881775]
[-352.55889893 -210.45986938]
[-358.05984497 -224.41606140]
[-363.13049316 -238.53427124]
[-367.76614380 -252.80123901]
[-371.96237183 -267.20355225]
[-375.71530151 -281.72772217]
[-379.02136230 -296.36004639]
[-381.87744141 -311.08682251]
[-384.28091431 -325.89422607]
[-386.22946167 -340.76831055]
[-387.72131348 -355.69512939]
[-388.75500488 -370.66064453]
[-389.32958984 -385.65081787]
[-389.44454956 -400.65155029]
[-389.09976196 -415.64877319]
[-388.29553223 -430.62838745]
[-387.03262329 -445.57632446]
[-385.31225586 -460.47851562]
[-383.13601685 -475.32101440]
[-380.50595093 -490.08981323]
[-377.42449951 -504.77111816]
[-373.89462280 -519.35107422]
[-369.91958618 -533.81604004]
[-365.50317383 -548.15234375]
[-360.64947510 -562.34661865]
[-355.36306763 -576.38543701]
[-349.64892578 -590.25573730]
[-343.51242065 -603.94433594]
[-336.95932007 -617.43847656]
[-329.99575806 -630.72552490]
[-322.62829590 -643.79284668]
[-314.86383057 -656.62829590]
[-306.70968628 -669.21978760]
[-298.17349243 -681.55548096]
[-289.26327515 -693.62371826]
[-279.98745728 -705.41333008]
[-270.35467529 -716.91308594]
[-260.37399292 -728.11230469]
[-250.05482483 -739.00036621]
[-239.40682983 -749.56707764]
[-228.44001770 -759.80249023]
[-217.16468811 -769.69708252]
[-205.59144592 -779.24145508]
[-193.73115540 -788.42669678]
[-181.59494019 -797.24420166]
[-169.19422913 -805.68560791]
[-156.54064941 -813.74304199]
[-143.64608765 -821.40893555]
[-130.52265930 -828.67608643]
[-117.18270874 -835.53765869]
[-103.63874054 -841.98718262]
[-89.90349579 -848.01861572]
[-75.98986816 -853.62628174]
[-61.91092300 -858.80499268]
[-47.67989349 -863.54980469]
[-33.31014252 -867.85626221]
[-18.81516838 -871.72033691]
[-4.20858765 -875.13842773]
[10.49587822 -878.10729980]
[25.28441811 -880.62408447]
[40.14314270 -882.68658447]
[55.05809021 -884.29272461]
[70.01525116 -885.44104004]
[85.00057983 -886.13049316]
[100.00000000 -886.36035156]
[114.99942017 -886.13049316]
[129.98474121 -885.44104004]
[144.94190979 -884.29272461]
[159.85685730 -882.68658447]
[174.71557617 -880.62408447]
[189.50411987 -878.10729980]
[204.20858765 -875.13842773]
[218.81517029 -871.72033691]
[233.31013489 -867.85626221]
[247.67988586 -863.54980469]
[261.91091919 -858.80499268]
[275.98986816 -853.62628174]
[289.90350342 -848.01861572]
[303.63873291 -841.98718262]
[317.18270874 -835.53765869]
[330.52267456 -828.67608643]
[343.64608765 -821.40893555]
[356.54064941 -813.74304199]
[369.19421387 -805.68560791]
[381.59494019 -797.24420166]
[393.73114014 -788.42669678]
[405.59143066 -779.24145508]
[417.16470337 -769.69708252]
[428.44000244 -759.80249023]
[439.40682983 -749.56707764]
[450.05480957 -739.00036621]
[460.37399292 -728.11230469]
[470.35467529 -716.91308594]
[479.98745728 -705.41333008]
[489.26327515 -693.62371826]
[498.17349243 -681.55548096]
[506.70968628 -669.21978760]
[514.86383057 -656.62829590]
[522.62829590 -643.79284668]
[529.99572754 -630.72552490]
[536.95928955 -617.43847656]
[543.51239014 -603.94433594]
[549.64892578 -590.25573730]
[555.36303711 -576.38543701]
[560.64947510 -562.34661865]
[565.50317383 -548.15234375]
[569.91961670 -533.81604004]
[573.89465332 -519.35107422]
[577.42449951 -504.77111816]
[580.50592041 -490.08981323]
[583.13598633 -475.32101440]
[585.31225586 -460.47851562]
[587.03265381 -445.57632446]
[588.29553223 -430.62838745]
[589.09973145 -415.64877319]
[589.44451904 -400.65155029]
[589.32958984 -385.65081787]
[588.75500488 -370.66064453]
[587.72131348 -355.69512939]
[586.22949219 -340.76831055]
[584.28088379 -325.89422607]
[581.87744141 -311.08682251]
[579.02136230 -296.36004639]
[575.71527100 -281.72772217]
[571.96240234 -267.20355225]
[567.76611328 -252.80123901]
[563.13049316 -238.53427124]
[558.05981445 -224.41606140]
[552.55889893 -210.45986938]
[546.63287354 -196.67881775]
[540.28729248 -183.08583069]
[533.52813721 -169.69369507]
[526.36181641 -156.51498413]
[518.79492188 -143.56207275]
[510.83468628 -130.84712219]
[502.48849487 -118.38209534]
[493.76428223 -106.17868805]
[484.67016602 -94.24836731]
[475.21472168 -82.60233307]
[465.40682983 -71.25153351]
[455.25570679 -60.20662308]
[444.77087402 -49.47798157]
[433.96218872 -39.07568741]
[422.83981323 -29.00950813]
[411.41418457 -19.28890038]
[399.69601440 -9.92299652]
[387.69635010 -0.92059284]
[375.42642212 7.70985413]
[362.89779663 15.96023750]
[350.12222290 23.82280731]
[337.11169434 31.29017639]
[323.87844849 38.35533524]
[310.43490601 45.01164246]
[296.79370117 51.25284576]
[282.96762085 57.07308578]
[268.96969604 62.46689606]
[254.81301880 67.42920685]
[240.51095581 71.95535278]
[226.07688904 76.04109192]
[211.52439880 79.68257904]
[196.86715698 82.87639618]
[182.11891174 85.61954498]
[167.29353333 87.90944672]
[152.40495300 89.74395752]
[137.46714783 91.12133789]
[122.49413300 92.04030609]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
