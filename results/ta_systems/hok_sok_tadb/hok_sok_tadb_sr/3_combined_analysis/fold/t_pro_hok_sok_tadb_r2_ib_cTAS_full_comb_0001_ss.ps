%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 00:10:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________G______AUG___CA___GCAAAAGGCU_AUGUUAAU_GGCCCU_________GAUCGUCAUCUGUUUCACGGUCUUAGUAUUCACACUGGUGACGAGG_AAAUCGCUCUGCGAGGUGCGAAUCCGAGACGGCCAUACGGAGGUGGCUGC___C_UUCAUAGC___UUAC__GAA_UCC__GAG_________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50537872 92.05963898]
[62.53015518 91.17927551]
[47.58722687 89.85967255]
[32.68947601 88.10196686]
[17.84974670 85.90767670]
[3.08083105 83.27868652]
[-11.60454178 80.21726227]
[-26.19371414 76.72605133]
[-40.67410660 72.80805969]
[-55.03324127 68.46665955]
[-69.25873566 63.70560074]
[-83.33834076 58.52898407]
[-97.25990295 52.94126892]
[-111.01142883 46.94727325]
[-124.58106995 40.55216599]
[-137.95712280 33.76145935]
[-151.12805176 26.58100510]
[-164.08251953 19.01699257]
[-176.80935669 11.07594299]
[-189.29757690 2.76470137]
[-201.53642273 -5.90956831]
[-213.51536560 -14.93938923]
[-225.22404480 -24.31697655]
[-236.65238953 -34.03424835]
[-247.79054260 -44.08282852]
[-258.62890625 -54.45405579]
[-269.15814209 -65.13898468]
[-279.36917114 -76.12841797]
[-289.25317383 -87.41286469]
[-298.80163574 -98.98261261]
[-308.00637817 -110.82768250]
[-316.85937500 -122.93786621]
[-325.35308838 -135.30271912]
[-333.48010254 -147.91160583]
[-341.23348999 -160.75361633]
[-348.60653687 -173.81771851]
[-355.59289551 -187.09262085]
[-362.18655396 -200.56690979]
[-368.38177490 -214.22895813]
[-374.17327881 -228.06698608]
[-379.55606079 -242.06906128]
[-384.52545166 -256.22314453]
[-389.07717896 -270.51696777]
[-393.20736694 -284.93829346]
[-396.91238403 -299.47463989]
[-400.18908691 -314.11349487]
[-403.03460693 -328.84219360]
[-405.44653320 -343.64813232]
[-407.42276001 -358.51846313]
[-408.96160889 -373.44039917]
[-410.06173706 -388.40109253]
[-410.72219849 -403.38763428]
[-410.94241333 -418.38708496]
[-410.72219849 -433.38656616]
[-410.06176758 -448.37310791]
[-408.96166992 -463.33380127]
[-407.42282104 -478.25573730]
[-405.44662476 -493.12606812]
[-403.03469849 -507.93200684]
[-400.18917847 -522.66070557]
[-396.91250610 -537.29956055]
[-393.20748901 -551.83593750]
[-389.07736206 -566.25726318]
[-384.52563477 -580.55108643]
[-379.55624390 -594.70513916]
[-374.17349243 -608.70727539]
[-368.38198853 -622.54528809]
[-362.18676758 -636.20733643]
[-355.59313965 -649.68164062]
[-348.60681152 -662.95654297]
[-341.23376465 -676.02062988]
[-333.48040771 -688.86267090]
[-325.35336304 -701.47155762]
[-316.85971069 -713.83642578]
[-308.00668335 -725.94659424]
[-298.80200195 -737.79168701]
[-289.25350952 -749.36145020]
[-279.36953735 -760.64593506]
[-269.15850830 -771.63537598]
[-258.62930298 -782.32031250]
[-247.79093933 -792.69152832]
[-236.65280151 -802.74011230]
[-225.22445679 -812.45739746]
[-213.51579285 -821.83502197]
[-201.53686523 -830.86486816]
[-189.29801941 -839.53912354]
[-176.80979919 -847.85040283]
[-164.08297729 -855.79144287]
[-151.12852478 -863.35546875]
[-137.95759583 -870.53594971]
[-124.58155060 -877.32666016]
[-111.01192474 -883.72180176]
[-97.26039886 -889.71582031]
[-83.33884430 -895.30352783]
[-69.25924683 -900.48016357]
[-55.03375626 -905.24121094]
[-40.67462921 -909.58264160]
[-26.19423866 -913.50067139]
[-11.60507011 -916.99188232]
[3.08029962 -920.05334473]
[17.84921265 -922.68231201]
[32.68893814 -924.87664795]
[47.58668900 -926.63433838]
[62.52961349 -927.95397949]
[77.50484467 -928.83435059]
[92.49945831 -929.27471924]
[107.50054169 -929.27471924]
[122.49515533 -928.83435059]
[137.47038269 -927.95397949]
[152.41331482 -926.63433838]
[167.31106567 -924.87664795]
[182.15078735 -922.68231201]
[196.91969299 -920.05334473]
[211.60507202 -916.99188232]
[226.19424438 -913.50067139]
[240.67462158 -909.58264160]
[255.03375244 -905.24121094]
[269.25924683 -900.48016357]
[283.33883667 -895.30352783]
[297.26040649 -889.71582031]
[311.01193237 -883.72180176]
[324.58154297 -877.32666016]
[337.95761108 -870.53594971]
[351.12854004 -863.35546875]
[364.08297729 -855.79144287]
[376.80981445 -847.85040283]
[389.29803467 -839.53912354]
[401.53686523 -830.86486816]
[413.51577759 -821.83502197]
[425.22445679 -812.45739746]
[436.65280151 -802.74011230]
[447.79095459 -792.69152832]
[458.62930298 -782.32031250]
[469.15850830 -771.63537598]
[479.36953735 -760.64593506]
[489.25350952 -749.36145020]
[498.80200195 -737.79168701]
[508.00668335 -725.94659424]
[516.85968018 -713.83642578]
[525.35339355 -701.47155762]
[533.48040771 -688.86267090]
[541.23376465 -676.02062988]
[548.60681152 -662.95654297]
[555.59313965 -649.68164062]
[562.18676758 -636.20733643]
[568.38201904 -622.54528809]
[574.17346191 -608.70727539]
[579.55621338 -594.70513916]
[584.52563477 -580.55108643]
[589.07733154 -566.25726318]
[593.20751953 -551.83593750]
[596.91253662 -537.29956055]
[600.18920898 -522.66070557]
[603.03472900 -507.93200684]
[605.44659424 -493.12606812]
[607.42285156 -478.25573730]
[608.96166992 -463.33380127]
[610.06176758 -448.37310791]
[610.72222900 -433.38656616]
[610.94244385 -418.38708496]
[610.72216797 -403.38763428]
[610.06170654 -388.40109253]
[608.96160889 -373.44039917]
[607.42279053 -358.51846313]
[605.44653320 -343.64813232]
[603.03460693 -328.84219360]
[600.18908691 -314.11349487]
[596.91235352 -299.47463989]
[593.20733643 -284.93829346]
[589.07720947 -270.51696777]
[584.52545166 -256.22314453]
[579.55603027 -242.06906128]
[574.17327881 -228.06698608]
[568.38177490 -214.22895813]
[562.18652344 -200.56690979]
[555.59289551 -187.09262085]
[548.60656738 -173.81771851]
[541.23352051 -160.75361633]
[533.48010254 -147.91160583]
[525.35308838 -135.30271912]
[516.85937500 -122.93786621]
[508.00637817 -110.82768250]
[498.80163574 -98.98261261]
[489.25317383 -87.41286469]
[479.36917114 -76.12841797]
[469.15814209 -65.13898468]
[458.62890625 -54.45405579]
[447.79055786 -44.08282852]
[436.65240479 -34.03424835]
[425.22406006 -24.31697655]
[413.51535034 -14.93938923]
[401.53643799 -5.90956831]
[389.29757690 2.76470137]
[376.80935669 11.07594299]
[364.08251953 19.01699257]
[351.12805176 26.58100510]
[337.95712280 33.76145935]
[324.58105469 40.55216599]
[311.01141357 46.94727325]
[297.25988770 52.94126892]
[283.33834839 58.52898407]
[269.25872803 63.70560074]
[255.03324890 68.46665955]
[240.67410278 72.80805969]
[226.19371033 76.72605133]
[211.60453796 80.21726227]
[196.91917419 83.27868652]
[182.15025330 85.90767670]
[167.31051636 88.10196686]
[152.41278076 89.85967255]
[137.46984863 91.17927551]
[122.49462128 92.05963898]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
