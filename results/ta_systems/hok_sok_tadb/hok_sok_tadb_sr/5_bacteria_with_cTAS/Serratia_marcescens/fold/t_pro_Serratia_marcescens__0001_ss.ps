%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:03:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_UGAUGCCGAACAAACGGAGCCUGUUAAAAU___UGGUGGUUAUUUGUGCCACGGUAAUAUCACUGGCAUGGAUAACCCGCAGCACGCUGUGUGAGCUGCGGAUCCGAUCGGGCACUACGGAGGUUGCGGCCAUUUUGGCUUACGAAUCCGAACGG\
) } def
/len { sequence length } bind def

/coor [
[181.81098938 273.22479248]
[171.78280640 277.61502075]
[161.52021790 281.42526245]
[151.05676270 284.64309692]
[140.42657471 287.25799561]
[129.66438293 289.26144409]
[118.80532837 290.64688110]
[107.88486481 291.40975952]
[96.93865967 291.54763794]
[86.00244141 291.06002808]
[75.11193848 289.94854736]
[64.30270386 288.21682739]
[53.61003113 285.87048340]
[43.06883621 282.91723633]
[32.71354675 279.36666870]
[22.57797050 275.23040771]
[12.69520664 270.52197266]
[3.09752369 265.25671387]
[-6.18373680 259.45181274]
[-15.11826897 253.12626648]
[-23.67689705 246.30068970]
[-31.83167458 238.99740601]
[-39.55597687 231.24023438]
[-46.82457352 223.05451965]
[-53.61373520 214.46697998]
[-59.90129089 205.50566101]
[-65.66670990 196.19984436]
[-70.89117432 186.57987976]
[-75.55760956 176.67721558]
[-79.65078735 166.52416992]
[-83.15733337 156.15388489]
[-86.06581116 145.60025024]
[-88.36671448 134.89770508]
[-90.05252838 124.08121490]
[-91.11775208 113.18608856]
[-91.55890656 102.24790955]
[-91.37455750 91.30238342]
[-90.56529236 80.38525391]
[-89.13376617 69.53218079]
[-87.08464813 58.77859497]
[-84.42462921 48.15961456]
[-81.16239166 37.70990753]
[-77.30860138 27.46360207]
[-72.87583160 17.45415497]
[-67.87855530 7.71424961]
[-62.33309555 -1.72430897]
[-56.25756073 -10.83069992]
[-49.67178345 -19.57518959]
[-42.59727859 -27.92922020]
[-53.36185837 -38.37545395]
[-64.12644196 -48.82168579]
[-74.89102173 -59.26792145]
[-89.20252228 -53.96286392]
[-104.39771271 -55.40124893]
[-117.45957184 -63.29748154]
[-125.79466248 -76.08376312]
[-127.74804688 -91.22136688]
[-122.93187714 -105.70471191]
[-112.30239868 -116.65811920]
[-97.97011566 -121.90677643]
[-82.78070831 -120.40856171]
[-69.75004578 -112.46095276]
[-61.46537018 -99.64194489]
[-59.57161713 -84.49676514]
[-64.44478607 -70.03250122]
[-53.68020630 -59.58626938]
[-42.91562653 -49.14003372]
[-32.15104294 -38.69380188]
[-16.50980377 -52.07016373]
[0.47614580 -63.69139099]
[18.61076164 -73.42335510]
[37.68473816 -81.15373993]
[57.47793198 -86.79331207]
[77.76190186 -90.27700043]
[98.30253601 -91.56457520]
[118.86275482 -90.64119720]
[139.20527649 -87.51750946]
[159.09530640 -82.22956848]
[178.30326843 -74.83840179]
[184.96562195 -88.27763367]
[191.62799072 -101.71686554]
[198.29034424 -115.15610504]
[204.95269775 -128.59533691]
[211.61505127 -142.03456116]
[210.81227112 -157.83538818]
[223.39741516 -165.80180359]
[230.05976868 -179.24104309]
[236.72212219 -192.68026733]
[238.33998108 -209.55685425]
[255.00488281 -212.67411804]
[262.61364746 -197.52343750]
[250.16136169 -186.01791382]
[243.49900818 -172.57867432]
[236.83663940 -159.13945007]
[238.11596680 -144.29988098]
[225.05429077 -135.37220764]
[218.39193726 -121.93297577]
[211.72956848 -108.49374390]
[205.06721497 -95.05451202]
[198.40486145 -81.61528015]
[191.74250793 -68.17604065]
[207.39254761 -58.64019012]
[222.05979919 -47.65254974]
[235.61001587 -35.31367874]
[247.91921997 -21.73649025]
[258.87475586 -7.04524088]
[268.37634277 8.62562656]
[276.33706665 25.13269997]
[282.68402100 42.32491684]
[287.35919189 60.04494095]
[290.31973267 78.13061523]
[291.53857422 96.41641998]
[291.00457764 114.73502350]
[288.72259521 132.91877747]
[284.71356201 150.80128479]
[279.01409912 168.21888733]
[271.67642212 185.01217651]
[262.76766968 201.02749634]
[252.36933899 216.11827087]
[263.93469238 225.67036438]
[275.50003052 235.22247314]
[287.06539917 244.77458191]
[299.99267578 244.33590698]
[309.43572998 252.57658386]
[310.66827393 264.64538574]
[322.04019165 274.42700195]
[333.41210938 284.20858765]
[351.55886841 287.17901611]
[356.76187134 303.91400146]
[368.32723999 313.46609497]
[379.89257812 323.01818848]
[391.45791626 332.57031250]
[403.02325439 342.12240601]
[419.08596802 347.54702759]
[418.31994629 364.48364258]
[401.83316040 368.43609619]
[393.47116089 353.68774414]
[381.90582275 344.13565063]
[370.34045410 334.58355713]
[358.77511597 325.03143311]
[347.20977783 315.47933960]
[335.10647583 316.30740356]
[325.38632202 308.39550781]
[323.63049316 295.58050537]
[312.25860596 285.79888916]
[300.88668823 276.01730347]
[283.51251221 273.72204590]
[277.51327515 256.33993530]
[265.94793701 246.78782654]
[254.38258362 237.23571777]
[242.81724548 227.68360901]
[235.29077148 235.63287354]
[227.32252502 243.13925171]
[218.93852234 250.17820740]
[210.16615295 256.72680664]
[201.03404236 262.76361084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[49 68]
[50 67]
[51 66]
[52 65]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[86 94]
[87 93]
[88 92]
[119 151]
[120 150]
[121 149]
[122 148]
[125 146]
[126 145]
[127 144]
[129 141]
[130 140]
[131 139]
[132 138]
[133 137]
] def

init

% Start Annotations
49 68 0.32 0.6 colorpair
50 67 0.32 1 colorpair
51 66 0.16 0.6 colorpair
52 65 0.0 0.6 colorpair
79 101 0.0 1 colorpair
80 100 0.0 0.2 colorpair
81 99 0.32 1 colorpair
82 98 0.16 1 colorpair
83 97 0.16 0.6 colorpair
86 94 0.0 1 colorpair
87 93 0.32 0.6 colorpair
88 92 0.0 0.2 colorpair
119 151 0.0 0.6 colorpair
120 150 0.0 1 colorpair
121 149 0.0 1 colorpair
122 148 0.0 1 colorpair
125 146 0.0 1 colorpair
126 145 0.0 0.6 colorpair
127 144 0.0 1 colorpair
129 141 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair
132 138 0.16 1 colorpair
133 137 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
49 68 1 gmark
49 cmark
68 cmark
50 cmark
67 cmark
51 66 1 gmark
51 cmark
66 cmark
52 65 1 gmark
80 100 2 gmark
81 cmark
99 cmark
82 cmark
83 97 1 gmark
97 cmark
84 96 9 gmark
84 cmark
96 cmark
87 93 1 gmark
87 cmark
93 cmark
88 92 2 gmark
119 151 1 gmark
126 145 1 gmark
132 cmark
133 137 1 gmark

% End Annotations
showpage
end
%%EOF
