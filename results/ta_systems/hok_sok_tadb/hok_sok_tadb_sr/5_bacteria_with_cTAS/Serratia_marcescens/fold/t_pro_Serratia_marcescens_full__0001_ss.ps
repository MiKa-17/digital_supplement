%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:03:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____UG_AUGCCGAACAAACGGAGCCUGUUAAAACUGGUGGUUAUUUGUGCCACGGUAAUAUCACUGGCAUGGAUAACCCGCAGCACGCUGUGUGAGCUGCGGAUCCGAUCGGGCAAUACGGAGGUUGCGGCCAUUUUGGCUUACGAAUCCGAAC__\
) } def
/len { sequence length } bind def

/coor [
[182.52903748 274.99911499]
[172.51687622 279.37957764]
[162.27336121 283.18777466]
[151.83116150 286.41156006]
[141.22361755 289.04058838]
[130.48454285 291.06655884]
[119.64823151 292.48294067]
[108.74922180 293.28524780]
[97.82230377 293.47091675]
[86.90233612 293.03933716]
[76.02414703 291.99191284]
[65.22245026 290.33197021]
[54.53171158 288.06478882]
[43.98602676 285.19766235]
[33.61904526 281.73965454]
[23.46384048 277.70184326]
[13.55280972 273.09713745]
[3.91757345 267.94018555]
[-5.41112900 262.24743652]
[-14.40353584 256.03704834]
[-23.03095818 249.32888794]
[-31.26587296 242.14430237]
[-39.08200836 234.50624084]
[-46.45442581 226.43905640]
[-53.35960770 217.96849060]
[-59.77552032 209.12156677]
[-65.68170166 199.92651367]
[-71.05930328 190.41265869]
[-75.89117432 180.61036682]
[-80.16188812 170.55088806]
[-83.85783386 160.26634216]
[-86.96720886 149.78952026]
[-89.48010254 139.15385437]
[-91.38849640 128.39326477]
[-92.68629456 117.54210663]
[-93.36936188 106.63497925]
[-93.43552399 95.70668793]
[-92.88455963 84.79208374]
[-91.71823120 73.92601013]
[-89.94026184 63.14311218]
[-87.55632782 52.47780228]
[-84.57402039 41.96409988]
[-81.00286102 31.63555527]
[-76.85424805 21.52511406]
[-72.14141846 11.66503143]
[-66.87939453 2.08676720]
[-61.08497620 -7.17912292]
[-54.77664566 -16.10307693]
[-47.97452545 -24.65662575]
[-40.70031738 -32.81247711]
[-51.20095062 -43.52400208]
[-61.70158005 -54.23552704]
[-72.20220947 -64.94705200]
[-86.64160156 -60.00066757]
[-101.79618073 -61.81767654]
[-114.65699768 -70.03730774]
[-122.67051697 -83.02754211]
[-124.24565125 -98.20916748]
[-119.06966400 -112.56785583]
[-108.17024994 -123.25267792]
[-93.71149445 -128.14216614]
[-78.56418610 -126.26548767]
[-65.73583984 -117.99527740]
[-57.77354050 -104.97358704]
[-56.25819778 -89.78587341]
[-61.49068832 -75.44767761]
[-50.99005890 -64.73616028]
[-40.48942566 -54.02463150]
[-29.98879433 -43.31311035]
[-13.96692371 -56.35624313]
[3.35434270 -67.61667633]
[21.77751541 -76.96603394]
[41.09254074 -84.29770660]
[61.07920074 -89.52811432]
[81.50961304 -92.59761047]
[102.15084839 -93.47120667]
[122.76756287 -92.13893890]
[143.12467957 -88.61599731]
[162.99012756 -82.94255066]
[182.13739014 -75.18328857]
[189.02684021 -88.50753021]
[195.91630554 -101.83176422]
[202.80575562 -115.15600586]
[209.69522095 -128.48023987]
[216.58468628 -141.80448914]
[216.05015564 -157.61665344]
[228.76866150 -165.36834717]
[235.65812683 -178.69259644]
[232.18135071 -194.35438538]
[242.37020874 -206.74658203]
[258.40869141 -206.36296082]
[267.99340820 -193.49780273]
[263.77182007 -178.02014160]
[248.98236084 -171.80313110]
[242.09289551 -158.47889709]
[243.12020874 -143.61975098]
[229.90892029 -134.91502380]
[223.01945496 -121.59078217]
[216.13000488 -108.26654816]
[209.24053955 -94.94230652]
[202.35107422 -81.61806488]
[195.46162415 -68.29383087]
[211.01239014 -58.46760941]
[225.55972290 -47.20900726]
[238.97210693 -34.61978149]
[251.12834167 -20.81373405]
[261.91851807 -5.91565132]
[271.24511719 9.93980122]
[279.02386475 26.60930634]
[285.18438721 43.94218826]
[289.67102051 61.78177643]
[292.44326782 79.96681213]
[293.47598267 98.33293915]
[292.75988770 116.71412659]
[290.30142212 134.94422913]
[286.12283325 152.85848999]
[280.26190186 170.29495239]
[272.77157593 187.09602356]
[263.71957397 203.10983276]
[253.18769836 218.19163513]
[264.69964600 227.80802917]
[276.21157837 237.42443848]
[287.72351074 247.04084778]
[300.65216064 246.67405701]
[310.04898071 254.96606445]
[311.21545410 267.04055786]
[322.53393555 276.88394165]
[333.85238647 286.72732544]
[351.98324585 289.79724121]
[357.09371948 306.56130981]
[368.60568237 316.17770386]
[380.11761475 325.79412842]
[391.62954712 335.41052246]
[403.14147949 345.02691650]
[419.17370605 350.54095459]
[418.31332397 367.47305298]
[401.80474854 371.33358765]
[393.52508545 356.53887939]
[382.01315308 346.92245483]
[370.50119019 337.30606079]
[358.98925781 327.68966675]
[347.47732544 318.07324219]
[335.37048340 318.83407593]
[325.69473267 310.86929321]
[324.00900269 298.04580688]
[312.69055176 288.20242310]
[301.37207031 278.35903931]
[284.01016235 275.96847534]
[278.10711670 258.55279541]
[266.59518433 248.93637085]
[255.08323669 239.31997681]
[243.57130432 229.70356750]
[236.01916504 237.60276794]
[228.03308105 245.06295776]
[219.63853455 252.06036377]
[210.86230469 258.57263184]
[201.73239136 264.57901001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[50 69]
[51 68]
[52 67]
[53 66]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[87 95]
[88 94]
[120 152]
[121 151]
[122 150]
[123 149]
[126 147]
[127 146]
[128 145]
[130 142]
[131 141]
[132 140]
[133 139]
[134 138]
] def

init

% Start Annotations
50 69 0.32 0.2 colorpair
51 68 0.32 1 colorpair
52 67 0.16 0.2 colorpair
53 66 0.0 0.2 colorpair
80 102 0.0 1 colorpair
81 101 0.0 0.2 colorpair
82 100 0.32 1 colorpair
83 99 0.16 1 colorpair
84 98 0.16 0.2 colorpair
87 95 0.0 1 colorpair
88 94 0.32 0.2 colorpair
120 152 0.0 0.2 colorpair
121 151 0.0 1 colorpair
122 150 0.0 1 colorpair
123 149 0.0 1 colorpair
126 147 0.0 1 colorpair
127 146 0.0 0.2 colorpair
128 145 0.0 1 colorpair
130 142 0.0 1 colorpair
131 141 0.0 1 colorpair
132 140 0.0 1 colorpair
133 139 0.16 1 colorpair
134 138 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
50 69 2 gmark
50 cmark
69 cmark
51 cmark
68 cmark
52 67 2 gmark
52 cmark
67 cmark
53 66 2 gmark
81 101 2 gmark
82 cmark
100 cmark
83 cmark
84 98 2 gmark
98 cmark
85 97 10 gmark
85 cmark
97 cmark
88 94 2 gmark
88 cmark
94 cmark
120 152 2 gmark
127 146 2 gmark
133 cmark
134 138 2 gmark

% End Annotations
showpage
end
%%EOF
