%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____GA_AGCAGCAAAAGGCUAUGUUAGUCGCUCUGA__UCGUCAUCUGUUUCACCGUCUUAGUGUUCACACUGGUGACGAGAAAAGCCCUCUGCGAGGUGCGUAUUCGAAACGGCCAGAAGGAGGUUGCUGCAUUCAUAGCUUACGAAUCCGAG___\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50974274 91.90736389]
[62.55460739 90.72296906]
[47.65793610 88.94867706]
[32.84299469 86.58724976]
[18.13290596 83.64237976]
[3.55064487 80.11866760]
[-10.88102150 76.02160645]
[-25.13956070 71.35759735]
[-39.20270920 66.13391876]
[-53.04850769 60.35873032]
[-66.65534210 54.04105377]
[-80.00196075 47.19074631]
[-93.06752014 39.81850815]
[-105.83163452 31.93585014]
[-118.27436829 23.55507851]
[-130.37629700 14.68927765]
[-142.11849976 5.35229301]
[-153.48268127 -4.44129801]
[-164.45108032 -14.67620373]
[-175.00656128 -25.33644295]
[-185.13264465 -36.40537262]
[-194.81353760 -47.86570740]
[-204.03411865 -59.69955444]
[-212.77996826 -71.88843536]
[-221.03746033 -84.41332245]
[-228.79368591 -97.25466156]
[-236.03654480 -110.39238739]
[-242.75471497 -123.80600739]
[-248.93771362 -137.47456360]
[-254.57588196 -151.37672424]
[-259.66043091 -165.49076843]
[-264.18341064 -179.79466248]
[-268.13775635 -194.26608276]
[-271.51730347 -208.88243103]
[-274.31677246 -223.62088013]
[-276.53176880 -238.45843506]
[-278.15887451 -253.37190247]
[-279.19552612 -268.33801270]
[-279.64010620 -283.33337402]
[-279.49191284 -298.33459473]
[-278.75119019 -313.31826782]
[-277.41909790 -328.26098633]
[-275.49771118 -343.13940430]
[-272.99002075 -357.93026733]
[-269.89996338 -372.61056519]
[-266.23233032 -387.15728760]
[-261.99288940 -401.54776001]
[-257.18820190 -415.75952148]
[-251.82583618 -429.77038574]
[-245.91413879 -443.55844116]
[-239.46232605 -457.10220337]
[-232.48048401 -470.38046265]
[-224.97952271 -483.37255859]
[-216.97113037 -496.05816650]
[-208.46781921 -508.41748047]
[-199.48287964 -520.43121338]
[-190.03033447 -532.08062744]
[-180.12493896 -543.34747314]
[-169.78216553 -554.21417236]
[-159.01815796 -564.66381836]
[-147.84971619 -574.68005371]
[-136.29429626 -584.24725342]
[-124.36991882 -593.35046387]
[-112.09521484 -601.97546387]
[-99.48935699 -610.10882568]
[-86.57201385 -617.73779297]
[-73.36335754 -624.85046387]
[-59.88402176 -631.43579102]
[-46.15504074 -637.48339844]
[-32.19785690 -642.98394775]
[-18.03426361 -647.92883301]
[-3.68637156 -652.31024170]
[10.82341480 -656.12139893]
[25.47243881 -659.35638428]
[40.23783112 -662.01007080]
[55.09653473 -664.07836914]
[70.02534485 -665.55804443]
[85.00096130 -666.44677734]
[100.00000000 -666.74316406]
[114.99903870 -666.44677734]
[129.97465515 -665.55804443]
[144.90347290 -664.07836914]
[159.76217651 -662.01007080]
[174.52755737 -659.35638428]
[189.17658997 -656.12139893]
[203.68637085 -652.31024170]
[218.03427124 -647.92883301]
[232.19786072 -642.98394775]
[246.15504456 -637.48339844]
[259.88403320 -631.43579102]
[273.36337280 -624.85046387]
[286.57202148 -617.73779297]
[299.48934937 -610.10882568]
[312.09521484 -601.97546387]
[324.36990356 -593.35046387]
[336.29428101 -584.24725342]
[347.84973145 -574.68005371]
[359.01815796 -564.66381836]
[369.78216553 -554.21417236]
[380.12493896 -543.34747314]
[390.03033447 -532.08062744]
[399.48287964 -520.43121338]
[408.46783447 -508.41748047]
[416.97113037 -496.05816650]
[424.97952271 -483.37255859]
[432.48049927 -470.38046265]
[439.46234131 -457.10220337]
[445.91412354 -443.55844116]
[451.82583618 -429.77038574]
[457.18820190 -415.75952148]
[461.99288940 -401.54776001]
[466.23233032 -387.15728760]
[469.89996338 -372.61056519]
[472.99002075 -357.93026733]
[475.49771118 -343.13940430]
[477.41909790 -328.26098633]
[478.75119019 -313.31826782]
[479.49191284 -298.33459473]
[479.64010620 -283.33337402]
[479.19552612 -268.33801270]
[478.15887451 -253.37190247]
[476.53176880 -238.45843506]
[474.31677246 -223.62088013]
[471.51730347 -208.88243103]
[468.13775635 -194.26608276]
[464.18341064 -179.79466248]
[459.66043091 -165.49076843]
[454.57589722 -151.37672424]
[448.93771362 -137.47456360]
[442.75469971 -123.80600739]
[436.03652954 -110.39238739]
[428.79370117 -97.25466156]
[421.03747559 -84.41332245]
[412.77996826 -71.88843536]
[404.03411865 -59.69955444]
[394.81353760 -47.86570740]
[385.13265991 -36.40537262]
[375.00656128 -25.33644295]
[364.45108032 -14.67620373]
[353.48269653 -4.44129801]
[342.11849976 5.35229301]
[330.37628174 14.68927765]
[318.27438354 23.55507851]
[305.83163452 31.93585014]
[293.06753540 39.81850815]
[280.00195312 47.19074631]
[266.65533447 54.04105377]
[253.04850769 60.35873032]
[239.20271301 66.13391876]
[225.13955688 71.35759735]
[210.88102722 76.02160645]
[196.44935608 80.11866760]
[181.86709595 83.64237976]
[167.15701294 86.58724976]
[152.34205627 88.94867706]
[137.44538879 90.72296906]
[122.49025726 91.90736389]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
