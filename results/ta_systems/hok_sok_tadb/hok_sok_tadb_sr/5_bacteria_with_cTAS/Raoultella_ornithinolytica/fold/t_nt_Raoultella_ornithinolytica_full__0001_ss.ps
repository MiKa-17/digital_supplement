%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:56:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCCAUACUGGUGUUGACUAGACAUACAGUGGGCCUCGUGGGUUAAUGAAAAUUAACUACGGGGCUUUCUGCUUUCUGCCACACAACAUCCAAACCACUCAAACAUCAUGAGGCAAAAAAGCCUCAAGCGCC_\
) } def
/len { sequence length } bind def

/coor [
[242.63009644 166.72308350]
[228.75598145 161.02145386]
[214.88185120 155.31980896]
[201.00772095 149.61817932]
[186.29472351 151.93698120]
[176.47137451 139.53486633]
[162.59725952 133.83323669]
[148.72312927 128.13160706]
[134.84899902 122.42996979]
[120.97487640 116.72833252]
[105.73297119 128.30184937]
[85.23278046 127.17089844]
[69.32209015 112.08509064]
[55.71572876 118.39910889]
[42.10936737 124.71313477]
[28.50300217 131.02716064]
[14.89663887 137.34117126]
[1.36145890 143.80638123]
[-12.10085773 150.42196655]
[-25.56317520 157.03756714]
[-39.02548981 163.65315247]
[-52.48780823 170.26873779]
[-59.00590897 184.92800903]
[-74.56664276 188.83224487]
[-87.23314667 178.98648071]
[-87.28876495 162.94351196]
[-74.69082642 153.01016235]
[-59.10339737 156.80642700]
[-45.64108276 150.19084167]
[-32.17876434 143.57524109]
[-18.71644783 136.95965576]
[-5.25413084 130.34407043]
[-0.60071546 124.52399445]
[8.58261776 123.73480988]
[22.18898201 117.42079163]
[35.79534531 111.10676575]
[49.40171051 104.79274750]
[63.00807190 98.47872925]
[66.64771271 83.92698669]
[57.61603546 71.95080566]
[48.58436203 59.97462845]
[39.55268860 47.99845123]
[30.52101707 36.02227020]
[21.48934364 24.04609108]
[12.45766926 12.06991100]
[3.42599630 0.09373161]
[-5.60567713 -11.88244820]
[-14.63735008 -23.85862732]
[-22.36780357 -28.87824059]
[-23.73328972 -36.20373535]
[-32.49590683 -48.37815857]
[-41.25851822 -60.55258179]
[-50.02113342 -72.72700500]
[-58.78374863 -84.90142822]
[-73.94938660 -91.14126587]
[-75.85986328 -107.42874908]
[-62.54985428 -117.00871277]
[-47.71154785 -110.02610779]
[-46.60932541 -93.66404724]
[-37.84671021 -81.48962402]
[-29.08409691 -69.31520081]
[-20.32148170 -57.14077377]
[-11.55886650 -44.96635056]
[-2.66117072 -32.89030075]
[6.37050247 -20.91412163]
[15.40217590 -8.93794155]
[24.43384933 3.03823781]
[33.46552277 15.01441765]
[42.49719620 26.99059677]
[51.52886963 38.96677780]
[60.56054306 50.94295502]
[69.59221649 62.91913605]
[78.62388611 74.89531708]
[92.80008698 69.08357239]
[107.48275757 70.41668701]
[119.40517426 78.06547546]
[126.15918732 89.85503387]
[126.67650604 102.85420990]
[140.55062866 108.55583954]
[154.42475891 114.25747681]
[168.29888916 119.95910645]
[182.17301941 125.66074371]
[197.87838745 123.74975586]
[206.70935059 135.74406433]
[220.58348083 141.44569397]
[234.45761108 147.14732361]
[248.33174133 152.84895325]
[253.21966553 144.74693298]
[259.02108765 137.27355957]
[265.65603638 130.53128052]
[273.03317261 124.61247253]
[281.05093384 119.59818268]
[289.59902954 115.55700684]
[298.55990601 112.54415131]
[307.81033325 110.60069275]
[317.22323608 109.75299835]
[326.66925049 110.01239014]
[336.01861572 111.37497711]
[345.14303589 113.82170105]
[353.91717529 117.31864929]
[362.22070312 121.81747437]
[369.93966675 127.25609589]
[376.96826172 133.55953979]
[383.21014404 140.64096069]
[388.57983398 148.40289307]
[393.00387573 156.73851013]
[396.42172241 165.53317261]
[398.78680420 174.66595459]
[400.06689453 184.01133728]
[400.24478149 193.44088745]
[399.31835938 202.82508850]
[397.30062866 212.03506470]
[394.21966553 220.94438171]
[390.11807251 229.43077087]
[385.05255127 237.37779236]
[379.09289551 244.67649841]
[389.15466309 255.80126953]
[399.21643066 266.92605591]
[409.27819824 278.05084229]
[419.33996582 289.17562866]
[429.40173340 300.30041504]
[445.19674683 300.84194946]
[455.92135620 312.45050049]
[455.21282959 328.23889160]
[443.49154663 338.84017944]
[427.71154785 337.96478271]
[417.23477173 326.13204956]
[418.27694702 310.36218262]
[408.21517944 299.23739624]
[398.15341187 288.11260986]
[388.09164429 276.98782349]
[378.02987671 265.86303711]
[367.96810913 254.73826599]
[348.39929199 265.53414917]
[326.60433960 270.52941895]
[304.26556396 269.33236694]
[283.10888672 262.02954102]
[264.77053833 249.17948914]
[250.67050171 231.76997375]
[241.90261841 211.14208984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% Start Annotations
1 87 0.0 1 colorpair
2 86 0.0 1 colorpair
3 85 0.0 1 colorpair
4 84 0.0 1 colorpair
6 82 0.0 1 colorpair
7 81 0.0 1 colorpair
8 80 0.0 1 colorpair
9 79 0.0 1 colorpair
10 78 0.0 1 colorpair
13 38 0.0 1 colorpair
14 37 0.0 1 colorpair
15 36 0.0 1 colorpair
16 35 0.0 1 colorpair
17 34 0.0 1 colorpair
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.0 1 colorpair
22 28 0.0 1 colorpair
39 73 0.0 1 colorpair
40 72 0.0 1 colorpair
41 71 0.0 1 colorpair
42 70 0.0 1 colorpair
43 69 0.0 1 colorpair
44 68 0.0 1 colorpair
45 67 0.0 1 colorpair
46 66 0.0 1 colorpair
47 65 0.0 1 colorpair
48 64 0.0 1 colorpair
50 63 0.0 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair
116 133 0.0 1 colorpair
117 132 0.0 1 colorpair
118 131 0.0 1 colorpair
119 130 0.0 1 colorpair
120 129 0.0 1 colorpair
121 128 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
