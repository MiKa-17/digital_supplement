%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:56:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUGCCGCGAAACACCCUGAUCUGGUGCGUAUUAAUAGUGUGCCUCACACUGCUGAUAUUCACUUACCUGACCCGGAAAUCACUAUGCGAAAUCCGGUACAGGGACACGAACAGGGAGGUGGCGGCUUUUCUGGCUUACGAAUCCGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[115.25185394 468.63830566]
[112.77404785 453.80484009]
[112.90988159 438.76647949]
[115.65522003 423.98019409]
[120.92663574 409.89532471]
[128.56394958 396.93991089]
[138.33505249 385.50765991]
[149.94302368 375.94595337]
[163.03512573 368.54541016]
[158.03038025 354.40493774]
[153.02563477 340.26449585]
[148.02088928 326.12402344]
[143.01614380 311.98358154]
[131.47575378 302.56713867]
[134.16526794 286.97622681]
[121.03907776 284.37411499]
[110.84021759 275.54434204]
[106.31360626 262.72137451]
[108.74754333 249.23229980]
[117.60935974 238.63363647]
[112.88854980 224.39587402]
[108.16774750 210.15811157]
[103.44693756 195.92033386]
[98.72612762 181.68257141]
[87.37646484 172.03713989]
[90.37738800 156.50314331]
[85.65658569 142.26538086]
[80.93577576 128.02761841]
[70.70701599 117.05616760]
[56.83451080 111.35060120]
[42.96200180 105.64502716]
[29.08949471 99.93945312]
[13.38358021 101.84598541]
[4.55601645 89.84917450]
[-9.31649113 84.14360809]
[-23.18899918 78.43803406]
[-37.06150818 72.73246765]
[-50.93401337 67.02689362]
[-64.80651855 61.32132339]
[-80.51243591 63.22785187]
[-89.33999634 51.23104477]
[-103.21250916 45.52547455]
[-117.08501434 39.81990433]
[-130.95751953 34.11433029]
[-144.83003235 28.40876198]
[-158.70252991 22.70319176]
[-172.57504272 16.99761963]
[-189.52346802 16.56472778]
[-193.79928589 0.15882161]
[-179.21818542 -8.49149895]
[-166.86947632 3.12511301]
[-152.99696350 8.83068371]
[-139.12446594 14.53625393]
[-125.25195312 20.24182510]
[-111.37944031 25.94739532]
[-97.50693512 31.65296555]
[-83.63442993 37.35853577]
[-68.92076874 35.04390717]
[-59.10095215 47.44881821]
[-45.22844315 53.15438843]
[-31.35593605 58.85995865]
[-17.48342896 64.56552887]
[-3.61092091 70.27109528]
[10.26158714 75.97666931]
[24.97524643 73.66204071]
[34.79506302 86.06694794]
[48.66757202 91.77252197]
[62.54008102 97.47808838]
[76.41259003 103.18366241]
[80.00117493 90.03938293]
[89.76096344 81.79965210]
[101.62600708 80.64465332]
[108.55593109 67.34142303]
[115.48585510 54.03818130]
[107.73969269 39.03186417]
[110.41718292 22.52580833]
[122.27228546 10.96914196]
[138.51258850 8.75806522]
[145.17494202 -4.68116808]
[151.83729553 -18.12040138]
[158.49964905 -31.55963516]
[165.16201782 -44.99886703]
[154.89541626 -56.17747498]
[149.36390686 -70.31137085]
[149.31559753 -85.48905182]
[154.75701904 -99.65787506]
[164.95223999 -110.90161133]
[178.52247620 -117.69963837]
[193.63244629 -119.13259125]
[208.23864746 -115.00666046]
[220.36572266 -105.87985229]
[228.37356567 -92.98649597]
[231.17919922 -78.07029724]
[228.40318298 -63.14856339]
[220.42094421 -50.23933411]
[208.31201172 -41.08847046]
[193.71403503 -36.93355942]
[178.60124207 -38.33650970]
[171.93888855 -24.89727783]
[165.27653503 -11.45804405]
[158.61418152 1.98118925]
[151.95181274 15.42042255]
[159.22573853 26.65242767]
[159.99179077 40.12070847]
[153.94194031 52.29929733]
[142.56661987 59.94661713]
[128.78909302 60.96810913]
[121.85916901 74.27134705]
[114.92923737 87.57458496]
[120.45742035 98.42491150]
[118.53229523 111.11981201]
[109.11528015 120.79694366]
[95.17353821 123.30680084]
[99.89434814 137.54457092]
[104.61515808 151.78233337]
[116.30248260 162.44615173]
[112.96389008 176.96176147]
[117.68470001 191.19953918]
[122.40550995 205.43730164]
[127.12631989 219.67506409]
[131.84712219 233.91282654]
[148.01078796 238.80451965]
[157.99153137 252.22105408]
[158.02896118 268.77697754]
[148.30572510 281.97146606]
[160.20407104 292.39932251]
[157.15660095 306.97882080]
[162.16134644 321.11929321]
[167.16609192 335.25973511]
[172.17083740 349.40020752]
[177.17558289 363.54064941]
[192.00819397 361.05780029]
[207.04661560 361.18850708]
[221.83383179 363.92883301]
[235.92048645 369.19543457]
[248.87849426 376.82833862]
[260.31408691 386.59558105]
[269.87973022 398.20028687]
[277.28472900 411.28985596]
[282.30410767 425.46649170]
[284.78527832 440.29940796]
[284.65286255 455.33779907]
[281.91085815 470.12472534]
[276.64263916 484.21075439]
[269.00827026 497.16790771]
[259.23974609 508.60238647]
[247.63394165 518.16668701]
[234.54353333 525.57025146]
[220.36633301 530.58801270]
[205.53314209 533.06750488]
[190.49475098 532.93334961]
[175.70816040 530.18969727]
[161.62271118 524.91986084]
[148.66642761 517.28405762]
[137.23306274 507.51422119]
[127.67005157 495.90734863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[15 125]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[26 115]
[27 114]
[28 113]
[29 69]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[72 109]
[73 108]
[74 107]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
] def

init

% Start Annotations
9 131 0.0 0.6 colorpair
10 130 0.0 1 colorpair
11 129 0.0 1 colorpair
12 128 0.0 0.6 colorpair
13 127 0.0 1 colorpair
15 125 0.0 1 colorpair
20 121 0.0 1 colorpair
21 120 0.16 1 colorpair
22 119 0.0 1 colorpair
23 118 0.0 1 colorpair
24 117 0.0 0.6 colorpair
26 115 0.16 1 colorpair
27 114 0.0 1 colorpair
28 113 0.16 0.6 colorpair
29 69 0.0 0.6 colorpair
30 68 0.0 1 colorpair
31 67 0.0 1 colorpair
32 66 0.0 1 colorpair
34 64 0.0 1 colorpair
35 63 0.0 1 colorpair
36 62 0.0 1 colorpair
37 61 0.0 1 colorpair
38 60 0.0 1 colorpair
39 59 0.0 1 colorpair
41 57 0.0 0.6 colorpair
42 56 0.0 0.6 colorpair
43 55 0.0 1 colorpair
44 54 0.16 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
47 51 0.0 0.6 colorpair
72 109 0.16 1 colorpair
73 108 0.0 1 colorpair
74 107 0.16 1 colorpair
78 102 0.0 1 colorpair
79 101 0.0 1 colorpair
80 100 0.16 1 colorpair
81 99 0.0 0.6 colorpair
82 98 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 131 1 gmark
12 128 1 gmark
21 cmark
24 117 1 gmark
115 cmark
28 113 1 gmark
28 cmark
113 cmark
29 69 1 gmark
41 57 1 gmark
42 56 1 gmark
54 cmark
47 51 1 gmark
72 cmark
107 cmark
100 cmark
81 99 1 gmark

% End Annotations
showpage
end
%%EOF
