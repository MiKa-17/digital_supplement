%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:22:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________ACAAAAGACCGCUUUACUGAGCUUAAUCGUUAUUUGCUUAACGUUAUUAGGCUUCACAUGGAUGGUGAGAGACUCGCUCUGUGAGCUUCAAGUAAGGAAUGGGAACUCGGUAUUCUUGGCAACACUCGCCUACGAAUCG__\
) } def
/len { sequence length } bind def

/coor [
[204.73240662 325.27197266]
[197.01751709 325.61706543]
[189.34474182 324.69714355]
[181.92024231 322.53521729]
[174.94381714 319.18771362]
[168.60343933 314.74298096]
[163.07031250 309.31900024]
[158.49412537 303.06018066]
[154.99908447 296.13351440]
[152.68049622 288.72421265]
[151.60220337 281.03067017]
[151.79481506 273.25918579]
[153.25483704 265.61843872]
[155.94470215 258.31387329]
[159.79379272 251.54211426]
[164.70021057 245.48579407]
[170.53358459 240.30854797]
[163.58413696 227.01550293]
[156.63470459 213.72244263]
[149.40838623 200.57785034]
[141.90838623 187.58746338]
[134.40838623 174.59709167]
[126.90839386 161.60670471]
[119.40839386 148.61631775]
[111.90839386 135.62594604]
[104.40839386 122.63555908]
[76.96130371 120.17657471]
[63.80576324 87.82003021]
[49.44597244 83.48455048]
[35.08617783 79.14907837]
[20.72638702 74.81359863]
[6.36659384 70.47811890]
[-7.99319839 66.14264679]
[-22.35299110 61.80716705]
[-36.71278381 57.47169113]
[-51.16022110 53.43789291]
[-65.68897247 49.70754623]
[-80.21772003 45.97719574]
[-94.74646759 42.24684906]
[-109.27521515 38.51650238]
[-122.74933624 46.77625656]
[-138.09779358 43.00795364]
[-146.21464539 29.44725609]
[-142.28427124 14.13948822]
[-128.63851929 6.16647577]
[-113.37316132 10.25846577]
[-105.54486084 23.98775291]
[-91.01611328 27.71810150]
[-76.48736572 31.44845009]
[-61.95862198 35.17879868]
[-47.42987442 38.90914536]
[-42.88497925 37.25600052]
[-37.25148010 38.48771286]
[-32.37730789 43.11190033]
[-18.01751328 47.44737625]
[-3.65772176 51.78285217]
[10.70207119 56.11832809]
[25.06186295 60.45380783]
[39.42165756 64.78928375]
[53.78144836 69.12476349]
[68.14124298 73.46023560]
[78.96764374 63.07809067]
[75.23729706 48.54934311]
[71.50695038 34.02059555]
[67.77659607 19.49184799]
[53.59688568 12.89869213]
[47.01945496 -1.28832388]
[51.14997101 -16.37052727]
[64.03813171 -25.22656059]
[79.59854126 -23.67487717]
[90.48404694 -12.44813442]
[91.55484772 3.15274358]
[82.30534363 15.76149940]
[86.03569794 30.29024696]
[89.76604462 44.81899261]
[93.49639130 59.34774017]
[108.37811279 61.22774124]
[115.60441589 48.08314133]
[122.83071899 34.93854141]
[122.69876099 19.11788368]
[135.61041260 11.69236279]
[142.83671570 -1.45223725]
[150.06301880 -14.59683704]
[157.28933716 -27.74143791]
[164.51564026 -40.88603973]
[166.84774780 -57.67882156]
[183.62985229 -60.08655548]
[190.58924866 -44.62682343]
[177.66023254 -33.65973282]
[170.43392944 -20.51513290]
[163.20762634 -7.37053251]
[155.98132324 5.77406788]
[148.75502014 18.91866875]
[149.40385437 33.79913330]
[135.97532654 42.16484451]
[128.74902344 55.30944443]
[121.52271271 68.45404816]
[130.37397766 96.08881378]
[117.39877319 115.13555908]
[124.89877319 128.12594604]
[132.39877319 141.11631775]
[139.89877319 154.10670471]
[147.39877319 167.09709167]
[154.89877319 180.08746338]
[162.39877319 193.07785034]
[168.01380920 196.76730347]
[170.49938965 201.97070312]
[169.92774963 206.77301025]
[176.87719727 220.06605530]
[183.82662964 233.35911560]
[207.58525085 231.79556274]
[229.07044983 241.91842651]
[242.92178345 261.13830566]
[245.71434021 284.60421753]
[236.80546570 306.42782593]
[247.30041504 317.14492798]
[257.79537964 327.86199951]
[268.29031372 338.57910156]
[278.78527832 349.29620361]
[292.02526855 344.25277710]
[306.14437866 344.64785767]
[319.00238037 350.38833618]
[328.66287231 360.57345581]
[333.68484497 373.63577271]
[333.33770752 387.58251953]
[327.70718384 400.29943848]
[337.97540283 411.23394775]
[348.24362183 422.16848755]
[363.84567261 421.11499023]
[376.44415283 430.37847900]
[380.09045410 445.58499146]
[373.06289673 459.55450439]
[358.67968750 465.69104004]
[343.73211670 461.09710693]
[335.27798462 447.94180298]
[337.30908203 432.43670654]
[327.04086304 421.50216675]
[316.77267456 410.56762695]
[301.65786743 415.65887451]
[285.77621460 413.65731812]
[272.29986572 404.91189575]
[263.94265747 391.12344360]
[262.41375732 375.01440430]
[268.06817627 359.79113770]
[257.57324219 349.07406616]
[247.07827759 338.35696411]
[236.58332825 327.63986206]
[226.08837891 316.92279053]
[219.46511841 320.86407471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 110]
[18 109]
[19 108]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[62 76]
[63 75]
[64 74]
[65 73]
[77 97]
[78 96]
[79 95]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[115 148]
[116 147]
[117 146]
[118 145]
[119 144]
[126 138]
[127 137]
[128 136]
] def

init

% Start Annotations
17 110 0.0 1 colorpair
18 109 0.0 1 colorpair
19 108 0.0 1 colorpair
20 105 0.0 1 colorpair
21 104 0.0 1 colorpair
22 103 0.0 1 colorpair
23 102 0.0 1 colorpair
24 101 0.0 1 colorpair
25 100 0.0 1 colorpair
26 99 0.0 1 colorpair
28 61 0.0 1 colorpair
29 60 0.0 1 colorpair
30 59 0.0 1 colorpair
31 58 0.0 1 colorpair
32 57 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
62 76 0.0 1 colorpair
63 75 0.0 1 colorpair
64 74 0.0 1 colorpair
65 73 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
115 148 0.0 0.6 colorpair
116 147 0.0 1 colorpair
117 146 0.0 1 colorpair
118 145 0.0 1 colorpair
119 144 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
115 148 1 gmark

% End Annotations
showpage
end
%%EOF
