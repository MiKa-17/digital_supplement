%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:14:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________________________________________GCCUCGGGUUAAUUGAAAAAAUUACUCGGGGCUUUCUGCUUUUUGCCUCACAACACGGCAACAAACCACCUGAACAUCAUGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[173.93344116 271.69421387]
[167.55134583 285.26879883]
[159.64979553 298.01892090]
[150.33372498 309.77523804]
[139.72689819 320.38159180]
[127.97016907 329.69714355]
[115.21970367 337.59814453]
[101.64485931 343.97964478]
[87.42593384 348.75689697]
[72.75178528 351.86642456]
[57.81731033 353.26696777]
[42.82087326 352.93991089]
[27.96166420 350.88955688]
[13.43703938 347.14318848]
[-0.56008404 341.75057983]
[-13.84379387 334.78329468]
[-26.23765564 326.33389282]
[-37.57705307 316.51461792]
[-47.71137619 305.45590210]
[-56.50601578 293.30459595]
[-63.84416580 280.22207642]
[-69.62835693 266.38217163]
[-73.78176117 251.96867371]
[-76.24922180 237.17300415]
[-76.99795532 222.19171143]
[-76.01802063 207.22375488]
[-73.32244110 192.46794128]
[-68.94700623 178.12026978]
[-62.94983673 164.37130737]
[-55.41059113 151.40367126]
[-46.42940140 139.38958740]
[-36.12556076 128.48863220]
[-24.63592148 118.84558868]
[-12.11309147 110.58854675]
[1.27659929 103.82717133]
[15.35530853 98.65126801]
[29.93604088 95.12958527]
[44.82513428 93.30889893]
[59.82482910 93.21338654]
[74.73590088 94.84432220]
[89.36686707 98.18194580]
[80.49722290 86.08528137]
[71.62757874 73.98860931]
[62.75793457 61.89194107]
[53.88829041 49.79526901]
[45.01864243 37.69860077]
[36.14899826 25.60193253]
[27.27935410 13.50526333]
[18.40970993 1.40859449]
[9.54006481 -10.68807411]
[1.88190782 -15.80795288]
[0.61228800 -23.14677238]
[-7.99135876 -35.43405533]
[-16.59500504 -47.72133255]
[-25.19865227 -60.00861359]
[-40.68470764 -64.19927979]
[-46.93124771 -78.97629547]
[-39.14646530 -93.00400543]
[-23.30217361 -95.52155304]
[-11.55276203 -84.59768677]
[-12.91137123 -68.61225891]
[-4.30772448 -56.32498169]
[4.29592228 -44.03770065]
[12.89956856 -31.75041962]
[21.63673401 -19.55772018]
[30.50637817 -7.46105003]
[39.37602234 4.63561869]
[48.24566650 16.73228836]
[57.11531448 28.82895660]
[65.98495483 40.92562485]
[74.85459900 53.02229691]
[83.72425079 65.11896515]
[92.59389496 77.21562958]
[101.46353912 89.31230164]
[102.81191254 74.37303162]
[115.77156830 66.82006073]
[129.43453979 73.01063538]
[132.30088806 87.73422241]
[121.95796967 98.59821320]
[136.90089417 97.29087067]
[151.84381104 95.98353577]
[166.78672791 94.67620087]
[181.72966003 93.36886597]
[196.67257690 92.06153107]
[211.61549377 90.75419617]
[226.55841064 89.44686127]
[241.50134277 88.13951874]
[256.44424438 86.83218384]
[271.38717651 85.52484894]
[286.33010864 84.21751404]
[301.27301025 82.91017914]
[307.00146484 66.79115295]
[319.13351440 54.80899811]
[335.21832275 49.31691360]
[352.03579712 51.36380768]
[366.24102783 60.49432755]
[375.02975464 74.84906006]
[389.90142822 72.89116669]
[404.77310181 70.93327332]
[409.99621582 56.54656219]
[421.31472778 46.24364471]
[436.12768555 42.39205170]
[451.03118896 45.87685776]
[462.60052490 55.89727402]
[468.17715454 70.15068817]
[466.47961426 85.36176300]
[457.89794922 98.03511047]
[444.40420532 105.25849152]
[429.09912109 105.37201691]
[415.49969482 98.34960175]
[406.73098755 85.80494690]
[391.85931396 87.76284027]
[376.98764038 89.72073364]
[373.91961670 102.42597961]
[366.67938232 113.34635162]
[356.11926270 121.15663910]
[343.49603271 124.90013123]
[330.32128906 124.10570526]
[318.18048096 118.84701538]
[308.54217529 109.73628998]
[302.58035278 97.85309601]
[287.63742065 99.16043091]
[272.69451904 100.46776581]
[257.75158691 101.77510834]
[242.80867004 103.08244324]
[227.86575317 104.38977814]
[212.92283630 105.69711304]
[197.97990417 107.00444794]
[183.03698730 108.31178284]
[168.09407043 109.61912537]
[153.15115356 110.92646027]
[138.20823669 112.23379517]
[123.26531219 113.54113007]
[135.41622925 122.33630371]
[146.47451782 132.47111511]
[156.29328918 143.81094360]
[164.74214172 156.20516968]
[171.70884705 169.48918152]
[177.10086060 183.48654175]
[180.84658813 198.01133728]
[182.89628601 212.87063599]
[183.22268677 227.86708069]
[181.82150269 242.80149841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[52 64]
[53 63]
[54 62]
[55 61]
[79 133]
[80 132]
[81 131]
[82 130]
[83 129]
[84 128]
[85 127]
[86 126]
[87 125]
[88 124]
[89 123]
[90 122]
[91 121]
[97 113]
[98 112]
[99 111]
] def

init

% Start Annotations
41 74 0.0 0.2 colorpair
42 73 0.0 1 colorpair
43 72 0.0 1 colorpair
44 71 0.0 1 colorpair
45 70 0.0 1 colorpair
46 69 0.0 1 colorpair
47 68 0.0 1 colorpair
48 67 0.0 1 colorpair
49 66 0.0 1 colorpair
50 65 0.0 1 colorpair
52 64 0.0 1 colorpair
53 63 0.0 1 colorpair
54 62 0.0 1 colorpair
55 61 0.0 1 colorpair
79 133 0.0 1 colorpair
80 132 0.0 1 colorpair
81 131 0.0 1 colorpair
82 130 0.0 1 colorpair
83 129 0.0 1 colorpair
84 128 0.0 1 colorpair
85 127 0.0 1 colorpair
86 126 0.0 1 colorpair
87 125 0.0 1 colorpair
88 124 0.0 1 colorpair
89 123 0.0 1 colorpair
90 122 0.0 1 colorpair
91 121 0.0 1 colorpair
97 113 0.0 1 colorpair
98 112 0.0 1 colorpair
99 111 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
41 74 2 gmark

% End Annotations
showpage
end
%%EOF
