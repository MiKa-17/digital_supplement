%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:10:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUGCCAUUAAAAACUGCGUUAGGCAUCGUCUUUAUUAUUUGCCUGACGAUAGUGAUCUUUACCUUUAUUACUCGAGGUAAGCUAUGCGAGUUUUCAAUAAAGGGUGAACAUCAGGAGGUGGCGGCAAAAUUAGCCUGUAACGCAGG____\
) } def
/len { sequence length } bind def

/coor [
[93.95555115 332.35729980]
[80.21444702 338.37246704]
[65.81094360 342.56042480]
[50.98685074 344.85086060]
[35.99103928 345.20535278]
[21.07527351 343.61791992]
[6.48996735 340.11523438]
[-7.52001047 334.75610352]
[-20.71945190 327.63046265]
[-32.88675690 318.85794067]
[-43.81765366 308.58587646]
[-53.32862091 296.98666382]
[-61.25999069 284.25509644]
[-67.47860718 270.60485840]
[-71.88005829 256.26513672]
[-74.39045715 241.47671509]
[-74.96765137 226.48782349]
[-73.60195923 211.55012512]
[-70.31629944 196.91439819]
[-65.16584015 182.82635498]
[-58.23705292 169.52252197]
[-49.64625931 157.22625732]
[-39.53768539 146.14398193]
[-28.08103943 136.46177673]
[-15.46866703 128.34216309]
[-1.91231120 121.92147827]
[12.36043549 117.30751038]
[27.10995293 114.57772064]
[42.08861542 113.77793884]
[57.05332565 114.92279053]
[71.24438477 110.06336975]
[85.43543243 105.20394897]
[70.65188599 102.66493225]
[55.86833191 100.12592316]
[41.08477783 97.58691406]
[26.30122566 95.04790497]
[18.22047615 107.92307281]
[5.82482862 116.72173309]
[-8.99546909 120.10214996]
[-23.98042870 117.54883575]
[-36.84495544 109.45115662]
[-45.62730026 97.04394531]
[-48.98822021 82.21921539]
[-46.41519547 67.23762512]
[-38.30060196 54.38376236]
[-25.88184929 45.61774826]
[-11.05270863 42.27633286]
[3.92548203 44.86906052]
[16.76865959 53.00055695]
[25.51832962 65.43083191]
[28.84023476 80.26435089]
[43.62378693 82.80335999]
[58.40734100 85.34236908]
[73.19089508 87.88138580]
[87.97444916 90.42039490]
[76.21792603 81.10459137]
[64.46140289 71.78878784]
[49.82941055 68.48654175]
[35.94118881 62.81933212]
[23.17611504 54.94196320]
[11.88289356 45.06962204]
[2.37001610 33.47198486]
[-5.10265684 20.46586609]
[-10.33099556 6.40654564]
[-13.17217922 -8.32191944]
[-13.54859543 -23.31719589]
[-11.44996262 -38.16966248]
[-6.93360853 -52.47359467]
[-0.12290481 -65.83826447]
[8.79610252 -77.89858246]
[19.57977486 -88.32510376]
[31.93353844 -96.83301544]
[45.51992798 -103.18990326]
[59.96780777 -107.22212219]
[74.88250732 -108.81951904]
[89.85661316 -107.93846130]
[104.48107147 -104.60301971]
[118.35639191 -98.90430450]
[131.10356140 -90.99797821]
[142.37434387 -81.10003662]
[151.86087036 -69.48083496]
[159.30400085 -56.45779037]
[164.50042725 -42.38663864]
[167.30816650 -27.65176392]
[167.65055847 -12.65567303]
[165.51821899 2.19199181]
[160.96940613 16.48563957]
[154.12838745 29.83481407]
[145.18203735 41.87485886]
[134.37493896 52.27671051]
[124.03417206 63.14264297]
[113.69340515 74.00857544]
[127.97768402 69.43045044]
[138.75790405 57.85040283]
[153.23939514 61.33405304]
[160.51618958 47.56140518]
[175.06770325 43.12201691]
[188.15298462 50.14421463]
[202.43725586 45.56608963]
[216.72154236 40.98796463]
[216.54010010 25.87312126]
[220.82348633 11.37677765]
[229.19082642 -1.21206355]
[240.89811707 -10.77400970]
[254.90434265 -16.45881844]
[269.96408081 -17.76100349]
[284.73822021 -14.56477070]
[297.91308594 -7.15433073]
[308.31713867 3.81138706]
[315.02529907 17.35731697]
[317.44104004 32.27896500]
[315.34957886 47.24951172]
[308.93685913 60.93777847]
[298.77313232 72.12661743]
[285.76214600 79.82112885]
[271.06082153 83.33712006]
[255.97637939 82.36194611]
[241.85011292 76.98232269]
[229.93815613 67.67660522]
[221.29966736 55.27224731]
[207.01538086 59.85037613]
[192.73110962 64.42849731]
[186.16561890 77.74878693]
[171.74453735 82.59513855]
[157.81752014 75.61833954]
[148.05900574 86.87092590]
[132.55581665 83.71473694]
[118.27153015 88.29286194]
[115.43722534 103.02265167]
[127.00257111 112.57476044]
[138.56791687 122.12686157]
[153.91250610 119.11392975]
[167.57876587 126.71440887]
[173.11390686 141.33959961]
[167.90441895 156.08392334]
[154.41004944 163.98556519]
[139.00242615 161.31361389]
[128.95657349 149.32968140]
[129.01580811 133.69221497]
[117.45046997 124.14010620]
[105.88511658 114.58799744]
[111.45514679 128.51548767]
[117.02516937 142.44296265]
[127.64611053 153.03520203]
[136.80833435 164.91180420]
[144.35801697 177.87338257]
[150.16841125 191.70231628]
[154.14195251 206.16644287]
[156.21195984 221.02291870]
[156.34365845 236.02233887]
[154.53485107 250.91288757]
[150.81590271 265.44454956]
[145.24923706 279.37338257]
[137.92831421 292.46551514]
[128.97605896 304.50119019]
[118.54273987 315.27828979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[92 128]
[93 127]
[95 125]
[98 122]
[99 121]
[100 120]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
32 55 0.16 1 colorpair
34 53 0.0 0.2 colorpair
35 52 0.0 1 colorpair
92 128 0.0 1 colorpair
93 127 0.16 1 colorpair
95 125 0.0 1 colorpair
98 122 0.0 1 colorpair
99 121 0.16 0.2 colorpair
100 120 0.16 0.2 colorpair
129 141 0.16 0.2 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
32 cmark
55 cmark
33 54 4 gmark
33 cmark
54 cmark
34 53 2 gmark
36 51 4 gmark
36 cmark
51 cmark
93 cmark
99 121 2 gmark
99 cmark
100 120 2 gmark
100 cmark
129 141 2 gmark
141 cmark

% End Annotations
showpage
end
%%EOF
