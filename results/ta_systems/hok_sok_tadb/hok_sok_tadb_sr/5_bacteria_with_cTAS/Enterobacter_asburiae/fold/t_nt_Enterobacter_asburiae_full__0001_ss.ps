%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:10:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAAGAGGCUACUCUCAACUUGUUCAGACAUGAAGGAG__UAGCCUCGGG_UAAAUGAAAAUUUAC__CGGGGCUUUCUACUUUCUGCCACACAAC____________AACCCUCA_______AGACAAAAAGCCUCAAGCACC_\
) } def
/len { sequence length } bind def

/coor [
[155.59716797 155.91403198]
[139.14555359 168.44741821]
[120.00082397 176.27182007]
[99.48009491 178.84893799]
[78.99514008 176.00144958]
[59.95525360 167.92527771]
[43.67033768 155.17602539]
[31.26074982 138.63081360]
[17.54456139 144.70256042]
[3.82837152 150.77430725]
[-9.88781738 156.84606934]
[-20.93941307 173.64918518]
[-40.04207230 170.93316650]
[-53.41444016 177.72874451]
[-66.71343231 184.66680908]
[-80.01242065 191.60488892]
[-89.48633575 207.35667419]
[-106.95294189 206.00582886]
[-120.10063171 213.22651672]
[-133.24832153 220.44720459]
[-146.39601135 227.66789246]
[-159.54368591 234.88858032]
[-165.38871765 249.82896423]
[-180.75588989 254.43649292]
[-193.85684204 245.17666626]
[-194.64164734 229.15281677]
[-182.50825500 218.65708923]
[-166.76437378 221.74089050]
[-153.61668396 214.52020264]
[-140.46900940 207.29951477]
[-127.32131195 200.07882690]
[-114.17362976 192.85815430]
[-110.46851349 181.29643250]
[-99.51381683 175.18800354]
[-86.95049286 178.30589294]
[-73.65150452 171.36782837]
[-60.35251617 164.42974854]
[-55.84508133 158.50535583]
[-46.69436646 157.48895264]
[-44.27476883 147.47232056]
[-36.55366898 140.31939697]
[-25.94643974 138.60014343]
[-15.95956802 143.12986755]
[-2.24337864 137.05812073]
[11.47281075 130.98637390]
[25.18899918 124.91462708]
[22.57751465 114.93931580]
[21.29006386 104.70851898]
[21.34866333 94.39720154]
[22.75230980 84.18170166]
[25.47699928 74.23671722]
[29.47613907 64.73232269]
[34.68133163 55.83105087]
[41.00357056 47.68513107]
[48.33472824 40.43387222]
[56.54943466 34.20127487]
[65.50720215 29.09392738]
[75.05485535 25.19917297]
[85.02909851 22.58361816]
[95.25936127 21.29199219]
[105.57070160 21.34638214]
[115.78677368 22.74586105]
[125.73287201 25.46649361]
[135.23889160 29.46175385]
[144.14228821 34.66331482]
[152.29078674 40.98222733]
[159.54504395 48.31042480]
[165.78099060 56.52258682]
[170.89199829 65.47827148]
[174.79064941 75.02433014]
[177.41026306 84.99750519]
[192.34095764 83.55715942]
[205.33439636 74.53047943]
[218.74581909 81.00991821]
[233.67649841 79.56957245]
[248.60719299 78.12922668]
[263.53787231 76.68888092]
[271.46701050 63.48149490]
[285.48880005 57.54489899]
[300.14422607 60.96274185]
[309.86062622 72.22018433]
[324.79132080 70.77983856]
[339.72198486 69.33949280]
[354.65267944 67.89914703]
[369.58337402 66.45880127]
[382.57681274 57.43211746]
[395.98822021 63.91155243]
[410.91891479 62.47120667]
[425.84960938 61.03086472]
[440.78030396 59.59051895]
[441.88372803 44.59416962]
[445.50582886 30.00004959]
[451.54241943 16.22806168]
[459.81979370 3.67445183]
[470.09979248 -7.29958677]
[482.08663940 -16.37830925]
[495.43548584 -23.30050278]
[509.76220703 -27.86700249]
[524.65460205 -29.94642067]
[539.68426514 -29.47892952]
[554.41864014 -26.47797585]
[568.43383789 -21.02990723]
[581.32666016 -13.29147434]
[592.72613525 -3.48532605]
[602.30419922 8.10639381]
[609.78540039 21.15016937]
[614.95440674 35.27070618]
[617.66247559 50.06172180]
[617.83172607 65.09765625]
[615.45733643 79.94589996]
[610.60754395 94.17922211]
[603.42193604 107.38812256]
[594.10723877 119.19253540]
[582.93145752 129.25283813]
[570.21612549 137.27957153]
[556.32708740 143.04179382]
[541.66400146 146.37370300]
[526.64874268 147.17944336]
[511.71325684 145.43583679]
[497.28735352 141.19303894]
[483.78607178 134.57312012]
[471.59786987 125.76657104]
[461.07339478 115.02674866]
[452.51550293 102.66267395]
[446.17037964 89.03007507]
[442.22064209 74.52120209]
[427.28994751 75.96154785]
[412.35925293 77.40189362]
[397.42858887 78.84223938]
[385.50308228 87.76589966]
[371.02371216 81.38948822]
[356.09301758 82.82983398]
[341.16232300 84.27017975]
[326.23165894 85.71052551]
[311.30096436 87.15087128]
[303.91571045 100.05808258]
[290.18386841 106.21441650]
[275.28582764 103.06767273]
[264.97821045 91.61956787]
[250.04753113 93.05991364]
[235.11685181 94.50025940]
[220.18615723 95.94060516]
[208.26066589 104.86425781]
[193.78129578 98.48784637]
[178.85061646 99.92819214]
[176.15693665 120.43394470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 46]
[9 45]
[10 44]
[11 43]
[13 39]
[14 37]
[15 36]
[16 35]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[71 145]
[72 144]
[74 142]
[75 141]
[76 140]
[77 139]
[81 135]
[82 134]
[83 133]
[84 132]
[85 131]
[87 129]
[88 128]
[89 127]
[90 126]
] def

init

% Start Annotations
8 46 0.0 1 colorpair
9 45 0.0 1 colorpair
10 44 0.0 1 colorpair
11 43 0.16 1 colorpair
13 39 0.16 0.2 colorpair
14 37 0.16 0.2 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
18 32 0.16 1 colorpair
19 31 0.16 1 colorpair
20 30 0.16 1 colorpair
21 29 0.16 1 colorpair
22 28 0.0 1 colorpair
71 145 0.0 1 colorpair
72 144 0.0 1 colorpair
74 142 0.0 1 colorpair
75 141 0.0 1 colorpair
76 140 0.0 1 colorpair
77 139 0.0 1 colorpair
81 135 0.16 1 colorpair
82 134 0.16 1 colorpair
83 133 0.0 1 colorpair
84 132 0.0 1 colorpair
85 131 0.0 1 colorpair
87 129 0.0 1 colorpair
88 128 0.0 1 colorpair
89 127 0.16 1 colorpair
90 126 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 cmark
43 cmark
13 39 2 gmark
13 cmark
39 cmark
14 37 2 gmark
37 cmark
35 cmark
18 cmark
19 cmark
31 cmark
20 cmark
30 cmark
29 cmark
81 cmark
135 cmark
82 cmark
134 cmark
89 cmark
127 cmark

% End Annotations
showpage
end
%%EOF
