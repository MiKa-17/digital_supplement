%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:08:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AAUGCCGCGAAAAUUCGCGUUGUCCAGUAAAAUUGUGAUUUGUAUCACAAUUUUACUUUUCACCUUGCUGAUACGUGAUUCACUGUGUGAGUUACGUAUCAAACAAGGUAACACGGAGGUAGCGGUGUUCCUGAACUACGAA____\
) } def
/len { sequence length } bind def

/coor [
[191.52888489 394.30874634]
[203.75962830 385.40573120]
[199.09429932 371.14968872]
[194.42898560 356.89364624]
[189.76365662 342.63760376]
[185.09832764 328.38156128]
[180.43301392 314.12551880]
[175.76768494 299.86947632]
[171.10235596 285.61343384]
[166.43704224 271.35739136]
[152.88136292 269.42153931]
[141.43533325 261.78527832]
[134.37487793 249.89819336]
[133.13354492 236.06166077]
[138.01173401 222.98341370]
[148.10662842 213.24763489]
[143.74290466 198.89640808]
[139.37918091 184.54516602]
[135.01544189 170.19393921]
[123.91024017 160.26803589]
[127.29821014 144.81384277]
[122.93448639 130.46260071]
[118.57076263 116.11137390]
[109.10259247 121.94664001]
[98.39915466 122.87744141]
[88.76899719 119.04198456]
[82.13961029 111.57136536]
[79.67270660 102.28326416]
[65.19066620 98.37552643]
[50.70861816 94.46778870]
[36.22657776 90.56005096]
[21.74453354 86.65231323]
[7.26248884 82.74457550]
[-7.21955490 78.83683777]
[-21.70159912 74.92910004]
[-36.18364334 71.02136230]
[-50.66568756 67.11362457]
[-65.14772797 63.20588684]
[-79.62977600 59.29814911]
[-94.11181641 55.39041519]
[-108.59385681 51.48267746]
[-124.29389954 56.21984482]
[-136.05953979 44.79611588]
[-131.78730774 28.96323776]
[-115.87210083 25.00872040]
[-104.68612671 37.00063324]
[-90.20407867 40.90837097]
[-75.72203827 44.81610870]
[-61.23999405 48.72384262]
[-46.75794983 52.63158035]
[-32.27590561 56.53931808]
[-17.79386139 60.44705582]
[-3.31181741 64.35478973]
[11.17022610 68.26252747]
[25.65226936 72.17026520]
[40.13431549 76.07800293]
[54.61635590 79.98574066]
[69.09840393 83.89347839]
[83.58044434 87.80121613]
[89.35899353 81.57016754]
[97.45417023 78.03977966]
[106.61919403 78.04262543]
[115.32442474 81.84306335]
[122.01255798 89.05027008]
[129.82980347 76.24829102]
[137.64704895 63.44631195]
[145.46429443 50.64432907]
[153.28153992 37.84235001]
[161.09878540 25.04037094]
[161.09538269 6.65756035]
[176.76028442 -1.18875456]
[184.30589294 -14.15269947]
[191.85150146 -27.11664581]
[199.39709473 -40.08058929]
[206.94270325 -53.04453659]
[214.48831177 -66.00848389]
[222.03390503 -78.97242737]
[229.57951355 -91.93637085]
[237.12510681 -104.90031433]
[244.67071533 -117.86426544]
[252.21632385 -130.82820129]
[259.76193237 -143.79216003]
[267.30752563 -156.75610352]
[274.85311890 -169.72004700]
[282.39874268 -182.68399048]
[285.14083862 -199.41471863]
[301.97680664 -201.41131592]
[308.55603027 -185.78601074]
[295.36267090 -175.13838196]
[287.81707764 -162.17443848]
[280.27148438 -149.21049500]
[272.72586060 -136.24655151]
[265.18026733 -123.28260803]
[257.63467407 -110.31865692]
[250.08906555 -97.35471344]
[242.54345703 -84.39076996]
[234.99784851 -71.42682648]
[227.45225525 -58.46287918]
[219.90664673 -45.49893188]
[212.36103821 -32.53498840]
[204.81544495 -19.57104301]
[197.26983643 -6.60709715]
[189.72424316 6.35684824]
[192.50791931 18.17229271]
[186.27101135 29.05203247]
[173.90075684 32.85761261]
[166.08351135 45.65959549]
[158.26626587 58.46157455]
[150.44903564 71.26355743]
[142.63179016 84.06553650]
[134.81454468 96.86751556]
[132.92199707 111.74764252]
[137.28572083 126.09887695]
[141.64944458 140.45010376]
[153.06677246 151.40251160]
[149.36668396 165.83021545]
[153.73040771 180.18144226]
[158.09413147 194.53268433]
[162.45785522 208.88391113]
[178.57168579 212.44418335]
[190.63572693 223.56654358]
[195.43589783 239.15954590]
[191.75794983 254.95855713]
[180.69308472 266.69204712]
[185.35839844 280.94808960]
[190.02372742 295.20413208]
[194.68905640 309.46017456]
[199.35437012 323.71621704]
[204.01969910 337.97225952]
[208.68502808 352.22830200]
[213.35034180 366.48434448]
[218.01567078 380.74038696]
[233.14353943 380.69024658]
[247.54588318 385.31927490]
[259.81170654 394.17391968]
[268.73928833 406.38674927]
[273.45404053 420.76126099]
[273.49404907 435.88916016]
[268.85540771 450.28839111]
[259.99252319 462.54827881]
[247.77371216 471.46768188]
[233.39605713 476.17282104]
[218.26812744 476.20269775]
[203.87199402 471.55438232]
[191.61805725 462.68328857]
[182.70683289 450.45849609]
[178.01135254 436.07769775]
[177.99162292 420.94973755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[16 119]
[17 118]
[18 117]
[19 116]
[21 114]
[22 113]
[23 112]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
2 132 0.0 0.2 colorpair
3 131 0.0 1 colorpair
4 130 0.0 1 colorpair
5 129 0.0 1 colorpair
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 1 colorpair
9 125 0.0 1 colorpair
10 124 0.0 1 colorpair
16 119 0.0 1 colorpair
17 118 0.0 1 colorpair
18 117 0.0 1 colorpair
19 116 0.0 1 colorpair
21 114 0.0 1 colorpair
22 113 0.0 1 colorpair
23 112 0.0 1 colorpair
28 59 0.0 1 colorpair
29 58 0.0 1 colorpair
30 57 0.0 1 colorpair
31 56 0.0 1 colorpair
32 55 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
64 111 0.0 1 colorpair
65 110 0.0 1 colorpair
66 109 0.0 1 colorpair
67 108 0.0 1 colorpair
68 107 0.0 1 colorpair
69 106 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
74 100 0.0 1 colorpair
75 99 0.0 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 132 2 gmark

% End Annotations
showpage
end
%%EOF
