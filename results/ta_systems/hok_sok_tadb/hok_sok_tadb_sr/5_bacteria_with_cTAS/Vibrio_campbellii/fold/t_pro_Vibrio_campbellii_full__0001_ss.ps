%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________ACAAAAGACCGCUUUACUAAGCUUGAUCGUUAUUUGUUUAACGUUAUUAGGCUUCACAUGGAUGGUGAGGGACUCACUCUGUAAGCUUCAAGUAAGGAAUGGGAACUCGGUAUUCUUGGCAACACUCGCCUACGAAUCG__\
) } def
/len { sequence length } bind def

/coor [
[87.25514221 287.05230713]
[74.78293610 278.71902466]
[66.53591156 266.18957520]
[63.81377792 251.43865967]
[67.04554749 236.79093933]
[75.71968842 224.55696106]
[79.18371582 209.96241760]
[82.64773560 195.36787415]
[86.11175537 180.77333069]
[89.57577515 166.17880249]
[93.03979492 151.58425903]
[85.54020691 151.66279602]
[75.50325012 162.80996704]
[65.46629333 173.95713806]
[55.42933273 185.10430908]
[52.55087280 201.24887085]
[37.04009628 206.57313538]
[24.85315323 195.59996033]
[28.52692986 179.61761475]
[44.28215790 175.06735229]
[54.31911850 163.92018127]
[64.35607910 152.77301025]
[74.39303589 141.62583923]
[65.19503021 131.57386780]
[59.46092987 119.79417419]
[57.40118408 107.38632202]
[58.89842224 95.42507935]
[44.53862762 91.08959961]
[30.17883682 86.75411987]
[15.81904411 82.41864777]
[1.45925164 78.08316803]
[-12.90054035 73.74769592]
[-27.26033401 69.41221619]
[-41.62012482 65.07673645]
[-55.97991943 60.74126053]
[-70.42735291 56.70746231]
[-84.95610046 52.97711563]
[-99.48484802 49.24676895]
[-114.01359558 45.51641846]
[-128.54234314 41.78607178]
[-142.01646423 50.04582596]
[-157.36492920 46.27752304]
[-165.48178101 32.71682739]
[-161.55140686 17.40905762]
[-147.90565491 9.43604565]
[-132.64028931 13.52803612]
[-124.81199646 27.25732422]
[-110.28324890 30.98767090]
[-95.75450134 34.71802139]
[-81.22575378 38.44836807]
[-66.69700623 42.17871475]
[-62.15211487 40.52556992]
[-56.51861191 41.75728226]
[-51.64443970 46.38146973]
[-37.28464890 50.71694565]
[-22.92485619 55.05242157]
[-8.56506348 59.38790131]
[5.79472876 63.72337723]
[20.15452194 68.05885315]
[34.51431274 72.39433289]
[48.87410736 76.72980499]
[63.23389816 81.06528473]
[70.33465576 71.18616486]
[80.00285339 63.80077744]
[91.40172577 59.54830933]
[103.54475403 58.79679108]
[115.38099670 61.61126709]
[125.88606262 67.74815369]
[137.24098206 57.94684601]
[148.59591675 48.14553833]
[159.95083618 38.34422684]
[171.30577087 28.54291916]
[176.69671631 13.66850471]
[191.38691711 11.20934105]
[202.74183655 1.40803194]
[214.09675598 -8.39327717]
[225.45169067 -18.19458580]
[224.89126587 -31.69155121]
[232.11930847 -42.87221527]
[244.29478455 -47.75642776]
[256.86642456 -44.76091385]
[268.42413330 -54.32227325]
[279.98181152 -63.88363647]
[291.53952026 -73.44499207]
[297.24078369 -88.20324707]
[311.97927856 -90.35422516]
[323.53695679 -99.91558075]
[335.09466553 -109.47694397]
[333.88821411 -121.38327026]
[338.56027222 -132.27011108]
[347.83108521 -139.45115662]
[359.30249023 -141.21636963]
[370.07760620 -137.23797607]
[382.02557373 -146.30696106]
[393.97351074 -155.37594604]
[402.93423462 -169.76837158]
[419.24478149 -165.14204407]
[419.31445312 -148.18823242]
[403.04251099 -143.42799377]
[391.09454346 -134.35900879]
[379.14660645 -125.29002380]
[377.80667114 -107.08119965]
[363.37811279 -95.38198853]
[344.65603638 -97.91924286]
[333.09832764 -88.35788727]
[321.54061890 -78.79652405]
[316.66604614 -64.72216797]
[301.10089111 -61.88729477]
[289.54318237 -52.32593536]
[277.98547363 -42.76457596]
[266.42779541 -33.20321655]
[265.58316040 -16.43653870]
[252.63978577 -5.22364616]
[235.25299072 -6.83966017]
[223.89807129 2.96164870]
[212.54315186 12.76295757]
[201.18821716 22.56426620]
[196.60945129 36.73762512]
[181.10707092 39.89784622]
[169.75215149 49.69915390]
[158.39721680 59.50046539]
[147.04229736 69.30177307]
[135.68737793 79.10308075]
[143.85168457 99.10665131]
[140.93235779 121.77986145]
[126.47309113 141.08044434]
[136.74130249 152.01496887]
[147.00950623 162.94949341]
[162.61155701 161.89599609]
[175.21005249 171.15946960]
[178.85635376 186.36599731]
[171.82881165 200.33551025]
[157.44558716 206.47204590]
[142.49801636 201.87811279]
[134.04388428 188.72282410]
[136.07498169 173.21769714]
[125.80677032 162.28317261]
[115.53856659 151.34864807]
[108.03897858 151.42718506]
[111.80788422 165.94598389]
[115.57678986 180.46476746]
[119.34569550 194.98356628]
[123.11460114 209.50234985]
[126.88350677 224.02114868]
[135.81324768 236.07353210]
[139.34989929 250.65063477]
[136.93609619 265.45513916]
[128.95225525 278.15390015]
[116.65661621 286.74560547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 23]
[13 22]
[14 21]
[15 20]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[68 123]
[69 122]
[70 121]
[71 120]
[72 119]
[74 117]
[75 116]
[76 115]
[77 114]
[81 111]
[82 110]
[83 109]
[84 108]
[86 106]
[87 105]
[88 104]
[93 101]
[94 100]
[95 99]
[126 138]
[127 137]
[128 136]
] def

init

% Start Annotations
12 23 0.0 1 colorpair
13 22 0.0 1 colorpair
14 21 0.0 1 colorpair
15 20 0.0 1 colorpair
27 62 0.0 1 colorpair
28 61 0.0 1 colorpair
29 60 0.0 1 colorpair
30 59 0.0 1 colorpair
31 58 0.0 1 colorpair
32 57 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
68 123 0.0 1 colorpair
69 122 0.0 1 colorpair
70 121 0.0 1 colorpair
71 120 0.0 1 colorpair
72 119 0.0 1 colorpair
74 117 0.0 1 colorpair
75 116 0.0 1 colorpair
76 115 0.0 1 colorpair
77 114 0.0 1 colorpair
81 111 0.0 1 colorpair
82 110 0.0 1 colorpair
83 109 0.0 1 colorpair
84 108 0.0 1 colorpair
86 106 0.0 1 colorpair
87 105 0.0 1 colorpair
88 104 0.0 1 colorpair
93 101 0.0 1 colorpair
94 100 0.0 1 colorpair
95 99 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
