%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:08:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAAGAGGCUAUCCUGAUGGUGUCUAGUCAUACAGAU_GCCUCGUGG__GUUAAUGAA___AAUUAAC____UACGGGGCUUUCUUCUUUCUGCCACACAACACGG_AACAAACCACCUUCACGUCAUGAGGCAAAAAGCCUCAAGCGCC____________\
) } def
/len { sequence length } bind def

/coor [
[168.49916077 247.75701904]
[163.26049805 232.65919495]
[159.68472290 217.08274841]
[157.81394958 201.21022034]
[157.67025757 185.22772217]
[159.25552368 169.32260132]
[162.55128479 153.68138123]
[167.51910400 138.48745728]
[153.83154297 132.35142517]
[140.14399719 126.21540070]
[124.61960602 141.14198303]
[104.12790680 147.76763916]
[82.80335236 144.75558472]
[64.94843292 132.71353149]
[52.51644135 141.10671997]
[40.08444977 149.49990845]
[27.65245628 157.89309692]
[15.30142403 166.40496826]
[3.03248358 175.03474426]
[-9.23645687 183.66452026]
[-21.50539780 192.29429626]
[-22.65477753 207.88958740]
[-33.59670258 219.06135559]
[-49.16473007 220.53462219]
[-62.00811386 211.61378479]
[-66.06259918 196.51095581]
[-59.41378403 182.35725403]
[-45.20103455 175.83561707]
[-30.13517761 180.02536011]
[-17.86623764 171.39558411]
[-5.59729624 162.76580811]
[6.67164421 154.13601685]
[10.35062695 147.68559265]
[19.25926971 145.46110535]
[31.69126129 137.06791687]
[44.12325287 128.67472839]
[56.55524445 120.28153992]
[52.26827621 104.52439880]
[53.51831818 88.24241638]
[60.16036224 73.32434082]
[49.15528107 63.13178635]
[38.15019989 52.93922806]
[27.14512062 42.74667358]
[16.14004135 32.55411530]
[5.13496113 22.36155891]
[-5.87011909 12.16900253]
[-16.87520027 1.97644567]
[-33.39774704 5.49054670]
[-48.61539841 -1.45130110]
[-56.63151169 -15.94219112]
[-54.46952057 -32.19342041]
[-65.66781616 -42.17330551]
[-76.86611938 -52.15319443]
[-88.06441498 -62.13307953]
[-99.26271820 -72.11296082]
[-110.46101379 -82.09284973]
[-125.90795898 -79.65855408]
[-139.27900696 -87.76712799]
[-144.26075745 -102.58995819]
[-138.50099182 -117.12815094]
[-124.71926880 -124.51721191]
[-109.42292023 -121.26826477]
[-99.83440399 -108.91535187]
[-100.48112488 -93.29114532]
[-89.28282928 -83.31126404]
[-78.08453369 -73.33137512]
[-66.88623047 -63.35149002]
[-55.68793488 -53.37160492]
[-44.48963547 -43.39171982]
[-31.73888397 -47.43503189]
[-18.55201340 -44.61576462]
[-8.40741348 -35.56788254]
[-4.03511858 -22.58255196]
[-6.68264294 -9.02863503]
[4.32243729 1.16392195]
[15.32751751 11.35647869]
[26.33259773 21.54903412]
[37.33767700 31.74159241]
[48.34275818 41.93414688]
[59.34783936 52.12670517]
[70.35292053 62.31925964]
[78.10704803 57.34456635]
[86.66948700 53.94476318]
[95.72410583 52.24537659]
[104.93659973 52.30914688]
[113.96681976 54.13372421]
[122.48137665 57.65173721]
[130.16589355 62.73330307]
[136.73664856 69.19080353]
[141.95103455 76.78581238]
[145.61653137 85.23792267]
[147.59782410 94.23506165]
[147.82174683 103.44505310]
[146.28002930 112.52784729]
[159.96757507 118.66387939]
[173.65513611 124.79990387]
[180.67103577 112.55956268]
[188.82299805 101.04526520]
[198.03646851 90.36211395]
[208.22721863 80.60758972]
[219.30213928 71.87071991]
[231.15998840 64.23118591]
[243.69244385 57.75868988]
[256.78497314 52.51223755]
[270.31802368 48.53964615]
[284.16790771 45.87709427]
[298.20816040 44.54879379]
[312.31054688 44.56676865]
[326.34628296 45.93075562]
[340.18716431 48.62818909]
[353.70684814 52.63433075]
[366.78189087 57.91249084]
[379.29287720 64.41437531]
[391.12567139 72.08051300]
[402.17221069 80.84078979]
[412.33169556 90.61514282]
[421.51144409 101.31420898]
[429.62765503 112.84022522]
[436.60632324 125.08786011]
[442.38378906 137.94522095]
[446.90740967 151.29483032]
[450.13595581 165.01475525]
[452.04003906 178.97966003]
[452.60241699 193.06199646]
[451.81799316 207.13316345]
[449.69409180 221.06466675]
[446.25018311 234.72926331]
[441.51782227 248.00222778]
[435.54034424 260.76232910]
[448.43389893 268.42761230]
[461.32745361 276.09289551]
[474.22097778 283.75817871]
[487.11453247 291.42346191]
[500.00808716 299.08874512]
[515.84802246 296.54415894]
[527.61608887 307.44793701]
[526.28479004 323.43566895]
[512.87536621 332.24288940]
[497.67440796 327.11349487]
[492.34280396 311.98226929]
[479.44924927 304.31701660]
[466.55569458 296.65173340]
[453.66217041 288.98645020]
[440.76861572 281.32116699]
[427.87509155 273.65588379]
[418.32794189 286.45242310]
[407.45269775 298.14230347]
[395.37673950 308.58828735]
[382.24148560 317.66784668]
[368.20092773 325.27438354]
[353.41952515 331.31854248]
[338.07055664 335.72930908]
[322.33392334 338.45483398]
[306.39407349 339.46301270]
[290.43792725 338.74182129]
[274.65252686 336.29956055]
[259.22296143 332.16473389]
[244.33021545 326.38558960]
[230.14892578 319.02981567]
[216.84542847 310.18344116]
[204.57580566 299.95007324]
[193.48399353 288.44955444]
[183.70018005 275.81658936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 96]
[9 95]
[10 94]
[14 37]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[40 81]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[129 145]
[130 144]
[131 143]
[132 142]
[133 141]
[134 140]
] def

init

% Start Annotations
8 96 0.0 1 colorpair
9 95 0.0 1 colorpair
10 94 0.0 1 colorpair
14 37 0.16 0.2 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
17 34 0.0 0.2 colorpair
18 32 0.16 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.32 1 colorpair
40 81 0.0 1 colorpair
41 80 0.0 1 colorpair
42 79 0.0 1 colorpair
43 78 0.0 1 colorpair
44 77 0.0 1 colorpair
45 76 0.16 1 colorpair
46 75 0.0 0.2 colorpair
47 74 0.0 0.2 colorpair
51 69 0.0 1 colorpair
52 68 0.0 1 colorpair
53 67 0.0 1 colorpair
54 66 0.16 1 colorpair
55 65 0.16 1 colorpair
56 64 0.0 1 colorpair
129 145 0.0 0.6 colorpair
130 144 0.0 0.6 colorpair
131 143 0.0 0.6 colorpair
132 142 0.0 0.6 colorpair
133 141 0.0 0.6 colorpair
134 140 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
14 37 2 gmark
14 cmark
37 cmark
35 cmark
17 34 2 gmark
18 cmark
32 cmark
21 cmark
29 cmark
76 cmark
46 75 2 gmark
47 74 2 gmark
54 cmark
55 cmark
129 145 1 gmark
130 144 1 gmark
131 143 1 gmark
132 142 1 gmark
133 141 1 gmark
134 140 1 gmark

% End Annotations
showpage
end
%%EOF
