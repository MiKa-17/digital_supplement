%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGAGGCUAUCCUGAUGUUGUCUAGGCAUACAGGUGGCCUCGUG_____GGUUAAUGAAAAUUAAC____UACGGGGCUUUCUGCUUUUUGCCACACAACACGGUAACAAACCACCUUCACGUCAUGAGGCAAAAAGCCUCAAGCGCC_\
) } def
/len { sequence length } bind def

/coor [
[105.77360535 114.26956177]
[101.56533051 117.32559204]
[96.06491852 118.99567413]
[89.76501465 118.79580688]
[77.50264740 127.43492126]
[65.24028015 136.07403564]
[52.97790909 144.71315002]
[40.71554184 153.35226440]
[28.45317268 161.99139404]
[16.19080544 170.63050842]
[10.93433952 178.18176270]
[3.58225942 179.31866455]
[-8.85718060 187.70080566]
[-21.29662132 196.08294678]
[-33.73606110 204.46510315]
[-46.08763504 212.97618103]
[-58.35000229 221.61529541]
[-70.61237335 230.25442505]
[-82.87474060 238.89353943]
[-95.13710785 247.53265381]
[-99.28300476 263.03076172]
[-114.04190826 269.31997681]
[-128.09205627 261.57574463]
[-130.65538025 245.73880005]
[-119.76550293 233.95787048]
[-103.77622223 235.27027893]
[-91.51385498 226.63116455]
[-79.25148773 217.99205017]
[-66.98912048 209.35293579]
[-54.72674942 200.71382141]
[-51.04628754 194.24853516]
[-42.11820602 192.02565002]
[-29.67876434 183.64350891]
[-17.23932457 175.26136780]
[-4.79988384 166.87922668]
[7.55168867 158.36813354]
[19.81405640 149.72901917]
[32.07642365 141.08990479]
[44.33879471 132.45079041]
[56.60116196 123.81166840]
[68.86353302 115.17255402]
[81.12590027 106.53343964]
[82.99350739 91.65016174]
[73.24585724 80.24913788]
[63.49820709 68.84811401]
[51.01242065 72.41609955]
[38.15373611 70.97935486]
[26.84559631 64.78862000]
[18.76589966 54.80306625]
[15.09804058 42.54185104]
[16.35768509 29.85302734]
[22.32059097 18.63503265]
[13.05564213 6.83839226]
[3.79069257 -4.95824766]
[-5.47425699 -16.75488853]
[-14.73920631 -28.55152702]
[-24.00415611 -40.34816742]
[-39.41788101 -45.94718933]
[-42.00902557 -62.14033508]
[-29.11203384 -72.26948547]
[-13.99423218 -65.91464233]
[-12.20751572 -49.61311722]
[-2.94256616 -37.81647873]
[6.32238293 -26.01983643]
[15.58733273 -14.22319698]
[24.85228157 -2.42655706]
[34.11722946 9.37008286]
[51.00428772 6.29900455]
[67.21727753 12.19753456]
[78.29629517 25.53822136]
[81.14584351 42.73355484]
[74.89923096 59.10046387]
[84.64688110 70.50148773]
[94.39453125 81.90250397]
[108.17691040 87.82247162]
[123.15662384 87.04262543]
[136.53587341 78.59832001]
[149.64819336 85.66347504]
[164.62791443 84.88362885]
[179.60762024 84.10378265]
[194.58734131 83.32393646]
[203.09176636 70.47944641]
[217.36193848 65.16761017]
[231.85223389 69.22906494]
[241.06219482 80.90444946]
[256.04190063 80.12461090]
[271.02160645 79.34476471]
[286.00134277 78.56491852]
[300.98104858 77.78507233]
[315.96075439 77.00522614]
[330.94049072 76.22537994]
[345.92019653 75.44553375]
[360.89990234 74.66569519]
[375.87960815 73.88584900]
[382.73742676 65.33857727]
[392.96859741 62.07870483]
[403.08306885 64.96260071]
[409.77011108 72.79301453]
[424.76928711 72.63697815]
[435.78848267 61.62720108]
[451.00201416 61.68262482]
[461.43023682 72.25559235]
[476.42944336 72.09955597]
[491.42861938 71.94351959]
[496.17584229 57.56496811]
[505.33651733 45.50841141]
[517.91699219 37.08165741]
[532.55261230 33.19877243]
[547.65588379 34.28094864]
[561.58843994 40.21079254]
[572.83898926 50.34508514]
[580.18713379 63.58452988]
[582.83587646 78.49301147]
[580.49786377 93.45337677]
[573.42669678 106.84282684]
[562.38940430 117.20897675]
[548.58325195 123.42739105]
[533.50579834 124.82353210]
[518.79254150 121.24596405]
[506.03948975 113.08275604]
[496.62997437 101.21938324]
[491.58465576 86.94270325]
[476.58547974 87.09873962]
[461.58627319 87.25477600]
[451.38027954 98.04240417]
[436.17117310 98.41431427]
[424.92532349 87.63616180]
[409.92614746 87.79219818]
[394.11685181 98.85997772]
[376.65945435 88.86556244]
[361.67974854 89.64540863]
[346.70004272 90.42524719]
[331.72033691 91.20509338]
[316.74060059 91.98493958]
[301.76089478 92.76478577]
[286.78118896 93.54463196]
[271.80145264 94.32447815]
[256.82174683 95.10432434]
[241.84204102 95.88416290]
[233.89422607 108.45278931]
[219.90399170 113.99694061]
[205.15939331 110.19561768]
[195.36718750 98.30364990]
[180.38746643 99.08349609]
[165.40776062 99.86334229]
[150.42803955 100.64318848]
[138.12023926 109.03170776]
[123.93647003 102.02233887]
[108.95675659 102.80218506]
[109.41419220 106.40721893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[43 74]
[44 73]
[45 72]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[75 149]
[76 148]
[78 146]
[79 145]
[80 144]
[81 143]
[85 139]
[86 138]
[87 137]
[88 136]
[89 135]
[90 134]
[91 133]
[92 132]
[93 131]
[94 130]
[98 128]
[99 127]
[102 124]
[103 123]
[104 122]
] def

init

% Start Annotations
4 42 0.0 1 colorpair
5 41 0.0 1 colorpair
6 40 0.0 1 colorpair
7 39 0.0 1 colorpair
8 38 0.0 1 colorpair
9 37 0.0 1 colorpair
10 36 0.0 1 colorpair
12 35 0.16 1 colorpair
13 34 0.0 1 colorpair
14 33 0.0 1 colorpair
15 32 0.0 1 colorpair
16 30 0.16 1 colorpair
17 29 0.0 1 colorpair
18 28 0.0 1 colorpair
19 27 0.16 1 colorpair
20 26 0.0 1 colorpair
43 74 0.0 1 colorpair
44 73 0.0 1 colorpair
45 72 0.0 1 colorpair
52 67 0.0 1 colorpair
53 66 0.0 1 colorpair
54 65 0.0 1 colorpair
55 64 0.0 1 colorpair
56 63 0.0 1 colorpair
57 62 0.0 1 colorpair
75 149 0.0 1 colorpair
76 148 0.0 1 colorpair
78 146 0.0 1 colorpair
79 145 0.0 1 colorpair
80 144 0.0 1 colorpair
81 143 0.0 1 colorpair
85 139 0.0 0.6 colorpair
86 138 0.0 1 colorpair
87 137 0.0 1 colorpair
88 136 0.0 1 colorpair
89 135 0.0 1 colorpair
90 134 0.0 0.6 colorpair
91 133 0.0 1 colorpair
92 132 0.0 1 colorpair
93 131 0.0 1 colorpair
94 130 0.0 1 colorpair
98 128 0.0 1 colorpair
99 127 0.0 1 colorpair
102 124 0.0 1 colorpair
103 123 0.16 1 colorpair
104 122 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
35 cmark
16 cmark
30 cmark
19 cmark
27 cmark
85 139 1 gmark
90 134 1 gmark
103 cmark
123 cmark
104 122 1 gmark

% End Annotations
showpage
end
%%EOF
