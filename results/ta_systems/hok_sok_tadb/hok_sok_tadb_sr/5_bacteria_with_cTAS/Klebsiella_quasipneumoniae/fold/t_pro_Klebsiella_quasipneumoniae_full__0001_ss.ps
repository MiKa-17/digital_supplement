%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AAUGCCGCAAAAGUAUCUGUUGUUUGGCUUAGUAGUGAUUUGCUUCACUAUUUUAUUAUUGACCUGGAUGGUUCGUGAUUCGCUAUGUGAAUUACAGAUCAGGCAGGGAAAUAUUGAGCUGGUGGCAUUCUUAGCCUGUGAUAUUAA____\
) } def
/len { sequence length } bind def

/coor [
[87.28509521 294.35864258]
[83.45772552 279.81900024]
[82.07585144 264.84768677]
[83.17717743 249.85313416]
[86.73165894 235.24438477]
[92.64231873 221.41998291]
[100.74790955 208.75708008]
[110.82731628 197.60112000]
[122.60556030 188.25645447]
[135.76130676 180.97799683]
[130.75657654 166.83753967]
[125.75182343 152.69708252]
[120.74707794 138.55662537]
[107.93933105 142.52891541]
[94.69038391 142.41201782]
[82.25895691 138.31445312]
[71.79649353 130.71835327]
[64.24057007 120.42482758]
[60.23115921 108.47034454]
[60.05718994 96.02276611]
[63.63779831 84.26731110]
[70.53921509 74.29373169]
[61.33849335 62.44692612]
[52.13777542 50.60012436]
[42.93705750 38.75331879]
[29.21262741 42.24923706]
[15.23619556 40.24581909]
[3.12114239 33.07947159]
[-5.31339979 21.86474800]
[-8.81568050 8.32112122]
[-6.88701487 -5.49061394]
[0.14749904 -17.48190880]
[-8.81433773 -29.51043701]
[-21.72534752 -21.84730911]
[-35.36665344 -15.57574940]
[-49.58879852 -10.76447487]
[-64.23594666 -7.46619940]
[-79.14762878 -5.71706057]
[-94.16046143 -5.53622293]
[-109.10994720 -6.92566824]
[-123.83229828 -9.87017250]
[-138.16619873 -14.33747482]
[-151.95462036 -20.27862740]
[-165.04646301 -27.62853813]
[-177.29830933 -36.30667496]
[-188.57591248 -46.21795654]
[-198.75569153 -57.25379181]
[-207.72613525 -69.29325867]
[-215.38896179 -82.20446014]
[-221.66018677 -95.84591675]
[-226.47111511 -110.06817627]
[-229.76902771 -124.71540833]
[-231.51780701 -139.62713623]
[-231.69828796 -154.63996887]
[-230.30847168 -169.58941650]
[-227.36361694 -184.31169128]
[-222.89596558 -198.64549255]
[-216.95446777 -212.43376160]
[-209.60424805 -225.52543640]
[-200.92581177 -237.77706909]
[-191.01425171 -249.05442810]
[-179.97817993 -259.23394775]
[-167.93849182 -268.20410156]
[-155.02709961 -275.86660767]
[-141.38549805 -282.13748169]
[-127.16311646 -286.94808960]
[-112.51580048 -290.24563599]
[-97.60403442 -291.99404907]
[-82.59120178 -292.17416382]
[-67.64178467 -290.78399658]
[-52.91957474 -287.83877563]
[-38.58588409 -283.37078857]
[-24.79775620 -277.42895508]
[-11.70626259 -270.07839966]
[0.54515785 -261.39968872]
[11.82227325 -251.48783875]
[22.00152588 -240.45152283]
[30.97138405 -228.41160583]
[38.63357162 -215.50004578]
[44.90413666 -201.85827637]
[49.71437454 -187.63578796]
[53.01158524 -172.98838806]
[54.75963593 -158.07658386]
[54.93938065 -143.06375122]
[53.54884720 -128.11436462]
[50.60326767 -113.39221954]
[46.13492203 -99.05863953]
[40.19276428 -85.27066040]
[32.84189987 -72.17934418]
[24.16286850 -59.92813110]
[14.25076580 -48.65125656]
[3.21419001 -38.47227478]
[12.17602730 -26.44374657]
[27.77561760 -29.78753662]
[43.33148575 -25.99287605]
[55.72869110 -15.76757050]
[62.46216965 -1.11227798]
[62.14284515 15.07079792]
[54.78385925 29.55259895]
[63.98458099 41.39940262]
[73.18529510 53.24620819]
[82.38601685 65.09300995]
[93.83449554 60.71232605]
[106.28248596 60.05321884]
[118.53064728 63.30659103]
[129.35983276 70.28025055]
[137.65231323 80.40575409]
[142.50660706 92.78317261]
[143.33427429 106.26056671]
[158.33352661 106.11049652]
[173.33277893 105.96041870]
[179.77059937 92.12144470]
[191.58084106 82.45288086]
[206.41853333 78.87441254]
[221.33766174 82.09654999]
[233.37603760 91.47954559]
[240.14340210 105.16038513]
[240.29611206 120.42273712]
[233.80383301 134.23625183]
[221.95561218 143.85824585]
[207.10394287 147.37825012]
[192.19761658 144.09738159]
[180.19628906 134.66705322]
[173.48284912 120.95967102]
[158.48359680 121.10974121]
[143.48434448 121.25981903]
[134.88754272 133.55187988]
[139.89228821 147.69233704]
[144.89703369 161.83279419]
[149.90176392 175.97325134]
[164.70707703 173.35542297]
[179.74131775 173.21032715]
[194.59439087 175.54191589]
[208.86106873 180.28657532]
[222.15214539 187.31489563]
[234.10502625 196.43510437]
[244.39364624 207.39840698]
[252.73731995 219.90573120]
[258.90841675 233.61585999]
[262.73858643 248.15475464]
[264.12335205 263.12579346]
[263.02490234 278.12057495]
[259.47323608 292.73001099]
[253.56524658 306.55554199]
[245.46208191 319.22000122]
[235.38482666 330.37792969]
[223.60839844 339.72485352]
[210.45404053 347.00585938]
[196.28062439 352.02224731]
[181.47482300 354.63723755]
[166.44055176 354.77941895]
[151.58792114 352.44497681]
[137.32217407 347.69757080]
[124.03244781 340.66668701]
[112.08131409 331.54418945]
[101.79480743 320.57888794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[13 127]
[22 102]
[23 101]
[24 100]
[25 99]
[32 93]
[33 92]
[109 126]
[110 125]
[111 124]
] def

init

% Start Annotations
10 130 0.16 1 colorpair
11 129 0.0 1 colorpair
12 128 0.16 0.2 colorpair
13 127 0.0 1 colorpair
22 102 0.0 1 colorpair
23 101 0.16 1 colorpair
24 100 0.0 1 colorpair
32 93 0.16 1 colorpair
33 92 0.16 1 colorpair
110 125 0.0 1 colorpair
111 124 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 cmark
12 128 2 gmark
128 cmark
101 cmark
25 99 6 gmark
25 cmark
99 cmark
93 cmark
33 cmark
109 126 6 gmark
109 cmark
126 cmark
111 cmark
124 cmark

% End Annotations
showpage
end
%%EOF
