%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:54:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____GAUGCCACAAAAAUCUAUGUUGUAUAGUUUGAUAGUGAUAUGUCUCACUAUUCUAUUAUUUACCUGGAUGGUUCGUGAUUCAUUAUGCGAAUUGCAUAUUAAGCAAGGAAAUAAUGAGGUCGCGGCAUCUUUAGCCUGUGAUAUU______\
) } def
/len { sequence length } bind def

/coor [
[114.21456146 255.79959106]
[119.14423370 241.56420898]
[127.11842346 228.78297424]
[137.73713684 218.09696960]
[150.46775818 210.04222107]
[145.46301270 195.90176392]
[140.45826721 181.76130676]
[135.45352173 167.62084961]
[130.44877625 153.48039246]
[125.44403839 139.33993530]
[120.43929291 125.19948578]
[111.19988251 129.72506714]
[101.21792603 131.05963135]
[91.54135895 129.20155334]
[83.14292145 124.47740936]
[76.82242584 117.49453735]
[73.13098907 109.06628418]
[72.32439423 100.11869812]
[57.86837769 96.11574554]
[43.41236115 92.11279297]
[28.95634651 88.10984039]
[14.50033188 84.10689545]
[-0.86417091 87.88083649]
[-11.06507778 77.02768707]
[-25.52109337 73.02473450]
[-36.43028259 80.98130798]
[-49.73634720 81.18096161]
[-60.55752945 73.77536011]
[-65.05335999 61.66527176]
[-79.42638397 57.37387466]
[-93.79941559 53.08247757]
[-108.17243958 48.79108047]
[-122.54546356 44.49968338]
[-136.33010864 51.75374985]
[-150.84526062 47.19691467]
[-157.67596436 34.01066589]
[-172.04899597 29.71926689]
[-186.42201233 25.42786980]
[-200.79504395 21.13647270]
[-215.16807556 16.84507561]
[-229.54109192 12.55367756]
[-243.91412354 8.26227951]
[-258.28713989 3.97088218]
[-272.07168579 11.70148563]
[-287.26232910 7.34034777]
[-294.84677124 -6.52514601]
[-290.32528687 -21.66884422]
[-276.38037109 -29.10625839]
[-261.28530884 -24.42490387]
[-253.99575806 -10.40214443]
[-239.62272644 -6.11074734]
[-225.24969482 -1.81934965]
[-210.87667847 2.47204804]
[-196.50364685 6.76344538]
[-182.13061523 11.05484295]
[-167.75758362 15.34624100]
[-153.38456726 19.63763809]
[-140.44241333 12.35502529]
[-125.80499268 16.50236320]
[-118.25406647 30.12665558]
[-103.88104248 34.41805267]
[-89.50801849 38.70944977]
[-75.13498688 43.00084686]
[-60.76196289 47.29224396]
[-46.35008240 38.67321014]
[-29.83147621 43.20735550]
[-21.51814270 58.56872177]
[-7.06212664 62.57167435]
[7.26838541 58.51141357]
[18.50328255 69.65087891]
[32.95929718 73.65383148]
[47.41531372 77.65677643]
[61.87133026 81.65972900]
[76.32734680 85.66268158]
[83.26733398 76.96493530]
[93.32181549 71.50603485]
[105.02039337 70.36097717]
[116.54181671 73.95233154]
[125.99754333 81.94615936]
[131.74061584 93.26860046]
[144.52630615 85.42472839]
[157.31198120 77.58084869]
[170.09765625 69.73697662]
[182.88334656 61.89309692]
[195.58990479 53.92169571]
[208.21607971 45.82356644]
[220.84225464 37.72543335]
[233.46842957 29.62730217]
[246.09460449 21.52917099]
[258.72076416 13.43103886]
[271.34695435 5.33290768]
[269.97177124 -8.61781883]
[274.73034668 -21.73330498]
[284.63665771 -31.46366882]
[297.70993042 -35.94348907]
[311.37045288 -34.34926224]
[322.94866943 -27.05013084]
[335.73437500 -34.89400864]
[348.52005005 -42.73788071]
[361.30572510 -50.58175659]
[363.43026733 -66.07434845]
[375.05084229 -76.53837585]
[390.68060303 -77.03305054]
[402.93963623 -67.32480621]
[406.03961182 -51.99756622]
[398.51678467 -38.28839493]
[383.92324829 -32.67034149]
[369.14959717 -37.79607773]
[356.36392212 -29.95220184]
[343.57824707 -22.10832596]
[330.79257202 -14.26445103]
[331.62640381 1.84721053]
[324.19281006 16.27131653]
[310.42935181 25.04230118]
[294.02804565 25.69551849]
[279.44506836 17.95908165]
[266.81890869 26.05721283]
[254.19273376 34.15534592]
[241.56655884 42.25347519]
[228.94038391 50.35160828]
[216.31420898 58.44973755]
[203.68803406 66.54786682]
[199.73344421 72.84145355]
[190.72721863 74.67877960]
[177.94152832 82.52265167]
[165.15585327 90.36653137]
[152.37017822 98.21040344]
[139.58448792 106.05428314]
[134.57974243 120.19474030]
[139.58448792 134.33518982]
[144.58923340 148.47564697]
[149.59397888 162.61610413]
[154.59872437 176.75656128]
[159.60346985 190.89701843]
[164.60821533 205.03747559]
[179.57136536 203.29054260]
[194.54803467 204.91754150]
[208.78700256 209.83686829]
[221.57403564 217.80175781]
[232.26774597 228.41270447]
[240.33175659 241.13746643]
[245.36155701 255.33778381]
[247.10485840 270.30136108]
[245.47422791 285.27761841]
[240.55146790 299.51541138]
[232.58346558 312.30050659]
[221.96994019 322.99163818]
[209.24320984 331.05255127]
[195.04168701 336.07891846]
[180.07768250 337.81860352]
[165.10180664 336.18435669]
[150.86523438 331.25811768]
[138.08206177 323.28704834]
[127.39349365 312.67089844]
[119.33565521 299.94223022]
[114.31273651 285.73950195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 135]
[6 134]
[7 133]
[8 132]
[9 131]
[10 130]
[11 129]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[24 68]
[25 67]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[80 128]
[81 127]
[82 126]
[83 125]
[84 124]
[85 122]
[86 121]
[87 120]
[88 119]
[89 118]
[90 117]
[91 116]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% Start Annotations
5 135 0.0 0.6 colorpair
6 134 0.0 1 colorpair
7 133 0.0 1 colorpair
8 132 0.0 1 colorpair
9 131 0.0 1 colorpair
10 130 0.0 1 colorpair
11 129 0.0 1 colorpair
18 74 0.0 1 colorpair
19 73 0.0 1 colorpair
20 72 0.0 1 colorpair
21 71 0.0 1 colorpair
22 70 0.0 1 colorpair
24 68 0.0 1 colorpair
25 67 0.0 1 colorpair
29 64 0.0 1 colorpair
30 63 0.0 1 colorpair
31 62 0.0 1 colorpair
32 61 0.0 1 colorpair
33 60 0.0 1 colorpair
36 57 0.0 1 colorpair
37 56 0.0 1 colorpair
38 55 0.0 1 colorpair
39 54 0.0 1 colorpair
40 53 0.0 1 colorpair
41 52 0.0 1 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
80 128 0.0 1 colorpair
81 127 0.0 1 colorpair
82 126 0.0 1 colorpair
83 125 0.0 1 colorpair
84 124 0.0 1 colorpair
85 122 0.0 1 colorpair
86 121 0.0 1 colorpair
87 120 0.0 1 colorpair
88 119 0.0 1 colorpair
89 118 0.0 1 colorpair
90 117 0.0 1 colorpair
91 116 0.0 1 colorpair
97 111 0.0 1 colorpair
98 110 0.0 1 colorpair
99 109 0.0 1 colorpair
100 108 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 135 1 gmark

% End Annotations
showpage
end
%%EOF
