%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:10:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUGCAGCGAAAUGCUCUUAUCUGGUGCGUAUUAAUCGUAUGUAUAACGCUAUUAAUGUUCACAAUCCUUACACGGAAAUCGCUGUGCGAACUACGCUUGAAGGACGGGAAUAGGGAGAUUGCUGCGUUUCUGGCUUACGAAUCCGGUAAG\
) } def
/len { sequence length } bind def

/coor [
[135.78382874 224.13751221]
[128.86842346 237.44830322]
[119.88234711 249.45872498]
[109.06436157 259.84963989]
[96.70192719 268.34494019]
[83.12354279 274.71890259]
[68.69000244 278.80215454]
[53.78483582 280.48620605]
[38.80409622 279.72628784]
[24.14585304 276.54260254]
[10.19960022 271.01971436]
[-2.66408587 263.30444336]
[-14.10339260 253.60174561]
[-23.81435776 242.16946411]
[-31.53894424 229.31135559]
[-37.07189178 215.36911011]
[-40.26618576 200.71316528]
[-41.03694534 185.73298645]
[-39.36368942 170.82659912]
[-35.29088211 156.39012146]
[-28.92674065 142.80712891]
[-20.44037437 130.43855286]
[-10.05728245 119.61305237]
[1.94663870 110.61827850]
[15.25242424 103.69325256]
[29.50651360 99.02196503]
[44.33015060 96.72854614]
[59.32944870 96.87393951]
[74.10584259 99.45428467]
[88.27037048 104.40264130]
[74.39785767 98.69706726]
[60.52535248 92.99150085]
[44.81943893 94.89802551]
[35.99187469 82.90122223]
[22.11936760 77.19564819]
[8.24685955 71.49008179]
[-5.62564754 65.78450775]
[-19.49815559 60.07893753]
[-33.37066269 54.37336731]
[-47.24317169 48.66779709]
[-61.11567688 42.96222687]
[-70.96130371 47.74862671]
[-81.59338379 46.32376099]
[-89.49958801 39.40380096]
[-92.20403290 29.47910500]
[-105.83715820 23.22306824]
[-119.47027588 16.96703339]
[-133.10339355 10.71099758]
[-150.02093506 9.60035229]
[-153.63693237 -6.96349144]
[-138.72140503 -15.02350140]
[-126.84736633 -2.92212439]
[-113.21424103 3.33391142]
[-99.58111572 9.58994675]
[-85.94799805 15.84598255]
[-66.92166138 12.58624077]
[-55.41010666 29.08971786]
[-41.53760147 34.79528809]
[-27.66509247 40.50085831]
[-13.79258442 46.20642853]
[0.07992296 51.91199875]
[13.95243073 57.61757278]
[27.82493782 63.32314301]
[41.69744492 69.02870941]
[56.41110611 66.71408844]
[66.23092651 79.11899567]
[80.10343170 84.82456207]
[93.97593689 90.53013611]
[94.08928680 85.48168182]
[95.86930084 80.30116272]
[99.34221649 75.42966461]
[106.27214050 62.12643051]
[113.20207214 48.82319260]
[120.13199615 35.51995468]
[111.11554718 21.69177437]
[110.29124451 5.29815769]
[117.78902435 -9.19825840]
[131.48623657 -17.89880562]
[147.60760498 -18.51716805]
[154.26995850 -31.95640182]
[160.93232727 -45.39563370]
[167.59468079 -58.83486938]
[162.77857971 -73.64847565]
[169.72659302 -87.18286133]
[183.87878418 -91.68299103]
[190.54113770 -105.12222290]
[197.20350647 -118.56145477]
[203.86585999 -132.00068665]
[205.48371887 -148.87727356]
[222.14862061 -151.99453735]
[229.75737000 -136.84385681]
[217.30509949 -125.33833313]
[210.64273071 -111.89909363]
[203.98037720 -98.45986176]
[197.31802368 -85.02062988]
[202.30487061 -71.03253174]
[195.73973083 -57.30832672]
[181.03392029 -52.17251205]
[174.37155151 -38.73327637]
[167.70919800 -25.29404449]
[161.04684448 -11.85481071]
[169.35755920 -0.97985363]
[172.17373657 12.48196507]
[168.88766479 25.90510178]
[160.08753967 36.64627457]
[147.45309448 42.56497192]
[133.43522644 42.44988251]
[126.50531006 55.75312042]
[119.57537842 69.05635834]
[112.64545441 82.35959625]
[119.68106842 69.11194611]
[132.56665039 61.43329620]
[147.56620789 61.54996109]
[160.33079529 69.42811584]
[167.15950012 82.78359222]
[166.07243347 97.74414825]
[157.38476562 109.97216797]
[143.61538696 115.92230225]
[128.75653076 113.86939240]
[117.11775208 104.41063690]
[128.68310547 113.96274567]
[140.24844360 123.51484680]
[153.17573547 123.07617950]
[162.61878967 131.31684875]
[163.85134888 143.38565063]
[175.22325134 153.16725159]
[186.59515381 162.94886780]
[203.98426819 161.30508423]
[216.94552612 172.50456238]
[217.80685425 189.27500916]
[229.37219238 198.82711792]
[244.71678162 195.81417847]
[258.38302612 203.41467285]
[263.91818237 218.03985596]
[258.70867920 232.78419495]
[245.21432495 240.68583679]
[229.80670166 238.01388550]
[219.76084900 226.02993774]
[219.82009888 210.39247131]
[208.25474548 200.84036255]
[195.69157410 203.84593201]
[183.51602173 198.97801208]
[176.27560425 187.81254578]
[176.81355286 174.32077026]
[165.44165039 164.53916931]
[154.06974792 154.75756836]
[136.69555664 152.46231079]
[130.69633484 135.08020020]
[119.13098907 125.52809143]
[107.56564331 115.97598267]
[118.59774017 126.13929749]
[127.83206940 137.95991516]
[135.02325439 151.12376404]
[139.98022461 165.28103638]
[142.57125854 180.05555725]
[142.72750854 195.05474854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[45 55]
[46 54]
[47 53]
[48 52]
[71 110]
[72 109]
[73 108]
[74 107]
[79 101]
[80 100]
[81 99]
[82 98]
[85 95]
[86 94]
[87 93]
[88 92]
[120 150]
[121 149]
[122 148]
[125 146]
[126 145]
[127 144]
[130 140]
[131 139]
] def

init

% Start Annotations
30 68 0.0 1 colorpair
31 67 0.0 1 colorpair
32 66 0.0 1 colorpair
34 64 0.16 1 colorpair
35 63 0.16 1 colorpair
36 62 0.0 0.2 colorpair
37 61 0.0 0.2 colorpair
38 60 0.16 1 colorpair
39 59 0.0 0.2 colorpair
40 58 0.0 1 colorpair
41 57 0.32 1 colorpair
45 55 0.16 0.2 colorpair
46 54 0.16 1 colorpair
47 53 0.0 1 colorpair
48 52 0.0 0.2 colorpair
71 110 0.16 1 colorpair
72 109 0.16 1 colorpair
73 108 0.0 1 colorpair
74 107 0.16 1 colorpair
79 101 0.0 1 colorpair
80 100 0.0 0.6 colorpair
81 99 0.32 0.2 colorpair
82 98 0.16 0.6 colorpair
85 95 0.0 0.2 colorpair
86 94 0.0 1 colorpair
87 93 0.16 1 colorpair
88 92 0.0 1 colorpair
120 150 0.0 1 colorpair
121 149 0.0 1 colorpair
122 148 0.0 0.2 colorpair
125 146 0.0 0.6 colorpair
126 145 0.32 1 colorpair
127 144 0.16 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
34 cmark
63 cmark
36 62 2 gmark
37 61 2 gmark
60 cmark
39 59 2 gmark
41 cmark
57 cmark
45 55 2 gmark
45 cmark
55 cmark
54 cmark
48 52 2 gmark
71 cmark
110 cmark
72 cmark
107 cmark
80 100 1 gmark
81 99 2 gmark
81 cmark
99 cmark
82 98 1 gmark
82 cmark
85 95 2 gmark
93 cmark
122 148 2 gmark
125 146 1 gmark
126 cmark
145 cmark
144 cmark

% End Annotations
showpage
end
%%EOF
