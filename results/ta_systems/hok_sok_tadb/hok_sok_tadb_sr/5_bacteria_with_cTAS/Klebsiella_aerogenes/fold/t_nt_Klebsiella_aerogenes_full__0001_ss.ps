%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:39:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCCAUACUGUUGUUGAUGAGACAUACAGGGGGCCUCGUGGGUUAAUGAAAAUUAACUACGGGGCUUUCUGCUUUCUGCCGCACAACACGGUAACAAACCACCUUUACGUCAUGAGGCAAAAAGCCUCAAGCGCC_\
) } def
/len { sequence length } bind def

/coor [
[195.89955139 206.50614929]
[185.29295349 195.89955139]
[174.68635559 185.29295349]
[160.64280701 190.31733704]
[145.74919128 188.73957825]
[132.96517944 180.81932068]
[124.85465240 168.08200073]
[123.07145691 153.02520752]
[128.02246094 138.62905884]
[117.41585541 128.02246094]
[106.80924988 117.41585541]
[98.06570435 118.59936523]
[89.75279999 115.64202118]
[83.72127533 109.20222473]
[81.31394958 100.71369934]
[83.06678009 92.06627655]
[73.17658997 80.78868103]
[63.28640747 69.51107788]
[53.39621735 58.23348236]
[43.50603104 46.95588684]
[33.61584473 35.67829132]
[18.92671394 39.67713928]
[4.01878023 36.91299057]
[-8.16082191 27.98676682]
[-15.22799969 14.71213055]
[-15.82829952 -0.25279787]
[-9.89617157 -13.93765640]
[-19.78635979 -25.21525383]
[-29.67654610 -36.49285126]
[-43.31398010 -34.21425629]
[-56.18759537 -38.95272064]
[-64.95368958 -49.36299133]
[-67.39232635 -62.64191818]
[-62.96876144 -75.28276825]
[-72.61058044 -86.77343750]
[-82.25238800 -98.26410675]
[-91.89420319 -109.75476837]
[-101.53601837 -121.24543762]
[-111.17783356 -132.73609924]
[-120.81964874 -144.22677612]
[-130.46145630 -155.71743774]
[-140.10327148 -167.20809937]
[-149.74508667 -178.69877625]
[-159.38690186 -190.18943787]
[-169.02871704 -201.68009949]
[-178.67053223 -213.17077637]
[-188.31234741 -224.66143799]
[-197.95416260 -236.15209961]
[-205.93077087 -240.76014709]
[-207.67765808 -248.00022888]
[-217.06651306 -259.69848633]
[-226.45536804 -271.39675903]
[-235.84422302 -283.09503174]
[-245.23306274 -294.79330444]
[-260.70498657 -300.22943115]
[-263.46676636 -316.39434814]
[-250.67733765 -326.65896606]
[-235.49334717 -320.46392822]
[-233.53480530 -304.18212891]
[-224.14595032 -292.48388672]
[-214.75709534 -280.78561401]
[-205.36824036 -269.08734131]
[-195.97940063 -257.38906860]
[-186.46350098 -245.79391479]
[-176.82168579 -234.30325317]
[-167.17987061 -222.81257629]
[-157.53805542 -211.32191467]
[-147.89624023 -199.83125305]
[-138.25442505 -188.34057617]
[-128.61260986 -176.84991455]
[-118.97079468 -165.35925293]
[-109.32897949 -153.86859131]
[-99.68716431 -142.37791443]
[-90.04535675 -130.88725281]
[-80.40354156 -119.39658356]
[-70.76172638 -107.90591431]
[-61.11991119 -96.41525269]
[-51.47809601 -84.92458344]
[-35.18359756 -86.60626984]
[-20.94099998 -78.18346405]
[-14.43529797 -62.78921890]
[-18.39894867 -46.38303757]
[-8.50876236 -35.10544205]
[1.38142526 -23.82784271]
[15.72350597 -27.92298889]
[30.48205185 -25.37450981]
[42.72067261 -16.63510323]
[49.98077393 -3.39459419]
[50.77539444 11.74659348]
[44.89344025 25.78810310]
[54.78363037 37.06570053]
[64.67381287 48.34329605]
[74.56400299 59.62089539]
[84.45419312 70.89849091]
[94.34437561 82.17608643]
[113.64822388 87.21704865]
[117.41585541 106.80924988]
[128.02246094 117.41585541]
[138.62905884 128.02246094]
[153.02520752 123.07145691]
[168.08200073 124.85465240]
[180.81932068 132.96517944]
[188.73957825 145.74919128]
[190.31733704 160.64280701]
[185.29295349 174.68635559]
[195.89955139 185.29295349]
[206.50614929 195.89955139]
[217.74038696 191.28782654]
[229.83845520 190.76904297]
[241.35984802 194.38133240]
[250.94075012 201.67230225]
[257.45550537 211.75564575]
[260.14877319 223.41874695]
[258.72314453 235.26852417]
[253.37173462 245.89787292]
[263.26193237 257.17547607]
[273.15209961 268.45306396]
[285.99578857 270.09020996]
[294.00027466 279.75067139]
[293.26913452 291.87258911]
[302.91094971 303.36325073]
[312.55276489 314.85391235]
[322.19454956 326.34457397]
[331.83636475 337.83526611]
[341.47817993 349.32592773]
[357.27056885 352.15093994]
[364.78121948 366.32730103]
[358.24865723 380.98013306]
[342.68408203 384.86901855]
[330.02731323 375.01074219]
[329.98751831 358.96774292]
[320.34570312 347.47708130]
[310.70388794 335.98638916]
[301.06207275 324.49572754]
[291.42025757 313.00506592]
[281.77844238 301.51440430]
[265.00891113 296.45309448]
[261.87451172 278.34326172]
[251.98432922 267.06567383]
[242.09413147 255.78805542]
[224.59477234 260.16128540]
[207.19688416 255.09031677]
[194.67172241 241.87730408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[3 105]
[9 99]
[10 98]
[11 97]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[27 84]
[28 83]
[29 82]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[115 140]
[116 139]
[117 138]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% Start Annotations
1 107 0.0 1 colorpair
2 106 0.0 1 colorpair
3 105 0.0 1 colorpair
9 99 0.0 1 colorpair
10 98 0.0 1 colorpair
11 97 0.0 1 colorpair
16 95 0.0 1 colorpair
17 94 0.0 1 colorpair
18 93 0.0 1 colorpair
19 92 0.0 1 colorpair
20 91 0.0 1 colorpair
21 90 0.0 1 colorpair
27 84 0.0 1 colorpair
28 83 0.0 1 colorpair
29 82 0.0 1 colorpair
34 78 0.0 1 colorpair
35 77 0.0 1 colorpair
36 76 0.0 1 colorpair
37 75 0.0 1 colorpair
38 74 0.0 1 colorpair
39 73 0.0 1 colorpair
40 72 0.0 1 colorpair
41 71 0.0 1 colorpair
42 70 0.0 1 colorpair
43 69 0.0 1 colorpair
44 68 0.0 1 colorpair
45 67 0.0 1 colorpair
46 66 0.0 1 colorpair
47 65 0.0 1 colorpair
48 64 0.0 1 colorpair
50 63 0.0 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair
115 140 0.0 1 colorpair
116 139 0.0 1 colorpair
117 138 0.0 1 colorpair
120 136 0.0 1 colorpair
121 135 0.0 1 colorpair
122 134 0.0 1 colorpair
123 133 0.0 1 colorpair
124 132 0.0 1 colorpair
125 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
