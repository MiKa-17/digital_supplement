%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AUGCCGAACAAACGGAGCCUGUUAAAACUGGUGGUUAUUUGUGCCACGGUAAUAUCACUGGCAUGGAUAACCCGCAGCACGCUGUGUGAGCUGCGCAUCCGAUCGGGCAACACGGAGGUU_GCGGCCAUUUUGGCUUACGAAUCCGAACGG\
) } def
/len { sequence length } bind def

/coor [
[79.60821533 355.42373657]
[67.48425293 354.16497803]
[55.43387222 352.33105469]
[43.48433685 349.92614746]
[31.66269302 346.95568848]
[19.99568939 343.42639160]
[8.50972557 339.34625244]
[-2.76920462 334.72451782]
[-13.81557941 329.57159424]
[-24.60440254 323.89920044]
[-35.11125946 317.72012329]
[-45.31237411 311.04837036]
[-55.18466187 303.89904785]
[-64.70578003 296.28833008]
[-73.85419464 288.23342896]
[-82.60919189 279.75256348]
[-90.95096588 270.86495972]
[-98.86063385 261.59069824]
[-106.32030487 251.95075989]
[-113.31310272 241.96699524]
[-119.82318878 231.66195679]
[-125.83583832 221.05899048]
[-131.33744812 210.18208313]
[-136.31556702 199.05583191]
[-140.75892639 187.70544434]
[-144.65747070 176.15658569]
[-148.00239563 164.43537903]
[-150.78610229 152.56837463]
[-153.00231934 140.58241272]
[-154.64601135 128.50462341]
[-155.71347046 116.36231995]
[-156.20227051 104.18299103]
[-156.11132812 91.99420166]
[-155.44082642 79.82353210]
[-154.19229126 67.69850922]
[-152.36854553 55.64658737]
[-149.97370911 43.69503403]
[-147.01321411 31.87088776]
[-143.49375916 20.20091438]
[-139.42329407 8.71151543]
[-134.81105042 -2.57130718]
[-129.66744995 -13.62202168]
[-124.00414276 -24.41562271]
[-117.83393860 -34.92768478]
[-111.17079163 -45.13441849]
[-104.02979279 -55.01272964]
[-115.70291138 -64.43283081]
[-127.37602997 -73.85293579]
[-139.04914856 -83.27304077]
[-152.81669617 -76.68386078]
[-168.07974243 -76.72930908]
[-181.80780029 -83.40038300]
[-191.27516174 -95.37251282]
[-194.60205078 -110.26863861]
[-191.12794495 -125.13111877]
[-181.54260254 -137.00898743]
[-167.74920654 -143.54389954]
[-152.48645020 -143.43833923]
[-138.78477478 -136.71327209]
[-129.36463928 -124.70394897]
[-126.09642792 -109.79483795]
[-129.62904358 -94.94615936]
[-117.95592499 -85.52605438]
[-106.28280640 -76.10594940]
[-94.60969543 -66.68584442]
[-76.71298981 -85.55220795]
[-56.99624252 -102.50749207]
[-35.66252136 -117.37705994]
[-12.93155003 -130.00775146]
[10.96255302 -140.26951599]
[35.77369308 -148.05661011]
[61.24632645 -153.28887939]
[87.11810303 -155.91241455]
[113.12255096 -155.90017700]
[138.99185181 -153.25231934]
[164.45954895 -147.99610901]
[189.26335144 -140.18566895]
[194.89811707 -154.08709717]
[200.53286743 -167.98851013]
[206.16761780 -181.88993835]
[211.80238342 -195.79136658]
[205.88789368 -210.20166016]
[211.80036926 -224.21940613]
[225.57482910 -229.76916504]
[231.20957947 -243.67057800]
[231.55604553 -260.62100220]
[247.93994141 -264.98040771]
[256.66448975 -250.44361877]
[245.11100769 -238.03582764]
[239.47625732 -224.13439941]
[245.49902344 -210.56010437]
[239.98262024 -196.38180542]
[225.70379639 -190.15660095]
[220.06904602 -176.25518799]
[214.43429565 -162.35375977]
[208.79953003 -148.45233154]
[203.16477966 -134.55091858]
[214.20245361 -129.37939453]
[224.98168945 -123.68880463]
[235.47811890 -117.49202728]
[245.66796875 -110.80310059]
[255.52819824 -103.63713837]
[265.03646851 -96.01037598]
[274.17129517 -87.94005585]
[282.91198730 -79.44445801]
[291.23876953 -70.54278564]
[299.13278198 -61.25520325]
[306.57620239 -51.60271072]
[313.55212402 -41.60716248]
[320.04483032 -31.29117012]
[326.03961182 -20.67808151]
[331.52288818 -9.79190922]
[336.48223877 1.34270847]
[340.90643311 12.70057774]
[344.78552246 24.25599480]
[348.11065674 35.98281479]
[350.87435913 47.85449600]
[353.07037354 59.84417725]
[354.69369507 71.92472839]
[355.74069214 84.06880951]
[356.20895386 96.24893951]
[356.09747314 108.43756104]
[355.40643311 120.60708618]
[354.13748169 132.72998047]
[352.29339600 144.77880859]
[349.87841797 156.72631836]
[346.89801025 168.54545593]
[343.35888672 180.20947266]
[339.26904297 191.69200134]
[334.63778687 202.96702576]
[329.47558594 214.00906372]
[323.79406738 224.79309082]
[317.60614014 235.29473877]
[310.92581177 245.49021912]
[303.76815796 255.35647583]
[296.14941406 264.87118530]
[288.08682251 274.01281738]
[279.59857178 282.76065063]
[270.70391846 291.09494019]
[261.42300415 298.99676514]
[251.77679443 306.44833374]
[241.78712463 313.43270874]
[231.47660828 319.93408203]
[220.86857605 325.93780518]
[209.98703003 331.43023682]
[198.85659790 336.39898682]
[187.50245667 340.83276367]
[175.95031738 344.72158813]
[164.22630310 348.05661011]
[152.35696411 350.83032227]
[140.36912537 353.03643799]
[128.28996277 354.66995239]
[116.14675903 355.72717285]
[103.96702576 356.20571899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[46 65]
[47 64]
[48 63]
[49 62]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[84 90]
[85 89]
] def

init

% Start Annotations
47 64 0.32 1 colorpair
49 62 0.0 1 colorpair
77 97 0.0 0.2 colorpair
78 96 0.48 1 colorpair
79 95 0.16 1 colorpair
84 90 0.32 0.6 colorpair
85 89 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
46 65 3 gmark
46 cmark
65 cmark
47 cmark
64 cmark
48 63 4 gmark
48 cmark
63 cmark
77 97 2 gmark
78 cmark
96 cmark
79 cmark
80 94 3 gmark
80 cmark
94 cmark
81 93 3 gmark
81 cmark
93 cmark
84 90 1 gmark
84 cmark
90 cmark
85 89 2 gmark

% End Annotations
showpage
end
%%EOF
