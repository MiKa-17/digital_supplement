%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:39:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AGAUGCCGCAAAAAACGGUGAUUUACUGUUUAUUGAUCGUCUGUUUAACGCUAUUGGCGUUUAUCAGGAUCACACAUGGAUAGCUGUGUGAGAUACAAAUUAAAAACGGUAAAAAAGAGGUUGCCGCGGUUUUAGCCUACGCAUCUAAACGG\
) } def
/len { sequence length } bind def

/coor [
[320.83480835 322.59542847]
[318.41320801 307.78240967]
[317.29190063 292.81469727]
[317.47937012 277.80624390]
[318.97421265 262.87121582]
[321.76507568 248.12332153]
[325.83065796 233.67477417]
[331.14007568 219.63557434]
[317.62554932 213.12730408]
[304.11102295 206.61904907]
[290.59646606 200.11079407]
[277.08193970 193.60253906]
[263.56741333 187.09428406]
[254.42558289 198.95693970]
[243.01254272 208.66331482]
[229.82559204 215.78726196]
[215.43998718 220.01525879]
[200.48385620 221.16015625]
[185.61073303 219.16949463]
[171.47106934 214.12788391]
[158.68373108 206.25338745]
[147.80894470 195.88813782]
[139.32371521 183.48345947]
[133.60096741 169.58018494]
[130.89308167 154.78511047]
[131.32081604 139.74450684]
[134.86791992 125.11587524]
[124.18296814 135.52130127]
[110.58490753 141.64778137]
[95.71178436 142.75733948]
[81.35521698 138.71627808]
[69.24462891 130.01142883]
[60.83886337 117.69135284]
[57.15049744 103.24016571]
[58.62382889 88.39865875]
[45.10929871 81.89040375]
[31.59476471 75.38214874]
[15.80414963 76.36553955]
[7.69436264 63.87231827]
[-5.82017040 57.36406326]
[-19.33470345 50.85580826]
[-30.16871643 61.45769119]
[-43.97669983 67.71192932]
[-59.09126663 68.86328125]
[-73.68726349 64.77272797]
[-86.00215149 55.93421555]
[-94.54885101 43.41504288]
[-98.29530334 28.72695351]
[-96.78910828 13.64361286]
[-90.21214294 -0.01359504]
[-79.35861206 -10.59549618]
[-65.53913116 -16.82427406]
[-50.42246246 -17.94777489]
[-35.83403015 -13.83032703]
[-23.53544807 -4.96913576]
[-15.01183414 7.56576872]
[-11.29245663 22.26073456]
[-12.82644749 37.34127426]
[0.68808556 43.84952927]
[14.20261860 50.35778809]
[29.02658272 48.90887451]
[38.10301971 61.86761475]
[51.61755371 68.37586975]
[65.13208771 74.88412476]
[75.81703186 64.47869873]
[89.41509247 58.35221100]
[104.28821564 57.24266434]
[118.64478302 61.28371429]
[130.75537109 69.98857117]
[139.16113281 82.30864716]
[142.84950256 96.75983429]
[141.37617493 111.60134125]
[150.60171509 99.70730591]
[162.09425354 89.99522400]
[175.34983826 82.88775635]
[189.78793335 78.69343567]
[204.77674866 77.59325409]
[219.66094971 79.63288116]
[233.79025269 84.72075653]
[246.54788208 92.63219452]
[257.37747192 103.01931763]
[265.80737305 115.42633820]
[271.47106934 129.30957031]
[274.12326050 144.06124878]
[273.65042114 159.03613281]
[270.07568359 173.57975769]
[283.59020996 180.08801270]
[297.10473633 186.59626770]
[310.61926270 193.10452271]
[324.13378906 199.61277771]
[337.64834595 206.12103271]
[345.31427002 193.21665955]
[354.07571411 181.02952576]
[363.86602783 169.65238953]
[374.61068726 159.17184448]
[386.22787476 149.66763306]
[398.62924194 141.21211243]
[411.72033691 133.86962891]
[425.40158081 127.69605255]
[439.56884766 122.73838806]
[454.11425781 119.03435516]
[468.92718506 116.61214447]
[483.89483643 115.49018860]
[498.90332031 115.67703247]
[513.83837891 117.17125702]
[528.58642578 119.96147919]
[543.03509521 124.02647400]
[557.07452393 129.33529663]
[570.59783936 135.84754944]
[583.50213623 143.51365662]
[595.68914795 152.27529907]
[607.06616211 162.06576538]
[617.54650879 172.81054688]
[627.05059814 184.42788696]
[635.50592041 196.82936096]
[642.84820557 209.92057800]
[649.02160645 223.60191345]
[653.97906494 237.76922607]
[657.68292236 252.31469727]
[660.10491943 267.12765503]
[661.22668457 282.09530640]
[661.03961182 297.10379028]
[659.54516602 312.03884888]
[656.75476074 326.78683472]
[652.68951416 341.23547363]
[647.38049316 355.27484131]
[640.86810303 368.79806519]
[633.20178223 381.70220947]
[624.44000244 393.88909912]
[614.64935303 405.26596069]
[603.90441895 415.74621582]
[592.28692627 425.25009155]
[579.88537598 433.70526123]
[566.79406738 441.04739380]
[553.11260986 447.22058105]
[538.94525146 452.17785645]
[524.39971924 455.88146973]
[509.58673096 458.30328369]
[494.61904907 459.42480469]
[479.61056519 459.23754883]
[464.67553711 457.74288940]
[449.92758179 454.95227051]
[435.47900391 450.88687134]
[421.43969727 445.57763672]
[407.91659546 439.06500244]
[395.01254272 431.39852905]
[382.82577515 422.63656616]
[371.44903564 412.84576416]
[360.96893311 402.10067749]
[351.46524048 390.48309326]
[343.01022339 378.08139038]
[335.66830444 364.98995972]
[329.49530029 351.30844116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[27 72]
[35 64]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
] def

init

% Start Annotations
8 91 0.0 1 colorpair
9 90 0.16 1 colorpair
10 89 0.0 1 colorpair
11 88 0.16 1 colorpair
13 86 0.0 1 colorpair
35 64 0.0 1 colorpair
36 63 0.32 1 colorpair
37 62 0.16 1 colorpair
40 59 0.16 1 colorpair
41 58 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 cmark
11 cmark
12 87 3 gmark
12 cmark
87 cmark
27 72 4 gmark
27 cmark
72 cmark
36 cmark
63 cmark
37 cmark
39 60 4 gmark
39 cmark
60 cmark
40 cmark
59 cmark
58 cmark

% End Annotations
showpage
end
%%EOF
