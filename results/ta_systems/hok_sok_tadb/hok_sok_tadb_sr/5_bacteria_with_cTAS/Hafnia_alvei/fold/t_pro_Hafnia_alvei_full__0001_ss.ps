%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:39:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GAUGCCGCAAAAAACGGUGAUUUACUGUCUAUUGAUCGUCUGUAUAACGCUACUGGCGUUUAUCAGAAUCACACAUGGAUACCUGUGUGAGAUACAAAUAAAAAACGGUAAUAAAGAGGUUGCCGCCGUUUUAGCCUACGCAUCUAAA___\
) } def
/len { sequence length } bind def

/coor [
[153.14811707 361.10675049]
[156.56343079 346.46069336]
[162.47030640 332.63031006]
[170.68922424 320.03582764]
[180.97041321 309.06002808]
[193.00144958 300.03643799]
[186.21887207 286.65747070]
[173.56282043 278.80422974]
[174.22390747 262.99682617]
[167.44132996 249.61787415]
[152.80592346 255.38781738]
[137.68530273 259.72994995]
[122.21839905 262.60437012]
[106.54733276 263.98468018]
[90.81610870 263.85815430]
[75.16927338 262.22601318]
[59.75059891 259.10317993]
[44.70176697 254.51843262]
[30.16105461 248.51383972]
[16.26207161 241.14460754]
[3.13253284 232.47842407]
[-9.10691833 222.59494019]
[-20.34381676 211.58497620]
[-30.47491074 199.54968262]
[-39.40710831 186.59965515]
[-47.05833054 172.85388184]
[-53.35828018 158.43867493]
[-58.24906158 143.48649597]
[-61.68573761 128.13473511]
[-63.63673019 112.52444458]
[-64.08410645 96.79907990]
[-63.02376556 81.10311890]
[-60.46544647 65.58080292]
[-56.43265533 50.37474823]
[-50.96244431 35.62469101]
[-64.47698212 29.11643410]
[-77.99150848 22.60817719]
[-93.78212738 23.59157372]
[-101.89191437 11.09835052]
[-115.40644836 4.59009457]
[-128.92097473 -1.91816151]
[-139.75498962 8.68372345]
[-153.56297302 14.93795872]
[-168.67753601 16.08931351]
[-183.27354431 11.99875927]
[-195.58842468 3.16024733]
[-204.13513184 -9.35892773]
[-207.88157654 -24.04701424]
[-206.37538147 -39.13035583]
[-199.79841614 -52.78756332]
[-188.94488525 -63.36946487]
[-175.12541199 -69.59824371]
[-160.00874329 -70.72174072]
[-145.42030334 -66.60429382]
[-133.12171936 -57.74310303]
[-124.59811401 -45.20820236]
[-120.87873077 -30.51323509]
[-122.41271973 -15.43269444]
[-108.89819336 -8.92443848]
[-95.38365936 -2.41618228]
[-80.55969238 -3.86509275]
[-71.48325348 9.09364414]
[-57.96872330 15.60190010]
[-44.45418930 22.11015701]
[-35.21860886 6.99586630]
[-24.40793610 -7.03506899]
[-12.14810467 -19.81921005]
[1.41807938 -31.20764351]
[16.13259125 -41.06770706]
[31.82402992 -49.28455353]
[48.30961227 -55.76246262]
[65.39730835 -60.42597961]
[82.88806915 -63.22077942]
[100.57816315 -64.11431122]
[118.26152039 -63.09616089]
[135.73216248 -60.17819214]
[139.66368103 -74.65379333]
[143.59521484 -89.12940216]
[147.52673340 -103.60500336]
[137.69799805 -115.61231995]
[136.83773804 -131.10552979]
[145.27670288 -144.12718201]
[159.76997375 -149.67018127]
[174.74458313 -145.60311890]
[184.44247437 -133.48988342]
[185.13462830 -117.98825836]
[176.55488586 -105.05892181]
[162.00233459 -99.67347717]
[158.07081604 -85.19787598]
[154.13929749 -70.72227478]
[150.20776367 -56.24666595]
[162.10728455 -51.90959549]
[173.63693237 -46.66780090]
[184.72801208 -40.55250168]
[195.31446838 -33.60012054]
[205.33328247 -25.85206032]
[214.72476196 -17.35446739]
[223.43296814 -8.15795231]
[231.40606689 1.68271637]
[238.59654236 12.10892963]
[244.96157837 23.05859184]
[250.46328735 34.46649170]
[255.06887817 46.26468658]
[258.75094604 58.38291168]
[261.48751831 70.74899292]
[263.26232910 83.28928375]
[264.06481934 95.92910004]
[263.89019775 108.59316254]
[262.73950195 121.20604706]
[260.61956787 133.69262695]
[257.54306030 145.97854614]
[253.52825928 157.99064636]
[248.59910583 169.65736389]
[242.78494263 180.90922546]
[236.12039185 191.67921448]
[228.64515686 201.90319824]
[220.40376282 211.52027893]
[211.44528198 220.47319031]
[201.82307434 228.70860291]
[191.59443665 236.17745972]
[180.82029724 242.83529663]
[187.60287476 256.21426392]
[200.74404907 265.02447510]
[199.59783936 279.87490845]
[206.38041687 293.25387573]
[220.77027893 288.88314819]
[235.70050049 287.07781982]
[250.71739197 287.89266968]
[265.36459351 291.30300903]
[279.19702148 297.20520020]
[291.79428101 305.41979980]
[302.77359009 315.69726562]
[311.80126953 327.72525024]
[318.60299683 341.13821411]
[322.97207642 355.52856445]
[324.77572632 370.45898438]
[323.95913696 385.47579956]
[320.54714966 400.12261963]
[314.64340210 413.95437622]
[306.42733765 426.55068970]
[296.14865112 437.52880859]
[284.11965942 446.55514526]
[270.70593262 453.35534668]
[256.31506348 457.72280884]
[241.38442993 459.52474976]
[226.36772156 458.70648193]
[211.72128296 455.29281616]
[197.89021301 449.38751221]
[185.29481506 441.17001343]
[174.31785583 430.89007568]
[165.29289246 418.86004639]
[158.49420166 405.44555664]
[154.12840271 391.05419922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[9 122]
[10 121]
[35 64]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% Start Annotations
6 125 0.0 1 colorpair
7 124 0.16 1 colorpair
9 122 0.16 1 colorpair
10 121 0.0 1 colorpair
35 64 0.0 1 colorpair
36 63 0.32 1 colorpair
37 62 0.16 1 colorpair
40 59 0.16 1 colorpair
41 58 0.16 1 colorpair
76 91 0.0 1 colorpair
77 90 0.16 1 colorpair
78 89 0.16 1 colorpair
79 88 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 cmark
9 cmark
36 cmark
63 cmark
37 cmark
39 60 4 gmark
39 cmark
60 cmark
40 cmark
59 cmark
58 cmark
77 cmark
78 cmark

% End Annotations
showpage
end
%%EOF
