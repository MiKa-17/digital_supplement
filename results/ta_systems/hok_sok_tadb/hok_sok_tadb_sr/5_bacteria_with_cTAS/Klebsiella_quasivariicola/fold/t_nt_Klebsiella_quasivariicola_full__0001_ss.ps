%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:54:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGAGGCUAUCCUGAUGUUGUCUAGGCAUACAGGUGGCCUCGUGGGUUAAUGAAAAUUAACUACGGGGCUUUCUGCUUUCUGCCACACAACACGGUAACAAACCACCUUCACGUCAUGAGGCAAAAAGCCUCAAGCGCC_\
) } def
/len { sequence length } bind def

/coor [
[106.94340515 114.69711304]
[102.02683258 118.35131836]
[95.46170044 120.16674805]
[87.98860931 119.47274780]
[75.22509003 127.35262299]
[62.46156693 135.23249817]
[49.69804382 143.11238098]
[36.93452072 150.99226379]
[24.17099762 158.87214661]
[11.40747547 166.75201416]
[5.69255972 173.98138428]
[-1.72671556 174.66142273]
[-14.66143417 182.25701904]
[-27.59615326 189.85261536]
[-40.53087234 197.44821167]
[-53.38077927 205.18641663]
[-66.14430237 213.06629944]
[-78.90782166 220.94618225]
[-91.67134857 228.82604980]
[-104.43486786 236.70593262]
[-109.51264191 251.92420959]
[-124.62565613 257.30715942]
[-138.18051147 248.72546387]
[-139.77906799 232.76225281]
[-128.19506836 221.66313171]
[-112.31475067 223.94241333]
[-99.55122375 216.06253052]
[-86.78770447 208.18264771]
[-74.02417755 200.30278015]
[-61.26065826 192.42289734]
[-57.18934250 186.18330383]
[-48.12646484 184.51348877]
[-35.19174576 176.91789246]
[-22.25702858 169.32229614]
[-9.32231045 161.72669983]
[3.52759695 153.98849487]
[16.29112053 146.10861206]
[29.05464172 138.22874451]
[41.81816483 130.34886169]
[54.58168793 122.46897888]
[67.34520721 114.58910370]
[80.10873413 106.70922852]
[82.09403992 91.84118652]
[71.84520721 80.88850403]
[61.59636688 69.93581390]
[51.34753036 58.98312759]
[43.13058090 54.81111145]
[40.99642944 47.67293930]
[30.99239540 36.49620819]
[20.98836327 25.31947517]
[10.98433018 14.14274502]
[0.98029721 2.96601319]
[-14.76144028 -1.63069618]
[-18.38805580 -17.62380981]
[-6.16879797 -28.56098366]
[9.32620811 -23.19099045]
[12.15702820 -7.03801966]
[22.16106224 4.13871145]
[32.16509628 15.31544304]
[42.16912842 26.49217415]
[52.17316055 37.66890717]
[62.30021667 48.73429108]
[72.54904938 59.68697739]
[82.79788971 70.63966370]
[93.04673004 81.59234619]
[107.22830200 86.47935486]
[122.04878235 84.16562653]
[134.49032593 74.39226532]
[148.25874329 80.07379150]
[163.07922363 77.76006317]
[177.89970398 75.44632721]
[192.72018433 73.13259125]
[199.86088562 59.48281097]
[213.51026917 52.73388672]
[228.34097290 55.28612137]
[238.70101929 65.95418549]
[253.52149963 63.64045334]
[268.34197998 61.32672119]
[283.16244507 59.01298523]
[297.98294067 56.69925308]
[310.42446899 46.92589188]
[324.19290161 52.60742188]
[339.01336670 50.29368973]
[353.83386230 47.97995377]
[368.65432739 45.66622162]
[381.09588623 35.89285660]
[394.86431885 41.57439041]
[409.68478394 39.26065826]
[419.00418091 26.77921677]
[434.06723022 24.64388466]
[445.90893555 33.60543823]
[460.72943115 31.29170227]
[471.58514404 14.47360802]
[490.98999023 10.98786926]
[506.53659058 22.61482048]
[521.17102051 19.32324219]
[535.80535889 16.03166389]
[541.82513428 1.72984767]
[555.11907959 -6.27340746]
[570.57525635 -4.90068579]
[582.25061035 5.32017279]
[585.65570068 20.45903969]
[579.48107910 34.69471359]
[566.10119629 42.55328369]
[550.66076660 41.01297379]
[539.09698486 30.66605949]
[524.46258545 33.95763779]
[509.82818604 37.24921417]
[506.82971191 47.20822144]
[499.88269043 55.05723953]
[490.21301270 59.30862427]
[479.57049561 59.11878967]
[469.91235352 54.45464325]
[463.04315186 46.11218262]
[448.22268677 48.42591858]
[439.67599487 60.57045364]
[424.67886353 63.12803268]
[411.99850464 54.08113861]
[397.17803955 56.39487076]
[385.79656982 66.00273895]
[370.96807861 60.48670197]
[356.14758301 62.80043411]
[341.32711792 65.11416626]
[326.50662231 67.42790222]
[315.12515259 77.03577423]
[300.29666138 71.51972961]
[285.47619629 73.83346558]
[270.65570068 76.14720154]
[255.83523560 78.46093750]
[241.01475525 80.77466583]
[234.39938354 94.09288788]
[221.05233765 101.04415894]
[205.99536133 98.77679443]
[195.03392029 87.95307159]
[180.21343994 90.26680756]
[165.39295959 92.58054352]
[150.57247925 94.89427185]
[139.19099426 104.50214386]
[124.36251831 98.98610687]
[109.54203796 101.29983521]
[110.57211304 105.32699585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[43 65]
[44 64]
[45 63]
[46 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[66 140]
[67 139]
[69 137]
[70 136]
[71 135]
[72 134]
[76 130]
[77 129]
[78 128]
[79 127]
[80 126]
[82 124]
[83 123]
[84 122]
[85 121]
[87 119]
[88 118]
[91 115]
[92 114]
[95 108]
[96 107]
[97 106]
] def

init

% Start Annotations
4 42 0.0 1 colorpair
5 41 0.0 1 colorpair
6 40 0.0 1 colorpair
7 39 0.0 1 colorpair
8 38 0.0 1 colorpair
9 37 0.0 1 colorpair
10 36 0.0 1 colorpair
12 35 0.0 1 colorpair
13 34 0.0 1 colorpair
14 33 0.0 1 colorpair
15 32 0.0 1 colorpair
16 30 0.0 1 colorpair
17 29 0.0 1 colorpair
18 28 0.0 1 colorpair
19 27 0.0 1 colorpair
20 26 0.0 1 colorpair
43 65 0.0 1 colorpair
44 64 0.0 1 colorpair
45 63 0.0 1 colorpair
46 62 0.0 1 colorpair
48 61 0.0 1 colorpair
49 60 0.0 1 colorpair
50 59 0.0 1 colorpair
51 58 0.0 1 colorpair
52 57 0.0 1 colorpair
66 140 0.0 1 colorpair
67 139 0.0 1 colorpair
69 137 0.0 1 colorpair
70 136 0.0 1 colorpair
71 135 0.0 1 colorpair
72 134 0.0 1 colorpair
76 130 0.0 1 colorpair
77 129 0.0 1 colorpair
78 128 0.0 1 colorpair
79 127 0.0 1 colorpair
80 126 0.0 1 colorpair
82 124 0.0 1 colorpair
83 123 0.0 1 colorpair
84 122 0.0 1 colorpair
85 121 0.0 1 colorpair
87 119 0.0 1 colorpair
88 118 0.0 1 colorpair
91 115 0.0 1 colorpair
92 114 0.0 1 colorpair
95 108 0.0 1 colorpair
96 107 0.0 1 colorpair
97 106 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
