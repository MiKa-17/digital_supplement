%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 07:04:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUA_UCCUGAUGUUGUUUAGACAUACAG_GGGCCUCGUGG__GUUAAUG__AAA____________________AAUUAACUACGGGGCUUUUUUCUUUCUGCCACACAACACGGUAACAAACCACCUUCA_CGUCAUGAGGCAGAAAGCCUCAAGCGCCGGGCACAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[243.98164368 87.06539917]
[232.14988708 77.84143829]
[220.73173523 68.11016083]
[209.74893188 57.89009857]
[199.22236633 47.20069504]
[189.17208862 36.06230164]
[177.60778809 45.61568069]
[166.04348755 55.16905975]
[154.47918701 64.72243500]
[142.91488647 74.27581024]
[148.42631531 87.41770172]
[150.00924683 101.58029938]
[147.53527832 115.61470032]
[141.20510864 128.38238525]
[131.53227234 138.84762573]
[119.30143738 146.16142273]
[105.50481415 149.73045349]
[91.26161957 149.26522827]
[77.72731781 144.80345154]
[65.99983215 136.70709229]
[54.27236176 146.05943298]
[42.54488754 155.41178894]
[42.33593369 171.04797363]
[32.08602142 182.85784912]
[16.63484192 185.26516724]
[3.27797580 177.13323975]
[-1.67787707 162.30174255]
[4.10728645 147.77363586]
[17.90188980 140.40864563]
[33.19254303 143.68431091]
[44.92001343 134.33197021]
[56.64748764 124.97961426]
[51.05482864 110.38228607]
[50.23972702 94.77153778]
[54.28173828 79.67114258]
[62.78632736 66.55505371]
[74.92335510 56.70354080]
[89.50811768 51.07820511]
[105.11700439 50.22814178]
[120.22640991 54.23632431]
[133.36151123 62.71151352]
[144.92581177 53.15813828]
[156.49011230 43.60475922]
[168.05441284 34.05138397]
[179.61869812 24.49800491]
[170.57736206 12.52612114]
[162.06683350 0.17125346]
[154.10331726 -12.54307938]
[146.70196533 -25.59267616]
[139.87687683 -38.95269394]
[133.64105225 -52.59770203]
[128.00634766 -66.50173187]
[122.98348236 -80.63830566]
[118.58203125 -94.98051453]
[114.81036377 -109.50106812]
[111.67566681 -124.17231750]
[109.18391418 -138.96633911]
[107.33982849 -153.85496521]
[106.14693451 -168.80986023]
[105.60750580 -183.80255127]
[105.72255707 -198.80450439]
[106.49187469 -213.78717041]
[107.91400146 -228.72201538]
[109.98622131 -243.58059692]
[112.70458984 -258.33465576]
[116.06393433 -272.95611572]
[120.05786896 -287.41711426]
[124.67877197 -301.69012451]
[129.91786194 -315.74798584]
[135.76516724 -329.56396484]
[142.20954895 -343.11172485]
[149.23873901 -356.36547852]
[156.83935547 -369.30004883]
[164.99694824 -381.89074707]
[173.69596863 -394.11361694]
[182.91987610 -405.94543457]
[192.65107727 -417.36361694]
[202.87109375 -428.34649658]
[213.56044006 -438.87310791]
[224.69877625 -448.92343140]
[236.26490784 -458.47836304]
[248.23680115 -467.51968384]
[260.59170532 -476.03018188]
[273.30603027 -483.99368286]
[286.35565186 -491.39501953]
[299.71566772 -498.22009277]
[313.36068726 -504.45587158]
[327.26473999 -510.09057617]
[341.40130615 -515.11340332]
[355.74353027 -519.51483154]
[370.26409912 -523.28649902]
[384.93536377 -526.42114258]
[399.72937012 -528.91290283]
[414.61801147 -530.75695801]
[429.57290649 -531.94976807]
[444.56561279 -532.48919678]
[459.56756592 -532.37414551]
[474.55020142 -531.60479736]
[489.48504639 -530.18261719]
[504.34362793 -528.11041260]
[519.09771729 -525.39196777]
[533.71911621 -522.03259277]
[548.18011475 -518.03863525]
[562.45312500 -513.41772461]
[576.51098633 -508.17861938]
[590.32696533 -502.33129883]
[603.87469482 -495.88687134]
[617.12847900 -488.85766602]
[630.06298828 -481.25701904]
[642.65368652 -473.09942627]
[654.87652588 -464.40036011]
[666.70831299 -455.17645264]
[678.12652588 -445.44522095]
[689.10937500 -435.22518921]
[699.63598633 -424.53582764]
[709.68627930 -413.39746094]
[719.24121094 -401.83132935]
[728.28247070 -389.85940552]
[736.79296875 -377.50451660]
[744.75646973 -364.79016113]
[752.15771484 -351.74053955]
[758.98278809 -338.38049316]
[765.21856689 -324.73544312]
[770.85321045 -310.83142090]
[775.87603760 -296.69482422]
[780.27746582 -282.35260010]
[784.04907227 -267.83203125]
[787.18371582 -253.16076660]
[789.67541504 -238.36672974]
[791.51940918 -223.47810364]
[792.71228027 -208.52319336]
[793.25164795 -193.53050232]
[793.13653564 -178.52854919]
[792.36718750 -163.54589844]
[790.94500732 -148.61105347]
[788.87274170 -133.75247192]
[786.15429688 -118.99842072]
[782.79492188 -104.37698364]
[778.80096436 -89.91600800]
[774.17999268 -75.64299774]
[768.94085693 -61.58514404]
[763.09350586 -47.76919937]
[756.64904785 -34.22145844]
[749.61981201 -20.96771812]
[742.01916504 -8.03320122]
[733.86151123 4.55746746]
[725.16247559 16.78032112]
[715.93853760 28.61209297]
[706.20727539 40.03026199]
[695.98724365 51.01308823]
[685.29785156 61.53967285]
[674.15948486 71.58997345]
[662.59332275 81.14485168]
[650.62133789 90.18613434]
[638.26647949 98.69659424]
[625.55206299 106.66004944]
[612.50244141 114.06132507]
[599.14239502 120.88634491]
[585.49737549 127.12210083]
[571.59326172 132.75674438]
[557.45666504 137.77952576]
[543.11444092 142.18090820]
[528.59387207 145.95249939]
[513.92260742 149.08711243]
[499.12857056 151.57879639]
[484.23995972 153.42279053]
[469.28503418 154.61561584]
[454.29235840 155.15496826]
[439.29040527 155.03984070]
[424.30773926 154.27043152]
[409.37289429 152.84823608]
[394.51431274 150.77593994]
[379.76028442 148.05749512]
[365.13885498 144.69805908]
[350.67788696 140.70405579]
[336.40487671 136.08308411]
[322.34704590 130.84391785]
[308.53109741 124.99654388]
[294.98336792 118.55209351]
[281.72964478 111.52282715]
[268.79513550 103.92213440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[20 32]
[21 31]
[22 30]
] def

init

% Start Annotations
6 45 0.0 1 colorpair
7 44 0.0 1 colorpair
8 43 0.0 1 colorpair
9 42 0.0 1 colorpair
10 41 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 32 11 gmark
20 cmark
32 cmark
21 31 4 gmark
21 cmark
31 cmark
22 30 11 gmark
22 cmark
30 cmark

% End Annotations
showpage
end
%%EOF
