%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUCCUGAUGUGGACUAGACAUA_AGGAU__GCCUCG______GGUUAAUGAAAAAAAA__UUACU_CGGGGCUUUCUUCUUUCUGCCACACAACA_____AACAAACCACCGUAACGU_AUGAGGCAAAAAGCCUCAAGCGCC____________\
) } def
/len { sequence length } bind def

/coor [
[117.33804321 344.66723633]
[103.04445648 345.26190186]
[88.74051666 345.02221680]
[74.47487640 343.94903564]
[60.29607010 342.04598999]
[46.25232697 339.31958008]
[32.39142227 335.77902222]
[18.76050758 331.43640137]
[5.40595007 326.30648804]
[-7.62681866 320.40673828]
[-20.29346466 313.75723267]
[-32.55089951 306.38052368]
[-44.35742569 298.30178833]
[-55.67287827 289.54846191]
[-66.45876312 280.15032959]
[-76.67839813 270.13937378]
[-86.29701233 259.54965210]
[-95.28187561 248.41716003]
[-103.60243988 236.77980042]
[-111.23039246 224.67712402]
[-118.13979340 212.15034485]
[-124.30712128 199.24205017]
[-129.71141052 185.99613953]
[-134.33425903 172.45770264]
[-138.15997314 158.67277527]
[-141.17550659 144.68826294]
[-143.37062073 130.55172729]
[-144.73783875 116.31126404]
[-145.27250671 102.01531219]
[-144.97282410 87.71250153]
[-143.83979797 73.45149231]
[-141.87727356 59.28079605]
[-139.09193420 45.24861526]
[-135.49325562 31.40268898]
[-131.09349060 17.79011345]
[-125.90759277 4.45719957]
[-119.95320892 -8.55069923]
[-113.25058746 -21.18933296]
[-105.82253265 -33.41570663]
[-97.69432068 -45.18822861]
[-88.89359283 -56.46685410]
[-79.45029449 -67.21321106]
[-90.10666656 -77.76981354]
[-100.76303101 -88.32641602]
[-111.41939545 -98.88301849]
[-122.07575989 -109.43962097]
[-132.73213196 -119.99622345]
[-143.38850403 -130.55282593]
[-146.17272949 -115.81349182]
[-159.34106445 -108.63052368]
[-173.24092102 -114.26914215]
[-177.68351746 -128.59616089]
[-169.41235352 -141.10966492]
[-154.49098206 -142.63732910]
[-164.10876465 -154.14811707]
[-173.72653198 -165.65892029]
[-187.86152649 -160.22929382]
[-202.99372864 -159.68598938]
[-217.48170471 -164.08790588]
[-229.75393677 -172.95759583]
[-238.47918701 -185.33291626]
[-242.71102905 -199.87149048]
[-241.99043274 -214.99629211]
[-236.39553833 -229.06668091]
[-226.53324890 -240.55641174]
[-213.47335815 -248.21917725]
[-198.63249207 -251.22375488]
[-183.62048340 -249.24424744]
[-170.06573486 -242.49537659]
[-159.43853760 -231.70919800]
[-152.89167786 -218.05572510]
[-151.13528442 -203.01597595]
[-154.35990906 -188.22137451]
[-162.21574402 -175.27668762]
[-152.59796143 -163.76589966]
[-142.98019409 -152.25509644]
[-132.83189392 -141.20919800]
[-122.17552948 -130.65258789]
[-111.51916504 -120.09598541]
[-100.86279297 -109.53938293]
[-90.20642853 -98.98278046]
[-79.55006409 -88.42617798]
[-68.89369202 -77.86957550]
[-57.08696365 -88.37821960]
[-44.62791824 -98.10459900]
[-31.56829643 -107.00833130]
[-17.96232414 -115.05245209]
[-3.86650324 -122.20354462]
[10.66063118 -128.43193054]
[25.55875397 -133.71171570]
[40.76599884 -138.02101135]
[56.21921921 -141.34188843]
[71.85424042 -143.66058350]
[87.60614777 -144.96746826]
[103.40951538 -145.25709534]
[119.19872284 -144.52827454]
[134.90820312 -142.78402710]
[150.47273254 -140.03160095]
[165.82766724 -136.28242493]
[180.90924072 -131.55206299]
[195.65484619 -125.86017609]
[210.00321960 -119.23037720]
[223.89480591 -111.69020844]
[237.27191162 -103.27097321]
[250.07897949 -94.00764465]
[262.26284790 -83.93868256]
[273.77288818 -73.10590363]
[284.56130981 -61.55428314]
[294.58334351 -49.33179474]
[303.79736328 -36.48919678]
[312.16510010 -23.07981873]
[319.65179443 -9.15933895]
[326.22634888 5.21443272]
[331.86151123 19.98180962]
[336.53381348 35.08146667]
[340.22393799 50.45070648]
[342.91647339 66.02570343]
[344.60028076 81.74177551]
[345.26840210 97.53367615]
[344.91799927 113.33580780]
[343.55053711 129.08256531]
[341.17175293 144.70855713]
[337.79144287 160.14889526]
[333.42370605 175.33946228]
[328.08666992 190.21716309]
[321.80249023 204.72024536]
[314.59722900 218.78845215]
[327.49252319 226.45077515]
[340.38781738 234.11309814]
[353.08560181 231.69387817]
[363.67910767 238.37576294]
[366.76055908 250.10101318]
[379.50942993 258.00454712]
[392.25833130 265.90808105]
[405.00720215 273.81161499]
[417.75610352 281.71517944]
[430.50497437 289.61871338]
[446.38949585 287.36889648]
[457.95291138 298.48947144]
[456.32473755 314.44967651]
[442.75399780 323.00622559]
[427.65097046 317.59524536]
[422.60144043 302.36758423]
[409.85256958 294.46405029]
[397.10366821 286.56051636]
[384.35479736 278.65698242]
[371.60589600 270.75344849]
[358.85702515 262.84991455]
[341.33120728 263.26550293]
[332.72549438 247.00840759]
[319.83020020 239.34608459]
[306.93490601 231.68376160]
[298.90576172 243.52407837]
[290.20001221 254.87615967]
[280.84722900 265.70138550]
[270.87924194 275.96295166]
[260.32995605 285.62588501]
[249.23526001 294.65740967]
[237.63290405 303.02673340]
[225.56236267 310.70538330]
[213.06466675 317.66729736]
[200.18235779 323.88873291]
[186.95925903 329.34854126]
[173.44033813 334.02816772]
[159.67158508 337.91168213]
[145.69984436 340.98587036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[42 83]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[54 76]
[55 75]
[56 74]
[127 152]
[128 151]
[129 150]
[132 148]
[133 147]
[134 146]
[135 145]
[136 144]
[137 143]
] def

init

% Start Annotations
42 83 0.0 1 colorpair
43 82 0.0 1 colorpair
44 81 0.0 1 colorpair
45 80 0.0 1 colorpair
46 79 0.0 1 colorpair
47 78 0.0 1 colorpair
54 76 0.0 1 colorpair
55 75 0.0 1 colorpair
56 74 0.0 1 colorpair
127 152 0.16 1 colorpair
128 151 0.0 1 colorpair
129 150 0.0 0.6 colorpair
132 148 0.0 0.6 colorpair
133 147 0.0 1 colorpair
134 146 0.16 1 colorpair
135 145 0.0 1 colorpair
136 144 0.0 1 colorpair
137 143 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
48 77 3 gmark
127 cmark
152 cmark
129 150 1 gmark
132 148 1 gmark
134 cmark

% End Annotations
showpage
end
%%EOF
