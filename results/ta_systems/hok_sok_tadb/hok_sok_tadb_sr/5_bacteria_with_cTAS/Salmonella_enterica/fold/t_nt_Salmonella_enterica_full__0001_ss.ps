%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:58:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUCCUGAUGUUGACUAG_CAUACAG_A___G_GCCUCG_GG____UUAAUG__AAA___AAAUUAC__ACGGGGCUUUCUUCUUUCUGCCACAC_ACA__GAUA_CA__AACCACCUUUACGGCAUGAGGCAGAAAGCCUCAAGCGCC____________\
) } def
/len { sequence length } bind def

/coor [
[259.78857422 540.64038086]
[246.03469849 535.94738770]
[232.58543396 530.44158936]
[219.48878479 524.14251709]
[206.79148865 517.07263184]
[194.53884888 509.25723267]
[182.77459717 500.72415161]
[171.54069519 491.50378418]
[160.87727356 481.62905884]
[150.82235718 471.13516235]
[141.41184998 460.05957031]
[132.67933655 448.44177246]
[124.65597534 436.32321167]
[117.37042999 423.74710083]
[110.84869385 410.75833130]
[105.11404419 397.40322876]
[100.18697357 383.72943115]
[96.08506012 369.78570557]
[92.82296753 355.62185669]
[90.41233826 341.28836060]
[88.86179352 326.83639526]
[88.17687988 312.31750488]
[88.36006165 297.78350830]
[89.41069031 283.28622437]
[91.32504272 268.87741089]
[94.09629822 254.60847473]
[97.71458435 240.53033447]
[102.16700745 226.69323730]
[107.43769836 213.14653015]
[113.50785828 199.93856812]
[120.35584259 187.11647034]
[127.95723724 174.72602844]
[136.28492737 162.81141663]
[145.30921936 151.41519165]
[134.13764954 141.40539551]
[122.96605682 131.39561462]
[115.85980988 129.26605225]
[111.68399048 121.09954834]
[101.88878632 124.04452515]
[91.75388336 122.66513062]
[83.10203552 117.20945740]
[77.48925781 108.65869141]
[75.92499542 98.55068207]
[78.69057465 88.70332336]
[68.27945709 77.90476990]
[57.86834717 67.10622406]
[47.45723343 56.30767059]
[37.04611969 45.50911713]
[26.63500786 34.71056366]
[18.39360428 30.68459129]
[16.13459778 23.61842155]
[5.72348547 12.81987000]
[-7.17327213 20.62609100]
[-21.56363487 25.11840820]
[-36.61096191 26.03564835]
[-51.44042587 23.32448006]
[-65.18985748 17.14253044]
[-77.05989075 7.84920788]
[-86.36040497 -4.01518536]
[-92.55068970 -17.76086807]
[-95.27085114 -32.58868790]
[-94.36273193 -47.63656998]
[-89.87914276 -62.02965164]
[-82.08074188 -74.93113708]
[-71.42092133 -85.59095764]
[-58.51943588 -93.38935852]
[-44.12635040 -97.87294769]
[-29.07846832 -98.78106689]
[-14.25065136 -96.06090546]
[-0.50496811 -89.87062073]
[11.35942459 -80.57010651]
[20.65274811 -68.70008087]
[26.83469772 -54.95064545]
[29.54586411 -40.12118149]
[28.62862587 -25.07385063]
[24.13630676 -10.68348980]
[16.33008766 2.21326852]
[21.05591583 3.10623908]
[25.25852203 7.00054598]
[27.12149811 13.40627098]
[37.43355942 24.29945183]
[47.84467316 35.09800339]
[58.25578690 45.89655685]
[68.66690063 56.69510651]
[79.07801056 67.49365997]
[89.48912811 78.29221344]
[108.65869141 77.48925781]
[122.34884644 90.93161011]
[121.89614105 110.11264801]
[132.97584534 120.22403717]
[144.14743042 130.23382568]
[155.31900024 140.24360657]
[166.38052368 129.35939026]
[178.11314392 119.20241547]
[190.46914673 109.81397247]
[203.39825439 101.23221588]
[216.84791565 93.49203491]
[230.76339722 86.62487030]
[245.08811951 80.65864563]
[259.76382446 75.61758423]
[274.73083496 71.52218628]
[289.92828369 68.38906097]
[305.29434204 66.23094940]
[320.76657104 65.05659485]
[336.28201294 64.87075806]
[351.77761841 65.67417145]
[367.19033813 67.46354675]
[382.45751953 70.23159027]
[397.51708984 73.96702576]
[412.30780029 78.65464783]
[426.76950073 84.27536011]
[440.84344482 90.80631256]
[454.47238159 98.22090912]
[467.60089111 106.48898315]
[480.17562866 115.57691193]
[492.14541626 125.44770813]
[503.46166992 136.06123352]
[514.07830811 147.37429810]
[523.95227051 159.34089661]
[533.04333496 171.91235352]
[541.31463623 185.03753662]
[548.73242188 198.66305542]
[555.26672363 212.73352051]
[560.89080811 227.19168091]
[565.58197021 241.97875977]
[569.32110596 257.03460693]
[572.09295654 272.29797363]
[573.88641357 287.70684814]
[574.69409180 303.19851685]
[574.51275635 318.71002197]
[573.34320068 334.17825317]
[571.19012451 349.54034424]
[568.06237793 364.73382568]
[563.97271729 379.69692993]
[558.93768311 394.36877441]
[552.97784424 408.68972778]
[546.11749268 422.60159302]
[538.38446045 436.04779053]
[550.89440918 444.32427979]
[563.40435791 452.60079956]
[575.91436768 460.87731934]
[588.42431641 469.15383911]
[604.36834717 467.37402344]
[615.59832764 478.83117676]
[613.49963379 494.73635864]
[599.68218994 502.88848877]
[584.74554443 497.03393555]
[580.14776611 481.66381836]
[567.63781738 473.38729858]
[555.12786865 465.11077881]
[542.61791992 456.83425903]
[530.10791016 448.55773926]
[521.37213135 460.16812134]
[511.95861816 471.23629761]
[501.90097046 481.72277832]
[491.23507690 491.59011841]
[479.99896240 500.80313110]
[468.23269653 509.32891846]
[455.97830200 517.13702393]
[443.27944946 524.19964600]
[430.18145752 530.49151611]
[416.73104858 535.99017334]
[402.97622681 540.67596436]
[388.96603394 544.53216553]
[374.75048828 547.54504395]
[360.38027954 549.70385742]
[345.90667725 551.00079346]
[331.38134766 551.43121338]
[316.85607910 550.99365234]
[302.38275146 549.68963623]
[288.01293945 547.52374268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 92]
[35 91]
[36 90]
[38 89]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 81]
[51 80]
[52 77]
[138 152]
[139 151]
[140 150]
[141 149]
[142 148]
] def

init

% Start Annotations
36 90 0.16 0.2 colorpair
38 89 0.32 0.6 colorpair
44 86 0.0 0.6 colorpair
45 85 0.0 0.6 colorpair
46 84 0.0 0.2 colorpair
47 83 0.16 0.6 colorpair
48 82 0.0 0.6 colorpair
49 81 0.0 0.2 colorpair
51 80 0.16 0.2 colorpair
52 77 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
34 92 7 gmark
34 cmark
92 cmark
35 91 6 gmark
35 cmark
36 90 2 gmark
90 cmark
38 89 1 gmark
38 cmark
89 cmark
44 86 1 gmark
45 85 1 gmark
46 84 2 gmark
47 83 1 gmark
83 cmark
48 82 1 gmark
49 81 2 gmark
51 80 2 gmark
51 cmark
80 cmark
52 77 2 gmark
138 152 5 gmark
139 151 4 gmark
139 cmark
140 150 4 gmark
141 149 4 gmark
142 148 4 gmark

% End Annotations
showpage
end
%%EOF
