%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:58:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUCCUGAUGUUGACUAGACAUACAG_A___G_GCCUCG_GG___UUAAUG__AAA___AAAUUAC_UUCGGGGCUUUCUUCUUUCUGCCACAC_AC_C_GUCA_CA__AACCACCUCCACGGCAUGAGGCAAAAAGCCUCAAGCGCC____________\
) } def
/len { sequence length } bind def

/coor [
[76.68053436 351.38278198]
[69.57426453 338.08749390]
[65.85694885 323.47775269]
[65.74469757 308.40289307]
[69.24403381 293.73941040]
[76.15151978 280.33978271]
[86.06555176 268.98306274]
[98.40975189 260.32949829]
[112.46643829 254.88218689]
[110.54270172 240.00605774]
[108.61896515 225.12992859]
[96.05418396 225.36433411]
[83.52901459 224.34022522]
[71.16919708 222.06788635]
[59.09880447 218.57014465]
[47.43901062 213.88208008]
[36.30686951 208.05078125]
[25.81413078 201.13478088]
[16.06613159 193.20349121]
[7.16073084 184.33656311]
[-0.81267297 174.62298584]
[-7.77403593 164.16029358]
[-13.65347385 153.05349731]
[-18.39196587 141.41410828]
[-21.94194031 129.35897827]
[-24.26776123 117.00910187]
[-25.34607887 104.48848724]
[-25.16606903 91.92280579]
[-23.72953987 79.43821716]
[-21.05091095 67.16004181]
[-17.15707397 55.21154022]
[-12.08711529 43.71266174]
[-5.89193535 32.77884293]
[1.36627567 22.51984596]
[-9.85435390 12.56507492]
[-21.07498360 2.61030340]
[-29.60601616 -0.76202935]
[-32.40814972 -7.63188934]
[-37.57728577 -8.78439331]
[-41.38655472 -11.54596615]
[-43.44830704 -15.11886501]
[-43.75240326 -18.66774750]
[-58.92118073 -23.16427612]
[-62.24990463 -37.68215561]
[-72.70935822 -48.43389511]
[-83.16880798 -59.18563080]
[-93.62825775 -69.93737030]
[-104.08771515 -80.68910980]
[-114.54716492 -91.44084167]
[-127.17185974 -83.24918365]
[-141.15220642 -77.67816925]
[-155.95082092 -74.94192505]
[-170.99890137 -75.14562988]
[-185.71803284 -78.28145599]
[-199.54244995 -84.22886658]
[-211.94079590 -92.75925446]
[-222.43647766 -103.54474640]
[-230.62608337 -116.17076874]
[-236.19483948 -130.15202332]
[-238.92869568 -144.95108032]
[-238.72254944 -159.99913025]
[-235.58435059 -174.71775818]
[-229.63470459 -188.54121399]
[-221.10229492 -200.93815613]
[-210.31510925 -211.43209839]
[-197.68775940 -219.61967468]
[-183.70561218 -225.18615723]
[-168.90611267 -227.91761780]
[-153.85809326 -227.70903015]
[-139.13998413 -224.56845093]
[-125.31748199 -218.61656189]
[-112.92191315 -210.08215332]
[-102.42972565 -199.29327393]
[-94.24419403 -186.66459656]
[-88.67996979 -172.68154907]
[-85.95091248 -157.88160706]
[-86.16191864 -142.83361816]
[-89.30489349 -128.11601257]
[-95.25901794 -114.29448700]
[-103.79542542 -101.90029907]
[-93.33597565 -91.14855957]
[-82.87652588 -80.39682007]
[-72.41706848 -69.64508057]
[-61.95761871 -58.89334488]
[-51.49816513 -48.14160919]
[-37.07751846 -44.41411591]
[-33.00066376 -29.12719917]
[-22.24892616 -18.66774750]
[-11.12021351 -8.61032677]
[0.10041676 1.34444463]
[11.32104683 11.29921532]
[17.03428841 5.93365860]
[23.07149887 0.93541712]
[29.40910339 -3.67599177]
[36.02235413 -7.88256073]
[42.88542938 -11.66786480]
[49.97153091 -15.01712132]
[57.25298309 -17.91725349]
[64.70135498 -20.35693550]
[72.28756714 -22.32664108]
[79.98199463 -23.81867981]
[87.75458527 -24.82722282]
[95.57498932 -25.34833527]
[103.41267395 -25.37998009]
[111.23703766 -24.92203522]
[119.01751709 -23.97628784]
[126.72373962 -22.54643059]
[134.32560730 -20.63804817]
[141.79344177 -18.25859070]
[149.09806824 -15.41735172]
[156.21098328 -12.12542439]
[163.10440063 -8.39566326]
[169.75140381 -4.24263382]
[176.12605286 0.31744850]
[182.20341492 5.26677656]
[187.95980835 10.58602428]
[193.37271118 16.25441933]
[198.42102051 22.24983025]
[203.08500671 28.54884338]
[207.34645081 35.12686157]
[211.18873596 41.95820236]
[214.59684753 49.01618958]
[217.55746460 56.27325821]
[220.05903625 63.70107269]
[222.09181213 71.27062988]
[223.64781189 78.95236969]
[224.72100830 86.71630096]
[225.30717468 94.53210449]
[225.40403748 102.36925507]
[225.01121521 110.19715118]
[224.13024902 117.98523712]
[222.76455688 125.70308685]
[220.91949463 133.32057190]
[218.60226440 140.80793762]
[215.82191467 148.13597107]
[212.58927917 155.27603149]
[208.91700745 162.20024109]
[221.47450256 170.40446472]
[234.03201294 178.60868835]
[246.58950806 186.81291199]
[259.14700317 195.01713562]
[275.08047485 193.14537048]
[286.37640381 204.53756714]
[284.36947632 220.45458984]
[270.59924316 228.68627930]
[255.62907410 222.91796875]
[250.94277954 207.57463074]
[238.38528442 199.37040710]
[225.82778931 191.16618347]
[213.27029419 182.96195984]
[200.71278381 174.75773621]
[166.66117859 206.24534607]
[123.49509430 223.20619202]
[125.41883087 238.08232117]
[127.34256744 252.95845032]
[142.32252502 254.65081787]
[156.46194458 259.87960815]
[168.93878174 268.34082031]
[179.02763367 279.54254150]
[186.14195251 292.83349609]
[189.86813354 307.44100952]
[189.98953247 322.51577759]
[186.49908447 337.18139648]
[179.59971619 350.58520508]
[169.69256592 361.94793701]
[157.35362244 370.60900879]
[143.30024719 376.06481934]
[128.34947205 377.99819946]
[113.37053680 376.29675293]
[99.23429108 371.05938721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 155]
[10 154]
[11 153]
[34 91]
[35 90]
[36 89]
[38 88]
[42 87]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[49 80]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% Start Annotations
9 155 0.0 1 colorpair
10 154 0.0 1 colorpair
11 153 0.0 0.2 colorpair
36 89 0.16 0.6 colorpair
38 88 0.16 0.6 colorpair
42 87 0.48 0.2 colorpair
44 85 0.0 1 colorpair
45 84 0.0 0.6 colorpair
46 83 0.0 1 colorpair
47 82 0.16 1 colorpair
48 81 0.0 0.6 colorpair
49 80 0.0 0.6 colorpair
137 151 0.0 0.6 colorpair
138 150 0.16 1 colorpair
139 149 0.0 1 colorpair
140 148 0.0 1 colorpair
141 147 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 153 2 gmark
34 91 3 gmark
34 cmark
91 cmark
35 90 3 gmark
35 cmark
36 89 1 gmark
89 cmark
38 88 1 gmark
38 cmark
42 87 2 gmark
42 cmark
87 cmark
45 84 1 gmark
82 cmark
48 81 1 gmark
49 80 1 gmark
137 151 1 gmark
138 cmark

% End Annotations
showpage
end
%%EOF
