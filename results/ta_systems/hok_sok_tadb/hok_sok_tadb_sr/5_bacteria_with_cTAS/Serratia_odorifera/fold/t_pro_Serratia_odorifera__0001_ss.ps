%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:07:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AUGCCGAACAAACGAAGCCUGUUAAAACUGGUGGUUAUUUGUGCCACGGUAAUAUCACCGGCAUGGAUAACCCGCAGCAUGCUUUGCGAGCUGCGGAUCCGAUCGGGCAAUACGGAGGUUGCGGCCAUUUGGGCUUACGAAUCCGGG___\
) } def
/len { sequence length } bind def

/coor [
[65.94497681 487.17047119]
[52.81258011 479.20584106]
[45.43598557 465.73431396]
[45.79946136 450.37973022]
[53.80523682 437.27236938]
[67.29979706 429.93801880]
[67.60777283 414.94119263]
[67.91575623 399.94436646]
[56.40804672 394.56936646]
[47.77189636 385.19241333]
[43.32744217 373.19430542]
[43.77397919 360.36038208]
[49.08018112 348.61477661]
[58.48345184 339.73196411]
[70.59934998 335.06875610]
[71.52276611 320.09722900]
[72.29242706 305.11697388]
[72.90824890 290.12960815]
[73.52407837 275.14227295]
[74.13990021 260.15490723]
[74.75572968 245.16755676]
[75.37155151 230.18020630]
[73.50875092 228.00743103]
[72.42200470 224.94340515]
[72.46377563 221.29032898]
[73.86676788 217.47520447]
[76.70320892 214.00328064]
[78.54653931 199.11697388]
[80.38986206 184.23066711]
[78.07637024 177.16242981]
[82.42690277 169.05880737]
[84.57547760 154.21348572]
[86.72406006 139.36816406]
[88.87264252 124.52284241]
[61.16838455 98.11894989]
[83.57064056 51.90368271]
[71.78850555 42.62029648]
[60.00636673 33.33691025]
[48.22422791 24.05352592]
[36.44209290 14.77014065]
[24.65995598 5.48675537]
[12.87781811 -3.79663014]
[1.09568143 -13.08001518]
[-10.68645573 -22.36340141]
[-22.46859360 -31.64678574]
[-34.25072861 -40.93017197]
[-46.03286743 -50.21355820]
[-52.60850143 -51.55654144]
[-56.84413910 -55.46131897]
[-58.09780502 -60.12796021]
[-69.48887634 -69.88722992]
[-80.87995148 -79.64650726]
[-96.61614990 -78.18104553]
[-108.72605133 -88.33613586]
[-110.02505493 -104.08695221]
[-99.74250031 -116.08880615]
[-83.97882843 -117.22121429]
[-72.08635712 -106.81233978]
[-71.12067413 -91.03758240]
[-59.72960281 -81.27830505]
[-48.33853149 -71.51903534]
[-36.74948120 -61.99569321]
[-24.96734428 -52.71231079]
[-13.18520737 -43.42892456]
[-1.40307021 -34.14553833]
[10.37906647 -24.86215210]
[22.16120338 -15.57876682]
[33.94334030 -6.29538155]
[45.72547913 2.98800373]
[57.50761414 12.27138901]
[69.28974915 21.55477524]
[81.07189178 30.83815956]
[92.85402679 40.12154388]
[107.36265564 36.31368637]
[113.06731415 22.44080544]
[118.77198029 8.56792545]
[124.47663879 -5.30495501]
[130.18130493 -19.17783546]
[135.88597107 -33.05071640]
[141.59063721 -46.92359543]
[139.68307495 -62.62938690]
[151.67930603 -71.45773315]
[157.38397217 -85.33061218]
[163.08863831 -99.20349884]
[163.52041626 -116.15194702]
[179.92604065 -120.42883301]
[188.57731628 -105.84830475]
[176.96151733 -93.49883270]
[171.25685120 -79.62595367]
[165.55218506 -65.75307465]
[167.86778259 -51.03956223]
[155.46351624 -41.21893311]
[149.75885010 -27.34605217]
[144.05418396 -13.47317219]
[138.34951782 0.39970839]
[132.64485168 14.27258873]
[126.94019318 28.14546967]
[121.23553467 42.01834869]
[126.61987305 47.23935318]
[137.38854980 57.68136215]
[142.77288818 62.90237045]
[156.46351624 56.77319336]
[165.63180542 43.17633438]
[181.97010803 44.58763504]
[188.67098999 59.55527496]
[178.84115601 72.68182373]
[162.59269714 70.46382141]
[148.90206909 76.59299469]
[151.50679016 91.36511230]
[166.46806335 92.44217682]
[181.42935181 93.51924896]
[196.39062500 94.59632111]
[211.35191345 95.67339325]
[223.13528442 85.14116669]
[238.90989685 86.10926056]
[249.31694031 98.00332642]
[248.18212891 113.76681519]
[236.17869568 124.04753876]
[220.42808533 122.74612427]
[210.27484131 110.63466644]
[195.31355286 109.55760193]
[180.35227966 108.48052979]
[165.39099121 107.40345764]
[150.42971802 106.32639313]
[127.67807770 127.30122375]
[103.71796417 126.67141724]
[101.56938171 141.51673889]
[99.42080688 156.36206055]
[97.27222443 171.20738220]
[95.27616882 186.07398987]
[93.43284607 200.96029663]
[91.58951569 215.84660339]
[90.35890961 230.79603577]
[89.74308014 245.78338623]
[89.12725830 260.77075195]
[88.51142883 275.75808716]
[87.89560699 290.74545288]
[87.27977753 305.73278809]
[90.06719971 314.49786377]
[86.49431610 321.02062988]
[85.57089996 335.99218750]
[100.41117096 345.30624390]
[108.48254395 360.75747681]
[107.65838623 378.08163452]
[98.25326538 392.54824829]
[82.91259003 400.25231934]
[82.60461426 415.24917603]
[82.29663849 430.24600220]
[95.47870636 438.12817383]
[102.93961334 451.55316162]
[102.67239380 466.90972900]
[94.74894714 480.06704712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 148]
[7 147]
[8 146]
[15 141]
[16 140]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 132]
[28 131]
[29 130]
[31 129]
[32 128]
[33 127]
[34 126]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[50 61]
[51 60]
[52 59]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[82 90]
[83 89]
[84 88]
[101 108]
[102 107]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% Start Annotations
6 148 0.0 1 colorpair
7 147 0.0 1 colorpair
8 146 0.0 1 colorpair
15 141 0.0 1 colorpair
16 140 0.0 1 colorpair
17 138 0.0 1 colorpair
18 137 0.0 1 colorpair
19 136 0.0 1 colorpair
20 135 0.0 1 colorpair
21 134 0.0 1 colorpair
22 133 0.0 1 colorpair
27 132 0.0 1 colorpair
28 131 0.0 1 colorpair
29 130 0.0 1 colorpair
31 129 0.0 1 colorpair
32 128 0.0 1 colorpair
33 127 0.0 1 colorpair
34 126 0.0 1 colorpair
36 73 0.0 1 colorpair
37 72 0.0 1 colorpair
38 71 0.0 1 colorpair
39 70 0.0 1 colorpair
40 69 0.0 1 colorpair
41 68 0.0 1 colorpair
42 67 0.0 1 colorpair
43 66 0.0 1 colorpair
44 65 0.0 1 colorpair
45 64 0.0 1 colorpair
46 63 0.0 1 colorpair
47 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
74 98 0.0 1 colorpair
75 97 0.0 1 colorpair
76 96 0.0 1 colorpair
77 95 0.0 1 colorpair
78 94 0.0 1 colorpair
79 93 0.0 1 colorpair
80 92 0.0 1 colorpair
82 90 0.0 1 colorpair
83 89 0.0 1 colorpair
84 88 0.0 1 colorpair
101 108 0.0 1 colorpair
102 107 0.0 1 colorpair
109 124 0.0 1 colorpair
110 123 0.0 1 colorpair
111 122 0.0 1 colorpair
112 121 0.0 1 colorpair
113 120 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
