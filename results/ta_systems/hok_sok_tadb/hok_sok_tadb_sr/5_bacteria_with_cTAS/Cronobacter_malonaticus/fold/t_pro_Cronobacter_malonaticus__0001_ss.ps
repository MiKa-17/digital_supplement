%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:08:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAA____CCGCAAAAUACUUUUAUCGGGUGCAUAUUAAUUGUUUGUGUGACGGUAUUAAUGUUCACAUUCCUGACACGGGAAACGCUUUGCGAACUGCGCUUGAGGGGCGGGGGUAGGGAGAUUGCCGCUUCACUGGCUUGUAAACCC_G____\
) } def
/len { sequence length } bind def

/coor [
[143.04266357 424.72851562]
[128.83000183 426.29757690]
[114.56240845 427.24487305]
[100.26706696 427.56863403]
[85.97120667 427.26818848]
[71.70208740 426.34414673]
[57.48688507 424.79827881]
[43.35269165 422.63348389]
[29.32644081 419.85391235]
[15.43485737 416.46487427]
[1.70441198 412.47280884]
[-11.83873272 407.88534546]
[-25.16876984 402.71118164]
[-38.26029587 396.96020508]
[-51.08837128 390.64340210]
[-63.62854767 383.77276611]
[-75.85693359 376.36138916]
[-87.75022125 368.42343140]
[-99.28575897 359.97396851]
[-110.44155121 351.02914429]
[-121.19635773 341.60598755]
[-131.52966309 331.72244263]
[-141.42179871 321.39736938]
[-150.85391235 310.65042114]
[-159.80801392 299.50207520]
[-168.26707458 287.97357178]
[-176.21493530 276.08688354]
[-183.63647461 263.86468506]
[-190.51754761 251.33021545]
[-196.84504700 238.50740051]
[-202.60690308 225.42066956]
[-207.79214478 212.09494019]
[-212.39089966 198.55561829]
[-216.39437866 184.82850647]
[-219.79498291 170.93974304]
[-222.58622742 156.91581726]
[-224.76277161 142.78343201]
[-226.32049561 128.56951904]
[-227.25640869 114.30117035]
[-227.56874084 100.00556946]
[-227.25689697 85.70996094]
[-226.32145691 71.44157410]
[-224.76422119 57.22761536]
[-222.58815002 43.09515381]
[-219.79739380 29.07112694]
[-216.39726257 15.18225193]
[-212.39424133 1.45499754]
[-207.79595947 -12.08448029]
[-202.61116028 -25.41038132]
[-196.84974670 -38.49731445]
[-190.52268982 -51.32034302]
[-183.64204407 -63.85503006]
[-176.22091675 -76.07749176]
[-168.27345276 -87.96444702]
[-159.81480408 -99.49323273]
[-150.86106873 -110.64188385]
[-141.42933655 -121.38916016]
[-131.53755188 -131.71458435]
[-121.20456696 -141.59846497]
[-110.45008850 -151.02198792]
[-99.29459381 -159.96719360]
[-87.75934601 -168.41703796]
[-75.86632538 -176.35540771]
[-63.63819504 -183.76719666]
[-51.09825134 -190.63825989]
[-38.27039337 -196.95552063]
[-25.17905998 -202.70692444]
[-11.84919930 -207.88153076]
[1.69378948 -212.46946716]
[15.42409992 -216.46200562]
[29.31556892 -219.85151672]
[43.34172440 -222.63156128]
[57.47584534 -224.79682922]
[71.69099426 -226.34320068]
[85.96008301 -227.26771545]
[100.25592804 -227.56863403]
[114.55128479 -227.24537659]
[128.81890869 -226.29855347]
[143.03163147 -224.72998047]
[157.16235352 -222.54263306]
[171.18414307 -219.74067688]
[185.07029724 -216.32945251]
[198.79435730 -212.31547546]
[212.33015442 -207.70637512]
[225.65191650 -202.51095581]
[238.73423767 -196.73908997]
[245.39660645 -210.17832947]
[252.05895996 -223.61755371]
[253.67681885 -240.49414062]
[270.34170532 -243.61141968]
[277.95046997 -228.46072388]
[265.49819946 -216.95520020]
[258.83584595 -203.51597595]
[252.17347717 -190.07673645]
[266.86636353 -181.88099670]
[281.11907959 -172.94166565]
[294.89404297 -163.28234863]
[308.15484619 -152.92851257]
[320.86657715 -141.90748596]
[332.99569702 -130.24830627]
[344.51019287 -117.98176575]
[355.37966919 -105.14020538]
[365.57550049 -91.75750732]
[375.07073975 -77.86896515]
[383.84039307 -63.51121902]
[391.86126709 -48.72214890]
[399.11227417 -33.54076004]
[405.57421875 -18.00710106]
[411.23010254 -2.16215086]
[416.06497192 13.95229435]
[420.06610107 30.29372597]
[423.22293091 46.81903458]
[425.52713013 63.48463440]
[426.97259521 80.24655151]
[427.55554199 97.06058502]
[427.27444458 113.88237000]
[426.13000488 130.66752625]
[424.12527466 147.37179565]
[421.26553345 163.95109558]
[417.55831909 180.36169434]
[413.01339722 196.56031799]
[407.64279175 212.50421143]
[401.46063232 228.15133667]
[394.48324585 243.46041870]
[386.72906494 258.39105225]
[378.21850586 272.90386963]
[368.97402954 286.96057129]
[381.09161377 295.80160522]
[393.20919800 304.64266968]
[405.32678223 313.48370361]
[420.90072632 310.79528809]
[433.76583862 319.97488403]
[436.28942871 335.57638550]
[426.97433472 348.34371948]
[411.34704590 350.70220947]
[398.67889404 341.25265503]
[396.48574829 325.60128784]
[384.36816406 316.76025391]
[372.25057983 307.91918945]
[360.13299561 299.07815552]
[351.19705200 310.24108887]
[341.78250122 321.00341797]
[331.90719604 331.34460449]
[321.59002686 341.24499512]
[310.85058594 350.68566895]
[299.70941162 359.64868164]
[288.18765259 368.11691284]
[276.30734253 376.07427979]
[264.09103394 383.50558472]
[251.56208801 390.39663696]
[238.74433899 396.73437500]
[225.66220093 402.50668335]
[212.34062195 407.70257568]
[198.80497742 412.31210327]
[185.08105469 416.32656860]
[171.19500732 419.73825073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[86 94]
[87 93]
[88 92]
[127 140]
[128 139]
[129 138]
[130 137]
] def

init

% Start Annotations
86 94 0.0 1 colorpair
87 93 0.16 1 colorpair
88 92 0.16 1 colorpair
127 140 0.0 1 colorpair
128 139 0.16 1 colorpair
129 138 0.32 1 colorpair
130 137 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
93 cmark
88 cmark
128 cmark
129 cmark
138 cmark

% End Annotations
showpage
end
%%EOF
