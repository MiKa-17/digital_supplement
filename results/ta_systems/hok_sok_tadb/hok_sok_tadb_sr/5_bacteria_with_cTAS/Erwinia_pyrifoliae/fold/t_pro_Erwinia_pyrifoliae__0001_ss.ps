%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:15:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AAGCCGCAAAGUUCUGUUACCUGGUGCCUUGUUAUCGUCUGUCUGACGAUACUGGCAUUCACACUGUUGACCCGCCAUUCGCUUUACGAACUGCGAAUACGGGAUGGUAUCAGGGAGGUUGCGGCAGUUAUGGCUUGUGAGCCCAA____\
) } def
/len { sequence length } bind def

/coor [
[193.53218079 398.66430664]
[195.63609314 387.57489014]
[200.19358826 377.23785400]
[206.97337341 368.18887329]
[215.62886047 360.89801025]
[209.35945129 347.27102661]
[203.09004211 333.64404297]
[196.82064819 320.01705933]
[190.55123901 306.39007568]
[184.28182983 292.76312256]
[178.01243591 279.13613892]
[161.84555054 276.45617676]
[150.33039856 264.56445312]
[148.12814331 247.99101257]
[156.29864502 233.21458435]
[149.75077820 219.71919250]
[143.20289612 206.22381592]
[136.65502930 192.72842407]
[124.13807678 184.65531921]
[125.07514954 168.86189270]
[118.52727509 155.36650085]
[111.97940826 141.87112427]
[105.43153381 128.37573242]
[83.73024750 128.77922058]
[65.06169891 112.85636139]
[61.12750244 85.76338196]
[46.41197968 82.85591125]
[31.69645691 79.94843292]
[16.98093414 77.04096222]
[2.26541162 74.13349152]
[-8.90357208 80.66476440]
[-21.13139534 77.89859009]
[-27.94951820 67.85989380]
[-42.60224152 64.65090179]
[-51.71815872 65.87393951]
[-57.52141953 61.22266388]
[-72.10517120 57.71349716]
[-86.68891907 54.20433044]
[-101.27266693 50.69516373]
[-115.85641479 47.18599701]
[-130.44017029 43.67683029]
[-144.81901550 50.79220200]
[-159.28538513 43.85652542]
[-162.74192810 28.19025803]
[-152.53707886 15.81122208]
[-136.49911499 16.21555138]
[-126.93099976 29.09308052]
[-112.34725189 32.60224915]
[-97.76350403 36.11141586]
[-83.17974854 39.62058258]
[-68.59600067 43.12974930]
[-54.01225281 46.63891602]
[-39.39324570 49.99817657]
[-24.74052048 53.20717239]
[-8.36321831 46.97592163]
[5.17288399 59.41796875]
[19.88840675 62.32543945]
[34.60392761 65.23291016]
[49.31945038 68.14038849]
[64.03497314 71.04785919]
[73.43882751 59.36164856]
[67.45053101 45.60882187]
[61.46223831 31.85599136]
[46.66479111 26.30521774]
[40.20256042 11.88248825]
[45.90946960 -2.85544562]
[60.39971542 -9.16483021]
[75.07649231 -3.30241919]
[81.23232269 11.25372314]
[75.21506500 25.86769485]
[81.20336151 39.62052536]
[87.19165802 53.37335205]
[102.17189789 54.14301300]
[109.53813934 41.07631683]
[116.90438080 28.00962257]
[124.27062225 14.94292831]
[121.56235504 2.29109240]
[128.01593018 -8.45705318]
[139.68400574 -11.79145718]
[147.31698608 -24.70415497]
[154.94995117 -37.61685181]
[162.58291626 -50.52955246]
[170.21588135 -63.44224930]
[177.84886169 -76.35494995]
[170.23658752 -89.69469452]
[170.33007812 -105.05329895]
[178.10418701 -118.29938507]
[191.46772766 -125.86981201]
[206.82597351 -125.72817230]
[220.04762268 -117.91257477]
[227.57612610 -104.52537537]
[227.38635254 -89.16765594]
[219.52934265 -75.97056580]
[206.11860657 -68.48406219]
[190.76155090 -68.72197723]
[183.12858582 -55.80928040]
[175.49562073 -42.89657974]
[167.86264038 -29.98388290]
[160.22967529 -17.07118416]
[152.59671021 -4.15848732]
[153.39022827 13.34622192]
[137.33731079 22.30916786]
[129.97106934 35.37586212]
[122.60483551 48.44255829]
[115.23859406 61.50925446]
[132.48384094 81.81288910]
[132.56610107 105.69184113]
[118.92691803 121.82786560]
[125.47479248 135.32325745]
[132.02265930 148.81863403]
[138.57052612 162.31402588]
[151.55583191 171.35240173]
[150.15042114 186.18055725]
[156.69828796 199.67593384]
[163.24615479 213.17132568]
[169.79402161 226.66670227]
[183.53997803 228.08145142]
[194.69409180 236.05348206]
[200.39245605 248.40394592]
[199.23757935 261.84765625]
[191.63940430 272.86672974]
[197.90881348 286.49371338]
[204.17822266 300.12066650]
[210.44761658 313.74765015]
[216.71702576 327.37463379]
[222.98643494 341.00161743]
[229.25584412 354.62860107]
[248.37327576 353.05661011]
[266.63589478 358.82083130]
[281.33883667 371.04278564]
[290.31393433 387.88934326]
[292.24923706 406.84774780]
[286.88088989 425.10034180]
[275.02874756 439.94332886]
[282.92523193 452.69659424]
[290.82171631 465.44985962]
[298.71820068 478.20312500]
[313.41415405 485.48052979]
[314.18957520 501.86132812]
[300.24673462 510.49435425]
[285.92886353 502.49871826]
[285.96493530 486.09960938]
[278.06845093 473.34634399]
[270.17196655 460.59307861]
[262.27548218 447.83981323]
[251.55007935 451.05819702]
[240.36505127 451.77236938]
[229.29782104 449.94097900]
[218.92074585 445.65417480]
[209.77151489 439.12927246]
[202.32525635 430.69955444]
[196.96992493 420.79751587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[8 124]
[9 123]
[10 122]
[11 121]
[15 116]
[16 115]
[17 114]
[18 113]
[20 111]
[21 110]
[22 109]
[23 108]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[33 54]
[34 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[61 72]
[62 71]
[63 70]
[73 105]
[74 104]
[75 103]
[76 102]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[134 145]
[135 144]
[136 143]
[137 142]
] def

init

% Start Annotations
5 127 0.0 1 colorpair
6 126 0.0 1 colorpair
7 125 0.0 1 colorpair
8 124 0.0 1 colorpair
9 123 0.0 1 colorpair
10 122 0.0 1 colorpair
11 121 0.0 1 colorpair
15 116 0.0 1 colorpair
16 115 0.0 1 colorpair
17 114 0.0 1 colorpair
18 113 0.0 1 colorpair
20 111 0.0 1 colorpair
21 110 0.0 1 colorpair
22 109 0.0 1 colorpair
23 108 0.0 1 colorpair
26 60 0.0 1 colorpair
27 59 0.0 1 colorpair
28 58 0.0 1 colorpair
29 57 0.0 1 colorpair
30 56 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.0 1 colorpair
36 52 0.0 1 colorpair
37 51 0.0 1 colorpair
38 50 0.0 1 colorpair
39 49 0.0 1 colorpair
40 48 0.0 1 colorpair
41 47 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair
73 105 0.0 1 colorpair
74 104 0.0 1 colorpair
75 103 0.0 1 colorpair
76 102 0.0 1 colorpair
79 100 0.0 1 colorpair
80 99 0.0 1 colorpair
81 98 0.0 1 colorpair
82 97 0.0 1 colorpair
83 96 0.0 1 colorpair
84 95 0.0 1 colorpair
134 145 0.0 1 colorpair
135 144 0.0 1 colorpair
136 143 0.0 1 colorpair
137 142 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
