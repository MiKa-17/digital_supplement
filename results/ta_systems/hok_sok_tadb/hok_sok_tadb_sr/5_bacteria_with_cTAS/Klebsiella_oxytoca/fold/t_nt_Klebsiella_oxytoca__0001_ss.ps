%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:40:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUCCUGAUGUUGUCUAGGCAUACAGG__GGGCCUCGUGGGUUAAUGAAAAUUAACUAC__GGGGCUUUCUGCUUUCUGCCACACAACACGGUAACAAACCACCUUCACGUCAUGAGGCAAAAAGCCUCAAGCGCC_\
) } def
/len { sequence length } bind def

/coor [
[139.74908447 158.80216980]
[119.33842468 168.29136658]
[96.98290253 170.91249084]
[74.93080902 166.40196228]
[55.39992142 155.21337891]
[40.35446548 138.47200012]
[26.96057701 145.22505188]
[13.56668949 151.97811890]
[0.17280142 158.73117065]
[-13.22108650 165.48422241]
[-26.61497498 172.23727417]
[-31.75781631 188.92294312]
[-47.06043243 196.60670471]
[-62.87958527 190.99046326]
[-76.12712097 198.02629089]
[-89.37465668 205.06211853]
[-102.62218475 212.09794617]
[-115.79430389 219.27397156]
[-128.88951111 226.58938599]
[-141.98472595 233.90481567]
[-155.07994080 241.22024536]
[-168.17515564 248.53565979]
[-173.91215515 263.51788330]
[-189.24566650 268.23623657]
[-202.41313171 259.07122803]
[-203.31359863 243.05346680]
[-191.25630188 232.47039795]
[-175.49057007 235.44046021]
[-162.39535522 228.12503052]
[-149.30015564 220.80960083]
[-136.20494080 213.49418640]
[-123.10972595 206.17875671]
[-118.77416229 200.12892151]
[-109.65801239 198.85040283]
[-96.41047668 191.81457520]
[-83.16294098 184.77876282]
[-69.91541290 177.74293518]
[-67.88749695 164.97761536]
[-58.72539520 155.58607483]
[-45.63058853 153.17225647]
[-33.36803055 158.84339905]
[-19.97414207 152.09033203]
[-6.58025455 145.33728027]
[6.81363297 138.58422852]
[20.20752144 131.83116150]
[33.60140991 125.07810974]
[30.95350075 116.43975830]
[29.42444992 107.53501129]
[29.03903198 98.50816345]
[29.80349159 89.50548553]
[31.70544243 80.67286682]
[34.71406555 72.15343475]
[38.78060532 64.08523560]
[43.83916855 56.59901428]
[49.80778122 49.81608200]
[56.58972931 43.84634399]
[64.07511139 38.78654480]
[72.14263916 34.71866989]
[80.66157532 31.70863914]
[89.49388123 29.80522728]
[98.49642944 29.03927994]
[107.52333832 29.42320442]
[116.42834473 30.95078468]
[125.06713104 33.59726334]
[133.29972839 37.31975555]
[140.99272156 42.05794525]
[148.02145386 47.73505020]
[154.27201843 54.25907516]
[159.64314270 61.52430344]
[164.04779053 69.41300201]
[167.41459656 77.79734802]
[169.68896484 86.54148102]
[184.63493347 85.26938629]
[197.72921753 76.38962555]
[211.06681824 83.01970673]
[226.01277161 81.74761200]
[240.95874023 80.47552490]
[255.90469360 79.20343781]
[262.49426270 65.40036774]
[275.02532959 56.80565262]
[290.07589722 55.64493179]
[303.59619141 62.13008881]
[311.99850464 74.42915344]
[326.94445801 73.15706635]
[341.89041138 71.88497162]
[356.83639526 70.61288452]
[369.93066406 61.73312378]
[383.26824951 68.36319733]
[398.21423340 67.09111023]
[413.16018677 65.81902313]
[428.10614014 64.54693604]
[429.37841797 49.56396484]
[433.16467285 35.01156616]
[439.35598755 21.30844307]
[447.77423096 8.84885788]
[458.17718506 -2.00870013]
[470.26553345 -10.95183849]
[483.69146729 -17.72324371]
[498.06872559 -22.12809181]
[512.98364258 -24.03964424]
[528.00701904 -23.40290070]
[542.70666504 -20.23618507]
[556.65966797 -14.63060760]
[569.46447754 -6.74745274]
[580.75274658 3.18646598]
[590.19970703 14.88532925]
[597.53350830 28.01253891]
[602.54309082 42.19039536]
[605.08447266 57.01097870]
[605.08435059 72.04786682]
[602.54284668 86.86842346]
[597.53308105 101.04621887]
[590.19915771 114.17334747]
[580.75207520 125.87210083]
[569.46368408 135.80589294]
[556.65875244 143.68890381]
[542.70568848 149.29432678]
[528.00604248 152.46087646]
[512.98260498 153.09744263]
[498.06774902 151.18572998]
[483.69055176 146.78071594]
[470.26467896 140.00915527]
[458.17642212 131.06588745]
[447.77359009 120.20821381]
[439.35549927 107.74853516]
[433.16433716 94.04533386]
[429.37823486 79.49289703]
[414.43228149 80.76498413]
[399.48632812 82.03707123]
[384.54034424 83.30916595]
[372.51510620 92.09793854]
[358.10845947 85.55884552]
[343.16250610 86.83094025]
[328.21655273 88.10302734]
[313.27059937 89.37511444]
[307.06768799 102.91726685]
[294.83786011 111.59407806]
[279.80764771 112.99360657]
[266.00430298 106.64028168]
[257.17678833 94.14939880]
[242.23081970 95.42148590]
[227.28486633 96.69358063]
[212.33889771 97.96566772]
[200.31364441 106.75444031]
[185.90702820 100.21535492]
[170.96105957 101.48744202]
[166.92704773 123.63166046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[14 37]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[72 146]
[73 145]
[75 143]
[76 142]
[77 141]
[78 140]
[83 135]
[84 134]
[85 133]
[86 132]
[88 130]
[89 129]
[90 128]
[91 127]
] def

init

% Start Annotations
6 46 0.0 1 colorpair
7 45 0.0 1 colorpair
8 44 0.0 1 colorpair
9 43 0.0 0.6 colorpair
10 42 0.0 1 colorpair
11 41 0.32 1 colorpair
14 37 0.16 0.2 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
17 34 0.0 0.6 colorpair
18 32 0.16 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.16 1 colorpair
22 28 0.0 1 colorpair
72 146 0.0 0.6 colorpair
73 145 0.0 0.6 colorpair
75 143 0.0 0.6 colorpair
76 142 0.0 0.6 colorpair
77 141 0.0 0.6 colorpair
78 140 0.0 0.6 colorpair
83 135 0.0 0.6 colorpair
84 134 0.0 0.6 colorpair
85 133 0.0 0.2 colorpair
86 132 0.0 0.2 colorpair
88 130 0.16 0.6 colorpair
89 129 0.0 0.6 colorpair
90 128 0.0 0.6 colorpair
91 127 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 43 1 gmark
11 cmark
41 cmark
14 37 2 gmark
14 cmark
37 cmark
35 cmark
17 34 1 gmark
18 cmark
29 cmark
72 146 1 gmark
73 145 1 gmark
75 143 1 gmark
76 142 1 gmark
77 141 1 gmark
78 140 1 gmark
83 135 1 gmark
84 134 1 gmark
85 133 2 gmark
86 132 2 gmark
88 130 1 gmark
130 cmark
89 129 1 gmark
90 128 1 gmark
91 127 1 gmark

% End Annotations
showpage
end
%%EOF
