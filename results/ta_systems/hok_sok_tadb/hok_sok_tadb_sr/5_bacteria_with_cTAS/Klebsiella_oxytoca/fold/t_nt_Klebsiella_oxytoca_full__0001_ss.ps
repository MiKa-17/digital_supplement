%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:40:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUCCUGAUGUUGUCUAGGCAUACAGG__UGGCCUCGUGGGUUAAUGAAAAUUAACUAC__GGGGCUUUCUGCUUUCUGCCACACAACACGGUAACAAACCACCUUCACGUCAUGAGGCAAAAAGCCUCAAGCGCC_\
) } def
/len { sequence length } bind def

/coor [
[139.74908447 158.80216980]
[119.33842468 168.29136658]
[96.98290253 170.91249084]
[74.93080902 166.40196228]
[55.39992142 155.21337891]
[40.35446548 138.47200012]
[26.96057701 145.22505188]
[13.56668949 151.97811890]
[4.72751999 165.09983826]
[-10.12035179 163.92086792]
[-23.51424026 170.67391968]
[-28.65708160 187.35958862]
[-43.95969772 195.04335022]
[-59.77885056 189.42710876]
[-73.02638245 196.46293640]
[-86.27391815 203.49876404]
[-95.63253021 219.32017517]
[-113.10916138 218.09617615]
[-126.20436859 225.41160583]
[-139.29957581 232.72702026]
[-152.39479065 240.04244995]
[-165.49000549 247.35786438]
[-171.22700500 262.34008789]
[-186.56051636 267.05844116]
[-199.72798157 257.89343262]
[-200.62844849 241.87567139]
[-188.57116699 231.29260254]
[-172.80543518 234.26266479]
[-159.71022034 226.94723511]
[-146.61500549 219.63180542]
[-133.51979065 212.31639099]
[-120.42458344 205.00096130]
[-116.80360413 193.41365051]
[-105.89463806 187.22596741]
[-93.30974579 190.25122070]
[-80.06221008 183.21539307]
[-66.81467438 176.17956543]
[-64.78675842 163.41426086]
[-55.62466049 154.02272034]
[-42.52985382 151.60890198]
[-30.26729584 157.28002930]
[-16.87340736 150.52697754]
[-8.99225903 137.88827515]
[6.81363297 138.58422852]
[20.20752144 131.83116150]
[33.60140991 125.07810974]
[30.95350075 116.43975830]
[29.42444992 107.53501129]
[29.03903198 98.50816345]
[29.80349159 89.50548553]
[31.70544243 80.67286682]
[34.71406555 72.15343475]
[38.78060532 64.08523560]
[43.83916855 56.59901428]
[49.80778122 49.81608200]
[56.58972931 43.84634399]
[64.07511139 38.78654480]
[72.14263916 34.71866989]
[80.66157532 31.70863914]
[89.49388123 29.80522728]
[98.49642944 29.03927994]
[107.52333832 29.42320442]
[116.42834473 30.95078468]
[125.06713104 33.59726334]
[133.29972839 37.31975555]
[140.99272156 42.05794525]
[148.02145386 47.73505020]
[154.27201843 54.25907516]
[159.64314270 61.52430344]
[164.04779053 69.41300201]
[167.41459656 77.79734802]
[169.68896484 86.54148102]
[184.63493347 85.26938629]
[197.72921753 76.38962555]
[211.06681824 83.01970673]
[226.01277161 81.74761200]
[240.95874023 80.47552490]
[255.90469360 79.20343781]
[258.95181274 64.41847992]
[266.03445435 51.10462570]
[276.57107544 40.33686447]
[289.70162964 32.98185730]
[304.35787964 29.62821007]
[319.35006714 30.53938675]
[333.46374512 35.63300705]
[345.55798340 44.48823166]
[354.65771484 56.38051224]
[360.03222656 70.34088135]
[374.97817993 69.06878662]
[389.92416382 67.79669952]
[404.87011719 66.52461243]
[406.14236450 51.54164505]
[409.92861938 36.98924637]
[416.11993408 23.28612137]
[424.53817749 10.82653618]
[434.94113159 -0.03102217]
[447.02947998 -8.97416019]
[460.45544434 -15.74556637]
[474.83270264 -20.15041351]
[489.74758911 -22.06196594]
[504.77096558 -21.42522430]
[519.47064209 -18.25850677]
[533.42358398 -12.65292931]
[546.22845459 -4.76977444]
[557.51672363 5.16414404]
[566.96368408 16.86300850]
[574.29742432 29.99021721]
[579.30706787 44.16807556]
[581.84838867 58.98865509]
[581.84832764 74.02554321]
[579.30682373 88.84609985]
[574.29705811 103.02390289]
[566.96313477 116.15102386]
[557.51605225 127.84978485]
[546.22766113 137.78356934]
[533.42272949 145.66658020]
[519.46966553 151.27200317]
[504.76998901 154.43855286]
[489.74658203 155.07513428]
[474.83169556 153.16340637]
[460.45449829 148.75839233]
[447.02862549 141.98684692]
[434.94039917 133.04356384]
[424.53756714 122.18589020]
[416.11944580 109.72621155]
[409.92828369 96.02301788]
[406.14221191 81.47057343]
[391.19622803 82.74266052]
[376.25027466 84.01475525]
[361.30432129 85.28684235]
[358.36642456 99.95469666]
[351.40737915 113.21378326]
[340.98364258 123.98557281]
[327.93380737 131.39114380]
[313.31124878 134.82290649]
[298.29907227 133.99441528]
[284.11437988 128.96427917]
[271.90954590 120.13210297]
[262.67874146 108.20672607]
[257.17678833 94.14939880]
[242.23081970 95.42148590]
[227.28486633 96.69358063]
[212.33889771 97.96566772]
[200.31364441 106.75444031]
[185.90702820 100.21535492]
[170.96105957 101.48744202]
[166.92704773 123.63166046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[10 42]
[11 41]
[14 37]
[15 36]
[16 35]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[72 146]
[73 145]
[75 143]
[76 142]
[77 141]
[78 140]
[88 130]
[89 129]
[90 128]
[91 127]
] def

init

% Start Annotations
6 46 0.0 1 colorpair
7 45 0.0 1 colorpair
8 44 0.0 1 colorpair
10 42 0.0 1 colorpair
11 41 0.32 1 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
18 32 0.16 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.16 1 colorpair
22 28 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 cmark
41 cmark
14 37 4 gmark
14 cmark
37 cmark
35 cmark
18 cmark
29 cmark
72 146 3 gmark
73 145 3 gmark
75 143 3 gmark
76 142 3 gmark
77 141 3 gmark
78 140 3 gmark
88 130 3 gmark
130 cmark
89 129 3 gmark
90 128 3 gmark
91 127 3 gmark

% End Annotations
showpage
end
%%EOF
