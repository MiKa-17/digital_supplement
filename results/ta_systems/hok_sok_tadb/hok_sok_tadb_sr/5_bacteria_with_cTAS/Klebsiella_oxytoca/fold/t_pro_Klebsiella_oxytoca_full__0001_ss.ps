%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:40:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AAUGCCGCCAAAAUAUCUGCUUUUGGGCAUAAUAGUAAUGUGUAUCACGAUAUUGGUAUUUACCUGGAUGGUGCGCAACUCGCUGUGCGAACUCCGGAUCAGAGAGGGGAAUAUGGAGCUGGAGGCUUUUCUAGCUUACGAAUC_AA_____\
) } def
/len { sequence length } bind def

/coor [
[143.36943054 448.24649048]
[128.44934082 449.78158569]
[113.47727966 450.67776489]
[98.48061371 450.93334961]
[83.48671722 450.54791260]
[68.52297974 449.52215576]
[53.61674500 447.85791016]
[38.79523849 445.55825806]
[24.08552933 442.62738037]
[9.51449203 439.07064819]
[-4.89125872 434.89453125]
[-19.10540962 430.10668945]
[-33.10199356 424.71585083]
[-46.85544586 418.73187256]
[-60.34064102 412.16567993]
[-73.53295135 405.02926636]
[-86.40827179 397.33566284]
[-98.94309235 389.09890747]
[-111.11450195 380.33407593]
[-122.90028381 371.05718994]
[-134.27890015 361.28515625]
[-145.22956848 351.03582764]
[-155.73228455 340.32797241]
[-165.76786804 329.18109131]
[-175.31797791 317.61560059]
[-184.36517334 305.65258789]
[-192.89292908 293.31390381]
[-200.88566589 280.62210083]
[-208.32879639 267.60037231]
[-215.20870972 254.27250671]
[-221.51283264 240.66282654]
[-227.22967529 226.79620361]
[-232.34877014 212.69795227]
[-236.86077881 198.39385986]
[-240.75744629 183.91001892]
[-244.03167725 169.27291870]
[-246.67747498 154.50926208]
[-248.69000244 139.64605713]
[-250.06559753 124.71041870]
[-250.80174255 109.72963715]
[-250.89709473 94.73109436]
[-250.35147095 79.74217224]
[-249.16587830 64.79025269]
[-247.34246826 49.90264893]
[-244.88458252 35.10655975]
[-241.79670715 20.42900658]
[-238.08448792 5.89680243]
[-233.75469971 -8.46350574]
[-228.81526184 -22.62568855]
[-223.27517700 -36.56387329]
[-217.14457703 -50.25260544]
[-210.43467712 -63.66687393]
[-203.15769958 -76.78218079]
[-195.32696533 -89.57456207]
[-186.95677185 -102.02066040]
[-178.06239319 -114.09772491]
[-168.66009521 -125.78371429]
[-158.76704407 -137.05726624]
[-148.40130615 -147.89779663]
[-137.58183289 -158.28550720]
[-126.32837677 -168.20141602]
[-114.66149139 -177.62741089]
[-102.60249329 -186.54626465]
[-90.17340851 -194.94169617]
[-77.39694214 -202.79837036]
[-64.29642487 -210.10194397]
[-50.89580154 -216.83906555]
[-37.21953964 -222.99742126]
[-23.29262161 -228.56576538]
[-9.14049149 -233.53393555]
[5.21100235 -237.89285278]
[19.73564339 -241.63455200]
[34.40689850 -244.75219727]
[49.19797516 -247.24009705]
[64.08184814 -249.09370422]
[79.03132629 -250.30964661]
[94.01911163 -250.88568115]
[109.01782227 -250.82077026]
[124.00006104 -250.11502075]
[138.93846130 -248.76972961]
[153.80572510 -246.78736877]
[168.57470703 -244.17152405]
[183.21842957 -240.92700195]
[197.71014404 -237.05972290]
[212.02337646 -232.57675171]
[226.13197327 -227.48626709]
[240.01016235 -221.79759216]
[253.63261414 -215.52108765]
[266.97442627 -208.66822815]
[280.01123047 -201.25154114]
[292.71920776 -193.28456116]
[305.07516479 -184.78186035]
[317.05651855 -175.75895691]
[328.64135742 -166.23233032]
[339.80856323 -156.21939087]
[350.53771973 -145.73843384]
[360.80923462 -134.80857849]
[370.60433960 -123.44981384]
[379.90515137 -111.68288422]
[388.69464111 -99.52928162]
[396.95681763 -87.01119995]
[404.67651367 -74.15151215]
[411.83969116 -60.97371674]
[418.43325806 -47.50186920]
[424.44512939 -33.76058578]
[429.86434937 -19.77497101]
[434.68103027 -5.57056427]
[438.88635254 8.82668400]
[442.47265625 23.39047432]
[445.43334961 38.09420395]
[447.76309204 52.91101837]
[449.45755005 67.81384277]
[450.51370239 82.77546692]
[450.92956543 97.76854706]
[450.70437622 112.76570892]
[449.83859253 127.73954773]
[448.33377075 142.66271973]
[446.19265747 157.50796509]
[443.41918945 172.24815369]
[440.01837158 186.85636902]
[435.99649048 201.30593872]
[431.36083984 215.57044983]
[426.11990356 229.62385559]
[420.28326416 243.44047546]
[413.86157227 256.99508667]
[406.86654663 270.26290894]
[399.31097412 283.21972656]
[391.20867920 295.84185791]
[382.57446289 308.10626221]
[394.45959473 317.25738525]
[406.34475708 326.40850830]
[421.57736206 322.87274170]
[435.49548340 330.00155640]
[441.52740479 344.42895508]
[436.82501221 359.34277344]
[423.60867310 367.70114136]
[408.11871338 365.55749512]
[397.66903687 353.92401123]
[397.19363403 338.29367065]
[385.30847168 329.14254761]
[373.42330933 319.99139404]
[363.77343750 331.47378540]
[353.64169312 342.53332520]
[343.04666138 353.14987183]
[332.00765991 363.30395508]
[320.54486084 372.97711182]
[308.67919922 382.15161133]
[296.43234253 390.81069946]
[283.82666016 398.93859863]
[270.88519287 406.52044678]
[257.63159180 413.54235840]
[244.09005737 419.99154663]
[230.28529358 425.85620117]
[216.24255371 431.12564087]
[201.98748779 435.79025269]
[187.54611206 439.84146118]
[172.94482422 443.27188110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
130 140 0.0 0.2 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
129 141 8 gmark
129 cmark
141 cmark
130 140 2 gmark

% End Annotations
showpage
end
%%EOF
