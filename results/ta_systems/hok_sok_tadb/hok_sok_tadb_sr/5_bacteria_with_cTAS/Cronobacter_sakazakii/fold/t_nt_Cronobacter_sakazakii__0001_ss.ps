%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:09:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAAUCUGAAGAUGUUCAGGCUU_GAGGGAGCCUCGUUGGUUAAUUGAA__AAUGACCUUCGGGGCUUUCUUCUUUCUGCC__UCACCAUAACGGUAA___CUCUGCCGAUUGCAUGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[90.88196564 304.32858276]
[100.63179779 291.58807373]
[99.99517822 276.60159302]
[88.88603973 266.74652100]
[88.02692413 251.55715942]
[98.43916321 239.97169495]
[97.80254364 224.98519897]
[97.16592407 209.99871826]
[96.52930450 195.01223755]
[95.89268494 180.02575684]
[95.25607300 165.03926086]
[80.95069885 162.36773682]
[67.59397888 156.59028625]
[55.85108948 147.99462891]
[46.30682373 137.00883484]
[33.05928802 144.04466248]
[19.81175613 151.08049011]
[6.63964081 158.25651550]
[-6.45557117 165.57194519]
[-19.55078316 172.88735962]
[-32.64599609 180.20278931]
[-45.74120712 187.51820374]
[-51.47820663 202.50041199]
[-66.81172180 207.21876526]
[-79.97918701 198.05377197]
[-80.87965393 182.03601074]
[-68.82236481 171.45294189]
[-53.05662918 174.42300415]
[-39.96141815 167.10757446]
[-26.86620712 159.79214478]
[-13.77099514 152.47673035]
[-0.67578346 145.16130066]
[3.65977907 139.11146545]
[12.77593040 137.83294678]
[26.02346420 130.79711914]
[39.27099991 123.76129913]
[35.49467850 109.57467651]
[34.98746490 94.90281677]
[37.77506256 80.48927307]
[43.71620178 67.06453705]
[52.50978088 55.30894852]
[42.84089279 43.84105301]
[33.17200470 32.37316132]
[23.50311470 20.90526772]
[13.83422661 9.43737316]
[-1.67127526 7.94835472]
[-11.31353855 -3.81945753]
[-9.79843235 -18.59240723]
[-19.46732140 -30.06030083]
[-29.13620949 -41.52819443]
[-38.80509949 -52.99608994]
[-48.47398758 -64.46398163]
[-63.57888412 -61.68232346]
[-78.04555511 -66.84090424]
[-87.98254395 -78.55209351]
[-90.71684265 -93.66563416]
[-85.51293945 -108.11606598]
[-73.77066803 -118.01629639]
[-58.64862823 -120.70320892]
[-44.21457672 -115.45403290]
[-34.35120392 -103.68078613]
[-31.71170616 -88.55039978]
[-37.00609207 -74.13287354]
[-27.33720398 -62.66497803]
[-17.66831589 -51.19708252]
[-7.99942684 -39.72919083]
[1.66946161 -28.26129532]
[16.48596954 -27.25796890]
[26.45496178 -15.76562977]
[25.30212021 -0.23151578]
[34.97100830 11.23637867]
[44.63989639 22.70427132]
[54.30878448 34.17216492]
[63.97767639 45.64006042]
[72.53222656 40.85498810]
[81.70734406 37.40615463]
[91.29573822 35.37147141]
[101.08078766 34.79690933]
[110.84141541 35.69545364]
[120.35710907 38.04679871]
[129.41288757 41.79782486]
[137.80413818 46.86378098]
[145.34132385 53.13022232]
[151.85411072 60.45557022]
[157.19538879 68.67433167]
[161.24449158 77.60080719]
[163.90991211 87.03334808]
[178.85588074 85.76126099]
[193.80183411 84.48917389]
[208.74780273 83.21707916]
[209.88967896 68.22734070]
[213.42141724 53.61491776]
[219.25155640 39.75830841]
[227.22906494 27.01642799]
[237.14732361 15.71932507]
[248.74940491 6.15962172]
[261.73477173 -1.41506243]
[275.76712036 -6.80852556]
[290.48297119 -9.88106346]
[305.50109863 -10.55309105]
[320.43255615 -8.80719948]
[334.89053345 -4.68861341]
[348.50057983 1.69598711]
[360.91012573 10.18122482]
[371.79776001 20.54731178]
[380.88143921 32.52574158]
[387.92590332 45.80624771]
[392.74865723 60.04482651]
[395.22479248 74.87266541]
[395.29019165 89.90569305]
[392.94311523 104.75451660]
[388.24441528 119.03450775]
[381.31576538 132.37579346]
[372.33660889 144.43278503]
[361.53958130 154.89320374]
[349.20431519 163.48606873]
[335.65032959 169.98883057]
[321.22872925 174.23303223]
[306.31301880 176.10874939]
[291.28961182 175.56739807]
[276.54760742 172.62298584]
[262.46887207 167.35180664]
[249.41807556 159.89036560]
[237.73327637 150.43194580]
[227.71713257 139.22155762]
[219.62907410 126.54956055]
[213.67861938 112.74419403]
[210.01988220 98.16304779]
[195.07392883 99.43513489]
[180.12796021 100.70722198]
[165.18200684 101.97930908]
[160.65550232 123.94828796]
[148.95288086 143.08395386]
[131.45864868 157.12236023]
[110.24255371 164.40264893]
[110.87917328 179.38912964]
[111.51579285 194.37561035]
[112.15241241 209.36210632]
[112.78902435 224.34858704]
[113.42564392 239.33506775]
[124.78288269 249.99578857]
[125.21501923 265.20327759]
[114.98166656 275.96496582]
[115.61827850 290.95144653]
[126.41345978 302.81921387]
[123.72340393 318.63513184]
[109.61168671 326.26657104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 144]
[3 143]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[11 135]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[87 131]
[88 130]
[89 129]
[90 128]
] def

init

% Start Annotations
2 144 0.0 1 colorpair
3 143 0.0 1 colorpair
6 140 0.16 1 colorpair
7 139 0.0 1 colorpair
8 138 0.0 1 colorpair
9 137 0.0 1 colorpair
10 136 0.0 1 colorpair
11 135 0.0 1 colorpair
15 36 0.0 1 colorpair
16 35 0.0 1 colorpair
18 32 0.16 1 colorpair
19 31 0.16 1 colorpair
20 30 0.32 1 colorpair
22 28 0.16 0.2 colorpair
41 74 0.0 0.2 colorpair
42 73 0.0 0.2 colorpair
43 72 0.16 1 colorpair
44 71 0.0 1 colorpair
45 70 0.0 0.2 colorpair
48 67 0.0 0.2 colorpair
49 66 0.16 1 colorpair
50 65 0.0 0.2 colorpair
51 64 0.16 0.6 colorpair
52 63 0.0 1 colorpair
87 131 0.0 1 colorpair
88 130 0.0 1 colorpair
89 129 0.16 0.6 colorpair
90 128 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
140 cmark
17 34 3 gmark
17 cmark
34 cmark
18 cmark
32 cmark
19 cmark
31 cmark
20 cmark
30 cmark
21 29 3 gmark
21 cmark
29 cmark
22 28 2 gmark
28 cmark
41 74 2 gmark
42 73 2 gmark
43 cmark
45 70 2 gmark
48 67 2 gmark
66 cmark
50 65 2 gmark
51 64 1 gmark
64 cmark
89 129 1 gmark
89 cmark
129 cmark
90 128 2 gmark

% End Annotations
showpage
end
%%EOF
