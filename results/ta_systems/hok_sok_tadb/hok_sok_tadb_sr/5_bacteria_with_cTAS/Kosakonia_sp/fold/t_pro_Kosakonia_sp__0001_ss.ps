%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:55:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAUCCCGCAAACUUUUAUCUGCUGCGUGUUUAUUCUCUGCUUCACGCUGCUGAUAUUCACCUAUCUGACCCGCAAAUCCCUGUGCGAGCUUCGCUACCGGGAUAAGGAGAGAGAGGUGGCGGCUUUGAUGGCUUACGAAUCCGGUAAG\
) } def
/len { sequence length } bind def

/coor [
[152.93289185 258.01248169]
[147.26339722 244.12519836]
[135.28956604 235.26647949]
[137.23690796 219.56558228]
[131.56739807 205.67829895]
[125.89790344 191.79100037]
[116.09271240 188.66389465]
[109.51501465 180.46400452]
[108.54946899 169.77508545]
[113.76067352 160.14146423]
[108.66233826 146.03448486]
[103.56399536 131.92750549]
[98.46566010 117.82051849]
[99.69512939 132.77005005]
[91.51631165 145.34410095]
[77.35189819 150.28065491]
[63.12947464 145.51382446]
[54.80089188 133.03845215]
[55.85152817 118.07530212]
[65.84170532 106.88618469]
[80.59194946 104.15375519]
[65.64186096 102.93111420]
[50.69177246 101.70847321]
[35.74168396 100.48583984]
[21.35676765 107.07254791]
[9.30250645 98.32360840]
[-5.64758205 97.10096741]
[-20.03249741 103.68767548]
[-32.08675766 94.93873596]
[-47.03684616 93.71609497]
[-61.98693466 92.49345398]
[-76.93702698 91.27081299]
[-91.88711548 90.04817200]
[-98.79845428 103.58707428]
[-110.36806488 113.44672394]
[-124.83164215 118.12360382]
[-139.98361206 116.90451050]
[-153.51341248 109.97536469]
[-163.35783386 98.39279938]
[-168.01568604 83.92308044]
[-166.77665710 68.77272034]
[-159.82972717 55.25205231]
[-148.23422241 45.42287827]
[-133.75837708 40.78406906]
[-118.60967255 42.04301453]
[-105.09815216 49.00773621]
[-95.28423309 60.61615753]
[-90.66447449 75.09808350]
[-75.71438599 76.32072449]
[-60.76429749 77.54336548]
[-45.81420898 78.76600647]
[-30.86411858 79.98864746]
[-17.54853439 73.31447601]
[-4.42494297 82.15087891]
[10.52514553 83.37351227]
[23.84073067 76.69934845]
[36.96432114 85.53575134]
[51.91440964 86.75838470]
[66.86450195 87.98102570]
[81.81459045 89.20366669]
[89.79070282 85.21948242]
[97.44274139 85.44435120]
[102.94288635 88.78623199]
[112.05406189 76.87042236]
[121.16523743 64.95462036]
[130.27641296 53.03881073]
[139.38760376 41.12300491]
[141.62356567 25.46059799]
[155.50068665 20.04994583]
[164.61186218 8.13413906]
[173.72303772 -3.78166747]
[171.83093262 -19.24315834]
[181.24070740 -31.19768906]
[195.99253845 -32.90623474]
[205.10371399 -44.82204056]
[201.06590271 -54.81055069]
[201.56759644 -65.49146271]
[206.44934082 -74.91348267]
[214.75765991 -81.38366699]
[224.93058777 -83.77148438]
[235.09107971 -81.70595551]
[244.91398621 -93.04219818]
[254.73690796 -104.37844086]
[264.55981445 -115.71468353]
[274.38272095 -127.05092621]
[277.57244873 -142.54725647]
[291.75451660 -147.09902954]
[301.57742310 -158.43527222]
[311.28417969 -169.87112427]
[320.87380981 -181.40538025]
[330.46343994 -192.93963623]
[340.05307007 -204.47389221]
[345.52981567 -220.51887512]
[362.46386719 -219.69786072]
[366.36273193 -203.19830322]
[351.58731079 -194.88427734]
[341.99768066 -183.35002136]
[332.40808105 -171.81575012]
[322.81845093 -160.28149414]
[320.94931030 -153.08412170]
[312.91366577 -148.61236572]
[303.09075928 -137.27612305]
[300.60360718 -122.59063721]
[285.71896362 -117.22801971]
[275.89605713 -105.89177704]
[266.07315063 -94.55552673]
[256.25024414 -83.21928406]
[246.42732239 -71.88304138]
[249.29829407 -52.66645813]
[236.99661255 -37.23777008]
[217.01953125 -35.71086121]
[207.90834045 -23.79505539]
[210.12600708 -9.11113358]
[201.05572510 3.10298038]
[185.63883972 5.32951021]
[176.52766418 17.24531746]
[167.41648865 29.16112328]
[165.83219910 43.97122955]
[151.30340576 50.23418045]
[142.19223022 62.14999008]
[133.08103943 74.06579590]
[123.96987152 85.98159790]
[114.85868835 97.89740753]
[112.57263947 112.72218323]
[117.67098236 126.82916260]
[122.76931763 140.93614197]
[127.86766052 155.04312134]
[143.85650635 167.25473022]
[139.78518677 186.12150574]
[145.45469666 200.00878906]
[151.12419128 213.89607239]
[163.50354004 223.74810791]
[161.15068054 238.45568848]
[166.82019043 252.34298706]
[178.41877747 258.07464600]
[182.83781433 269.80578613]
[178.20880127 281.02239990]
[183.59384155 295.02246094]
[188.97888184 309.02249146]
[194.36392212 323.02255249]
[199.74896240 337.02258301]
[214.59585571 341.93218994]
[222.76937866 355.26364136]
[220.41024780 370.72222900]
[208.63238525 381.00891113]
[192.99691772 381.26663208]
[180.88645935 371.37365723]
[178.01916504 356.00119019]
[185.74891663 342.40762329]
[180.36387634 328.40759277]
[174.97883606 314.40753174]
[169.59379578 300.40750122]
[164.20875549 286.40744019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[4 131]
[5 130]
[6 129]
[10 127]
[11 126]
[12 125]
[13 124]
[21 60]
[22 59]
[23 58]
[24 57]
[26 55]
[27 54]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[63 123]
[64 122]
[65 121]
[66 120]
[67 119]
[69 117]
[70 116]
[71 115]
[74 112]
[75 111]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[87 102]
[88 101]
[89 99]
[90 98]
[91 97]
[92 96]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
] def

init

% Start Annotations
1 134 0.0 1 colorpair
2 133 0.0 1 colorpair
4 131 0.0 1 colorpair
5 130 0.0 1 colorpair
6 129 0.0 1 colorpair
10 127 0.0 1 colorpair
11 126 0.0 1 colorpair
12 125 0.0 1 colorpair
13 124 0.0 1 colorpair
21 60 0.0 1 colorpair
22 59 0.0 1 colorpair
23 58 0.0 1 colorpair
24 57 0.0 1 colorpair
26 55 0.0 1 colorpair
27 54 0.0 1 colorpair
29 52 0.0 1 colorpair
30 51 0.0 1 colorpair
31 50 0.0 1 colorpair
32 49 0.0 1 colorpair
33 48 0.0 1 colorpair
63 123 0.0 1 colorpair
64 122 0.0 1 colorpair
65 121 0.0 1 colorpair
66 120 0.0 1 colorpair
67 119 0.0 1 colorpair
69 117 0.0 1 colorpair
70 116 0.0 1 colorpair
71 115 0.0 1 colorpair
74 112 0.0 1 colorpair
75 111 0.0 1 colorpair
81 108 0.0 1 colorpair
82 107 0.0 1 colorpair
83 106 0.0 1 colorpair
84 105 0.0 1 colorpair
85 104 0.0 1 colorpair
87 102 0.0 1 colorpair
88 101 0.0 1 colorpair
89 99 0.0 1 colorpair
90 98 0.0 1 colorpair
91 97 0.0 1 colorpair
92 96 0.0 1 colorpair
137 153 0.0 1 colorpair
138 152 0.0 1 colorpair
139 151 0.0 1 colorpair
140 150 0.0 1 colorpair
141 149 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
