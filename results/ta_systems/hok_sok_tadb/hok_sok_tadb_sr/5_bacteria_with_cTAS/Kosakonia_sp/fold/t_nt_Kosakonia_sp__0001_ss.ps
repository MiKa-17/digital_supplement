%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:55:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUACGCUGACGUUGCUUAGGCGUCGGUGUAGCCUCGGGUUAAUUGAAAAAUUGACUCGGGGCUUUCAUCUUUCUGCCUCACAUCAUUUCUGCAUAACGUCUUAAAGCACAGCCAUGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.25906372 108.45372009]
[108.52426910 112.84009552]
[105.02241516 116.79588318]
[99.90287781 119.64916229]
[93.55775452 120.79294586]
[86.59236908 119.76896667]
[73.44467926 126.98965454]
[60.29698944 134.21034241]
[47.14930344 141.43103027]
[34.00161362 148.65171814]
[20.85392761 155.87240601]
[7.70623922 163.09309387]
[-5.44144869 170.31376648]
[-18.58913612 177.53445435]
[-31.73682404 184.75514221]
[-44.88451004 191.97583008]
[-58.03219986 199.19651794]
[-71.17988586 206.41720581]
[-84.32757568 213.63789368]
[-97.47526550 220.85858154]
[-110.62294769 228.07925415]
[-123.77063751 235.29994202]
[-129.61566162 250.24034119]
[-144.98283386 254.84786987]
[-158.08378601 245.58802795]
[-158.86859131 229.56419373]
[-146.73519897 219.06845093]
[-130.99131775 222.15226746]
[-117.84363556 214.93157959]
[-104.69594574 207.71089172]
[-91.54826355 200.49020386]
[-78.40057373 193.26951599]
[-65.25288391 186.04882812]
[-52.10519791 178.82814026]
[-38.95751190 171.60745239]
[-25.80982208 164.38676453]
[-12.66213417 157.16609192]
[0.48555315 149.94540405]
[13.63324070 142.72471619]
[26.78092766 135.50402832]
[39.92861557 128.28334045]
[53.07630539 121.06265259]
[66.22399139 113.84197235]
[79.37168121 106.62128448]
[81.60731506 91.78881836]
[71.17207336 81.01358032]
[60.73683548 70.23834229]
[50.30159760 59.46310043]
[39.86635971 48.68785858]
[29.43112183 37.91262054]
[18.99588394 27.13737869]
[8.56064606 16.36213875]
[-1.87459254 5.58689833]
[-17.78470421 1.61193013]
[-22.03658867 -14.22642517]
[-10.25627232 -25.63502693]
[5.43766594 -20.87768173]
[8.90064812 -4.84834003]
[19.33588600 5.92690039]
[29.77112389 16.70214081]
[40.20636368 27.47738075]
[50.64160156 38.25262070]
[61.07683945 49.02786255]
[71.51207733 59.80310059]
[81.94731903 70.57833862]
[92.38255310 81.35358429]
[106.61839294 86.08020782]
[121.42611694 83.68621063]
[133.81452942 73.84558105]
[147.61352539 79.45243073]
[162.42124939 77.05843353]
[177.22897339 74.66443634]
[192.03671265 72.27043152]
[197.56811523 58.01032257]
[209.41636658 48.49634933]
[224.33677673 46.20552444]
[238.30705261 51.65410614]
[247.61169434 63.28550339]
[262.41943359 60.89150238]
[277.22714233 58.49750519]
[292.03488159 56.10350800]
[304.42327881 46.26287842]
[318.22229004 51.86972809]
[333.02999878 49.47573090]
[347.83773804 47.08173370]
[362.64547729 44.68773270]
[377.45318604 42.29373550]
[392.26092529 39.89973831]
[407.06863403 37.50573730]
[409.05865479 24.80313301]
[414.55368042 13.19887924]
[423.09545898 3.63695407]
[433.97836304 -3.10799623]
[446.30758667 -6.49340677]
[459.07290649 -6.25242805]
[471.23129272 -2.41493082]
[481.79217529 4.69576645]
[489.89816284 14.49011326]
[494.89468384 26.16119766]
[509.82534790 24.72085190]
[524.75604248 23.28050613]
[529.54565430 8.82437706]
[539.80578613 -2.42947841]
[553.75885010 -8.53126049]
[568.98736572 -8.42379951]
[582.85296631 -2.12571287]
[592.95324707 9.27181721]
[597.53839111 23.79409981]
[595.81390381 38.92506027]
[588.07855225 52.04317474]
[575.67260742 60.87564087]
[560.74548340 63.89218521]
[545.88330078 60.57017517]
[533.66107178 51.48516846]
[526.19641113 38.21119308]
[511.26571655 39.65153885]
[496.33502197 41.09188461]
[491.82141113 57.77186966]
[481.26370239 71.49551392]
[466.23809814 80.17008972]
[449.00479126 82.45998383]
[432.16772461 77.99227142]
[418.28125000 67.41715240]
[409.46264648 52.31346512]
[394.65490723 54.70746231]
[379.84719849 57.10146332]
[365.03945923 59.49546051]
[350.23171997 61.88945770]
[335.42401123 64.28345490]
[320.61627197 66.67745209]
[309.28701782 76.34684753]
[294.42886353 70.91123199]
[279.62115479 73.30522919]
[264.81341553 75.69922638]
[250.00569153 78.09323120]
[244.84022522 92.06404114]
[233.29853821 101.63719940]
[218.41638184 104.16461945]
[204.17379761 98.86881256]
[194.43070984 87.07816315]
[179.62298584 89.47216034]
[164.81524658 91.86615753]
[150.00752258 94.26015472]
[138.67826843 103.92955017]
[123.82011414 98.49393463]
[109.01239014 100.88793182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[67 146]
[68 145]
[70 143]
[71 142]
[72 141]
[73 140]
[78 135]
[79 134]
[80 133]
[81 132]
[83 130]
[84 129]
[85 128]
[86 127]
[87 126]
[88 125]
[89 124]
[99 117]
[100 116]
[101 115]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.0 1 colorpair
12 38 0.0 1 colorpair
13 37 0.0 1 colorpair
14 36 0.0 1 colorpair
15 35 0.0 1 colorpair
16 34 0.0 1 colorpair
17 33 0.0 1 colorpair
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.0 1 colorpair
22 28 0.0 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.0 1 colorpair
49 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair
67 146 0.0 1 colorpair
68 145 0.0 1 colorpair
70 143 0.0 1 colorpair
71 142 0.0 1 colorpair
72 141 0.0 1 colorpair
73 140 0.0 1 colorpair
78 135 0.0 1 colorpair
79 134 0.0 1 colorpair
80 133 0.0 1 colorpair
81 132 0.0 1 colorpair
83 130 0.0 1 colorpair
84 129 0.0 1 colorpair
85 128 0.0 1 colorpair
86 127 0.0 1 colorpair
87 126 0.0 1 colorpair
88 125 0.0 1 colorpair
89 124 0.0 1 colorpair
99 117 0.0 1 colorpair
100 116 0.0 1 colorpair
101 115 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
