%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:22:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AUGCAGCAAAAAGCUAUGUUAAUCUCUCUGAUCGUCAUCUGUUUAACGCUUAUAGUGUUCACACUGAUGACAAGAAAAGCACUCUGCGAAGUGCGAAUCCGAAACGGCAAUAAGGAGGUCGCUGCGUUCAUAGCCUGCAAAUCGAAG_\
) } def
/len { sequence length } bind def

/coor [
[87.44029236 251.51287842]
[90.21791840 236.71864319]
[95.91706848 222.78649902]
[104.30435944 210.28697205]
[115.03634644 199.73190308]
[127.67355347 191.55352783]
[122.22093201 177.57965088]
[116.76831818 163.60578918]
[111.31569672 149.63192749]
[105.86307526 135.65806580]
[93.78923798 137.59295654]
[81.12764740 135.34538269]
[69.34954834 128.76452637]
[59.95048523 118.22081757]
[54.26563263 104.60121918]
[42.24064636 113.56781006]
[30.21565819 122.53439331]
[18.19067192 131.50097656]
[6.16568375 140.46755981]
[-5.85930395 149.43415833]
[-11.84261894 164.70281982]
[-28.09558296 166.88757324]
[-37.89854050 153.74093628]
[-31.16705132 138.78703308]
[-14.82589054 137.40916443]
[-2.80090284 128.44258118]
[9.22408485 119.47599030]
[21.24907303 110.50940704]
[33.27405930 101.54281616]
[45.29904556 92.57623291]
[44.91168594 85.08624268]
[32.32594299 93.24707031]
[18.96564102 86.42781067]
[18.19124794 71.44781494]
[30.77716827 63.28726196]
[44.13696671 70.10626221]
[43.74960709 62.61627197]
[30.86380005 54.93799591]
[17.97799110 47.25971985]
[5.09218121 39.58144379]
[-5.83945704 49.99306488]
[-19.17528343 57.06825638]
[-33.92568970 60.28199387]
[-48.99609756 59.39579010]
[-63.26818466 54.47541428]
[-75.68286896 45.88598633]
[-85.31889343 34.26490402]
[-91.46120453 20.47452164]
[-93.65399933 5.53818274]
[-91.73455811 -9.43573856]
[-85.84532166 -23.33607864]
[-76.42330170 -35.13134003]
[-64.16768646 -43.94623566]
[-49.98791122 -49.12664032]
[-34.93621445 -50.28813553]
[-20.12953568 -47.34452820]
[-6.66662550 -40.51425934]
[4.45347929 -30.30417252]
[12.40559196 -17.47192955]
[16.59961319 -2.96976519]
[16.72431946 12.12616253]
[12.77045631 26.69563484]
[25.65626526 34.37391281]
[38.54207611 42.05218506]
[51.42788315 49.73046112]
[43.80068588 36.81435394]
[36.17348480 23.89824867]
[28.54628372 10.98214149]
[20.91908455 -1.93396533]
[9.47575855 -11.63191891]
[1.24236381 -24.17030716]
[-3.10882545 -38.52534866]
[-3.22252536 -53.52491760]
[0.91054827 -67.94426727]
[8.95292091 -80.60603333]
[20.24791527 -90.47634888]
[33.87327194 -96.74927521]
[48.71644592 -98.91262817]
[63.56546783 -96.78976440]
[77.20787811 -90.55400848]
[88.52974701 -80.71453094]
[96.60661316 -68.07474518]
[100.77899170 -53.66671753]
[100.70619965 -38.66689301]
[96.39416504 -24.30004120]
[88.19155121 -11.73533535]
[84.56686401 2.82013345]
[80.94218445 17.37560081]
[77.31749725 31.93107033]
[73.69281006 46.48653793]
[83.85203552 35.45067978]
[84.62836456 19.42642021]
[97.72442627 10.15966606]
[113.09403992 14.75907516]
[118.94695282 29.69637680]
[110.79331207 43.51295090]
[94.88789368 45.60990143]
[84.72866821 56.64576340]
[107.34896851 57.94820786]
[124.92634583 69.47032928]
[133.63342285 86.78386688]
[148.42883301 84.31494904]
[163.22425842 81.84603119]
[167.00317383 67.09342194]
[176.46090698 55.15729141]
[189.95884705 48.10565948]
[205.15840149 47.16025543]
[219.42613220 52.48488235]
[230.29008484 63.15701294]
[235.86801147 77.32763672]
[235.19351196 92.54161072]
[228.38342285 106.16301727]
[216.61766052 115.83186340]
[201.93469238 119.87297058]
[186.87844849 117.58618927]
[174.05751038 109.36771393]
[165.69317627 96.64144897]
[150.89775085 99.11037445]
[136.10234070 101.57929230]
[135.16108704 108.34088135]
[132.96499634 114.80480194]
[129.59240723 120.74034882]
[125.16370392 125.93569946]
[119.83694458 130.20544434]
[125.28955841 144.17930603]
[130.74218750 158.15316772]
[136.19479370 172.12704468]
[141.64741516 186.10090637]
[156.48397827 183.55899048]
[171.52850342 184.05603027]
[186.16494751 187.57167053]
[199.79393005 193.96194458]
[211.85736084 202.96519470]
[221.86126709 214.21272278]
[229.39596558 227.24395752]
[234.15293884 241.52526855]
[235.93739319 256.47186279]
[234.67623901 271.47167969]
[230.42114258 285.91046143]
[223.34631348 299.19699097]
[213.74150085 310.78717041]
[201.99998474 320.20639038]
[188.60258484 327.06896973]
[174.09791565 331.09381104]
[159.07994080 332.11618042]
[144.16362000 330.09417725]
[129.95979309 325.11062622]
[117.05007172 317.36953735]
[105.96311951 307.18798828]
[97.15293121 294.98284912]
[90.98027802 281.25393677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[37 65]
[38 64]
[39 63]
[40 62]
[90 98]
[91 97]
[101 119]
[102 118]
[103 117]
] def

init

% Start Annotations
6 128 0.16 1 colorpair
7 127 0.0 0.6 colorpair
8 126 0.16 1 colorpair
9 125 0.0 1 colorpair
10 124 0.0 1 colorpair
15 30 0.16 0.6 colorpair
16 29 0.16 0.2 colorpair
17 28 0.16 0.6 colorpair
18 27 0.16 0.2 colorpair
19 26 0.0 0.6 colorpair
20 25 0.32 1 colorpair
37 65 0.0 0.6 colorpair
38 64 0.16 1 colorpair
39 63 0.16 0.6 colorpair
40 62 0.0 0.2 colorpair
90 98 0.16 1 colorpair
91 97 0.0 1 colorpair
101 119 0.0 1 colorpair
102 118 0.16 1 colorpair
103 117 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
128 cmark
7 127 1 gmark
8 cmark
126 cmark
15 30 1 gmark
15 cmark
30 cmark
16 29 2 gmark
16 cmark
29 cmark
17 28 1 gmark
17 cmark
28 cmark
18 27 2 gmark
18 cmark
27 cmark
19 26 1 gmark
20 cmark
25 cmark
37 65 1 gmark
64 cmark
39 63 1 gmark
39 cmark
63 cmark
40 62 2 gmark
90 cmark
98 cmark
102 cmark
103 cmark
117 cmark

% End Annotations
showpage
end
%%EOF
