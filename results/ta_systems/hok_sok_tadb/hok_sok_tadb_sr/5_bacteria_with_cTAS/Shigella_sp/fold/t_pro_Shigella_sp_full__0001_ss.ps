%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:22:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AUGCAGCAAAAACCUAUGUUAAUCUCUCUGAUCGUCAUCUGUUUAACGAUUAUAAUAUUCACACUGAUGACAAGAAAAACACUCUGCGAACUGCGAAUCCGAAACGGCAAUAAGGAGGUCGCUGCGUUCAUAGCCUGCAAAUCCAAG_\
) } def
/len { sequence length } bind def

/coor [
[77.60539246 249.77383423]
[66.11191559 239.95591736]
[58.02435303 227.18554688]
[54.06184006 212.59822083]
[54.57672119 197.49105835]
[59.52321625 183.20738220]
[68.46148682 171.01725769]
[80.59674072 162.00466919]
[94.84992218 156.97096252]
[94.23004913 141.98377991]
[93.61017609 126.99659729]
[92.99030304 112.00940704]
[86.21868896 108.78524017]
[72.67546082 102.33689880]
[65.90384674 99.11273193]
[53.87886429 108.07931519]
[41.85387421 117.04590607]
[29.82888794 126.01248932]
[17.80389977 134.97908020]
[5.77891254 143.94566345]
[-0.20440187 159.21432495]
[-16.45736694 161.39907837]
[-26.26032448 148.25244141]
[-19.52883339 133.29855347]
[-3.18767381 131.92068481]
[8.83731365 122.95409393]
[20.86230087 113.98750305]
[32.88728714 105.02091980]
[44.91227722 96.05432892]
[56.93726349 87.08774567]
[42.11790466 84.76684570]
[27.61351395 80.94288635]
[13.57612514 75.65594482]
[0.15287466 68.96144867]
[-12.51553917 60.92955399]
[-24.29632950 51.64445877]
[-35.06600952 41.20348358]
[-44.71170044 29.71606827]
[-53.13228989 17.30262375]
[-60.23952484 4.09326124]
[-65.95890045 -9.77355957]
[-70.23047638 -24.15249062]
[-73.00946808 -38.89281464]
[-74.26675415 -53.84003067]
[-73.98915863 -68.83746338]
[-72.17958069 -83.72791290]
[-68.85700226 -98.35529327]
[-64.05623627 -112.56629944]
[-57.82761002 -126.21196747]
[-50.23640823 -139.14926147]
[-41.36220551 -151.24258423]
[-31.29800987 -162.36517334]
[-20.14931870 -172.40045166]
[-8.03298759 -181.24320984]
[4.92398357 -188.80079651]
[18.58578110 -194.99395752]
[32.80920792 -199.75779724]
[47.44517517 -203.04237366]
[62.34027100 -204.81326294]
[77.33837128 -205.05191040]
[92.28227234 -203.75581360]
[107.01532745 -200.93853760]
[121.38311768 -196.62963867]
[135.23503113 -190.87425232]
[148.42590332 -183.73274231]
[160.81742859 -175.27993774]
[172.27975464 -165.60444641]
[182.69271851 -154.80767822]
[191.94718933 -143.00282288]
[199.94615173 -130.31358337]
[206.60575867 -116.87299347]
[211.85623169 -102.82191467]
[215.64250183 -88.30764771]
[217.92489624 -73.48230743]
[218.67950439 -58.50130081]
[217.89840698 -43.52165222]
[215.58978271 -28.70037460]
[211.77784729 -14.19282055]
[206.50254822 -0.15105551]
[199.81916809 13.27773857]
[191.79777527 25.95280266]
[182.52244568 37.74128342]
[172.09040833 48.51961136]
[160.61097717 58.17481613]
[148.20451355 66.60569000]
[135.00105286 73.72386932]
[121.14849854 79.45135498]
[136.06848145 77.90398407]
[150.98844910 76.35661316]
[163.91683960 67.23699951]
[177.37437439 73.62010193]
[192.29434204 72.07273102]
[207.21432495 70.52536011]
[222.13429260 68.97798920]
[237.83668518 56.40328979]
[255.16728210 64.89529419]
[270.01055908 62.73267746]
[284.85385132 60.57006073]
[299.69714355 58.40744400]
[313.84179688 46.66290283]
[329.88455200 53.70932388]
[344.67999268 51.24040604]
[359.47540283 48.77148819]
[363.25433350 34.01887131]
[372.71206665 22.08274460]
[386.20999146 15.03111172]
[401.40954590 14.08571053]
[415.67727661 19.41033745]
[426.54122925 30.08246803]
[432.11914062 44.25309372]
[431.44464111 59.46706390]
[424.63458252 73.08847046]
[412.86880493 82.75731659]
[398.18585205 86.79842377]
[383.12960815 84.51164246]
[370.30865479 76.29316711]
[361.94430542 63.56690598]
[347.14889526 66.03582764]
[332.35348511 68.50474548]
[325.03894043 78.18886566]
[312.68652344 80.33660889]
[301.85977173 73.25073242]
[287.01647949 75.41334534]
[272.17318726 77.57595825]
[257.32989502 79.73857880]
[251.93377686 88.50647736]
[242.38827515 92.91825867]
[231.77790833 91.28002930]
[223.68167114 83.89796448]
[208.76168823 85.44533539]
[193.84172058 86.99270630]
[178.92173767 88.54006958]
[167.06053162 97.54901123]
[152.53582764 91.27658844]
[137.61584473 92.82395935]
[122.69586945 94.37133026]
[122.84169006 109.37062073]
[107.97748566 111.38953400]
[108.59735870 126.37671661]
[109.21723938 141.36390686]
[109.83711243 156.35108948]
[124.45729065 160.19058228]
[137.29534912 168.17027283]
[147.20974731 179.58062744]
[153.31887817 193.40705872]
[155.07954407 208.42008972]
[152.33517456 223.28482056]
[145.32980347 236.67944336]
[134.68634033 247.41294861]
[121.35120392 254.53091431]
[106.51013184 257.40042114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 141]
[10 140]
[11 139]
[12 138]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[87 136]
[88 135]
[89 134]
[91 132]
[92 131]
[93 130]
[94 129]
[96 125]
[97 124]
[98 123]
[99 122]
[101 119]
[102 118]
[103 117]
] def

init

% Start Annotations
9 141 0.0 1 colorpair
10 140 0.0 0.2 colorpair
11 139 0.0 1 colorpair
12 138 0.16 0.2 colorpair
15 30 0.16 0.2 colorpair
16 29 0.16 0.2 colorpair
17 28 0.16 0.2 colorpair
18 27 0.16 0.2 colorpair
19 26 0.0 0.2 colorpair
20 25 0.32 1 colorpair
87 136 0.0 0.2 colorpair
88 135 0.16 1 colorpair
89 134 0.32 1 colorpair
91 132 0.16 1 colorpair
92 131 0.0 1 colorpair
93 130 0.16 0.2 colorpair
94 129 0.32 1 colorpair
96 125 0.0 0.2 colorpair
97 124 0.0 1 colorpair
98 123 0.16 0.2 colorpair
99 122 0.16 0.2 colorpair
101 119 0.0 1 colorpair
102 118 0.16 1 colorpair
103 117 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 140 2 gmark
12 138 2 gmark
12 cmark
138 cmark
15 30 2 gmark
15 cmark
30 cmark
16 29 2 gmark
16 cmark
29 cmark
17 28 2 gmark
17 cmark
28 cmark
18 27 2 gmark
18 cmark
27 cmark
19 26 2 gmark
20 cmark
25 cmark
87 136 2 gmark
135 cmark
89 cmark
134 cmark
132 cmark
93 130 2 gmark
93 cmark
94 cmark
129 cmark
96 125 2 gmark
98 123 2 gmark
123 cmark
99 122 2 gmark
99 cmark
102 cmark
103 cmark
117 cmark

% End Annotations
showpage
end
%%EOF
