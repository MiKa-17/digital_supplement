%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:13:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAAGAGGCUACUCU_CAACUUGUUGGACAUUCAGGGGUAGCC_____UCGGGUAAAUGAAAAUUUCC______CGGGGCUUUCUACUUUCUGUCCCUC____________AACAAUGCUCA_______AGACAGAAAGUCUUAAGCACC____________\
) } def
/len { sequence length } bind def

/coor [
[222.70075989 274.83413696]
[220.55732727 289.68020630]
[217.05657959 304.26599121]
[212.22824097 318.46765137]
[206.11328125 332.16464233]
[198.76361084 345.24066162]
[190.24163818 357.58471680]
[180.61970520 369.09204102]
[169.97949219 379.66491699]
[158.41133118 389.21362305]
[146.01341248 397.65704346]
[132.89099121 404.92355347]
[119.15547180 410.95144653]
[104.92344666 415.68954468]
[90.31574249 419.09762573]
[75.45636749 421.14675903]
[60.47146606 421.81958008]
[45.48824310 421.11032104]
[30.63389778 419.02502441]
[16.03453064 415.58142090]
[1.81407726 410.80871582]
[-11.90674019 404.74743652]
[-25.01144409 397.44903564]
[-37.38878632 388.97546387]
[-48.93368912 379.39865112]
[-59.54815292 368.79992676]
[-69.14205933 357.26922607]
[-77.63397980 344.90444946]
[-84.95180511 331.81057739]
[-91.03342438 318.09878540]
[-95.82720947 303.88540649]
[-99.29246521 289.29116821]
[-101.39977264 274.43994141]
[-102.13123322 259.45776367]
[-101.48065186 244.47189331]
[-99.45355225 229.60949707]
[-96.06712341 214.99674988]
[-91.35013580 200.75772095]
[-85.34262085 187.01327515]
[-78.09558105 173.88009644]
[-69.67053223 161.46968079]
[-60.13900757 149.88735962]
[-49.58191299 139.23149109]
[-38.08887100 129.59249878]
[-25.75745201 121.05223846]
[-12.69233704 113.68319702]
[0.99556166 107.54793549]
[15.19004440 102.69853973]
[29.77061081 99.17617035]
[44.61348343 97.01073456]
[59.59265900 96.22061157]
[74.58097839 96.81250763]
[89.46337891 98.78359985]
[79.48349762 87.58529663]
[64.25420380 83.29820251]
[60.72575760 68.82756042]
[50.11915588 58.22096252]
[39.51255417 47.61436081]
[28.90595245 37.00775909]
[12.93417454 33.28830719]
[8.42898083 17.52013397]
[20.02492905 5.92418528]
[35.79310226 10.42937851]
[39.51255417 26.40115738]
[50.11915588 37.00775909]
[60.72575760 47.61436081]
[71.33235931 58.22096252]
[85.80300140 61.74940491]
[90.09009552 76.97869873]
[91.48173523 62.04339218]
[102.91263580 52.33079910]
[117.87666321 53.36903381]
[127.85673523 64.56716919]
[127.17247772 79.55155945]
[116.21336365 89.79351807]
[101.21640015 89.46337891]
[115.64147186 93.57645416]
[129.75857544 88.50620270]
[140.13113403 76.55962372]
[154.72460938 79.53947449]
[168.84170532 74.46922302]
[182.95881653 69.39897156]
[197.07591248 64.32871246]
[201.51109314 49.57624435]
[213.64077759 40.37167358]
[228.68663025 40.07794189]
[240.87449646 48.59815598]
[254.99159241 43.52790451]
[269.10870361 38.45765305]
[283.22579956 33.38739777]
[297.34289551 28.31714439]
[307.71545410 16.37057114]
[322.30892944 19.35042191]
[336.42602539 14.28016758]
[350.54312134 9.20991516]
[364.66024780 4.13966179]
[362.03936768 -10.66706181]
[361.95870972 -25.70373344]
[364.42059326 -40.53771973]
[369.35418701 -54.74221420]
[376.61755371 -67.90853119]
[386.00164795 -79.65783691]
[397.23654175 -89.65209961]
[409.99896240 -97.60374451]
[423.92172241 -103.28400421]
[438.60418701 -106.52943420]
[453.62396240 -107.24665833]
[468.54888916 -105.41504669]
[482.94952393 -101.08729553]
[496.41156006 -94.38791656]
[508.54766846 -85.50967407]
[519.00860596 -74.70801544]
[527.49353027 -62.29370880]
[533.75817871 -48.62395477]
[537.62231445 -34.09205246]
[538.97485352 -19.11611366]
[537.77679443 -4.12702894]
[534.06262207 10.44393826]
[527.93927002 24.17755127]
[519.58282471 36.67866516]
[509.23373413 47.58760452]
[497.18981934 56.59048843]
[483.79757690 63.42829132]
[469.44229126 67.90427399]
[454.53704834 69.88965607]
[439.51068115 69.32730865]
[424.79553223 66.23341370]
[410.81497192 60.69699860]
[397.97125244 52.87734222]
[386.63394165 42.99943924]
[377.12918091 31.34749603]
[369.73049927 18.25676155]
[355.61337280 23.32701492]
[341.49627686 28.39726830]
[327.37918091 33.46752167]
[318.01638794 45.05143738]
[302.41314697 42.43424606]
[288.29605103 47.50449753]
[274.17895508 52.57475281]
[260.06182861 57.64500427]
[245.94474792 62.71525955]
[241.96286011 77.04294586]
[230.16825867 86.38914490]
[214.95401001 87.00534058]
[202.14616394 78.44581604]
[188.02906799 83.51606750]
[173.91197205 88.58631897]
[159.79486084 93.65657806]
[150.43205261 105.24049377]
[134.82882690 102.62329865]
[120.71172333 107.69355011]
[134.38465881 113.86209106]
[147.43180847 121.26289368]
[159.74241638 129.83312988]
[171.21197510 139.50004578]
[181.74311829 150.18157959]
[191.24642944 161.78704834]
[199.64126587 174.21792603]
[206.85633850 187.36869812]
[212.83039856 201.12771606]
[217.51274109 215.37817383]
[220.86360168 229.99911499]
[222.85453796 244.86639404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[53 76]
[54 69]
[56 67]
[57 66]
[58 65]
[59 64]
[77 151]
[78 150]
[80 148]
[81 147]
[82 146]
[83 145]
[87 141]
[88 140]
[89 139]
[90 138]
[91 137]
[93 135]
[94 134]
[95 133]
[96 132]
] def

init

% Start Annotations
53 76 0.0 0.6 colorpair
54 69 0.16 1 colorpair
56 67 0.16 1 colorpair
57 66 0.0 0.6 colorpair
58 65 0.16 1 colorpair
59 64 0.0 0.6 colorpair
77 151 0.0 1 colorpair
78 150 0.0 1 colorpair
80 148 0.0 1 colorpair
81 147 0.0 1 colorpair
82 146 0.0 1 colorpair
83 145 0.0 0.6 colorpair
87 141 0.16 0.2 colorpair
88 140 0.0 1 colorpair
89 139 0.0 0.6 colorpair
90 138 0.0 1 colorpair
91 137 0.0 1 colorpair
93 135 0.0 1 colorpair
94 134 0.0 0.6 colorpair
95 133 0.16 1 colorpair
96 132 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
53 76 1 gmark
54 cmark
69 cmark
56 cmark
67 cmark
57 66 1 gmark
58 cmark
59 64 1 gmark
83 145 1 gmark
87 141 2 gmark
87 cmark
141 cmark
89 139 1 gmark
94 134 1 gmark
95 cmark
133 cmark

% End Annotations
showpage
end
%%EOF
