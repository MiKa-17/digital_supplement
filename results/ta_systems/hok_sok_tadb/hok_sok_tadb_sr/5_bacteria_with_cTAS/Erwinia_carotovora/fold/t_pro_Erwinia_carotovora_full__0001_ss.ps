%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:15:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________UUUAGCCUGAUAGUGUUGUGUUUAACGCUAUUGGUGUUCACCUCGAUGGUGCGCGGCUCACUGUGUAAGAUCCGCGUUCAGCAGGGUAACACGGUCAUGGUGGCGUCACUGAACUAC_____\
) } def
/len { sequence length } bind def

/coor [
[88.44077301 256.09558105]
[85.15853882 270.73208618]
[79.43255615 284.59619141]
[71.43000031 297.28314209]
[61.38448334 308.42260742]
[49.58926392 317.68936157]
[36.38868713 324.81289673]
[22.16811562 329.58526611]
[7.34269333 331.86709595]
[-7.65478086 331.59182739]
[-22.38648224 328.76748657]
[-36.42234802 323.47650146]
[-49.35262680 315.87335205]
[-60.79984283 306.17999268]
[-70.42981720 294.67941284]
[-77.96141815 281.70730591]
[-83.17477417 267.64242554]
[-85.91770172 252.89535522]
[-86.11011505 237.89659119]
[-83.74639893 223.08399963]
[-78.89555359 208.88999939]
[-71.69920349 195.72898865]
[-62.36742401 183.98513794]
[-51.17263794 174.00131226]
[-38.44165421 166.06896973]
[-24.54616547 160.41967773]
[-39.19060516 157.17308044]
[-53.83504486 153.92648315]
[-62.96852493 155.12654114]
[-68.76189423 150.44602966]
[-83.33202362 146.88075256]
[-97.90215302 143.31546021]
[-112.47229004 139.75016785]
[-127.04241943 136.18487549]
[-141.61254883 132.61959839]
[-156.18267822 129.05430603]
[-170.75280762 125.48901367]
[-185.32293701 121.92372894]
[-199.89306641 118.35843658]
[-215.47708130 123.46437073]
[-227.50874329 112.32114410]
[-223.61088562 96.39196014]
[-207.79331970 92.06340027]
[-196.32778931 103.78830719]
[-181.75765991 107.35359955]
[-167.18751526 110.91888428]
[-152.61738586 114.48417664]
[-138.04725647 118.04946136]
[-123.47712708 121.61475372]
[-108.90699768 125.18003845]
[-94.33686829 128.74533081]
[-79.76673889 132.31062317]
[-65.19660187 135.87590027]
[-50.58845139 139.28204346]
[-35.94401169 142.52864075]
[-21.29957008 145.77523804]
[-6.47414780 143.49339294]
[6.51623344 135.99339294]
[19.50661469 128.49339294]
[32.49699402 120.99338531]
[45.48737717 113.49338531]
[30.90615082 109.97374725]
[21.05094337 98.66556549]
[19.55708694 83.74014282]
[26.97562218 70.70306396]
[40.57004547 64.36338043]
[55.32573318 67.05963135]
[65.79969025 77.79723358]
[68.12834930 92.61537933]
[61.45169067 106.04910278]
[75.54708099 100.91880035]
[89.64247131 95.78849792]
[103.68106079 90.50474548]
[117.66117859 85.06817627]
[131.64129639 79.63160706]
[141.69886780 67.41867828]
[156.36508179 70.01705170]
[170.34519958 64.58048248]
[184.32531738 59.14391327]
[196.12976074 42.86487198]
[215.08721924 46.44142532]
[228.81689453 40.40022659]
[242.54656982 34.35902405]
[256.27624512 28.31782341]
[270.00592041 22.27662277]
[283.73556519 16.23542404]
[297.46524048 10.19422340]
[300.85177612 -0.24233352]
[309.27740479 -6.92128325]
[319.77191162 -7.79946232]
[328.80383301 -2.82615709]
[342.78396606 -8.26272774]
[356.76406860 -13.69929790]
[370.74420166 -19.13586807]
[384.66418457 -24.72461319]
[398.52236938 -30.46486473]
[405.96548462 -44.67681122]
[421.74423218 -47.57695389]
[433.75451660 -36.94054794]
[432.78305054 -20.92693520]
[419.57507324 -11.82038784]
[404.26263428 -16.60667038]
[390.40441895 -10.86641979]
[385.39050293 -5.35908794]
[376.18075562 -5.15575075]
[362.20065308 0.28081971]
[348.22052002 5.71739006]
[334.24041748 11.15396118]
[323.36447144 27.08791733]
[303.50643921 23.92389488]
[289.77679443 29.96509552]
[276.04711914 36.00629425]
[262.31744385 42.04749680]
[248.58776855 48.08869553]
[234.85809326 54.12989807]
[221.12841797 60.17109680]
[218.25852966 70.07430267]
[210.21682739 76.87406921]
[199.53628540 78.10915375]
[189.76188660 73.12403107]
[175.78176880 78.56060028]
[161.80165100 83.99716949]
[152.74403381 95.82124329]
[137.07786560 93.61172485]
[123.09774780 99.04829407]
[109.11763000 104.48486328]
[103.29177856 110.15058136]
[94.77277374 109.88388824]
[80.67738342 115.01419067]
[66.58199310 120.14449310]
[52.98737717 126.48376465]
[39.99699402 133.98376465]
[27.00661469 141.48376465]
[14.01623344 148.98376465]
[1.02585220 156.48376465]
[15.97701931 157.69314575]
[30.50407410 161.43008423]
[44.18292236 167.58549500]
[56.61423874 175.97967529]
[67.43511963 186.36758423]
[76.32965851 198.44595337]
[83.03820038 211.86219788]
[87.36490631 226.22463989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 56]
[27 55]
[28 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[57 135]
[58 134]
[59 133]
[60 132]
[61 131]
[70 130]
[71 129]
[72 128]
[73 126]
[74 125]
[75 124]
[77 122]
[78 121]
[79 120]
[81 116]
[82 115]
[83 114]
[84 113]
[85 112]
[86 111]
[87 110]
[91 108]
[92 107]
[93 106]
[94 105]
[95 103]
[96 102]
] def

init

% Start Annotations
26 56 0.0 1 colorpair
27 55 0.0 1 colorpair
28 54 0.0 1 colorpair
30 53 0.0 1 colorpair
31 52 0.0 1 colorpair
32 51 0.0 1 colorpair
33 50 0.0 1 colorpair
34 49 0.0 1 colorpair
35 48 0.0 1 colorpair
36 47 0.0 1 colorpair
37 46 0.0 1 colorpair
38 45 0.0 1 colorpair
39 44 0.0 1 colorpair
57 135 0.0 1 colorpair
58 134 0.0 1 colorpair
59 133 0.0 1 colorpair
60 132 0.0 1 colorpair
61 131 0.0 1 colorpair
70 130 0.0 1 colorpair
71 129 0.0 1 colorpair
72 128 0.0 1 colorpair
73 126 0.0 1 colorpair
74 125 0.0 1 colorpair
75 124 0.0 1 colorpair
77 122 0.0 1 colorpair
78 121 0.0 1 colorpair
79 120 0.0 1 colorpair
81 116 0.0 1 colorpair
82 115 0.0 1 colorpair
83 114 0.0 1 colorpair
84 113 0.0 1 colorpair
85 112 0.0 1 colorpair
86 111 0.0 1 colorpair
87 110 0.0 1 colorpair
91 108 0.0 1 colorpair
92 107 0.0 1 colorpair
93 106 0.0 1 colorpair
94 105 0.0 1 colorpair
95 103 0.0 1 colorpair
96 102 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
