%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:54:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AAUGCCGCAAAAGUAUCUGUUGUUUGGCUUAUUAGUGAUUUGCUUCACUAUUUUAUUAUUCACCUGGAUGGUUCGUGAUUCGCUAUGUGAAUUACAGCUCAGGCAGGGAAAUAUGGAGCUGGUGGCAUUCUUAGCCUGUGAAAUUAA____\
) } def
/len { sequence length } bind def

/coor [
[122.93640137 320.65765381]
[113.27275848 321.44912720]
[103.58376312 321.81759644]
[93.88792419 321.76232910]
[84.20375824 321.28344727]
[74.54976654 320.38186646]
[64.94439697 319.05932617]
[55.40598297 317.31832886]
[45.95275116 315.16223145]
[36.60276413 312.59509277]
[27.37388039 309.62188721]
[18.28372383 306.24822998]
[9.34966373 302.48062134]
[0.58876437 298.32623291]
[-7.98223972 293.79299927]
[-16.34697533 288.88955688]
[-24.48946571 283.62530518]
[-32.39415359 278.01031494]
[-40.04594421 272.05526733]
[-47.43021774 265.77157593]
[-54.53286743 259.17123413]
[-61.34033203 252.26681519]
[-67.83959961 245.07154846]
[-74.01825714 237.59916687]
[-79.86450958 229.86393738]
[-85.36718750 221.88064575]
[-90.51576996 213.66453552]
[-95.30043030 205.23130798]
[-99.71202850 196.59706116]
[-103.74213409 187.77828979]
[-107.38304901 178.79185486]
[-110.62782288 169.65490723]
[-113.47025299 160.38490295]
[-115.90490723 150.99955750]
[-117.92714691 141.51678467]
[-119.53309631 131.95471191]
[-120.71969604 122.33158875]
[-121.48468018 112.66581726]
[-121.82657623 102.97585297]
[-121.74473572 93.28019714]
[-121.23932648 83.59738159]
[-120.31130219 73.94589996]
[-118.96243286 64.34418488]
[-117.19530487 54.81057739]
[-115.01329041 45.36329269]
[-112.42055511 36.02037811]
[-109.42205811 26.79967308]
[-106.02351379 17.71879768]
[-102.23143005 8.79509735]
[-98.05303955 0.04561543]
[-93.49632263 -8.51293278]
[-88.56999969 -16.86419868]
[-83.28346252 -24.99223137]
[-77.64681244 -32.88150406]
[-71.67082977 -40.51694489]
[-65.36691284 -47.88396835]
[-58.74711990 -54.96850204]
[-51.82408142 -61.75701904]
[-44.61103058 -68.23654175]
[-37.12174225 -74.39470673]
[-29.37052345 -80.21973419]
[-21.37218094 -85.70050812]
[-13.14199162 -90.82655334]
[-4.69567871 -95.58808899]
[3.95062399 -99.97600555]
[12.78040028 -103.98192596]
[21.77678490 -107.59820557]
[30.92259026 -110.81792450]
[40.20034790 -113.63494110]
[49.59233475 -116.04386902]
[59.08061218 -118.04010773]
[68.64705658 -119.61985016]
[78.27338409 -120.78006744]
[87.94121552 -121.51855469]
[97.63208771 -121.83390045]
[107.32747650 -121.72548676]
[117.00887299 -121.19354248]
[126.65777588 -120.23906708]
[136.25575256 -118.86389160]
[145.78448486 -117.07064819]
[155.22575378 -114.86274719]
[164.56153870 -112.24442291]
[173.77398682 -109.22065735]
[182.84550476 -105.79724884]
[191.75878906 -101.98072052]
[198.42114258 -115.41995239]
[205.08349609 -128.85917664]
[211.74586487 -142.29841614]
[213.36370850 -159.17500305]
[230.02861023 -162.29226685]
[237.63735962 -147.14158630]
[225.18508911 -135.63606262]
[218.52273560 -122.19682312]
[211.86038208 -108.75759125]
[205.19801331 -95.31835938]
[219.30949402 -87.03243256]
[232.77177429 -77.72883606]
[245.51164246 -67.45819855]
[257.45974731 -56.27639008]
[268.55111694 -44.24426651]
[278.72534180 -31.42728996]
[287.92712402 -17.89520073]
[296.10638428 -3.72162724]
[303.21856689 11.01630878]
[309.22503662 26.23841858]
[314.09307861 41.86187363]
[317.79620361 57.80166626]
[320.31427002 73.97106171]
[321.63357544 90.28208923]
[336.63284302 90.13201904]
[351.63208008 89.98194122]
[358.06991577 76.14297485]
[369.88015747 66.47440338]
[384.71783447 62.89593124]
[399.63696289 66.11807251]
[411.67535400 75.50106812]
[418.44271851 89.18190765]
[418.59542847 104.44426727]
[412.10314941 118.25777435]
[400.25491333 127.87976074]
[385.40325928 131.39978027]
[370.49691772 128.11891174]
[358.49560547 118.68858337]
[351.78216553 104.98119354]
[336.78289795 105.13126373]
[321.78366089 105.28134155]
[315.76351929 151.59452820]
[300.18112183 195.62113953]
[275.72711182 235.41000366]
[287.29244995 244.96211243]
[298.85778809 254.51422119]
[314.20239258 251.50128174]
[327.86865234 259.10177612]
[333.40377808 273.72695923]
[328.19427490 288.47128296]
[314.69992065 296.37292480]
[299.29229736 293.70098877]
[289.24642944 281.71704102]
[289.30569458 266.07955933]
[277.74035645 256.52746582]
[266.17498779 246.97535706]
[259.59411621 254.09606934]
[252.70840454 260.92242432]
[245.53097534 267.44140625]
[238.07554626 273.64050293]
[230.35638428 279.50793457]
[222.38819885 285.03247070]
[214.18623352 290.20355225]
[205.76614380 295.01129150]
[197.14401245 299.44653320]
[188.33633423 303.50079346]
[179.35989380 307.16635132]
[170.23187256 310.43612671]
[160.96969604 313.30395508]
[151.59106445 315.76434326]
[142.11386108 317.81256104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[85 95]
[86 94]
[87 93]
[88 92]
[109 126]
[110 125]
[111 124]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
85 95 0.0 0.2 colorpair
86 94 0.0 0.2 colorpair
87 93 0.32 0.2 colorpair
88 92 0.16 1 colorpair
110 125 0.0 1 colorpair
111 124 0.32 1 colorpair
129 141 0.32 1 colorpair
130 140 0.0 0.2 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
85 95 2 gmark
86 94 2 gmark
87 93 2 gmark
87 cmark
93 cmark
88 cmark
109 126 4 gmark
109 cmark
126 cmark
111 cmark
124 cmark
129 cmark
141 cmark
130 140 2 gmark

% End Annotations
showpage
end
%%EOF
