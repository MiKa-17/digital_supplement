%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:07:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUGGAAAAACCGCCGUGAUGGCGUUGCUCAUUGUGUGUGUCACGGUGCUGGCGUUUACCGCGCUGGUACGAGAUUCACUGUGUGAGUUAAGUGUGCGGCAAGGCGGCACGGAAAUCCGGGCAUAUCUUGCUUACGAACCGAG\
) } def
/len { sequence length } bind def

/coor [
[159.80885315 258.09423828]
[153.88400269 244.31396484]
[147.95916748 230.53367615]
[142.03433228 216.75338745]
[136.10948181 202.97309875]
[130.18464661 189.19281006]
[124.25981140 175.41253662]
[118.33496857 161.63224792]
[112.41013336 147.85195923]
[104.30751801 149.24699402]
[96.08575439 149.27981567]
[87.97225952 147.94949341]
[80.19145966 145.29286194]
[72.95859528 141.38337708]
[66.47371674 136.32917786]
[54.74624252 145.68153381]
[43.01876831 155.03387451]
[31.29129791 164.38621521]
[19.56382561 173.73857117]
[10.95012379 188.34132385]
[-5.46646070 184.10668945]
[-5.94188547 167.15940857]
[10.21147823 162.01109314]
[21.93894958 152.65875244]
[33.66642380 143.30639648]
[45.39389420 133.95405579]
[57.12136841 124.60170746]
[50.65290451 102.94711304]
[54.49806213 80.67656708]
[67.85319519 62.44465256]
[59.94068527 49.70133209]
[52.02817917 36.95801163]
[44.11566925 24.21469307]
[36.20315933 11.47137260]
[28.29065132 -1.27194774]
[12.93665791 -2.52138519]
[1.39733338 -12.45604038]
[-2.03881121 -27.10721397]
[3.74194050 -40.80834198]
[-4.17056847 -53.55166245]
[-12.08307743 -66.29498291]
[-25.93593597 -73.93755341]
[-26.07631874 -88.83149719]
[-33.98882675 -101.57481384]
[-41.90133667 -114.31813812]
[-55.32350540 -115.86826324]
[-65.24220276 -124.75335693]
[-68.16703796 -137.54454041]
[-63.24388504 -149.49661255]
[-70.88226318 -162.40611267]
[-78.52064514 -175.31561279]
[-86.15902710 -188.22511292]
[-93.79740906 -201.13461304]
[-101.43579102 -214.04411316]
[-109.07416534 -226.95361328]
[-116.71254730 -239.86309814]
[-124.35092926 -252.77259827]
[-131.98930359 -265.68209839]
[-147.10935974 -271.04525757]
[-152.20707703 -286.25686646]
[-143.37190247 -299.64788818]
[-127.38143921 -300.94586182]
[-116.50220490 -289.15512085]
[-119.07981110 -273.32049561]
[-111.44142914 -260.41098022]
[-103.80304718 -247.50148010]
[-96.16467285 -234.59197998]
[-88.52629089 -221.68249512]
[-80.88790894 -208.77299500]
[-73.24952698 -195.86349487]
[-65.61115265 -182.95399475]
[-57.97276688 -170.04449463]
[-50.33438873 -157.13499451]
[-33.90731049 -153.68318176]
[-24.85214043 -139.15084839]
[-29.15801811 -122.23064423]
[-21.24550819 -109.48732758]
[-13.33299923 -96.74400330]
[-0.04609661 -90.01292419]
[0.66024286 -74.20748901]
[8.57275200 -61.46417236]
[16.48526001 -48.72085190]
[31.32900810 -47.82576752]
[42.93669510 -38.24842072]
[46.72340775 -23.50005913]
[41.03396988 -9.18445683]
[48.94647980 3.55886340]
[56.85898972 16.30218315]
[64.77149963 29.04550362]
[72.68400574 41.78882217]
[80.59651184 54.53214264]
[95.85904694 50.73871994]
[111.54067993 51.93094635]
[126.05429840 57.98815918]
[137.93099976 68.29731750]
[145.96878052 81.81504822]
[160.59269714 78.47723389]
[175.21661377 75.13941956]
[189.84053040 71.80160522]
[204.46446228 68.46379089]
[216.19691467 57.84965515]
[230.32679749 62.56088257]
[244.95071411 59.22306824]
[259.04730225 49.80378342]
[272.00079346 60.74194336]
[265.07598877 76.21719360]
[248.28852844 73.84698486]
[233.66461182 77.18479919]
[222.97814941 87.56019592]
[207.80227661 83.08771515]
[193.17834473 86.42552948]
[178.55442810 89.76334381]
[163.93051147 93.10115051]
[149.30659485 96.43896484]
[148.91760254 107.13368988]
[146.23611450 117.49408722]
[141.38778687 127.03464508]
[134.59985352 135.30822754]
[126.19041443 141.92712402]
[132.11524963 155.70739746]
[138.04010010 169.48768616]
[143.96493530 183.26797485]
[149.88977051 197.04826355]
[155.81462097 210.82855225]
[161.73945618 224.60884094]
[167.66429138 238.38911438]
[173.58912659 252.16940308]
[188.58352661 250.34054565]
[203.48556519 252.81153870]
[217.08721924 259.38208008]
[228.28584290 269.51950073]
[236.17362976 282.40203857]
[240.11114502 296.98532104]
[239.77919006 312.08718872]
[235.20466614 326.48339844]
[226.75843811 339.00689697]
[215.12518311 348.64245605]
[201.24795532 354.60897827]
[186.25173950 356.42276001]
[171.35217285 353.93679810]
[157.75714111 347.35260010]
[146.56871033 337.20394897]
[138.69386292 324.31347656]
[134.77101135 309.72622681]
[135.11813354 294.62469482]
[139.70710754 280.23312378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[39 82]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[102 108]
[103 107]
] def

init

% Start Annotations
1 127 0.0 1 colorpair
2 126 0.0 0.6 colorpair
3 125 0.0 1 colorpair
4 124 0.0 1 colorpair
5 123 0.16 1 colorpair
6 122 0.0 1 colorpair
7 121 0.0 1 colorpair
8 120 0.0 1 colorpair
9 119 0.0 1 colorpair
15 27 0.0 1 colorpair
16 26 0.0 1 colorpair
17 25 0.0 1 colorpair
18 24 0.0 1 colorpair
19 23 0.16 1 colorpair
30 91 0.16 1 colorpair
31 90 0.0 1 colorpair
32 89 0.0 1 colorpair
33 88 0.0 1 colorpair
34 87 0.0 1 colorpair
35 86 0.0 1 colorpair
39 82 0.0 1 colorpair
40 81 0.0 1 colorpair
41 80 0.0 1 colorpair
43 78 0.0 1 colorpair
44 77 0.0 1 colorpair
45 76 0.0 1 colorpair
49 73 0.0 1 colorpair
50 72 0.0 1 colorpair
51 71 0.16 1 colorpair
52 70 0.0 1 colorpair
53 69 0.0 1 colorpair
54 68 0.0 1 colorpair
55 67 0.0 1 colorpair
56 66 0.0 1 colorpair
57 65 0.0 1 colorpair
58 64 0.0 1 colorpair
96 114 0.0 1 colorpair
97 113 0.0 1 colorpair
98 112 0.0 1 colorpair
99 111 0.0 1 colorpair
100 110 0.0 1 colorpair
102 108 0.0 1 colorpair
103 107 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 126 1 gmark
5 cmark
23 cmark
91 cmark
51 cmark

% End Annotations
showpage
end
%%EOF
