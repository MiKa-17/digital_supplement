%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:38:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCAGCAAAAGGCGAUGUUU__CGCCCUGAUCGUCAUCUGUUUCACCGUCAUAGUGACGGCACUGGUAACGAGAAAAGACCUCUGUGAGGUACGAAUCCGAACCGGCCAGACGGAGGUCGCUGUCUUCACGGCUUACGAAUCCGAG___\
) } def
/len { sequence length } bind def

/coor [
[138.67825317 233.84513855]
[152.64250183 239.31965637]
[146.97299194 225.43237305]
[141.30349731 211.54508972]
[135.63398743 197.65780640]
[129.96449280 183.77050781]
[124.15364075 169.94177246]
[118.20204163 156.17301941]
[112.25043488 142.40428162]
[106.29883575 128.63552856]
[100.34723663 114.86677551]
[97.68480682 120.57779694]
[93.49896240 125.73603058]
[87.90442657 130.03732300]
[81.06965637 133.20028687]
[67.69068909 139.98286438]
[54.31172943 146.76544189]
[40.93276596 153.54801941]
[27.55380440 160.33059692]
[14.17484283 167.11317444]
[14.98298073 182.32063293]
[9.52975750 196.53971863]
[-1.24002135 207.30688477]
[-15.46042728 212.75663757]
[-30.66768837 211.94480896]
[-44.22705841 205.01202393]
[-53.78928757 193.15945435]
[-57.69766617 178.44059753]
[-55.27504730 163.40560913]
[-46.94115448 150.65939331]
[-34.13989639 142.41029358]
[-19.08916092 140.08752441]
[-4.39658117 144.09352112]
[7.39226484 153.73422241]
[20.77122688 146.95164490]
[34.15018845 140.16906738]
[47.52915192 133.38647461]
[60.90811157 126.60390472]
[74.28707886 119.82132721]
[75.35443878 112.39766693]
[60.36154938 111.93572235]
[45.36866760 111.47377777]
[30.70521164 114.63338470]
[19.73671341 104.40147400]
[21.87099457 89.55408478]
[35.27745819 82.82602692]
[48.45773315 89.98883820]
[62.97344589 93.76959229]
[77.48915863 97.55033875]
[78.55651855 90.12667847]
[67.63037109 79.84955597]
[56.70422745 69.57242584]
[45.77807999 59.29530334]
[34.85193253 49.01817703]
[18.83693314 48.06984329]
[9.71131897 34.87504578]
[14.47548103 19.55570030]
[29.47476196 13.86350155]
[43.20299530 22.16501427]
[45.12905884 38.09202957]
[56.05520630 48.36915588]
[66.98135376 58.64628220]
[77.90750122 68.92340851]
[88.83364868 79.20053101]
[84.17216492 64.94323730]
[79.51068878 50.68593216]
[69.64829254 39.38402176]
[64.16037750 25.42397881]
[63.68601608 10.43148041]
[68.28044891 -3.84756756]
[77.40863800 -15.75034332]
[90.00759888 -23.89074707]
[104.61016083 -27.32081223]
[119.51581573 -25.64110374]
[132.98878479 -19.04722214]
[143.46009827 -8.30704212]
[149.71037292 5.32872486]
[151.01173401 20.27216721]
[147.21264648 34.78309250]
[138.75550842 47.17167282]
[126.62648010 55.99460983]
[118.90932465 68.85717010]
[111.19216919 81.71973419]
[124.13124847 74.13157654]
[137.07032776 66.54341125]
[150.00941467 58.95525360]
[162.94850159 51.36709213]
[175.88757324 43.77893448]
[188.82666016 36.19077301]
[201.76574707 28.60261154]
[205.85792542 13.57291603]
[219.08808899 6.06176472]
[233.39138794 10.05566120]
[246.33047485 2.46750140]
[259.26956177 -5.12065887]
[265.13323975 -12.20484257]
[272.55087280 -12.72854328]
[285.64205933 -20.05118752]
[286.48297119 -35.45561600]
[295.53713989 -47.94662094]
[309.91546631 -53.53836441]
[325.02984619 -50.44654846]
[336.05731201 -39.65775299]
[339.47909546 -24.61464691]
[334.20327759 -10.11743069]
[321.91336060 -0.79211265]
[306.53100586 0.38563222]
[292.96469116 -6.96001053]
[279.87350464 0.36263272]
[266.85772705 7.81842232]
[253.91862488 15.40658283]
[240.97955322 22.99474335]
[237.48266602 37.42760086]
[224.46870422 45.30739975]
[209.35389709 41.54169464]
[196.41482544 49.12985229]
[183.47573853 56.71801376]
[170.53665161 64.30617523]
[157.59757996 71.89433289]
[144.65849304 79.48249817]
[131.71940613 87.07065582]
[118.78033447 94.65881348]
[114.11598206 108.91517639]
[120.06758118 122.68392944]
[126.01918793 136.45268250]
[131.97079468 150.22142029]
[137.92239380 163.99017334]
[144.23765564 170.67491150]
[143.85177612 178.10101318]
[149.52128601 191.98829651]
[155.19078064 205.87557983]
[160.86027527 219.76287842]
[166.52978516 233.65016174]
[173.17555237 247.09761047]
[180.76370239 260.03668213]
[188.35186768 272.97576904]
[202.00729370 280.96575928]
[201.77149963 295.85848999]
[216.87060547 301.28036499]
[221.90916443 316.51165771]
[213.02201843 329.86822510]
[197.02664185 331.10406494]
[186.19329834 319.27114868]
[188.83241272 303.44665527]
[175.71974182 296.38217163]
[175.41278076 280.56393433]
[167.82463074 267.62484741]
[160.23646545 254.68577576]
[156.10270691 269.10491943]
[143.76437378 277.63522339]
[128.81451416 276.40982056]
[118.02994537 265.98422241]
[116.29935455 251.08439636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[4 131]
[5 130]
[6 129]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
[93 112]
[94 111]
[95 110]
[97 109]
[98 108]
[134 148]
[135 147]
[136 146]
[138 144]
] def

init

% Start Annotations
2 133 0.0 1 colorpair
3 132 0.0 1 colorpair
4 131 0.0 1 colorpair
5 130 0.0 0.6 colorpair
6 129 0.16 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 0.6 colorpair
9 125 0.0 0.6 colorpair
10 124 0.0 1 colorpair
11 123 0.16 0.6 colorpair
15 39 0.16 1 colorpair
16 38 0.0 1 colorpair
17 37 0.16 1 colorpair
18 36 0.0 1 colorpair
19 35 0.16 1 colorpair
20 34 0.0 0.6 colorpair
50 64 0.0 0.6 colorpair
51 63 0.0 0.6 colorpair
52 62 0.16 1 colorpair
53 61 0.16 0.6 colorpair
54 60 0.0 0.6 colorpair
83 122 0.0 0.6 colorpair
84 121 0.0 0.6 colorpair
85 120 0.0 1 colorpair
86 119 0.0 1 colorpair
87 118 0.0 1 colorpair
88 117 0.0 1 colorpair
89 116 0.0 0.6 colorpair
90 115 0.0 0.6 colorpair
93 112 0.0 0.6 colorpair
94 111 0.0 0.6 colorpair
95 110 0.0 1 colorpair
97 109 0.0 1 colorpair
98 108 0.16 1 colorpair
134 148 0.16 1 colorpair
135 147 0.16 1 colorpair
136 146 0.0 1 colorpair
138 144 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 130 1 gmark
129 cmark
8 126 1 gmark
9 125 1 gmark
11 123 1 gmark
11 cmark
123 cmark
39 cmark
17 cmark
37 cmark
19 cmark
20 34 1 gmark
50 64 1 gmark
51 63 1 gmark
52 cmark
62 cmark
53 61 1 gmark
53 cmark
61 cmark
54 60 1 gmark
83 122 1 gmark
84 121 1 gmark
89 116 1 gmark
90 115 1 gmark
93 112 1 gmark
94 111 1 gmark
98 cmark
108 cmark
134 cmark
148 cmark
135 cmark
147 cmark
138 cmark
144 cmark

% End Annotations
showpage
end
%%EOF
