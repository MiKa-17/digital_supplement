%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:15:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____ACUGCCAGCGAACUGUCUUAUCUGGUGCGUACUUAUAGUGUGUGUCACGCUUUUAAUAUUCACAUAUCUGACACGAAAAUCGCUCUGCGAAAUUCGCUAUAAGGAUGGUUACAGGGAGGUGGCCGCUUUCAUGGCUUACGAAUCCGGCA__\
) } def
/len { sequence length } bind def

/coor [
[102.93966675 224.30934143]
[88.94454193 230.63642883]
[73.66246033 229.10232544]
[61.20421600 220.11968994]
[54.92102051 206.10479736]
[56.50302124 190.82760620]
[65.52466583 178.39758301]
[79.55918121 172.15834045]
[81.05743408 157.23335266]
[82.55569458 142.30838013]
[84.05395508 127.38338470]
[79.82706451 141.77551270]
[67.67478180 150.56880188]
[52.68263626 150.08341980]
[41.12459946 140.52246094]
[37.83752441 125.88705444]
[44.19699478 112.30187225]
[57.54167938 105.45209503]
[72.28813934 108.20486450]
[58.30424881 102.77800751]
[44.32035828 97.35115814]
[30.33646393 91.92430115]
[20.77758598 102.52152252]
[8.19764042 109.19723511]
[-5.87709522 111.16466522]
[-19.74688339 108.20687866]
[-31.74379158 100.70046997]
[-40.43227768 89.56781006]
[-44.78094864 76.16366577]
[-44.28497696 62.11042404]
[-58.15748596 56.40485382]
[-72.02999115 50.69928360]
[-87.73590851 52.60580826]
[-96.56346893 40.60900116]
[-110.43597412 34.90343094]
[-124.30848694 29.19786072]
[-135.68885803 39.30965424]
[-150.27159119 43.46066284]
[-165.14962769 40.87908173]
[-177.38111877 32.12972260]
[-184.57122803 18.99153519]
[-185.34077454 4.09612417]
[-199.21328735 -1.60944641]
[-213.08578491 -7.31501675]
[-226.95829773 -13.02058792]
[-240.83081055 -18.72615814]
[-254.70330811 -24.43172836]
[-271.65173340 -24.86462212]
[-275.92755127 -41.27052689]
[-261.34646606 -49.92084885]
[-248.99774170 -38.30423737]
[-235.12522888 -32.59866714]
[-221.25273132 -26.89309502]
[-207.38021851 -21.18752480]
[-193.50770569 -15.48195362]
[-179.63520813 -9.77638340]
[-168.60850525 -19.82015991]
[-154.25546265 -24.09794998]
[-139.40762329 -21.70994949]
[-127.01847076 -13.07692051]
[-119.57595825 0.13277082]
[-118.60291290 15.32535362]
[-104.73040771 21.03092384]
[-90.85790253 26.73649406]
[-76.14424133 24.42186737]
[-66.32442474 36.82677460]
[-52.45191574 42.53234482]
[-38.57940674 48.23791504]
[-27.59848595 36.84797287]
[-13.05669975 30.51816177]
[2.83904934 30.24125671]
[17.66403580 36.08896637]
[29.14558029 47.19651031]
[35.51143646 61.89037323]
[35.76332092 77.94040680]
[49.74721146 83.36726379]
[63.73110580 88.79412079]
[77.71499634 94.22097778]
[86.61824036 80.09690857]
[103.31316376 75.27629089]
[109.97552490 61.83705521]
[116.63787842 48.39782333]
[111.82177734 33.58421707]
[118.76979828 20.04983139]
[132.92198181 15.54970169]
[139.58435059 2.11046863]
[146.24670410 -11.32876492]
[152.90905762 -24.76799774]
[154.52691650 -41.64457703]
[171.19181824 -44.76185226]
[178.80056763 -29.61116791]
[166.34829712 -18.10564041]
[159.68594360 -4.66640711]
[153.02357483 8.77282619]
[146.36122131 22.21205902]
[151.34806824 36.20016098]
[144.78292847 49.92436218]
[130.07711792 55.06018066]
[123.41475677 68.49941254]
[116.75239563 81.93864441]
[123.94712067 95.10056305]
[138.85636902 96.74806976]
[153.76562500 98.39557648]
[168.67486572 100.04308319]
[183.58412170 101.69058228]
[198.50910950 103.18884277]
[213.44833374 104.53770447]
[228.38755798 105.88656616]
[243.32679749 107.23542786]
[252.21197510 104.88139343]
[258.55041504 108.76366425]
[273.45968628 110.41117096]
[288.36892700 112.05867767]
[303.27816772 113.70618439]
[318.18743896 115.35369110]
[333.09667969 117.00119781]
[348.00592041 118.64870453]
[360.18283081 108.57404327]
[375.90896606 110.14370728]
[385.85430908 122.42644501]
[384.11846924 138.13511658]
[371.73129272 147.95005798]
[356.04183960 146.04821777]
[346.35842896 133.55795288]
[331.44915771 131.91044617]
[316.53991699 130.26293945]
[301.63067627 128.61543274]
[286.72140503 126.96792603]
[271.81216431 125.32041931]
[256.90292358 123.67291260]
[241.97793579 122.17465210]
[227.03871155 120.82579041]
[212.09947205 119.47693634]
[197.16024780 118.12807465]
[190.17660522 120.67298889]
[181.93661499 116.59983826]
[167.02735901 114.95233154]
[152.11811829 113.30482483]
[137.20886230 111.65731812]
[122.29961395 110.00981140]
[116.46944427 114.72776794]
[128.76368713 123.32146454]
[143.21199036 127.35213470]
[151.29403687 139.98861694]
[148.89372253 154.79531860]
[137.23350525 164.23139954]
[122.25177765 163.49116516]
[111.57853699 152.95161438]
[110.64968109 137.97990417]
[104.80911255 124.16368866]
[98.97894287 128.88165283]
[97.48068237 143.80662537]
[95.98242188 158.73161316]
[94.48416901 173.65660095]
[106.99847412 182.56095886]
[113.36940765 196.53619385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 154]
[9 153]
[10 152]
[11 151]
[19 78]
[20 77]
[21 76]
[22 75]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[80 100]
[81 99]
[82 98]
[85 95]
[86 94]
[87 93]
[88 92]
[101 140]
[102 139]
[103 138]
[104 137]
[105 136]
[106 134]
[107 133]
[108 132]
[109 131]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% Start Annotations
8 154 0.0 1 colorpair
9 153 0.0 1 colorpair
10 152 0.0 1 colorpair
11 151 0.0 1 colorpair
19 78 0.0 1 colorpair
20 77 0.0 1 colorpair
21 76 0.0 1 colorpair
22 75 0.0 1 colorpair
30 68 0.0 1 colorpair
31 67 0.0 1 colorpair
32 66 0.0 1 colorpair
34 64 0.0 1 colorpair
35 63 0.0 1 colorpair
36 62 0.0 1 colorpair
42 56 0.0 1 colorpair
43 55 0.0 1 colorpair
44 54 0.0 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
47 51 0.0 1 colorpair
80 100 0.0 1 colorpair
81 99 0.0 1 colorpair
82 98 0.0 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.0 1 colorpair
88 92 0.0 1 colorpair
101 140 0.0 1 colorpair
102 139 0.0 1 colorpair
103 138 0.0 1 colorpair
104 137 0.0 1 colorpair
105 136 0.0 1 colorpair
106 134 0.0 1 colorpair
107 133 0.0 1 colorpair
108 132 0.0 1 colorpair
109 131 0.0 1 colorpair
111 130 0.0 1 colorpair
112 129 0.0 1 colorpair
113 128 0.0 1 colorpair
114 127 0.0 1 colorpair
115 126 0.0 1 colorpair
116 125 0.0 1 colorpair
117 124 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
