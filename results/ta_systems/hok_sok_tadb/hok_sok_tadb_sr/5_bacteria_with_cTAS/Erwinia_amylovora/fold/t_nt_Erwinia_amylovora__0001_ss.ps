%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:15:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUUCUGGAUGUGUAUGGCAUGCAGAUGGCCUCGUGGAUUAAUGAAAAUUAACUACGGGGCUUUCUUAAUUCUGCCUCACAAUGUCCGAAUCAGUGCAACAUCAAUAAGGCUAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[247.20866394 343.66308594]
[239.17698669 330.99453735]
[231.14530945 318.32598877]
[216.34310913 320.15917969]
[202.15452576 315.36404419]
[191.41090393 304.84094238]
[186.28068542 290.63879395]
[187.83178711 275.55633545]
[195.80982971 262.59051514]
[187.77815247 249.92196655]
[179.74647522 237.25341797]
[171.57215881 224.67643738]
[163.25622559 212.19264221]
[154.94030762 199.70883179]
[146.62437439 187.22503662]
[140.24447632 183.36965942]
[138.26530457 174.36380005]
[130.23362732 161.69525146]
[122.20195007 149.02670288]
[114.17027283 136.35815430]
[106.13860321 123.68959808]
[98.10692596 111.02104950]
[89.93260193 98.44406891]
[81.61667633 85.96025848]
[66.37749481 82.73456573]
[58.12179565 69.95574951]
[61.29091644 55.44739914]
[52.97499084 42.96359634]
[44.65906143 30.47979164]
[36.34313583 17.99598885]
[17.29402924 18.09671974]
[2.09158731 6.86596775]
[-3.32436466 -11.08733082]
[3.02977920 -28.57252121]
[-6.11284494 -40.46421432]
[-15.25546932 -52.35591125]
[-29.80076408 -58.58045959]
[-31.42416573 -73.38632965]
[-40.56679153 -85.27803040]
[-49.70941544 -97.16972351]
[-58.85203934 -109.06141663]
[-67.99465942 -120.95310974]
[-77.13728333 -132.84480286]
[-86.27991486 -144.73651123]
[-95.42253876 -156.62820435]
[-104.56516266 -168.51989746]
[-113.70778656 -180.41159058]
[-121.48740387 -185.36135864]
[-122.91902161 -192.67692566]
[-131.79057312 -204.77220154]
[-140.66210938 -216.86747742]
[-149.53366089 -228.96275330]
[-158.40519714 -241.05802917]
[-173.62623596 -247.16148376]
[-175.68283081 -263.43115234]
[-162.45935059 -273.13021851]
[-147.55897522 -266.28109741]
[-146.30992126 -249.92958069]
[-137.43836975 -237.83430481]
[-128.56683350 -225.73901367]
[-119.69528961 -213.64373779]
[-110.82374573 -201.54846191]
[-101.81608582 -189.55421448]
[-92.67346191 -177.66252136]
[-83.53083801 -165.77082825]
[-74.38821411 -153.87913513]
[-65.24559021 -141.98742676]
[-56.10296631 -130.09573364]
[-46.96034241 -118.20404053]
[-37.81771851 -106.31234741]
[-28.67509460 -94.42065430]
[-19.53247070 -82.52895355]
[-5.64111853 -77.15498352]
[-3.36377358 -61.49853516]
[5.77885056 -49.60684204]
[14.92147446 -37.71514511]
[25.95571327 -40.13739777]
[37.14094162 -38.21878433]
[46.82486725 -32.20330429]
[53.56216049 -22.94303131]
[56.33012390 -11.77760220]
[54.68379211 -0.34046835]
[48.82693863 9.68006134]
[57.14286423 22.16386604]
[65.45879364 34.64766693]
[73.77471924 47.13147354]
[88.38398743 49.79697418]
[96.99535370 62.33886337]
[94.10047913 77.64433289]
[102.41640472 90.12813568]
[109.20830536 94.60394287]
[110.77547455 102.98937225]
[118.80715179 115.65792084]
[126.83882904 128.32647705]
[134.87049866 140.99502563]
[142.90217590 153.66357422]
[150.93385315 166.33212280]
[159.10818481 178.90910339]
[167.42410278 191.39291382]
[175.74003601 203.87670898]
[184.05596924 216.36051941]
[191.48234558 221.82598877]
[192.41503906 229.22174072]
[200.44671631 241.89028931]
[208.47837830 254.55885315]
[223.60861206 252.87434387]
[237.91152954 257.90560913]
[248.56800842 268.60418701]
[253.50234985 282.81027222]
[251.78645325 297.68862915]
[243.81385803 310.29431152]
[251.84553528 322.96286011]
[259.87719727 335.63140869]
[279.56872559 333.71600342]
[297.49151611 341.91000366]
[308.83639526 357.92926025]
[310.60214233 377.40164185]
[302.38916016 395.05996704]
[311.79818726 406.74200439]
[321.20721436 418.42404175]
[330.61627197 430.10607910]
[340.02529907 441.78811646]
[354.66958618 450.33099365]
[350.51452637 466.76791382]
[333.56973267 467.32540894]
[328.34326172 451.19714355]
[318.93420410 439.51510620]
[309.52517700 427.83306885]
[300.11614990 416.15103149]
[290.70712280 404.46899414]
[280.66738892 408.02383423]
[270.01174927 408.60852051]
[259.60211182 406.16375732]
[250.28388977 400.87588501]
[242.81730652 393.16253662]
[237.81536865 383.63986206]
[235.69355774 373.07318115]
[236.63533020 362.31555176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[9 105]
[10 104]
[11 103]
[12 101]
[13 100]
[14 99]
[15 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[23 90]
[24 89]
[27 86]
[28 85]
[29 84]
[30 83]
[34 76]
[35 75]
[36 74]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% Start Annotations
1 113 0.0 1 colorpair
2 112 0.0 1 colorpair
3 111 0.0 1 colorpair
9 105 0.0 1 colorpair
10 104 0.0 1 colorpair
11 103 0.0 1 colorpair
12 101 0.0 1 colorpair
13 100 0.0 1 colorpair
14 99 0.0 1 colorpair
15 98 0.0 1 colorpair
17 97 0.0 1 colorpair
18 96 0.0 1 colorpair
19 95 0.0 1 colorpair
20 94 0.0 1 colorpair
21 93 0.0 1 colorpair
22 92 0.0 1 colorpair
23 90 0.0 1 colorpair
24 89 0.0 1 colorpair
27 86 0.0 1 colorpair
28 85 0.0 1 colorpair
29 84 0.0 1 colorpair
30 83 0.0 1 colorpair
34 76 0.0 1 colorpair
35 75 0.0 1 colorpair
36 74 0.0 1 colorpair
38 72 0.0 1 colorpair
39 71 0.0 1 colorpair
40 70 0.0 1 colorpair
41 69 0.0 1 colorpair
42 68 0.0 1 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
45 65 0.0 1 colorpair
46 64 0.0 1 colorpair
47 63 0.0 1 colorpair
49 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair
118 130 0.0 1 colorpair
119 129 0.0 1 colorpair
120 128 0.0 1 colorpair
121 127 0.0 1 colorpair
122 126 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
