%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:14:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUG___AAGCAGC___AAAAAGCCAUGUUAGUGGCCCUGAUCGUCAUCUGUUUCACGGUCUUAGUAUUCACACUGCUGACGAGAAAAUCGCUCUGCGAGGUGCGGAUCAGAGACGGCCAUACGGAGGUUGCGGCUUUCAUGGCUUACGAAUCCGAG___\
) } def
/len { sequence length } bind def

/coor [
[166.25567627 444.62548828]
[151.46942139 447.14181519]
[136.58912659 449.02401733]
[121.64201355 450.26867676]
[106.65536499 450.87353516]
[91.65656281 450.83746338]
[76.67299652 450.16052246]
[61.73203659 448.84393311]
[46.86098480 446.89013672]
[32.08699799 444.30270386]
[17.43706703 441.08633423]
[2.93794918 437.24691772]
[-11.38386822 432.79147339]
[-25.50222397 427.72811890]
[-39.39133072 422.06613159]
[-53.02581787 415.81582642]
[-66.38077545 408.98861694]
[-79.43180847 401.59701538]
[-92.15509033 393.65447998]
[-104.52735901 385.17553711]
[-116.52603149 376.17568970]
[-128.12918091 366.67135620]
[-139.31561279 356.67990112]
[-150.06489563 346.21957397]
[-160.35740662 335.30947876]
[-170.17431641 323.96957397]
[-179.49771118 312.22055054]
[-188.31056213 300.08386230]
[-196.59677124 287.58166504]
[-204.34118652 274.73684692]
[-211.52969360 261.57284546]
[-218.14912415 248.11370850]
[-224.18740845 234.38400269]
[-229.63349915 220.40882874]
[-234.47747803 206.21371460]
[-238.71046448 191.82456970]
[-242.32475281 177.26770020]
[-245.31372070 162.56968689]
[-247.67192078 147.75738525]
[-249.39503479 132.85783386]
[-250.47993469 117.89827728]
[-250.92462158 102.90602112]
[-250.72828674 87.90845490]
[-249.89128113 72.93297577]
[-248.41514587 58.00694275]
[-246.30258179 43.15761185]
[-243.55743408 28.41211700]
[-240.18472290 13.79738712]
[-236.19059753 -0.65987945]
[-231.58238220 -14.93327427]
[-226.36846924 -28.99672508]
[-220.55839539 -42.82454300]
[-214.16276550 -56.39146805]
[-207.19326782 -69.67271423]
[-199.66262817 -82.64402771]
[-191.58460999 -95.28171539]
[-182.97395325 -107.56269073]
[-173.84642029 -119.46451569]
[-164.21864319 -130.96545410]
[-154.10823059 -142.04449463]
[-143.53366089 -152.68139648]
[-132.51422119 -162.85675049]
[-121.07006836 -172.55194092]
[-109.22209167 -181.74926758]
[-96.99192810 -190.43194580]
[-84.40193939 -198.58409119]
[-71.47509766 -206.19082642]
[-58.23503876 -213.23825073]
[-44.70593643 -219.71350098]
[-30.91250038 -225.60473633]
[-16.87993431 -230.90121460]
[-2.63386798 -235.59323120]
[11.79967594 -239.67224121]
[26.39433289 -243.13078308]
[41.12344360 -245.96253967]
[55.96009827 -248.16235352]
[70.87720490 -249.72616577]
[85.84750366 -250.65116882]
[100.84365845 -250.93563843]
[115.83826447 -250.57907104]
[130.80393982 -249.58210754]
[145.71336365 -247.94657898]
[160.53926086 -245.67546082]
[175.25459290 -242.77291870]
[189.83244324 -239.24424744]
[204.24621582 -235.09590149]
[218.46955872 -230.33543396]
[232.47650146 -224.97155762]
[246.24143982 -219.01406860]
[259.73925781 -212.47384644]
[272.94528198 -205.36283875]
[285.83538818 -197.69403076]
[298.38604736 -189.48144531]
[310.57431030 -180.74006653]
[322.37792969 -171.48588562]
[333.77536011 -161.73577881]
[344.74572754 -151.50756836]
[355.26904297 -140.81994629]
[365.32608032 -129.69241333]
[374.89843750 -118.14532471]
[383.96865845 -106.19975281]
[392.52014160 -93.87751770]
[400.53732300 -81.20114136]
[408.00549316 -68.19377136]
[414.91107178 -54.87916183]
[421.24139404 -41.28164291]
[426.98492432 -27.42605209]
[432.13113403 -13.33769512]
[436.67068481 0.95769066]
[440.59524536 15.43399429]
[443.89764404 30.06477165]
[446.57186890 44.82329559]
[448.61303711 59.68260956]
[450.01736450 74.61557007]
[450.78234863 89.59490204]
[450.90658569 104.59323883]
[450.38983154 119.58318329]
[449.23303223 134.53735352]
[447.43829346 149.42843628]
[445.00888062 164.22923279]
[441.94927979 178.91270447]
[438.26504517 193.45202637]
[433.96292114 207.82064819]
[429.05075073 221.99232483]
[423.53753662 235.94114685]
[417.43331909 249.64166260]
[410.74923706 263.06881714]
[403.49752808 276.19812012]
[395.69143677 289.00555420]
[387.34524536 301.46774292]
[378.47412109 313.56192017]
[369.09436035 325.26599121]
[359.22302246 336.55856323]
[348.87817383 347.41903687]
[338.07873535 357.82754517]
[326.84439087 367.76510620]
[315.19567871 377.21356201]
[303.15386963 386.15560913]
[290.74096680 394.57498169]
[277.97964478 402.45623779]
[285.30899048 415.54367065]
[292.63830566 428.63110352]
[308.04315186 429.46417236]
[320.53875732 438.51199341]
[326.13784790 452.88745117]
[323.05374146 468.00338745]
[312.27056885 479.03637695]
[297.22921753 482.46582031]
[282.72930908 477.19738770]
[273.39773560 464.91223145]
[272.21212769 449.53048706]
[279.55084229 435.96041870]
[272.22152710 422.87298584]
[264.89221191 409.78555298]
[251.50456238 416.54840088]
[237.84016418 422.73306274]
[223.92398071 428.32815552]
[209.78141785 433.32351685]
[195.43833923 437.71002197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[140 154]
[141 153]
[142 152]
] def

init

% Start Annotations
140 154 0.32 1 colorpair
141 153 0.32 0.2 colorpair
142 152 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
140 cmark
154 cmark
141 153 2 gmark
141 cmark
153 cmark
152 cmark

% End Annotations
showpage
end
%%EOF
