%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:14:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__CCCUUGU__C___ACUAAUCGUCAUGUGUUUCACGGUACUGGUAUUCACGUUGAUGACAAGAGAAUCGCUCUGUGAGUUGCGUAUCAGAGACGGUCAUAUGGAGGUUGCGGCAUUUAUAGCUUACGAAUCGA__AG___UAAGAGCCACCGCGGGGGAGUAA__AACCCCGCCUACUUAAAUGUG_AUGGUCAUCU____UCAAU___GCACCCUUAUUUA_A__________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50446320 92.09898376]
[62.52500916 91.29721832]
[47.57234192 90.09528351]
[32.65715027 88.49404144]
[17.79009628 86.49462891]
[2.98180819 84.09847260]
[-11.75712872 81.30729675]
[-26.41617966 78.12309265]
[-40.98486328 74.54813385]
[-55.45277023 70.58497620]
[-69.80955505 66.23645782]
[-84.04495239 61.50567627]
[-98.14879608 56.39601898]
[-112.11100006 50.91114426]
[-125.92157745 45.05496216]
[-139.57066345 38.83166885]
[-153.04849243 32.24570465]
[-166.34544373 25.30178261]
[-179.45201111 18.00486374]
[-192.35881042 10.36016464]
[-205.05662537 2.37315130]
[-217.53637695 -5.95046806]
[-229.78915405 -14.60474396]
[-241.80618286 -23.58348846]
[-253.57887268 -32.88028717]
[-265.09884644 -42.48849106]
[-276.35781860 -52.40122986]
[-287.34774780 -62.61142349]
[-298.06082153 -73.11177063]
[-308.48931885 -83.89476013]
[-318.62585449 -94.95269775]
[-328.46313477 -106.27766418]
[-337.99411011 -117.86157227]
[-347.21203613 -129.69613647]
[-356.11026001 -141.77291870]
[-364.68246460 -154.08325195]
[-372.92251587 -166.61834717]
[-380.82446289 -179.36926270]
[-388.38275146 -192.32685852]
[-395.59191895 -205.48188782]
[-402.44680786 -218.82495117]
[-408.94256592 -232.34649658]
[-415.07449341 -246.03686523]
[-420.83825684 -259.88626099]
[-426.22970581 -273.88482666]
[-431.24499512 -288.02249146]
[-435.88052368 -302.28918457]
[-440.13299561 -316.67471313]
[-443.99938965 -331.16879272]
[-447.47689819 -345.76104736]
[-450.56307983 -360.44104004]
[-453.25567627 -375.19830322]
[-455.55282593 -390.02227783]
[-457.45281982 -404.90234375]
[-458.95434570 -419.82791138]
[-460.05633545 -434.78826904]
[-460.75796509 -449.77276611]
[-461.05877686 -464.77062988]
[-460.95849609 -479.77120972]
[-460.45724487 -494.76373291]
[-459.55538940 -509.73748779]
[-458.25350952 -524.68176270]
[-456.55261230 -539.58593750]
[-454.45385742 -554.43927002]
[-451.95877075 -569.23126221]
[-449.06915283 -583.95117188]
[-445.78701782 -598.58862305]
[-442.11474609 -613.13305664]
[-438.05496216 -627.57415771]
[-433.61056519 -641.90155029]
[-428.78472900 -656.10504150]
[-423.58093262 -670.17437744]
[-418.00283813 -684.09960938]
[-412.05447388 -697.87072754]
[-405.74008179 -711.47790527]
[-399.06417847 -724.91143799]
[-392.03152466 -738.16168213]
[-384.64715576 -751.21917725]
[-376.91635132 -764.07458496]
[-368.84463501 -776.71868896]
[-360.43777466 -789.14257812]
[-351.70178223 -801.33721924]
[-342.64291382 -813.29394531]
[-333.26763916 -825.00421143]
[-323.58264160 -836.45971680]
[-313.59484863 -847.65216064]
[-303.31143188 -858.57360840]
[-292.73968506 -869.21624756]
[-281.88723755 -879.57244873]
[-270.76177979 -889.63482666]
[-259.37130737 -899.39617920]
[-247.72395325 -908.84954834]
[-235.82803345 -917.98809814]
[-223.69204712 -926.80541992]
[-211.32469177 -935.29516602]
[-198.73478699 -943.45123291]
[-185.93133545 -951.26776123]
[-172.92350769 -958.73925781]
[-159.72058105 -965.86035156]
[-146.33198547 -972.62585449]
[-132.76731873 -979.03106689]
[-119.03627014 -985.07141113]
[-105.14864349 -990.74243164]
[-91.11437225 -996.04016113]
[-76.94348907 -1000.96087646]
[-62.64612579 -1005.50091553]
[-48.23249435 -1009.65716553]
[-33.71290588 -1013.42657471]
[-19.09773445 -1016.80645752]
[-4.39742994 -1019.79443359]
[10.37750053 -1022.38830566]
[25.21649551 -1024.58630371]
[40.10894775 -1026.38684082]
[55.04420853 -1027.78857422]
[70.01161194 -1028.79052734]
[85.00044250 -1029.39196777]
[100.00000000 -1029.59252930]
[114.99955750 -1029.39196777]
[129.98838806 -1028.79052734]
[144.95579529 -1027.78857422]
[159.89105225 -1026.38684082]
[174.78350830 -1024.58630371]
[189.62249756 -1022.38830566]
[204.39743042 -1019.79443359]
[219.09773254 -1016.80645752]
[233.71290588 -1013.42657471]
[248.23249817 -1009.65716553]
[262.64611816 -1005.50091553]
[276.94348145 -1000.96087646]
[291.11437988 -996.04016113]
[305.14865112 -990.74243164]
[319.03628540 -985.07141113]
[332.76733398 -979.03106689]
[346.33200073 -972.62585449]
[359.72058105 -965.86035156]
[372.92349243 -958.73925781]
[385.93133545 -951.26776123]
[398.73477173 -943.45123291]
[411.32467651 -935.29516602]
[423.69204712 -926.80541992]
[435.82803345 -917.98809814]
[447.72396851 -908.84954834]
[459.37130737 -899.39617920]
[470.76177979 -889.63482666]
[481.88723755 -879.57244873]
[492.73968506 -869.21624756]
[503.31143188 -858.57360840]
[513.59484863 -847.65216064]
[523.58264160 -836.45971680]
[533.26763916 -825.00421143]
[542.64288330 -813.29394531]
[551.70178223 -801.33721924]
[560.43774414 -789.14257812]
[568.84460449 -776.71868896]
[576.91632080 -764.07458496]
[584.64715576 -751.21917725]
[592.03149414 -738.16168213]
[599.06414795 -724.91143799]
[605.74005127 -711.47790527]
[612.05444336 -697.87072754]
[618.00280762 -684.09960938]
[623.58093262 -670.17437744]
[628.78472900 -656.10504150]
[633.61059570 -641.90155029]
[638.05499268 -627.57415771]
[642.11474609 -613.13305664]
[645.78698730 -598.58862305]
[649.06915283 -583.95117188]
[651.95880127 -569.23126221]
[654.45385742 -554.43927002]
[656.55261230 -539.58593750]
[658.25354004 -524.68176270]
[659.55535889 -509.73748779]
[660.45727539 -494.76373291]
[660.95849609 -479.77120972]
[661.05877686 -464.77062988]
[660.75799561 -449.77276611]
[660.05633545 -434.78826904]
[658.95434570 -419.82791138]
[657.45281982 -404.90234375]
[655.55279541 -390.02227783]
[653.25567627 -375.19830322]
[650.56304932 -360.44104004]
[647.47692871 -345.76104736]
[643.99938965 -331.16879272]
[640.13299561 -316.67471313]
[635.88055420 -302.28918457]
[631.24499512 -288.02249146]
[626.22967529 -273.88482666]
[620.83825684 -259.88626099]
[615.07452393 -246.03686523]
[608.94256592 -232.34649658]
[602.44683838 -218.82495117]
[595.59191895 -205.48188782]
[588.38275146 -192.32685852]
[580.82446289 -179.36926270]
[572.92248535 -166.61834717]
[564.68249512 -154.08325195]
[556.11029053 -141.77291870]
[547.21203613 -129.69613647]
[537.99414062 -117.86157227]
[528.46313477 -106.27766418]
[518.62585449 -94.95269775]
[508.48931885 -83.89476013]
[498.06082153 -73.11177063]
[487.34774780 -62.61142349]
[476.35781860 -52.40122986]
[465.09884644 -42.48849106]
[453.57888794 -32.88028717]
[441.80618286 -23.58348846]
[429.78915405 -14.60474396]
[417.53637695 -5.95046806]
[405.05661011 2.37315130]
[392.35879517 10.36016464]
[379.45199585 18.00486374]
[366.34545898 25.30178261]
[353.04849243 32.24570465]
[339.57064819 38.83166885]
[325.92156982 45.05496216]
[312.11099243 50.91114426]
[298.14880371 56.39601898]
[284.04495239 61.50567627]
[269.80953979 66.23645782]
[255.45277405 70.58497620]
[240.98486328 74.54813385]
[226.41618347 78.12309265]
[211.75712585 81.30729675]
[197.01818848 84.09847260]
[182.20989990 86.49462891]
[167.34284973 88.49404144]
[152.42765808 90.09528351]
[137.47499084 91.29721832]
[122.49553680 92.09898376]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
