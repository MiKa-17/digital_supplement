%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:08:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUGCAGCAAGAACGGGUCGUUCUAAGGCUGAUGAUUAUCUGCAUCACGCUGAUAGCGCUGAUGUGGAUCACCCGCGGUUCACUAUGUGAACUGCGCAUCACACUGGGAGACACGGAGGUAGCCGCCAUUUUGGCUUACGAAACCGAA\
) } def
/len { sequence length } bind def

/coor [
[111.85164642 193.86065674]
[98.03184509 194.58546448]
[84.25415039 193.28639221]
[70.81337738 189.99125671]
[57.99712753 184.77052307]
[46.07962036 177.73594666]
[35.31586838 169.03800964]
[24.22455406 179.13665771]
[13.13323879 189.23530579]
[2.04192376 199.33395386]
[-3.13414788 218.77249146]
[-22.12141609 222.22406006]
[-32.78304291 232.77534485]
[-43.44466782 243.32664490]
[-54.10629272 253.87792969]
[-64.76792145 264.42922974]
[-75.42955017 274.98049927]
[-82.43449402 290.41964722]
[-99.20942688 287.96243286]
[-101.49201202 271.16284180]
[-85.98083496 264.31887817]
[-75.31921387 253.76759338]
[-64.65758514 243.21630859]
[-53.99595642 232.66500854]
[-43.33433151 222.11372375]
[-32.67270660 211.56243896]
[-33.53457260 201.30139160]
[-28.46966743 192.08369446]
[-18.95582962 187.10469055]
[-8.05672550 188.24264526]
[3.03458953 178.14399719]
[14.12590504 168.04534912]
[25.21722031 157.94670105]
[15.68992424 142.91963196]
[9.14477444 126.37445068]
[5.81327963 108.89637756]
[5.81327963 91.10362244]
[9.14477444 73.62554932]
[15.68992424 57.08036804]
[25.21722031 42.05330276]
[14.12590504 31.95465469]
[3.03458953 21.85600471]
[-8.05672550 11.75735474]
[-19.14804077 1.65870535]
[-30.23935699 -8.43994427]
[-41.33067322 -18.53859329]
[-52.42198563 -28.63724327]
[-63.51330185 -38.73589325]
[-74.60462189 -48.83454132]
[-85.80038452 -58.81726837]
[-97.09938812 -68.68299103]
[-108.39839172 -78.54871368]
[-119.69739532 -88.41443634]
[-135.60525513 -94.27756500]
[-134.37500000 -111.18681335]
[-117.78600311 -114.68558502]
[-109.83167267 -99.71343994]
[-98.53266907 -89.84771729]
[-87.23366547 -79.98199463]
[-75.93466187 -70.11627197]
[-68.78134155 -68.07282257]
[-64.50596619 -59.92585754]
[-53.41465378 -49.82720947]
[-42.32333755 -39.72855759]
[-31.23202324 -29.62990952]
[-20.14070702 -19.53125954]
[-9.04939175 -9.43260956]
[2.04192376 0.66603953]
[13.13323879 10.76468945]
[24.22455406 20.86333847]
[35.31586838 30.96198845]
[52.79133224 18.01447868]
[72.76181793 9.39997196]
[94.17185974 5.57375097]
[115.88992310 6.73803473]
[136.76818848 12.83128929]
[143.67518616 -0.48386604]
[150.58218384 -13.79902172]
[157.48918152 -27.11417770]
[164.39617920 -40.42933273]
[171.30317688 -53.74448776]
[178.21017456 -67.05964661]
[185.11717224 -80.37480164]
[192.02416992 -93.68995667]
[198.93118286 -107.00511169]
[200.85737610 -123.84928131]
[217.57649231 -126.66129303]
[224.90692139 -111.37400818]
[212.24633789 -100.09811401]
[205.33934021 -86.78295898]
[198.43232727 -73.46780396]
[191.52532959 -60.15264511]
[184.61833191 -46.83749008]
[177.71133423 -33.52233505]
[170.80433655 -20.20717812]
[163.89733887 -6.89202309]
[156.99034119 6.42313242]
[150.08334351 19.73828888]
[157.48658752 24.86294746]
[164.36911011 30.66818428]
[170.66860962 37.10141373]
[176.32798767 44.10437012]
[181.29602051 51.61361694]
[185.52766418 59.56114197]
[188.98463440 67.87495422]
[191.63558960 76.47974396]
[193.45652771 85.29758453]
[194.43095398 94.24858856]
[194.55003357 103.25169373]
[193.81271362 112.22534180]
[192.22564697 121.08825684]
[189.80320740 129.76016235]
[186.56735229 138.16249084]
[182.54739380 146.21916199]
[177.77972412 153.85719299]
[172.30755615 161.00738525]
[182.96917725 171.55868530]
[193.63079834 182.10997009]
[212.50558472 181.24864197]
[225.83563232 194.18722534]
[225.54692078 212.44412231]
[236.63822937 222.54277039]
[247.72955322 232.64141846]
[258.92532349 242.62414551]
[270.22430420 252.48986816]
[281.52331543 262.35559082]
[292.82232666 272.22131348]
[308.57159424 270.90356445]
[320.58566284 281.17184448]
[321.73684692 296.93414307]
[311.34213257 308.83898926]
[295.56851196 309.82345581]
[283.77423096 299.30343628]
[282.95660400 283.52032471]
[271.65759277 273.65460205]
[260.35858154 263.78887939]
[249.05958557 253.92315674]
[241.90626526 251.87969971]
[237.63090515 243.73274231]
[226.53958130 233.63409424]
[215.44827271 223.53544617]
[204.36296082 226.53654480]
[193.09626770 223.75640869]
[184.50317383 215.77941895]
[180.81918335 204.52165222]
[183.07951355 192.77159119]
[172.41789246 182.22030640]
[161.75625610 171.66902161]
[150.64001465 179.91166687]
[138.44018555 186.44441223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 60]
[51 59]
[52 58]
[53 57]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[116 148]
[117 147]
[118 146]
[121 141]
[122 140]
[123 139]
[124 137]
[125 136]
[126 135]
[127 134]
] def

init

% Start Annotations
7 33 0.0 1 colorpair
8 32 0.0 1 colorpair
9 31 0.0 1 colorpair
10 30 0.0 1 colorpair
12 26 0.16 1 colorpair
13 25 0.0 1 colorpair
14 24 0.16 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
17 21 0.0 0.6 colorpair
40 71 0.0 0.6 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.16 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
53 57 0.0 0.6 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.16 1 colorpair
79 95 0.0 1 colorpair
80 94 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.32 1 colorpair
85 89 0.0 1 colorpair
116 148 0.0 0.6 colorpair
117 147 0.0 1 colorpair
118 146 0.0 1 colorpair
121 141 0.0 1 colorpair
122 140 0.0 1 colorpair
123 139 0.0 0.6 colorpair
124 137 0.0 1 colorpair
125 136 0.0 1 colorpair
126 135 0.0 0.6 colorpair
127 134 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
26 cmark
14 cmark
17 21 1 gmark
40 71 1 gmark
45 cmark
48 cmark
63 cmark
53 57 1 gmark
78 cmark
94 cmark
84 cmark
90 cmark
116 148 1 gmark
123 139 1 gmark
126 135 1 gmark
134 cmark

% End Annotations
showpage
end
%%EOF
