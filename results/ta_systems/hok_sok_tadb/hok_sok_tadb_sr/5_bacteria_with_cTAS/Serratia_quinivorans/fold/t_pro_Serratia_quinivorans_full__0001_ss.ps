%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:08:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AAAUGCAGCAAGAACGGGUCGUUCUAAGGCUGAUGAUUAUCUGCAUCACGCUGAUAGCGCUGAUGUGGAUCACCCGCGGUUCGCUAUGUGAACUGCGCAUCACACUGGGAGACACGGAGGUAGCCGCCAUUUUGGCUUACGAAACCGAA\
) } def
/len { sequence length } bind def

/coor [
[64.61620331 200.54939270]
[57.61437988 197.80415344]
[50.82356262 194.57205200]
[44.27754593 190.86914062]
[38.00891876 186.71389771]
[32.04888916 182.12696838]
[26.42712212 177.13122559]
[15.33580685 187.22987366]
[4.24449158 197.32852173]
[-6.84682369 207.42716980]
[-12.02289581 226.86570740]
[-31.01016235 230.31727600]
[-41.67178726 240.86856079]
[-52.33341599 251.41984558]
[-62.99504089 261.97113037]
[-73.65666962 272.52243042]
[-75.17762756 288.49322510]
[-88.69061279 297.14068604]
[-103.82961273 291.83126831]
[-108.98128510 276.63784790]
[-100.19371033 263.21554565]
[-84.20795441 261.86080933]
[-73.54633331 251.30950928]
[-62.88470459 240.75822449]
[-52.22307968 230.20693970]
[-41.56145477 219.65563965]
[-42.42332077 209.39459229]
[-37.35841751 200.17691040]
[-27.84457779 195.19789124]
[-16.94547272 196.33586121]
[-5.85415792 186.23721313]
[5.23715734 176.13854980]
[16.32847214 166.03990173]
[5.31763172 148.96368408]
[-2.25300455 130.10841370]
[-6.10836315 110.15917969]
[-6.10836315 89.84082031]
[-2.25300455 69.89158630]
[5.31763172 51.03631210]
[16.32847214 33.96009445]
[5.23715734 23.86144447]
[-5.85415792 13.76279449]
[-16.94547272 3.66414475]
[-28.03678894 -6.43450499]
[-39.12810516 -16.53315353]
[-50.21942139 -26.63180351]
[-61.31073380 -36.73045349]
[-72.40205383 -46.82910156]
[-83.49336243 -56.92775345]
[-94.68913269 -66.91047668]
[-105.98813629 -76.77619934]
[-117.28713989 -86.64192200]
[-133.32626343 -86.99691772]
[-142.93394470 -99.84494781]
[-138.74000549 -115.33011627]
[-123.96165466 -121.57351685]
[-109.93560028 -113.78575134]
[-107.42141724 -97.94093323]
[-96.12241364 -88.07521057]
[-84.82341003 -78.20948029]
[-77.67008972 -76.16603088]
[-73.39471436 -68.01906586]
[-62.30340195 -57.92041779]
[-51.21208572 -47.82176971]
[-40.12076950 -37.72311783]
[-29.02945518 -27.62446976]
[-17.93813896 -17.52581978]
[-6.84682369 -7.42717075]
[4.24449158 2.67147899]
[15.33580685 12.77012825]
[26.42712212 22.86877823]
[46.31469727 7.91263866]
[69.12794495 -2.02504539]
[93.62361145 -6.40270424]
[118.46677399 -4.98176908]
[142.30355835 2.16032290]
[149.21055603 -11.15483284]
[156.11755371 -24.46998787]
[163.02455139 -37.78514481]
[169.93154907 -51.10029984]
[176.83854675 -64.41545868]
[183.74555969 -77.73061371]
[190.65255737 -91.04576874]
[197.55955505 -104.36092377]
[204.46655273 -117.67607880]
[206.39274597 -134.52024841]
[223.11186218 -137.33226013]
[230.44229126 -122.04497528]
[217.78170776 -110.76908112]
[210.87471008 -97.45392609]
[203.96771240 -84.13877106]
[197.06071472 -70.82361603]
[190.15371704 -57.50845718]
[183.24670410 -44.19330215]
[176.33970642 -30.87814522]
[169.43270874 -17.56299019]
[162.52571106 -4.24783421]
[155.61871338 9.06732178]
[165.46943665 15.88135529]
[174.49348450 23.75753593]
[182.57693481 32.59641266]
[189.61769104 42.28637695]
[195.52687073 52.70507812]
[200.22985840 63.72096252]
[203.66726685 75.19493103]
[205.79568481 86.98210907]
[220.77540588 86.20226288]
[235.75512695 85.42242432]
[245.02529907 72.82885742]
[260.23376465 69.19062805]
[274.19952393 76.22560883]
[280.32843018 90.61209106]
[275.72653198 105.55721283]
[262.56677246 114.00434875]
[247.06272888 111.96501923]
[236.53495789 100.40213776]
[221.55525208 101.18198395]
[206.57553101 101.96182251]
[206.11067200 110.13503265]
[205.01994324 118.24845886]
[203.30976868 126.25424957]
[200.99024963 134.10517883]
[198.07505798 141.75495911]
[194.58139038 149.15844727]
[190.52986145 156.27198792]
[185.94436646 163.05361938]
[180.85194397 169.46334839]
[191.51356506 180.01464844]
[202.17520142 190.56593323]
[212.83682251 201.11721802]
[228.34799194 207.96118164]
[226.06541443 224.76077271]
[209.29048157 227.21798706]
[202.28552246 211.77885437]
[191.62390137 201.22755432]
[180.96228027 190.67626953]
[170.30064392 180.12498474]
[164.47593689 184.88255310]
[158.33026123 189.21757507]
[151.89421082 193.10845947]
[145.19981384 196.53584290]
[138.28042603 199.48268127]
[131.17047119 201.93426514]
[123.90534210 203.87843323]
[116.52121735 205.30548096]
[109.05484772 206.20829773]
[101.54339600 206.58241272]
[94.02426910 206.42596436]
[86.53488922 205.73970032]
[79.11253357 204.52706909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 60]
[51 59]
[52 58]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[106 118]
[107 117]
[108 116]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% Start Annotations
7 33 0.0 1 colorpair
8 32 0.0 1 colorpair
9 31 0.0 1 colorpair
10 30 0.0 1 colorpair
12 26 0.16 1 colorpair
13 25 0.0 1 colorpair
14 24 0.16 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
40 71 0.0 0.2 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.16 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.16 1 colorpair
79 95 0.0 1 colorpair
80 94 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.32 1 colorpair
85 89 0.0 1 colorpair
106 118 0.0 1 colorpair
107 117 0.0 1 colorpair
108 116 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair
130 134 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
26 cmark
14 cmark
40 71 2 gmark
45 cmark
48 cmark
63 cmark
78 cmark
94 cmark
84 cmark
90 cmark
130 134 2 gmark

% End Annotations
showpage
end
%%EOF
