%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:08:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCCAUCCUGAUGGUGUUCAGACAUGCGGAGGCCUC__GGGUUGAU_GUAAAUUA_CAUACGGGGCU_______UUUCUCUUUCUGCCAUUCGGC_GAAUA_________________CCUGAGACAGACAGCCUCAAGCACC____________\
) } def
/len { sequence length } bind def

/coor [
[231.00790405 430.41076660]
[220.99090576 421.00335693]
[211.81149292 410.77651978]
[203.53645325 399.80450439]
[196.22601318 388.16708374]
[189.93338013 375.94885254]
[184.70437622 363.23858643]
[180.57707214 350.12869263]
[177.58154297 336.71444702]
[175.73962402 323.09338379]
[175.06478882 309.36456299]
[175.56201172 295.62774658]
[177.22773743 281.98284912]
[180.04991150 268.52905273]
[184.00808716 255.36424255]
[189.07356262 242.58413696]
[195.20954895 230.28166199]
[202.37150574 218.54632568]
[210.50741577 207.46347046]
[199.25765991 197.54162598]
[188.00790405 187.61978149]
[173.93395996 192.49725342]
[159.21034241 189.65632629]
[147.81024170 179.76167297]
[142.86096191 165.39498901]
[145.78637695 150.38201904]
[134.53662109 140.46017456]
[123.28686523 130.53833008]
[112.03711700 120.61648560]
[97.68444824 123.76068115]
[84.20889282 117.90454102]
[76.71486664 105.26631927]
[78.04103851 90.63327026]
[66.79128265 80.71141815]
[55.54153061 70.78957367]
[44.29177856 60.86772919]
[33.04202271 50.94588089]
[21.14905930 41.80490494]
[8.66698647 33.48638153]
[-3.81508756 25.16786003]
[-16.29716110 16.84933472]
[-28.77923584 8.53081226]
[-41.26131058 0.21228817]
[-47.90060806 -0.60167950]
[-52.42483521 -4.13986588]
[-54.05559540 -8.67509842]
[-66.20782471 -17.46847153]
[-78.36004639 -26.26184464]
[-90.72661591 -17.52418900]
[-105.26094818 -13.27777576]
[-120.38645935 -13.98322582]
[-134.46244812 -19.56401634]
[-145.96205139 -29.41478539]
[-153.63789368 -42.46699524]
[-156.65734863 -57.30484009]
[-154.69288635 -72.31881714]
[-147.95759583 -85.88033295]
[-137.18208313 -96.51832581]
[-123.53517914 -103.07886505]
[-108.49720764 -104.85032654]
[-93.69937134 -101.64053345]
[-80.74682617 -93.79768372]
[-71.04457092 -82.17249298]
[-65.64504242 -68.02597809]
[-65.13392639 -52.89265823]
[-69.56667328 -38.41407013]
[-57.41444778 -29.62069702]
[-45.26222229 -20.82732391]
[-32.94278336 -12.26978588]
[-20.46071053 -3.95126200]
[-7.97863770 4.36726189]
[4.50343609 12.68578529]
[16.98550987 21.00430870]
[29.46758270 29.32283211]
[26.78971863 14.56379986]
[34.08400726 1.45680499]
[48.03809738 -4.04623079]
[62.31539536 0.55363625]
[70.43254089 13.16759396]
[68.70352173 28.06760979]
[57.91347885 38.48754501]
[42.96387100 39.69612885]
[54.21362305 49.61797333]
[65.46337891 59.53982162]
[76.71313477 69.46166992]
[87.96288300 79.38351440]
[102.31555176 76.23931885]
[115.79110718 82.09545898]
[123.28513336 94.73368073]
[121.95896149 109.36672974]
[133.20870972 119.28858185]
[144.45846558 129.21041870]
[155.70822144 139.13227844]
[170.23800659 134.35391235]
[185.11050415 137.46926880]
[196.35206604 147.54367065]
[201.01045227 161.79693604]
[197.92974854 176.37002563]
[209.17950439 186.29187012]
[220.42926025 196.21371460]
[232.45491028 185.00772095]
[245.55847168 175.08471680]
[259.60369873 166.54772949]
[274.44458008 159.48539734]
[289.92675781 153.97097778]
[305.88931274 150.06167603]
[322.16632080 147.79797363]
[338.58859253 147.20330811]
[354.98541260 148.28369141]
[371.18640137 151.02780151]
[387.02322388 155.40695190]
[402.33126831 161.37554932]
[416.95153809 168.87139893]
[430.73211670 177.81651306]
[443.52981567 188.11778259]
[455.21176147 199.66807556]
[465.65664673 212.34724426]
[474.75595093 226.02342224]
[482.41525269 240.55441284]
[488.55505371 255.78913879]
[493.11166382 271.56918335]
[496.03784180 287.73052979]
[497.30331421 304.10519409]
[496.89505005 320.52297974]
[494.81744385 336.81326294]
[491.09219360 352.80673218]
[485.75814819 368.33718872]
[478.87084961 383.24328613]
[491.81277466 390.82659912]
[504.75469971 398.40991211]
[517.69665527 405.99319458]
[530.63854980 413.57650757]
[543.58050537 421.15979004]
[559.40399170 418.51473999]
[571.24102783 429.34362793]
[570.01116943 445.33947754]
[556.65789795 454.23162842]
[541.42474365 449.19879150]
[535.99719238 434.10174561]
[523.05529785 426.51843262]
[510.11334229 418.93511963]
[497.17141724 411.35183716]
[484.22949219 403.76852417]
[471.28756714 396.18521118]
[463.31967163 407.37170410]
[454.42752075 417.83901978]
[444.67565918 427.51101685]
[434.13500977 436.31732178]
[422.88211060 444.19384766]
[410.99877930 451.08328247]
[398.57135010 456.93548584]
[385.69018555 461.70785522]
[372.44891357 465.36560059]
[358.94378662 467.88204956]
[345.27297974 469.23889160]
[331.53588867 469.42614746]
[317.83239746 468.44241333]
[304.26214600 466.29476929]
[290.92379761 462.99877930]
[277.91436768 458.57830811]
[265.32846069 453.06546021]
[253.25761414 446.50024414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 100]
[20 99]
[21 98]
[26 93]
[27 92]
[28 91]
[29 90]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[46 68]
[47 67]
[48 66]
[128 144]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
] def

init

% Start Annotations
19 100 0.32 1 colorpair
20 99 0.0 0.2 colorpair
21 98 0.16 0.6 colorpair
26 93 0.16 1 colorpair
27 92 0.0 1 colorpair
28 91 0.0 1 colorpair
29 90 0.16 0.2 colorpair
33 86 0.16 0.2 colorpair
34 85 0.16 0.2 colorpair
35 84 0.16 1 colorpair
36 83 0.0 1 colorpair
37 82 0.16 0.6 colorpair
38 74 0.16 1 colorpair
39 73 0.0 1 colorpair
40 72 0.0 0.6 colorpair
41 71 0.0 1 colorpair
42 70 0.0 1 colorpair
43 69 0.0 1 colorpair
46 68 0.16 1 colorpair
48 66 0.32 1 colorpair
128 144 0.0 1 colorpair
129 143 0.0 1 colorpair
130 142 0.0 1 colorpair
131 141 0.0 1 colorpair
132 140 0.16 0.2 colorpair
133 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 cmark
100 cmark
20 99 2 gmark
21 98 1 gmark
21 cmark
98 cmark
26 cmark
29 90 2 gmark
29 cmark
33 86 2 gmark
33 cmark
34 85 2 gmark
34 cmark
85 cmark
35 cmark
37 82 1 gmark
37 cmark
38 cmark
40 72 1 gmark
46 cmark
68 cmark
47 67 3 gmark
47 cmark
67 cmark
48 cmark
66 cmark
132 140 2 gmark
132 cmark
140 cmark

% End Annotations
showpage
end
%%EOF
