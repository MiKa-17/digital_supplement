%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:55:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUGCUACGAAAGACCGCCCUAAUGGGCUUGGUUGUUAUUUGUGUAACGAUCUUGUGUUUUACAUGGAUGGUACGUGAUUCGCUCUGCGAACUCCAAAUCAAAGAUGGACAAACACUAUUUCUGGCAACGCUAGCCUACGAAGUUAA_\
) } def
/len { sequence length } bind def

/coor [
[130.10194397 266.79937744]
[139.66743469 255.14753723]
[151.74385071 246.12403870]
[145.89421082 232.31166077]
[140.04457092 218.49929810]
[134.19491577 204.68692017]
[128.34527588 190.87454224]
[122.80310822 185.90821838]
[122.52131653 176.70877075]
[116.96417236 162.77613831]
[111.40703583 148.84350586]
[105.84989929 134.91087341]
[99.49588776 135.39401245]
[93.15821838 134.73010254]
[87.04227448 132.94067383]
[81.34626770 130.08369446]
[76.25478363 126.25176239]
[64.06400299 134.99160767]
[51.87322235 143.73144531]
[39.68244171 152.47128296]
[33.41426849 167.62522888]
[17.12324142 169.50526428]
[7.56817627 156.17736816]
[14.57850361 141.35214233]
[30.94259834 140.28050232]
[43.13338089 131.54066467]
[55.32416153 122.80081940]
[67.51493835 114.06098175]
[66.01793671 109.91006470]
[65.04900360 105.60515594]
[64.62319183 101.21314240]
[49.86344528 98.53923798]
[35.10369492 95.86532593]
[20.34394455 93.19142151]
[5.58419466 90.51750946]
[-9.17555523 87.84360504]
[-23.93530464 85.16969299]
[-38.69505692 82.49578857]
[-53.45480347 79.82187653]
[-68.69998932 85.86475372]
[-81.38613129 75.47274017]
[-78.46280670 59.33625412]
[-62.93729019 54.05512619]
[-50.78089905 65.06213379]
[-36.02114868 67.73603821]
[-21.26139832 70.40994263]
[-6.50164747 73.08385468]
[8.25810242 75.75775909]
[23.01785278 78.43167114]
[37.77760315 81.10557556]
[52.53735352 83.77948761]
[67.29710388 86.45339203]
[77.14394379 72.97055817]
[92.07546997 65.50083923]
[108.76993561 65.70600128]
[115.48097992 52.29101181]
[122.19202423 38.87602615]
[128.90306091 25.46103859]
[135.61410522 12.04605103]
[142.32514954 -1.36893594]
[136.48669434 -17.82489586]
[144.17440796 -33.12634659]
[160.21839905 -38.06616211]
[166.64512634 -51.61965561]
[173.07185364 -65.17314911]
[165.80609131 -78.75677490]
[167.90742493 -93.83781433]
[178.36242676 -104.66172028]
[193.01089478 -107.22312927]
[199.43760681 -120.77661896]
[205.86433411 -134.33010864]
[212.29106140 -147.88360596]
[207.21708679 -162.61088562]
[213.92776489 -176.26449585]
[227.99923706 -181.01100159]
[228.86198425 -190.17425537]
[234.70700073 -194.78031921]
[241.41804504 -208.19529724]
[247.98728943 -221.68029785]
[254.41401672 -235.23377991]
[260.84072876 -248.78727722]
[267.26745605 -262.34075928]
[273.69418335 -275.89425659]
[275.01718140 -292.79650879]
[291.62512207 -296.20425415]
[299.49719238 -281.18872070]
[287.24768066 -269.46752930]
[280.82095337 -255.91404724]
[274.39422607 -242.36054993]
[267.96749878 -228.80706787]
[261.54077148 -215.25357056]
[261.51669312 -207.81182861]
[254.83302307 -201.48425293]
[248.12197876 -188.06927490]
[241.55273438 -174.58427429]
[246.78302002 -160.68536377]
[240.45848083 -146.84864807]
[225.84455872 -141.45687866]
[219.41783142 -127.90338898]
[212.99110413 -114.34989166]
[206.56437683 -100.79640198]
[213.85165405 -87.83362579]
[212.08770752 -72.88864136]
[201.74087524 -61.71740723]
[186.62535095 -58.74642563]
[180.19862366 -45.19293213]
[173.77189636 -31.63943672]
[179.76618958 -20.18907356]
[178.02413940 -7.18574953]
[168.96194458 2.56887031]
[155.74014282 5.34210825]
[149.02909851 18.75709534]
[142.31805420 32.17208481]
[135.60700989 45.58707047]
[128.89596558 59.00205612]
[122.18492126 72.41704559]
[134.11799622 90.56855774]
[133.20225525 112.27195740]
[119.78253174 129.35372925]
[125.33966827 143.28636169]
[130.89680481 157.21899414]
[136.45394897 171.15162659]
[142.15765381 185.02490234]
[148.00729370 198.83728027]
[153.85693359 212.64964294]
[159.70658875 226.46202087]
[165.55622864 240.27439880]
[180.44012451 237.88000488]
[195.46447754 239.11784363]
[209.75578308 243.91593933]
[222.48318481 251.99534607]
[232.90670776 262.88632202]
[240.42036438 275.95571899]
[244.58729553 290.44363403]
[245.16525269 305.50781250]
[242.12063599 320.27243042]
[235.63044739 333.87908936]
[226.07202148 345.53668213]
[214.00108337 354.56750488]
[200.11940002 360.44650269]
[185.23405457 362.83187866]
[170.21046448 361.58493042]
[155.92205811 356.77816772]
[143.19955444 348.69104004]
[132.78263855 337.79373169]
[125.27691650 324.71981812]
[121.11876678 310.22937012]
[120.54994965 295.16482544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[9 122]
[10 121]
[11 120]
[12 119]
[17 28]
[18 27]
[19 26]
[20 25]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[63 107]
[64 106]
[65 105]
[69 101]
[70 100]
[71 99]
[72 98]
[75 95]
[77 94]
[78 93]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% Start Annotations
3 127 0.0 1 colorpair
4 126 0.0 1 colorpair
5 125 0.0 1 colorpair
6 124 0.0 1 colorpair
7 123 0.0 1 colorpair
9 122 0.0 1 colorpair
10 121 0.0 1 colorpair
11 120 0.0 1 colorpair
12 119 0.0 1 colorpair
17 28 0.0 1 colorpair
18 27 0.0 1 colorpair
19 26 0.0 1 colorpair
20 25 0.0 1 colorpair
31 52 0.0 1 colorpair
32 51 0.0 1 colorpair
33 50 0.0 1 colorpair
34 49 0.0 1 colorpair
35 48 0.0 1 colorpair
36 47 0.0 1 colorpair
37 46 0.0 1 colorpair
38 45 0.0 1 colorpair
39 44 0.0 1 colorpair
55 116 0.0 1 colorpair
56 115 0.0 1 colorpair
57 114 0.0 1 colorpair
58 113 0.0 1 colorpair
59 112 0.0 1 colorpair
60 111 0.0 1 colorpair
63 107 0.0 1 colorpair
64 106 0.0 1 colorpair
65 105 0.0 1 colorpair
69 101 0.0 1 colorpair
70 100 0.0 1 colorpair
71 99 0.0 1 colorpair
72 98 0.0 1 colorpair
75 95 0.0 1 colorpair
77 94 0.0 1 colorpair
78 93 0.0 1 colorpair
79 91 0.0 1 colorpair
80 90 0.0 1 colorpair
81 89 0.0 1 colorpair
82 88 0.0 1 colorpair
83 87 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
