%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:55:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____CCGCAAAACCCUGUUAUCUGGUGCCUGGCCAUCGUCUGCCUGACGAUACUGGCAUUCACUUUGUUGACCCGUCAUUCGCUUUACGAACUGCGAAUACGGGACGGUAGCAGGGAGGUUGCGGCAGUCAUGUCUUGUGAGUCCAAC___\
) } def
/len { sequence length } bind def

/coor [
[162.59338379 366.16839600]
[174.11027527 356.55792236]
[188.50950623 352.35531616]
[203.38783264 354.26199341]
[216.25982666 361.95773315]
[209.99041748 348.33074951]
[203.72102356 334.70376587]
[197.45161438 321.07678223]
[191.18220520 307.44979858]
[184.91279602 293.82284546]
[178.64340210 280.19586182]
[162.65560913 275.06811523]
[155.14862061 259.67407227]
[161.18562317 243.28681946]
[154.63775635 229.79144287]
[148.08988953 216.29605103]
[141.54202271 202.80067444]
[134.99414062 189.30528259]
[128.44627380 175.80990601]
[121.89840698 162.31451416]
[115.35053253 148.81913757]
[108.80266571 135.32374573]
[102.25479126 121.82836151]
[78.87993622 115.16172028]
[72.66378021 87.51349640]
[58.23640060 83.40855408]
[43.80901337 79.30361176]
[29.38162994 75.19866180]
[19.17058182 84.50926208]
[5.79490328 87.51901245]
[-7.21267128 83.54302979]
[-16.47091293 73.72712708]
[-19.62895584 60.72024918]
[-33.96901703 56.31994629]
[-48.30907822 51.91964722]
[-62.64913940 47.51934814]
[-77.11790466 43.56273651]
[-91.70165253 40.05356979]
[-106.28540802 36.54440308]
[-120.86915588 33.03523636]
[-135.45291138 29.52606773]
[-149.83174133 36.64143753]
[-164.29811096 29.70576286]
[-167.75465393 14.03949738]
[-157.54980469 1.66046095]
[-141.51185608 2.06479025]
[-131.94374084 14.94231892]
[-117.35998535 18.45148659]
[-102.77623749 21.96065331]
[-88.19248962 25.46982002]
[-73.60874176 28.97898865]
[-70.38580322 27.41057587]
[-66.23041534 27.36264038]
[-61.88309479 29.26170731]
[-58.24884033 33.17928696]
[-43.90877914 37.57958603]
[-29.56871605 41.97988510]
[-15.22865486 46.38018799]
[-2.46138525 36.10658646]
[14.07842255 35.43834305]
[27.90718460 44.83482361]
[33.48657608 60.77127838]
[47.91395950 64.87622833]
[62.34134293 68.98117065]
[76.76873016 73.08611298]
[63.23479462 66.61830139]
[56.49185944 53.21931458]
[59.36173248 38.49641418]
[70.64342499 28.61089325]
[85.61572266 27.69968224]
[98.01296234 36.14411163]
[102.64710999 50.41032028]
[97.57804871 64.52912140]
[104.94429016 51.46242523]
[112.31053162 38.39572906]
[119.67676544 25.32903481]
[127.04300690 12.26233959]
[128.54795837 3.18870139]
[134.69700623 -0.99477196]
[142.32997131 -13.90746975]
[149.96295166 -26.82016754]
[157.59591675 -39.73286438]
[165.22888184 -52.64556503]
[172.86184692 -65.55825806]
[165.24957275 -78.89801025]
[165.34306335 -94.25661469]
[173.11718750 -107.50269318]
[186.48072815 -115.07312775]
[201.83895874 -114.93148804]
[215.06060791 -107.11589050]
[222.58911133 -93.72869110]
[222.39933777 -78.37096405]
[214.54234314 -65.17388153]
[201.13160706 -57.68737793]
[185.77455139 -57.92529297]
[178.14158630 -45.01259232]
[170.50860596 -32.09989548]
[162.87564087 -19.18719864]
[155.24267578 -6.27449989]
[147.60969543 6.63819790]
[140.10969543 19.62857819]
[132.74346924 32.69527435]
[125.37722015 45.76197052]
[118.01098633 58.82866287]
[110.64474487 71.89535522]
[123.32994080 85.72608185]
[124.49674988 102.72034454]
[115.75017548 115.28049469]
[122.29804993 128.77587891]
[128.84591675 142.27125549]
[135.39378357 155.76664734]
[141.94166565 169.26202393]
[148.48953247 182.75741577]
[155.03739929 196.25279236]
[161.58526611 209.74818420]
[168.13314819 223.24356079]
[174.68101501 236.73895264]
[187.86485291 239.67085266]
[196.80763245 249.53025818]
[198.39590454 262.54971313]
[192.27037048 273.92645264]
[198.53977966 287.55343628]
[204.80918884 301.18041992]
[211.07859802 314.80737305]
[217.34799194 328.43435669]
[223.61740112 342.06134033]
[229.88681030 355.68832397]
[237.91380310 368.35983276]
[252.71150208 373.95794678]
[254.96531677 388.68103027]
[264.60711670 400.17172241]
[274.24893188 411.66238403]
[283.89074707 423.15304565]
[299.68313599 425.97805786]
[307.19378662 440.15441895]
[300.66122437 454.80725098]
[285.09664917 458.69613647]
[272.43988037 448.83786011]
[272.40008545 432.79486084]
[262.75827026 421.30419922]
[253.11647034 409.81353760]
[243.47465515 398.32284546]
[229.36660767 393.54663086]
[226.42314148 378.00164795]
[227.88098145 392.93063354]
[223.24671936 407.19680786]
[213.29382324 418.41909790]
[199.68345642 424.72451782]
[184.68722534 425.06063843]
[170.80802917 419.37136841]
[160.36233521 408.60626221]
[155.09353638 394.56204224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[8 124]
[9 123]
[10 122]
[11 121]
[14 117]
[15 116]
[16 115]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[25 65]
[26 64]
[27 63]
[28 62]
[33 58]
[34 57]
[35 56]
[36 55]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[128 144]
[130 142]
[131 141]
[132 140]
[133 139]
] def

init

% Start Annotations
5 127 0.0 0.6 colorpair
6 126 0.0 1 colorpair
7 125 0.0 1 colorpair
8 124 0.0 1 colorpair
9 123 0.0 1 colorpair
10 122 0.0 1 colorpair
11 121 0.0 1 colorpair
14 117 0.0 1 colorpair
15 116 0.0 1 colorpair
16 115 0.0 1 colorpair
17 114 0.0 1 colorpair
18 113 0.0 1 colorpair
19 112 0.0 1 colorpair
20 111 0.0 1 colorpair
21 110 0.0 1 colorpair
22 109 0.0 1 colorpair
23 108 0.0 1 colorpair
25 65 0.0 1 colorpair
26 64 0.0 1 colorpair
27 63 0.0 1 colorpair
28 62 0.0 1 colorpair
33 58 0.0 1 colorpair
34 57 0.0 1 colorpair
35 56 0.0 1 colorpair
36 55 0.0 1 colorpair
37 51 0.0 1 colorpair
38 50 0.0 1 colorpair
39 49 0.0 1 colorpair
40 48 0.0 1 colorpair
41 47 0.0 1 colorpair
73 105 0.0 1 colorpair
74 104 0.0 1 colorpair
75 103 0.0 1 colorpair
76 102 0.0 1 colorpair
77 101 0.0 1 colorpair
79 100 0.0 1 colorpair
80 99 0.0 1 colorpair
81 98 0.0 1 colorpair
82 97 0.0 1 colorpair
83 96 0.0 1 colorpair
84 95 0.0 1 colorpair
128 144 0.0 1 colorpair
130 142 0.0 1 colorpair
131 141 0.0 1 colorpair
132 140 0.0 1 colorpair
133 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 127 1 gmark

% End Annotations
showpage
end
%%EOF
