%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:39:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGCUAUCCUCACAUUGCUUGGAUGUGGUUAGGAUUGCCUCAGGUUAAUGAAAAUUGACCUGGGGCUUUUACUUUCUACCUCACCACACAUUUCAUGCUUCAGGCAAAAAGCCUCAAGCACC\
) } def
/len { sequence length } bind def

/coor [
[78.45351410 132.64311218]
[80.72614288 117.81635284]
[73.32442474 119.02653503]
[67.15512085 132.69912720]
[60.98581314 146.37171936]
[54.81650543 160.04429626]
[56.98683929 176.29919434]
[43.83150864 186.09048462]
[28.88359070 179.34573364]
[27.52022171 163.00335693]
[41.14391708 153.87500000]
[47.31322479 140.20240784]
[53.48252869 126.52981567]
[59.65183640 112.85723114]
[47.68277359 121.89833069]
[36.22911835 112.21257782]
[31.21064568 98.07698822]
[33.99266052 83.33723450]
[43.81829834 72.00335693]
[58.01443481 67.15880585]
[72.71892548 70.12157440]
[83.93181610 80.08638000]
[92.70422363 92.25375366]
[90.83906555 77.37016296]
[88.97390747 62.48657608]
[87.10875702 47.60298920]
[84.68838501 32.79954910]
[81.71619415 18.09696198]
[78.74400330 3.39437413]
[75.77181244 -11.30821323]
[72.79962158 -26.01080132]
[69.82742310 -40.71338654]
[59.50908661 -52.70682144]
[64.57111359 -66.71485901]
[61.59892273 -81.41744232]
[58.62673187 -96.12003326]
[36.99422073 -103.41245270]
[23.81541061 -121.90824127]
[23.98448181 -144.50038147]
[37.29893494 -162.60685730]
[31.12962723 -176.27944946]
[24.96032143 -189.95204163]
[18.79101372 -203.62461853]
[12.62170792 -217.29721069]
[6.45240164 -230.96980286]
[0.28309488 -244.64239502]
[-5.88621187 -258.31497192]
[-12.05551815 -271.98754883]
[-18.22482491 -285.66015625]
[-24.39413071 -299.33273315]
[-30.56343842 -313.00534058]
[-36.73274612 -326.67791748]
[-50.35644150 -335.80627441]
[-48.99306870 -352.14865112]
[-34.04515076 -358.89340210]
[-20.88982201 -349.10211182]
[-23.06015587 -332.84722900]
[-16.89085007 -319.17462158]
[-10.72154331 -305.50204468]
[-4.55223703 -291.82946777]
[1.61706960 -278.15686035]
[7.78637600 -264.48428345]
[13.95568275 -250.81169128]
[20.12498856 -237.13909912]
[26.29429626 -223.46652222]
[32.46360397 -209.79393005]
[38.63290787 -196.12133789]
[44.80221558 -182.44876099]
[50.97152328 -168.77616882]
[59.17773819 -169.67909241]
[67.38959503 -168.70787048]
[75.18389893 -165.90649414]
[82.15760040 -161.41342163]
[87.94866180 -155.45477295]
[92.25482178 -148.33291626]
[94.84938812 -140.41113281]
[95.59314728 -132.09512329]
[94.44184113 -123.81220245]
[91.44875336 -115.98934174]
[86.76223755 -109.03116608]
[80.61843872 -103.29901886]
[73.32931519 -99.09222412]
[76.30151367 -84.38964081]
[79.27370453 -69.68704987]
[89.37944794 -58.74524689]
[84.53001404 -43.68558121]
[87.50220490 -28.98299217]
[90.47439575 -14.28040504]
[93.44658661 0.42218202]
[96.41878510 15.12476921]
[99.39097595 29.82735634]
[102.22207642 32.09963608]
[104.04175568 35.90537262]
[104.11882019 40.72891235]
[101.99234009 45.73783112]
[103.85749817 60.62142181]
[105.72265625 75.50501251]
[107.58780670 90.38859558]
[113.92708588 103.98321533]
[124.12967682 114.97898865]
[134.33226013 125.97476959]
[144.53485107 136.97055054]
[154.73744202 147.96632385]
[169.79579163 152.81987000]
[172.78068542 167.41232300]
[182.98327637 178.40809631]
[193.18586731 189.40386963]
[203.38845825 200.39965820]
[219.30201721 202.43397522]
[227.50997925 216.21833801]
[221.71592712 231.17857361]
[206.36453247 235.83845520]
[193.23210144 226.62332153]
[192.39268494 210.60224915]
[182.19009399 199.60646057]
[171.98750305 188.61068726]
[161.78491211 177.61491394]
[147.45632935 173.54786682]
[143.74166870 158.16891479]
[133.53907776 147.17314148]
[123.33648682 136.17736816]
[113.13389587 125.18157959]
[102.93130493 114.18580627]
[95.52958679 115.39598846]
[102.40598297 128.72697449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[23 98]
[24 97]
[25 96]
[26 95]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[34 84]
[35 83]
[36 82]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% Start Annotations
3 14 0.0 1 colorpair
4 13 0.0 1 colorpair
5 12 0.0 1 colorpair
6 11 0.0 1 colorpair
23 98 0.0 1 colorpair
24 97 0.0 1 colorpair
25 96 0.0 1 colorpair
26 95 0.0 1 colorpair
27 91 0.0 1 colorpair
28 90 0.0 1 colorpair
29 89 0.0 1 colorpair
30 88 0.0 1 colorpair
31 87 0.0 1 colorpair
32 86 0.0 1 colorpair
34 84 0.0 1 colorpair
35 83 0.0 1 colorpair
36 82 0.0 1 colorpair
40 69 0.0 1 colorpair
41 68 0.0 1 colorpair
42 67 0.0 1 colorpair
43 66 0.0 1 colorpair
44 65 0.0 1 colorpair
45 64 0.0 1 colorpair
46 63 0.0 1 colorpair
47 62 0.0 1 colorpair
48 61 0.0 1 colorpair
49 60 0.0 1 colorpair
50 59 0.0 1 colorpair
51 58 0.0 1 colorpair
52 57 0.0 1 colorpair
99 123 0.0 1 colorpair
100 122 0.0 1 colorpair
101 121 0.0 1 colorpair
102 120 0.0 1 colorpair
103 119 0.0 1 colorpair
105 117 0.0 1 colorpair
106 116 0.0 1 colorpair
107 115 0.0 1 colorpair
108 114 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
