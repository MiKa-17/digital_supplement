%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 10:10:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__G___AUGCAGCAAAAGGCUAUGUUAGUGUCCCUGAUCGUCAUCUGUUUAACGGUUAUAGUAUUCACACUGGUGACGAGGAAAGCCCUCUGCGAAGUGCGAAUCCGAGACGGCCAUAAGGAGGUUGCUGCAUUCAUAGCUUACGAAUCUGAG___\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51012421 91.89596558]
[62.55672836 90.68884277]
[47.66406631 88.88059235]
[32.85628891 86.47412872]
[18.15742493 83.47337341]
[3.59130669 79.88318634]
[-10.81843567 75.70939636]
[-25.04842949 70.95876312]
[-39.07559204 65.63899994]
[-52.87717438 59.75873566]
[-66.43079376 53.32750320]
[-79.71445465 46.35573959]
[-92.70661926 38.85474777]
[-105.38621521 30.83669853]
[-117.73266602 22.31459618]
[-129.72596741 13.30226231]
[-141.34663391 3.81431651]
[-152.57585144 -6.13385248]
[-163.39537048 -16.52610970]
[-173.78767395 -27.34559631]
[-183.73588562 -38.57476425]
[-193.22389221 -50.19540024]
[-202.23626709 -62.18865585]
[-210.75842285 -74.53507996]
[-218.77651978 -87.21463776]
[-226.27757263 -100.20677185]
[-233.24938965 -113.49040985]
[-239.68067932 -127.04399872]
[-245.56100464 -140.84555054]
[-250.88081360 -154.87269592]
[-255.63150024 -169.10267639]
[-259.80535889 -183.51239014]
[-263.39559937 -198.07849121]
[-266.39642334 -212.77735901]
[-268.80294800 -227.58511353]
[-270.61126709 -242.47776794]
[-271.81845093 -257.43115234]
[-272.42254639 -272.42105103]
[-272.42254639 -287.42306519]
[-271.81851196 -302.41296387]
[-270.61135864 -317.36633301]
[-268.80307007 -332.25900269]
[-266.39660645 -347.06677246]
[-263.39584351 -361.76565552]
[-259.80563354 -376.33175659]
[-255.63180542 -390.74148560]
[-250.88116455 -404.97146606]
[-245.56137085 -418.99862671]
[-239.68109131 -432.80020142]
[-233.24984741 -446.35382080]
[-226.27806091 -459.63748169]
[-218.77705383 -472.62960815]
[-210.75898743 -485.30920410]
[-202.23686218 -497.65563965]
[-193.22451782 -509.64892578]
[-183.73655701 -521.26959229]
[-173.78837585 -532.49877930]
[-163.39610291 -543.31829834]
[-152.57659912 -553.71057129]
[-141.34741211 -563.65881348]
[-129.72676086 -573.14678955]
[-117.73349762 -582.15911865]
[-105.38706207 -590.68127441]
[-92.70748901 -598.69934082]
[-79.71534729 -606.20037842]
[-66.43170166 -613.17218018]
[-52.87810516 -619.60345459]
[-39.07653809 -625.48376465]
[-25.04939079 -630.80352783]
[-10.81940937 -635.55419922]
[3.59032106 -639.72808838]
[18.15642929 -643.31829834]
[32.85528564 -646.31909180]
[47.66305542 -648.72558594]
[62.55571365 -650.53387451]
[77.50910950 -651.74102783]
[92.49897766 -652.34509277]
[107.50102234 -652.34509277]
[122.49089050 -651.74102783]
[137.44429016 -650.53387451]
[152.33694458 -648.72558594]
[167.14471436 -646.31909180]
[181.84356689 -643.31829834]
[196.40968323 -639.72808838]
[210.81941223 -635.55419922]
[225.04939270 -630.80352783]
[239.07653809 -625.48376465]
[252.87811279 -619.60345459]
[266.43170166 -613.17218018]
[279.71536255 -606.20037842]
[292.70748901 -598.69934082]
[305.38705444 -590.68127441]
[317.73348999 -582.15911865]
[329.72677612 -573.14678955]
[341.34741211 -563.65881348]
[352.57659912 -553.71057129]
[363.39608765 -543.31829834]
[373.78836060 -532.49877930]
[383.73654175 -521.26959229]
[393.22451782 -509.64892578]
[402.23687744 -497.65563965]
[410.75897217 -485.30920410]
[418.77703857 -472.62960815]
[426.27804565 -459.63748169]
[433.24984741 -446.35382080]
[439.68109131 -432.80020142]
[445.56137085 -418.99862671]
[450.88116455 -404.97146606]
[455.63180542 -390.74148560]
[459.80563354 -376.33175659]
[463.39584351 -361.76565552]
[466.39660645 -347.06677246]
[468.80307007 -332.25900269]
[470.61135864 -317.36633301]
[471.81851196 -302.41296387]
[472.42254639 -287.42306519]
[472.42254639 -272.42105103]
[471.81845093 -257.43115234]
[470.61126709 -242.47776794]
[468.80294800 -227.58511353]
[466.39642334 -212.77735901]
[463.39559937 -198.07849121]
[459.80535889 -183.51239014]
[455.63150024 -169.10267639]
[450.88082886 -154.87269592]
[445.56100464 -140.84555054]
[439.68066406 -127.04399872]
[433.24938965 -113.49040985]
[426.27755737 -100.20677185]
[418.77651978 -87.21463776]
[410.75842285 -74.53507996]
[402.23626709 -62.18865585]
[393.22387695 -50.19540024]
[383.73590088 -38.57476425]
[373.78768921 -27.34559631]
[363.39538574 -16.52610970]
[352.57583618 -6.13385248]
[341.34664917 3.81431651]
[329.72595215 13.30226231]
[317.73266602 22.31459618]
[305.38619995 30.83669853]
[292.70663452 38.85474777]
[279.71444702 46.35573959]
[266.43078613 53.32750320]
[252.87718201 59.75873566]
[239.07559204 65.63899994]
[225.04843140 70.95876312]
[210.81843567 75.70939636]
[196.40869141 79.88318634]
[181.84257507 83.47337341]
[167.14370728 86.47412872]
[152.33593750 88.88059235]
[137.44326782 90.68884277]
[122.48987579 91.89596558]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
