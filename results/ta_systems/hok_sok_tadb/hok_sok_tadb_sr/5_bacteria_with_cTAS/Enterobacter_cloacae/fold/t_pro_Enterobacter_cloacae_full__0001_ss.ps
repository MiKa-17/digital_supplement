%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 06:11:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________AUGCCA_UAAAAAACUCUGCUAUGGGGCGUGUUUAUUAUUUGUCUGACGAUAUUGAUCUUCACCUUGAUGACGCGCGACACGCUGUGCGAGUUGCGAUUAAGGAACGAGAAACAGGAGGUGGCGGCGAUGUUGGCUUGCGAAGCAGG____\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50962830 91.91106415]
[62.55392838 90.73406219]
[47.65597153 88.97080994]
[32.83872604 86.62402344]
[18.12503815 83.69732666]
[3.53759456 80.19522858]
[-10.90110970 76.12313080]
[-25.16881180 71.48730469]
[-39.24351501 66.29491425]
[-53.10351181 60.55394745]
[-66.72743225 54.27326965]
[-80.09427643 47.46256256]
[-93.18342590 40.13232422]
[-105.97469330 32.29385757]
[-118.44837189 23.95925331]
[-130.58520508 15.14135838]
[-142.36650085 5.85377216]
[-153.77409363 -3.88918543]
[-164.79037476 -14.07249165]
[-175.39836121 -24.68044472]
[-185.58171082 -35.69668579]
[-195.32470703 -47.10423279]
[-204.61235046 -58.88549423]
[-213.43028259 -71.02230072]
[-221.76493835 -83.49594116]
[-229.60345459 -96.28718567]
[-236.93374634 -109.37630463]
[-243.74450684 -122.74311829]
[-250.02522278 -136.36701965]
[-255.76625061 -150.22698975]
[-260.95867920 -164.30168152]
[-265.59457397 -178.56936646]
[-269.66671753 -193.00805664]
[-273.16888428 -207.59547424]
[-276.09564209 -222.30915833]
[-278.44247437 -237.12638855]
[-280.20578003 -252.02433777]
[-281.38284302 -266.98004150]
[-281.97183228 -281.97039795]
[-281.97186279 -296.97235107]
[-281.38290405 -311.96270752]
[-280.20587158 -326.91842651]
[-278.44259644 -341.81637573]
[-276.09579468 -356.63360596]
[-273.16909790 -371.34729004]
[-269.66696167 -385.93475342]
[-265.59484863 -400.37344360]
[-260.95901489 -414.64114380]
[-255.76660156 -428.71582031]
[-250.02561951 -442.57580566]
[-243.74491882 -456.19973755]
[-236.93418884 -469.56655884]
[-229.60394287 -482.65570068]
[-221.76545715 -495.44696045]
[-213.43083191 -507.92062378]
[-204.61293030 -520.05743408]
[-195.32533264 -531.83874512]
[-185.58235168 -543.24633789]
[-175.39903259 -554.26257324]
[-164.79107666 -564.87054443]
[-153.77481079 -575.05389404]
[-142.36724854 -584.79687500]
[-130.58598328 -594.08447266]
[-118.44916534 -602.90240479]
[-105.97550964 -611.23706055]
[-93.18425751 -619.07556152]
[-80.09513092 -626.40582275]
[-66.72830963 -633.21655273]
[-53.10440063 -639.49731445]
[-39.24441528 -645.23828125]
[-25.16972923 -650.43072510]
[-10.90203762 -655.06658936]
[3.53665614 -659.13873291]
[18.12409019 -662.64086914]
[32.83777237 -665.56756592]
[47.65501022 -667.91442871]
[62.55296326 -669.67767334]
[77.50865936 -670.85473633]
[92.49903107 -671.44372559]
[107.50096893 -671.44372559]
[122.49134064 -670.85473633]
[137.44703674 -669.67767334]
[152.34498596 -667.91442871]
[167.16223145 -665.56756592]
[181.87591553 -662.64086914]
[196.46334839 -659.13873291]
[210.90203857 -655.06658936]
[225.16972351 -650.43072510]
[239.24441528 -645.23828125]
[253.10440063 -639.49731445]
[266.72830200 -633.21655273]
[280.09512329 -626.40582275]
[293.18426514 -619.07556152]
[305.97552490 -611.23706055]
[318.44915771 -602.90240479]
[330.58599854 -594.08447266]
[342.36724854 -584.79687500]
[353.77481079 -575.05389404]
[364.79107666 -564.87054443]
[375.39904785 -554.26257324]
[385.58236694 -543.24633789]
[395.32531738 -531.83874512]
[404.61291504 -520.05743408]
[413.43084717 -507.92062378]
[421.76547241 -495.44696045]
[429.60394287 -482.65570068]
[436.93420410 -469.56655884]
[443.74493408 -456.19973755]
[450.02560425 -442.57580566]
[455.76660156 -428.71582031]
[460.95901489 -414.64114380]
[465.59484863 -400.37344360]
[469.66696167 -385.93475342]
[473.16909790 -371.34729004]
[476.09579468 -356.63360596]
[478.44259644 -341.81637573]
[480.20587158 -326.91842651]
[481.38290405 -311.96270752]
[481.97186279 -296.97235107]
[481.97183228 -281.97039795]
[481.38284302 -266.98004150]
[480.20578003 -252.02433777]
[478.44247437 -237.12638855]
[476.09564209 -222.30915833]
[473.16888428 -207.59547424]
[469.66671753 -193.00805664]
[465.59457397 -178.56936646]
[460.95867920 -164.30168152]
[455.76623535 -150.22698975]
[450.02523804 -136.36701965]
[443.74450684 -122.74311829]
[436.93374634 -109.37630463]
[429.60345459 -96.28718567]
[421.76492310 -83.49594116]
[413.43029785 -71.02230072]
[404.61233521 -58.88549423]
[395.32470703 -47.10423279]
[385.58172607 -35.69668579]
[375.39837646 -24.68044472]
[364.79037476 -14.07249165]
[353.77407837 -3.88918543]
[342.36651611 5.85377216]
[330.58520508 15.14135838]
[318.44836426 23.95925331]
[305.97470093 32.29385757]
[293.18341064 40.13232422]
[280.09426880 47.46256256]
[266.72744751 54.27326965]
[253.10351562 60.55394745]
[239.24351501 66.29491425]
[225.16880798 71.48730469]
[210.90110779 76.12313080]
[196.46240234 80.19522858]
[181.87496948 83.69732666]
[167.16127014 86.62402344]
[152.34402466 88.97080994]
[137.44607544 90.73406219]
[122.49037170 91.91106415]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
