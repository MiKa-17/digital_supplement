%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:56:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCGCGAAAGCUGAUUUUGUACGGGCUCAUGGUGAUUUGUUUCACAUUAUUGGCCUGGACCUGGAUGGUGCGUGAUUCGCUGUGCGAGUUGCACAUUAAGCAGGGAAAUACGGAAAUUGCGGCAGUCUUAAGCGACGAAAUUAAC\
) } def
/len { sequence length } bind def

/coor [
[192.63853455 331.15246582]
[194.50903320 323.78552246]
[197.80058289 316.92370605]
[202.38720703 310.83847046]
[208.09165955 305.77139282]
[201.91314697 292.10296631]
[195.73461914 278.43453979]
[189.55610657 264.76611328]
[183.37757874 251.09767151]
[168.77827454 248.26959229]
[158.52236938 237.25685120]
[156.69636536 222.13999939]
[164.20860291 208.69111633]
[158.03009033 195.02268982]
[151.85157776 181.35426331]
[145.52833557 167.75218201]
[139.06109619 154.21797180]
[132.59384155 140.68376160]
[126.12660217 127.14955902]
[119.65935516 113.61535645]
[108.50389099 121.16959381]
[95.66207123 121.27603149]
[85.44081879 114.59304810]
[80.88874054 103.94283295]
[66.16163635 101.09458923]
[51.43453598 98.24634552]
[36.70743179 95.39810181]
[21.98033142 92.54986572]
[7.25323009 89.70162201]
[-7.76505280 94.67774200]
[-18.79159355 84.66451263]
[-33.51869583 81.81626892]
[-48.24579620 78.96803284]
[-63.03003693 76.43301392]
[-77.86475372 74.21237946]
[-92.69946289 71.99173737]
[-107.53417969 69.77109528]
[-120.09014893 79.36917877]
[-135.74415588 77.19485474]
[-145.20895386 64.53810883]
[-142.86924744 48.90796661]
[-130.11312866 39.57751465]
[-114.50860596 42.08234406]
[-105.31353760 54.93638229]
[-90.47882843 57.15702438]
[-75.64411163 59.37766266]
[-60.80939484 61.59830475]
[-56.45580673 59.48581314]
[-50.72192383 60.13491058]
[-45.39755630 64.24092865]
[-30.67045403 67.08917236]
[-15.94335175 69.93741608]
[-1.97844982 64.75756836]
[10.10147190 74.97451782]
[24.82857323 77.82276154]
[39.55567551 80.67100525]
[54.28277588 83.51924896]
[69.00988007 86.36748505]
[83.73697662 89.21572876]
[92.95940399 80.23619080]
[106.65106201 78.56089020]
[119.36593628 85.97043610]
[125.54445648 72.30200958]
[131.72297668 58.63357925]
[137.90148926 44.96515274]
[132.55981445 30.33285332]
[139.02041626 16.55913925]
[153.00300598 11.55683899]
[159.18151855 -2.11158872]
[165.36004639 -15.78001595]
[171.53855896 -29.44844246]
[177.71707153 -43.11687088]
[176.35093689 -58.87898636]
[188.64376831 -67.28943634]
[194.82228088 -80.95786285]
[201.00080872 -94.62628937]
[207.17932129 -108.29471588]
[213.35783386 -121.96314240]
[219.53636169 -135.63157654]
[225.71487427 -149.30000305]
[231.89340210 -162.96842957]
[238.07191467 -176.63685608]
[239.08647156 -193.56040955]
[255.62951660 -197.27041626]
[263.77410889 -182.40090942]
[251.74034119 -170.45832825]
[245.56182861 -156.78990173]
[239.38330078 -143.12147522]
[233.20478821 -129.45304871]
[227.02627563 -115.78462219]
[220.84774780 -102.11619568]
[214.66923523 -88.44776917]
[208.49070740 -74.77934265]
[202.31219482 -61.11091614]
[204.12026978 -46.32645798]
[191.38551331 -36.93835068]
[185.20698547 -23.26992416]
[179.02847290 -9.60149765]
[172.84994507 4.06693029]
[166.67143250 17.73535728]
[172.15428162 31.53658676]
[166.08309937 45.48633194]
[151.56991577 51.14367294]
[145.39140320 64.81210327]
[139.21289062 78.48052979]
[133.03436279 92.14895630]
[133.19355774 107.14810944]
[139.66081238 120.68231964]
[146.12805176 134.21652222]
[152.59529114 147.75073242]
[159.06254578 161.28494263]
[165.63165283 167.73362732]
[165.52000427 175.17575073]
[171.69851685 188.84417725]
[177.87704468 202.51260376]
[192.93588257 205.75871277]
[203.07730103 217.11674500]
[204.56843567 232.09141541]
[197.04600525 244.91915894]
[203.22453308 258.58758545]
[209.40304565 272.25601196]
[215.58157349 285.92443848]
[221.76008606 299.59286499]
[245.38778687 301.79437256]
[263.12731934 317.38381958]
[268.29629517 340.31060791]
[259.05242920 361.79467773]
[268.22589111 373.66259766]
[277.39935303 385.53051758]
[293.10549927 387.28909302]
[302.90252686 399.69046021]
[300.97799683 415.37713623]
[288.47372437 425.04248047]
[272.80825806 422.95220947]
[263.27566528 410.34646606]
[265.53143311 394.70397949]
[256.35797119 382.83605957]
[247.18450928 370.96813965]
[240.18562317 373.64532471]
[232.78645325 374.89050293]
[225.27732849 374.65093994]
[217.95359802 372.93222046]
[211.10411072 369.79812622]
[204.99980164 365.36843872]
[199.88293457 359.81420898]
[195.95751953 353.35119629]
[193.38119507 346.23156738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[13 115]
[14 114]
[15 113]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[31 52]
[32 51]
[33 50]
[34 47]
[35 46]
[36 45]
[37 44]
[62 106]
[63 105]
[64 104]
[65 103]
[68 100]
[69 99]
[70 98]
[71 97]
[72 96]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
[127 138]
[128 137]
[129 136]
] def

init

% Start Annotations
5 123 0.0 1 colorpair
6 122 0.0 1 colorpair
7 121 0.0 1 colorpair
8 120 0.0 1 colorpair
9 119 0.0 1 colorpair
13 115 0.0 1 colorpair
14 114 0.0 1 colorpair
15 113 0.0 1 colorpair
16 111 0.0 1 colorpair
17 110 0.0 1 colorpair
18 109 0.0 1 colorpair
19 108 0.0 1 colorpair
20 107 0.0 1 colorpair
24 59 0.0 1 colorpair
25 58 0.0 1 colorpair
26 57 0.0 1 colorpair
27 56 0.0 1 colorpair
28 55 0.0 1 colorpair
29 54 0.0 1 colorpair
31 52 0.0 1 colorpair
32 51 0.0 1 colorpair
33 50 0.0 1 colorpair
34 47 0.0 1 colorpair
35 46 0.0 1 colorpair
36 45 0.0 1 colorpair
37 44 0.0 1 colorpair
62 106 0.0 1 colorpair
63 105 0.0 1 colorpair
64 104 0.0 1 colorpair
65 103 0.0 1 colorpair
68 100 0.0 1 colorpair
69 99 0.0 1 colorpair
70 98 0.0 1 colorpair
71 97 0.0 1 colorpair
72 96 0.0 1 colorpair
74 94 0.0 1 colorpair
75 93 0.0 1 colorpair
76 92 0.0 1 colorpair
77 91 0.0 1 colorpair
78 90 0.0 1 colorpair
79 89 0.0 1 colorpair
80 88 0.0 1 colorpair
81 87 0.0 1 colorpair
82 86 0.0 1 colorpair
127 138 0.0 1 colorpair
128 137 0.0 1 colorpair
129 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
