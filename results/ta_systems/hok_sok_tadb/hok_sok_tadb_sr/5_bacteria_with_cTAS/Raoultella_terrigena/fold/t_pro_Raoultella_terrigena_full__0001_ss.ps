%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan 29 09:56:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AACUGCCACGAAGUACCCUGAUCUGGUGUGUAUUAAUAGUGUGCCUCACACUGCUGAUAUUCACUUACCUGACCCGUAAAUCGCUCUGCGAAAUCCGGUAC_______________________________________________\
) } def
/len { sequence length } bind def

/coor [
[150.13804626 435.54257202]
[141.79980469 423.05984497]
[134.68588257 409.84103394]
[128.86073303 396.00582886]
[124.37707520 381.67959595]
[121.27554321 366.99200439]
[119.58421326 352.07611084]
[119.31840515 337.06695557]
[120.48052979 322.10052490]
[123.06005096 307.31231689]
[127.03362274 292.83630371]
[132.36524963 278.80352783]
[139.00665283 265.34112549]
[146.89767456 252.57096863]
[155.96685791 240.60874939]
[166.13206482 229.56278992]
[177.30123901 219.53312683]
[168.38508606 207.47070312]
[159.46894836 195.40826416]
[150.55279541 183.34584045]
[141.63664246 171.28340149]
[129.68827820 169.16236877]
[122.16713715 159.13223267]
[123.56450653 146.26945496]
[114.89790344 134.02650452]
[106.23129272 121.78354645]
[87.47070312 122.16042328]
[72.71468353 107.34667206]
[73.20666504 84.29480743]
[59.64476776 77.88583374]
[46.08287048 71.47685242]
[32.52097321 65.06787872]
[16.73799706 66.16704559]
[8.53681183 53.73363113]
[-5.02508450 47.32465363]
[-18.58698082 40.91567993]
[-32.14887619 34.50670242]
[-45.71077347 28.09772682]
[-59.27267075 21.68875122]
[-75.05564880 22.78791809]
[-83.25683594 10.35450172]
[-96.81873322 3.94552612]
[-110.38062286 -2.46344972]
[-123.94252014 -8.87242508]
[-137.50442505 -15.28140068]
[-151.06631470 -21.69037628]
[-164.62820435 -28.09935188]
[-181.53218079 -29.40020370]
[-184.96165466 -46.00366974]
[-169.95642090 -53.89541245]
[-158.21923828 -41.66124725]
[-144.65733337 -35.25227356]
[-131.09544373 -28.84329796]
[-117.53354645 -22.43432236]
[-103.97164917 -16.02534676]
[-90.40975189 -9.61637020]
[-76.84785461 -3.20739460]
[-62.03491592 -4.76497412]
[-52.86369324 8.12685490]
[-39.30179977 14.53583050]
[-25.73990250 20.94480705]
[-12.17800522 27.35378265]
[1.38389099 33.76275635]
[14.94578743 40.17173386]
[29.75872803 38.61415482]
[38.92995071 51.50598145]
[52.49184799 57.91495895]
[66.05374146 64.32393646]
[79.61563873 70.73291016]
[70.78658295 58.60658646]
[61.95752335 46.48025894]
[49.19188690 38.60380936]
[40.72775650 26.22001076]
[38.02544403 11.46543503]
[41.55118179 -3.11431670]
[50.69667435 -15.00380611]
[63.88405609 -22.15174294]
[78.83810425 -23.32489777]
[92.97882080 -18.32086754]
[103.86649323 -8.00299263]
[109.62268829 5.84858561]
[109.25428772 20.84406090]
[102.82351685 34.39801788]
[102.00794220 49.37582779]
[101.19235992 64.35363770]
[109.08884430 51.60038376]
[116.98532867 38.84712601]
[124.88180542 26.09386826]
[128.07933044 9.44417858]
[144.96351624 7.90765285]
[151.11399841 23.70663643]
[137.63507080 33.99035263]
[129.73858643 46.74360657]
[121.84210205 59.49686432]
[113.94561768 72.25012207]
[126.06257629 93.51560974]
[118.47424316 113.11693573]
[127.14085388 125.35989380]
[135.80746460 137.60284424]
[152.69442749 144.87339783]
[153.69906616 162.36724854]
[162.61521912 174.42968750]
[171.53137207 186.49211121]
[180.44752502 198.55455017]
[189.36367798 210.61697388]
[202.22859192 202.88143921]
[215.77056885 196.40382385]
[229.86697388 191.24279785]
[244.39015198 187.44511414]
[259.20855713 185.04515076]
[274.18798828 184.06465149]
[289.19277954 184.51249695]
[304.08706665 186.38462830]
[318.73596191 189.66409302]
[333.00677490 194.32118225]
[346.77029419 200.31373596]
[359.90182495 207.58746338]
[372.28250122 216.07650757]
[383.80017090 225.70397949]
[394.35049438 236.38270569]
[403.83798218 248.01594543]
[412.17669678 260.49835205]
[419.29107666 273.71691895]
[425.11676025 287.55187988]
[429.60092163 301.87799072]
[432.70300293 316.56546021]
[434.39486694 331.48129272]
[434.66122437 346.49041748]
[433.49963379 361.45690918]
[430.92065430 376.24517822]
[426.94760132 390.72137451]
[421.61651611 404.75433350]
[414.97558594 418.21697998]
[407.08502197 430.98742676]
[398.01629639 442.94995117]
[387.85147095 453.99627686]
[376.68267822 464.02636719]
[364.61099243 472.94934082]
[351.74578857 480.68441772]
[338.20358276 487.16152954]
[324.10699463 492.32205200]
[309.58367920 496.11920166]
[294.76519775 498.51861572]
[279.78573608 499.49856567]
[264.78094482 499.05017090]
[249.88671875 497.17752075]
[235.23794556 493.89752197]
[220.96730042 489.23989868]
[207.20401001 483.24685669]
[194.07272339 475.97262573]
[181.69236755 467.48315430]
[170.17506409 457.85525513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[24 99]
[25 98]
[26 97]
[29 69]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% Start Annotations
17 105 0.0 1 colorpair
18 104 0.0 1 colorpair
19 103 0.0 1 colorpair
20 102 0.0 1 colorpair
21 101 0.0 1 colorpair
24 99 0.0 1 colorpair
25 98 0.0 1 colorpair
26 97 0.0 1 colorpair
29 69 0.0 1 colorpair
30 68 0.0 1 colorpair
31 67 0.0 1 colorpair
32 66 0.0 1 colorpair
34 64 0.0 1 colorpair
35 63 0.0 1 colorpair
36 62 0.0 1 colorpair
37 61 0.0 1 colorpair
38 60 0.0 1 colorpair
39 59 0.0 1 colorpair
41 57 0.0 1 colorpair
42 56 0.0 1 colorpair
43 55 0.0 1 colorpair
44 54 0.0 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
47 51 0.0 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.0 1 colorpair
88 92 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
