%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:15:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____GAUGCCAAAAAAAGCAAUCGUGAAUACCCUGAUAGUCAUAGGUAUCACCAUCAUAAUAUCGACACGGAUCACACGCAAAGAACUAUGCGAAGUCCAUAUCAAAAAAGGAAAGAAAGAGGUCGCCGCAUCCACAGCCUACGAAACUAAUA__\
) } def
/len { sequence length } bind def

/coor [
[114.97287750 260.55709839]
[100.68093109 265.11123657]
[85.69929504 265.85317993]
[71.02730560 262.73345947]
[57.64365387 255.96012878]
[46.44108582 245.98503113]
[38.16686630 233.47354126]
[33.37292099 219.26023865]
[32.37902451 204.29319763]
[35.25147247 189.57080078]
[41.79866409 176.07508850]
[51.58387375 164.70628357]
[63.95709991 156.22135925]
[71.41703796 143.20793152]
[78.87696838 130.19448853]
[86.33690643 117.18106842]
[73.55122375 125.02494049]
[60.76554871 132.86882019]
[47.97986603 140.71269226]
[35.19418716 148.55656433]
[35.68412018 163.90763855]
[28.41873360 177.43945312]
[15.35238075 185.51199341]
[-0.00015573 185.95381165]
[-13.50911999 178.64604187]
[-21.54067039 165.55444336]
[-21.93435669 150.20060730]
[-14.58428288 136.71461487]
[-1.46757996 128.72413635]
[13.88742447 128.37857056]
[27.35031128 135.77088928]
[40.13599014 127.92700958]
[52.92167282 120.08313751]
[65.70735168 112.23925781]
[78.49303436 104.39538574]
[76.54753876 89.52208710]
[62.17451096 85.23069000]
[47.80148315 80.93929291]
[33.42845917 76.64788818]
[19.05543137 72.35649109]
[4.68240356 68.06509399]
[-9.69062328 63.77370071]
[-21.93938255 73.29985046]
[-37.44923019 73.77337646]
[-50.25631714 65.01219177]
[-55.43605042 50.38516617]
[-50.99671936 35.51667786]
[-38.64533997 26.12396431]
[-23.13126755 25.81871796]
[-10.41997910 34.71831131]
[-5.39922571 49.40067291]
[8.97380161 53.69207001]
[23.34682846 57.98346710]
[37.71985626 62.27486420]
[52.09288406 66.56626129]
[66.46591187 70.85765839]
[80.83893585 75.14905548]
[67.30867767 68.67356110]
[61.61351776 54.79677582]
[66.69388580 40.68331528]
[79.92678070 33.61998749]
[94.48001862 37.25360489]
[102.83973694 49.70812607]
[100.68879700 64.55503845]
[105.12377930 50.22566986]
[109.55876160 35.89629745]
[113.99374390 21.56692314]
[104.87098694 9.15396786]
[104.80737305 -6.07263231]
[113.61772156 -18.27270317]
[127.75336456 -22.89023018]
[132.18835449 -37.21960449]
[136.62333679 -51.54897690]
[133.31219482 -67.01981354]
[144.46658325 -76.89041901]
[144.01745605 -86.07117462]
[149.13632202 -91.46052551]
[153.85713196 -105.69829559]
[158.57794189 -119.93605804]
[163.29875183 -134.17382812]
[168.01956177 -148.41159058]
[172.74037170 -162.64935303]
[163.58610535 -175.17848206]
[163.57824707 -190.69555664]
[172.71983337 -203.23394775]
[187.49572754 -207.97238159]
[202.22428894 -203.08883667]
[211.24209595 -190.46113586]
[211.08161926 -174.94488525]
[201.80455017 -162.50640869]
[186.97813416 -157.92854309]
[182.25732422 -143.69078064]
[177.53651428 -129.45301819]
[172.81570435 -115.21524811]
[168.09489441 -100.97748566]
[163.37408447 -86.73971558]
[158.79595947 -72.45543671]
[162.42431641 -58.00952530]
[150.95271301 -47.11399078]
[146.51771545 -32.78461838]
[142.08273315 -18.45524597]
[151.13854980 -6.65989590]
[151.51678467 8.38407040]
[142.86288452 20.91257286]
[128.32312012 26.00190735]
[123.88813019 40.33127975]
[119.45314789 54.66065216]
[115.01816559 68.99002838]
[125.78009796 58.54106140]
[135.46374512 47.08562851]
[148.51499939 39.69205856]
[163.31900024 37.27516174]
[178.04405212 40.13398361]
[190.86820984 47.91479874]
[200.20472717 59.65488052]
[204.89837646 73.90161896]
[204.36842346 88.89225769]
[198.68045044 102.77198029]
[188.53820801 113.82345581]
[175.19662476 120.67926025]
[160.30644226 122.49111938]
[145.71006775 119.03485870]
[133.21580505 110.74033356]
[118.54647827 107.60814667]
[129.91838074 117.38975525]
[141.29028320 127.17135620]
[152.66220093 136.95295715]
[164.03410339 146.73455811]
[175.50329590 156.40190125]
[187.06864929 165.95401001]
[198.63400269 175.50610352]
[213.97857666 172.49317932]
[227.64483643 180.09365845]
[233.17997742 194.71884155]
[227.97048950 209.46318054]
[214.47612000 217.36482239]
[199.06849670 214.69287109]
[189.02264404 202.70892334]
[189.08189392 187.07145691]
[177.51654053 177.51934814]
[165.95120239 167.96723938]
[158.75093079 166.12220764]
[154.25250244 158.10646057]
[142.88058472 148.32485962]
[131.50868225 138.54325867]
[120.13677979 128.76165771]
[108.76486969 118.98005676]
[114.05510712 133.01620483]
[119.34534454 147.05235291]
[124.63558197 161.08850098]
[135.49620056 171.43484497]
[143.34480286 184.21762085]
[147.65785217 198.58416748]
[148.14764404 213.57617188]
[144.78149414 228.19358826]
[137.78396606 241.46139526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[64 108]
[65 107]
[66 106]
[67 105]
[71 101]
[72 100]
[73 99]
[75 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[124 147]
[125 146]
[126 145]
[127 144]
[128 143]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
16 35 0.0 1 colorpair
17 34 0.0 0.2 colorpair
18 33 0.16 1 colorpair
19 32 0.16 1 colorpair
20 31 0.0 0.2 colorpair
36 57 0.16 1 colorpair
37 56 0.0 1 colorpair
38 55 0.16 1 colorpair
39 54 0.0 0.2 colorpair
40 53 0.0 1 colorpair
41 52 0.0 1 colorpair
42 51 0.0 0.2 colorpair
64 108 0.16 1 colorpair
65 107 0.16 1 colorpair
66 106 0.16 1 colorpair
67 105 0.16 1 colorpair
71 101 0.0 0.2 colorpair
72 100 0.0 1 colorpair
73 99 0.0 0.2 colorpair
75 97 0.16 1 colorpair
77 96 0.16 1 colorpair
78 95 0.0 0.2 colorpair
79 94 0.0 1 colorpair
80 93 0.0 1 colorpair
81 92 0.16 1 colorpair
82 91 0.16 1 colorpair
124 147 0.0 0.2 colorpair
125 146 0.0 1 colorpair
126 145 0.0 1 colorpair
127 144 0.16 1 colorpair
128 143 0.0 0.2 colorpair
129 141 0.0 0.2 colorpair
130 140 0.0 1 colorpair
131 139 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
17 34 2 gmark
18 cmark
33 cmark
19 cmark
32 cmark
20 31 2 gmark
57 cmark
55 cmark
39 54 2 gmark
42 51 2 gmark
108 cmark
65 cmark
107 cmark
66 cmark
106 cmark
67 cmark
105 cmark
71 101 2 gmark
73 99 2 gmark
75 cmark
97 cmark
77 cmark
96 cmark
78 95 2 gmark
81 cmark
82 cmark
124 147 2 gmark
144 cmark
128 143 2 gmark
129 141 2 gmark
131 cmark

% End Annotations
showpage
end
%%EOF
