%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:33:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________________AAAAUGCUGACAAAAUAUGUCCUUGUGGCAGUCAUAGUGCUGUGUUUCACGGUGCUGGUAUUCACACUGCUGACCGGAGACUCGCUGUGUGAGUUGCGGAUCAAAGAAGGUAAUAUGGAGGUUACGGCUGUUCUCGCUUACGAAUCG___AAGAAG____________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50675964 92.00662231]
[62.53784943 91.02037811]
[47.60948181 89.54233551]
[32.73780441 87.57409668]
[17.93890762 85.11778259]
[3.22880793 82.17606354]
[-11.37657928 78.75210571]
[-25.86145020 74.84963226]
[-40.21012878 70.47285461]
[-54.40709305 65.62651825]
[-68.43698120 60.31585312]
[-82.28459930 54.54661560]
[-95.93498230 48.32504654]
[-109.37334442 41.65787888]
[-122.58515930 34.55232620]
[-135.55610657 27.01607513]
[-148.27218628 19.05728340]
[-160.71960449 10.68456173]
[-172.88491821 1.90697050]
[-184.75494385 -7.26599312]
[-196.31683350 -16.82440376]
[-207.55810547 -26.75791740]
[-218.46658325 -37.05578613]
[-229.03044128 -47.70686722]
[-239.23828125 -58.69963074]
[-249.07902527 -70.02219391]
[-258.54205322 -81.66229248]
[-267.61712646 -93.60733032]
[-276.29440308 -105.84439087]
[-284.56448364 -118.36023712]
[-292.41845703 -131.14131165]
[-299.84780884 -144.17378235]
[-306.84451294 -157.44357300]
[-313.40097046 -170.93629456]
[-319.51010132 -184.63737488]
[-325.16528320 -198.53195190]
[-330.36041260 -212.60502625]
[-335.08987427 -226.84135437]
[-339.34854126 -241.22554016]
[-343.13177490 -255.74200439]
[-346.43554688 -270.37506104]
[-349.25622559 -285.10882568]
[-351.59075928 -299.92742920]
[-353.43667603 -314.81478882]
[-354.79193115 -329.75479126]
[-355.65505981 -344.73132324]
[-356.02517700 -359.72811890]
[-355.90179443 -374.72894287]
[-355.28512573 -389.71765137]
[-354.17581177 -404.67791748]
[-352.57504272 -419.59362793]
[-350.48452759 -434.44860840]
[-347.90658569 -449.22680664]
[-344.84399414 -463.91223145]
[-341.30001831 -478.48895264]
[-337.27853394 -492.94122314]
[-332.78390503 -507.25341797]
[-327.82095337 -521.41003418]
[-322.39508057 -535.39581299]
[-316.51214600 -549.19549561]
[-310.17852783 -562.79425049]
[-303.40106201 -576.17730713]
[-296.18707275 -589.33026123]
[-288.54440308 -602.23876953]
[-280.48129272 -614.88897705]
[-272.00646973 -627.26708984]
[-263.12911987 -639.35980225]
[-253.85884094 -651.15399170]
[-244.20565796 -662.63684082]
[-234.18002319 -673.79608154]
[-223.79278564 -684.61944580]
[-213.05517578 -695.09533691]
[-201.97883606 -705.21246338]
[-190.57571411 -714.95971680]
[-178.85818481 -724.32672119]
[-166.83889771 -733.30322266]
[-154.53088379 -741.87957764]
[-141.94744873 -750.04644775]
[-129.10221863 -757.79504395]
[-116.00907135 -765.11694336]
[-102.68218994 -772.00427246]
[-89.13599396 -778.44952393]
[-75.38513947 -784.44573975]
[-61.44450760 -789.98645020]
[-47.32918549 -795.06567383]
[-33.05443954 -799.67785645]
[-18.63571930 -803.81805420]
[-4.08862734 -807.48181152]
[10.57109451 -810.66510010]
[25.32758522 -813.36450195]
[40.16487503 -815.57708740]
[55.06691360 -817.30047607]
[70.01757050 -818.53283691]
[85.00067139 -819.27276611]
[100.00000000 -819.51947021]
[114.99932861 -819.27276611]
[129.98243713 -818.53283691]
[144.93309021 -817.30047607]
[159.83512878 -815.57708740]
[174.67240906 -813.36450195]
[189.42890930 -810.66510010]
[204.08862305 -807.48181152]
[218.63571167 -803.81805420]
[233.05444336 -799.67785645]
[247.32917786 -795.06567383]
[261.44451904 -789.98645020]
[275.38513184 -784.44573975]
[289.13598633 -778.44952393]
[302.68218994 -772.00427246]
[316.00906372 -765.11694336]
[329.10220337 -757.79504395]
[341.94744873 -750.04644775]
[354.53088379 -741.87957764]
[366.83889771 -733.30322266]
[378.85818481 -724.32672119]
[390.57571411 -714.95971680]
[401.97882080 -705.21246338]
[413.05517578 -695.09533691]
[423.79278564 -684.61944580]
[434.18002319 -673.79608154]
[444.20565796 -662.63684082]
[453.85882568 -651.15399170]
[463.12911987 -639.35980225]
[472.00646973 -627.26708984]
[480.48129272 -614.88897705]
[488.54440308 -602.23876953]
[496.18707275 -589.33026123]
[503.40106201 -576.17730713]
[510.17852783 -562.79425049]
[516.51214600 -549.19549561]
[522.39508057 -535.39581299]
[527.82098389 -521.41003418]
[532.78387451 -507.25341797]
[537.27856445 -492.94122314]
[541.30004883 -478.48895264]
[544.84399414 -463.91223145]
[547.90661621 -449.22680664]
[550.48455811 -434.44860840]
[552.57501221 -419.59362793]
[554.17578125 -404.67791748]
[555.28515625 -389.71765137]
[555.90179443 -374.72894287]
[556.02514648 -359.72811890]
[555.65509033 -344.73132324]
[554.79193115 -329.75479126]
[553.43670654 -314.81478882]
[551.59075928 -299.92742920]
[549.25622559 -285.10882568]
[546.43554688 -270.37506104]
[543.13177490 -255.74200439]
[539.34851074 -241.22554016]
[535.08984375 -226.84135437]
[530.36041260 -212.60502625]
[525.16528320 -198.53195190]
[519.51007080 -184.63737488]
[513.40093994 -170.93629456]
[506.84451294 -157.44357300]
[499.84780884 -144.17378235]
[492.41845703 -131.14131165]
[484.56448364 -118.36023712]
[476.29440308 -105.84439087]
[467.61712646 -93.60733032]
[458.54205322 -81.66229248]
[449.07904053 -70.02219391]
[439.23828125 -58.69963074]
[429.03045654 -47.70686722]
[418.46658325 -37.05578613]
[407.55810547 -26.75791740]
[396.31683350 -16.82440376]
[384.75494385 -7.26599312]
[372.88491821 1.90697050]
[360.71960449 10.68456173]
[348.27218628 19.05728340]
[335.55612183 27.01607513]
[322.58514404 34.55232620]
[309.37335205 41.65787888]
[295.93496704 48.32504654]
[282.28460693 54.54661560]
[268.43698120 60.31585312]
[254.40708923 65.62651825]
[240.21012878 70.47285461]
[225.86145020 74.84963226]
[211.37658691 78.75210571]
[196.77119446 82.17606354]
[182.06109619 85.11778259]
[167.26219177 87.57409668]
[152.39051819 89.54233551]
[137.46214294 91.02037811]
[122.49324036 92.00662231]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
