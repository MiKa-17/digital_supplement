%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUGCCACAAAAUACGCUUGUUCUAUGCCUGUUAAUUGUUUGUAUAACAGUGCUGGCAUUCACAUUAAUUACGCAUAAAUCACUGUGUGAGUUACGUGUGAAAAAUGGGAGCAAGGAGGUUGCGGCCAUUUUAGCUUACGAAUCUGAACGG\
) } def
/len { sequence length } bind def

/coor [
[152.73971558 411.90365601]
[155.89108276 397.19091797]
[161.77017212 383.34051514]
[170.16442871 370.85321045]
[180.77043152 360.18038940]
[193.20475769 351.70785522]
[187.25315857 337.93911743]
[181.30155945 324.17034912]
[169.14952087 315.55773926]
[170.77616882 299.82037354]
[164.82456970 286.05163574]
[158.87297058 272.28286743]
[146.17391968 272.17599487]
[134.42340088 267.23684692]
[125.39543915 258.17245483]
[120.46765137 246.31559753]
[120.41107941 233.42874146]
[125.26978302 221.44219971]
[134.34892273 212.16491699]
[128.96388245 198.16487122]
[123.57884216 184.16482544]
[118.19380188 170.16476440]
[112.80876160 156.16471863]
[107.42372131 142.16467285]
[102.03868103 128.16462708]
[96.65364075 114.16458130]
[85.31739807 104.34166718]
[70.69347382 101.00385284]
[56.06955719 97.66603851]
[41.44564056 94.32822418]
[26.82172012 90.99040985]
[11.64583588 95.46289825]
[0.95937496 85.08750153]
[-13.66454411 81.74968719]
[-20.17891502 83.35398102]
[-25.67788124 81.64284515]
[-28.81104469 77.96594238]
[-43.28664780 74.03442383]
[-57.76225281 70.10289764]
[-72.23785400 66.17137146]
[-86.71346283 62.23984528]
[-101.18906403 58.30831909]
[-115.76862335 65.00279999]
[-130.02731323 57.64962387]
[-133.02709961 41.88951874]
[-122.46678925 29.81229019]
[-106.44735718 30.68255234]
[-97.25753784 43.83271408]
[-82.78193665 47.76424026]
[-68.30632782 51.69576645]
[-53.83072662 55.62729263]
[-39.35512161 59.55881500]
[-24.87951851 63.49034119]
[-10.32672977 67.12577057]
[4.29718876 70.46358490]
[18.42707253 65.75235748]
[30.15953445 76.36649323]
[44.78345490 79.70430756]
[59.40737152 83.04212189]
[74.03128815 86.37993622]
[88.65521240 89.71775055]
[101.35607147 81.73726654]
[104.69388580 67.11334991]
[108.03170013 52.48942947]
[111.36951447 37.86551285]
[114.70732880 23.24159241]
[118.04514313 8.61767483]
[121.23361969 -6.03952837]
[124.27243805 -20.72849083]
[127.31124878 -35.41745377]
[130.35006714 -50.10641479]
[133.38887024 -64.79537964]
[132.06024170 -73.89499664]
[136.64239502 -79.75157928]
[139.98020935 -94.37550354]
[143.31802368 -108.99942017]
[146.65583801 -123.62333679]
[149.99365234 -138.24725342]
[153.33146667 -152.87117004]
[144.71191406 -166.11802673]
[148.06559753 -181.56237793]
[161.40284729 -190.04139709]
[176.81088257 -186.52461243]
[185.14840698 -173.09848022]
[181.46891785 -157.72846985]
[167.95538330 -149.53335571]
[164.61756897 -134.90943909]
[161.27975464 -120.28552246]
[157.94194031 -105.66160583]
[154.60412598 -91.03768921]
[151.26631165 -76.41376495]
[148.07783508 -61.75656509]
[145.03901672 -47.06760406]
[142.00021362 -32.37863922]
[138.96139526 -17.68967819]
[135.92257690 -3.00071549]
[137.65774536 4.23012114]
[132.66906738 11.95548820]
[129.33125305 26.57940674]
[125.99343109 41.20332718]
[122.65561676 55.82724380]
[119.31780243 70.45116425]
[115.97998810 85.07508087]
[129.92140198 79.54000854]
[144.03596497 84.61733246]
[151.25680542 97.76493835]
[147.96859741 112.40009308]
[135.81768799 121.19527435]
[120.88777161 119.74692535]
[110.65368652 108.77954102]
[116.03872681 122.77958679]
[121.42376709 136.77963257]
[126.80880737 150.77967834]
[132.19384766 164.77972412]
[137.57888794 178.77976990]
[142.96392822 192.77983093]
[148.34896851 206.77987671]
[165.71945190 209.08111572]
[179.48449707 219.77946472]
[185.93627930 235.87985229]
[183.39424133 252.94793701]
[172.64172363 266.33126831]
[178.59332275 280.10003662]
[184.54492188 293.86877441]
[197.12266541 303.46621704]
[195.07031250 318.21875000]
[201.02191162 331.98751831]
[206.97351074 345.75625610]
[221.66427612 342.50384521]
[236.70507812 342.09072876]
[251.55221558 344.53186035]
[265.66897583 349.73895264]
[278.54501343 357.52377319]
[289.71493530 367.60491943]
[298.77490234 379.61798096]
[305.39739990 393.12869263]
[309.34304810 407.64862061]
[310.46920776 422.65289307]
[308.73519897 437.59912109]
[304.20364380 451.94699097]
[297.03842163 465.17785645]
[287.49850464 476.81341553]
[275.92874146 486.43307495]
[262.74743652 493.68905640]
[248.43103027 498.31909180]
[233.49707031 500.15576172]
[218.48541260 499.13272095]
[203.93872070 495.28695679]
[190.38282776 488.75744629]
[178.30780029 479.78024292]
[168.15013123 468.67987061]
[160.27700806 455.85760498]
[154.97303772 441.77697754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[10 124]
[11 123]
[12 122]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[33 55]
[34 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
] def

init

% Start Annotations
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
19 117 0.0 1 colorpair
20 116 0.0 1 colorpair
21 115 0.0 1 colorpair
22 114 0.0 1 colorpair
23 113 0.0 0.6 colorpair
24 112 0.0 1 colorpair
25 111 0.0 1 colorpair
26 110 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
30 58 0.0 1 colorpair
31 57 0.0 1 colorpair
33 55 0.0 1 colorpair
34 54 0.0 1 colorpair
37 53 0.0 1 colorpair
38 52 0.0 1 colorpair
39 51 0.0 1 colorpair
40 50 0.0 1 colorpair
41 49 0.0 1 colorpair
42 48 0.0 1 colorpair
62 103 0.0 1 colorpair
63 102 0.0 1 colorpair
64 101 0.0 1 colorpair
65 100 0.0 1 colorpair
66 99 0.0 1 colorpair
67 98 0.0 1 colorpair
68 96 0.0 1 colorpair
69 95 0.0 1 colorpair
70 94 0.0 1 colorpair
71 93 0.0 1 colorpair
72 92 0.0 1 colorpair
74 91 0.0 1 colorpair
75 90 0.0 1 colorpair
76 89 0.0 1 colorpair
77 88 0.0 1 colorpair
78 87 0.0 1 colorpair
79 86 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
23 113 1 gmark

% End Annotations
showpage
end
%%EOF
