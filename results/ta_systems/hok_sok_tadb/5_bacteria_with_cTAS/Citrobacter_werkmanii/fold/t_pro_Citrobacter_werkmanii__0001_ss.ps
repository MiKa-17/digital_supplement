%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:18:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUGCUGACAAAAUAUGCCCUGGUGGCAAUUGUAGUGCUGUGCUUCACGGCGCUGGGAUUUACGUUAAUGGUACGAGAUUCGCUGUGCGAGUUAAGUAUUAAAGAGCGUGGUAUGGAGUUUAAAGCUGUUCUCGCUUACGAACCGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[125.86991119 179.16629028]
[140.16424561 174.61964417]
[154.84376526 177.69670105]
[145.25415039 166.16244507]
[135.66452026 154.62818909]
[126.07489777 143.09393311]
[116.48526764 131.55966187]
[106.89564514 120.02541351]
[109.78151703 134.74517822]
[115.87892914 148.44998169]
[113.03735352 163.17837524]
[102.27915192 173.63117981]
[87.47506714 176.04757690]
[73.95148468 169.55813599]
[66.57409668 156.49772644]
[67.99723053 141.56539917]
[77.70865631 130.13380432]
[84.62466431 116.82332611]
[72.17391205 125.18865967]
[59.72315598 133.55398560]
[47.27240372 141.91931152]
[42.78417587 157.32176208]
[27.88955688 163.28245544]
[14.01442623 155.22886658]
[11.80259609 139.33901978]
[22.95079231 127.80223846]
[38.90707397 129.46856689]
[51.35782623 121.10323334]
[63.80858231 112.73789978]
[76.25933075 104.37257385]
[74.12461090 89.52525330]
[59.82141495 85.00656128]
[45.51821899 80.48786926]
[30.02828217 83.70848846]
[20.22307014 72.49657440]
[5.91987467 67.97788239]
[-8.38332176 63.45919037]
[-22.68651772 58.94049454]
[-36.98971176 54.42180252]
[-51.29290771 49.90311050]
[-65.59610748 45.38441849]
[-79.89929962 40.86572647]
[-94.20249939 36.34703064]
[-108.50569153 31.82833862]
[-125.43048096 32.82232666]
[-131.07086182 16.83413124]
[-117.26891327 6.98819971]
[-103.98699951 17.52514267]
[-89.68380737 22.04383659]
[-75.38060760 26.56252861]
[-61.07741165 31.08122253]
[-46.77421570 35.59991455]
[-32.47101974 40.11860657]
[-18.16782379 44.63729858]
[-3.86462855 49.15599442]
[10.43856716 53.67468643]
[24.74176407 58.19337845]
[39.20864105 54.64954758]
[50.03691101 66.18466949]
[64.34011078 70.70336151]
[78.64330292 75.22205353]
[90.34481049 76.41687012]
[98.79954529 81.78507996]
[102.80225372 89.33623505]
[109.03347778 75.69175720]
[115.26470184 62.04727936]
[121.49592590 48.40279770]
[127.72714996 34.75831985]
[121.30958557 18.51558495]
[128.45666504 2.95042920]
[144.32168579 -2.54744148]
[150.27328491 -16.31619072]
[156.22488403 -30.08493805]
[162.17648315 -43.85368729]
[168.12808228 -57.62243652]
[174.07968140 -71.39118195]
[168.49671936 -85.93313599]
[174.72863770 -99.81182098]
[188.62657166 -105.04470825]
[194.57817078 -118.81345367]
[200.52976990 -132.58219910]
[206.48136902 -146.35095215]
[212.43296814 -160.11970520]
[218.38456726 -173.88844299]
[224.33616638 -187.65719604]
[225.07067871 -204.59523010]
[241.55009460 -208.57833862]
[249.93949890 -193.84556580]
[238.10491943 -181.70559692]
[232.15332031 -167.93684387]
[226.20172119 -154.16810608]
[220.25012207 -140.39935303]
[214.29852295 -126.63059998]
[208.34690857 -112.86185455]
[202.39530945 -99.09310150]
[208.10568237 -85.38444519]
[202.26605225 -71.33619690]
[187.84843445 -65.43958282]
[181.89683533 -51.67083359]
[175.94523621 -37.90208817]
[169.99363708 -24.13333702]
[164.04202271 -10.36458874]
[158.09042358 3.40415978]
[164.47798157 14.63490868]
[163.19290161 27.68691826]
[154.48268127 37.75121307]
[141.37162781 40.98954391]
[135.14041138 54.63402176]
[128.90917969 68.27850342]
[122.67795563 81.92298126]
[116.44673157 95.56746674]
[118.42990112 110.43578339]
[128.01953125 121.97004700]
[137.60914612 133.50430298]
[147.19877625 145.03855896]
[156.78840637 156.57281494]
[166.37802124 168.10707092]
[177.09225464 178.60493469]
[185.80926514 181.53448486]
[188.96101379 188.26963806]
[200.49526978 197.85925293]
[212.02952576 207.44888306]
[223.56378174 217.03851318]
[241.75608826 219.70227051]
[247.24287415 236.34443665]
[258.97036743 245.69677734]
[270.69781494 255.04913330]
[282.42529297 264.40148926]
[297.71594238 261.12582397]
[311.51055908 268.49078369]
[317.29571533 283.01889038]
[312.33987427 297.85040283]
[298.98300171 305.98233032]
[283.53182983 303.57501221]
[273.28189087 291.76513672]
[273.07293701 276.12893677]
[261.34548950 266.77661133]
[249.61801147 257.42425537]
[237.89053345 248.07191467]
[225.80050659 249.10691833]
[215.94552612 241.35919189]
[213.97415161 228.57276917]
[202.43989563 218.98313904]
[190.90563965 209.39350891]
[179.37138367 199.80389404]
[167.73991394 190.33241272]
[171.11572266 204.94760132]
[166.86087036 219.33149719]
[156.07746887 229.75830078]
[141.55868530 233.52723694]
[127.06523132 229.66203308]
[116.35126495 219.16390991]
[112.19196320 204.75209045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[8 112]
[18 30]
[19 29]
[20 28]
[21 27]
[31 61]
[32 60]
[33 59]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[118 146]
[120 145]
[121 144]
[122 143]
[123 142]
[125 139]
[126 138]
[127 137]
[128 136]
] def

init

% Start Annotations
3 117 0.0 1 colorpair
4 116 0.0 1 colorpair
5 115 0.0 1 colorpair
6 114 0.0 1 colorpair
7 113 0.0 1 colorpair
8 112 0.0 1 colorpair
18 30 0.0 1 colorpair
19 29 0.0 1 colorpair
20 28 0.0 1 colorpair
21 27 0.0 1 colorpair
31 61 0.0 1 colorpair
32 60 0.0 1 colorpair
33 59 0.0 1 colorpair
35 57 0.0 1 colorpair
36 56 0.0 1 colorpair
37 55 0.0 1 colorpair
38 54 0.0 1 colorpair
39 53 0.0 1 colorpair
40 52 0.0 1 colorpair
41 51 0.0 1 colorpair
42 50 0.0 1 colorpair
43 49 0.0 1 colorpair
44 48 0.0 1 colorpair
64 111 0.0 1 colorpair
65 110 0.0 1 colorpair
66 109 0.0 1 colorpair
67 108 0.0 1 colorpair
68 107 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
74 100 0.0 1 colorpair
75 99 0.0 1 colorpair
76 98 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
118 146 0.0 1 colorpair
120 145 0.0 1 colorpair
121 144 0.0 1 colorpair
122 143 0.0 1 colorpair
123 142 0.0 1 colorpair
125 139 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
