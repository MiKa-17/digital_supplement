%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:20:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__CAUGCCGCAAAAAUUAGUAGUAAUAAACCUGGUCGUUAUCUGUAUCACCGUAAUCGUGUUGACCUGGAUAACCCGCAAAAAACUCUGUGAGAUCCGCAUUCGAACCGGAAAAACGGAGGUUGCGGCCAUUAUGGCUUAC__GAAUCCGCA___\
) } def
/len { sequence length } bind def

/coor [
[-5.56157303 492.01519775]
[-19.11011314 498.46551514]
[-33.05923080 503.99645996]
[-47.34662628 508.58334351]
[-61.90848923 512.20568848]
[-76.67977905 514.84735107]
[-91.59452820 516.49645996]
[-106.58612061 517.14569092]
[-121.58759308 516.79211426]
[-136.53195190 515.43737793]
[-151.35244751 513.08752441]
[-165.98289490 509.75292969]
[-180.35795593 505.44860840]
[-194.41340637 500.19375610]
[-208.08648682 494.01184082]
[-221.31611633 486.93045044]
[-234.04321289 478.98123169]
[-246.21095276 470.19967651]
[-257.76495361 460.62503052]
[-268.65365601 450.30001831]
[-278.82839966 439.27078247]
[-288.24374390 427.58657837]
[-296.85763550 415.29959106]
[-304.63162231 402.46469116]
[-311.53094482 389.13922119]
[-317.52484131 375.38265991]
[-322.58648682 361.25650024]
[-326.69332886 346.82379150]
[-329.82696533 332.14898682]
[-331.97344971 317.29766846]
[-333.12316895 302.33612061]
[-333.27099609 287.33120728]
[-332.41629028 272.34994507]
[-330.56283569 257.45919800]
[-327.71893311 242.72552490]
[-323.89727783 228.21469116]
[-319.11489868 213.99153137]
[-313.39324951 200.11955261]
[-306.75778198 186.66072083]
[-299.23818970 173.67515564]
[-290.86807251 161.22082520]
[-281.68475342 149.35339355]
[-271.72930908 138.12582397]
[-261.04614258 127.58829498]
[-249.68302917 117.78784943]
[-237.69068909 108.76827240]
[-225.12268066 100.56983185]
[-212.03512573 93.22915649]
[-198.48651123 86.77902985]
[-184.53732300 81.24826050]
[-170.24986267 76.66155243]
[-155.68795776 73.03938293]
[-140.91664124 70.39793396]
[-126.00186920 68.74900055]
[-111.01026917 68.09995270]
[-96.00879669 68.45368958]
[-81.06445312 69.80862427]
[-66.24398804 72.15870667]
[-51.61357880 75.49344635]
[-37.23858261 79.79795074]
[-23.18319702 85.05298615]
[-9.51019764 91.23508453]
[3.71934700 98.31664276]
[16.44635010 106.26602173]
[28.61397171 115.04772186]
[40.16786575 124.62252045]
[51.05642700 134.94766235]
[62.08151245 124.77674866]
[73.10659790 114.60582733]
[69.26887512 106.43368530]
[67.92459869 97.27397919]
[69.31887054 87.88970947]
[73.46303558 79.10099030]
[80.12289429 71.71347046]
[88.82874298 66.44499969]
[98.90727234 63.85710907]
[109.53324127 64.29779816]
[114.85231018 50.27255249]
[120.17138672 36.24730682]
[110.57767487 24.33479500]
[108.25011444 9.31882763]
[113.71483612 -4.75253105]
[125.41088104 -14.13648129]
[140.13442993 -16.39093399]
[145.45350647 -30.41617775]
[145.41671753 -47.37008667]
[161.69787598 -52.09874725]
[170.74880981 -37.76288986]
[159.47875977 -25.09710503]
[154.15968323 -11.07186127]
[163.68544006 0.37914303]
[166.21734619 15.15904236]
[160.97671509 29.31538963]
[149.27708435 39.01154327]
[134.19662476 41.56637955]
[128.87754822 55.59162521]
[123.55847931 69.61686707]
[133.39176941 80.94411469]
[148.02522278 77.64838409]
[162.65869141 74.35266113]
[163.25556946 59.27598190]
[167.73516846 44.86780548]
[175.79205322 32.11049652]
[186.87690735 21.87387657]
[200.23394775 14.85588932]
[214.95245361 11.53503513]
[230.02888489 12.13773632]
[244.43533325 16.62290001]
[257.18954468 24.68471718]
[267.42187500 35.77352142]
[274.43469238 49.13326263]
[277.74987793 63.85304642]
[277.14135742 78.92926025]
[272.65063477 93.33396912]
[264.58389282 106.08505249]
[253.49113464 116.31311035]
[240.12867737 123.32078552]
[225.40762329 126.63027191]
[210.33164978 126.01592255]
[195.92866516 121.51963806]
[183.18069458 113.44797516]
[172.95692444 102.35127258]
[165.95442200 88.98612213]
[151.32095337 92.28184509]
[136.68750000 95.57757568]
[128.01872253 120.70122528]
[105.79982758 132.20202637]
[83.27751160 125.63091278]
[72.25242615 135.80183411]
[61.22734070 145.97274780]
[70.64282990 157.65682983]
[79.25688171 169.94371033]
[87.03102112 182.77850342]
[93.93052673 196.10389709]
[99.92458344 209.86036682]
[104.98641968 223.98648071]
[109.09342194 238.41914368]
[112.22725677 253.09390259]
[114.37392426 267.94519043]
[115.52384186 282.90670776]
[115.67185974 297.91162109]
[114.81732941 312.89291382]
[112.96406555 327.78366089]
[110.12034607 342.51739502]
[106.29886627 357.02825928]
[101.51669312 371.25149536]
[95.79518890 385.12353516]
[89.15991211 398.58245850]
[81.64048767 411.56811523]
[73.27050781 424.02255249]
[64.08734894 435.89010620]
[54.13203430 447.11779785]
[43.44902039 457.65545654]
[32.08602142 467.45605469]
[20.09378624 476.47576904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[67 130]
[68 129]
[69 128]
[77 97]
[78 96]
[79 95]
[84 90]
[85 89]
[98 125]
[99 124]
[100 123]
] def

init

% Start Annotations
67 130 0.0 1 colorpair
68 129 0.0 1 colorpair
69 128 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.32 1 colorpair
79 95 0.16 1 colorpair
84 90 0.16 0.2 colorpair
85 89 0.0 1 colorpair
98 125 0.0 1 colorpair
99 124 0.16 1 colorpair
100 123 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
78 cmark
96 cmark
79 cmark
84 90 2 gmark
84 cmark
99 cmark
100 cmark

% End Annotations
showpage
end
%%EOF
