%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:20:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUGCCGCAAAAAGUAGUAGUCGUAAACCUGGUCGUUAUCUGUAUCACCGUAAUCGUGUUGACCUGGAUAACGCGCAACAAACUUUGUGAGCUGCGCAUUCGAUCGGGAAAAACGGAGGUUGCGGCCAUUUUGGCUUACGAAUCCGAACGG\
) } def
/len { sequence length } bind def

/coor [
[132.26202393 261.54760742]
[122.69219208 263.16717529]
[113.04358673 264.22036743]
[103.34970093 264.70352173]
[93.64418793 264.61489868]
[83.96073914 263.95489502]
[74.33296204 262.72573853]
[64.79428864 260.93173218]
[55.37781906 258.57910156]
[46.11624527 255.67596436]
[37.04171753 252.23245239]
[28.18573570 248.26051331]
[19.57903862 243.77391052]
[11.25150585 238.78822327]
[3.23204112 233.32077026]
[-4.45151567 227.39053345]
[-11.77249336 221.01808167]
[-18.70547867 214.22554016]
[-25.22640800 207.03649902]
[-31.31264114 199.47590637]
[-36.94305420 191.57000732]
[-42.09809875 183.34623718]
[-46.75988770 174.83316040]
[-50.91223145 166.06031799]
[-54.54071808 157.05815125]
[-57.63275528 147.85792542]
[-60.17760468 138.49157715]
[-62.16643524 128.99160767]
[-63.59234619 119.39099884]
[-64.45037842 109.72308350]
[-64.73756409 100.02141571]
[-64.45290375 90.31967926]
[-63.59738159 80.65153503]
[-62.17396927 71.05056000]
[-60.18760681 61.55007935]
[-57.64519501 52.18306351]
[-54.55554962 42.98203659]
[-50.92940521 33.97893143]
[-46.77934265 25.20500565]
[-42.11976624 16.69071007]
[-36.96686172 8.46560478]
[-31.33850288 0.55823946]
[-42.87276077 -9.03138447]
[-54.40702057 -18.62100983]
[-69.96518707 -21.49397278]
[-74.80531311 -35.58022308]
[-86.33956909 -45.16984940]
[-97.87382507 -54.75947189]
[-109.40808868 -64.34909821]
[-123.27042389 -57.96174240]
[-138.53117371 -58.23016357]
[-152.16032410 -65.10106659]
[-161.45176697 -77.21022034]
[-164.56069946 -92.15335846]
[-160.86984253 -106.96350098]
[-151.11199951 -118.70008087]
[-137.22460938 -125.03279877]
[-121.96503448 -124.70428467]
[-108.36306000 -117.77976227]
[-99.11936188 -105.63410950]
[-96.06930542 -90.67884827]
[-99.81845856 -75.88335419]
[-88.28420258 -66.29373169]
[-76.74994659 -56.70410538]
[-65.21569061 -47.11448288]
[-50.48252487 -44.92743301]
[-44.81739426 -30.15526772]
[-33.28313828 -20.56564331]
[-21.74887848 -10.97601795]
[-3.89185166 -27.84736824]
[16.27556419 -41.87559509]
[38.30487442 -52.74874115]
[61.70618820 -60.22499847]
[85.95909119 -64.13810730]
[110.52424622 -64.40105438]
[134.85536194 -61.00798416]
[158.41133118 -54.03435135]
[164.36294556 -67.80310059]
[170.31454468 -81.57185364]
[176.26614380 -95.34059906]
[168.53248596 -108.66339111]
[170.10820007 -123.80837250]
[180.18055725 -134.98924255]
[194.73109436 -138.05841064]
[200.68269348 -151.82714844]
[201.41720581 -168.76518250]
[217.89662170 -172.74829102]
[226.28602600 -158.01553345]
[214.45144653 -145.87554932]
[208.49984741 -132.10681152]
[216.23341370 -119.40523529]
[214.99015808 -104.40795898]
[205.03799438 -92.88372803]
[190.03489685 -89.38899994]
[184.08328247 -75.62024689]
[178.13168335 -61.85150146]
[172.18008423 -48.08275223]
[188.90473938 -38.68818283]
[204.42393494 -27.41313553]
[218.52723694 -14.41048622]
[231.02342224 0.14346297]
[241.74305725 16.05137253]
[250.54078674 33.09754562]
[257.29733276 51.05085373]
[261.92105103 69.66786957]
[264.34930420 88.69615936]
[264.54910278 107.87771606]
[262.51779175 126.95245361]
[258.28286743 145.66174316]
[272.49093628 150.47126770]
[286.69897461 155.28077698]
[297.96697998 143.58276367]
[313.14901733 137.97605896]
[329.20001221 139.53131104]
[342.92401123 147.88807678]
[351.61053467 161.33671570]
[353.56979370 177.16790771]
[367.87298584 181.68659973]
[379.66986084 171.74490356]
[394.97183228 169.78196716]
[408.89608765 176.42413330]
[416.99948120 189.55191040]
[416.69619751 204.97630310]
[408.08306885 217.77540588]
[393.90844727 223.86509705]
[378.69546509 221.30216980]
[367.29849243 210.90444946]
[363.35427856 195.98979187]
[349.05108643 191.47109985]
[340.03027344 202.05230713]
[327.61361694 208.40623474]
[313.66830444 209.54019165]
[300.30560303 205.24926758]
[289.56127930 196.15234375]
[283.08554077 183.60316467]
[281.88946533 169.48883057]
[267.68139648 164.67930603]
[253.47335815 159.86979675]
[249.68115234 168.80421448]
[245.36933899 177.49980164]
[240.55293274 185.92636108]
[235.24861145 194.05465698]
[229.47482300 201.85646057]
[223.25158691 209.30468750]
[216.60050964 216.37348938]
[209.54467773 223.03833008]
[202.10858154 229.27607727]
[194.31805420 235.06506348]
[186.20011902 240.38520813]
[177.78295898 245.21803284]
[169.09579468 249.54676819]
[160.16877747 253.35639954]
[151.03289795 256.63366699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[42 69]
[43 68]
[44 67]
[46 65]
[47 64]
[48 63]
[49 62]
[77 97]
[78 96]
[79 95]
[80 94]
[84 90]
[85 89]
[109 138]
[110 137]
[111 136]
[117 129]
[118 128]
] def

init

% Start Annotations
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
47 64 0.16 1 colorpair
49 62 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.32 1 colorpair
79 95 0.16 1 colorpair
84 90 0.16 0.6 colorpair
85 89 0.0 1 colorpair
109 138 0.16 1 colorpair
110 137 0.0 1 colorpair
117 129 0.0 1 colorpair
118 128 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
46 65 5 gmark
46 cmark
65 cmark
47 cmark
64 cmark
48 63 5 gmark
48 cmark
63 cmark
78 cmark
96 cmark
79 cmark
80 94 5 gmark
80 cmark
94 cmark
84 90 1 gmark
84 cmark
138 cmark
111 136 5 gmark
111 cmark
136 cmark

% End Annotations
showpage
end
%%EOF
