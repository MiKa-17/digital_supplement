%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____________________ACUGCCGCAAAAUAUGCUGUUGUGGUGCUUAUUAAUAGUGUGUUUCACGCUAUUGAUAUUCACAUGGCUGGUCCGGAAAUCGCUA_UGCGAACUCCGGCUCAAGGAGGGGAAUAUUGAGGUGGCGGCAUUCCUGGCUUACGAAUCCAA___GAA_\
) } def
/len { sequence length } bind def

/coor [
[124.18184662 376.88873291]
[113.38977814 377.61996460]
[102.57743073 377.93072510]
[91.76117706 377.82055664]
[80.95740509 377.28958130]
[70.18247223 376.33865356]
[59.45270157 374.96917725]
[48.78433990 373.18325806]
[38.19355011 370.98358154]
[27.69637108 368.37347412]
[17.30869865 365.35690308]
[7.04626942 361.93844604]
[-3.07537651 358.12322998]
[-13.04090786 353.91708374]
[-22.83523178 349.32638550]
[-32.44351196 344.35803223]
[-41.85120010 339.01962280]
[-51.04404449 333.31918335]
[-60.00812149 327.26535034]
[-68.72985840 320.86730957]
[-77.19603729 314.13476562]
[-85.39384460 307.07791138]
[-93.31085968 299.70739746]
[-100.93509674 292.03442383]
[-108.25500488 284.07061768]
[-115.25949097 275.82800293]
[-121.93795776 267.31909180]
[-128.28028870 258.55676270]
[-134.27685547 249.55430603]
[-139.91860962 240.32531738]
[-145.19699097 230.88381958]
[-150.10400391 221.24406433]
[-154.63221741 211.42070007]
[-158.77478027 201.42855835]
[-162.52540588 191.28280640]
[-165.87841797 180.99880981]
[-168.82873535 170.59213257]
[-171.37190247 160.07853699]
[-173.50405884 149.47393799]
[-175.22196960 138.79441833]
[-176.52304077 128.05613708]
[-177.40530396 117.27536774]
[-177.86741638 106.46842957]
[-177.90867615 95.65169525]
[-177.52902222 84.84154510]
[-176.72903442 74.05435944]
[-175.50993347 63.30646133]
[-173.87355042 52.61414337]
[-171.82235718 41.99359512]
[-169.35948181 31.46090126]
[-166.48863220 21.03201294]
[-163.21418762 10.72272682]
[-159.54107666 0.54865789]
[-155.47486877 -9.47478580]
[-151.02172852 -19.33242226]
[-146.18840027 -29.00932312]
[-140.98220825 -38.49082947]
[-135.41104126 -47.76258469]
[-129.48332214 -56.81054306]
[-123.20802307 -65.62100220]
[-116.59467316 -74.18061066]
[-109.65327454 -82.47641754]
[-102.39434052 -90.49584961]
[-94.82886505 -98.22676849]
[-86.96830750 -105.65745544]
[-78.82457733 -112.77665710]
[-70.41001129 -119.57360077]
[-61.73733902 -126.03798676]
[-52.81970978 -132.16001892]
[-43.67062378 -137.93043518]
[-34.30393600 -143.34048462]
[-24.73384094 -148.38197327]
[-14.97482681 -153.04728699]
[-5.04167509 -157.32933044]
[5.05056858 -161.22163391]
[15.28661919 -164.71830750]
[25.65097427 -167.81404114]
[36.12793732 -170.50415039]
[46.70163727 -172.78457642]
[57.35606003 -174.65184021]
[68.07507324 -176.10313416]
[78.84243011 -177.13624573]
[89.64183807 -177.74960327]
[100.45693970 -177.94230652]
[111.27133942 -177.71405029]
[122.06867218 -177.06517029]
[132.83258057 -175.99665833]
[143.54676819 -174.51014709]
[154.19499207 -172.60784912]
[164.76113892 -170.29267883]
[175.22918701 -167.56813049]
[185.58331299 -164.43833923]
[195.80781555 -160.90803528]
[205.88720703 -156.98255920]
[215.80622864 -152.66787720]
[225.54985046 -147.97050476]
[235.10331726 -142.89758301]
[244.45216370 -137.45675659]
[253.58222961 -131.65629578]
[262.47967529 -125.50497437]
[271.13104248 -119.01210785]
[279.52322388 -112.18753815]
[287.64349365 -105.04159546]
[295.47958374 -97.58509827]
[303.01959229 -89.82935333]
[310.25210571 -81.78609467]
[317.16619873 -73.46751404]
[323.75137329 -64.88619995]
[329.99768066 -56.05515671]
[335.89559937 -46.98775482]
[341.43627930 -37.69773483]
[346.61126709 -28.19916153]
[351.41275024 -18.50642014]
[355.83343506 -8.63419533]
[359.86666870 1.40256381]
[363.50631714 11.58865547]
[366.74685669 21.90865135]
[369.58337402 32.34692383]
[372.01162720 42.88765717]
[374.02786255 53.51489258]
[375.62908936 64.21253204]
[376.81286621 74.96437836]
[377.57736206 85.75414276]
[377.92147827 96.56547546]
[377.84463501 107.38201904]
[392.82315063 108.18488312]
[407.80163574 108.98774719]
[415.10540771 95.58559418]
[427.50585938 86.68663788]
[442.54089355 84.05776978]
[457.22525024 88.22095490]
[468.64337158 98.34958649]
[474.52816772 112.43261719]
[473.71124268 127.67385101]
[466.35473633 141.04713440]
[453.91934204 149.89720154]
[438.87408447 152.46684265]
[424.20620728 148.24586487]
[412.82806396 138.07234192]
[406.99877930 123.96624756]
[392.02026367 123.16338348]
[377.04177856 122.36051941]
[367.81402588 174.34902954]
[348.92114258 223.65434265]
[321.04492188 268.49710083]
[332.72454834 277.90914917]
[344.40417480 287.32116699]
[359.71133423 284.12353516]
[373.46820068 291.55877686]
[379.17919922 306.11621094]
[374.14776611 320.92224121]
[360.74960327 328.98593140]
[345.31091309 326.49984741]
[335.12136841 314.63784790]
[334.99215698 299.00079346]
[323.31253052 289.58877563]
[311.63290405 280.17672729]
[304.46194458 288.27493286]
[296.98132324 296.08798218]
[289.20236206 303.60403442]
[281.13684082 310.81173706]
[272.79696655 317.70013428]
[264.19540405 324.25878906]
[255.34512329 330.47781372]
[246.25958252 336.34777832]
[236.95251465 341.85977173]
[227.43803406 347.00543213]
[217.73052979 351.77700806]
[207.84471130 356.16723633]
[197.79556274 360.16949463]
[187.59829712 363.77770996]
[177.26835632 366.98638916]
[166.82139587 369.79074097]
[156.27322388 372.18646240]
[145.63981628 374.16992188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[125 142]
[126 141]
[127 140]
[145 157]
[146 156]
[147 155]
] def

init

% Start Annotations
126 141 0.0 1 colorpair
127 140 0.32 1 colorpair
145 157 0.32 1 colorpair
146 156 0.0 1 colorpair
147 155 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
125 142 4 gmark
125 cmark
142 cmark
127 cmark
140 cmark
145 cmark
157 cmark

% End Annotations
showpage
end
%%EOF
