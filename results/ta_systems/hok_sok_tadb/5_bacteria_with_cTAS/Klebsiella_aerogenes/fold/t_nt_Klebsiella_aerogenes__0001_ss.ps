%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCCACACUGAUGGUGAUCAGACAUA_AGGGAGCCUCACG__UUAAUGAAAAUCAACU__GGGGCUUUCCGCUGUCUGCCGCACA_________CAAAACACCU_________GAGACAAAAAGCCUCAAGCACCCAC_________\
) } def
/len { sequence length } bind def

/coor [
[94.58903503 151.61599731]
[86.79633331 150.19116211]
[79.31127167 147.59692383]
[72.30823517 143.89369202]
[65.95040131 139.16778564]
[60.38589478 133.52928162]
[47.65623093 141.46374512]
[34.92656708 149.39820862]
[22.19690514 157.33267212]
[9.46724129 165.26712036]
[-3.26242280 173.20158386]
[-8.93182087 180.44030762]
[-16.33146286 181.16482544]
[-29.21931839 188.83966064]
[-42.10717392 196.51451111]
[-54.99503326 204.18934631]
[-67.80445099 211.99440002]
[-80.53411102 219.92886353]
[-93.26377869 227.86331177]
[-105.99343872 235.79777527]
[-118.72310638 243.73223877]
[-131.45277405 251.66670227]
[-136.46533203 266.90658569]
[-151.55516052 272.35418701]
[-165.14663696 263.83062744]
[-166.81353760 247.87438965]
[-155.27716064 236.72578430]
[-139.38722229 238.93702698]
[-126.65756226 231.00257874]
[-113.92790222 223.06811523]
[-101.19823456 215.13365173]
[-88.46857452 207.19918823]
[-75.73890686 199.26472473]
[-71.70230103 193.02090454]
[-62.66987228 191.30148315]
[-49.78201294 183.62664795]
[-36.89415741 175.95181274]
[-24.00630188 168.27697754]
[-11.19688320 160.47192383]
[1.53278089 152.53746033]
[14.26244450 144.60299683]
[26.99210930 136.66854858]
[39.72177124 128.73408508]
[52.45143509 120.79962158]
[49.29590225 111.07180023]
[48.10920334 100.91406250]
[48.93741989 90.72082520]
[51.74839020 80.88790894]
[56.43296051 71.79710388]
[45.15119171 61.91167831]
[33.86941910 52.02625656]
[22.58764458 42.14083099]
[11.30587292 32.25540543]
[0.02410067 22.36998177]
[-16.15786934 19.70993042]
[-21.69122314 4.27250719]
[-10.88372231 -8.06158924]
[5.14680481 -4.60409832]
[9.90952492 11.08821011]
[21.19129753 20.97363472]
[32.47306824 30.85905838]
[43.75484085 40.74448395]
[55.03661346 50.62990570]
[66.31838989 60.51533127]
[92.36816406 48.66535950]
[120.73855591 52.42477036]
[142.80296326 70.65043640]
[156.27001953 64.04452515]
[169.73709106 57.43861008]
[178.71948242 44.41451263]
[193.55355835 45.75608063]
[207.02061462 39.15016556]
[220.48768616 32.54425430]
[233.95475769 25.93834305]
[236.72500610 10.78473282]
[247.75804138 0.29065400]
[262.67831421 -1.67134416]
[275.73660278 5.44337320]
[289.20367432 -1.16253901]
[302.67074585 -7.76845121]
[316.13778687 -14.37436390]
[329.60485840 -20.98027611]
[338.58724976 -34.00437546]
[353.42132568 -32.66280746]
[366.88839722 -39.26871872]
[380.35546875 -45.87462997]
[393.82254028 -52.48054504]
[407.28961182 -59.08645630]
[420.75665283 -65.69236755]
[434.22372437 -72.29827881]
[430.44586182 -86.86923218]
[429.67880249 -101.90241241]
[431.95391846 -116.78221893]
[437.17810059 -130.89933777]
[445.13735962 -143.67567444]
[455.50582886 -154.58805847]
[467.85888672 -163.18962097]
[481.69067383 -169.12814331]
[496.43484497 -172.16043091]
[511.48757935 -172.16233826]
[526.23248291 -169.13377380]
[540.06579590 -163.19874573]
[552.42102051 -154.60031128]
[562.79223633 -143.69055176]
[570.75476074 -130.91622925]
[575.98248291 -116.80043030]
[578.26135254 -101.92119598]
[577.49810791 -86.88782501]
[573.72393799 -72.31591797]
[567.09338379 -58.80218887]
[557.87799072 -46.90001297]
[546.45513916 -37.09678268]
[533.29260254 -29.79392815]
[518.92932129 -25.29050064]
[503.95346069 -23.77091026]
[488.97833252 -25.29738617]
[474.61709595 -29.80741692]
[461.45788574 -37.11632156]
[450.03955078 -46.92480469]
[440.82965088 -58.83121109]
[427.36257935 -52.22529984]
[413.89550781 -45.61938858]
[400.42843628 -39.01347733]
[386.96136475 -32.40756226]
[373.49429321 -25.80165100]
[360.02725220 -19.19573975]
[352.00808716 -6.64413977]
[336.21078491 -7.51320791]
[322.74371338 -0.90729553]
[309.27664185 5.69861698]
[295.80957031 12.30452919]
[282.34249878 18.91044044]
[279.97558594 33.59157562]
[269.29132080 44.18921661]
[254.23947144 46.49037933]
[240.56066895 39.40541077]
[227.09359741 46.01132202]
[213.62654114 52.61723709]
[200.15946960 59.22314835]
[192.14031982 71.77474976]
[176.34300232 70.90567780]
[162.87593079 77.51158905]
[149.40887451 84.11750031]
[151.25051880 91.82234955]
[151.89807129 99.71772766]
[151.33644104 107.61968231]
[149.57870483 115.34410858]
[146.66583252 122.71102142]
[142.66566467 129.54878235]
[137.67143250 135.69808960]
[131.79946899 141.01565552]
[125.18661499 145.37757874]
[117.98692322 148.68223572]
[110.36814880 150.85264587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[67 143]
[68 142]
[69 141]
[71 139]
[72 138]
[73 137]
[74 136]
[78 132]
[79 131]
[80 130]
[81 129]
[82 128]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
[90 120]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.16 1 colorpair
13 38 0.16 1 colorpair
14 37 0.0 0.6 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
17 33 0.0 0.6 colorpair
18 32 0.0 0.6 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.0 0.6 colorpair
22 28 0.0 0.6 colorpair
49 64 0.0 0.6 colorpair
50 63 0.16 1 colorpair
51 62 0.0 1 colorpair
52 61 0.16 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair
67 143 0.0 0.6 colorpair
68 142 0.0 1 colorpair
69 141 0.0 1 colorpair
71 139 0.0 1 colorpair
72 138 0.0 1 colorpair
73 137 0.0 1 colorpair
74 136 0.0 1 colorpair
78 132 0.0 0.6 colorpair
79 131 0.0 1 colorpair
80 130 0.0 1 colorpair
81 129 0.16 1 colorpair
82 128 0.0 1 colorpair
84 126 0.0 1 colorpair
85 125 0.0 1 colorpair
86 124 0.16 1 colorpair
87 123 0.0 1 colorpair
88 122 0.0 0.6 colorpair
89 121 0.0 1 colorpair
90 120 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 cmark
39 cmark
13 cmark
14 37 1 gmark
35 cmark
17 33 1 gmark
18 32 1 gmark
21 29 1 gmark
22 28 1 gmark
49 64 1 gmark
63 cmark
52 cmark
61 cmark
67 143 1 gmark
78 132 1 gmark
81 cmark
129 cmark
86 cmark
124 cmark
88 122 1 gmark
90 120 1 gmark

% End Annotations
showpage
end
%%EOF
