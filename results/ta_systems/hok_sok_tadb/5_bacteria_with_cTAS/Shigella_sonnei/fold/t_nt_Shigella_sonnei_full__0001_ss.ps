%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAACCUUAUGGUGUUCAGGCAUAGGGUAGCCUCACUUUGAUUUAU___AGUCAGGU______GGGGCUUUUCUCUGUCUGCCUUUC_____GGUGA_AUACC____________UGAGACAAACAGUCUCAAGCACCCG__________\
) } def
/len { sequence length } bind def

/coor [
[92.65444946 168.68208313]
[82.51632690 166.82444763]
[72.76747894 163.47894287]
[63.62498093 158.72004700]
[55.29238892 152.65373230]
[47.95522690 145.41505432]
[35.64920425 153.99186707]
[23.34318161 162.56869507]
[11.03715992 171.14550781]
[-1.26886153 179.72233582]
[-13.57488346 188.29914856]
[-18.86092758 195.81370544]
[-26.20777893 196.92076111]
[-38.67982483 205.25431824]
[-51.15186691 213.58787537]
[-63.62391281 221.92143250]
[-76.09595490 230.25497437]
[-88.56800079 238.58853149]
[-101.04004669 246.92208862]
[-113.51208496 255.25564575]
[-120.68789673 269.35592651]
[-135.56884766 269.99349976]
[-140.09634399 285.38446045]
[-155.00611877 291.30715942]
[-168.86065674 283.21820068]
[-171.03196716 267.32275391]
[-159.85438538 255.81445312]
[-143.90240479 257.52145386]
[-137.61868286 244.01722717]
[-121.84564209 242.78359985]
[-109.37359619 234.45004272]
[-96.90155029 226.11648560]
[-84.42951202 217.78294373]
[-71.95746613 209.44938660]
[-59.48542023 201.11582947]
[-47.01337814 192.78227234]
[-34.54133224 184.44873047]
[-22.15170288 175.99313354]
[-9.84568119 167.41630554]
[2.46034074 158.83949280]
[14.76636219 150.26266479]
[27.07238388 141.68585205]
[39.37840652 133.10903931]
[31.88294792 111.45656586]
[31.88294792 88.54343414]
[39.37840652 66.89096832]
[27.07238388 58.31414795]
[14.76636219 49.73732758]
[2.46034074 41.16051102]
[-9.84568119 32.58369064]
[-22.15170288 24.00687027]
[-34.45772552 15.43005180]
[-49.96986771 18.45476723]
[-63.03054810 9.55565262]
[-65.89109039 -5.98760414]
[-56.85438919 -18.95346642]
[-41.28175735 -21.64951515]
[-28.41216087 -12.47623634]
[-25.88090515 3.12402987]
[-13.57488346 11.70084953]
[-1.26886153 20.27766800]
[11.03715992 28.85448837]
[23.34318161 37.43130875]
[35.64920425 46.00812531]
[47.95522690 54.58494568]
[60.39950943 43.40506363]
[75.16653442 35.54470825]
[91.39013672 31.46492958]
[108.11875153 31.40501785]
[124.37116241 35.36849213]
[139.19410706 43.12287140]
[151.71815491 54.21333694]
[161.20870972 67.98937988]
[175.17692566 62.52231979]
[189.14515686 57.05526352]
[203.05903625 51.45133972]
[216.91722107 45.71108627]
[230.77542114 39.97083664]
[215.86169434 38.36441040]
[201.26200867 34.92210007]
[189.72023010 25.34153175]
[183.64877319 11.62521172]
[184.31669617 -3.35991096]
[191.58436584 -16.48168182]
[203.93273926 -24.99742508]
[218.78076172 -27.12719727]
[233.02496338 -22.42584038]
[243.68858337 -11.87516403]
[241.18650818 2.91468406]
[250.47291565 -8.86507034]
[259.75933838 -20.64482307]
[269.04574585 -32.42457962]
[263.92019653 -46.97560501]
[267.49740601 -61.98250198]
[278.63595581 -72.65662384]
[293.78149414 -75.59190369]
[308.10119629 -69.85169220]
[317.02566528 -57.26768112]
[317.70712280 -41.85537720]
[309.92816162 -28.53279114]
[296.17102051 -21.55111313]
[280.82550049 -23.13816833]
[271.53909302 -11.35841465]
[262.25268555 0.42133924]
[252.96626282 12.20109367]
[254.42944336 19.55698204]
[268.22656250 13.67141819]
[282.02365112 7.78585291]
[295.82077026 1.90028811]
[309.61785889 -3.98527694]
[319.76718140 -15.03023434]
[333.91708374 -20.00824356]
[348.74624634 -17.75086021]
[360.77398682 -8.78793812]
[367.17709351 4.77673006]
[366.45263672 19.75922585]
[358.77066040 32.64283371]
[345.93429565 40.40349579]
[330.95651245 41.21961594]
[317.35247803 34.89928055]
[302.35330200 34.74164963]
[287.35412598 34.58401871]
[272.35498047 34.42639160]
[257.35580444 34.26876068]
[258.81896973 41.62465286]
[271.90640259 48.95397186]
[284.99386597 56.28328705]
[298.08129883 63.61260605]
[311.16873169 70.94192505]
[324.25616455 78.27124786]
[340.02505493 75.31792450]
[352.07110596 85.91378021]
[351.15362549 101.93057251]
[337.97644043 111.08159637]
[322.64794922 106.34696960]
[316.92684937 91.35868835]
[303.83941650 84.02936554]
[290.75198364 76.70005035]
[277.66455078 69.37072754]
[264.57708740 62.04140854]
[251.48965454 54.71209335]
[236.51567078 53.82902908]
[222.65748596 59.56928253]
[208.79928589 65.30953217]
[203.79710388 70.80316925]
[194.61221313 71.02349091]
[180.64398193 76.49054718]
[166.67576599 81.95760345]
[168.61819458 92.07982635]
[169.03280640 102.37838745]
[167.91038513 112.62400055]
[165.27590942 122.58853149]
[161.18803406 132.05010986]
[155.73779297 140.79809570]
[149.04650879 148.63769531]
[141.26319885 155.39434814]
[132.56115723 160.91763306]
[123.13410950 165.08454895]
[113.19197845 167.80233765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[22 28]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[73 148]
[74 147]
[75 146]
[76 144]
[77 143]
[78 142]
[89 105]
[90 104]
[91 103]
[92 102]
[125 141]
[126 140]
[127 139]
[128 138]
[129 137]
[130 136]
] def

init

% Start Annotations
6 43 0.0 1 colorpair
7 42 0.0 1 colorpair
8 41 0.0 1 colorpair
9 40 0.0 1 colorpair
10 39 0.0 1 colorpair
11 38 0.0 0.2 colorpair
13 37 0.16 1 colorpair
14 36 0.0 1 colorpair
15 35 0.0 1 colorpair
16 34 0.0 1 colorpair
17 33 0.0 0.2 colorpair
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
22 28 0.0 0.2 colorpair
46 65 0.16 1 colorpair
47 64 0.0 0.2 colorpair
48 63 0.0 1 colorpair
49 62 0.16 1 colorpair
50 61 0.16 1 colorpair
51 60 0.16 1 colorpair
52 59 0.0 1 colorpair
73 148 0.0 0.2 colorpair
74 147 0.0 1 colorpair
75 146 0.0 1 colorpair
76 144 0.0 1 colorpair
77 143 0.0 1 colorpair
78 142 0.0 1 colorpair
89 105 0.16 1 colorpair
90 104 0.0 1 colorpair
91 103 0.0 1 colorpair
92 102 0.0 1 colorpair
125 141 0.0 1 colorpair
126 140 0.0 1 colorpair
127 139 0.0 1 colorpair
128 138 0.0 1 colorpair
129 137 0.16 1 colorpair
130 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 38 2 gmark
13 cmark
37 cmark
17 33 2 gmark
22 28 2 gmark
46 cmark
65 cmark
47 64 2 gmark
62 cmark
50 cmark
60 cmark
73 148 2 gmark
105 cmark
129 cmark
137 cmark

% End Annotations
showpage
end
%%EOF
