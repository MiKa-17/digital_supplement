%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:16:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________________________AGCCUCGUUGGUUAAUGAAAAUUGACCUUCGGGGCUUUCGUCUAUCUG__________________________________________\
) } def
/len { sequence length } bind def

/coor [
[183.81106567 618.67077637]
[169.22601318 615.14398193]
[154.90286255 610.67077637]
[140.90293884 605.27032471]
[127.28620148 598.96582031]
[114.11094666 591.78424072]
[101.43360138 583.75634766]
[89.30845642 574.91650391]
[77.78742981 565.30255127]
[66.91985321 554.95568848]
[56.75226593 543.92016602]
[47.32820511 532.24328613]
[38.68803406 519.97503662]
[30.86874390 507.16796875]
[23.90382195 493.87692261]
[17.82309151 480.15881348]
[12.65259171 466.07235718]
[8.41446495 451.67788696]
[5.12685871 437.03704834]
[2.80385137 422.21255493]
[1.45539010 407.26785278]
[1.08724964 392.26696777]
[1.70100617 377.27410889]
[3.29403162 362.35351562]
[5.85950422 347.56903076]
[9.38643837 332.98400879]
[13.85973072 318.66088867]
[19.26022720 304.66101074]
[25.56479836 291.04428101]
[32.74645233 277.86907959]
[40.77442932 265.19180298]
[49.61435699 253.06669617]
[59.22838211 241.54573059]
[69.57533264 230.67820740]
[80.61090088 220.51068115]
[92.28782654 211.08670044]
[104.55611420 202.44659424]
[117.36322784 194.62738037]
[130.65432739 187.66253662]
[124.57570648 173.94938660]
[118.49708557 160.23625183]
[112.41846466 146.52310181]
[106.33984375 132.80995178]
[100.26122284 119.09680939]
[86.78073120 113.78430939]
[80.90898132 100.53784943]
[86.02562714 86.98181152]
[79.94700623 73.26866913]
[73.86838531 59.55551910]
[67.78977203 45.84237289]
[61.71115112 32.12922668]
[55.63253021 18.41608238]
[49.55390930 4.70293522]
[35.99096680 -4.51545143]
[37.46254349 -20.84844017]
[52.45480347 -27.49405098]
[65.54499817 -17.61585236]
[63.26705551 -1.37568462]
[69.34567261 12.33746147]
[75.42429352 26.05060768]
[81.50291443 39.76375580]
[87.58153534 53.47690201]
[93.66015625 67.19004822]
[99.73877716 80.90319061]
[113.21926880 86.21569061]
[119.09101868 99.46215057]
[113.97437286 113.01818848]
[120.05299377 126.73133087]
[126.13161469 140.44447327]
[132.21023560 154.15762329]
[138.28884888 167.87077332]
[144.36747742 181.58392334]
[158.45382690 176.41317749]
[172.84822083 172.17478943]
[187.48899841 168.88691711]
[202.31346130 166.56365967]
[217.25811768 165.21493530]
[232.25900269 164.84652710]
[247.25187683 165.46000671]
[262.17251587 167.05278015]
[276.95703125 169.61798096]
[291.54211426 173.14466858]
[305.86532593 177.61770630]
[319.86529541 183.01794434]
[333.48211670 189.32228088]
[346.65744019 196.50369263]
[359.33489990 204.53144836]
[371.46014404 213.37117004]
[382.98129272 222.98498535]
[393.84896851 233.33174133]
[404.01669312 244.36712646]
[413.44088745 256.04388428]
[422.08120728 268.31204224]
[429.90066528 281.11901855]
[436.86572266 294.40997314]
[442.94662476 308.12802124]
[448.11727905 322.21441650]
[452.35559082 336.60882568]
[455.64337158 351.24963379]
[457.96655273 366.07409668]
[459.31518555 381.01876831]
[459.68350220 396.01965332]
[459.06991577 411.01251221]
[457.47708130 425.93313599]
[454.91177368 440.71765137]
[451.38500977 455.30273438]
[446.91189575 469.62588501]
[441.51156616 483.62585449]
[435.20715332 497.24261475]
[428.02566528 510.41790771]
[419.99783325 523.09533691]
[411.15805054 535.22052002]
[401.54415894 546.74157715]
[391.19732666 557.60925293]
[380.16189575 567.77691650]
[368.48507690 577.20098877]
[356.21688843 585.84124756]
[343.40985107 593.66064453]
[330.11883545 600.62561035]
[316.40075684 606.70642090]
[302.31433105 611.87701416]
[287.91989136 616.11523438]
[273.27908325 619.40295410]
[258.45458984 621.72601318]
[243.50990295 623.07458496]
[228.50901794 623.44281006]
[213.51615906 622.82910156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% Start Annotations
39 72 0.0 1 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.0 1 colorpair
49 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
