%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:27:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUUCUGGAUGUGUAUGGCAUGCAGAUGGCCUCGUGGAUUAAUGAAAAUUAACUACGGGGCUUUCUUAAUUCUGCCUCACAAUGUCCGAAUCAGUGCAACAUCAAUAAGGCUAAAAGCCUCAAGCGCCACUGGCAUAAUA\
) } def
/len { sequence length } bind def

/coor [
[66.80071259 76.52418518]
[56.36090088 65.75337219]
[45.92108917 54.98256302]
[31.44944763 59.70833588]
[16.42230606 57.69041443]
[3.81308031 49.38212967]
[-3.90673280 36.47610474]
[-5.25191832 21.55967331]
[-0.00901035 7.59624243]
[-10.44882298 -3.17456627]
[-20.88863564 -13.94537449]
[-31.43992615 -24.60700035]
[-42.10155106 -35.15829086]
[-52.76317978 -45.70958328]
[-63.42480469 -56.26087189]
[-71.78302765 -60.10690689]
[-74.19561005 -67.14431000]
[-84.63542175 -77.91512299]
[-95.07524109 -88.68592834]
[-105.51505280 -99.45673370]
[-115.95486450 -110.22754669]
[-126.39467621 -120.99835205]
[-136.94596863 -131.65997314]
[-147.60758972 -142.21127319]
[-163.18417358 -142.29895020]
[-173.84628296 -153.15133667]
[-173.66670227 -168.00068665]
[-184.32832336 -178.55198669]
[-194.98994446 -189.10327148]
[-205.65158081 -199.65455627]
[-224.31343079 -195.72677612]
[-241.47029114 -203.70666504]
[-250.34919739 -220.24723816]
[-247.56330872 -238.66181946]
[-258.86230469 -248.52754211]
[-270.16131592 -258.39324951]
[-285.64547729 -261.64157104]
[-290.14358521 -275.84075928]
[-301.44256592 -285.70648193]
[-312.74157715 -295.57220459]
[-324.04058838 -305.43792725]
[-335.33959961 -315.30364990]
[-346.63861084 -325.16937256]
[-357.93759155 -335.03509521]
[-369.23660278 -344.90081787]
[-380.53561401 -354.76654053]
[-391.83462524 -364.63226318]
[-400.41647339 -367.94946289]
[-403.26330566 -374.82269287]
[-414.35461426 -384.92132568]
[-425.44592285 -395.01998901]
[-436.53726196 -405.11862183]
[-447.62857056 -415.21728516]
[-463.75689697 -418.18527222]
[-468.99502563 -433.72534180]
[-457.95440674 -445.85122681]
[-441.99270630 -442.08883667]
[-437.52990723 -426.30859375]
[-426.43859863 -416.20993042]
[-415.34729004 -406.11129761]
[-404.25598145 -396.01263428]
[-393.16464233 -385.91400146]
[-381.96890259 -375.93127441]
[-370.66989136 -366.06555176]
[-359.37088013 -356.19982910]
[-348.07186890 -346.33410645]
[-336.77285767 -336.46838379]
[-325.47387695 -326.60266113]
[-314.17486572 -316.73693848]
[-302.87585449 -306.87121582]
[-291.57684326 -297.00549316]
[-280.27786255 -287.13977051]
[-265.60186768 -284.59710693]
[-260.29559326 -269.69226074]
[-248.99659729 -259.82653809]
[-237.69758606 -249.96081543]
[-227.38468933 -254.49122620]
[-216.07369995 -254.81675720]
[-205.42071533 -250.85098267]
[-197.00003052 -243.13867188]
[-192.07150269 -232.78121948]
[-191.39219666 -221.27943420]
[-195.10028076 -210.31619263]
[-184.43865967 -199.76489258]
[-173.77703857 -189.21360779]
[-163.11540222 -178.66232300]
[-148.26872253 -178.99635315]
[-137.30601501 -168.44772339]
[-137.05630493 -152.87289429]
[-126.39467621 -142.32160950]
[-119.38274384 -139.83593750]
[-115.62386322 -131.43817139]
[-105.18405151 -120.66735840]
[-94.74423981 -109.89655304]
[-84.30442810 -99.12574005]
[-73.86461639 -88.35493469]
[-63.42480469 -77.58412170]
[-52.87351227 -66.92250061]
[-42.21188736 -56.37120819]
[-31.55026245 -45.81991577]
[-20.88863564 -35.26862717]
[-13.87670803 -32.78296280]
[-10.11782646 -24.38518715]
[0.32198572 -13.61437893]
[10.76179790 -2.84356999]
[24.88202286 -7.64822674]
[39.74921799 -5.83826208]
[52.40807724 2.28049660]
[60.31887436 15.14282417]
[61.86692429 30.22561264]
[56.69189835 44.54275131]
[67.13171387 55.31356049]
[77.57152557 66.08436584]
[94.83559418 57.77681351]
[114.84795380 58.14052963]
[133.31832886 67.86248779]
[145.94869995 85.54496765]
[149.42408752 107.86367035]
[162.94828796 114.35183716]
[176.47247314 120.84000397]
[189.99665833 127.32817078]
[203.52084351 133.81632996]
[220.41691589 135.21600342]
[223.74925232 151.83923340]
[208.69813538 159.64311218]
[197.03268433 147.34053040]
[183.50849915 140.85235596]
[169.98429871 134.36419678]
[156.46011353 127.87602997]
[142.93592834 121.38786316]
[137.66027832 126.71867371]
[151.06053162 133.45909119]
[148.79074097 148.28636169]
[133.98773193 150.70935059]
[127.10899353 137.38031006]
[121.83334351 142.71112061]
[128.46183777 156.16708374]
[135.09034729 169.62304688]
[147.51361084 181.15989685]
[139.86672974 196.29136658]
[123.20973206 193.13214111]
[121.63437653 176.25154114]
[115.00587463 162.79557800]
[108.37738037 149.33961487]
[93.85238647 148.48445129]
[80.53123474 143.54553223]
[69.50559998 135.13972473]
[61.61632919 124.15817261]
[57.39036179 111.67515564]
[57.00843048 98.84454346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[9 105]
[10 104]
[11 103]
[12 101]
[13 100]
[14 99]
[15 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[23 90]
[24 89]
[27 86]
[28 85]
[29 84]
[30 83]
[34 76]
[35 75]
[36 74]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
[136 144]
[137 143]
[138 142]
] def

init

% Start Annotations
1 113 0.0 1 colorpair
2 112 0.0 1 colorpair
3 111 0.0 1 colorpair
9 105 0.0 1 colorpair
10 104 0.0 1 colorpair
11 103 0.0 1 colorpair
12 101 0.0 1 colorpair
13 100 0.0 1 colorpair
14 99 0.0 1 colorpair
15 98 0.0 1 colorpair
17 97 0.0 1 colorpair
18 96 0.0 1 colorpair
19 95 0.0 1 colorpair
20 94 0.0 1 colorpair
21 93 0.0 1 colorpair
22 92 0.0 1 colorpair
23 90 0.0 1 colorpair
24 89 0.0 1 colorpair
27 86 0.0 1 colorpair
28 85 0.0 1 colorpair
29 84 0.0 1 colorpair
30 83 0.0 1 colorpair
34 76 0.0 1 colorpair
35 75 0.0 1 colorpair
36 74 0.0 1 colorpair
38 72 0.0 1 colorpair
39 71 0.0 1 colorpair
40 70 0.0 1 colorpair
41 69 0.0 1 colorpair
42 68 0.0 1 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
45 65 0.0 1 colorpair
46 64 0.0 1 colorpair
47 63 0.0 1 colorpair
49 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair
118 130 0.0 1 colorpair
119 129 0.0 1 colorpair
120 128 0.0 1 colorpair
121 127 0.0 1 colorpair
122 126 0.0 1 colorpair
136 144 0.0 1 colorpair
137 143 0.0 1 colorpair
138 142 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
