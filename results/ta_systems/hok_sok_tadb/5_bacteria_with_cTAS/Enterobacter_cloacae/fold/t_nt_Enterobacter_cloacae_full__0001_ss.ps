%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:22:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAAGAGGCUACUCUCAACUUG_UUGGGAGUUGAGG__G______UAGCCUCG__GGUAAAUGAAAAUUUCCC______GGGGCUUUCUACUUUCUGUCCCUCAACAAUG___________________CUCAAGACAGAAAGUCUUAAGCACCCGCCGCAU____\
) } def
/len { sequence length } bind def

/coor [
[263.73690796 168.10533142]
[247.91900635 157.34996033]
[232.93232727 145.46321106]
[218.85765076 132.50907898]
[205.77082825 118.55730438]
[193.74237061 103.68303680]
[182.83712769 87.96635437]
[173.11384583 71.49191284]
[159.72337341 78.25173187]
[146.33290100 85.01155853]
[132.94242859 91.77138519]
[131.31988525 113.11407471]
[117.25148773 129.24551392]
[96.32772827 133.75541687]
[76.86325073 124.85164642]
[64.46966553 133.30145264]
[56.89141464 150.06278992]
[39.37313080 150.73704529]
[27.13971901 159.41711426]
[14.90630627 168.09718323]
[16.42013550 183.38130188]
[10.07448006 197.36801147]
[-2.42371154 206.29498291]
[-17.71248817 207.76089478]
[-31.67924500 201.37142944]
[-40.56699371 188.84532166]
[-41.98497772 173.55201721]
[-35.55176544 159.60536194]
[-22.99785423 150.75691223]
[-7.70018959 149.38688660]
[6.22623730 155.86378479]
[18.45965004 147.18370056]
[30.69306374 138.50363159]
[33.03998566 126.61035919]
[43.19698715 119.28330231]
[56.01986313 120.90786743]
[68.41344452 112.45806885]
[66.28423309 104.02006531]
[66.36976624 95.31799316]
[68.66442108 86.92347717]
[73.01747131 79.38793945]
[79.14296722 73.20638275]
[86.63853455 68.78485870]
[95.01180267 66.41381836]
[103.71273041 66.24900818]
[112.16977692 68.30125427]
[119.82740784 72.43575287]
[126.18260956 78.38091278]
[139.57307434 71.62108612]
[152.96354675 64.86125946]
[166.35401917 58.10143661]
[161.16123962 46.27843475]
[156.56042480 34.21281052]
[152.56286621 21.93418503]
[149.17835999 9.47270107]
[146.41522217 -3.14105582]
[144.28021240 -15.87612152]
[142.77857971 -28.70123672]
[141.91400146 -41.58491898]
[141.68859863 -54.49554825]
[142.10289001 -67.40143585]
[143.15589905 -80.27089691]
[144.84498596 -93.07234192]
[147.16603088 -105.77436066]
[150.11331177 -118.34577179]
[153.67961121 -130.75572205]
[157.85614014 -142.97373962]
[162.63265991 -154.96984863]
[167.99743652 -166.71459961]
[173.93730164 -178.17918396]
[180.43765259 -189.33544922]
[187.48255920 -200.15600586]
[195.05468750 -210.61431885]
[203.13546753 -220.68472290]
[211.70506287 -230.34248352]
[220.74241638 -239.56390381]
[230.22535706 -248.32637024]
[240.13059998 -256.60836792]
[250.43382263 -264.38955688]
[261.10974121 -271.65087891]
[272.13214111 -278.37448120]
[283.47396851 -284.54388428]
[295.10736084 -290.14395142]
[307.00378418 -295.16094971]
[319.13403320 -299.58255005]
[331.46832275 -303.39791870]
[343.97640991 -306.59771729]
[356.62753296 -309.17404175]
[369.39065552 -311.12060547]
[382.23449707 -312.43267822]
[395.12747192 -313.10696411]
[408.03796387 -313.14187622]
[420.93426514 -312.53732300]
[433.78472900 -311.29476929]
[446.55783081 -309.41729736]
[459.22219849 -306.90951538]
[471.74676514 -303.77755737]
[484.10076904 -300.02917480]
[496.25390625 -295.67355347]
[508.17633057 -290.72134399]
[519.83880615 -285.18475342]
[531.21270752 -279.07739258]
[542.27008057 -272.41421509]
[552.98382568 -265.21160889]
[563.32763672 -257.48721313]
[573.27612305 -249.26007080]
[582.80487061 -240.55032349]
[591.89050293 -231.37936401]
[600.51074219 -221.76971436]
[608.64440918 -211.74496460]
[616.27154541 -201.32972717]
[623.37341309 -190.54957581]
[629.93261719 -179.43095398]
[635.93310547 -168.00117493]
[641.36004639 -156.28828430]
[646.20019531 -144.32104492]
[650.44171143 -132.12882996]
[654.07409668 -119.74156952]
[657.08850098 -107.18966675]
[659.47753906 -94.50392914]
[661.23535156 -81.71549988]
[662.35754395 -68.85577393]
[662.84149170 -55.95631027]
[662.68597412 -43.04877472]
[661.89129639 -30.16484833]
[660.45953369 -17.33615494]
[658.39416504 -4.59418106]
[655.70025635 8.02979660]
[652.38439941 20.50479507]
[648.45477295 32.80019379]
[643.92108154 44.88581467]
[638.79431152 56.73199463]
[633.08721924 68.30966187]
[626.81365967 79.59040070]
[639.51452637 87.57088470]
[652.21539307 95.55136871]
[664.91625977 103.53184509]
[677.61712646 111.51232910]
[693.51495361 109.35860443]
[705.01092529 120.54889679]
[703.28625488 136.49897766]
[689.66406250 144.97331238]
[674.59399414 139.47111511]
[669.63665771 124.21318817]
[656.93579102 116.23271179]
[644.23492432 108.25222778]
[631.53405762 100.27175140]
[618.83319092 92.29126740]
[607.62481689 107.78414917]
[595.31011963 122.41342926]
[581.95538330 136.10028076]
[567.63250732 148.77093506]
[552.41870117 160.35711670]
[536.39581299 170.79638672]
[519.65014648 180.03245544]
[502.27191162 188.01554871]
[484.35467529 194.70262146]
[465.99499512 200.05761719]
[447.29168701 204.05162048]
[428.34555054 206.66311646]
[409.25860596 207.87797546]
[390.13369751 207.68962097]
[371.07382202 206.09901428]
[352.18167114 203.11468506]
[333.55902100 198.75267029]
[315.30618286 193.03643799]
[297.52151489 185.99671936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 51]
[9 50]
[10 49]
[11 48]
[15 37]
[16 36]
[18 33]
[19 32]
[20 31]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
] def

init

% Start Annotations
8 51 0.0 0.2 colorpair
9 50 0.16 1 colorpair
10 49 0.0 1 colorpair
11 48 0.32 0.2 colorpair
15 37 0.0 1 colorpair
16 36 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 51 2 gmark
50 cmark
11 48 2 gmark
11 cmark
48 cmark
36 cmark
18 33 7 gmark
18 cmark
33 cmark
19 32 5 gmark
19 cmark
32 cmark
20 31 5 gmark
20 cmark
31 cmark
134 148 6 gmark
134 cmark
148 cmark
135 147 6 gmark
135 cmark
136 146 6 gmark
137 145 7 gmark
137 cmark
145 cmark
138 144 6 gmark

% End Annotations
showpage
end
%%EOF
