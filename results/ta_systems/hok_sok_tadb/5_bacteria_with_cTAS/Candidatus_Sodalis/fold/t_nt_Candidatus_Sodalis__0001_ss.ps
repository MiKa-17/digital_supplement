%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:17:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAGGCGACCUUUAUGUUGUGUAAGCAUUAGAGUGGCCUCGGGUUGAUUAACAUCGAUCCGGGGCCUUUCUCUUUCUGCCUUUU\
) } def
/len { sequence length } bind def

/coor [
[74.43146515 241.22164917]
[77.31612396 222.05581665]
[77.85765839 207.06559753]
[78.39920044 192.07537842]
[78.94073486 177.08515930]
[79.48226929 162.09494019]
[80.02380371 147.10472107]
[80.56533813 132.11448669]
[78.86298370 147.01757812]
[68.39421844 157.76025391]
[53.54006195 159.84687805]
[40.51673126 152.40423584]
[34.77428436 138.54695129]
[38.71583939 124.07407379]
[50.69192123 115.04226685]
[65.69191742 115.23162079]
[50.75300217 113.87932587]
[35.81408310 112.52703094]
[20.87516403 111.17473602]
[5.93624496 109.82244110]
[-7.25576496 118.95208740]
[-22.57656479 114.19260406]
[-28.27334785 99.19506073]
[-19.97602844 85.46429443]
[-4.04960251 83.53336334]
[7.28854132 94.88352203]
[22.22746086 96.23581696]
[37.16637802 97.58811188]
[52.10529709 98.94040680]
[67.04421997 100.29270172]
[84.10235596 75.81823730]
[110.08303833 77.20896912]
[119.99865723 65.95372009]
[129.91426086 54.69847107]
[139.82987976 43.44322586]
[142.65914917 23.64285851]
[160.93333435 17.76417732]
[170.01094055 5.82278156]
[179.08856201 -6.11861467]
[188.16616821 -18.06001091]
[197.24378967 -30.00140572]
[206.32139587 -41.94280243]
[215.39901733 -53.88419724]
[224.47662354 -65.82559204]
[233.55422974 -77.76699066]
[242.63185120 -89.70838928]
[251.70945740 -101.64978027]
[260.78707886 -113.59117889]
[269.86468506 -125.53257751]
[278.94229126 -137.47396851]
[280.47152710 -153.80166626]
[295.48715210 -160.39431763]
[308.54238892 -150.46997070]
[306.20715332 -134.23794556]
[290.88369751 -128.39636230]
[281.80609131 -116.45496368]
[272.72848511 -104.51356506]
[263.65084839 -92.57216644]
[254.57324219 -80.63077545]
[245.49563599 -68.68937683]
[236.41801453 -56.74798203]
[227.34040833 -44.80658340]
[218.26278687 -32.86518860]
[209.18518066 -20.92379379]
[200.10755920 -8.98239708]
[191.02995300 2.95899868]
[181.95234680 14.90039444]
[172.87472534 26.84179115]
[175.18298340 37.08591843]
[171.27180481 47.07067108]
[162.25328064 53.27391815]
[151.08512878 53.35883713]
[141.16950989 64.61408234]
[131.25390625 75.86933136]
[121.33828735 87.12458038]
[126.41397095 97.53327942]
[126.36511993 109.82404327]
[120.58359528 121.47000885]
[109.69868469 129.81208801]
[95.55556488 132.65603638]
[95.01403046 147.64625549]
[94.47248840 162.63647461]
[93.93095398 177.62669373]
[93.38941956 192.61691284]
[92.84788513 207.60713196]
[92.30634308 222.59736633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[32 75]
[33 74]
[34 73]
[35 72]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% Start Annotations
2 86 0.0 1 colorpair
3 85 0.0 1 colorpair
4 84 0.0 1 colorpair
5 83 0.0 1 colorpair
6 82 0.0 1 colorpair
7 81 0.0 1 colorpair
8 80 0.0 1 colorpair
16 30 0.0 1 colorpair
17 29 0.0 1 colorpair
18 28 0.0 1 colorpair
19 27 0.0 1 colorpair
20 26 0.0 1 colorpair
32 75 0.0 1 colorpair
33 74 0.0 1 colorpair
34 73 0.0 0.6 colorpair
35 72 0.0 1 colorpair
37 68 0.0 1 colorpair
38 67 0.0 1 colorpair
39 66 0.0 1 colorpair
40 65 0.0 1 colorpair
41 64 0.0 1 colorpair
42 63 0.0 1 colorpair
43 62 0.0 1 colorpair
44 61 0.16 1 colorpair
45 60 0.0 1 colorpair
46 59 0.16 1 colorpair
47 58 0.0 1 colorpair
48 57 0.0 1 colorpair
49 56 0.0 1 colorpair
50 55 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
34 73 1 gmark
61 cmark
59 cmark

% End Annotations
showpage
end
%%EOF
