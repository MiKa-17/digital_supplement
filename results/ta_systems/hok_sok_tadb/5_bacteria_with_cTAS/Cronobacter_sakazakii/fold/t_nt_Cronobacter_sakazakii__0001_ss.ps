%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:19:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAAUCUGAAGUUGUU_CAAGUAUGGAGAUAGCCUCGUUGGU_UAAUUGA__AAAUAACCUUCGGGGCUUUCUUCUUUCUGCC___C_C_A____G__A____CCUUGC_GAUUGCAUGAGGCAAAAAGCCUCAAGCGCCGGCG__AUU___\
) } def
/len { sequence length } bind def

/coor [
[-50.75550079 269.45306396]
[-67.35824585 265.16708374]
[-83.13705444 258.46005249]
[-97.74111938 249.48173523]
[-110.84584045 238.43232727]
[-122.16004944 225.55809021]
[-134.69236755 233.80072021]
[-147.22468567 242.04336548]
[-159.75700378 250.28599548]
[-172.28932190 258.52862549]
[-184.82164001 266.77127075]
[-186.01702881 280.21670532]
[-194.62460327 290.36038208]
[-207.31877136 293.63073730]
[-219.39167786 289.04699707]
[-232.08146667 297.04504395]
[-244.77127075 305.04312134]
[-241.27369690 319.77560425]
[-242.75175476 334.84524536]
[-249.04508972 348.61740112]
[-259.47106934 359.59820557]
[-272.89874268 366.59649658]
[-287.87158203 368.85317993]
[-302.76544189 366.12347412]
[-315.96478271 358.70346069]
[-326.03778076 347.39801025]
[-331.89184570 333.43347168]
[-332.89193726 318.32458496]
[-328.92956543 303.71023560]
[-320.43457031 291.17575073]
[-308.32843018 282.08068848]
[-293.92428589 277.41168213]
[-278.78463745 277.67517090]
[-264.55169678 282.84255981]
[-252.76933289 292.35333252]
[-240.07954407 284.35525513]
[-227.38973999 276.35720825]
[-224.39274597 259.83114624]
[-210.10261536 250.38006592]
[-193.06427002 254.23895264]
[-180.53195190 245.99630737]
[-167.99963379 237.75367737]
[-155.46731567 229.51104736]
[-142.93499756 221.26840210]
[-130.40267944 213.02577209]
[-136.20626831 201.31903076]
[-140.64361572 189.02818298]
[-143.65718079 176.31205750]
[-145.20773315 163.33503723]
[-145.27503967 150.26489258]
[-143.85798645 137.27062988]
[-140.97467041 124.52027893]
[-136.66215515 112.17874908]
[-130.97598267 100.40570831]
[-123.98948669 89.35347748]
[-115.79280853 79.16508484]
[-106.49176025 69.97240448]
[-96.20644379 61.89447021]
[-85.06970978 55.03590012]
[-73.22544098 49.48557281]
[-60.82669449 45.31545639]
[-48.03371429 42.57968903]
[-35.01187134 41.31386185]
[-21.92951584 41.53456879]
[-8.95581245 43.23918533]
[3.74145937 46.40588379]
[15.99806499 50.99394608]
[27.65544510 56.94425583]
[38.56276321 64.18006897]
[48.57886505 72.60802460]
[57.57408905 82.11930847]
[65.43196869 92.59110260]
[72.05071259 103.88813782]
[85.82395172 97.94693756]
[94.32657623 86.84752655]
[108.23484802 88.27982330]
[122.00809479 82.33862305]
[135.78134155 76.39743042]
[149.55458069 70.45623016]
[151.43220520 55.27658081]
[160.59524536 43.15488434]
[174.50296021 37.28618622]
[189.38133240 39.15434647]
[201.24702454 48.15828323]
[215.02026367 42.21708679]
[228.79351807 36.27589035]
[242.56675720 30.33469391]
[252.17370605 17.76421165]
[266.92468262 19.82770920]
[280.69790649 13.88651371]
[294.47116089 7.94531727]
[308.24441528 2.00412059]
[304.57897949 -12.57534599]
[303.29986572 -27.55399895]
[304.44021606 -42.54385757]
[307.97045898 -57.15664291]
[313.79916382 -71.01385498]
[321.77536011 -83.75655365]
[331.69247437 -95.05467224]
[343.29354858 -104.61557007]
[356.27816772 -112.19158173]
[370.30996704 -117.58648682]
[385.02548218 -120.66053772]
[400.04354858 -121.33410645]
[414.97515869 -119.58974457]
[429.43359375 -115.47264862]
[443.04428101 -109.08944702]
[455.45468140 -100.60547638]
[466.34338379 -90.24050903]
[475.42831421 -78.26301575]
[482.47412109 -64.98323059]
[487.29833984 -50.74514771]
[489.77603149 -35.91756058]
[489.84295654 -20.88454247]
[487.49740601 -6.03548098]
[482.80017090 8.24499607]
[475.87286377 21.58699036]
[466.89495850 33.64490891]
[456.09899902 44.10643005]
[443.76461792 52.70056534]
[430.21130371 59.20471191]
[415.79013062 63.45039749]
[400.87463379 65.32764435]
[385.85116577 64.78783417]
[371.10885620 61.84494400]
[357.02960205 56.57520294]
[343.97802734 49.11510849]
[332.29226685 39.65789413]
[322.27496338 28.44853020]
[314.18560791 15.77736187]
[300.41235352 21.71855927]
[286.63912964 27.65975571]
[272.86587524 33.60095215]
[264.24407959 45.74647903]
[248.50794983 44.10793686]
[234.73471069 50.04913330]
[220.96147156 55.99032974]
[207.18821716 61.93152618]
[205.59471130 76.74119568]
[196.74340820 88.84533691]
[182.93061829 94.93410492]
[167.82556152 93.28064728]
[155.49577332 84.22946930]
[141.72253418 90.17066956]
[127.94928741 96.11186218]
[114.17604828 102.05306244]
[105.67342377 113.15247345]
[91.76515198 111.72017670]
[77.99190521 117.66137695]
[82.51759338 134.22824097]
[84.52857208 151.28207397]
[83.98067474 168.44338989]
[80.88667297 185.33044434]
[75.31594086 201.56762695]
[67.39296722 216.79391479]
[57.29450607 230.67082214]
[45.24568939 242.88996887]
[31.51497459 253.17993164]
[16.40816498 261.31222534]
[0.26161420 267.10644531]
[-16.56527138 270.43420410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[15 37]
[16 36]
[17 35]
[73 149]
[74 148]
[76 146]
[77 145]
[78 144]
[79 143]
[84 138]
[85 137]
[86 136]
[87 135]
[89 133]
[90 132]
[91 131]
[92 130]
] def

init

% Start Annotations
6 45 0.0 1 colorpair
7 44 0.0 0.6 colorpair
8 43 0.0 1 colorpair
9 42 0.0 1 colorpair
10 41 0.0 1 colorpair
11 40 0.16 1 colorpair
15 37 0.0 1 colorpair
16 36 0.16 1 colorpair
73 149 0.0 0.2 colorpair
74 148 0.0 0.2 colorpair
76 146 0.0 0.2 colorpair
77 145 0.0 0.2 colorpair
78 144 0.0 0.2 colorpair
79 143 0.0 0.2 colorpair
84 138 0.0 0.2 colorpair
85 137 0.0 0.2 colorpair
86 136 0.0 0.2 colorpair
87 135 0.0 0.2 colorpair
89 133 0.0 0.2 colorpair
90 132 0.0 0.2 colorpair
92 130 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 44 1 gmark
40 cmark
36 cmark
17 35 4 gmark
17 cmark
35 cmark
73 149 2 gmark
74 148 2 gmark
76 146 2 gmark
77 145 2 gmark
78 144 2 gmark
79 143 2 gmark
84 138 2 gmark
85 137 2 gmark
86 136 2 gmark
87 135 2 gmark
89 133 2 gmark
90 132 2 gmark
91 131 3 gmark
91 cmark
131 cmark
92 130 2 gmark

% End Annotations
showpage
end
%%EOF
