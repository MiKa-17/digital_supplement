%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:26:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________________A_AUGCCACU___AAAAACUCUGUUCUGGUGCGUAUUUAUUGUGUGUCUGACACUGCUGAUAUUCACCUUGAUGACACGAAAAUCGCUCUGCGAGAUUCGAUUCAAGGAUGGACAUAGGGAGGUGGCGGCUAUAAUGGCCUACGAAUCCGGUAA_\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50752258 91.97937012]
[62.54214859 90.93871307]
[47.62190628 89.37928772]
[32.76477432 87.30296326]
[17.98865700 84.71224976]
[3.31135798 81.61026764]
[-11.24943924 78.00074768]
[-25.67618942 73.88804626]
[-39.95150757 69.27711487]
[-54.05819702 64.17351532]
[-67.97925568 58.58338928]
[-81.69792175 52.51347733]
[-95.19764709 45.97109222]
[-108.46217346 38.96411514]
[-121.47551727 31.50099182]
[-134.22200012 23.59071159]
[-146.68627930 15.24280834]
[-158.85330200 6.46733952]
[-170.70843506 -2.72512031]
[-182.23738098 -12.32349586]
[-193.42625427 -22.31622124]
[-204.26156616 -32.69125748]
[-214.73027039 -43.43610001]
[-224.81974792 -54.53780365]
[-234.51785278 -65.98299408]
[-243.81288147 -77.75788116]
[-252.69363403 -89.84826660]
[-261.14941406 -102.23960114]
[-269.17004395 -114.91693878]
[-276.74588013 -127.86500549]
[-283.86773682 -141.06820679]
[-290.52706909 -154.51063538]
[-296.71585083 -168.17608643]
[-302.42660522 -182.04808044]
[-307.65246582 -196.10993958]
[-312.38714600 -210.34469604]
[-316.62493896 -224.73519897]
[-320.36071777 -239.26411438]
[-323.58999634 -253.91394043]
[-326.30889893 -268.66699219]
[-328.51409912 -283.50555420]
[-330.20300293 -298.41168213]
[-331.37353516 -313.36746216]
[-332.02429199 -328.35485840]
[-332.15447998 -343.35580444]
[-331.76397705 -358.35223389]
[-330.85321045 -373.32608032]
[-329.42330933 -388.25930786]
[-327.47598267 -403.13388062]
[-325.01361084 -417.93191528]
[-322.03909302 -432.63558960]
[-318.55606079 -447.22717285]
[-314.56869507 -461.68905640]
[-310.08181763 -476.00384521]
[-305.10083008 -490.15429688]
[-299.63171387 -504.12335205]
[-293.68106079 -517.89416504]
[-287.25607300 -531.45013428]
[-280.36444092 -544.77496338]
[-273.01452637 -557.85260010]
[-265.21514893 -570.66723633]
[-256.97573853 -583.20349121]
[-248.30616760 -595.44616699]
[-239.21691895 -607.38067627]
[-229.71894836 -618.99243164]
[-219.82369995 -630.26763916]
[-209.54307556 -641.19256592]
[-198.88948059 -651.75408936]
[-187.87574768 -661.93951416]
[-176.51513672 -671.73657227]
[-164.82135010 -681.13342285]
[-152.80848694 -690.11877441]
[-140.49099731 -698.68176270]
[-127.88373566 -706.81213379]
[-115.00189209 -714.50000000]
[-101.86098480 -721.73614502]
[-88.47685242 -728.51190186]
[-74.86562347 -734.81896973]
[-61.04368973 -740.64990234]
[-47.02771378 -745.99761963]
[-32.83457947 -750.85565186]
[-18.48139000 -755.21813965]
[-3.98543859 -759.07983398]
[10.63580608 -762.43615723]
[25.36472893 -765.28295898]
[40.18357849 -767.61682129]
[55.07450485 -769.43499756]
[70.01956177 -770.73529053]
[85.00074768 -771.51605225]
[100.00000000 -771.77642822]
[114.99925232 -771.51605225]
[129.98043823 -770.73529053]
[144.92549133 -769.43499756]
[159.81642151 -767.61682129]
[174.63526917 -765.28295898]
[189.36419678 -762.43615723]
[203.98544312 -759.07983398]
[218.48138428 -755.21813965]
[232.83457947 -750.85565186]
[247.02770996 -745.99761963]
[261.04370117 -740.64990234]
[274.86563110 -734.81896973]
[288.47683716 -728.51190186]
[301.86099243 -721.73614502]
[315.00189209 -714.50000000]
[327.88372803 -706.81213379]
[340.49099731 -698.68176270]
[352.80847168 -690.11877441]
[364.82135010 -681.13342285]
[376.51513672 -671.73657227]
[387.87573242 -661.93951416]
[398.88946533 -651.75408936]
[409.54306030 -641.19256592]
[419.82369995 -630.26763916]
[429.71896362 -618.99243164]
[439.21691895 -607.38067627]
[448.30618286 -595.44616699]
[456.97573853 -583.20349121]
[465.21514893 -570.66723633]
[473.01452637 -557.85260010]
[480.36444092 -544.77496338]
[487.25607300 -531.45013428]
[493.68106079 -517.89416504]
[499.63171387 -504.12335205]
[505.10083008 -490.15429688]
[510.08181763 -476.00384521]
[514.56872559 -461.68905640]
[518.55603027 -447.22717285]
[522.03906250 -432.63558960]
[525.01361084 -417.93191528]
[527.47601318 -403.13388062]
[529.42333984 -388.25930786]
[530.85321045 -373.32608032]
[531.76397705 -358.35223389]
[532.15447998 -343.35580444]
[532.02429199 -328.35485840]
[531.37353516 -313.36746216]
[530.20300293 -298.41168213]
[528.51409912 -283.50555420]
[526.30889893 -268.66699219]
[523.59002686 -253.91394043]
[520.36071777 -239.26411438]
[516.62493896 -224.73519897]
[512.38714600 -210.34469604]
[507.65246582 -196.10993958]
[502.42660522 -182.04808044]
[496.71585083 -168.17608643]
[490.52706909 -154.51063538]
[483.86773682 -141.06820679]
[476.74588013 -127.86500549]
[469.17004395 -114.91693878]
[461.14941406 -102.23960114]
[452.69363403 -89.84826660]
[443.81286621 -77.75788116]
[434.51785278 -65.98299408]
[424.81976318 -54.53780365]
[414.73028564 -43.43610001]
[404.26156616 -32.69125748]
[393.42623901 -22.31622124]
[382.23736572 -12.32349586]
[370.70843506 -2.72512031]
[358.85330200 6.46733952]
[346.68627930 15.24280834]
[334.22201538 23.59071159]
[321.47552490 31.50099182]
[308.46215820 38.96411514]
[295.19763184 45.97109222]
[281.69790649 52.51347733]
[267.97924805 58.58338928]
[254.05819702 64.17351532]
[239.95150757 69.27711487]
[225.67619324 73.88804626]
[211.24943542 78.00074768]
[196.68864441 81.61026764]
[182.01133728 84.71224976]
[167.23522949 87.30296326]
[152.37809753 89.37928772]
[137.45785522 90.93871307]
[122.49247742 91.97937012]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
