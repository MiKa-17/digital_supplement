%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 22:30:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______________________________________AUGAA_AUGCUGCAAAAAUAUGUCCUUG_UGGCAGUGAUAGUGAUGUGUUUCACGGUGCUGGUAUUCACACUGCUGACCGGAGAAUCGCUGUGUGAGUUGCGGAUCAAAGACGGUAAUAUGGAGGUUGCGGCUUUUAUGGCUUACGAAUCGAA___G_AAG____________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50553894 92.05337524]
[62.53101730 91.16051483]
[47.58972168 89.82219696]
[32.69489670 88.03961182]
[17.85975075 85.81434631]
[3.09743452 83.14836884]
[-11.57896042 80.04404449]
[-26.15642166 76.50411987]
[-40.62202454 72.53174591]
[-54.96294022 68.13043213]
[-69.16645050 63.30409241]
[-83.21997070 58.05699921]
[-97.11103821 52.39380264]
[-110.82733154 46.31953430]
[-124.35668182 39.83956909]
[-137.68710327 32.95965958]
[-150.80677795 25.68590164]
[-163.70407104 18.02474594]
[-176.36755371 9.98298836]
[-188.78596497 1.56775594]
[-200.94833374 -7.21348858]
[-212.84385681 -16.35295868]
[-224.46199036 -25.84255219]
[-235.79243469 -35.67385101]
[-246.82514954 -45.83814621]
[-257.55032349 -56.32641602]
[-267.95849609 -67.12936401]
[-278.04037476 -78.23741150]
[-287.78707886 -89.64071655]
[-297.18994141 -101.32915497]
[-306.24063110 -113.29237366]
[-314.93109131 -125.51976013]
[-323.25366211 -138.00047302]
[-331.20095825 -150.72344971]
[-338.76589966 -163.67739868]
[-345.94180298 -176.85086060]
[-352.72232056 -190.23211670]
[-359.10140991 -203.80932617]
[-365.07342529 -217.57044983]
[-370.63305664 -231.50328064]
[-375.77542114 -245.59545898]
[-380.49591064 -259.83450317]
[-384.79037476 -274.20776367]
[-388.65496826 -288.70254517]
[-392.08630371 -303.30593872]
[-395.08129883 -318.00503540]
[-397.63732910 -332.78680420]
[-399.75210571 -347.63809204]
[-401.42379761 -362.54577637]
[-402.65087891 -377.49661255]
[-403.43225098 -392.47735596]
[-403.76727295 -407.47473145]
[-403.65560913 -422.47543335]
[-403.09735107 -437.46615601]
[-402.09301758 -452.43362427]
[-400.64349365 -467.36453247]
[-398.75009155 -482.24566650]
[-396.41442871 -497.06384277]
[-393.63861084 -511.80590820]
[-390.42510986 -526.45880127]
[-386.77676392 -541.00946045]
[-382.69680786 -555.44512939]
[-378.18884277 -569.75286865]
[-373.25689697 -583.92004395]
[-367.90530396 -597.93408203]
[-362.13885498 -611.78265381]
[-355.96264648 -625.45330811]
[-349.38211060 -638.93402100]
[-342.40316772 -652.21289062]
[-335.03192139 -665.27801514]
[-327.27496338 -678.11791992]
[-319.13916016 -690.72119141]
[-310.63168335 -703.07659912]
[-301.76013184 -715.17327881]
[-292.53237915 -727.00042725]
[-282.95654297 -738.54760742]
[-273.04116821 -749.80450439]
[-262.79501343 -760.76123047]
[-252.22717285 -771.40802002]
[-241.34703064 -781.73547363]
[-230.16423035 -791.73437500]
[-218.68869019 -801.39593506]
[-206.93055725 -810.71148682]
[-194.90029907 -819.67285156]
[-182.60855103 -828.27209473]
[-170.06620789 -836.50152588]
[-157.28442383 -844.35382080]
[-144.27450562 -851.82214355]
[-131.04800415 -858.89978027]
[-117.61663055 -865.58044434]
[-103.99230194 -871.85827637]
[-90.18710327 -877.72766113]
[-76.21326447 -883.18347168]
[-62.08319092 -888.22076416]
[-47.80939865 -892.83508301]
[-33.40454483 -897.02239990]
[-18.88140869 -900.77899170]
[-4.25286293 -904.10150146]
[10.46812057 -906.98699951]
[25.26848984 -909.43292236]
[40.13512039 -911.43707275]
[55.05483246 -912.99768066]
[70.01439667 -914.11346436]
[85.00054932 -914.78326416]
[100.00000000 -915.00659180]
[114.99945068 -914.78326416]
[129.98559570 -914.11346436]
[144.94515991 -912.99768066]
[159.86488342 -911.43707275]
[174.73150635 -909.43292236]
[189.53187561 -906.98699951]
[204.25286865 -904.10150146]
[218.88140869 -900.77899170]
[233.40454102 -897.02239990]
[247.80940247 -892.83508301]
[262.08319092 -888.22076416]
[276.21325684 -883.18347168]
[290.18710327 -877.72766113]
[303.99230957 -871.85827637]
[317.61663818 -865.58044434]
[331.04800415 -858.89978027]
[344.27450562 -851.82214355]
[357.28442383 -844.35382080]
[370.06622314 -836.50152588]
[382.60855103 -828.27209473]
[394.90029907 -819.67285156]
[406.93057251 -810.71148682]
[418.68869019 -801.39593506]
[430.16424561 -791.73437500]
[441.34704590 -781.73547363]
[452.22717285 -771.40802002]
[462.79501343 -760.76123047]
[473.04116821 -749.80450439]
[482.95654297 -738.54760742]
[492.53237915 -727.00042725]
[501.76013184 -715.17327881]
[510.63168335 -703.07659912]
[519.13916016 -690.72119141]
[527.27496338 -678.11791992]
[535.03192139 -665.27801514]
[542.40313721 -652.21289062]
[549.38214111 -638.93402100]
[555.96264648 -625.45330811]
[562.13885498 -611.78265381]
[567.90533447 -597.93408203]
[573.25689697 -583.92004395]
[578.18884277 -569.75286865]
[582.69677734 -555.44512939]
[586.77673340 -541.00946045]
[590.42510986 -526.45880127]
[593.63861084 -511.80590820]
[596.41442871 -497.06384277]
[598.75006104 -482.24566650]
[600.64349365 -467.36453247]
[602.09301758 -452.43362427]
[603.09735107 -437.46615601]
[603.65557861 -422.47543335]
[603.76727295 -407.47473145]
[603.43225098 -392.47735596]
[602.65087891 -377.49661255]
[601.42376709 -362.54577637]
[599.75213623 -347.63809204]
[597.63732910 -332.78680420]
[595.08129883 -318.00503540]
[592.08630371 -303.30593872]
[588.65496826 -288.70254517]
[584.79034424 -274.20776367]
[580.49591064 -259.83450317]
[575.77539062 -245.59545898]
[570.63305664 -231.50328064]
[565.07342529 -217.57044983]
[559.10137939 -203.80932617]
[552.72229004 -190.23211670]
[545.94183350 -176.85086060]
[538.76593018 -163.67739868]
[531.20092773 -150.72344971]
[523.25366211 -138.00047302]
[514.93109131 -125.51976013]
[506.24063110 -113.29237366]
[497.18994141 -101.32915497]
[487.78707886 -89.64071655]
[478.04037476 -78.23741150]
[467.95849609 -67.12936401]
[457.55032349 -56.32641602]
[446.82513428 -45.83814621]
[435.79244995 -35.67385101]
[424.46200562 -25.84255219]
[412.84387207 -16.35295868]
[400.94833374 -7.21348858]
[388.78598022 1.56775594]
[376.36755371 9.98298836]
[363.70407104 18.02474594]
[350.80679321 25.68590164]
[337.68710327 32.95965958]
[324.35668945 39.83956909]
[310.82733154 46.31953430]
[297.11102295 52.39380264]
[283.21997070 58.05699921]
[269.16644287 63.30409241]
[254.96293640 68.13043213]
[240.62202454 72.53174591]
[226.15641785 76.50411987]
[211.57896423 80.04404449]
[196.90257263 83.14836884]
[182.14024353 85.81434631]
[167.30509949 88.03961182]
[152.41027832 89.82219696]
[137.46897888 91.16051483]
[122.49446106 92.05337524]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
