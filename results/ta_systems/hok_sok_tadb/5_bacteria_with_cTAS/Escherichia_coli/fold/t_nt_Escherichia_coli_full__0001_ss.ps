%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 22:30:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCU_AUCCUGAUGUUGUCUAGGCAUAGGG_GGG_CCUCGUG__G_GUUAAUGAAAA___AUUUACUACGGGGCUUUUUGCUUUCUGCCGCACAACACUGUAUCAAA_CC_ACCUUCACGUCAUGAGGCAG________AAAGCCUCAAGCGCCCGG_C_A_____________\
) } def
/len { sequence length } bind def

/coor [
[234.46768188 97.28680420]
[222.78251648 87.87778473]
[211.52189636 77.96459198]
[200.70758057 67.56634521]
[190.36044312 56.70312881]
[180.50044250 45.39590454]
[168.77296448 54.74824905]
[157.04548645 64.10059357]
[145.31802368 73.45294189]
[150.96025085 87.29085541]
[152.47679138 102.15768433]
[149.74487305 116.84983063]
[142.98567200 130.17784119]
[132.74638367 141.06266785]
[119.85600281 148.62312317]
[105.35809326 152.24710083]
[90.42640686 151.64122009]
[76.26977539 146.85452271]
[64.03432465 138.27452087]
[52.30685425 147.62687683]
[40.57938004 156.97921753]
[42.25249863 172.31559753]
[35.34810638 186.11170959]
[22.06937218 193.96528625]
[6.65348673 193.37028503]
[-5.98039341 184.51654053]
[-11.80084419 170.22927856]
[-8.95057964 155.06750488]
[1.66089010 143.86927795]
[16.64748383 140.20791626]
[31.22703362 145.25175476]
[42.95450592 135.89939880]
[54.68198013 126.54705811]
[49.03975296 112.70914459]
[47.52320862 97.84231567]
[50.25512695 83.15016937]
[57.01433182 69.82216644]
[67.25360870 58.93732452]
[80.14399719 51.37687302]
[94.64190674 47.75289536]
[109.57359314 48.35877991]
[123.73022461 53.14548111]
[135.96566772 61.72547150]
[147.69314575 52.37312317]
[159.42062378 43.02077866]
[171.14808655 33.66843033]
[162.31842041 21.53954887]
[154.03001404 9.03453732]
[146.29888916 -3.82246828]
[139.13996887 -17.00664902]
[132.56704712 -30.49255562]
[126.59283447 -44.25415802]
[121.22885895 -58.26488876]
[116.48546600 -72.49771118]
[112.37181854 -86.92514038]
[108.89585876 -101.51934052]
[106.06429291 -116.25212860]
[103.88258362 -131.09507751]
[102.35494995 -146.01953125]
[101.48433685 -160.99667358]
[101.27242279 -175.99760437]
[101.71961212 -190.99336243]
[102.82505798 -205.95501709]
[104.58660889 -220.85366821]
[107.00087738 -235.66056824]
[110.06319427 -250.34712219]
[113.76765442 -264.88500977]
[118.10710144 -279.24612427]
[123.07316589 -293.40280151]
[128.65625000 -307.32766724]
[134.84559631 -320.99386597]
[141.62924194 -334.37500000]
[148.99409485 -347.44528198]
[156.92594910 -360.17941284]
[165.40948486 -372.55288696]
[174.42832947 -384.54177856]
[183.96507263 -396.12295532]
[194.00129700 -407.27404785]
[204.51763916 -417.97354126]
[215.49380493 -428.20080566]
[226.90859985 -437.93606567]
[238.74000549 -447.16052246]
[250.96514893 -455.85641479]
[263.56045532 -464.00692749]
[276.50164795 -471.59634399]
[289.76367188 -478.61001587]
[303.32098389 -485.03436279]
[317.14736938 -490.85702515]
[331.21618652 -496.06677246]
[345.50027466 -500.65350342]
[359.97201538 -504.60839844]
[374.60351562 -507.92379761]
[389.36654663 -510.59335327]
[404.23254395 -512.61187744]
[419.17288208 -513.97546387]
[434.15869141 -514.68145752]
[449.16104126 -514.72857666]
[464.15100098 -514.11663818]
[479.09957886 -512.84692383]
[493.97799683 -510.92178345]
[508.75747681 -508.34497070]
[523.40948486 -505.12149048]
[537.90582275 -501.25753784]
[552.21838379 -496.76058960]
[566.31964111 -491.63931274]
[580.18231201 -485.90356445]
[593.77972412 -479.56445312]
[607.08551025 -472.63421631]
[620.07409668 -465.12622070]
[632.72033691 -457.05493164]
[644.99981689 -448.43597412]
[656.88891602 -439.28598022]
[668.36462402 -429.62255859]
[679.40478516 -419.46444702]
[689.98809814 -408.83117676]
[700.09417725 -397.74331665]
[709.70343018 -386.22225952]
[718.79736328 -374.29022217]
[727.35839844 -361.97027588]
[735.37005615 -349.28619385]
[742.81683350 -336.26242065]
[749.68438721 -322.92413330]
[755.95941162 -309.29708862]
[761.62982178 -295.40753174]
[766.68469238 -281.28234863]
[771.11419678 -266.94873047]
[774.90991211 -252.43440247]
[778.06439209 -237.76736450]
[780.57153320 -222.97590637]
[782.42663574 -208.08860779]
[783.62597656 -193.13420105]
[784.16729736 -178.14154053]
[784.04962158 -163.13957214]
[783.27307129 -148.15725708]
[781.83917236 -133.22351074]
[779.75067139 -118.36715698]
[777.01165771 -103.61687469]
[773.62744141 -89.00114441]
[769.60443115 -74.54816437]
[764.95050049 -60.28584290]
[759.67462158 -46.24170685]
[753.78692627 -32.44286728]
[747.29882812 -18.91595459]
[740.22277832 -5.68708324]
[732.57257080 7.21821165]
[724.36285400 19.77501869]
[715.60949707 31.95910263]
[706.32940674 43.74694061]
[696.54052734 55.11578369]
[686.26171875 66.04368591]
[675.51281738 76.50954437]
[664.31463623 86.49317169]
[652.68872070 95.97528839]
[640.65747070 104.93759155]
[628.24420166 113.36278534]
[615.47290039 121.23460388]
[602.36810303 128.53785706]
[588.95513916 135.25843811]
[575.25994873 141.38337708]
[561.30895996 146.90084839]
[547.12908936 151.80021667]
[532.74768066 156.07202148]
[518.19256592 159.70800781]
[503.49172974 162.70115662]
[488.67361450 165.04568481]
[473.76684570 166.73709106]
[458.80017090 167.77207947]
[443.80245972 168.14868164]
[428.80270386 167.86614990]
[413.82980347 166.92504883]
[398.91271973 165.32716370]
[384.08020020 163.07562256]
[369.36090088 160.17472839]
[354.78323364 156.63009644]
[340.37533569 152.44859314]
[326.16500854 147.63824463]
[312.17965698 142.20837402]
[298.44635010 136.16944885]
[284.99151611 129.53312683]
[271.84118652 122.31221008]
[259.02072144 114.52064514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[19 33]
[20 32]
[21 31]
] def

init

% Start Annotations
6 46 0.0 0.6 colorpair
7 45 0.0 1 colorpair
8 44 0.0 1 colorpair
9 43 0.0 1 colorpair
21 31 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 46 1 gmark
19 33 312 gmark
19 cmark
33 cmark
20 32 56 gmark
20 cmark
32 cmark
21 31 2 gmark
21 cmark
31 cmark

% End Annotations
showpage
end
%%EOF
