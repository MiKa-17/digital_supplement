%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:17:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______CGCGAAAGCUGAUUUUGUACGGGCUCAUGGUGAUUUGUUUCACAUUAUUGGCCUGGACCUGGAUGGUGCGUGAUUCGCUGUGCGAGUUGCACAUUAAGCAGGGAAAUACGGAAAUUGCGGCAGUCUUAAGCGACGAAAU_______\
) } def
/len { sequence length } bind def

/coor [
[116.97733307 324.58215332]
[124.62966156 311.68090820]
[135.54086304 301.38793945]
[148.86601257 294.50024414]
[163.57325745 291.55117798]
[178.52372742 292.76916504]
[192.55970764 298.05984497]
[204.59083557 307.01010132]
[198.63923645 293.24136353]
[192.68763733 279.47259521]
[186.73603821 265.70385742]
[180.78443909 251.93510437]
[166.23388672 248.86593628]
[156.16154480 237.68507385]
[154.58583069 222.54008484]
[162.31947327 209.21730042]
[156.36787415 195.44854736]
[150.41627502 181.67979431]
[144.32453918 167.97247314]
[138.09332275 154.32798767]
[131.86209106 140.68351746]
[125.63086700 127.03903198]
[119.39964294 113.39455414]
[108.15532684 120.96616364]
[95.23036957 120.88046265]
[85.12683105 113.87481689]
[80.96934509 102.97643280]
[66.41654968 99.34101105]
[51.86376190 95.70558167]
[37.31097412 92.07015991]
[22.75818443 88.43473053]
[8.20539570 84.79930878]
[-7.05856323 88.96129608]
[-17.53115845 78.37007141]
[-32.08394623 74.73464203]
[-46.63673782 71.09921265]
[-61.26065445 67.76140594]
[-75.94961548 64.72258759]
[-90.63858032 61.68377686]
[-105.32754517 58.64496231]
[-118.39580536 67.53293610]
[-133.90536499 64.49498749]
[-142.65467834 51.33348846]
[-139.45292664 35.85691452]
[-126.19965363 27.24724579]
[-110.75779724 30.61244583]
[-102.28872681 43.95600128]
[-87.59976959 46.99481583]
[-72.91080475 50.03362656]
[-58.22184372 53.07244110]
[-53.76468658 51.20962524]
[-48.08626175 52.16989136]
[-43.00131226 56.54642868]
[-28.44852257 60.18185425]
[-13.89573193 63.81727982]
[0.32731375 59.39526367]
[11.84082127 70.24651337]
[26.39361000 73.88194275]
[40.94639969 77.51737213]
[55.49919128 81.15279388]
[70.05197906 84.78822327]
[84.60476685 88.42364502]
[93.84334564 80.23725128]
[107.00670624 79.00107574]
[119.12237549 86.21250916]
[125.07397461 72.44375610]
[131.02557373 58.67501068]
[136.97718811 44.90626144]
[131.39421082 30.36431313]
[137.62612915 16.48562622]
[151.52406311 11.25274181]
[157.47566223 -2.51600695]
[163.42726135 -16.28475571]
[169.37886047 -30.05350494]
[175.33045959 -43.82225418]
[173.70381165 -59.55961609]
[185.85585022 -68.17223358]
[191.80744934 -81.94098663]
[197.75904846 -95.70973206]
[203.71064758 -109.47847748]
[209.66226196 -123.24723053]
[215.61386108 -137.01597595]
[221.56546021 -150.78472900]
[227.51705933 -164.55348206]
[233.46865845 -178.32221985]
[234.20317078 -195.26025391]
[250.68258667 -199.24336243]
[259.07199097 -184.51060486]
[247.23741150 -172.37062073]
[241.28581238 -158.60186768]
[235.33421326 -144.83312988]
[229.38259888 -131.06437683]
[223.43099976 -117.29563141]
[217.47940063 -103.52687836]
[211.52780151 -89.75813293]
[205.57620239 -75.98937988]
[199.62460327 -62.22063446]
[201.67695618 -47.46810532]
[189.09921265 -37.87065125]
[183.14761353 -24.10190392]
[177.19601440 -10.33315468]
[171.24441528 3.43559408]
[165.29281616 17.20434380]
[171.00317383 30.91300011]
[165.16354370 44.96125412]
[150.74592590 50.85786438]
[144.79432678 64.62660980]
[138.84272766 78.39536285]
[132.89112854 92.16410828]
[133.04412842 107.16333008]
[139.27534485 120.80780792]
[145.50657654 134.45228577]
[151.73779297 148.09677124]
[157.96902466 161.74124146]
[164.41932678 168.29577637]
[164.18502808 175.72819519]
[170.13662720 189.49694824]
[176.08822632 203.26570129]
[191.09132385 206.76043701]
[201.04348755 218.28465271]
[202.28675842 233.28193665]
[194.55317688 245.98350525]
[200.50477600 259.75225830]
[206.45639038 273.52099609]
[212.40798950 287.28976440]
[218.35958862 301.05850220]
[223.05610657 303.52722168]
[226.31246948 307.19863892]
[227.90582275 311.41894531]
[227.87384033 315.53613281]
[238.15095520 326.46228027]
[248.42808533 337.38842773]
[264.23065186 337.62136841]
[275.17993164 349.01824951]
[274.77993774 364.81747437]
[263.26791382 375.64566040]
[247.47381592 375.07861328]
[236.76794434 363.45278931]
[237.50193787 347.66552734]
[227.22480774 336.73937988]
[216.94769287 325.81323242]
[220.39009094 340.41290283]
[219.67604065 355.39590454]
[214.86080933 369.60198975]
[206.31726074 381.93115234]
[194.70701599 391.42861938]
[180.92909241 397.35897827]
[166.05043030 399.26296997]
[151.22315979 396.99316406]
[137.59544373 390.72531128]
[126.22259521 380.94482422]
[117.98526001 368.40902710]
[113.52132416 354.08865356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[16 118]
[17 117]
[18 116]
[19 114]
[20 113]
[21 112]
[22 111]
[23 110]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[34 55]
[35 54]
[36 53]
[37 50]
[38 49]
[39 48]
[40 47]
[65 109]
[66 108]
[67 107]
[68 106]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[130 141]
[131 140]
[132 139]
] def

init

% Start Annotations
8 126 0.0 1 colorpair
9 125 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
16 118 0.0 1 colorpair
17 117 0.0 1 colorpair
18 116 0.0 1 colorpair
19 114 0.0 1 colorpair
20 113 0.0 1 colorpair
21 112 0.0 1 colorpair
22 111 0.0 1 colorpair
23 110 0.0 1 colorpair
27 62 0.0 1 colorpair
28 61 0.0 1 colorpair
29 60 0.0 1 colorpair
30 59 0.0 1 colorpair
31 58 0.0 1 colorpair
32 57 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 53 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
65 109 0.0 1 colorpair
66 108 0.0 1 colorpair
67 107 0.0 1 colorpair
68 106 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
74 100 0.0 1 colorpair
75 99 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
130 141 0.0 1 colorpair
131 140 0.0 1 colorpair
132 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
