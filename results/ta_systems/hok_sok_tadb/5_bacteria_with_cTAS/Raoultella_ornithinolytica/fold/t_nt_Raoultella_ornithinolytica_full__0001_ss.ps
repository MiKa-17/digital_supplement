%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCCAUACUGGUGUUGACUAGACAUACAGUGGGCCUCGUGGGUUAAUGAAAAUUAACUACGGGGCUUUCUGCUUUCUGCCACACAACAUCCAAACCACUCAAACAUCAUGAGGCAAAAAAGCCUCAAGCGCCGUCAUCAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[130.52362061 193.17530823]
[116.20127869 188.71765137]
[103.93000793 180.09120178]
[94.88706970 168.12351990]
[89.94001770 153.96276855]
[89.56314850 138.96992493]
[76.67733765 146.64820862]
[63.79152679 154.32647705]
[50.90571976 162.00476074]
[38.01990891 169.68302917]
[25.13409996 177.36131287]
[19.31786728 184.48837280]
[11.90168095 185.06195068]
[-1.14006221 192.47227478]
[-14.18180561 199.88259888]
[-27.22354889 207.29292297]
[-40.26529312 214.70324707]
[-53.22975922 222.24795532]
[-66.11557007 229.92622375]
[-79.00138092 237.60450745]
[-91.88719177 245.28277588]
[-104.77299500 252.96105957]
[-110.08935547 268.09762573]
[-125.28512573 273.24237061]
[-138.70339966 264.44863892]
[-140.05084229 248.46228027]
[-128.29380798 237.54663086]
[-112.45127106 240.07524109]
[-99.56546783 232.39697266]
[-86.67965698 224.71868896]
[-73.79384613 217.04042053]
[-60.90803528 209.36213684]
[-56.74558640 203.19749451]
[-47.67561722 201.66149902]
[-34.63387299 194.25117493]
[-21.59213066 186.84085083]
[-8.55038834 179.43052673]
[4.49135494 172.02020264]
[17.45582390 164.47549438]
[30.34163284 156.79722595]
[43.22744370 149.11894226]
[56.11325073 141.44067383]
[68.99906158 133.76239014]
[81.88487244 126.08412170]
[82.73560333 118.63252258]
[70.67978668 109.70743561]
[84.43707275 103.72933960]
[85.28781128 96.27774048]
[74.46427155 85.89261627]
[63.64072800 75.50748444]
[52.81718445 65.12235260]
[41.99364471 54.73722076]
[31.17010117 44.35208893]
[20.34655952 33.96696091]
[4.30132341 30.57838821]
[-0.52878714 14.90669155]
[10.82503223 3.07356763]
[26.68294525 7.25191975]
[30.73169136 23.14341736]
[41.55523300 33.52854919]
[52.37877655 43.91367722]
[63.20231628 54.29880905]
[74.02585602 64.68393707]
[84.84940338 75.06906891]
[95.67294312 85.45420074]
[110.46836090 87.92311859]
[124.07749939 81.61508179]
[137.68664551 75.30704498]
[151.29577637 68.99900818]
[160.56253052 56.17567444]
[175.36349487 57.84326935]
[188.97262573 51.53522873]
[202.58177185 45.22719193]
[216.19090271 38.91915512]
[219.29386902 23.83015823]
[230.55509949 13.58134651]
[245.51492310 11.94807053]
[258.41351318 19.34834862]
[272.02267456 13.04031086]
[285.63180542 6.73227358]
[299.24093628 0.42423618]
[312.85006714 -5.88380098]
[323.05557251 -21.17607498]
[340.44198608 -19.00017357]
[353.91784668 -25.58812141]
[367.39370728 -32.17607117]
[380.86956787 -38.76401901]
[389.86932373 -51.77613068]
[404.70159912 -50.41478348]
[418.17745972 -57.00273132]
[414.85211182 -71.70098877]
[415.00668335 -86.76992798]
[418.63278198 -101.39688873]
[425.53491211 -114.79306793]
[435.34078979 -126.23601532]
[447.52166748 -135.10864258]
[461.42059326 -140.93243408]
[476.28802490 -143.39335632]
[491.32217407 -142.35865784]
[505.71231079 -137.88417053]
[518.68237305 -130.21116638]
[529.53283691 -119.75347137]
[537.67864990 -107.07504272]
[542.68048096 -92.85960388]
[544.26855469 -77.87378693]
[542.35723877 -62.92575455]
[537.04962158 -48.82163620]
[528.63201904 -36.32204437]
[517.55822754 -26.10107422]
[504.42553711 -18.70992470]
[489.94213867 -14.54719067]
[474.88912964 -13.83736610]
[460.07830811 -16.61872864]
[446.30838013 -22.74128532]
[434.32192993 -31.87485123]
[424.76541138 -43.52686691]
[411.28955078 -36.93891907]
[403.25366211 -24.39802361]
[387.45751953 -25.28815460]
[373.98165894 -18.70020676]
[360.50579834 -12.11225700]
[347.02993774 -5.52430820]
[342.78271484 5.84431982]
[331.55664062 11.42737198]
[319.15811157 7.72533798]
[305.54898071 14.03337479]
[291.93984985 20.34141350]
[278.33068848 26.64945030]
[264.72155762 32.95748901]
[262.03222656 47.58299637]
[251.11738586 57.94301605]
[236.01855469 59.91247940]
[222.49894714 52.52829361]
[208.88980103 58.83633041]
[195.28067017 65.14437103]
[181.67152405 71.45240784]
[173.37818909 83.82454681]
[157.60382080 82.60814667]
[143.99467468 88.91618347]
[130.38554382 95.22422028]
[116.77639771 101.53225708]
[131.15629578 97.26394653]
[146.15252686 97.60063171]
[160.32637024 102.51001740]
[172.31803894 111.52111053]
[180.97709656 123.76940918]
[185.47279358 138.07984924]
[185.37385559 153.07952881]
[180.68974304 167.32940674]
[171.86985779 179.46240234]
[159.76036072 188.31451416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[66 141]
[67 140]
[68 139]
[69 138]
[71 136]
[72 135]
[73 134]
[74 133]
[78 129]
[79 128]
[80 127]
[81 126]
[82 125]
[84 122]
[85 121]
[86 120]
[87 119]
[89 117]
[90 116]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.0 1 colorpair
13 38 0.0 1 colorpair
14 37 0.0 1 colorpair
15 36 0.0 1 colorpair
16 35 0.0 1 colorpair
17 34 0.0 1 colorpair
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.0 1 colorpair
22 28 0.0 1 colorpair
48 65 0.0 1 colorpair
49 64 0.0 1 colorpair
50 63 0.0 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair
66 141 0.0 1 colorpair
67 140 0.0 1 colorpair
68 139 0.0 1 colorpair
69 138 0.0 1 colorpair
71 136 0.0 1 colorpair
72 135 0.0 1 colorpair
73 134 0.0 1 colorpair
74 133 0.0 1 colorpair
78 129 0.0 1 colorpair
79 128 0.0 1 colorpair
80 127 0.0 1 colorpair
81 126 0.0 1 colorpair
82 125 0.0 1 colorpair
84 122 0.0 1 colorpair
85 121 0.0 1 colorpair
86 120 0.0 1 colorpair
87 119 0.0 1 colorpair
89 117 0.0 1 colorpair
90 116 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
