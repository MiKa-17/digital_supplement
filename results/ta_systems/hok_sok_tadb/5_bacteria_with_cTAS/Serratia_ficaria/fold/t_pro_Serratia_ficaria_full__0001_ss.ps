%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:20:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GAUGCCUGACAAACGGAGCGUAUUAAAACUGAUCGUUAUUUGUGCCACGGUUAUAUCAUUGGCAUGGAUAACACGCAGCCAGCUUUGCGAGCUGCGCAUCCGAUCGGGCAACACGGAGGUUGCGGCUAUUCUGGCUUACGAAUCCGAA___\
) } def
/len { sequence length } bind def

/coor [
[94.99076843 346.05612183]
[83.96964264 356.37298584]
[70.57322693 363.33276367]
[55.79562759 366.41903687]
[40.73343277 365.40274048]
[26.50435829 360.35931396]
[14.16429806 351.66302490]
[4.62896633 339.95919800]
[-1.39405179 326.11627197]
[-3.45780873 311.16156006]
[-1.40916014 296.20477295]
[4.59987068 282.35580444]
[14.12337399 270.64233398]
[26.45464325 261.93356323]
[40.67861557 256.87579346]
[55.73977661 255.84429932]
[58.77858734 241.15533447]
[61.81740189 226.46636963]
[64.85621643 211.77740479]
[58.43581772 195.47265625]
[70.72183228 181.79385376]
[73.46037292 167.04595947]
[76.19892120 152.29806519]
[78.93746948 137.55017090]
[70.87474823 125.14868164]
[68.32587433 112.10012817]
[70.67148590 100.51506805]
[76.57488251 91.98181915]
[84.26788330 87.35229492]
[91.88897705 86.66026306]
[97.81829071 89.17931366]
[93.59230042 74.78691864]
[89.36631012 60.39452744]
[85.14032745 46.00213242]
[80.91433716 31.60973740]
[76.68834686 17.21734238]
[68.45044708 4.68191290]
[56.91619110 -4.90771151]
[45.38193130 -14.49733639]
[33.84767532 -24.08695984]
[22.31341743 -33.67658615]
[10.77915955 -43.26620865]
[-0.75509852 -52.85583496]
[-12.28935623 -62.44545746]
[-23.82361412 -72.03507996]
[-35.35787201 -81.62471008]
[-46.89213181 -91.21433258]
[-58.42638779 -100.80395508]
[-69.96064758 -110.39357758]
[-85.48644257 -109.13370514]
[-97.04721832 -119.02326202]
[-98.15263367 -133.83250427]
[-113.86541748 -132.13430786]
[-126.12428284 -142.10906982]
[-127.65625000 -157.83894348]
[-117.55243683 -169.99165344]
[-101.80725861 -171.35723877]
[-89.76203918 -161.12550354]
[-88.56301117 -145.36676025]
[-73.80084991 -146.98364258]
[-61.96686554 -137.42271423]
[-60.37102127 -121.92783356]
[-48.83676529 -112.33821106]
[-37.30250549 -102.74858856]
[-25.76824760 -93.15896606]
[-14.23398972 -83.56934357]
[-2.69973207 -73.97971344]
[8.83452606 -64.39009094]
[20.36878395 -54.80046844]
[31.90304184 -45.21084213]
[43.43729782 -35.62121964]
[54.97155762 -26.03159332]
[66.50581360 -16.44196892]
[78.04006958 -6.85234499]
[78.04815674 -11.12559319]
[78.68813324 -15.41812420]
[84.63973236 -29.18687248]
[90.59133148 -42.95561981]
[96.54293823 -56.72436905]
[102.49453735 -70.49311829]
[108.44613647 -84.26187134]
[102.86317444 -98.80381775]
[109.09508514 -112.68250275]
[122.99301910 -117.91539001]
[128.94462585 -131.68414307]
[129.67912292 -148.62216187]
[146.15855408 -152.60527039]
[154.54794312 -137.87251282]
[142.71336365 -125.73253632]
[136.76176453 -111.96378326]
[142.47213745 -98.25512695]
[136.63250732 -84.20687866]
[122.21488953 -78.31026459]
[116.26328278 -64.54151917]
[110.31168365 -50.77276993]
[104.36008453 -37.00402069]
[98.40848541 -23.23527145]
[92.45687866 -9.46652222]
[106.00019073 -15.91468430]
[119.89545441 -10.26477146]
[125.09610748 3.80481482]
[118.21623230 17.13400459]
[103.73500061 21.04476738]
[91.08074188 12.99135494]
[95.30673218 27.38374901]
[99.53272247 41.77614212]
[103.75870514 56.16853714]
[107.98469543 70.56093597]
[112.21068573 84.95333099]
[123.84215546 94.42480469]
[138.79223633 95.64744568]
[153.74232483 96.87008667]
[168.69242859 98.09272003]
[183.64251709 99.31536102]
[195.52783203 88.89832306]
[211.29226685 90.01991272]
[221.58306885 102.01470947]
[220.29487610 117.76641083]
[208.19195557 127.92981720]
[192.45474243 126.47515106]
[182.41987610 114.26544952]
[167.46978760 113.04281616]
[152.51969910 111.82017517]
[137.56961060 110.59753418]
[122.61951447 109.37489319]
[117.09195709 123.31929016]
[128.81942749 132.67163086]
[140.54690552 142.02398682]
[152.27436829 151.37632751]
[164.00184631 160.72868347]
[180.15521240 165.87699890]
[179.67977905 182.82427979]
[163.26319885 187.05889893]
[154.64950562 172.45614624]
[142.92202759 163.10380554]
[131.19454956 153.75144958]
[119.46707916 144.39910889]
[107.73960876 135.04675293]
[93.68536377 140.28872681]
[90.94681549 155.03662109]
[88.20826721 169.78451538]
[85.46972656 184.53240967]
[92.12831116 195.62484741]
[89.50350952 207.88284302]
[79.54517365 214.81622314]
[76.50636292 229.50517273]
[73.46755219 244.19413757]
[70.42874146 258.88311768]
[83.84436035 265.80581665]
[94.89398193 276.09213257]
[102.75765228 288.97875977]
[106.85184479 303.50942993]
[106.87272644 318.60583496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 148]
[17 147]
[18 146]
[19 145]
[21 142]
[22 141]
[23 140]
[24 139]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 59]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[84 90]
[85 89]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% Start Annotations
16 148 0.0 1 colorpair
17 147 0.0 1 colorpair
18 146 0.0 1 colorpair
19 145 0.0 1 colorpair
21 142 0.0 1 colorpair
22 141 0.0 1 colorpair
23 140 0.0 1 colorpair
24 139 0.0 1 colorpair
31 109 0.0 1 colorpair
32 108 0.0 1 colorpair
33 107 0.0 1 colorpair
34 106 0.0 1 colorpair
35 105 0.0 1 colorpair
36 104 0.0 1 colorpair
37 74 0.0 1 colorpair
38 73 0.0 1 colorpair
39 72 0.0 1 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.0 1 colorpair
49 62 0.0 1 colorpair
52 59 0.0 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
110 125 0.0 1 colorpair
111 124 0.0 1 colorpair
112 123 0.0 1 colorpair
113 122 0.0 1 colorpair
114 121 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair
130 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
