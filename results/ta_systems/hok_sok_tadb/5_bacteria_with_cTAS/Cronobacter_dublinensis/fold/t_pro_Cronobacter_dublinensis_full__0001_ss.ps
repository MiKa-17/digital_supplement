%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:18:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUGCCACUCAAUUAUUUAAUCGCAUGUUUAAUUGUAGUCUGCGUAACGAUAUUAAUUUUCGCUUUAAUCAAACGGGGAACGUUAUGCGAGUUAACCAUAAGGAGCGGAAACAAGGAGGUGGCAGCUACGCUUGCCUGUAA___________\
) } def
/len { sequence length } bind def

/coor [
[21.77292252 300.07232666]
[7.23347902 303.76077271]
[-7.62337637 305.82809448]
[-22.61746216 306.24923706]
[-37.56693649 305.01907349]
[-52.29048920 302.15255737]
[-66.60955811 297.68441772]
[-80.35048676 291.66888428]
[-93.34662628 284.17886353]
[-105.44036102 275.30520630]
[-116.48502350 265.15554810]
[-126.34666443 253.85299683]
[-134.90568542 241.53457642]
[-142.05827332 228.34971619]
[-147.71768188 214.45832825]
[-151.81530762 200.02885437]
[-154.30142212 185.23631287]
[-155.14587402 170.26010132]
[-154.33843994 155.28184509]
[-151.88890076 140.48321533]
[-147.82698059 126.04365540]
[-142.20190430 112.13830566]
[-135.08193970 98.93581390]
[-126.55339813 86.59627533]
[-116.71973419 75.26936340]
[-105.70019531 65.09243774]
[-93.62843323 56.18892288]
[-80.65085602 48.66680145]
[-66.92483521 42.61729813]
[-52.61685562 38.11378098]
[-37.90043259 35.21086884]
[-22.95404625 33.94376755]
[-7.95896387 34.32784271]
[6.90295649 36.35844040]
[21.45147324 40.01092911]
[35.51014328 45.24101257]
[48.90846634 51.98526382]
[61.48395157 60.16188812]
[73.08408356 69.67172241]
[83.56817627 80.39942932]
[92.80410004 92.20775604]
[93.40045166 77.21961212]
[93.99679565 62.23147202]
[94.59314728 47.24333191]
[87.41060638 33.14646149]
[95.64778900 20.73686028]
[88.46524811 6.63999081]
[96.70242310 -5.76961088]
[97.29877472 -20.75775146]
[97.89511871 -35.74589157]
[83.31307220 -39.47988129]
[69.83135223 -46.16164780]
[58.03817368 -55.49694443]
[48.44751740 -67.07581329]
[41.47672272 -80.39058685]
[37.42833328 -94.85813141]
[36.47696686 -109.84541321]
[38.66177750 -124.69716644]
[43.88486099 -138.76457214]
[51.91563797 -151.43357849]
[62.40101624 -162.15170288]
[74.88093567 -170.45217896]
[88.80854797 -175.97418213]
[103.57416534 -178.47862244]
[104.17051697 -193.46676636]
[104.76686096 -208.45491028]
[105.36320496 -223.44305420]
[105.95955658 -238.43118286]
[91.50984192 -242.75050354]
[78.58868408 -250.52833557]
[68.00832367 -261.27575684]
[60.43385315 -274.31713867]
[56.34140015 -288.83273315]
[55.98822784 -303.91009521]
[59.39653397 -318.60137939]
[66.35207367 -331.98312378]
[76.41760254 -343.21414185]
[88.96041107 -351.58843994]
[103.19203949 -356.57962036]
[118.21787262 -357.87387085]
[133.09338379 -355.38989258]
[146.88346863 -349.28381348]
[158.72128296 -339.93945312]
[167.86270142 -327.94424438]
[173.73306274 -314.05215454]
[175.96336365 -299.13650513]
[174.41342163 -284.13488770]
[169.18063354 -269.99032593]
[160.59396362 -257.59194946]
[149.19316101 -247.71913147]
[135.69490051 -240.99247742]
[120.94770050 -237.83483887]
[120.35134888 -222.84669495]
[119.75500488 -207.85856628]
[119.15865326 -192.87042236]
[118.56230927 -177.88227844]
[133.08227539 -174.21261597]
[146.52713013 -167.60151672]
[158.30812073 -158.33575439]
[167.90879822 -146.81843567]
[174.90763855 -133.55143738]
[178.99655151 -119.11352539]
[179.99447632 -104.13513947]
[177.85537720 -89.27082062]
[172.67033386 -75.17065430]
[164.66372681 -62.45180893]
[154.18344116 -51.67152023]
[141.68585205 -43.30270386]
[127.71588135 -37.71318436]
[112.88326263 -35.14954376]
[112.28691101 -20.16140366]
[111.69056702 -5.17326307]
[118.91575623 7.85155487]
[110.63592529 21.33320808]
[117.86111450 34.35802460]
[109.58129120 47.83967972]
[108.98493958 62.82781982]
[108.38859558 77.81596375]
[107.79224396 92.80410004]
[114.94525909 105.98873138]
[130.76116943 106.39779663]
[137.74085999 119.55580902]
[150.63069153 127.22734070]
[163.52050781 134.89886475]
[176.41033936 142.57040405]
[189.30017090 150.24194336]
[202.26562500 157.78494263]
[215.30541992 165.19868469]
[230.47535706 160.76600647]
[244.29617310 168.43157959]
[248.56820679 183.64752197]
[240.75694275 197.38652039]
[225.49667358 201.49743652]
[211.84104919 193.54136658]
[207.89169312 178.23847961]
[194.85188293 170.82475281]
[187.44233704 170.24954224]
[181.62863159 163.13175964]
[168.73881531 155.46023560]
[155.84898376 147.78869629]
[142.95915222 140.11715698]
[130.06933594 132.44563293]
[115.17538452 132.58528137]
[107.27372742 118.87855530]
[112.13974762 133.06735229]
[115.41607666 147.70516968]
[117.06297302 162.61448669]
[117.06046295 177.61448669]
[115.40858459 192.52323914]
[112.12736511 207.15997314]
[107.25659180 221.34713745]
[100.85535431 234.91267395]
[93.00126648 247.69209290]
[83.78959656 259.53036499]
[73.33205414 270.28396606]
[61.75546265 279.82244873]
[49.20022964 288.03015137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[41 119]
[42 118]
[43 117]
[44 116]
[46 114]
[48 112]
[49 111]
[50 110]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[120 144]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 136]
[128 135]
] def

init

% Start Annotations
41 119 0.0 0.2 colorpair
42 118 0.16 0.2 colorpair
43 117 0.0 0.2 colorpair
44 116 0.16 1 colorpair
46 114 0.16 0.2 colorpair
48 112 0.0 1 colorpair
49 111 0.0 1 colorpair
50 110 0.16 1 colorpair
64 96 0.16 1 colorpair
65 95 0.0 1 colorpair
66 94 0.16 1 colorpair
67 93 0.16 0.2 colorpair
68 92 0.0 1 colorpair
120 144 0.16 1 colorpair
122 142 0.0 1 colorpair
123 141 0.16 1 colorpair
124 140 0.0 1 colorpair
125 139 0.0 0.2 colorpair
126 138 0.16 1 colorpair
127 136 0.0 1 colorpair
128 135 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
41 119 2 gmark
42 118 2 gmark
42 cmark
118 cmark
43 117 2 gmark
116 cmark
46 114 2 gmark
114 cmark
110 cmark
96 cmark
66 cmark
67 93 2 gmark
93 cmark
144 cmark
141 cmark
125 139 2 gmark
126 cmark
138 cmark
128 cmark
135 cmark

% End Annotations
showpage
end
%%EOF
