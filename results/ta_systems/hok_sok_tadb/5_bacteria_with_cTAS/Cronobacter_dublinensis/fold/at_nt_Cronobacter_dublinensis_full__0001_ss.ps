%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:18:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AUCUGUUCGCAUGCGUAUUAAUGGUCUGCGUCACGAUAUUAAUGUUCACUUUAAUGAAACGCGGUACGCUAUGCGAGUU_ACC_U_AGG_GCGG_AACAAGGAGGUGGC_GCU__GCUUGCCUGUAA_GACAGGUAAUGCUCUCC_GG_________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[-7.77337837 555.33489990]
[-22.31220436 551.64660645]
[-36.72534561 547.49426270]
[-50.99799347 542.88208008]
[-65.11547852 537.81481934]
[-79.06330109 532.29766846]
[-92.82711792 526.33630371]
[-106.39279175 519.93682861]
[-119.74639130 513.10589600]
[-132.87417603 505.85043335]
[-145.76268005 498.17791748]
[-158.39863586 490.09625244]
[-170.76907349 481.61373901]
[-182.86128235 472.73910522]
[-194.66282654 463.48144531]
[-206.16157532 453.85031128]
[-217.34573364 443.85552979]
[-228.20379639 433.50744629]
[-238.72460938 422.81665039]
[-248.89735413 411.79412842]
[-258.71157837 400.45123291]
[-268.15722656 388.79959106]
[-277.22454834 376.85119629]
[-285.90426636 364.61831665]
[-294.18740845 352.11352539]
[-302.06552124 339.34967041]
[-309.53048706 326.33984375]
[-316.57461548 313.09747314]
[-323.19070435 299.63610840]
[-329.37191772 285.96960449]
[-343.23010254 291.70986938]
[-357.08831787 297.45010376]
[-356.40231323 312.59295654]
[-360.93978882 327.05624390]
[-370.15283203 339.09350586]
[-382.92889404 347.25115967]
[-397.72525024 350.54415894]
[-412.75515747 348.57482910]
[-426.20364380 341.58099365]
[-436.44677734 330.40716553]
[-442.24761963 316.40267944]
[-442.90573120 301.25860596]
[-438.34158325 286.80368042]
[-429.10638428 274.78341675]
[-416.31527710 266.64932251]
[-401.51287842 263.38360596]
[-386.48666382 265.38064575]
[-373.05108643 272.39926147]
[-362.82855225 283.59191895]
[-348.97036743 277.85168457]
[-335.11218262 272.11141968]
[-340.40505981 258.07696533]
[-345.24539185 243.88008118]
[-349.62823486 229.53533936]
[-353.54901123 215.05749512]
[-357.00378418 200.46142578]
[-359.98892212 185.76211548]
[-362.50140381 170.97468567]
[-364.53860474 156.11431885]
[-366.09851074 141.19630432]
[-367.17944336 126.23594666]
[-367.78030396 111.24863434]
[-367.90051270 96.24975586]
[-367.53991699 81.25473785]
[-366.69888306 66.27898407]
[-365.37826538 51.33787537]
[-363.57946777 36.44677353]
[-361.30432129 21.62097549]
[-358.55514526 6.87571669]
[-355.33474731 -7.77384996]
[-351.64648438 -22.31267166]
[-347.49414062 -36.72580719]
[-342.88192749 -50.99845123]
[-337.81466675 -65.11592865]
[-332.29748535 -79.06374359]
[-326.33612061 -92.82756042]
[-319.93664551 -106.39322662]
[-313.10565186 -119.74681854]
[-305.85018921 -132.87460327]
[-298.17767334 -145.76309204]
[-290.09597778 -158.39903259]
[-281.61346436 -170.76947021]
[-272.73883057 -182.86166382]
[-263.48114014 -194.66319275]
[-253.84997559 -206.16194153]
[-243.85520935 -217.34608459]
[-233.50709534 -228.20414734]
[-222.81629944 -238.72494507]
[-211.79376221 -248.89767456]
[-200.45085144 -258.71191406]
[-188.79920959 -268.15753174]
[-176.85079956 -277.22485352]
[-164.61790466 -285.90454102]
[-152.11311340 -294.18768311]
[-139.34924316 -302.06576538]
[-126.33943176 -309.53073120]
[-113.09703827 -316.57482910]
[-99.63567352 -323.19091797]
[-85.96916962 -329.37210083]
[-72.11157227 -335.11212158]
[-58.07711792 -340.40499878]
[-43.88022614 -345.24536133]
[-29.53549194 -349.62817383]
[-15.05764961 -353.54898071]
[-0.46157712 -357.00375366]
[14.23772621 -359.98889160]
[29.02515602 -362.50137329]
[43.88551712 -364.53860474]
[58.80353928 -366.09848022]
[73.76389313 -367.17941284]
[88.75120544 -367.78030396]
[103.75007629 -367.90051270]
[118.74510193 -367.53991699]
[133.72085571 -366.69888306]
[148.66195679 -365.37829590]
[163.55307007 -363.57949829]
[178.37886047 -361.30435181]
[193.12413025 -358.55517578]
[207.77369690 -355.33480835]
[222.31251526 -351.64654541]
[236.72564697 -347.49417114]
[250.99829102 -342.88198853]
[265.11578369 -337.81472778]
[279.06359863 -332.29754639]
[292.82742310 -326.33618164]
[306.39309692 -319.93670654]
[319.74667358 -313.10574341]
[332.87445068 -305.85025024]
[345.76293945 -298.17773438]
[358.39889526 -290.09606934]
[370.76934814 -281.61355591]
[382.86154175 -272.73892212]
[394.66305542 -263.48126221]
[406.16183472 -253.85008240]
[417.34597778 -243.85531616]
[428.20404053 -233.50721741]
[438.72482300 -222.81640625]
[448.89758301 -211.79388428]
[458.71179199 -200.45097351]
[468.15744019 -188.79933167]
[477.22473145 -176.85093689]
[485.90444946 -164.61804199]
[494.18759155 -152.11325073]
[502.06570435 -139.34938049]
[509.53063965 -126.33956909]
[516.57476807 -113.09718323]
[523.19085693 -99.63581848]
[529.37207031 -85.96932220]
[535.11206055 -72.11172485]
[540.40496826 -58.07727051]
[545.24530029 -43.88038254]
[549.62811279 -29.53564644]
[553.54895020 -15.05780602]
[557.00372314 -0.46173477]
[559.98883057 14.23756695]
[562.50134277 29.02499580]
[564.53857422 43.88535690]
[566.09844971 58.80337906]
[567.17944336 73.76373291]
[567.78027344 88.75104523]
[567.90051270 103.74991608]
[567.53991699 118.74494171]
[566.69891357 133.72070312]
[565.37829590 148.66180420]
[563.57952881 163.55290222]
[561.30438232 178.37870789]
[558.55517578 193.12396240]
[555.33483887 207.77352905]
[551.64660645 222.31236267]
[547.49420166 236.72549438]
[542.88201904 250.99813843]
[537.81475830 265.11563110]
[532.29760742 279.06344604]
[526.33624268 292.82727051]
[519.93676758 306.39294434]
[513.10583496 319.74652100]
[505.85034180 332.87432861]
[498.17782593 345.76281738]
[490.09616089 358.39877319]
[481.61364746 370.76919556]
[472.73901367 382.86138916]
[463.48135376 394.66293335]
[453.85018921 406.16171265]
[443.85543823 417.34585571]
[433.50732422 428.20391846]
[422.81652832 438.72473145]
[411.79400635 448.89746094]
[400.45111084 458.71170044]
[388.79946899 468.15731812]
[376.85107422 477.22463989]
[364.61816406 485.90435791]
[352.11337280 494.18750000]
[339.34951782 502.06561279]
[326.33972168 509.53054810]
[313.09732056 516.57470703]
[299.63595581 523.19079590]
[285.96945190 529.37200928]
[272.11187744 535.11199951]
[258.07742310 540.40490723]
[243.88053894 545.24523926]
[229.53579712 549.62811279]
[215.05796814 553.54888916]
[200.46189880 557.00366211]
[185.76258850 559.98883057]
[170.97515869 562.50134277]
[156.11480713 564.53857422]
[141.19677734 566.09844971]
[126.23642731 567.17938232]
[111.24911499 567.78027344]
[96.25024414 567.90051270]
[81.25522614 567.53991699]
[66.27946472 566.69891357]
[51.33835602 565.37835693]
[36.44725418 563.57952881]
[21.62145233 561.30438232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 51]
[31 50]
[32 49]
] def

init

% Start Annotations
30 51 0.0 1 colorpair
31 50 0.16 0.6 colorpair
32 49 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
31 50 1 gmark
31 cmark
50 cmark
32 cmark
49 cmark

% End Annotations
showpage
end
%%EOF
