%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:24:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____________________AAUGCCAAAAAAAACUAUGCUAUGGGGCGUGUUUAUUAUUUGUCUGACGAUAUUGAUCUUCACCUUGAUGACGCGCGACACGCUGUGCGAGAUGCGAUUCAGGAAUGAAAAACAGGAGGUGGCGGCGAUGUUGGCUUACGAAGC___AGGA___\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50814056 91.95843506]
[62.54560471 90.87597656]
[47.63190079 89.25404358]
[32.78647995 87.09474945]
[18.02868843 84.40090179]
[3.37777352 81.17601776]
[-11.14716434 77.42430115]
[-25.52718735 73.15065002]
[-39.74354553 68.36062622]
[-53.77770615 63.06048584]
[-67.61136627 57.25712967]
[-81.22650146 50.95812988]
[-94.60534668 44.17169571]
[-107.73046112 36.90667343]
[-120.58473206 29.17254257]
[-133.15141296 20.97938156]
[-145.41409302 12.33787537]
[-157.35681152 3.25928903]
[-168.96398926 -6.24454021]
[-180.22047424 -16.16122055]
[-191.11161804 -26.47782326]
[-201.62319946 -37.18089676]
[-211.74151611 -48.25648880]
[-221.45338440 -59.69015503]
[-230.74615479 -71.46698761]
[-239.60768127 -83.57164001]
[-248.02641296 -95.98831940]
[-255.99139404 -108.70084381]
[-263.49224854 -121.69262695]
[-270.51913452 -134.94674683]
[-277.06295776 -148.44592285]
[-283.11517334 -162.17253113]
[-288.66787720 -176.10870361]
[-293.71380615 -190.23625183]
[-298.24642944 -204.53675842]
[-302.25982666 -218.99157715]
[-305.74871826 -233.58187866]
[-308.70861816 -248.28862000]
[-311.13562012 -263.09262085]
[-313.02661133 -277.97460938]
[-314.37905884 -292.91516113]
[-315.19125366 -307.89480591]
[-315.46209717 -322.89398193]
[-315.19128418 -337.89318848]
[-314.37911987 -352.87283325]
[-313.02667236 -367.81338501]
[-311.13574219 -382.69537354]
[-308.70877075 -397.49938965]
[-305.74890137 -412.20611572]
[-302.26000977 -426.79641724]
[-298.24667358 -441.25125122]
[-293.71408081 -455.55178833]
[-288.66815186 -469.67932129]
[-283.11550903 -483.61550903]
[-277.06332397 -497.34213257]
[-270.51953125 -510.84130859]
[-263.49264526 -524.09545898]
[-255.99182129 -537.08728027]
[-248.02687073 -549.79980469]
[-239.60815430 -562.21649170]
[-230.74664307 -574.32116699]
[-221.45390320 -586.09802246]
[-211.74206543 -597.53167725]
[-201.62376404 -608.60729980]
[-191.11219788 -619.31042480]
[-180.22108459 -629.62701416]
[-168.96459961 -639.54376221]
[-157.35745239 -649.04760742]
[-145.41476440 -658.12622070]
[-133.15208435 -666.76770020]
[-120.58542633 -674.96093750]
[-107.73117065 -682.69506836]
[-94.60607147 -689.96014404]
[-81.22723389 -696.74658203]
[-67.61212158 -703.04559326]
[-53.77846909 -708.84899902]
[-39.74431992 -714.14916992]
[-25.52796936 -718.93920898]
[-11.14795399 -723.21289062]
[3.37697625 -726.96466064]
[18.02788544 -730.18951416]
[32.78567123 -732.88342285]
[47.63108826 -735.04272461]
[62.54478836 -736.66473389]
[77.50732422 -737.74719238]
[92.49918365 -738.28881836]
[107.50081635 -738.28881836]
[122.49267578 -737.74719238]
[137.45521545 -736.66473389]
[152.36891174 -735.04272461]
[167.21432495 -732.88342285]
[181.97212219 -730.18951416]
[196.62301636 -726.96466064]
[211.14794922 -723.21289062]
[225.52796936 -718.93920898]
[239.74432373 -714.14916992]
[253.77847290 -708.84899902]
[267.61212158 -703.04559326]
[281.22723389 -696.74658203]
[294.60607910 -689.96014404]
[307.73117065 -682.69506836]
[320.58541870 -674.96093750]
[333.15209961 -666.76770020]
[345.41476440 -658.12622070]
[357.35745239 -649.04760742]
[368.96459961 -639.54376221]
[380.22106934 -629.62701416]
[391.11218262 -619.31042480]
[401.62374878 -608.60729980]
[411.74206543 -597.53167725]
[421.45391846 -586.09802246]
[430.74664307 -574.32116699]
[439.60815430 -562.21649170]
[448.02685547 -549.79980469]
[455.99182129 -537.08728027]
[463.49264526 -524.09545898]
[470.51953125 -510.84130859]
[477.06332397 -497.34213257]
[483.11550903 -483.61550903]
[488.66815186 -469.67932129]
[493.71408081 -455.55178833]
[498.24667358 -441.25125122]
[502.26000977 -426.79641724]
[505.74890137 -412.20611572]
[508.70877075 -397.49938965]
[511.13574219 -382.69537354]
[513.02667236 -367.81338501]
[514.37908936 -352.87283325]
[515.19128418 -337.89318848]
[515.46209717 -322.89398193]
[515.19122314 -307.89480591]
[514.37902832 -292.91516113]
[513.02661133 -277.97460938]
[511.13562012 -263.09262085]
[508.70861816 -248.28862000]
[505.74871826 -233.58187866]
[502.25982666 -218.99157715]
[498.24642944 -204.53675842]
[493.71380615 -190.23625183]
[488.66787720 -176.10870361]
[483.11517334 -162.17253113]
[477.06295776 -148.44592285]
[470.51913452 -134.94674683]
[463.49224854 -121.69262695]
[455.99139404 -108.70084381]
[448.02642822 -95.98831940]
[439.60766602 -83.57164001]
[430.74615479 -71.46698761]
[421.45339966 -59.69015503]
[411.74151611 -48.25648880]
[401.62319946 -37.18089676]
[391.11160278 -26.47782326]
[380.22048950 -16.16122055]
[368.96398926 -6.24454021]
[357.35681152 3.25928903]
[345.41409302 12.33787537]
[333.15139771 20.97938156]
[320.58474731 29.17254257]
[307.73046875 36.90667343]
[294.60534668 44.17169571]
[281.22650146 50.95812988]
[267.61135864 57.25712967]
[253.77770996 63.06048584]
[239.74354553 68.36062622]
[225.52719116 73.15065002]
[211.14717102 77.42430115]
[196.62222290 81.17601776]
[181.97131348 84.40090179]
[167.21351624 87.09474945]
[152.36810303 89.25404358]
[137.45439148 90.87597656]
[122.49185944 91.95843506]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
