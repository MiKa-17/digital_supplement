%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:24:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______________________AUGCCA__AA_AAAAACUAUGCUAUGGGGCUUGUUUAUUAUUUGUCUGACGCUGUUGAUCUUCACCUGGAUGACGCGCAACACGCUGUGCGAGUUGCGCUUCAGAAACGAAAAACGGGAGGUGGCGGCGAUGUUGGCUUACGAAGCAGG_______\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50777435 91.97059631]
[62.54357910 90.91242981]
[47.62604523 89.32681274]
[32.77376175 87.21572113]
[18.00523758 84.58178711]
[3.33886647 81.42829132]
[-11.20707607 77.75915527]
[-25.61446953 73.57896423]
[-39.86536026 68.89291382]
[-53.94199753 63.70685196]
[-67.82684326 58.02723312]
[-81.50259399 51.86113358]
[-94.95221710 45.21623993]
[-108.15895844 38.10082626]
[-121.10635376 30.52376175]
[-133.77827454 22.49448395]
[-146.15893555 14.02299690]
[-158.23292542 5.11985540]
[-169.98518372 -4.20384932]
[-181.40106201 -13.93650055]
[-192.46636963 -24.06597137]
[-203.16728210 -34.57964325]
[-213.49049377 -45.46442032]
[-223.42312622 -56.70673370]
[-232.95283508 -68.29258728]
[-242.06770325 -80.20753479]
[-250.75640869 -92.43673706]
[-259.00811768 -104.96496582]
[-266.81253052 -117.77659607]
[-274.15994263 -130.85568237]
[-281.04119873 -144.18591309]
[-287.44775391 -157.75070190]
[-293.37155151 -171.53312683]
[-298.80529785 -185.51603699]
[-303.74215698 -199.68199158]
[-308.17599487 -214.01335144]
[-312.10131836 -228.49226379]
[-315.51321411 -243.10069275]
[-318.40740967 -257.82043457]
[-320.78033447 -272.63311768]
[-322.62902832 -287.52035522]
[-323.95117188 -302.46353149]
[-324.74511719 -317.44409180]
[-325.00988770 -332.44329834]
[-324.74514771 -347.44253540]
[-323.95120239 -362.42306519]
[-322.62908936 -377.36627197]
[-320.78045654 -392.25350952]
[-318.40756226 -407.06619263]
[-315.51336670 -421.78594971]
[-312.10150146 -436.39437866]
[-308.17620850 -450.87329102]
[-303.74240112 -465.20465088]
[-298.80557251 -479.37063599]
[-293.37185669 -493.35354614]
[-287.44805908 -507.13598633]
[-281.04156494 -520.70080566]
[-274.16030884 -534.03100586]
[-266.81292725 -547.11010742]
[-259.00851440 -559.92175293]
[-250.75685120 -572.45001221]
[-242.06816101 -584.67926025]
[-232.95330811 -596.59417725]
[-223.42364502 -608.18005371]
[-213.49102783 -619.42242432]
[-203.16783142 -630.30718994]
[-192.46693420 -640.82086182]
[-181.40165710 -650.95037842]
[-169.98577881 -660.68304443]
[-158.23355103 -670.00677490]
[-146.15957642 -678.90991211]
[-133.77893066 -687.38146973]
[-121.10701752 -695.41076660]
[-108.15963745 -702.98785400]
[-94.95291901 -710.10327148]
[-81.50330353 -716.74816895]
[-67.82756042 -722.91430664]
[-53.94272995 -728.59399414]
[-39.86610031 -733.78002930]
[-25.61521721 -738.46612549]
[-11.20783234 -742.64636230]
[3.33810401 -746.31549072]
[18.00446892 -749.46905518]
[32.77299118 -752.10296631]
[47.62526703 -754.21411133]
[62.54279709 -755.79974365]
[77.50699615 -756.85797119]
[92.49921417 -757.38739014]
[107.50078583 -757.38739014]
[122.49300385 -756.85797119]
[137.45719910 -755.79974365]
[152.37472534 -754.21411133]
[167.22700500 -752.10296631]
[181.99552917 -749.46905518]
[196.66189575 -746.31549072]
[211.20782471 -742.64636230]
[225.61521912 -738.46612549]
[239.86610413 -733.78002930]
[253.94273376 -728.59399414]
[267.82757568 -722.91430664]
[281.50329590 -716.74816895]
[294.95291138 -710.10327148]
[308.15963745 -702.98785400]
[321.10702515 -695.41076660]
[333.77893066 -687.38146973]
[346.15957642 -678.90991211]
[358.23355103 -670.00677490]
[369.98577881 -660.68304443]
[381.40164185 -650.95037842]
[392.46691895 -640.82086182]
[403.16784668 -630.30718994]
[413.49102783 -619.42242432]
[423.42364502 -608.18005371]
[432.95330811 -596.59417725]
[442.06817627 -584.67926025]
[450.75683594 -572.45001221]
[459.00851440 -559.92175293]
[466.81292725 -547.11010742]
[474.16030884 -534.03100586]
[481.04156494 -520.70080566]
[487.44805908 -507.13598633]
[493.37185669 -493.35354614]
[498.80557251 -479.37063599]
[503.74240112 -465.20465088]
[508.17620850 -450.87329102]
[512.10150146 -436.39437866]
[515.51336670 -421.78594971]
[518.40753174 -407.06619263]
[520.78045654 -392.25350952]
[522.62908936 -377.36627197]
[523.95123291 -362.42306519]
[524.74511719 -347.44253540]
[525.00988770 -332.44329834]
[524.74511719 -317.44409180]
[523.95117188 -302.46353149]
[522.62902832 -287.52035522]
[520.78033447 -272.63311768]
[518.40740967 -257.82043457]
[515.51318359 -243.10069275]
[512.10131836 -228.49226379]
[508.17599487 -214.01335144]
[503.74215698 -199.68199158]
[498.80529785 -185.51603699]
[493.37155151 -171.53312683]
[487.44775391 -157.75070190]
[481.04119873 -144.18591309]
[474.15994263 -130.85568237]
[466.81253052 -117.77659607]
[459.00811768 -104.96496582]
[450.75640869 -92.43673706]
[442.06771851 -80.20753479]
[432.95281982 -68.29258728]
[423.42312622 -56.70673370]
[413.49050903 -45.46442032]
[403.16729736 -34.57964325]
[392.46636963 -24.06597137]
[381.40106201 -13.93650055]
[369.98516846 -4.20384932]
[358.23291016 5.11985540]
[346.15893555 14.02299690]
[333.77828979 22.49448395]
[321.10635376 30.52376175]
[308.15896606 38.10082626]
[294.95220947 45.21623993]
[281.50259399 51.86113358]
[267.82684326 58.02723312]
[253.94200134 63.70685196]
[239.86535645 68.89291382]
[225.61447144 73.57896423]
[211.20707703 77.75915527]
[196.66113281 81.42829132]
[181.99476624 84.58178711]
[167.22624207 87.21572113]
[152.37394714 89.32681274]
[137.45642090 90.91242981]
[122.49222565 91.97059631]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
