%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___A_GCCAAAAAAAACUGCGUUAUGAAGUUUGUUUCUU_U_UG__UGACGAUAAUGAUCUUAACCUUGAUGACCCGCGAUACGCUGUGCGAGUUCCAUUUAAGAAACGAAAAACAAGAGGUGGCGGCAAAGUUGGCUUGCAACCCAG_____\
) } def
/len { sequence length } bind def

/coor [
[77.72853851 385.82705688]
[65.28399658 377.38284302]
[54.49497223 366.90582275]
[45.68932343 354.71438599]
[39.13465118 341.17895508]
[35.03013992 326.71093750]
[33.50052261 311.74993896]
[34.59228134 296.75061035]
[38.27223969 282.16882324]
[44.42856598 268.44763184]
[52.87418365 256.00405884]
[63.35242844 245.21621704]
[75.54489136 236.41195679]
[89.08104706 229.85881042]
[103.54954529 225.75595093]
[102.02220154 210.83390808]
[100.49485779 195.91186523]
[98.96751404 180.98983765]
[97.44017029 166.06779480]
[88.44715118 154.19450378]
[94.73906708 139.67822266]
[93.21171570 124.75618744]
[91.68437195 109.83415222]
[92.85507202 124.78839874]
[91.29814148 139.70738220]
[87.06507874 154.09768677]
[80.29586792 167.48342896]
[71.21440125 179.42189026]
[60.12099838 189.51824951]
[47.38254929 197.43859863]
[33.42034149 202.92098999]
[18.69612885 205.78413391]
[3.69687080 205.93331909]
[-11.08137798 203.36361694]
[-25.14987183 198.16001892]
[-38.04333878 190.49461365]
[-49.33536911 180.62091064]
[-58.65250778 168.86544800]
[-65.68662262 155.61700439]
[-70.20508575 141.31373596]
[-72.05845642 126.42867279]
[-71.18544006 111.45410156]
[-67.61490631 96.88525391]
[-61.46495056 83.20394897]
[-52.93895721 70.86266327]
[-42.31889725 60.26953506]
[-29.95599556 51.77490616]
[-16.25911903 45.65970993]
[-1.68125212 42.12619019]
[13.29549026 41.29120255]
[28.17579651 43.18236542]
[42.46754456 47.73713303]
[55.69808197 54.80487061]
[67.42984772 64.15183258]
[77.27484894 75.46889496]
[84.90633392 88.37935638]
[77.58369446 75.28817749]
[70.26104736 62.19700241]
[62.93840790 49.10582733]
[55.61576462 36.01465225]
[40.19186020 34.31674957]
[28.73434067 23.85229111]
[25.64885521 8.64507580]
[32.12183380 -5.45741272]
[45.66428375 -13.03247929]
[61.06885910 -11.16735744]
[72.41218567 -0.57922328]
[75.33251953 14.66056919]
[68.70693970 28.69200706]
[76.02957916 41.78318405]
[83.35222626 54.87435913]
[90.67486572 67.96553802]
[97.99751282 81.05671692]
[105.21488953 83.09619904]
[105.06491089 68.09694672]
[101.94513702 53.42496490]
[110.57216644 41.15409470]
[125.43418884 39.12421036]
[137.03582764 48.63220978]
[137.96478271 63.60341644]
[127.62756348 74.47270203]
[119.64963531 87.17516327]
[126.86701202 89.21465302]
[139.95819092 81.89200592]
[153.04936218 74.56936646]
[166.14053345 67.24671936]
[163.76821899 52.29354858]
[166.64956665 37.45880127]
[174.41790771 24.52925491]
[186.11909485 15.05548477]
[200.32872009 10.16591263]
[215.32550049 10.43242836]
[229.29977417 15.80356693]
[240.57182312 25.61304855]
[253.66300964 18.29040527]
[266.75418091 10.96776295]
[279.84536743 3.64511991]
[279.37335205 -11.65310860]
[286.07528687 -25.41329765]
[298.41107178 -34.47345352]
[313.54608154 -36.75162506]
[328.00238037 -31.72429848]
[338.45803833 -20.54672050]
[342.51037598 -5.78741503]
[339.22821045 9.16203690]
[329.36581421 20.86635971]
[315.18942261 26.63598824]
[299.95669556 25.14510155]
[287.16799927 16.73629570]
[274.07681274 24.05893898]
[260.98565674 31.38158226]
[247.89447021 38.70422363]
[250.35375977 53.44319534]
[247.61686707 68.16183472]
[239.99513245 81.08018494]
[228.39183044 90.62925720]
[214.19514465 95.64165497]
[199.11209106 95.49419403]
[184.96328735 90.18538666]
[173.46318054 80.33789825]
[160.37200928 87.66053772]
[147.28083801 94.98318481]
[134.18965149 102.30582428]
[124.83228302 108.91102600]
[115.03661346 110.77412415]
[106.60641479 108.30680847]
[108.13375854 123.22884369]
[109.66110229 138.15087891]
[118.76336670 151.09149170]
[112.36220551 164.54045105]
[113.88954926 179.46249390]
[115.41689301 194.38452148]
[116.94423676 209.30656433]
[118.47158813 224.22860718]
[133.47126770 225.31526184]
[148.05432129 228.99024963]
[161.77758789 235.14192200]
[174.22404480 243.58329773]
[185.01544189 254.05787659]
[193.82385254 266.24734497]
[200.38160706 279.78125000]
[204.48939514 294.24835205]
[206.02239990 309.20901489]
[204.93405151 324.20855713]
[201.25740051 338.79119873]
[195.10418701 352.51379395]
[186.66139221 364.95928955]
[176.18559265 375.74948120]
[163.99513245 384.55651855]
[150.46046448 391.11273193]
[135.99288940 395.21887207]
[121.03206635 396.75018311]
[106.03263092 395.66012573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[21 128]
[22 127]
[23 126]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[83 123]
[84 122]
[85 121]
[86 120]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% Start Annotations
15 134 0.0 0.2 colorpair
16 133 0.16 1 colorpair
17 132 0.0 0.2 colorpair
18 131 0.16 0.2 colorpair
19 130 0.16 0.2 colorpair
21 128 0.0 1 colorpair
22 127 0.16 1 colorpair
23 126 0.16 1 colorpair
56 73 0.16 1 colorpair
57 72 0.16 0.2 colorpair
58 71 0.0 1 colorpair
59 70 0.16 1 colorpair
60 69 0.0 0.2 colorpair
83 123 0.0 0.2 colorpair
84 122 0.16 1 colorpair
85 121 0.16 1 colorpair
86 120 0.16 1 colorpair
94 112 0.16 0.2 colorpair
95 111 0.16 0.2 colorpair
96 110 0.16 0.2 colorpair
97 109 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 134 2 gmark
16 cmark
133 cmark
17 132 2 gmark
18 131 2 gmark
18 cmark
131 cmark
19 130 2 gmark
19 cmark
130 cmark
22 cmark
126 cmark
73 cmark
57 72 2 gmark
57 cmark
72 cmark
70 cmark
60 69 2 gmark
83 123 2 gmark
84 cmark
85 cmark
121 cmark
120 cmark
94 112 2 gmark
94 cmark
112 cmark
95 111 2 gmark
111 cmark
96 110 2 gmark
96 cmark
110 cmark
97 cmark

% End Annotations
showpage
end
%%EOF
