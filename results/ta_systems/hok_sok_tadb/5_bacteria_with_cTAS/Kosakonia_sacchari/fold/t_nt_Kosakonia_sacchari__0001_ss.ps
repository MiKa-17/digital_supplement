%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:15:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUACUCUACAUGUGACUAGCAUAUAGACAGGCCUCGUUGGUUAAUUGAAAAAUGACCUUCGGGGCUUUCUUCUUUCUGCCGCACAACUUUUUACCGUCAUGAGGCAAAAAGCCUCAAGCGCCACCCGCAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[65.14632416 79.40967560]
[53.86872482 69.51948547]
[42.59112549 59.62929916]
[31.31352997 49.73911285]
[20.03593254 39.84892273]
[8.75833607 29.95873642]
[-2.51926136 20.06855011]
[-13.79685879 10.17836285]
[-25.07445526 0.28817552]
[-23.27663803 15.18004704]
[-28.86374474 29.10068893]
[-40.45811081 38.61754990]
[-55.20080185 41.38397217]
[-69.45656586 36.71780777]
[-79.71023560 25.76963997]
[-83.43344879 11.23906231]
[-79.70814514 -3.29097962]
[-69.45290375 -14.23767376]
[-55.19646835 -18.90178871]
[-40.45528412 -16.13376617]
[-49.58670425 -28.03406715]
[-58.71812439 -39.93436813]
[-67.84954834 -51.83466721]
[-79.80347443 -51.06573868]
[-90.51958466 -56.14350891]
[-97.35448456 -65.68619537]
[-98.68521118 -77.22730255]
[-94.29328918 -87.85260773]
[-102.89693451 -100.13988495]
[-111.50057983 -112.42716980]
[-126.90012360 -112.82744598]
[-138.97007751 -122.11020660]
[-143.20945740 -136.54945374]
[-138.19355774 -150.54869080]
[-146.79721069 -162.83596802]
[-155.40084839 -175.12324524]
[-174.01911926 -182.72009277]
[-175.05097961 -201.98437500]
[-184.18240356 -213.88467407]
[-193.31382751 -225.78497314]
[-202.44525146 -237.68527222]
[-211.57667542 -249.58557129]
[-220.70808411 -261.48587036]
[-229.83950806 -273.38616943]
[-238.97093201 -285.28646851]
[-254.39158630 -287.48678589]
[-263.48260498 -299.68548584]
[-261.28991699 -314.37313843]
[-270.42132568 -326.27343750]
[-279.55276489 -338.17373657]
[-288.68417358 -350.07403564]
[-297.81561279 -361.97433472]
[-305.58361816 -366.92593384]
[-307.01303101 -374.23532104]
[-315.88269043 -386.33200073]
[-331.10275269 -392.43783569]
[-333.15679932 -408.70782471]
[-319.93179321 -418.40481567]
[-305.03250122 -411.55334473]
[-303.78601074 -395.20162964]
[-294.91638184 -383.10494995]
[-285.91531372 -371.10577393]
[-276.78387451 -359.20547485]
[-267.65246582 -347.30517578]
[-258.52102661 -335.40487671]
[-249.38961792 -323.50457764]
[-234.63490295 -321.82110596]
[-225.20481873 -309.88259888]
[-227.07063293 -294.41790771]
[-217.93920898 -282.51760864]
[-208.80778503 -270.61730957]
[-199.67636108 -258.71701050]
[-190.54495239 -246.81669617]
[-181.41352844 -234.91639709]
[-172.28210449 -223.01609802]
[-163.15068054 -211.11579895]
[-152.84915161 -210.68200684]
[-144.33285522 -204.48696899]
[-140.59454346 -194.40608215]
[-143.11357117 -183.72689819]
[-134.50991821 -171.43962097]
[-125.90628052 -159.15234375]
[-111.03575897 -159.07771301]
[-98.91726685 -150.15548706]
[-94.32248688 -135.63854980]
[-99.21330261 -121.03081512]
[-90.60965729 -108.74353027]
[-82.00600433 -96.45625305]
[-63.86828232 -94.42548370]
[-52.72279739 -79.57413483]
[-55.94924545 -60.96608734]
[-46.81782532 -49.06578827]
[-37.68640518 -37.16548920]
[-28.55498314 -25.26518822]
[-19.14690018 -21.63420105]
[-15.18426800 -10.98942184]
[-3.90667129 -1.09923434]
[7.37092590 8.79095268]
[18.64852333 18.68114090]
[29.92612076 28.57132721]
[41.20371628 38.46151352]
[52.48131561 48.35170364]
[63.75891113 58.24188995]
[75.03650665 68.13207245]
[92.90518951 60.14521027]
[112.43238068 61.47499084]
[129.05332947 71.81055450]
[138.88262939 88.73582458]
[139.62254333 108.29425049]
[153.48072815 114.03450775]
[167.33892822 119.77475739]
[181.19712830 125.51500702]
[195.05531311 131.25526428]
[208.91351318 136.99551392]
[224.22595215 132.20922852]
[237.43391418 141.31578064]
[238.40538025 157.32939148]
[226.39512634 167.96578979]
[210.61637878 165.06565857]
[203.17324829 150.85369873]
[189.31506348 145.11344910]
[175.45686340 139.37319946]
[161.59867859 133.63294983]
[147.74047852 127.89270020]
[133.88229370 122.15244293]
[130.43550110 126.69121552]
[126.38545227 130.70094299]
[133.88545227 143.69132996]
[141.38545227 156.68171692]
[156.44734192 162.20613098]
[161.38221741 177.47132874]
[152.40444946 190.76718140]
[136.40103149 191.89422607]
[125.64841461 179.98789978]
[128.39508057 164.18171692]
[120.89507294 151.19132996]
[113.39507294 138.20094299]
[101.29702759 140.46057129]
[89.07909393 138.98043823]
[77.87057495 133.89733887]
[68.70748901 125.68109894]
[62.43675995 115.09117126]
[59.63800049 103.10636139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[20 94]
[21 93]
[22 92]
[23 91]
[28 88]
[29 87]
[30 86]
[34 82]
[35 81]
[36 80]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[54 61]
[55 60]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[127 137]
[128 136]
[129 135]
] def

init

% Start Annotations
1 104 0.0 1 colorpair
2 103 0.0 1 colorpair
3 102 0.0 1 colorpair
4 101 0.0 1 colorpair
5 100 0.0 1 colorpair
6 99 0.0 1 colorpair
7 98 0.0 1 colorpair
8 97 0.0 1 colorpair
9 96 0.0 1 colorpair
20 94 0.0 1 colorpair
21 93 0.0 1 colorpair
22 92 0.0 1 colorpair
23 91 0.0 1 colorpair
28 88 0.0 1 colorpair
29 87 0.0 1 colorpair
30 86 0.0 1 colorpair
34 82 0.0 1 colorpair
35 81 0.0 1 colorpair
36 80 0.0 1 colorpair
38 76 0.0 1 colorpair
39 75 0.0 1 colorpair
40 74 0.0 1 colorpair
41 73 0.0 1 colorpair
42 72 0.0 1 colorpair
43 71 0.0 1 colorpair
44 70 0.0 1 colorpair
45 69 0.0 1 colorpair
48 66 0.0 1 colorpair
49 65 0.0 1 colorpair
50 64 0.0 1 colorpair
51 63 0.0 1 colorpair
52 62 0.0 1 colorpair
54 61 0.0 1 colorpair
55 60 0.0 1 colorpair
109 125 0.0 1 colorpair
110 124 0.0 1 colorpair
111 123 0.0 1 colorpair
112 122 0.0 1 colorpair
113 121 0.0 1 colorpair
114 120 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
