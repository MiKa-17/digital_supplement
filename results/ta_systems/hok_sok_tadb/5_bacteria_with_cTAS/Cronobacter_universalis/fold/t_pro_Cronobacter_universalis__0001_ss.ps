%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:21:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUACUGCAAAAUACACUGAUCUGGUG__UAUUAAUGGUCUGUGUAACUAUAUUAAUGUUCACAUUACUGAAACGGGAUACGCUAUGCGAGCUUAGCAUCAGGGGCGGCAGUCAGGAGGUGGCGGCUUAGCUGGCUUGUAAAUCCGGUAAG\
) } def
/len { sequence length } bind def

/coor [
[54.32805634 459.58932495]
[41.89797592 451.19329834]
[30.99711418 440.88937378]
[21.91512108 428.95129395]
[14.89332294 415.69631958]
[10.11830235 401.47665405]
[7.71693993 386.67010498]
[7.75304413 371.67016602]
[10.22565556 356.87536621]
[15.06907177 342.67883301]
[22.15459633 329.45779419]
[31.29395103 317.56359863]
[42.24428940 307.31225586]
[54.71464157 298.97616577]
[68.37364960 292.77685547]
[82.85836029 288.87902832]
[97.78389740 287.38626099]
[112.75365448 288.33819580]
[127.36987305 291.70959473]
[141.24415588 297.41085815]
[154.00785828 305.29043579]
[165.32460022 315.14190674]
[160.88961792 300.81253052]
[156.45463562 286.48315430]
[152.01965332 272.15377808]
[147.58467102 257.82440186]
[142.86386108 243.58663940]
[137.85911560 229.44618225]
[132.85437012 215.30572510]
[115.49114990 218.89006042]
[97.78919983 219.87466431]
[80.13558197 218.23800659]
[62.91633987 214.01588440]
[46.50799179 207.30062866]
[31.26932907 198.23907471]
[17.53357315 187.02935791]
[5.60108089 173.91661072]
[-4.26722765 159.18754578]
[-11.85556507 143.16426086]
[-16.99800110 126.19712067]
[-19.58208656 108.65713501]
[-19.55131531 90.92784119]
[-16.90636444 73.39692688]
[-11.70506573 56.44773865]
[-4.06115532 40.45088577]
[5.85821915 25.75617027]
[-5.31569242 15.74898720]
[-16.48960304 5.74180508]
[-27.66351509 -4.26537752]
[-41.01678085 2.90860748]
[-56.01884079 5.07979012]
[-70.85812378 1.98598933]
[-83.74270630 -5.99920321]
[-93.11671448 -17.91153717]
[-97.84819794 -32.31253815]
[-97.36580658 -47.46321869]
[-91.72778320 -61.53405762]
[-81.61495209 -72.82593536]
[-68.24848938 -79.97529602]
[-53.24245453 -82.11882782]
[-38.40890121 -78.99768829]
[-25.53905678 -70.98876190]
[-16.18701172 -59.05917740]
[-11.48207569 -44.64947891]
[-11.99238968 -29.49971390]
[-17.65633202 -15.43928909]
[-6.48242140 -5.43210649]
[4.69149017 4.57507610]
[15.86540222 14.58225822]
[21.96796799 8.97350216]
[28.44346237 3.79977608]
[35.26093674 -0.91419482]
[42.38780594 -5.14588118]
[49.79001617 -8.87506008]
[57.43218613 -12.08390713]
[65.27779388 -14.75708961]
[73.28934479 -16.88183022]
[81.42855072 -18.44797325]
[89.65650940 -19.44803619]
[97.93390656 -19.87723923]
[106.22116852 -19.73353004]
[114.47870636 -19.01759720]
[122.66704559 -17.73285866]
[130.74705505 -15.88545895]
[138.68013000 -13.48422432]
[146.42832947 -10.54063129]
[153.09068298 -23.97986412]
[159.75305176 -37.41909790]
[161.37089539 -54.29567719]
[178.03579712 -57.41295242]
[185.64456177 -42.26226807]
[173.19227600 -30.75674057]
[166.52992249 -17.31750679]
[159.86756897 -3.87827373]
[172.86215210 4.78483438]
[184.62043762 15.06353283]
[194.94288635 26.78341293]
[203.65437317 39.74561691]
[210.60708618 53.73020554]
[215.68302917 68.49988556]
[218.79609680 83.80405426]
[219.89344788 99.38303375]
[218.95648193 114.97248077]
[216.00109863 130.30787659]
[211.07742310 145.12901306]
[204.26901245 159.18441772]
[195.69137573 172.23559570]
[185.49008179 184.06108093]
[173.83821106 194.46025085]
[160.93347168 203.25663757]
[146.99482727 210.30097961]
[151.99957275 224.44143677]
[157.00431824 238.58189392]
[161.84017944 243.22219849]
[163.33815002 248.77742004]
[161.91404724 253.38943481]
[166.34902954 267.71881104]
[170.78401184 282.04818726]
[175.21899414 296.37753296]
[179.65397644 310.70690918]
[184.76667786 314.83770752]
[187.04533386 320.42312622]
[199.67150879 328.52124023]
[212.29768372 336.61938477]
[224.92385864 344.71752930]
[237.55003357 352.81564331]
[250.25659180 360.78704834]
[263.04226685 368.63092041]
[278.35140991 364.70590210]
[291.90927124 372.82748413]
[295.67221069 388.17724609]
[287.40777588 401.64849854]
[272.01904297 405.24893188]
[258.63595581 396.84252930]
[255.19839478 381.41659546]
[242.41271973 373.57272339]
[235.02539062 372.75100708]
[229.45188904 365.44183350]
[216.82572937 357.34368896]
[204.19955444 349.24554443]
[191.57337952 341.14743042]
[178.94720459 333.04928589]
[185.41993713 346.58087158]
[189.60823059 360.98428345]
[191.40083313 375.87680054]
[190.75007629 390.86267090]
[187.67327881 405.54373169]
[182.25218201 419.52984619]
[174.63082886 432.44940186]
[165.01173401 443.95910645]
[153.65051270 453.75311279]
[140.84902954 461.57116699]
[126.94746399 467.20556641]
[112.31518555 470.50656128]
[97.34101868 471.38644409]
[82.42283630 469.82183838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 113]
[28 112]
[29 111]
[46 69]
[47 68]
[48 67]
[49 66]
[86 94]
[87 93]
[88 92]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 136]
[128 135]
] def

init

% Start Annotations
22 120 0.16 1 colorpair
23 119 0.16 0.6 colorpair
24 118 0.16 0.2 colorpair
25 117 0.32 1 colorpair
26 116 0.32 1 colorpair
27 113 0.0 0.6 colorpair
28 112 0.16 1 colorpair
29 111 0.0 1 colorpair
46 69 0.16 0.6 colorpair
47 68 0.0 1 colorpair
48 67 0.16 1 colorpair
49 66 0.16 0.2 colorpair
86 94 0.0 1 colorpair
87 93 0.0 1 colorpair
88 92 0.16 1 colorpair
122 142 0.0 1 colorpair
123 141 0.32 1 colorpair
124 140 0.0 0.6 colorpair
125 139 0.16 1 colorpair
126 138 0.32 1 colorpair
127 136 0.0 1 colorpair
128 135 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 cmark
23 119 1 gmark
119 cmark
24 118 2 gmark
24 cmark
118 cmark
25 cmark
117 cmark
26 cmark
116 cmark
27 113 1 gmark
112 cmark
46 69 1 gmark
69 cmark
48 cmark
67 cmark
49 66 2 gmark
66 cmark
88 cmark
123 cmark
141 cmark
124 140 1 gmark
125 cmark
126 cmark
138 cmark
128 135 2 gmark
128 cmark
135 cmark

% End Annotations
showpage
end
%%EOF
