%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:21:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAAUCUGAACAUGUUUGGAAUUGAGAGAGCCUCGUUGGUUAAUAGAA__AAUGACCUUCGGGGCUUUCUUCUUUCUGCC___C_CCAU__C_G_A__ACUGCCGAUUGCAUGAGGCAAAAAGCCUCAAGCGCCGGCG_CAUU___\
) } def
/len { sequence length } bind def

/coor [
[126.31837463 269.31958008]
[138.71875000 260.62997437]
[134.54548645 246.22221375]
[121.41576385 239.28349304]
[116.97824097 224.73141479]
[124.34522247 211.00679016]
[120.17195892 196.59901428]
[115.99870300 182.19125366]
[111.82543945 167.78347778]
[107.65217590 153.37570190]
[103.47891235 138.96792603]
[86.70560455 138.43070984]
[71.07160187 130.73472595]
[59.59515762 116.77787018]
[46.91730499 124.79486084]
[34.23945618 132.81184387]
[21.56160355 140.82882690]
[8.88375282 148.84582520]
[-3.79409862 156.86280823]
[-16.47195053 164.87979126]
[-29.14980125 172.89678955]
[-41.82765198 180.91377258]
[-46.74110413 196.18588257]
[-61.79522705 201.73141479]
[-75.44178772 193.29631042]
[-77.21231079 177.35125732]
[-65.74860382 166.12792969]
[-49.84463882 168.23591614]
[-37.16679001 160.21893311]
[-24.48893738 152.20195007]
[-11.81108570 144.18495178]
[0.86676526 136.16796875]
[13.54461670 128.15098572]
[26.22246742 120.13399506]
[38.90031815 112.11700439]
[51.57817078 104.10002136]
[52.63456345 89.13726807]
[41.20887756 79.41853333]
[29.78319359 69.69980621]
[18.35750771 59.98107147]
[6.93182325 50.26234055]
[-4.49386120 40.54360962]
[-15.91954613 30.82487869]
[-27.34523010 21.10614777]
[-42.88421631 22.19133949]
[-54.33303833 12.17240143]
[-55.27184296 -2.64833474]
[-66.69752502 -12.36706543]
[-78.12321472 -22.08579636]
[-89.54889679 -31.80452728]
[-100.97457886 -41.52325821]
[-115.41502380 -36.29169846]
[-130.53376770 -38.99705505]
[-142.26396179 -48.91159439]
[-147.45024109 -63.36836624]
[-144.69750977 -78.47856140]
[-134.74624634 -90.17761993]
[-120.27328491 -95.31855011]
[-105.17179108 -92.51847076]
[-93.50399017 -82.53058624]
[-88.40844727 -68.04158783]
[-91.25585175 -52.94894409]
[-79.83016205 -43.23021317]
[-68.40447998 -33.51148224]
[-56.97879791 -23.79275131]
[-45.55311203 -14.07401943]
[-30.77370453 -15.52478695]
[-19.04798889 -5.83137465]
[-17.62649918 9.68046379]
[-6.20081472 19.39919472]
[5.22486973 29.11792564]
[16.65055466 38.83665466]
[28.07623863 48.55538559]
[39.50192261 58.27411652]
[50.92760849 67.99285126]
[62.35329437 77.71157837]
[67.84972382 71.01488495]
[74.49415588 65.59963226]
[81.99951935 61.65288162]
[90.05055237 59.29938126]
[98.31696320 58.59781647]
[106.46699524 59.53988647]
[114.18069458 62.05202866]
[121.16250610 65.99978638]
[127.15258026 71.19448090]
[131.93640137 77.40200806]
[145.61489868 71.24581909]
[159.29339600 65.08962250]
[172.97189331 58.93342972]
[169.27175903 44.35673141]
[168.15925598 29.35894966]
[169.66818237 14.39585209]
[173.75267029 -0.07784888]
[180.28862000 -13.62231445]
[189.07739258 -25.82594490]
[199.85191345 -36.31788254]
[212.28475952 -44.77929306]
[225.99810791 -50.95304108]
[240.57522583 -54.65151215]
[255.57313538 -55.76232147]
[270.53607178 -54.25170135]
[285.00930786 -50.16556549]
[298.55300903 -43.62808609]
[310.75564575 -34.83792877]
[321.24636841 -24.06221581]
[329.70635986 -11.62841034]
[335.87857056 2.08563924]
[339.57537842 16.66317749]
[340.68447876 31.66121101]
[339.17218018 46.62396622]
[335.08441162 61.09674072]
[328.54537964 74.63972473]
[319.75384521 86.84136200]
[308.97692871 97.33085632]
[296.54217529 105.78944397]
[282.82742310 111.96008301]
[268.24945068 115.65525055]
[253.25131226 116.76264954]
[238.28872681 115.24864197]
[223.81640625 111.15922546]
[210.27416992 104.61866760]
[198.07353210 95.82574463]
[187.58526611 85.04765320]
[179.12808228 72.61193085]
[165.44958496 78.76811981]
[151.77108765 84.92431641]
[138.09259033 91.08050537]
[138.92163086 103.96351624]
[135.51269531 116.41495514]
[128.23698425 127.07906342]
[117.88668823 134.79467773]
[122.05994415 149.20243835]
[126.23320770 163.61021423]
[130.40646362 178.01799011]
[134.57972717 192.42575073]
[138.75299072 206.83352661]
[152.31483459 214.49604797]
[156.34187317 229.16702271]
[148.95326233 242.04895020]
[153.12652588 256.45672607]
[168.25151062 257.17352295]
[182.32330322 262.76486206]
[193.81552124 272.62423706]
[201.48158264 285.68222046]
[204.48989868 300.52230835]
[202.51417542 315.53482056]
[195.76872253 329.09127808]
[184.98522949 339.72119141]
[171.33340454 346.27148438]
[156.29411316 348.03167725]
[141.49868774 344.81079102]
[128.55203247 336.95822144]
[118.85849762 325.32574463]
[113.46957397 311.17520142]
[112.96981049 296.04150391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[86 127]
[87 126]
[88 125]
[89 124]
] def

init

% Start Annotations
2 140 0.0 1 colorpair
3 139 0.0 1 colorpair
6 136 0.16 1 colorpair
7 135 0.0 1 colorpair
8 134 0.0 1 colorpair
9 133 0.0 1 colorpair
10 132 0.0 1 colorpair
11 131 0.0 1 colorpair
14 36 0.32 1 colorpair
15 35 0.0 1 colorpair
16 34 0.0 1 colorpair
17 33 0.16 0.6 colorpair
18 32 0.16 1 colorpair
19 31 0.16 1 colorpair
20 30 0.32 1 colorpair
21 29 0.16 0.6 colorpair
22 28 0.0 0.6 colorpair
37 76 0.0 0.6 colorpair
38 75 0.16 1 colorpair
39 74 0.0 0.6 colorpair
40 73 0.0 0.6 colorpair
41 72 0.0 0.6 colorpair
42 71 0.16 1 colorpair
43 70 0.0 1 colorpair
44 69 0.0 0.6 colorpair
47 66 0.0 0.6 colorpair
48 65 0.16 1 colorpair
49 64 0.0 0.6 colorpair
50 63 0.16 1 colorpair
51 62 0.0 1 colorpair
86 127 0.0 1 colorpair
87 126 0.0 1 colorpair
88 125 0.16 1 colorpair
89 124 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
136 cmark
14 cmark
36 cmark
17 33 1 gmark
17 cmark
33 cmark
18 cmark
32 cmark
19 cmark
31 cmark
20 cmark
30 cmark
21 29 1 gmark
21 cmark
29 cmark
22 28 1 gmark
37 76 1 gmark
38 cmark
39 74 1 gmark
40 73 1 gmark
41 72 1 gmark
42 cmark
44 69 1 gmark
47 66 1 gmark
65 cmark
49 64 1 gmark
63 cmark
88 cmark
125 cmark

% End Annotations
showpage
end
%%EOF
