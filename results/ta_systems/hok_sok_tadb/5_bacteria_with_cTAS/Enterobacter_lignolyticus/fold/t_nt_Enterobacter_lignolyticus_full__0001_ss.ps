%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:26:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUACUCUACAUGUGUCGAGCAUAUAG_______________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[113.39754486 120.87847137]
[102.87580109 110.20929718]
[95.54230499 123.29439545]
[88.20880890 136.37950134]
[86.71179962 145.51136780]
[80.51725006 149.70166016]
[72.85197449 162.59519958]
[65.18669128 175.48875427]
[65.51842499 191.88453674]
[51.34702682 200.13702393]
[37.25081635 191.75675964]
[37.73077011 175.36463928]
[52.29314804 167.82347107]
[59.95842743 154.92993164]
[67.62371063 142.03637695]
[75.12371063 129.04600525]
[82.45720673 115.96089935]
[89.79070282 102.87580109]
[80.69731903 90.94641113]
[66.13672638 94.55044556]
[51.57613373 98.15448761]
[37.01553726 101.75852966]
[22.45494461 105.36257172]
[7.89435148 108.96661377]
[-6.02804327 118.64148712]
[-19.17892647 107.94145966]
[-12.53758430 92.34245300]
[4.29031086 94.40601349]
[18.85090446 90.80197906]
[33.41149902 87.19793701]
[47.97209167 83.59389496]
[62.53268814 79.98985291]
[77.09327698 76.38581848]
[69.58629608 63.39946747]
[62.95552444 49.94462204]
[57.23005295 36.08031845]
[52.43500519 21.86738205]
[48.59141922 7.36818075]
[45.71616364 -7.35367060]
[43.82185364 -22.23357582]
[42.91679764 -37.20624542]
[43.00496674 -52.20598602]
[44.08597565 -67.16698456]
[46.15508270 -82.02359009]
[49.20320892 -96.71062469]
[53.21697617 -111.16364288]
[58.17877579 -125.31922150]
[64.06684113 -139.11526489]
[70.85533142 -152.49122620]
[78.51445770 -165.38842773]
[87.01062012 -177.75027466]
[96.30654144 -189.52252197]
[106.36143494 -200.65351868]
[117.13117218 -211.09443665]
[128.56851196 -220.79945374]
[140.62326050 -229.72598267]
[153.24252319 -237.83486938]
[166.37094116 -245.09053040]
[179.95091248 -251.46113586]
[193.92285156 -256.91870117]
[208.22543335 -261.43933105]
[222.79592896 -265.00314331]
[237.57038879 -267.59454346]
[252.48399353 -269.20211792]
[267.47131348 -269.81884766]
[282.46658325 -269.44201660]
[297.40399170 -268.07327271]
[312.21801758 -265.71859741]
[326.84368896 -262.38839722]
[341.21676636 -258.09719849]
[355.27423096 -252.86387634]
[368.95440674 -246.71139526]
[382.19723511 -239.66673279]
[394.94464111 -231.76080322]
[407.14068604 -223.02828979]
[418.73184204 -213.50752258]
[429.66726685 -203.24028015]
[439.89895630 -192.27157593]
[449.38204956 -180.64958191]
[458.07495117 -168.42526245]
[465.93945312 -155.65226746]
[472.94110107 -142.38664246]
[479.04916382 -128.68658447]
[484.23681641 -114.61220551]
[488.48135376 -100.22526550]
[491.76406860 -85.58888245]
[494.07064819 -70.76728058]
[495.39089966 -55.82550049]
[495.71905518 -40.82909012]
[495.05371094 -25.84385490]
[493.39773560 -10.93554401]
[490.75839233 3.83042955]
[487.14730835 18.38927650]
[482.58029175 32.67711639]
[477.07739258 46.63125992]
[470.66275024 60.19047928]
[463.36453247 73.29528046]
[455.21472168 85.88816833]
[446.24911499 97.91387939]
[436.50701904 109.31965637]
[426.03121948 120.05545807]
[414.86764526 130.07417297]
[403.06527710 139.33183289]
[390.67593384 147.78782654]
[377.75393677 155.40505981]
[364.35601807 162.15010071]
[350.54095459 167.99336243]
[336.36932373 172.90919495]
[321.90335083 176.87602234]
[307.20651245 179.87646484]
[292.34326172 181.89735413]
[277.37884521 182.92979431]
[262.37890625 182.96928406]
[247.40924072 182.01564026]
[232.53555298 180.07304382]
[217.82312012 177.15002441]
[203.33647156 173.25939941]
[189.13917542 168.41824341]
[175.29351807 162.64781189]
[161.86026001 155.97340393]
[148.89834595 148.42431641]
[136.46464539 140.03366089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[6 15]
[7 14]
[8 13]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
] def

init

% Start Annotations
2 18 0.0 1 colorpair
3 17 0.0 1 colorpair
4 16 0.0 1 colorpair
6 15 0.0 1 colorpair
7 14 0.0 1 colorpair
8 13 0.0 1 colorpair
19 33 0.0 1 colorpair
20 32 0.0 1 colorpair
21 31 0.0 1 colorpair
22 30 0.0 1 colorpair
23 29 0.0 1 colorpair
24 28 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
