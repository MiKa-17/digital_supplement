%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:21:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACUUAACGUUGUCUG_G_CGUUAGAGUAGGCCUCGGGUUGAUGAAUAUCGACUCGGGGCUUUUCUCUUUGUAUCUUUC__AC__\
) } def
/len { sequence length } bind def

/coor [
[110.42384338 232.43098450]
[114.79669952 217.97225952]
[123.06706238 205.33193970]
[134.56451416 195.53471375]
[128.43388367 181.84474182]
[122.30326080 168.15476990]
[116.17263794 154.46478271]
[110.04201508 140.77481079]
[103.91139221 127.08483124]
[93.38699341 126.55476379]
[83.84316254 122.08718872]
[76.69504547 114.34455872]
[73.00255585 104.47493744]
[58.09882355 102.77822876]
[43.16957092 101.32308197]
[28.21871567 100.10987091]
[13.26785755 98.89666748]
[-1.68299949 97.68346405]
[-16.63385582 96.47025299]
[-31.58471298 95.25704956]
[-46.55325699 94.28610229]
[-57.04127121 105.88504791]
[-72.53821564 107.97756958]
[-85.72691345 99.57564545]
[-90.38005829 84.64640045]
[-84.30057526 70.23897552]
[-70.35901642 63.15610886]
[-55.13815689 66.74211884]
[-45.82482147 79.30379486]
[-38.85877991 76.42961884]
[-30.37150764 80.30619049]
[-15.42065048 81.51939392]
[-0.46979284 82.73260498]
[14.48106384 83.94580841]
[29.43192101 85.15901947]
[44.38277817 86.37222290]
[51.43824005 83.72512054]
[59.79553223 87.87449646]
[74.69926453 89.57120514]
[87.61568451 75.59680176]
[106.52043915 73.42235565]
[113.95021057 60.39168167]
[121.37998199 47.36100769]
[128.80975342 34.33032990]
[136.23951721 21.29965591]
[143.66929626 8.26897907]
[151.09906006 -4.76169729]
[158.52882385 -17.79237366]
[165.95860291 -30.82304955]
[173.38836670 -43.85372543]
[180.81814575 -56.88439941]
[188.24790955 -69.91507721]
[195.67767334 -82.94575500]
[203.10745239 -95.97643280]
[202.47790527 -112.36348724]
[216.49702454 -120.87207031]
[230.74316406 -112.74928284]
[230.56109619 -96.35114288]
[216.13812256 -88.54666138]
[208.70835876 -75.51598358]
[201.27857971 -62.48530579]
[193.84881592 -49.45463181]
[186.41905212 -36.42395401]
[178.98927307 -23.39328003]
[171.55950928 -10.36260319]
[164.12973022 2.66807294]
[156.69996643 15.69874859]
[149.27020264 28.72942543]
[141.84042358 41.76010132]
[134.41065979 54.79077530]
[126.98088837 67.82145691]
[119.55111694 80.85212708]
[126.67028046 93.86947632]
[125.94976807 108.68888855]
[117.60137177 120.95420837]
[123.73199463 134.64418030]
[129.86260986 148.33416748]
[135.99324036 162.02413940]
[142.12385559 175.71411133]
[148.25448608 189.40409851]
[163.21980286 187.35079956]
[178.15719604 189.59826660]
[191.85574341 195.96427917]
[203.20498657 205.93280029]
[211.28488159 218.69570923]
[215.44042969 233.21838379]
[215.33476257 248.32353210]
[210.97644043 262.78665161]
[202.71878052 275.43527222]
[191.23118591 285.24404907]
[177.44490051 291.41778564]
[162.47752380 293.45605469]
[147.54240417 291.19357300]
[133.85025024 284.81381226]
[122.51103210 274.83389282]
[114.44396210 262.06286621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[13 39]
[14 38]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 29]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% Start Annotations
4 80 0.0 0.2 colorpair
5 79 0.0 0.2 colorpair
6 78 0.0 0.2 colorpair
7 77 0.0 0.2 colorpair
8 76 0.0 0.2 colorpair
9 75 0.0 0.2 colorpair
13 39 0.32 1 colorpair
14 38 0.0 1 colorpair
15 36 0.16 0.2 colorpair
16 35 0.0 1 colorpair
17 34 0.32 1 colorpair
18 33 0.0 0.2 colorpair
20 31 0.0 0.2 colorpair
21 29 0.0 1 colorpair
41 72 0.16 0.2 colorpair
42 71 0.0 0.2 colorpair
43 70 0.0 0.2 colorpair
44 69 0.0 0.2 colorpair
45 68 0.0 0.2 colorpair
46 67 0.0 0.2 colorpair
47 66 0.0 0.2 colorpair
48 65 0.0 0.2 colorpair
49 64 0.0 0.2 colorpair
50 63 0.0 0.2 colorpair
51 62 0.0 0.2 colorpair
52 61 0.16 0.2 colorpair
53 60 0.0 0.2 colorpair
54 59 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 80 2 gmark
5 79 2 gmark
6 78 2 gmark
7 77 2 gmark
8 76 2 gmark
9 75 2 gmark
13 cmark
39 cmark
15 36 2 gmark
15 cmark
17 cmark
34 cmark
18 33 2 gmark
19 32 5 gmark
19 cmark
32 cmark
20 31 2 gmark
41 72 2 gmark
72 cmark
42 71 2 gmark
43 70 2 gmark
44 69 2 gmark
45 68 2 gmark
46 67 2 gmark
47 66 2 gmark
48 65 2 gmark
49 64 2 gmark
50 63 2 gmark
51 62 2 gmark
52 61 2 gmark
61 cmark
53 60 2 gmark
54 59 2 gmark
59 cmark

% End Annotations
showpage
end
%%EOF
