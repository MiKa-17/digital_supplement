%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:21:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACUUAACGUUGUCAGGCGUUAGAGUAGGCCUCGGGUUGAUGAAUAUCGACUCGGGGCUUUUCUCUUUGUAUCUUUCAC___\
) } def
/len { sequence length } bind def

/coor [
[108.79139709 233.13519287]
[112.86654663 218.57893372]
[121.05257416 205.87144470]
[132.62159729 196.14265442]
[126.76574707 182.33291626]
[120.90991211 168.52316284]
[115.05406952 154.71340942]
[109.19823456 140.90367126]
[103.34239197 127.09391785]
[93.08403778 126.40873718]
[83.80660248 121.97785187]
[76.82598114 114.42971802]
[73.13226318 104.83493805]
[58.20759583 103.33350372]
[43.25992203 102.08166504]
[28.29341888 101.07977295]
[13.32691669 100.07788849]
[-1.63958693 99.07599640]
[-16.60609055 98.07410431]
[-31.57259369 97.07221985]
[-46.53909683 96.07032776]
[-58.26940155 106.66162109]
[-74.04867554 105.77278900]
[-84.51535797 93.93115997]
[-83.45974731 78.16216278]
[-71.50812531 67.82126617]
[-55.75116730 69.04353333]
[-45.53720856 81.10382080]
[-30.57070351 82.10571289]
[-15.60420036 83.10760498]
[-0.63769740 84.10948944]
[14.32880592 85.11138153]
[29.29530907 86.11327362]
[44.26181030 87.11515808]
[51.28712082 84.36528015]
[59.70903015 88.40883636]
[74.63369751 89.91027069]
[87.28231812 75.84399414]
[106.03759003 73.37670898]
[113.24631500 60.22246170]
[120.45504761 47.06821442]
[127.66377258 33.91396713]
[134.87249756 20.75971603]
[142.08122253 7.60546780]
[149.28994751 -5.54878092]
[156.49867249 -18.70302963]
[163.70739746 -31.85727882]
[170.91612244 -45.01152802]
[178.12486267 -58.16577530]
[185.33358765 -71.32002258]
[192.54231262 -84.47427368]
[199.75103760 -97.62852478]
[198.84492493 -114.00261688]
[212.71841431 -122.74666595]
[227.09965515 -114.86553192]
[227.19444275 -98.46665955]
[212.90528870 -90.41979980]
[205.69656372 -77.26554871]
[198.48782349 -64.11129761]
[191.27909851 -50.95705032]
[184.07037354 -37.80280304]
[176.86164856 -24.64855194]
[169.65292358 -11.49430370]
[162.44419861 1.65994525]
[155.23547363 14.81419468]
[148.02674866 27.96844292]
[140.81802368 41.12269211]
[133.60929871 54.27693939]
[126.40056610 67.43119049]
[119.19184113 80.58544159]
[126.57853699 93.76836395]
[125.82129669 108.86073303]
[117.15214539 121.23807526]
[123.00798035 135.04782104]
[128.86381531 148.85757446]
[134.71966553 162.66732788]
[140.57550049 176.47706604]
[146.43133545 190.28681946]
[161.46731567 188.73411560]
[176.29261780 191.68395996]
[189.58901978 198.87403870]
[200.17417908 209.66503906]
[207.10688782 223.09742737]
[209.77070618 237.97679138]
[207.92874146 252.98007202]
[201.74481201 266.77319336]
[191.76875305 278.12969971]
[178.88766479 286.03973389]
[164.24690247 289.79995728]
[149.14831543 289.07604980]
[134.93444824 283.93234253]
[122.86922455 274.82620239]
[114.02544403 262.56738281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[13 37]
[14 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% Start Annotations
4 78 0.0 0.6 colorpair
5 77 0.0 0.6 colorpair
6 76 0.0 0.6 colorpair
7 75 0.0 0.6 colorpair
8 74 0.0 0.6 colorpair
9 73 0.0 0.6 colorpair
13 37 0.32 1 colorpair
14 36 0.0 1 colorpair
15 34 0.16 0.6 colorpair
16 33 0.0 1 colorpair
17 32 0.32 1 colorpair
18 31 0.0 0.6 colorpair
19 30 0.16 0.2 colorpair
20 29 0.0 0.6 colorpair
21 28 0.0 1 colorpair
39 70 0.16 0.6 colorpair
40 69 0.0 0.6 colorpair
41 68 0.0 0.6 colorpair
42 67 0.0 0.6 colorpair
43 66 0.0 0.6 colorpair
44 65 0.0 0.6 colorpair
45 64 0.0 0.6 colorpair
46 63 0.0 0.6 colorpair
47 62 0.0 0.6 colorpair
48 61 0.0 0.6 colorpair
49 60 0.0 0.2 colorpair
50 59 0.16 0.6 colorpair
51 58 0.0 0.6 colorpair
52 57 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 78 1 gmark
5 77 1 gmark
6 76 1 gmark
7 75 1 gmark
8 74 1 gmark
9 73 1 gmark
13 cmark
37 cmark
15 34 1 gmark
15 cmark
17 cmark
32 cmark
18 31 1 gmark
19 30 2 gmark
19 cmark
30 cmark
20 29 1 gmark
39 70 1 gmark
70 cmark
40 69 1 gmark
41 68 1 gmark
42 67 1 gmark
43 66 1 gmark
44 65 1 gmark
45 64 1 gmark
46 63 1 gmark
47 62 1 gmark
48 61 1 gmark
49 60 2 gmark
50 59 1 gmark
59 cmark
51 58 1 gmark
52 57 1 gmark
57 cmark

% End Annotations
showpage
end
%%EOF
