%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________________AAAUGCUGACAAAAUAUGCCCUGGUGGCAAUCAUCGUGCUGUGUAUCACGGUGCUGGGAUUUACGUUGAUGGUGCGCGACUCGCUGUGCGAACUCAGGAUCAAAGAGCGUAGUAUGGAGUUGAAGGCUGUUCUCGCUUACGA_AUCGAA___GAA_\
) } def
/len { sequence length } bind def

/coor [
[107.73338318 386.94338989]
[95.77248383 387.01644897]
[83.81892395 386.59115601]
[71.89345551 385.66824341]
[60.01679611 384.24929810]
[48.20956039 382.33679199]
[36.49224854 379.93408203]
[24.88521004 377.04528809]
[13.40859509 373.67544556]
[2.08233309 369.83041382]
[-9.07390976 365.51684570]
[-20.04076195 360.74227905]
[-30.79918289 355.51495361]
[-41.33049011 349.84396362]
[-51.61640167 343.73916626]
[-61.63905334 337.21115112]
[-71.38104248 330.27127075]
[-80.82545471 322.93154907]
[-89.95589447 315.20474243]
[-98.75650024 307.10424805]
[-107.21199799 298.64416504]
[-115.30770874 289.83917236]
[-123.02956390 280.70455933]
[-130.36416626 271.25616455]
[-137.29878235 261.51040649]
[-143.82135010 251.48422241]
[-149.92057800 241.19499207]
[-155.58584595 230.66061401]
[-160.80732727 219.89936829]
[-165.57595825 208.92991638]
[-169.88346863 197.77134705]
[-173.72235107 186.44299316]
[-177.08596802 174.96455383]
[-179.96847534 163.35595703]
[-182.36483765 151.63734436]
[-184.27093506 139.82907104]
[-185.68344116 127.95163727]
[-200.64521790 129.02172852]
[-215.60699463 130.09181213]
[-227.15734863 141.22595215]
[-243.04449463 138.99475098]
[-251.08117676 125.10981750]
[-245.10232544 110.22248077]
[-229.69442749 105.75302124]
[-216.67709351 115.13003540]
[-201.71530151 114.05994415]
[-186.75352478 112.98986053]
[-187.03390503 97.19754791]
[-186.44523621 81.41371918]
[-184.98925781 65.68616486]
[-182.67042542 50.06250381]
[-179.49572754 34.59004211]
[-175.47477722 19.31562614]
[-170.61976624 4.28550339]
[-164.94537354 -10.45482063]
[-158.46881104 -24.86071396]
[-151.20965576 -38.88856125]
[-143.18989563 -52.49588394]
[-134.43382263 -65.64149475]
[-124.96794128 -78.28557587]
[-114.82090759 -90.38985443]
[-104.02345276 -101.91767883]
[-92.60826874 -112.83415222]
[-80.60990906 -123.10620880]
[-68.06471252 -132.70275879]
[-55.01065445 -141.59474182]
[-41.48726273 -149.75523376]
[-27.53548050 -157.15953064]
[-13.19755363 -163.78520203]
[1.48310792 -169.61221313]
[16.46205330 -174.62289429]
[31.69393349 -178.80207825]
[47.13262558 -182.13713074]
[62.73138809 -184.61793518]
[78.44299316 -186.23699951]
[94.21986389 -186.98939514]
[110.01423645 -186.87286377]
[125.77828217 -185.88774109]
[141.46427917 -184.03703308]
[157.02474976 -181.32632446]
[172.41255188 -177.76382446]
[187.58110046 -173.36033630]
[202.48448181 -168.12916565]
[217.07756042 -162.08618164]
[223.55133057 -175.61726379]
[230.02510071 -189.14834595]
[220.56674194 -201.07733154]
[217.23919678 -215.86972046]
[220.65022278 -230.57974243]
[230.07107544 -242.30189514]
[243.59143066 -248.74467468]
[258.50656128 -248.67854309]
[264.98034668 -262.20962524]
[271.45410156 -275.74072266]
[277.92788696 -289.27178955]
[284.40164185 -302.80288696]
[290.87542725 -316.33398438]
[285.38189697 -331.15277100]
[292.05166626 -345.48068237]
[306.92770386 -350.81726074]
[321.18432617 -343.99636841]
[326.36331177 -329.06472778]
[319.39205933 -314.88104248]
[304.40652466 -309.86019897]
[297.93273926 -296.32910156]
[291.45895386 -282.79803467]
[284.98519897 -269.26693726]
[278.51141357 -255.73585510]
[272.03765869 -242.20477295]
[281.44790649 -230.63272095]
[284.91491699 -216.06256104]
[281.69885254 -201.37182617]
[272.38531494 -189.48576355]
[258.77941895 -182.79496765]
[243.55619812 -182.67457581]
[237.08241272 -169.14349365]
[230.60864258 -155.61241150]
[246.56939697 -146.80706787]
[261.93908691 -137.00643921]
[276.65573120 -126.25003052]
[290.65994263 -114.58123016]
[303.89532471 -102.04708099]
[316.30841064 -88.69813538]
[327.84921265 -74.58823395]
[338.47119141 -59.77426529]
[348.13146973 -44.31597519]
[356.79107666 -28.27570343]
[364.41516113 -11.71813393]
[370.97293091 5.28996134]
[376.43795776 22.67999268]
[380.78817749 40.38183212]
[384.00604248 58.32409668]
[386.07864380 76.43442535]
[386.99752808 94.63978577]
[386.75906372 112.86676788]
[385.36419678 131.04185486]
[382.81851196 149.09176636]
[379.13232422 166.94369507]
[374.32049561 184.52566528]
[368.40240479 201.76676941]
[361.40191650 218.59748840]
[353.34725952 234.94992065]
[344.27096558 250.75816345]
[334.20956421 265.95843506]
[346.21768188 274.94760132]
[358.22579956 283.93676758]
[373.40908813 280.19479370]
[387.42254639 287.13427734]
[393.64950562 301.47860718]
[389.14974976 316.45477295]
[376.04791260 324.99154663]
[360.53033447 323.05810547]
[349.92388916 311.56735229]
[349.23663330 295.94488525]
[337.22851562 286.95571899]
[325.22039795 277.96655273]
[317.61071777 287.19482422]
[309.62316895 296.09805298]
[301.27163696 304.66079712]
[292.57064819 312.86819458]
[283.53527832 320.70596313]
[274.18124390 328.16049194]
[264.52474976 335.21890259]
[254.58259583 341.86886597]
[244.37202454 348.09884644]
[233.91078186 353.89804077]
[223.21702576 359.25640869]
[212.30931091 364.16461182]
[201.20660400 368.61410522]
[189.92814636 372.59722900]
[178.49356079 376.10702515]
[166.92268372 379.13739014]
[155.23559570 381.68307495]
[143.45260620 383.73965454]
[131.59416199 385.30358887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[37 47]
[38 46]
[39 45]
[84 117]
[85 116]
[86 115]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[144 156]
[145 155]
[146 154]
] def

init

% Start Annotations
37 47 0.16 0.2 colorpair
85 116 0.32 1 colorpair
92 109 0.16 1 colorpair
94 107 0.0 0.2 colorpair
95 106 0.0 1 colorpair
97 104 0.16 1 colorpair
144 156 0.32 0.2 colorpair
145 155 0.0 0.2 colorpair
146 154 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
37 47 2 gmark
37 cmark
47 cmark
38 46 8 gmark
38 cmark
46 cmark
39 45 4 gmark
39 cmark
45 cmark
84 117 4 gmark
84 cmark
117 cmark
85 cmark
116 cmark
86 115 4 gmark
86 cmark
115 cmark
92 cmark
93 108 6 gmark
108 cmark
94 107 2 gmark
96 105 12 gmark
96 cmark
105 cmark
97 cmark
144 156 2 gmark
144 cmark
156 cmark
145 155 2 gmark

% End Annotations
showpage
end
%%EOF
