%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUACUCUUAUGGUGUUCAUGCAUAGGGG_AGCCUCACUU_UGAUUUAUCAUCAGGUGGGGCUUUUCUCUGUCUGUCUC_______CCGCUGAACGC_________CUGAGACAAACAGUCUCAAGCACCCG___\
) } def
/len { sequence length } bind def

/coor [
[132.44831848 164.57969666]
[117.70812988 167.35937500]
[103.33873749 163.05583191]
[92.55311584 152.63131714]
[87.76291656 138.41674805]
[90.03869629 123.59172821]
[76.73353577 130.51795959]
[63.42837143 137.44418335]
[50.12320709 144.37042236]
[36.81804657 151.29664612]
[23.51288414 158.22286987]
[14.84466934 171.45816040]
[-0.01724655 170.47189331]
[-13.32240868 177.39811707]
[-26.62757111 184.32434082]
[-39.93273544 191.25057983]
[-53.23789597 198.17680359]
[-66.54306030 205.10302734]
[-79.84822083 212.02926636]
[-93.15338135 218.95549011]
[-94.45648956 234.32772827]
[-103.88168335 246.54121399]
[-118.42142487 251.69866943]
[-133.43614197 248.15437317]
[-144.13467407 237.03930664]
[-147.10317993 221.90023804]
[-141.39440918 207.56797791]
[-128.83000183 198.61592102]
[-113.41923523 197.90061951]
[-100.07961273 205.65032959]
[-86.77445221 198.72410583]
[-73.46929169 191.79786682]
[-60.16412735 184.87164307]
[-46.85896301 177.94541931]
[-33.55380249 171.01918030]
[-20.24863815 164.09295654]
[-6.94347572 157.16671753]
[0.77306467 144.42684937]
[16.58665466 144.91770935]
[29.89181709 137.99148560]
[43.19697952 131.06526184]
[56.50214386 124.13903046]
[69.80730438 117.21279907]
[83.11246490 110.28656769]
[85.71719360 95.51445007]
[75.58333588 84.45529175]
[65.44948578 73.39613342]
[55.31563187 62.33697128]
[49.02061844 59.94482422]
[45.46528625 55.38930511]
[44.99393845 50.56733704]
[35.35212326 39.07666779]
[25.71030807 27.58600235]
[9.91794205 24.76098633]
[2.40726852 10.58462048]
[8.93983364 -4.06819963]
[24.50441360 -7.95708513]
[37.16119385 1.90118456]
[37.20097351 17.94418907]
[46.84278870 29.43485451]
[56.48460388 40.92552185]
[66.37479401 52.20311737]
[76.50864410 63.26227951]
[86.64249420 74.32144165]
[96.77635193 85.38059998]
[111.13045502 89.73487091]
[125.70058441 86.16957855]
[140.27072144 82.60429382]
[154.80108643 78.88028717]
[169.28997803 74.99800110]
[183.77886963 71.11571503]
[198.26774597 67.23342896]
[202.32556152 52.48617554]
[213.14868164 41.82048035]
[227.76011658 38.02941895]
[242.21064758 42.03420639]
[252.64610291 52.66279221]
[267.13497925 48.78050613]
[281.62387085 44.89822006]
[296.11276245 41.01593399]
[307.44015503 29.97052956]
[321.73629761 34.15012741]
[336.22518921 30.26784134]
[350.71408081 26.38555717]
[365.20297241 22.50327110]
[379.69186401 18.62098503]
[394.18075562 14.73869896]
[394.40487671 -1.49462175]
[399.15698242 -17.00390816]
[408.05017090 -30.55311966]
[420.36788940 -41.06470490]
[435.12164307 -47.70528793]
[451.13024902 -49.95175171]
[467.11441040 -47.63241959]
[481.79904175 -40.94016266]
[494.01486206 -30.41638565]
[502.79162598 -16.90722466]
[517.09741211 -21.41781235]
[525.75085449 -34.92696762]
[541.72229004 -36.44086456]
[552.75982666 -24.79817009]
[550.39636230 -8.93016243]
[536.44500732 -1.00941944]
[521.60797119 -7.11205721]
[507.30221558 -2.60147023]
[508.05819702 11.22719669]
[505.45544434 24.83986855]
[499.64285278 37.43227386]
[490.95907593 48.25924683]
[479.91290283 56.67881775]
[467.15328979 62.19027710]
[453.43139648 64.46395111]
[439.55621338 63.36093140]
[426.34701538 58.94152451]
[414.58483887 51.46199799]
[404.96649170 41.35972214]
[398.06301880 29.22758675]
[383.57412720 33.10987091]
[369.08526611 36.99215698]
[354.59637451 40.87444305]
[340.10748291 44.75672913]
[325.61859131 48.63901520]
[315.32754517 59.40673447]
[299.99505615 55.50482178]
[285.50616455 59.38710785]
[271.01727295 63.26939392]
[256.52838135 67.15167999]
[252.80531311 81.57403564]
[242.29318237 92.26753998]
[227.74377441 96.29010773]
[213.03784180 92.46489716]
[202.15003967 81.72231293]
[187.66114807 85.60459900]
[173.17225647 89.48688507]
[158.68338013 93.36917114]
[152.99348450 98.17493439]
[143.83599854 97.17442322]
[129.26586914 100.73971558]
[114.69573975 104.30500031]
[129.63380432 105.66681671]
[142.27609253 113.73974609]
[149.79585266 126.71870422]
[150.51164246 141.70161438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[45 65]
[46 64]
[47 63]
[48 62]
[51 61]
[52 60]
[53 59]
[66 139]
[67 138]
[68 137]
[69 135]
[70 134]
[71 133]
[72 132]
[77 127]
[78 126]
[79 125]
[80 124]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[87 117]
[97 105]
[98 104]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 0.6 colorpair
10 40 0.0 1 colorpair
11 39 0.0 1 colorpair
13 37 0.0 0.6 colorpair
14 36 0.16 1 colorpair
15 35 0.0 1 colorpair
16 34 0.0 1 colorpair
17 33 0.16 1 colorpair
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
45 65 0.16 1 colorpair
46 64 0.0 0.6 colorpair
47 63 0.16 1 colorpair
48 62 0.16 1 colorpair
51 61 0.0 1 colorpair
52 60 0.0 0.6 colorpair
53 59 0.0 0.6 colorpair
66 139 0.0 0.6 colorpair
67 138 0.0 1 colorpair
68 137 0.0 1 colorpair
69 135 0.0 1 colorpair
70 134 0.0 1 colorpair
71 133 0.0 1 colorpair
72 132 0.0 1 colorpair
77 127 0.0 1 colorpair
78 126 0.0 1 colorpair
79 125 0.0 0.6 colorpair
80 124 0.0 1 colorpair
82 122 0.16 1 colorpair
83 121 0.0 1 colorpair
84 120 0.16 1 colorpair
85 119 0.0 1 colorpair
86 118 0.0 1 colorpair
87 117 0.0 1 colorpair
97 105 0.0 1 colorpair
98 104 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 41 1 gmark
13 37 1 gmark
14 cmark
17 cmark
33 cmark
45 cmark
65 cmark
46 64 1 gmark
47 cmark
63 cmark
48 cmark
62 cmark
52 60 1 gmark
53 59 1 gmark
66 139 1 gmark
79 125 1 gmark
122 cmark
84 cmark
120 cmark
98 104 1 gmark

% End Annotations
showpage
end
%%EOF
