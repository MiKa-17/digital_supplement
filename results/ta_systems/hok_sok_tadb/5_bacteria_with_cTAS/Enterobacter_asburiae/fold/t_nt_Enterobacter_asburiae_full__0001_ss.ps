%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAAGAGGCUACUCUCAACUUGUUCAGACAUGAAGGAG__UAGCCUCG_GGUAAAUGAAAAUUUAC__CGGGGCUUUCUACUUUCUGCCACACAAC____________AACCCUCA_______AGACAAAAAGCCUCAAGCACC__CGCCA_____\
) } def
/len { sequence length } bind def

/coor [
[88.92221069 274.78613281]
[74.99881744 268.68634033]
[64.47317505 257.71914673]
[58.95037079 243.55697632]
[59.27259064 228.35945129]
[65.39070129 214.44409180]
[76.37172699 203.93289185]
[90.54115295 198.42872620]
[90.83938599 183.43168640]
[91.13761902 168.43464661]
[78.10456848 165.44030762]
[65.89378357 159.98841858]
[54.96382523 152.28370667]
[45.72515488 142.61553955]
[32.99040604 150.54183960]
[20.25565529 158.46813965]
[11.99352932 174.89643860]
[-5.53214645 174.85517883]
[-18.10678673 183.03309631]
[-30.68142891 191.21101379]
[-43.25606918 199.38893127]
[-55.83071136 207.56686401]
[-60.54911423 222.90036011]
[-75.53133392 228.63731384]
[-89.28429413 220.37683105]
[-91.25789642 204.45562744]
[-79.93817139 193.08711243]
[-64.00862885 194.99221802]
[-51.43399048 186.81430054]
[-38.85935211 178.63636780]
[-26.28470993 170.45845032]
[-13.71006775 162.28053284]
[-10.87969303 150.48461914]
[-0.42334616 143.57647705]
[12.32936192 145.73338318]
[25.06411171 137.80708313]
[37.79886246 129.88079834]
[33.29178238 117.65948486]
[31.16165543 104.80892944]
[31.48437881 91.78701782]
[34.24845505 79.05775452]
[39.35539246 67.07470703]
[46.62322235 56.26485443]
[36.12258911 45.55332947]
[25.62195969 34.84180450]
[15.12132835 24.13028145]
[4.62069702 13.41875744]
[-5.87993383 2.70723343]
[-16.38056564 -8.00429058]
[-34.21019363 -12.50498772]
[-37.97261047 -29.62209129]
[-48.68413544 -40.12272263]
[-57.05153275 -43.92385483]
[-59.50162888 -50.94021606]
[-70.00225830 -61.65174103]
[-80.50289154 -72.36326599]
[-91.00352478 -83.07479095]
[-106.93753052 -86.95284271]
[-111.28574371 -102.76502228]
[-99.57508850 -114.24511719]
[-83.85247803 -109.58338928]
[-80.29199982 -93.57542419]
[-69.79136658 -82.86389923]
[-59.29073715 -72.15237427]
[-48.79010391 -61.44084930]
[-38.18350220 -50.83424759]
[-27.47197914 -40.33361435]
[-15.34296322 -40.13013077]
[-6.33059454 -31.42181396]
[-5.66904116 -18.50492096]
[4.83159018 -7.79339743]
[15.33222103 2.91812634]
[25.83285141 13.62965012]
[36.33348465 24.34117508]
[46.83411407 35.05270004]
[57.33474731 45.76422119]
[78.00656128 34.59256744]
[101.22848511 31.00482368]
[124.30797577 35.41698456]
[144.56898499 47.31746292]
[159.66226196 65.32641602]
[173.37351990 59.24353790]
[187.08477783 53.16065979]
[200.79603577 47.07777786]
[214.50729370 40.99489975]
[223.98414612 28.32603836]
[238.75559998 30.23734856]
[252.46685791 24.15446854]
[266.17813110 18.07158852]
[279.88937378 11.98870850]
[276.19927979 -2.58836985]
[275.02597046 -17.57941246]
[276.40319824 -32.55309677]
[280.29135132 -47.07860184]
[286.57858276 -60.73799515]
[295.08392334 -73.13827515]
[305.56271362 -83.92265320]
[317.71343994 -92.78085327]
[331.18652344 -99.45799255]
[345.59429932 -103.76197052]
[360.52221680 -105.56893921]
[375.54080200 -104.82691956]
[390.21789551 -101.55725861]
[404.13122559 -95.85402679]
[416.88052368 -87.88132477]
[428.09887695 -77.86853027]
[437.46359253 -66.10374451]
[444.70520020 -52.92546082]
[449.61532593 -38.71284103]
[452.05273438 -23.87481117]
[451.94726562 -8.83829308]
[449.30194092 5.96408415]
[444.19293213 20.10642624]
[436.76718140 33.18182755]
[427.23834229 44.81408691]
[415.88061523 54.66851807]
[403.02075195 62.46158981]
[389.02874756 67.96908569]
[374.30725098 71.03253174]
[359.27972412 71.56379700]
[344.37863159 69.54758453]
[330.03265381 65.04192352]
[316.65457153 58.17643356]
[304.62930298 49.14865875]
[294.30282593 38.21833801]
[285.97225952 25.69996643]
[272.26098633 31.78284645]
[258.54974365 37.86572647]
[244.83848572 43.94860458]
[236.34236145 56.18237686]
[220.59017944 54.70615387]
[206.87892151 60.78903580]
[193.16766357 66.87191772]
[179.45640564 72.95479584]
[165.74514771 79.03767395]
[167.88175964 87.59397125]
[168.90966797 96.35290527]
[168.81205750 105.17139435]
[167.59054565 113.90542603]
[165.26507568 122.41233826]
[161.87362671 130.55319214]
[157.47158813 138.19502258]
[152.13087463 145.21299744]
[145.93869019 151.49252319]
[138.99620056 156.93101501]
[131.41677856 161.43963623]
[123.32422638 164.94477844]
[114.85071564 167.38916016]
[106.13465118 168.73287964]
[105.83641815 183.72991943]
[105.53818512 198.72695923]
[119.47758484 204.79010010]
[130.03204346 215.72956848]
[135.59208679 229.87715149]
[135.30984497 245.07546997]
[129.22837830 259.00686646]
[118.27503204 269.54693604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 151]
[9 150]
[10 149]
[14 37]
[15 36]
[16 35]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[51 67]
[52 66]
[54 65]
[55 64]
[56 63]
[57 62]
[81 135]
[82 134]
[83 133]
[84 132]
[85 131]
[87 129]
[88 128]
[89 127]
[90 126]
] def

init

% Start Annotations
8 151 0.0 1 colorpair
9 150 0.0 1 colorpair
10 149 0.0 1 colorpair
14 37 0.16 0.2 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
18 32 0.16 1 colorpair
19 31 0.16 1 colorpair
20 30 0.16 1 colorpair
21 29 0.16 1 colorpair
22 28 0.0 1 colorpair
43 76 0.16 1 colorpair
44 75 0.0 1 colorpair
45 74 0.0 1 colorpair
46 73 0.0 1 colorpair
47 72 0.0 1 colorpair
48 71 0.0 1 colorpair
49 70 0.0 1 colorpair
51 67 0.0 1 colorpair
52 66 0.16 0.2 colorpair
54 65 0.16 1 colorpair
55 64 0.0 1 colorpair
56 63 0.16 1 colorpair
57 62 0.0 1 colorpair
81 135 0.16 1 colorpair
82 134 0.16 1 colorpair
83 133 0.0 1 colorpair
84 132 0.0 1 colorpair
85 131 0.0 1 colorpair
87 129 0.0 1 colorpair
88 128 0.0 1 colorpair
89 127 0.16 1 colorpair
90 126 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
14 37 2 gmark
37 cmark
35 cmark
18 cmark
19 cmark
31 cmark
20 cmark
30 cmark
29 cmark
43 cmark
52 66 2 gmark
52 cmark
66 cmark
54 cmark
65 cmark
56 cmark
63 cmark
81 cmark
135 cmark
82 cmark
134 cmark
89 cmark
127 cmark

% End Annotations
showpage
end
%%EOF
