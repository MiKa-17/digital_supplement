%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________AUGCCAUUAAAAACUGCGUUAGGCAUCGUCUUUAUUAUUUGCCUGACGAUAGUGAUCUUUACCUUUAUUACUCGAGGUAAGCUAUGCGAGUUUUCAAUAAAGGGUGAACAUCAGGAGGUGGCGGCAAAAUUAGCCUGUAACGCAGG____\
) } def
/len { sequence length } bind def

/coor [
[52.88322449 357.26367188]
[39.87142181 364.72644043]
[26.19710350 370.89190674]
[11.98922825 375.70193481]
[-2.61821318 379.11111450]
[-17.48745918 381.08737183]
[-32.47828293 381.61199951]
[-47.44930649 380.68008423]
[-62.25933838 378.30041504]
[-76.76871490 374.49542236]
[-90.84059906 369.30096436]
[-104.34227753 362.76611328]
[-117.14642334 354.95239258]
[-129.13227844 345.93356323]
[-140.18681335 335.79467773]
[-150.20576477 324.63131714]
[-159.09465027 312.54876709]
[-166.76965332 299.66101074]
[-173.15837097 286.08956909]
[-178.20056152 271.96240234]
[-181.84867859 257.41281128]
[-184.06831360 242.57794189]
[-184.83853149 227.59773254]
[-184.15206909 212.61344910]
[-182.01539612 197.76640320]
[-178.44866943 183.19662476]
[-173.48553467 169.04150391]
[-167.17279053 155.43455505]
[-159.56994629 142.50408936]
[-150.74874878 130.37205505]
[-140.79235840 119.15285492]
[-129.79467773 108.95231628]
[-117.85942841 99.86662292]
[-105.09915924 91.98146820]
[-91.63422394 85.37121582]
[-77.59159851 80.09819794]
[-63.10372162 76.21215057]
[-48.30722046 73.74971771]
[-33.34164047 72.73412323]
[-18.34812164 73.17494965]
[-3.46805954 75.06803131]
[11.15821171 78.39552307]
[25.39275551 83.12603760]
[39.10132599 89.21496582]
[52.16760635 96.61308289]
[67.13473511 97.60561371]
[82.10186005 98.59815216]
[69.44281769 90.55149841]
[56.78377533 82.50484467]
[44.12472916 74.45819092]
[31.46568680 66.41153717]
[19.04279709 75.17169189]
[4.21208096 78.50610352]
[-10.76488400 75.90630341]
[-23.60421944 67.76874542]
[-32.34802246 55.33433914]
[-35.66292191 40.49924850]
[-33.04342270 25.52571678]
[-24.88897896 12.69709778]
[-12.44308472 3.96966076]
[2.39635253 0.67427838]
[17.36642647 3.31347203]
[30.18430710 11.48478413]
[38.89536667 23.94214821]
[42.17122269 38.78590775]
[39.51234055 53.75249481]
[52.17138290 61.79914856]
[64.83042908 69.84580231]
[77.48947144 77.89245605]
[90.14851379 85.93910980]
[82.89692688 72.80843353]
[75.64533997 59.67776489]
[63.69960022 50.60587311]
[53.44865036 39.65516281]
[45.18418121 27.13723564]
[39.14135361 13.40827942]
[35.49211121 -1.14105213]
[34.34029770 -16.09676361]
[35.71868134 -31.03329849]
[39.58804321 -45.52564240]
[45.83828354 -59.16142273]
[54.29155350 -71.55264282]
[64.70731354 -82.34670258]
[76.78919983 -91.23648071]
[90.19342041 -97.96900940]
[104.53855896 -102.35272217]
[119.41643524 -104.26287842]
[134.40371704 -103.64513397]
[149.07392883 -100.51705933]
[163.00964355 -94.96765900]
[175.81433105 -87.15484619]
[187.12362671 -77.30093384]
[196.61575317 -65.68630219]
[204.02058411 -52.64144135]
[209.12745667 -38.53754044]
[211.79101562 -23.77592087]
[211.93550110 -8.77661800]
[209.55679321 6.03357267]
[204.72256470 20.23323059]
[197.57038879 33.41831207]
[188.30377197 45.21364212]
[177.18640137 55.28358841]
[164.53459167 63.34161758]
[150.70835876 69.15843964]
[136.10675049 72.56771088]
[124.13036346 81.59911346]
[112.15398407 90.63051605]
[126.99413300 88.44650269]
[139.52067566 78.78233337]
[153.23887634 84.58407593]
[162.66711426 72.18462372]
[177.74824524 70.18112183]
[189.51112366 79.24591064]
[204.35127258 77.06188965]
[219.19142151 74.87787628]
[221.48069763 59.93629837]
[228.07385254 46.33403778]
[238.38467407 35.28059006]
[251.49627686 27.75882530]
[266.24282837 24.43757248]
[281.31304932 25.61215591]
[295.36694336 31.17812920]
[307.15478516 40.64057159]
[315.62844849 53.15809250]
[320.03448486 67.61763763]
[319.98104858 82.73347473]
[315.47296143 97.16151428]
[306.91101074 109.61882782]
[295.05657959 118.99771881]
[280.96371460 124.46421814]
[265.88555908 125.53224945]
[251.16284180 122.10684967]
[238.10472107 114.49259186]
[227.87229919 103.36654663]
[221.37544250 89.71802521]
[206.53529358 91.90203857]
[191.69514465 94.08605957]
[183.04255676 106.15537262]
[168.02365112 108.58168030]
[155.42289734 99.42422485]
[143.95782471 108.93217468]
[129.17814636 103.28665161]
[114.33799744 105.47067261]
[109.75489044 119.75335693]
[120.55344391 130.16447449]
[131.35198975 140.57557678]
[146.88247681 138.74856567]
[159.92546082 147.37496948]
[164.32243347 162.38165283]
[157.99728394 176.68293762]
[143.93655396 183.52616882]
[128.77929688 179.68020630]
[119.68228912 166.96098328]
[120.94087982 151.37413025]
[110.14232635 140.96301270]
[99.34377289 130.55191040]
[103.82904053 144.86561584]
[108.31430817 159.17933655]
[114.25487518 172.95285034]
[118.83142090 187.23764038]
[122.00079346 201.89898682]
[123.73310852 216.79861450]
[124.01202393 231.79602051]
[122.83489990 246.74977112]
[120.21285248 261.51882935]
[116.17060852 275.96389771]
[110.74627686 289.94876099]
[103.99102020 303.34155273]
[95.96855164 316.01593018]
[86.75452423 327.85238647]
[76.43583679 338.73928833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[107 143]
[108 142]
[110 140]
[113 137]
[114 136]
[115 135]
[144 156]
[145 155]
[146 154]
] def

init

% Start Annotations
47 70 0.16 1 colorpair
49 68 0.0 0.2 colorpair
50 67 0.0 1 colorpair
107 143 0.0 1 colorpair
108 142 0.16 1 colorpair
110 140 0.0 1 colorpair
113 137 0.0 1 colorpair
114 136 0.16 0.2 colorpair
115 135 0.16 0.2 colorpair
144 156 0.16 0.2 colorpair
145 155 0.0 1 colorpair
146 154 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
47 cmark
70 cmark
48 69 4 gmark
48 cmark
69 cmark
49 68 2 gmark
51 66 4 gmark
51 cmark
66 cmark
108 cmark
114 136 2 gmark
114 cmark
115 135 2 gmark
115 cmark
144 156 2 gmark
156 cmark

% End Annotations
showpage
end
%%EOF
