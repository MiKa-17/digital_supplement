%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUUAUCGCGCUAAUCGUUACCAGUAUCACGCUAUUAGGCGUAUUACUGCUGACAAAACAAAAUCUCUGCGACGUUAGCUUCCGAAGCGGCAAAGUGGAGAUAGUGGCUCACAUGGCCUACGGAUCCGAGUAAGUGAGCGACAGGGGUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[92.13117981 295.26281738]
[77.51940918 290.31311035]
[67.92110443 278.23516846]
[66.39905548 262.88308716]
[73.43894196 249.15560913]
[86.79434967 241.43313599]
[87.39833832 226.44531250]
[88.00232697 211.45747375]
[88.60631561 196.46963501]
[89.21031189 181.48179626]
[81.99176025 168.45330811]
[90.27845764 154.97587585]
[90.88244629 139.98803711]
[82.65736389 137.16726685]
[75.21177673 132.67593384]
[68.88035583 126.71591949]
[63.94766617 119.55509949]
[60.63542557 111.51533508]
[45.71140289 113.02316284]
[30.78738022 114.53099060]
[15.86335659 116.03882599]
[2.91085362 125.12415314]
[-10.52972126 118.70541382]
[-25.45374489 120.21324921]
[-40.37776566 121.72107697]
[-55.30178833 123.22890472]
[-70.22581482 124.73673248]
[-80.20740509 136.69523621]
[-95.36396027 138.01177979]
[-106.70304871 128.42216492]
[-121.62706757 129.92999268]
[-136.55108643 131.43783569]
[-151.47511292 132.94566345]
[-166.39913940 134.45349121]
[-179.38151550 144.47296143]
[-194.44491577 137.99018860]
[-196.09338379 121.67411041]
[-182.63113403 112.30929565]
[-167.90696716 119.52946472]
[-152.98294067 118.02163696]
[-138.05892944 116.51380920]
[-123.13490295 115.00597382]
[-108.21087646 113.49814606]
[-99.01911926 101.83422089]
[-83.90551758 100.09246826]
[-71.73364258 109.81271362]
[-56.80961990 108.30488586]
[-41.88559723 106.79705048]
[-26.96157455 105.28922272]
[-12.03755188 103.78139496]
[-0.15251440 94.80390930]
[14.35552692 101.11479950]
[29.27954865 99.60697174]
[44.20357132 98.09914398]
[59.12759399 96.59130859]
[60.28801346 89.74666595]
[62.58621597 83.19579315]
[65.95635223 77.12637329]
[70.30187225 71.71230316]
[75.49826813 67.10869598]
[81.39665985 63.44745636]
[87.82804871 60.83348083]
[94.60817719 59.34165573]
[101.54278564 59.01472855]
[104.83851624 44.38126755]
[108.13424683 29.74780655]
[111.42996979 15.11434555]
[114.72570038 0.48088503]
[118.02143097 -14.15257549]
[121.31716156 -28.78603745]
[124.61288452 -43.41949844]
[114.54329681 -55.07752228]
[113.28385162 -70.25207520]
[121.10868073 -83.10649872]
[134.83795166 -88.82009125]
[138.13368225 -103.45355225]
[141.42939758 -118.08701324]
[140.26048279 -127.20556641]
[144.94165039 -132.98054504]
[148.53137207 -147.54467773]
[152.12110901 -162.10881042]
[155.71084595 -176.67292786]
[153.63075256 -193.49879456]
[169.22323608 -200.15545654]
[179.93617249 -187.01509094]
[170.27497864 -173.08320618]
[166.68524170 -158.51907349]
[163.09550476 -143.95494080]
[159.50576782 -129.39082336]
[156.06286621 -114.79128265]
[152.76713562 -100.15782166]
[149.47140503 -85.52436066]
[159.42575073 -74.47677612]
[160.98449707 -59.50900269]
[153.34143066 -46.33945465]
[139.24635315 -40.12376785]
[135.95062256 -25.49030876]
[132.65489197 -10.85684681]
[129.35916138 3.77661347]
[126.06343079 18.41007423]
[122.76770782 33.04353333]
[119.47197723 47.67699432]
[116.17624664 62.31045532]
[135.31114197 79.13624573]
[140.81735229 104.01460266]
[155.22511292 108.18786621]
[170.63308716 104.59549713]
[180.70520020 115.56826019]
[195.11297607 119.74152374]
[209.52075195 123.91478729]
[223.92852783 128.08804321]
[238.33628845 132.26130676]
[252.74406433 136.43457031]
[263.74716187 128.60693359]
[277.05548096 128.56492615]
[287.78860474 136.09902954]
[292.14010620 148.26258850]
[306.46090698 152.72512817]
[315.84869385 147.09002686]
[326.56661987 147.57467651]
[335.05154419 153.77435303]
[338.61730957 163.42495728]
[352.74679565 168.46052551]
[368.77102661 164.97389221]
[379.60095215 177.28829956]
[374.09567261 192.73576355]
[357.91857910 195.42524719]
[347.71124268 182.59004211]
[333.58172607 177.55447388]
[314.91601562 182.47247314]
[301.99838257 167.04594421]
[287.67755127 162.58340454]
[273.16464233 171.02995300]
[256.70162964 166.30032349]
[248.57080078 150.84234619]
[234.16302490 146.66908264]
[219.75526428 142.49581909]
[205.34748840 138.32255554]
[190.93971252 134.14929199]
[176.53195190 129.97602844]
[162.15452576 133.86689758]
[151.05184937 122.59563446]
[136.64408875 118.42237091]
[123.97376251 133.27809143]
[105.87028503 140.59202576]
[105.26629639 155.57986450]
[112.44164276 169.68038940]
[104.19814301 182.08578491]
[103.59415436 197.07362366]
[102.99016571 212.06146240]
[102.38617706 227.04930115]
[101.78218842 242.03712463]
[114.47289276 250.80921936]
[120.38534546 265.05865479]
[117.63289642 280.23849487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 152]
[7 151]
[8 150]
[9 149]
[10 148]
[12 146]
[13 145]
[18 55]
[19 54]
[20 53]
[21 52]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[75 92]
[76 91]
[77 90]
[79 89]
[80 88]
[81 87]
[82 86]
[105 143]
[106 142]
[108 140]
[109 139]
[110 138]
[111 137]
[112 136]
[113 135]
[117 132]
[118 131]
[122 129]
[123 128]
] def

init

% Start Annotations
6 152 0.0 1 colorpair
7 151 0.0 1 colorpair
8 150 0.0 1 colorpair
9 149 0.0 1 colorpair
10 148 0.0 1 colorpair
12 146 0.0 1 colorpair
13 145 0.0 1 colorpair
18 55 0.0 1 colorpair
19 54 0.0 1 colorpair
20 53 0.0 1 colorpair
21 52 0.0 1 colorpair
23 50 0.0 1 colorpair
24 49 0.0 1 colorpair
25 48 0.0 1 colorpair
26 47 0.0 1 colorpair
27 46 0.0 1 colorpair
30 43 0.0 1 colorpair
31 42 0.0 1 colorpair
32 41 0.0 1 colorpair
33 40 0.0 1 colorpair
34 39 0.0 1 colorpair
64 103 0.0 1 colorpair
65 102 0.0 1 colorpair
66 101 0.0 1 colorpair
67 100 0.0 1 colorpair
68 99 0.0 1 colorpair
69 98 0.0 1 colorpair
70 97 0.0 1 colorpair
71 96 0.0 1 colorpair
75 92 0.0 1 colorpair
76 91 0.0 1 colorpair
77 90 0.0 1 colorpair
79 89 0.0 1 colorpair
80 88 0.0 1 colorpair
81 87 0.0 1 colorpair
82 86 0.0 1 colorpair
105 143 0.0 1 colorpair
106 142 0.0 1 colorpair
108 140 0.0 1 colorpair
109 139 0.0 1 colorpair
110 138 0.0 1 colorpair
111 137 0.0 1 colorpair
112 136 0.0 1 colorpair
113 135 0.0 1 colorpair
117 132 0.0 1 colorpair
118 131 0.0 1 colorpair
122 129 0.0 1 colorpair
123 128 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
