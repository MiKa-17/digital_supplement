%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:21:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACCUGAUGAUGUUUAGGCAUGCAGACGGCCUCGUUGGUUAAUUGAAAA_AUUACCUUCGGGGCUUUCUUCUUUCUGCCUCAC__CAUAGCUGCAAAAC_UGCCGACAGCAUGAGGCAAAAAGCCUCAAGCGCCGCGGCCAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[133.16625977 257.19033813]
[129.62109375 242.61529541]
[126.07593536 228.04026794]
[109.91209412 219.53160095]
[104.96257782 201.61836243]
[114.79553223 185.47486877]
[110.67372131 171.05229187]
[106.55190277 156.62973022]
[102.43008423 142.20715332]
[98.30826569 127.78457642]
[94.18645477 113.36199951]
[98.01572418 127.86499023]
[98.19251251 142.86395264]
[94.70614624 157.45317078]
[87.76714325 170.75167847]
[77.79452515 181.95643616]
[65.39048004 190.39086914]
[51.30401993 195.54565430]
[36.38576508 197.10951233]
[21.53654861 194.98802185]
[7.65303659 189.30928040]
[-4.42641497 180.41619873]
[-13.97238922 168.84579468]
[-20.40845490 155.29672241]
[-23.34596825 140.58717346]
[-22.60755157 125.60536194]
[-18.23779106 111.25596619]
[-10.50055504 98.40547180]
[0.13694343 87.82985687]
[13.03236103 80.16772461]
[27.40700912 75.88175964]
[42.39287567 75.23076630]
[57.08504105 78.25405884]
[70.59632111 84.76906586]
[82.10769653 94.37902069]
[70.78922272 84.53563690]
[59.47075653 74.69224548]
[43.98021698 71.47451019]
[39.45408630 57.28425598]
[28.13561630 47.44087219]
[16.81714630 37.59748459]
[5.49867678 27.75409889]
[-5.81979227 17.91071129]
[-17.13826180 8.06732559]
[-28.45673180 -1.77606070]
[-44.00667953 -0.86125958]
[-55.34499359 -11.00508881]
[-56.12128830 -25.83522606]
[-67.43975830 -35.67861176]
[-78.75822449 -45.52199936]
[-92.34792328 -38.71107864]
[-107.50994873 -37.62414551]
[-121.93220520 -42.42694855]
[-133.41540527 -52.38709641]
[-140.20845032 -65.98574066]
[-141.27543640 -81.14917755]
[-136.45365906 -95.56510925]
[-126.47841644 -107.03519440]
[-112.87084961 -113.81034088]
[-97.70601654 -114.85737610]
[-83.29644012 -110.01664734]
[-71.83948517 -100.02632141]
[-65.08224487 -86.40985870]
[-64.05516052 -71.24365997]
[-68.91484070 -56.84046555]
[-57.59637070 -46.99708176]
[-46.27790070 -37.15369415]
[-31.48348045 -38.44237518]
[-19.86472130 -28.62101746]
[-18.61334419 -13.09453011]
[-7.29487562 -3.25114369]
[4.02359390 6.59224224]
[15.34206295 16.43562889]
[26.66053200 26.27901459]
[37.97900009 36.12240219]
[49.29747009 45.96578598]
[63.97843552 48.47945786]
[69.31414032 63.37377930]
[80.63261414 73.21716309]
[91.95108032 83.06055450]
[84.95735168 69.79074860]
[88.66735840 55.25679016]
[101.16561127 46.96260071]
[115.99924469 49.19048309]
[125.50960541 60.79017639]
[124.78649139 75.77273560]
[114.20136261 86.40347290]
[127.91261292 80.32058716]
[141.62387085 74.23770905]
[155.33512878 68.15483093]
[169.04638672 62.07194901]
[182.75764465 55.98907089]
[196.46890259 49.90618896]
[195.38560486 36.45148849]
[198.51051331 23.34342575]
[205.52360535 11.86354542]
[215.72543335 3.12970757]
[228.10682678 -2.01275373]
[241.44880676 -3.07283616]
[254.44247437 0.03928314]
[265.81753540 7.00482321]
[274.46643066 17.12899208]
[288.40869141 11.59603310]
[302.35092163 6.06307411]
[316.29318237 0.53011525]
[330.23544312 -5.00284386]
[337.88964844 -19.10222054]
[353.70989990 -21.76674461]
[365.56021118 -10.95242310]
[364.35006714 5.04492283]
[351.00778198 13.95349884]
[335.76840210 8.93940735]
[321.82614136 14.47236633]
[307.88388062 20.00532532]
[293.94165039 25.53828430]
[279.99938965 31.07124329]
[280.15713501 47.67471313]
[273.93328857 63.10784149]
[262.25003052 75.00906372]
[246.86717224 81.54570007]
[230.11715698 81.69617462]
[214.55143738 75.40951538]
[202.55178833 63.61744690]
[188.84053040 69.70032501]
[175.12927246 75.78321075]
[161.41801453 81.86608887]
[147.70675659 87.94896698]
[133.99549866 94.03184509]
[120.28424072 100.11472321]
[117.96932220 103.81928253]
[115.07187653 106.60813141]
[111.86179352 108.41413116]
[108.60902405 109.24018860]
[112.73084259 123.66275787]
[116.85266113 138.08532715]
[120.97447205 152.50790405]
[125.09629059 166.93048096]
[129.21810913 181.35305786]
[140.59568787 185.01870728]
[148.68949890 193.65101624]
[151.55680847 205.00772095]
[148.59219360 216.21508789]
[140.65097046 224.49510193]
[144.19613647 239.07012939]
[147.74130249 253.64517212]
[162.73092651 256.33422852]
[175.32725525 264.89300537]
[183.34788513 277.83862305]
[185.40319824 292.92822266]
[181.13710022 307.54739380]
[171.28871155 319.16329956]
[157.56434631 325.76339722]
[142.34181213 326.20422363]
[128.25851440 320.40933228]
[117.75445557 309.38278198]
[112.64955139 295.03497314]
[113.82823944 279.85174561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[6 138]
[7 137]
[8 136]
[9 135]
[10 134]
[11 133]
[35 80]
[36 79]
[37 78]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[48 67]
[49 66]
[50 65]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[92 124]
[93 123]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% Start Annotations
1 145 0.0 1 colorpair
2 144 0.0 1 colorpair
3 143 0.0 1 colorpair
6 138 0.0 1 colorpair
7 137 0.0 1 colorpair
8 136 0.0 1 colorpair
9 135 0.0 1 colorpair
10 134 0.0 1 colorpair
11 133 0.0 1 colorpair
35 80 0.0 1 colorpair
36 79 0.0 1 colorpair
37 78 0.0 0.6 colorpair
39 76 0.16 1 colorpair
40 75 0.0 1 colorpair
41 74 0.0 1 colorpair
42 73 0.0 1 colorpair
43 72 0.0 1 colorpair
44 71 0.0 1 colorpair
45 70 0.0 1 colorpair
48 67 0.0 1 colorpair
49 66 0.0 1 colorpair
50 65 0.0 1 colorpair
87 129 0.0 1 colorpair
88 128 0.0 1 colorpair
89 127 0.0 0.6 colorpair
90 126 0.0 1 colorpair
91 125 0.0 0.6 colorpair
92 124 0.16 1 colorpair
93 123 0.16 1 colorpair
102 116 0.16 1 colorpair
103 115 0.16 0.6 colorpair
104 114 0.16 1 colorpair
105 113 0.16 1 colorpair
106 112 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
37 78 1 gmark
39 cmark
89 127 1 gmark
91 125 1 gmark
92 cmark
93 cmark
123 cmark
102 cmark
116 cmark
103 115 1 gmark
103 cmark
115 cmark
104 cmark
114 cmark
105 cmark
106 112 1 gmark

% End Annotations
showpage
end
%%EOF
