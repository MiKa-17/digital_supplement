%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:18:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___GCCAC____GGCGUUA__UUUACUGGCCUGUUUAUUAGUGGUCAGCGUAACUCUUUUGAUUUUUAC__AUUAAUGAAUCGAAGUAUGUUAUGCGAGCUUACCAUCAGACGCG_GUAACCAGGCGGUGGCGGCUAAGCCUUCC____C_____AG\
) } def
/len { sequence length } bind def

/coor [
[164.12359619 398.45343018]
[179.11332703 399.00830078]
[193.36358643 403.69125366]
[205.75961304 412.13552856]
[199.40533447 398.54794312]
[193.05104065 384.96032715]
[186.69674683 371.37271118]
[180.34246826 357.78512573]
[172.41629028 356.72036743]
[165.49201965 352.53341675]
[160.75807190 345.85491943]
[159.06166077 337.75009155]
[160.75804138 329.54885864]
[165.63928223 322.62780762]
[160.38461304 308.57830811]
[148.52282715 308.26644897]
[137.43702698 303.93862915]
[128.44909668 296.08560181]
[122.63931274 285.61993408]
[120.71652985 273.77008057]
[122.93180084 261.93603516]
[129.04582214 251.52413940]
[138.35461426 243.77972412]
[133.94686890 229.44195557]
[129.53910828 215.10418701]
[125.13135529 200.76641846]
[120.58127594 186.47317505]
[115.88932800 172.22586060]
[101.42911530 173.93919373]
[86.91349792 172.78591919]
[72.90523529 168.81076050]
[59.94742966 162.16781616]
[48.54245377 153.11465454]
[39.13246536 142.00225830]
[32.08229828 129.26144409]
[27.66527557 115.38616943]
[26.05265045 100.91438293]
[27.30694199 86.40714264]
[31.37952042 72.42689514]
[38.11249542 59.51564407]
[47.24482727 48.17396164]
[58.42246246 38.84156036]
[71.21204376 31.88025093]
[59.76115417 20.96294403]
[63.41695023 6.52395391]
[59.00919724 -7.81381798]
[53.46709442 -15.14505768]
[54.65939713 -22.48063850]
[50.53758240 -36.90321350]
[46.41576385 -51.32578659]
[42.29394913 -65.74835968]
[38.17213058 -80.17093658]
[34.05031586 -94.59350586]
[29.92849922 -109.01608276]
[13.98279667 -114.57931519]
[4.57161760 -128.40214539]
[5.22725725 -144.94575500]
[15.49507618 -157.72186279]
[11.08732224 -172.05964661]
[6.67956781 -186.39741516]
[2.27181363 -200.73518372]
[-2.13594055 -215.07295227]
[-7.67804050 -222.40419006]
[-6.48573828 -229.73977661]
[-10.60755444 -244.16235352]
[-14.72937107 -258.58493042]
[-29.72739410 -261.63745117]
[-41.58157349 -271.31924438]
[-47.56790924 -285.40548706]
[-46.31078339 -300.65927124]
[-38.09907150 -313.57540894]
[-24.81976700 -321.18582153]
[-9.52435684 -321.74176025]
[4.27238464 -315.11538696]
[13.40006828 -302.82946777]
[15.76121998 -287.70718384]
[10.81326294 -273.22354126]
[-0.30679777 -262.70675659]
[3.81501889 -248.28416443]
[7.93683529 -233.86160278]
[12.20183182 -219.48071289]
[16.60958481 -205.14294434]
[21.01733971 -190.80516052]
[25.42509460 -176.46739197]
[29.83284760 -162.12962341]
[42.83775330 -158.98005676]
[52.65740967 -149.73153687]
[56.64327240 -136.73112488]
[53.64755630 -123.35638428]
[44.35107422 -113.13789368]
[48.47288895 -98.71532440]
[52.59470367 -84.29274750]
[56.71652222 -69.87017822]
[60.83833694 -55.44760132]
[64.96015167 -41.02502823]
[69.08197021 -26.60245514]
[73.34696960 -12.22157192]
[77.75472260 2.11619973]
[88.89034271 12.00797367]
[85.54981995 27.47249603]
[100.87294006 26.05215073]
[116.15826416 27.83382225]
[130.74391174 32.74036789]
[143.99832153 40.55932236]
[155.34756470 50.95212173]
[164.30018616 63.46874619]
[170.46855164 77.56721497]
[173.58555603 92.63703918]
[173.51622009 108.02569580]
[170.26356506 123.06682587]
[163.96841431 137.10914612]
[154.90336609 149.54458618]
[143.46095276 159.83470154]
[130.13662720 167.53392029]
[134.82858276 181.78121948]
[140.51535034 189.00082397]
[139.46913147 196.35865784]
[143.87687683 210.69642639]
[148.28463745 225.03419495]
[152.69238281 239.37197876]
[170.76214600 242.83798218]
[184.54193115 254.90213013]
[190.31257629 272.19482422]
[186.57400513 289.95111084]
[174.43411255 303.32363892]
[179.68878174 317.37313843]
[198.03044128 330.19869995]
[193.93006897 351.43081665]
[200.28436279 365.01843262]
[206.63864136 378.60604858]
[212.99293518 392.19363403]
[219.34721375 405.78125000]
[228.26023865 417.84600830]
[239.38075256 427.91247559]
[250.50128174 437.97894287]
[266.30160522 444.12600708]
[264.76873779 461.01052856]
[248.11975098 464.21166992]
[240.43481445 449.09948730]
[229.31428528 439.03298950]
[218.19375610 428.96652222]
[222.62283325 443.29772949]
[222.91131592 458.29495239]
[219.03663635 472.78585815]
[211.30169678 485.63775635]
[200.31111145 495.84594727]
[186.92404175 502.61248779]
[172.18692017 505.40844727]
[157.25175476 504.01525879]
[143.28602600 498.54180908]
[131.38143921 489.41601562]
[122.46853638 477.35116577]
[117.24407196 463.29040527]
[116.11642456 448.33285522]
[119.17374420 433.64773560]
[126.17704010 420.38296509]
[136.57887268 409.57546997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 132]
[5 131]
[6 130]
[7 129]
[8 128]
[14 126]
[15 125]
[23 120]
[24 119]
[25 118]
[26 117]
[27 115]
[28 114]
[43 100]
[45 98]
[46 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[53 91]
[54 90]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[64 80]
[65 79]
[66 78]
[133 141]
[134 140]
[135 139]
] def

init

% Start Annotations
4 132 0.0 0.6 colorpair
5 131 0.0 1 colorpair
6 130 0.0 0.6 colorpair
7 129 0.0 1 colorpair
8 128 0.16 1 colorpair
14 126 0.16 1 colorpair
15 125 0.0 1 colorpair
23 120 0.0 0.6 colorpair
24 119 0.0 1 colorpair
25 118 0.0 1 colorpair
26 117 0.16 1 colorpair
27 115 0.16 1 colorpair
28 114 0.0 1 colorpair
43 100 0.16 1 colorpair
45 98 0.0 0.6 colorpair
46 97 0.0 1 colorpair
48 96 0.0 1 colorpair
49 95 0.0 1 colorpair
50 94 0.0 0.6 colorpair
51 93 0.16 1 colorpair
52 92 0.16 1 colorpair
53 91 0.0 0.6 colorpair
54 90 0.0 1 colorpair
58 85 0.0 0.6 colorpair
59 84 0.0 1 colorpair
60 83 0.0 1 colorpair
61 82 0.16 1 colorpair
62 81 0.0 0.6 colorpair
64 80 0.16 1 colorpair
65 79 0.0 1 colorpair
66 78 0.0 0.6 colorpair
133 141 0.0 0.6 colorpair
134 140 0.16 1 colorpair
135 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 132 1 gmark
6 130 1 gmark
8 cmark
126 cmark
23 120 1 gmark
26 cmark
27 cmark
43 cmark
100 cmark
45 98 1 gmark
50 94 1 gmark
93 cmark
52 cmark
53 91 1 gmark
58 85 1 gmark
61 cmark
82 cmark
62 81 1 gmark
64 cmark
80 cmark
66 78 1 gmark
133 141 1 gmark
134 cmark
140 cmark

% End Annotations
showpage
end
%%EOF
