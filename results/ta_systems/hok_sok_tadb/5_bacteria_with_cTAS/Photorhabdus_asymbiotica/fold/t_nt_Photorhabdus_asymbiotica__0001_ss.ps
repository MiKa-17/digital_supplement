%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACCUUAUGUUGCGAAGCAUUAGAAG_AGCCUCAAAUCGAUUGAAAG_UCAGAUGGGGCUUUCCUCUAUCCGC_____________UCCACAACGCCAAAGACAGAAAGCCUCAAGCACCCG__\
) } def
/len { sequence length } bind def

/coor [
[97.65634155 155.99255371]
[96.27231598 141.05653381]
[94.88829041 126.12052155]
[89.18066406 124.31775665]
[84.02020264 121.28514099]
[79.66790771 117.17606354]
[65.94599915 123.23487854]
[52.22409058 129.29370117]
[38.50218201 135.35250854]
[24.78027534 141.41133118]
[11.05836678 147.47013855]
[0.59209168 162.57006836]
[-16.74474144 160.10888672]
[-30.32304192 166.48303223]
[-43.90134430 172.85717773]
[-57.47964478 179.23132324]
[-66.68392944 192.09957886]
[-81.49282074 190.50398254]
[-95.07112122 196.87812805]
[-108.64942169 203.25227356]
[-122.22772217 209.62641907]
[-135.80603027 216.00056458]
[-144.72854614 229.75994873]
[-161.08956909 228.64239502]
[-168.05827332 213.79756165]
[-158.46585083 200.49652100]
[-142.18017578 202.42225647]
[-128.60186768 196.04811096]
[-115.02356720 189.67396545]
[-101.44526672 183.29981995]
[-87.86696625 176.92567444]
[-79.63389587 164.51335144]
[-63.85379028 165.65303040]
[-50.27548981 159.27888489]
[-36.69718933 152.90473938]
[-23.11888695 146.53059387]
[-18.68209076 135.21675110]
[-7.34701443 129.81889343]
[4.99955225 133.74822998]
[18.72146034 127.68941498]
[32.44336700 121.63059998]
[46.16527557 115.57178497]
[59.88718414 109.51296997]
[73.60909271 103.45415497]
[73.61384583 90.01071167]
[80.41370392 77.52554321]
[92.99887085 69.38099670]
[84.80992126 56.81353378]
[76.62097168 44.24607086]
[68.43202209 31.67860794]
[60.24307632 19.11114502]
[52.05412674 6.54368353]
[43.86517715 -6.02377892]
[29.00504112 -12.95979595]
[27.85149002 -29.31832123]
[41.59120178 -38.27110672]
[56.08993530 -30.60829353]
[56.43264008 -14.21272850]
[64.62158966 -1.64526570]
[72.81053925 10.92219639]
[80.99948883 23.48965836]
[89.18843842 36.05712128]
[97.37738800 48.62458420]
[105.56633759 61.19204712]
[119.73274231 66.12286377]
[133.95515442 61.35599518]
[148.17756653 56.58912277]
[162.39996338 51.82225037]
[176.62237549 47.05537796]
[190.84478760 42.28850937]
[205.06719971 37.52163696]
[219.28961182 32.75476456]
[233.51202393 27.98789406]
[247.73442078 23.22102356]
[261.95684814 18.45415115]
[276.12322998 13.52333355]
[290.23175049 8.42922688]
[304.34027100 3.33511925]
[318.44876099 -1.75898790]
[332.55728149 -6.85309505]
[338.77340698 -18.22135544]
[350.69918823 -22.14518738]
[361.72128296 -17.02643204]
[375.94369507 -21.79330254]
[375.17379761 -36.87010193]
[378.50128174 -51.59526825]
[385.67916870 -64.87609863]
[396.17486572 -75.72705841]
[409.20944214 -83.34294891]
[423.81573486 -87.15860748]
[438.90979004 -86.89089203]
[453.37158203 -82.55966949]
[466.12789917 -74.48634338]
[476.23217773 -63.27000809]
[482.93460083 -49.74299622]
[485.73782349 -34.90909195]
[484.43377686 -19.86907768]
[479.11926270 -5.73901844]
[470.18865967 6.43254185]
[458.30465698 15.74239063]
[444.34915161 21.49967766]
[429.35772705 23.27717209]
[414.44284058 20.94297218]
[400.71127319 14.67029190]
[389.18197632 4.92460537]
[380.71057129 -7.57089281]
[366.48815918 -2.80402160]
[355.64892578 10.94859600]
[337.65139771 7.25541544]
[323.54287720 12.34952259]
[309.43435669 17.44363022]
[295.32586670 22.53773689]
[281.21734619 27.63184357]
[275.94714355 32.90947723]
[266.72369385 32.67656326]
[252.50129700 37.44343185]
[238.27888489 42.21030426]
[224.05647278 46.97717667]
[209.83407593 51.74404526]
[195.61166382 56.51091766]
[181.38925171 61.27779007]
[167.16683960 66.04466248]
[152.94442749 70.81153107]
[138.72201538 75.57839966]
[124.49961090 80.34527588]
[129.55413818 93.73484802]
[128.05001831 107.41136169]
[120.80922699 118.45566559]
[109.82430267 124.73649597]
[111.20832825 139.67251587]
[112.59235382 154.60852051]
[123.96656799 165.92253113]
[122.06947327 181.85302734]
[108.35636139 190.17948914]
[93.34675598 184.51457214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 36]
[14 35]
[15 34]
[16 33]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[65 125]
[66 124]
[67 123]
[68 122]
[69 121]
[70 120]
[71 119]
[72 118]
[73 117]
[74 116]
[75 115]
[76 113]
[77 112]
[78 111]
[79 110]
[80 109]
[83 107]
[84 106]
] def

init

% Start Annotations
1 131 0.0 1 colorpair
2 130 0.0 1 colorpair
3 129 0.16 1 colorpair
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.16 1 colorpair
13 36 0.0 0.6 colorpair
14 35 0.16 1 colorpair
15 34 0.0 1 colorpair
16 33 0.0 1 colorpair
18 31 0.0 1 colorpair
19 30 0.0 1 colorpair
20 29 0.0 1 colorpair
21 28 0.0 1 colorpair
22 27 0.0 1 colorpair
47 64 0.16 1 colorpair
48 63 0.0 0.6 colorpair
49 62 0.16 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 0.6 colorpair
53 58 0.0 1 colorpair
65 125 0.0 1 colorpair
66 124 0.0 1 colorpair
67 123 0.0 1 colorpair
68 122 0.0 1 colorpair
69 121 0.16 1 colorpair
70 120 0.0 1 colorpair
71 119 0.0 1 colorpair
72 118 0.0 0.6 colorpair
73 117 0.0 1 colorpair
74 116 0.16 1 colorpair
75 115 0.0 0.6 colorpair
76 113 0.0 1 colorpair
77 112 0.0 1 colorpair
78 111 0.0 1 colorpair
79 110 0.0 0.6 colorpair
80 109 0.0 0.6 colorpair
83 107 0.0 1 colorpair
84 106 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
129 cmark
39 cmark
13 36 1 gmark
14 cmark
35 cmark
47 cmark
64 cmark
48 63 1 gmark
49 cmark
62 cmark
52 59 1 gmark
121 cmark
72 118 1 gmark
74 cmark
75 115 1 gmark
79 110 1 gmark
80 109 1 gmark

% End Annotations
showpage
end
%%EOF
