%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GAAGCCGCAAAAAAUCGCAAUAUUUAGUUUGAUUAUUAUUUGUGUGACGUUACUCAUAUUCACGUGGAUAACAAGGGGCUCACUCUGUAAGCUCCACAUCAAACGAGGUAAUACAGAGGUUGCGGCAAUCAUGGCUUACGAAUCCAG____\
) } def
/len { sequence length } bind def

/coor [
[209.41514587 544.79797363]
[212.56652832 530.08520508]
[218.44560242 516.23486328]
[226.83987427 503.74752808]
[237.44586182 493.07470703]
[249.88020325 484.60217285]
[243.92860413 470.83340454]
[237.97700500 457.06466675]
[232.02539062 443.29592896]
[226.07379150 429.52716064]
[220.12219238 415.75842285]
[214.17059326 401.98968506]
[202.83757019 400.16357422]
[193.71618652 392.99783325]
[189.16564941 382.19763184]
[190.43440247 370.42584229]
[197.32020569 360.64663696]
[191.93516541 346.64660645]
[175.94281006 344.53421021]
[163.11347961 334.60156250]
[156.99261475 319.47433472]
[159.33161926 303.22955322]
[169.58795166 290.29681396]
[163.91844177 276.40951538]
[158.24894714 262.52221680]
[152.57945251 248.63494873]
[146.90994263 234.74765015]
[134.93611145 225.88894653]
[136.88345337 210.18803406]
[131.21395874 196.30075073]
[125.54445648 182.41346741]
[119.87495422 168.52616882]
[114.20545197 154.63888550]
[108.53594971 140.75160217]
[102.86644745 126.86431122]
[84.96518707 122.44687653]
[74.06668091 107.57435608]
[75.24713898 89.17393494]
[63.71288300 79.58431244]
[52.17862320 69.99468231]
[40.64436722 60.40505981]
[29.11010742 50.81543732]
[17.57584953 41.22581100]
[6.04159212 31.63618851]
[-5.49266577 22.04656410]
[-17.02692413 12.45693970]
[-28.56118202 2.86731505]
[-40.09543991 -6.72230911]
[-51.62969589 -16.31193352]
[-65.49203491 -9.92457771]
[-80.75279236 -10.19299889]
[-94.38193512 -17.06389999]
[-103.67338562 -29.17305946]
[-106.78231812 -44.11619568]
[-103.09145355 -58.92633438]
[-93.33361053 -70.66291809]
[-79.44622803 -76.99563599]
[-64.18664551 -76.66712189]
[-50.58466721 -69.74259949]
[-41.34097672 -57.59694672]
[-38.29091644 -42.64168167]
[-42.04007339 -27.84619141]
[-30.50581551 -18.25656700]
[-18.97155762 -8.66694260]
[-7.43729925 0.92268145]
[4.09695864 10.51230621]
[15.63121605 20.10193062]
[27.16547394 29.69155502]
[38.69973373 39.28117752]
[50.23398972 48.87080383]
[61.76824951 58.46042633]
[73.30250549 68.05004883]
[84.83676147 77.63967896]
[89.10095215 75.27919006]
[93.71984863 73.72325134]
[98.54314423 73.02249908]
[103.41384888 73.19974518]
[109.36544800 59.43099976]
[115.31704712 45.66225052]
[121.26865387 31.89350319]
[127.22025299 18.12475395]
[133.17185974 4.35600519]
[131.54519653 -11.38135719]
[143.69723511 -19.99397659]
[149.64883423 -33.76272583]
[150.38334656 -50.70075226]
[166.86276245 -54.68386078]
[175.25216675 -39.95109940]
[163.41758728 -27.81112289]
[157.46598816 -14.04237461]
[159.51834106 0.71015424]
[146.94059753 10.30760670]
[140.98899841 24.07635498]
[135.03739929 37.84510422]
[129.08580017 51.61385345]
[123.13420105 65.38259888]
[117.18259430 79.15135193]
[125.91149902 92.35134888]
[125.75009155 108.17562103]
[116.75373840 121.19480896]
[122.42324066 135.08209229]
[128.09274292 148.96939087]
[133.76223755 162.85667419]
[139.43174744 176.74395752]
[145.10124207 190.63125610]
[150.77073669 204.51853943]
[163.15008545 214.37055969]
[160.79722595 229.07815552]
[166.46673584 242.96543884]
[172.13623047 256.85272217]
[177.80574036 270.74002075]
[183.47523499 284.62731934]
[197.44590759 285.81008911]
[209.47993469 292.87454224]
[217.24807739 304.38690186]
[219.27549744 318.05920410]
[215.22151184 331.20373535]
[205.93521118 341.26156616]
[211.32025146 355.26159668]
[228.88439941 362.23526001]
[235.71571350 379.51403809]
[227.93934631 396.03808594]
[233.89094543 409.80682373]
[239.84254456 423.57556152]
[245.79414368 437.34432983]
[251.74574280 451.11306763]
[257.69735718 464.88180542]
[263.64895630 478.65057373]
[278.33972168 475.39816284]
[293.38052368 474.98504639]
[308.22766113 477.42617798]
[322.34439087 482.63323975]
[335.22045898 490.41809082]
[346.39035034 500.49923706]
[355.45031738 512.51232910]
[362.07284546 526.02301025]
[366.01849365 540.54290771]
[367.14465332 555.54718018]
[365.41061401 570.49340820]
[360.87908936 584.84130859]
[353.71383667 598.07220459]
[344.17391968 609.70776367]
[332.60418701 619.32739258]
[319.42288208 626.58337402]
[305.10647583 631.21337891]
[290.17251587 633.05010986]
[275.16085815 632.02703857]
[260.61416626 628.18127441]
[247.05827332 621.65173340]
[234.98324585 612.67456055]
[224.82556152 601.57415771]
[216.95243835 588.75189209]
[211.64846802 574.67126465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[17 119]
[18 118]
[23 112]
[24 111]
[25 110]
[26 109]
[27 108]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[34 101]
[35 100]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[84 90]
[85 89]
] def

init

% Start Annotations
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 1 colorpair
9 125 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
17 119 0.0 1 colorpair
18 118 0.0 1 colorpair
23 112 0.0 1 colorpair
24 111 0.0 1 colorpair
25 110 0.0 1 colorpair
26 109 0.0 1 colorpair
27 108 0.0 1 colorpair
29 106 0.0 1 colorpair
30 105 0.0 1 colorpair
31 104 0.0 1 colorpair
32 103 0.0 1 colorpair
33 102 0.0 1 colorpair
34 101 0.0 1 colorpair
35 100 0.0 0.2 colorpair
38 73 0.0 1 colorpair
39 72 0.0 1 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.16 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.0 1 colorpair
49 62 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 0.2 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.16 1 colorpair
82 92 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
35 100 2 gmark
66 cmark
78 96 2 gmark
81 cmark
93 cmark

% End Annotations
showpage
end
%%EOF
