%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUGCAGCAAGAACGGGUCGUUCUAAGGCUGAUGAUUAUCUGCAUCACGCUGAUAGCGCUGAUGUGGAUCACCCGCGGUUCGCUAUGUGAACUGCGCAUCACACUGGGAGACACGGAGGUAGCCGCCAUUUUGGCUUACGAAACCGAAGGG\
) } def
/len { sequence length } bind def

/coor [
[51.29110718 126.91766357]
[44.18246841 134.26586914]
[35.44112015 139.52346802]
[25.66296387 142.34603882]
[15.51099300 142.55465698]
[5.67034531 140.14726257]
[-3.19793963 135.29788208]
[-14.12408638 145.57501221]
[-25.05023384 155.85214233]
[-35.97637939 166.12927246]
[-40.84166718 185.65093994]
[-59.77517700 189.39964294]
[-70.27304077 200.11387634]
[-80.77090454 210.82810974]
[-91.26876831 221.54234314]
[-101.76663208 232.25657654]
[-112.26450348 242.97080994]
[-119.03084564 258.51602173]
[-135.84162903 256.31744385]
[-138.38265991 239.55499268]
[-122.97873688 232.47294617]
[-112.48087311 221.75871277]
[-101.98300934 211.04447937]
[-91.48513794 200.33024597]
[-80.98727417 189.61601257]
[-70.48941040 178.90177917]
[-71.50942230 168.66067505]
[-66.59246826 159.36940002]
[-57.16403580 154.24203491]
[-46.25350571 155.20312500]
[-35.32735825 144.92599487]
[-24.40121269 134.64886475]
[-13.47506523 124.37174225]
[-16.21638680 119.16876221]
[-18.14141083 113.61177063]
[-19.20607185 107.82797241]
[-19.38600159 101.94975281]
[-18.67708015 96.11166382]
[-17.09553528 90.44734192]
[-14.67756844 85.08644104]
[-26.21182632 75.49681091]
[-37.74608231 65.90718842]
[-49.28034210 56.31756592]
[-60.81459808 46.72793961]
[-72.34885406 37.13831711]
[-83.88311768 27.54869080]
[-95.41737366 17.95906639]
[-106.95162964 8.36944294]
[-118.48588562 -1.22018158]
[-130.11735535 -10.69165993]
[-141.84483337 -20.04400635]
[-153.57231140 -29.39635468]
[-169.61131287 -29.03616142]
[-179.78205872 -41.44323349]
[-176.28242493 -57.09992599]
[-161.79701233 -63.99576569]
[-147.43780518 -56.84085464]
[-144.21995544 -41.12382507]
[-132.49247742 -31.77147865]
[-120.76501465 -22.41913223]
[-113.53101349 -20.69719887]
[-108.89626312 -12.75443935]
[-97.36200714 -3.16481519]
[-85.82775116 6.42480898]
[-74.29348755 16.01443291]
[-62.75923157 25.60405731]
[-51.22497559 35.19368362]
[-39.69071579 44.78330612]
[-28.15645981 54.37293243]
[-16.62220192 63.96255493]
[-5.08794403 73.55217743]
[18.56598854 64.60276794]
[42.88312531 72.09550476]
[57.57607651 93.05960083]
[72.52616882 91.83695984]
[87.47625732 90.61431885]
[99.66523743 81.87197113]
[105.61684418 68.10322571]
[111.56844330 54.33447647]
[117.52004242 40.56572723]
[123.47164917 26.79697800]
[129.42324829 13.02822876]
[135.37484741 -0.74051988]
[141.32644653 -14.50926876]
[147.27804565 -28.27801704]
[148.01255798 -45.21604538]
[164.49197388 -49.19915390]
[172.88137817 -34.46639252]
[161.04679871 -22.32641602]
[155.09519958 -8.55766773]
[149.14360046 5.21108150]
[143.19200134 18.97982979]
[137.24040222 32.74857712]
[131.28878784 46.51732635]
[125.33718872 60.28607559]
[119.38558960 74.05482483]
[113.43399048 87.82357025]
[122.66622925 99.64582825]
[137.46691895 97.20868683]
[152.24197388 94.62070465]
[166.98986816 91.88215637]
[181.73776245 89.14361572]
[187.41154480 79.77496338]
[197.12031555 75.20056915]
[207.52108765 76.72639465]
[215.17877197 83.60247040]
[230.02609253 81.46774292]
[244.87341309 79.33302307]
[252.96365356 65.95086670]
[267.77963257 60.94879913]
[282.32571411 66.68864441]
[289.73367310 80.46021271]
[286.50567627 95.76100922]
[274.16592407 105.36644745]
[258.54086304 104.74114227]
[247.00814819 94.18034363]
[232.16081238 96.31506348]
[217.31349182 98.44979095]
[203.09851074 111.50599670]
[184.47631836 103.89150238]
[169.72842407 106.63005066]
[154.98052979 109.36859894]
[148.94190979 113.70806885]
[139.90406799 112.00937653]
[125.10337830 114.44651794]
[121.31954193 128.96211243]
[117.53602600 143.47642517]
[129.26350403 152.82876587]
[140.99096680 162.18110657]
[152.71844482 171.53346252]
[168.87181091 176.68177795]
[168.39639282 193.62905884]
[151.97979736 197.86369324]
[143.36610413 183.26092529]
[131.63862610 173.90858459]
[119.91115570 164.55624390]
[108.18368530 155.20388794]
[113.99175262 169.03379822]
[106.41753387 181.98104858]
[94.71347046 191.36267090]
[80.42810059 195.93740845]
[65.45149231 195.09997559]
[51.76518250 188.96116638]
[41.17997742 178.33322144]
[35.09638214 164.62226868]
[34.31930923 149.64241028]
[38.95157623 135.37559509]
[48.38029099 123.70943451]
[61.35795593 116.18746185]
[76.16512299 113.80483246]
[88.69889069 105.56440735]
[73.74880219 106.78704834]
[58.79871750 108.00968933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 60]
[51 59]
[52 58]
[74 153]
[75 152]
[76 151]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[98 125]
[99 124]
[100 122]
[101 121]
[102 120]
[106 118]
[107 117]
[108 116]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% Start Annotations
7 33 0.0 1 colorpair
8 32 0.0 1 colorpair
9 31 0.0 1 colorpair
10 30 0.0 1 colorpair
12 26 0.16 1 colorpair
13 25 0.0 1 colorpair
14 24 0.16 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
17 21 0.0 0.6 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
74 153 0.0 1 colorpair
75 152 0.0 1 colorpair
76 151 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.32 1 colorpair
85 89 0.0 1 colorpair
98 125 0.0 1 colorpair
99 124 0.0 1 colorpair
100 122 0.0 1 colorpair
101 121 0.0 1 colorpair
102 120 0.0 0.6 colorpair
106 118 0.0 1 colorpair
107 117 0.0 1 colorpair
108 116 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair
130 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
26 cmark
14 cmark
17 21 1 gmark
48 cmark
63 cmark
94 cmark
84 cmark
90 cmark
102 120 1 gmark

% End Annotations
showpage
end
%%EOF
