%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GGAAGAAGCUAACCUAACGUUCUCG_GACGUUAAAAGUGGCCUCGGGUUGAU_UACAUCGACACGGGGCCUUUCUCUUUCUAUCCC_____\
) } def
/len { sequence length } bind def

/coor [
[140.42582703 237.71485901]
[135.45455933 223.56259155]
[130.48329163 209.41033936]
[125.51203156 195.25807190]
[120.54077148 181.10580444]
[115.56950378 166.95355225]
[110.59824371 152.80128479]
[105.62697601 138.64901733]
[94.98265076 138.73287964]
[84.71102142 135.93962097]
[75.57506561 130.47674561]
[68.25341797 122.75003815]
[63.28992844 113.33342743]
[61.05329514 102.92640686]
[46.15801239 101.15705109]
[31.26273155 99.38770294]
[16.36745071 97.61835480]
[1.47217035 95.84899902]
[-13.42311096 94.07965088]
[-28.31839180 92.31030273]
[-43.21367264 90.54094696]
[-58.10895538 88.77159882]
[-71.55101013 97.52892303]
[-86.73278046 92.34304810]
[-92.00811768 77.19212341]
[-83.33023071 63.69865036]
[-67.35604858 62.21366501]
[-56.33960342 73.87631989]
[-41.44432068 75.64566803]
[-26.54904175 77.41501617]
[-11.65375996 79.18437195]
[3.24152112 80.95372009]
[18.13680267 82.72306824]
[33.03208160 84.49242401]
[47.92736435 86.26177216]
[62.82264709 88.03112030]
[70.89611053 73.95439911]
[83.99385834 64.37398529]
[99.85477448 60.94377518]
[115.74076843 64.25593567]
[124.30979156 51.94448471]
[132.87881470 39.63303375]
[141.44783020 27.32158279]
[150.01686096 15.01013184]
[158.58587646 2.69868016]
[167.15490723 -9.61277103]
[175.72392273 -21.92422295]
[184.29295349 -34.23567581]
[192.86196899 -46.54712677]
[201.43099976 -58.85857773]
[210.00001526 -71.17002869]
[218.56904602 -83.48148346]
[227.13807678 -95.79293060]
[227.98144531 -112.17037964]
[242.70748901 -119.38672638]
[256.16729736 -110.01841736]
[254.51460266 -93.70275879]
[239.44952393 -87.22390747]
[230.88049316 -74.91246033]
[222.31147766 -62.60100555]
[213.74244690 -50.28955460]
[205.17343140 -37.97810364]
[196.60440063 -25.66665077]
[188.03538513 -13.35519981]
[179.46635437 -1.04374826]
[170.89733887 11.26770306]
[162.32830811 23.57915497]
[153.75929260 35.89060593]
[145.19026184 48.20205688]
[136.62124634 60.51351166]
[128.05221558 72.82495880]
[137.10809326 87.81809998]
[138.70048523 105.26136017]
[132.50910950 121.64640808]
[119.77924347 133.67776489]
[124.75050354 147.83001709]
[129.72177124 161.98228455]
[134.69302368 176.13455200]
[139.66429138 190.28680420]
[144.63555908 204.43907166]
[149.60682678 218.59133911]
[154.57807922 232.74359131]
[169.73094177 234.89982605]
[182.13931274 243.86035156]
[188.95182800 257.56613159]
[188.60301208 272.86764526]
[181.17304993 286.24877930]
[168.36926270 294.63458252]
[153.13388062 296.09808350]
[138.96789551 290.30297852]
[129.12652588 278.58096313]
[125.87124634 263.62561035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% Start Annotations
1 82 0.0 0.6 colorpair
2 81 0.0 1 colorpair
3 80 0.0 0.6 colorpair
4 79 0.0 1 colorpair
5 78 0.0 1 colorpair
6 77 0.0 1 colorpair
7 76 0.0 1 colorpair
8 75 0.0 0.6 colorpair
14 36 0.0 0.6 colorpair
15 35 0.0 0.6 colorpair
16 34 0.0 0.6 colorpair
17 33 0.16 1 colorpair
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.16 1 colorpair
22 28 0.0 1 colorpair
40 71 0.16 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 0.6 colorpair
48 63 0.0 1 colorpair
49 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 82 1 gmark
3 80 1 gmark
8 75 1 gmark
14 36 1 gmark
15 35 1 gmark
16 34 1 gmark
17 cmark
29 cmark
71 cmark
47 64 1 gmark

% End Annotations
showpage
end
%%EOF
