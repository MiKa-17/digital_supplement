%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AAAUGCAGCAAGAACGGGUCGUUCUAAGGCUGAUGAUUAUCUGCAUCACGCUGAUAGCGCUGAUGUGGAUCACCCGCGGUUCGCUAUGUGAACUGCGCAUCACACUGGGAGACACGGAGGUAGCCGCCAUUUUGGCUUACGAAACCGAA___\
) } def
/len { sequence length } bind def

/coor [
[98.05730438 200.36029053]
[86.02616119 199.40167236]
[74.19703674 197.00601196]
[62.74094009 193.20796204]
[51.82349777 188.06239319]
[41.60254288 181.64372253]
[32.22583008 174.04473877]
[21.29968452 184.32185364]
[10.37353706 194.59898376]
[-0.55261004 204.87611389]
[-5.41789675 224.39778137]
[-24.35140610 228.14648438]
[-34.84926987 238.86071777]
[-45.34713364 249.57495117]
[-55.84500122 260.28918457]
[-66.34286499 271.00341797]
[-76.84072876 281.71765137]
[-83.60707092 297.26284790]
[-100.41786194 295.06427002]
[-102.95889282 278.30184937]
[-87.55496216 271.21978760]
[-77.05709839 260.50555420]
[-66.55923462 249.79132080]
[-56.06137085 239.07708740]
[-45.56350708 228.36285400]
[-35.06563950 217.64862061]
[-36.08565140 207.40751648]
[-31.16869545 198.11624146]
[-21.74026299 192.98887634]
[-10.82973576 193.94996643]
[0.09641117 183.67283630]
[11.02255821 173.39572144]
[21.94870567 163.11859131]
[11.64407349 147.63603210]
[4.37259007 130.51817322]
[0.38387629 112.35268402]
[-0.18514022 93.76313019]
[2.68507409 75.38768768]
[8.89598846 57.85715103]
[18.23438835 41.77332306]
[6.70013142 32.18370056]
[-4.83412647 22.59407616]
[-16.36838531 13.00445175]
[-27.90264320 3.41482711]
[-39.43690109 -6.17479753]
[-50.97115707 -15.76442146]
[-62.50541687 -25.35404587]
[-74.03967285 -34.94367218]
[-85.57392883 -44.53329468]
[-97.20539856 -54.00477219]
[-108.93287659 -63.35712051]
[-120.66034698 -72.70946503]
[-136.69935608 -72.34927368]
[-146.87010193 -84.75634766]
[-143.37046814 -100.41304016]
[-128.88505554 -107.30888367]
[-114.52584839 -100.15396881]
[-111.30799866 -84.43694305]
[-99.58052826 -75.08459473]
[-87.85305786 -65.73224640]
[-80.61905670 -64.01031494]
[-75.98430634 -56.06755447]
[-64.45005035 -46.47792816]
[-52.91579056 -36.88830566]
[-41.38153458 -27.29867935]
[-29.84727669 -17.70905495]
[-18.31301880 -8.11943054]
[-6.77875996 1.47019351]
[4.75549793 11.05981827]
[16.28975487 20.64944267]
[27.82401276 30.23906708]
[45.38621521 15.77829742]
[65.75361633 5.64351702]
[87.88005829 0.35529217]
[110.62902832 0.18524875]
[132.83204651 5.14212084]
[138.78364563 -8.62662792]
[144.73526001 -22.39537621]
[150.68685913 -36.16412735]
[156.63845825 -49.93287277]
[162.59005737 -63.70162201]
[168.54165649 -77.47037506]
[174.49325562 -91.23912048]
[180.44485474 -105.00786591]
[186.39646912 -118.77661896]
[187.13096619 -135.71464539]
[203.61039734 -139.69775391]
[211.99978638 -124.96498871]
[200.16520691 -112.82501984]
[194.21360779 -99.05626678]
[188.26200867 -85.28752136]
[182.31040955 -71.51876831]
[176.35881042 -57.75002289]
[170.40721130 -43.98127365]
[164.45559692 -30.21252441]
[158.50399780 -16.44377518]
[152.55239868 -2.67502666]
[146.60079956 11.09372234]
[154.71388245 15.84329128]
[162.34704590 21.33103371]
[169.43334961 27.50881767]
[175.91061401 34.32244873]
[181.72203064 41.71216965]
[186.81663513 49.61315536]
[191.14971924 57.95610809]
[194.68330383 66.66784668]
[197.38638306 75.67195129]
[199.23522949 84.88945007]
[200.21365356 94.23948669]
[200.31306458 103.64005280]
[199.53257751 113.00869751]
[197.87905884 122.26322937]
[195.36698914 131.32247925]
[192.01841736 140.10699463]
[187.86271667 148.53970337]
[182.93634033 156.54666138]
[194.66380310 165.89900208]
[206.39128113 175.25135803]
[225.07002258 172.38156128]
[239.70368958 183.83052063]
[241.35488892 202.01812744]
[253.45407104 210.88435364]
[265.55325317 219.75056458]
[277.65243530 228.61679077]
[284.26861572 229.72889709]
[288.63729858 233.48143005]
[290.05438232 238.09967041]
[301.78182983 247.45202637]
[313.50930786 256.80435181]
[325.23678589 266.15670776]
[341.39013672 271.30502319]
[340.91473389 288.25231934]
[324.49813843 292.48693848]
[315.88442993 277.88418579]
[304.15698242 268.53182983]
[292.42950439 259.17950439]
[280.70202637 249.82714844]
[268.78622437 240.71597290]
[256.68704224 231.84974670]
[244.58786011 222.98353577]
[232.48867798 214.11730957]
[221.78895569 218.27522278]
[210.29582214 216.70832825]
[200.90692139 209.69403076]
[196.04627991 198.89778137]
[197.03894043 186.97882080]
[185.31146240 177.62648010]
[173.58398438 168.27413940]
[164.85786438 176.61212158]
[155.19410706 183.84254456]
[144.73239136 189.86085510]
[133.62399292 194.58006287]
[122.02950287 197.93193054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 60]
[51 59]
[52 58]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[116 148]
[117 147]
[118 146]
[121 141]
[122 140]
[123 139]
[124 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% Start Annotations
7 33 0.0 1 colorpair
8 32 0.0 1 colorpair
9 31 0.0 1 colorpair
10 30 0.0 1 colorpair
12 26 0.16 1 colorpair
13 25 0.0 1 colorpair
14 24 0.16 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
17 21 0.0 0.2 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.32 1 colorpair
85 89 0.0 1 colorpair
116 148 0.0 0.2 colorpair
117 147 0.0 1 colorpair
118 146 0.0 1 colorpair
121 141 0.0 1 colorpair
122 140 0.0 1 colorpair
123 139 0.0 0.2 colorpair
124 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair
130 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
26 cmark
14 cmark
17 21 2 gmark
48 cmark
63 cmark
94 cmark
84 cmark
90 cmark
116 148 2 gmark
123 139 2 gmark

% End Annotations
showpage
end
%%EOF
