%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:22:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGCCAAAACGUGCUCUGCUGUUAGGUUUGUUUUUGAUCUGUACGACGCUGUUGAUCUUCACCUGGAUGGUGCGCGAUUCGCUAUGUGAAUUGCAUUUCAGACAGGAGAAAACAGAGCUGGCGGCAGUGUUGGCUUACGAAGCAAAACGU\
) } def
/len { sequence length } bind def

/coor [
[111.02652740 664.72857666]
[111.59749603 649.65093994]
[116.05232239 635.23504639]
[124.08728027 622.46392822]
[135.15452576 612.20825195]
[148.49948120 605.16735840]
[145.16166687 590.54339600]
[141.82385254 575.91949463]
[138.48603821 561.29559326]
[129.29017639 573.14617920]
[114.43289185 575.21038818]
[102.35473633 566.31555176]
[99.91744232 551.51489258]
[108.50564575 539.21679688]
[123.24031067 536.40795898]
[135.75077820 544.68444824]
[134.22343445 529.76239014]
[125.23041534 517.88909912]
[131.52232361 503.37280273]
[129.99497986 488.45077515]
[128.46763611 473.52874756]
[126.94029236 458.60668945]
[125.41294861 443.68466187]
[123.88560486 428.76263428]
[122.35825348 413.84057617]
[120.83090973 398.91854858]
[119.30356598 383.99652100]
[117.77622223 369.07446289]
[108.78321075 357.20117188]
[115.07511902 342.68490601]
[113.54777527 327.76287842]
[112.02043152 312.84082031]
[110.49308777 297.91879272]
[108.96573639 282.99676514]
[107.43839264 268.07470703]
[105.91104889 253.15267944]
[104.38370514 238.23063660]
[102.85636139 223.30859375]
[93.65576935 215.39727783]
[92.29274750 202.93572998]
[100.04619598 192.57893372]
[98.82355499 177.62884521]
[97.60091400 162.67875671]
[96.37828064 147.72866821]
[95.15563965 132.77857971]
[68.65030670 122.55280304]
[56.58414841 92.24221802]
[43.80254745 84.39170074]
[31.02094650 76.54118347]
[18.23934555 68.69065857]
[1.57825220 65.55309296]
[-0.01904678 48.67455673]
[15.75769329 42.46723557]
[26.08986473 55.90905762]
[38.87146759 63.75957870]
[51.65306854 71.61009979]
[64.43466949 79.46061707]
[70.29840851 74.78444672]
[57.77991104 66.52083588]
[61.77082443 52.06148911]
[76.75574493 51.38908005]
[82.02587891 65.43209839]
[87.88961029 60.75592422]
[83.08009338 46.54787827]
[78.27057648 32.33983231]
[73.46105957 18.13178825]
[59.77345657 9.76345921]
[57.92504883 -6.17275572]
[69.33377838 -17.45195580]
[85.24784851 -15.42170429]
[93.45934296 -1.63943660]
[87.66910553 13.32227135]
[92.47862244 27.53031731]
[97.28813934 41.73836136]
[102.09765625 55.94640732]
[104.37867737 61.62997055]
[105.92134857 67.39876556]
[111.87294769 53.63001633]
[117.82454681 39.86126709]
[123.77615356 26.09251976]
[129.72775269 12.32377052]
[135.67935181 -1.44497824]
[141.63095093 -15.21372700]
[147.58255005 -28.98247528]
[153.53416443 -42.75122452]
[154.26866150 -59.68925476]
[170.74809265 -63.67235947]
[179.13748169 -48.93959808]
[167.30290222 -36.79962158]
[161.35130310 -23.03087425]
[155.39970398 -9.26212597]
[149.44810486 4.50662279]
[143.49650574 18.27537155]
[137.54490662 32.04412079]
[131.59329224 45.81287003]
[125.64170074 59.58161926]
[119.69009399 73.35036469]
[126.17503357 79.68325043]
[130.70120239 87.53649902]
[132.92990112 96.32244110]
[132.69433594 105.38358307]
[130.01214600 114.04185486]
[125.08404541 121.64933014]
[118.27882385 127.63670349]
[110.10572815 131.55593872]
[111.32836914 146.50602722]
[112.55100250 161.45611572]
[113.77364349 176.40620422]
[114.99628448 191.35629272]
[125.82562256 206.21499634]
[117.77839661 221.78125000]
[119.30574036 236.70329285]
[120.83309174 251.62533569]
[122.36043549 266.54736328]
[123.88777924 281.46942139]
[125.41512299 296.39144897]
[126.94246674 311.31347656]
[128.46981812 326.23553467]
[129.99716187 341.15756226]
[139.09941101 354.09817505]
[132.69825745 367.54711914]
[134.22560120 382.46917725]
[135.75294495 397.39120483]
[137.28028870 412.31323242]
[138.80763245 427.23529053]
[140.33499146 442.15731812]
[141.86233521 457.07934570]
[143.38967896 472.00140381]
[144.91702271 486.92343140]
[146.44436646 501.84545898]
[155.54663086 514.78607178]
[149.14546204 528.23504639]
[150.67280579 543.15710449]
[153.10995483 557.95776367]
[156.44776917 572.58166504]
[159.78558350 587.20562744]
[163.12339783 601.82952881]
[178.20172119 602.38299561]
[192.62272644 606.82116699]
[205.40316772 614.84130859]
[215.67163086 625.89666748]
[222.72802734 639.23345947]
[226.09120178 653.94232178]
[225.53187561 669.02044678]
[221.08818054 683.43975830]
[213.06309509 696.21710205]
[202.00376892 706.48126221]
[188.66426086 713.53253174]
[173.95407104 716.89001465]
[158.87617493 716.32489014]
[144.45860291 711.87561035]
[131.68435669 703.84558105]
[121.42443085 692.78228760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 137]
[7 136]
[8 135]
[9 134]
[16 133]
[17 132]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[30 119]
[31 118]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 112]
[38 111]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[47 57]
[48 56]
[49 55]
[50 54]
[63 75]
[64 74]
[65 73]
[66 72]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
6 137 0.0 1 colorpair
7 136 0.0 1 colorpair
8 135 0.0 1 colorpair
9 134 0.0 1 colorpair
16 133 0.0 1 colorpair
17 132 0.0 1 colorpair
19 130 0.0 1 colorpair
20 129 0.0 1 colorpair
21 128 0.0 1 colorpair
22 127 0.0 1 colorpair
23 126 0.0 1 colorpair
24 125 0.0 1 colorpair
25 124 0.0 1 colorpair
26 123 0.0 1 colorpair
27 122 0.0 1 colorpair
28 121 0.0 1 colorpair
30 119 0.0 1 colorpair
31 118 0.0 1 colorpair
32 117 0.0 1 colorpair
33 116 0.0 1 colorpair
34 115 0.0 1 colorpair
35 114 0.0 1 colorpair
36 113 0.0 1 colorpair
37 112 0.0 1 colorpair
38 111 0.0 1 colorpair
41 109 0.0 1 colorpair
42 108 0.0 1 colorpair
43 107 0.0 1 colorpair
44 106 0.0 1 colorpair
45 105 0.0 1 colorpair
47 57 0.0 1 colorpair
48 56 0.0 1 colorpair
49 55 0.0 1 colorpair
50 54 0.0 1 colorpair
63 75 0.0 1 colorpair
64 74 0.0 1 colorpair
65 73 0.0 1 colorpair
66 72 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
