%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:13:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUACUCUUAUGGUGUUCAUGCAUA_GGGGAGCCUCA_CUUUGAUUGAAAAUCAGGU__GGGGCUUUUCUCUGUCUGUCUCCC_________GCAAAACACC_________UGAGACAAACA_GUCUCAAGCACCCGC_________\
) } def
/len { sequence length } bind def

/coor [
[91.56723785 157.56686401]
[83.25748444 155.72023010]
[75.30612946 152.68081665]
[67.88338470 148.51368713]
[61.14813614 143.30805969]
[55.24457550 137.17535400]
[42.56672287 145.19235229]
[29.88887215 153.20933533]
[17.21102142 161.22631836]
[4.53316927 169.24331665]
[-8.14468193 177.26029968]
[-11.75263500 189.68258667]
[-22.52468300 196.09080505]
[-34.37806320 193.50352478]
[-47.21478271 201.26358032]
[-60.05150223 209.02365112]
[-68.52484894 225.34255981]
[-86.04736328 225.07662964]
[-98.72521973 233.09361267]
[-111.40306854 241.11061096]
[-111.41321564 256.53796387]
[-119.78161621 269.49841309]
[-133.83795166 275.85632324]
[-149.09689331 273.58291626]
[-160.68936157 263.40362549]
[-164.91624451 248.56660461]
[-160.42877197 233.80632019]
[-148.65885925 223.83271790]
[-133.36225891 221.82832336]
[-119.42005920 228.43275452]
[-106.74220276 220.41577148]
[-94.06435394 212.39877319]
[-91.08296204 200.63833618]
[-80.53701782 193.86447144]
[-67.81156921 196.18693542]
[-54.97484970 188.42686462]
[-42.13813019 180.66679382]
[-34.54700851 164.87173462]
[-16.16166878 164.58244324]
[-3.48381805 156.56546021]
[9.19403362 148.54847717]
[21.87188530 140.53147888]
[34.54973602 132.51449585]
[47.22758865 124.49750519]
[42.83412552 110.82211304]
[41.92491913 96.48710632]
[44.55538940 82.36621094]
[50.56520462 69.32009125]
[38.94613266 59.83341217]
[27.32705688 50.34673309]
[15.70798206 40.86005402]
[4.08890820 31.37337112]
[-7.53016615 21.88669205]
[-23.57225800 22.06229401]
[-33.59955978 9.53900337]
[-29.91998291 -6.07638216]
[-15.35618305 -12.80507565]
[-1.08026314 -5.48539972]
[1.95651436 10.26761723]
[13.57558918 19.75429726]
[25.19466400 29.24097824]
[36.81373596 38.72765732]
[48.43281174 48.21434021]
[60.05188751 57.70101929]
[81.53083038 44.82804108]
[106.43106079 42.17529297]
[130.13998413 50.23417664]
[148.26567078 67.51184845]
[161.68519592 60.80986786]
[170.57429504 47.72191620]
[185.41755676 48.95744705]
[198.83708191 42.25547028]
[212.25660706 35.55349350]
[225.67611694 28.85151482]
[226.70210266 13.59063053]
[235.17306519 0.97558153]
[248.73091125 -5.66152859]
[263.69046021 -4.62815428]
[276.04101562 3.69827795]
[289.39236450 -3.13848090]
[302.67422485 -10.10932827]
[315.95605469 -17.08017540]
[324.57980347 -30.34447479]
[339.44494629 -29.40809441]
[352.72677612 -36.37894058]
[366.00860596 -43.34978867]
[379.29046631 -50.32063675]
[374.65032959 -64.62368011]
[372.49432373 -79.50520325]
[372.88449097 -94.53703308]
[375.80960083 -109.28666687]
[381.18551636 -123.32972717]
[388.85751343 -136.26217651]
[398.60488892 -147.71192932]
[410.14718628 -157.34953308]
[423.15231323 -164.89770508]
[437.24606323 -170.13926697]
[452.02297974 -172.92341614]
[467.05783081 -173.17002869]
[481.91809082 -170.87203979]
[496.17617798 -166.09553528]
[509.42184448 -158.97796631]
[521.27404785 -149.72410583]
[531.39172363 -138.60020447]
[539.48370361 -125.92633820]
[545.31732178 -112.06714630]
[548.72460938 -97.42138672]
[549.60760498 -82.41044617]
[547.94085693 -67.46621704]
[543.77227783 -53.01867676]
[537.22192383 -39.48351669]
[528.47821045 -27.25016022]
[517.79266357 -16.67059135]
[505.47274780 -8.04920292]
[491.87298584 -1.63405085]
[477.38461304 2.39028883]
[462.42453003 3.90802789]
[447.42312622 2.87549782]
[432.81204224 -0.67759359]
[419.01168823 -6.64901638]
[406.41909790 -14.86696148]
[395.39657593 -25.09498215]
[386.26132202 -37.03879547]
[372.97946167 -30.06794930]
[359.69763184 -23.09710121]
[346.41580200 -16.12625313]
[338.74206543 -3.36055636]
[322.92691040 -3.79833579]
[309.64505005 3.17251182]
[296.36322021 10.14335918]
[291.87631226 16.07053375]
[282.74298096 17.11779785]
[281.98001099 31.99339676]
[273.81930542 44.57349014]
[260.36853027 51.42501831]
[245.19465637 50.61868286]
[232.37809753 42.27103424]
[218.95857239 48.97301102]
[205.53906250 55.67498779]
[192.11953735 62.37696457]
[184.19029236 74.98554993]
[168.38717651 74.22938538]
[154.96765137 80.93136597]
[157.16177368 89.15620422]
[158.13224792 97.61316681]
[157.85832214 106.12122345]
[156.34585571 114.49825287]
[153.62722778 122.56491852]
[149.76063538 130.14854431]
[144.82882690 137.08680725]
[138.93740845 143.23117065]
[132.21246338 148.45010376]
[124.79796600 152.63189697]
[116.85263824 155.68702698]
[108.54654694 157.55007935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[14 37]
[15 36]
[16 35]
[18 32]
[19 31]
[20 30]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[68 143]
[69 142]
[71 140]
[72 139]
[73 138]
[74 137]
[79 132]
[80 130]
[81 129]
[82 128]
[84 126]
[85 125]
[86 124]
[87 123]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.32 1 colorpair
14 37 0.32 1 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
18 32 0.16 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
48 64 0.16 1 colorpair
49 63 0.16 0.2 colorpair
50 62 0.0 0.2 colorpair
51 61 0.16 0.2 colorpair
52 60 0.0 0.2 colorpair
53 59 0.0 0.2 colorpair
68 143 0.0 1 colorpair
69 142 0.0 1 colorpair
71 140 0.0 1 colorpair
72 139 0.0 1 colorpair
73 138 0.0 1 colorpair
74 137 0.0 1 colorpair
79 132 0.0 1 colorpair
80 130 0.0 1 colorpair
81 129 0.16 1 colorpair
82 128 0.0 1 colorpair
84 126 0.0 1 colorpair
85 125 0.0 1 colorpair
86 124 0.16 1 colorpair
87 123 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 cmark
39 cmark
14 cmark
37 cmark
35 cmark
18 cmark
48 cmark
64 cmark
49 63 2 gmark
63 cmark
50 62 2 gmark
51 61 2 gmark
51 cmark
61 cmark
52 60 2 gmark
53 59 2 gmark
81 cmark
129 cmark
86 cmark
124 cmark

% End Annotations
showpage
end
%%EOF
