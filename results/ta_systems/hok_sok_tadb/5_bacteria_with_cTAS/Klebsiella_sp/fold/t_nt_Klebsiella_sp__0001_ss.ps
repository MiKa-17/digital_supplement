%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:13:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUACUCUUAUGGUGUUCAUGCAUA_GGGGAGCCUCA_CUUUGAUUUAACAUCAGGU__GGGGCUUUUCUCUGUCUGUCUCCC_________GCAAAACACC_________UGAGAC_AAACAGUCUCAAGCACCCGC_________\
) } def
/len { sequence length } bind def

/coor [
[93.78116608 156.71055603]
[85.20149994 155.09777832]
[76.96835327 152.19487000]
[69.27449799 148.06977844]
[62.30009460 142.81912231]
[56.20845032 136.56584167]
[43.53059769 144.58282471]
[30.85274696 152.59982300]
[18.17489624 160.61680603]
[5.49704456 168.63378906]
[-7.18080664 176.65077209]
[-12.80205250 183.92512512]
[-20.19565964 184.69857788]
[-33.03237915 192.45864868]
[-45.86909866 200.21870422]
[-58.70581436 207.97877502]
[-71.46374512 215.86770630]
[-84.14160156 223.88468933]
[-96.81945038 231.90167236]
[-109.49729919 239.91867065]
[-109.50744629 255.34602356]
[-117.87585449 268.30648804]
[-131.93218994 274.66439819]
[-147.19111633 272.39099121]
[-158.78358459 262.21166992]
[-163.01048279 247.37466431]
[-158.52299500 232.61437988]
[-146.75309753 222.64077759]
[-131.45649719 220.63638306]
[-117.51428986 227.24081421]
[-104.83644104 219.22383118]
[-92.15858459 211.20683289]
[-79.48073578 203.18984985]
[-75.48532867 196.92085266]
[-66.46588135 195.14205933]
[-53.62916565 187.38198853]
[-40.79244614 179.62191772]
[-27.95572662 171.86186218]
[-15.19779396 163.97293091]
[-2.51994300 155.95594788]
[10.15790844 147.93894958]
[22.83576012 139.92196655]
[35.51361084 131.90498352]
[48.19146347 123.88799286]
[43.93148422 110.53955841]
[43.05357742 96.55537415]
[45.61069107 82.77897644]
[51.44858551 70.04135132]
[39.82950974 60.55466843]
[28.21043587 51.06798935]
[16.59136009 41.58131027]
[4.97228622 32.09462738]
[-10.35504818 35.19411850]
[-24.06398582 27.67088509]
[-29.68158531 13.07716751]
[-24.55538750 -1.69632661]
[-11.10582829 -9.67400455]
[4.31662416 -7.08905172]
[14.42995834 4.83799696]
[14.45896721 20.47555351]
[26.07804108 29.96223450]
[37.69711685 39.44891357]
[49.31618881 48.93559647]
[60.93526459 58.42227554]
[82.23220062 45.78684616]
[106.87667847 43.36545181]
[130.22555542 51.61429596]
[147.87979126 68.97925568]
[161.43154907 62.54886246]
[174.98329163 56.11847687]
[188.46961975 49.55195999]
[201.88914490 42.84998322]
[215.30865479 36.14800644]
[228.72817993 29.44602966]
[229.75416565 14.18514347]
[238.22512817 1.57009482]
[251.78297424 -5.06701517]
[266.74252319 -4.03364086]
[279.09307861 4.29279137]
[292.51260376 -2.40918589]
[305.93209839 -9.11116314]
[319.35162354 -15.81313992]
[328.24072266 -28.90109253]
[343.08401489 -27.66556168]
[356.43536377 -34.50231934]
[369.71719360 -41.47316742]
[382.99905396 -48.44401550]
[396.28088379 -55.41486359]
[409.56271362 -62.38571167]
[405.21405029 -76.79006195]
[403.67025757 -91.75713348]
[404.98718262 -106.74587250]
[409.11718750 -121.21443939]
[415.91101074 -134.63981628]
[425.12301636 -146.53666687]
[436.42022705 -156.47494507]
[449.39425659 -164.09538269]
[463.57611084 -169.12249756]
[478.45309448 -171.37455750]
[493.48742676 -170.77018738]
[508.13562012 -167.33119202]
[521.86816406 -161.18191528]
[534.18865967 -152.54464722]
[544.65167236 -141.73159790]
[552.87896729 -129.13368225]
[558.57324219 -115.20629120]
[561.52850342 -100.45288849]
[561.63800049 -85.40681458]
[558.89782715 -70.61196136]
[553.40692139 -56.60315323]
[545.36383057 -43.88681030]
[535.05932617 -32.92261505]
[522.86590576 -24.10691643]
[509.22430420 -17.75839615]
[494.62771606 -14.10655022]
[479.60375977 -13.28338814]
[464.69555664 -15.31866932]
[450.44204712 -20.13881874]
[437.35848999 -27.56959152]
[425.91778564 -37.34236908]
[416.53356934 -49.10387039]
[403.25173950 -42.13302231]
[389.96987915 -35.16217422]
[376.68804932 -28.19132805]
[363.40621948 -21.22047997]
[358.91931152 -15.29330635]
[349.78598022 -14.24604130]
[341.85675049 -1.63745916]
[326.05361938 -2.39362025]
[312.63409424 4.30835676]
[299.21456909 11.01033401]
[285.79504395 17.71231079]
[285.03207397 32.58790970]
[276.87133789 45.16800308]
[263.42059326 52.01953125]
[248.24670410 51.21319580]
[235.43016052 42.86554718]
[222.01063538 49.56752396]
[208.59111023 56.26950073]
[195.17160034 62.97147751]
[190.56625366 68.80709839]
[181.41368103 69.67023468]
[167.86192322 76.10062408]
[154.31018066 82.53100586]
[156.33961487 91.02177429]
[157.04983521 99.72276306]
[156.42420959 108.43025208]
[154.47738647 116.94033813]
[151.25494385 125.05375671]
[146.83235168 132.58053589]
[141.31315613 139.34442139]
[134.82659912 145.18704224]
[127.52455902 149.97158813]
[119.57801056 153.58602905]
[111.17304230 155.94572449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 33]
[18 32]
[19 31]
[20 30]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[68 144]
[69 143]
[70 142]
[71 140]
[72 139]
[73 138]
[74 137]
[79 132]
[80 131]
[81 130]
[82 129]
[84 127]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.32 1 colorpair
13 38 0.16 0.2 colorpair
14 37 0.32 1 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
17 33 0.0 0.2 colorpair
18 32 0.16 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
48 64 0.16 1 colorpair
49 63 0.16 0.6 colorpair
50 62 0.0 0.6 colorpair
51 61 0.16 0.6 colorpair
52 60 0.0 0.6 colorpair
68 144 0.0 0.2 colorpair
69 143 0.0 1 colorpair
70 142 0.0 1 colorpair
71 140 0.0 1 colorpair
72 139 0.0 1 colorpair
73 138 0.0 1 colorpair
74 137 0.0 1 colorpair
79 132 0.0 1 colorpair
80 131 0.0 1 colorpair
81 130 0.16 1 colorpair
82 129 0.0 1 colorpair
84 127 0.0 1 colorpair
85 125 0.0 1 colorpair
86 124 0.16 1 colorpair
87 123 0.0 1 colorpair
88 122 0.0 0.2 colorpair
89 121 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 cmark
39 cmark
13 38 2 gmark
13 cmark
14 cmark
37 cmark
35 cmark
17 33 2 gmark
18 cmark
48 cmark
64 cmark
49 63 1 gmark
63 cmark
50 62 1 gmark
51 61 1 gmark
51 cmark
61 cmark
52 60 1 gmark
68 144 2 gmark
81 cmark
130 cmark
86 cmark
124 cmark
88 122 2 gmark

% End Annotations
showpage
end
%%EOF
