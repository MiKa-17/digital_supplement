%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:13:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________________AAUGCUGACAAAAUAUGCCCUGGUGGCAAUCAUCG_UGCUGUGUUUCACAGUACUGGGAUUUACGUUGAUGGUGCGCGACUCGCUGUGCGAACUAAGGAUCAAAGAGCGUAAUAUGGAGUUUAAGGCUGUUCUCGCUUACGAAACGAA___GAA_\
) } def
/len { sequence length } bind def

/coor [
[109.69601440 426.92550659]
[95.87861633 427.04327393]
[82.06857300 426.57733154]
[68.29053497 425.52850342]
[54.56909180 423.89865112]
[40.92873764 421.69067383]
[27.39381790 418.90850830]
[13.98849010 415.55715942]
[0.73668194 411.64257812]
[-12.33795547 407.17175293]
[-25.21208382 402.15264893]
[-37.86272812 396.59426880]
[-50.26730347 390.50650024]
[-62.40367508 383.90023804]
[-74.25017548 376.78723145]
[-85.78566742 369.18020630]
[-96.98955536 361.09274292]
[-107.84184265 352.53924561]
[-118.32316589 343.53500366]
[-128.41481018 334.09606934]
[-138.09875488 324.23931885]
[-147.35774231 313.98236084]
[-156.17521667 303.34344482]
[-164.53546143 292.34158325]
[-172.42355347 280.99642944]
[-179.82539368 269.32821655]
[-186.72778320 257.35778809]
[-193.11840820 245.10649109]
[-198.98587036 232.59619141]
[-204.31967163 219.84924316]
[-209.11029053 206.88836670]
[-213.34921265 193.73670959]
[-217.02883911 180.41775513]
[-220.14260864 166.95524597]
[-222.68498230 153.37324524]
[-224.65139771 139.69598389]
[-239.57833862 141.17462158]
[-254.50527954 142.65324402]
[-265.74700928 154.09892273]
[-281.68917847 152.30279541]
[-290.10238647 138.64271545]
[-284.53268433 123.59751129]
[-269.25268555 118.70858765]
[-255.98391724 127.72630310]
[-241.05696106 126.24767303]
[-226.13002014 124.76904297]
[-226.91450500 110.06008911]
[-227.03591919 95.33073425]
[-226.49403381 80.61085510]
[-225.28994751 65.93029785]
[-223.42610168 51.31883621]
[-220.90626526 36.80611801]
[-217.73556519 22.42156982]
[-213.92041016 8.19436836]
[-209.46855164 -5.84663010]
[-204.38903809 -19.67294693]
[-198.69213867 -33.25653839]
[-192.38941956 -46.56985474]
[-185.49368286 -59.58589554]
[-178.01889038 -72.27825928]
[-169.98020935 -84.62120056]
[-161.39393616 -96.58969116]
[-152.27751160 -108.15944672]
[-142.64939880 -119.30701447]
[-132.52914429 -130.00976562]
[-121.93727112 -140.24601746]
[-110.89524841 -149.99497986]
[-99.42548370 -159.23690796]
[-87.55123901 -167.95303345]
[-75.29660034 -176.12570190]
[-62.68641281 -183.73831177]
[-49.74626541 -190.77543640]
[-36.50239563 -197.22280884]
[-22.98166656 -203.06733704]
[-9.21150398 -208.29716492]
[4.78016567 -212.90171814]
[18.96496391 -216.87161255]
[33.31411743 -220.19883728]
[47.79852676 -222.87660217]
[62.38881302 -224.89952087]
[77.05538177 -226.26345825]
[91.76849365 -226.96565247]
[106.49829102 -227.00469971]
[121.21492004 -226.38049316]
[135.88850403 -225.09431458]
[150.48931885 -223.14877319]
[164.98771667 -220.54780579]
[179.35430908 -217.29669189]
[193.55995178 -213.40203857]
[207.57582092 -208.87171936]
[221.37351990 -203.71495056]
[234.92503357 -197.94216919]
[248.20289612 -191.56509399]
[261.18014526 -184.59664917]
[273.83050537 -177.05097961]
[286.12829590 -168.94340515]
[294.94509888 -181.07865906]
[296.79702759 -196.79109192]
[310.53753662 -202.53981018]
[319.35430908 -214.67506409]
[328.17108154 -226.81031799]
[336.98785400 -238.94557190]
[345.80462646 -251.08082581]
[350.22305298 -267.44891357]
[367.17459106 -267.73428345]
[372.14151001 -251.52423096]
[357.93991089 -242.26405334]
[349.12310791 -230.12879944]
[340.30633545 -217.99353027]
[331.48956299 -205.85827637]
[322.67279053 -193.72302246]
[321.45147705 -178.87857056]
[307.08035278 -172.26187134]
[298.26354980 -160.12661743]
[311.59762573 -149.40077209]
[324.35244751 -137.99218750]
[336.49310303 -125.93209076]
[347.98635864 -113.25351715]
[358.80075073 -99.99116516]
[368.90667725 -86.18133545]
[378.27648926 -71.86183929]
[386.88452148 -57.07187271]
[394.70718384 -41.85192108]
[401.72311401 -26.24365044]
[407.91308594 -10.28979015]
[413.26013184 5.96598816]
[417.74963379 22.47918320]
[421.36929321 39.20458984]
[424.10919189 56.09642410]
[425.96188354 73.10844421]
[426.92224121 90.19408417]
[426.98764038 107.30656433]
[426.15792847 124.39904022]
[424.43533325 141.42472839]
[421.82461548 158.33700562]
[418.33291626 175.08959961]
[413.96978760 191.63662720]
[408.74716187 207.93280029]
[402.67935181 223.93351746]
[395.78292847 239.59497070]
[388.07684326 254.87426758]
[379.58212280 269.72961426]
[370.32205200 284.12030029]
[360.32196045 298.00698853]
[372.04943848 307.35934448]
[383.77691650 316.71166992]
[399.06756592 313.43600464]
[412.86218262 320.80099487]
[418.64733887 335.32910156]
[413.69149780 350.16061401]
[400.33462524 358.29254150]
[384.88345337 355.88522339]
[374.63351440 344.07534790]
[374.42456055 328.43914795]
[362.69711304 319.08679199]
[350.96963501 309.73446655]
[341.88684082 320.14779663]
[332.37234497 330.16818237]
[322.44305420 339.77777100]
[312.11676025 348.95938110]
[301.41186523 357.69662476]
[290.34747314 365.97393799]
[278.94335938 373.77651978]
[267.21981812 381.09042358]
[255.19783020 387.90264893]
[242.89884949 394.20098877]
[230.34478760 399.97421265]
[217.55809021 405.21203613]
[204.56156921 409.90512085]
[191.37843323 414.04504395]
[178.03218079 417.62442017]
[164.54666138 420.63690186]
[150.94592285 423.07708740]
[137.25425720 424.94064331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 46]
[37 45]
[38 44]
[96 114]
[97 113]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
[144 156]
[145 155]
[146 154]
] def

init

% Start Annotations
37 45 0.32 1 colorpair
38 44 0.32 1 colorpair
97 113 0.16 1 colorpair
100 110 0.0 0.2 colorpair
101 109 0.0 0.2 colorpair
103 107 0.16 1 colorpair
144 156 0.32 1 colorpair
145 155 0.0 0.2 colorpair
146 154 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
36 46 6 gmark
36 cmark
46 cmark
37 cmark
45 cmark
38 cmark
44 cmark
96 114 8 gmark
96 cmark
114 cmark
97 cmark
99 111 12 gmark
99 cmark
111 cmark
100 110 2 gmark
101 109 2 gmark
102 108 6 gmark
102 cmark
108 cmark
103 cmark
144 cmark
156 cmark
145 155 2 gmark

% End Annotations
showpage
end
%%EOF
