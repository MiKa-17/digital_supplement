%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGCUAUCCUCACAUUGCUUGGAUGUGGUUAGGAUUGCCUCAGGUUAAUGAAAAUUGACCUGGGGCUUUUACUUUCUACCUCACCACACAUUUCAUGCUUCAGGCAAAAAGCCUCAAGCACCCG\
) } def
/len { sequence length } bind def

/coor [
[83.60808563 133.70085144]
[82.36814117 118.75218964]
[75.03076172 120.30552673]
[68.95214081 134.01867676]
[62.87352371 147.73181152]
[56.79490280 161.44496155]
[59.07284546 177.68513489]
[45.98265076 187.56332397]
[30.99039078 180.91772461]
[29.51881599 164.58473206]
[43.08175659 155.36634827]
[49.16037750 141.65319824]
[55.23899841 127.94004822]
[61.31761551 114.22690582]
[49.40869522 123.34707642]
[37.35774994 114.41540527]
[31.52709961 100.59500885]
[33.53875351 85.73050690]
[42.83309555 73.95701599]
[56.82456970 68.54973602]
[71.62094879 71.01290894]
[83.10574341 80.66081238]
[92.44174957 92.40129089]
[89.87731934 77.62213135]
[87.31288910 62.84296417]
[84.74846649 48.06380081]
[81.64179230 33.38903809]
[77.99709320 18.83856964]
[74.35238647 4.28810167]
[70.70768738 -10.26236725]
[67.06298065 -24.81283569]
[63.41827774 -39.36330414]
[52.55968857 -50.86989212]
[56.97263718 -65.09575653]
[53.32793427 -79.64622498]
[49.68323135 -94.19669342]
[27.73755646 -100.50163269]
[13.74430943 -118.39497375]
[12.92311096 -140.97712708]
[25.44805717 -159.64331055]
[18.70388794 -173.04168701]
[11.95971775 -186.44004822]
[5.21554756 -199.83840942]
[-1.52862251 -213.23677063]
[-8.27279282 -226.63514709]
[-15.01696205 -240.03350830]
[-21.76113319 -253.43186951]
[-28.50530243 -266.83023071]
[-35.24947357 -280.22860718]
[-41.99364090 -293.62695312]
[-48.73781204 -307.02532959]
[-55.48198318 -320.42370605]
[-69.48091125 -328.96548462]
[-68.81253052 -345.35098267]
[-54.16441345 -352.72424316]
[-40.60528564 -343.50024414]
[-42.08361816 -327.16784668]
[-35.33944702 -313.76950073]
[-28.59527779 -300.37112427]
[-21.85110855 -286.97277832]
[-15.10693741 -273.57440186]
[-8.36276817 -260.17602539]
[-1.61859787 -246.77767944]
[5.12557220 -233.37930298]
[11.86974239 -219.98094177]
[18.61391258 -206.58258057]
[25.35808182 -193.18421936]
[32.10225296 -179.78585815]
[38.84642029 -166.38748169]
[46.98790359 -167.63471985]
[55.21452332 -167.01658630]
[63.10369873 -164.55880737]
[70.24882507 -160.38175964]
[76.28023529 -154.69461060]
[80.88432312 -147.78480530]
[83.81983948 -140.00357056]
[84.93052673 -131.74804688]
[84.15344238 -123.44107819]
[81.52247620 -115.50946045]
[77.16693878 -108.36207581]
[71.30518341 -102.36881256]
[64.23369598 -97.84139252]
[67.87840271 -83.29092407]
[71.52310181 -68.74045563]
[82.12100220 -58.27461624]
[77.96875000 -43.00800705]
[81.61344910 -28.45753860]
[85.25815582 -13.90707016]
[88.90285492 0.64339912]
[92.54756165 15.19386768]
[96.19226074 29.74433708]
[99.12036133 31.88326645]
[101.11073303 35.59624481]
[101.41223907 40.40382004]
[99.52762604 45.49937057]
[102.09205627 60.27853775]
[104.65648651 75.05770111]
[107.22090912 89.83686829]
[114.45366669 102.97792053]
[125.56793976 113.05130005]
[136.68220520 123.12468719]
[147.79646301 133.19807434]
[158.91073608 143.27145386]
[174.33204651 146.80612183]
[178.56626892 161.08619690]
[189.68054199 171.15957642]
[200.79481506 181.23297119]
[211.90907288 191.30635071]
[227.93887329 191.95846558]
[237.30685425 204.98229980]
[232.82670593 220.38710022]
[217.93521118 226.35562134]
[204.05586243 218.30931091]
[201.83569336 202.42062378]
[190.72142029 192.34722900]
[179.60716248 182.27384949]
[168.49288940 172.20046997]
[153.86654663 169.38630676]
[148.83735657 154.38572693]
[137.72308350 144.31233215]
[126.60881805 134.23895264]
[115.49455261 124.16556549]
[104.38028717 114.09218597]
[97.04290771 115.64551544]
[101.96715546 129.81420898]
[108.00480652 143.54544067]
[97.56211090 154.31346130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[23 98]
[24 97]
[25 96]
[26 95]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[34 84]
[35 83]
[36 82]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% Start Annotations
3 14 0.0 1 colorpair
4 13 0.0 1 colorpair
5 12 0.0 1 colorpair
6 11 0.0 1 colorpair
23 98 0.0 1 colorpair
24 97 0.0 1 colorpair
25 96 0.0 1 colorpair
26 95 0.0 1 colorpair
27 91 0.0 1 colorpair
28 90 0.0 1 colorpair
29 89 0.0 1 colorpair
30 88 0.0 1 colorpair
31 87 0.0 1 colorpair
32 86 0.0 1 colorpair
34 84 0.0 1 colorpair
35 83 0.0 1 colorpair
36 82 0.0 1 colorpair
40 69 0.0 1 colorpair
41 68 0.0 1 colorpair
42 67 0.0 1 colorpair
43 66 0.0 1 colorpair
44 65 0.0 1 colorpair
45 64 0.0 1 colorpair
46 63 0.0 1 colorpair
47 62 0.0 1 colorpair
48 61 0.0 1 colorpair
49 60 0.0 1 colorpair
50 59 0.0 1 colorpair
51 58 0.0 1 colorpair
52 57 0.0 1 colorpair
99 123 0.0 1 colorpair
100 122 0.0 1 colorpair
101 121 0.0 1 colorpair
102 120 0.0 1 colorpair
103 119 0.0 1 colorpair
105 117 0.0 1 colorpair
106 116 0.0 1 colorpair
107 115 0.0 1 colorpair
108 114 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
