%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_A_AUGCCGCAAAAAACGGUGAUUUACUGUCUAUUGAUCGUCUGUAUAACGCUACUGGCGUUUAUCAGAAUCACACAUGGAUACCUGUGUGAGAUACAAAUAAAAAACGGUAAAAAAGAGGUUGCCGCCGUUUUAGCCUACGCAUCUAAACGG\
) } def
/len { sequence length } bind def

/coor [
[125.94796753 253.36140442]
[116.25491333 254.68934631]
[106.49755859 255.40527344]
[96.71448517 255.50634766]
[86.94441986 254.99215698]
[77.22600555 253.86474609]
[67.59769440 252.12858582]
[58.09758377 249.79054260]
[48.76325607 246.85984802]
[39.63164520 243.34809875]
[30.73887825 239.26921082]
[22.12014008 234.63931274]
[13.80953121 229.47671509]
[5.83993149 223.80184937]
[-1.75712883 217.63717651]
[-8.95159149 211.00706482]
[-15.71499157 203.93775940]
[-22.02057076 196.45722961]
[-27.84337997 188.59507751]
[-33.16038513 180.38240051]
[-37.95054245 171.85168457]
[-42.19490814 163.03669739]
[-45.87668228 153.97230530]
[-48.98130417 144.69438171]
[-51.49649048 135.23962402]
[-53.41228104 125.64543915]
[-54.72110748 115.94979095]
[-55.41778564 106.19104004]
[-55.49956131 96.40779114]
[-54.96610641 86.63875580]
[-53.81953812 76.92258453]
[-52.06438446 67.29771423]
[-49.70759964 57.80223083]
[-46.75850296 48.47370529]
[-43.22875977 39.34903717]
[-56.74329376 32.84078217]
[-70.25782776 26.33252525]
[-86.04843903 27.31591988]
[-94.15822601 14.82269764]
[-107.67276001 8.31444168]
[-121.18729401 1.80618548]
[-134.70182800 -4.70207071]
[-150.49244690 -3.71867418]
[-158.60223389 -16.21189690]
[-172.11676025 -22.72015381]
[-185.71670532 -15.24878883]
[-201.10656738 -17.23156738]
[-212.36866760 -27.90606880]
[-215.17245483 -43.16773224]
[-208.43984985 -57.14813232]
[-194.75967407 -64.47152710]
[-179.39221191 -62.32191086]
[-168.24658203 -51.52586746]
[-165.60850525 -36.23468781]
[-152.09397888 -29.72643089]
[-137.27000427 -31.17534065]
[-128.19357300 -18.21660423]
[-114.67903900 -11.70834732]
[-101.16450500 -5.20009136]
[-87.64997101 1.30816460]
[-72.82600403 -0.14074574]
[-63.74956894 12.81799126]
[-50.23503876 19.32624817]
[-36.72050476 25.83450317]
[-26.40790939 9.36856270]
[-14.12300873 -5.68328142]
[-0.05747803 -19.08617973]
[15.56922054 -30.63101006]
[32.51326752 -40.13764191]
[50.51029587 -47.45774460]
[69.27949524 -52.47710419]
[88.52801514 -55.11740875]
[107.95552826 -55.33745956]
[127.25891876 -53.13382339]
[130.59674072 -67.75774384]
[133.93455505 -82.38166046]
[137.27236938 -97.00558472]
[140.61016846 -111.62950134]
[143.94798279 -126.25341797]
[147.28579712 -140.87733459]
[141.93765259 -156.37989807]
[152.89204407 -168.58372498]
[168.88003540 -164.93457031]
[173.45454407 -149.18637085]
[161.90972900 -137.53952026]
[158.57191467 -122.91560364]
[155.23410034 -108.29168701]
[151.89628601 -93.66777039]
[148.55847168 -79.04384613]
[145.22065735 -64.41992950]
[141.88284302 -49.79600906]
[153.47518921 -46.05965042]
[164.73963928 -41.42770767]
[175.60713196 -35.92857742]
[186.01103210 -29.59598541]
[195.88754272 -22.46875572]
[205.17610168 -14.59059238]
[213.81976318 -6.00980043]
[221.76551819 3.22100544]
[228.96466064 13.04522514]
[235.37303162 23.40262032]
[240.95135498 34.22968292]
[245.66540527 45.46002579]
[249.48628235 57.02478409]
[252.39056396 68.85305786]
[254.36044312 80.87230682]
[255.38385010 93.00884247]
[255.45449829 105.18824768]
[270.40457153 106.41088867]
[285.35467529 107.63352966]
[300.30474854 108.85616302]
[315.25485229 110.07880402]
[330.20492554 111.30144501]
[345.15502930 112.52408600]
[357.04034424 102.10704803]
[372.80477905 103.22863770]
[383.09558105 115.22342682]
[381.80737305 130.97512817]
[369.70446777 141.13853455]
[353.96725464 139.68386841]
[343.93237305 127.47417450]
[328.98229980 126.25153351]
[314.03219604 125.02889252]
[299.08212280 123.80625153]
[284.13201904 122.58361816]
[269.18194580 121.36097717]
[254.23185730 120.13833618]
[248.48783875 146.30744934]
[238.33813477 171.10258484]
[224.08387756 193.78810120]
[206.14802551 213.69087219]
[185.06271362 230.22039795]
[192.65086365 243.15948486]
[200.23902893 256.09857178]
[207.82719421 269.03765869]
[215.41534424 281.97671509]
[230.83372498 282.50323486]
[243.50682068 291.30075073]
[249.39070129 305.56201172]
[246.60783386 320.73629761]
[236.04623413 331.98156738]
[221.07604980 335.70947266]
[206.47424316 330.73046875]
[196.90016174 318.63333130]
[195.40888977 303.27822876]
[202.47627258 289.56488037]
[194.88810730 276.62579346]
[187.29994202 263.68673706]
[179.71179199 250.74765015]
[172.12362671 237.80856323]
[163.31703186 242.07029724]
[154.25991821 245.76994324]
[144.98812866 248.89286804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[35 64]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
] def

init

% Start Annotations
35 64 0.0 1 colorpair
36 63 0.32 1 colorpair
37 62 0.16 1 colorpair
39 60 0.16 1 colorpair
40 59 0.16 1 colorpair
41 58 0.16 1 colorpair
42 57 0.0 0.6 colorpair
44 55 0.16 1 colorpair
45 54 0.16 0.6 colorpair
74 91 0.16 1 colorpair
75 90 0.0 0.6 colorpair
76 89 0.0 1 colorpair
77 88 0.16 1 colorpair
78 87 0.0 0.6 colorpair
79 86 0.0 1 colorpair
80 85 0.0 1 colorpair
108 127 0.0 0.6 colorpair
109 126 0.0 0.6 colorpair
110 125 0.0 1 colorpair
111 124 0.0 0.6 colorpair
112 123 0.0 0.6 colorpair
113 122 0.0 1 colorpair
114 121 0.16 0.6 colorpair
132 150 0.16 1 colorpair
133 149 0.0 1 colorpair
134 148 0.0 1 colorpair
135 147 0.16 1 colorpair
136 146 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
36 cmark
63 cmark
37 cmark
39 cmark
60 cmark
40 cmark
59 cmark
58 cmark
42 57 1 gmark
55 cmark
45 54 1 gmark
54 cmark
74 cmark
75 90 1 gmark
77 cmark
78 87 1 gmark
108 127 1 gmark
109 126 1 gmark
111 124 1 gmark
112 123 1 gmark
114 121 1 gmark
114 cmark
132 cmark
150 cmark
135 cmark
147 cmark
136 146 1 gmark

% End Annotations
showpage
end
%%EOF
