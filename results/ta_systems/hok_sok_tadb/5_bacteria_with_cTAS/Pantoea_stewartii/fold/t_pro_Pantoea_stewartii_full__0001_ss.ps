%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____CCGCAAAACCCUGUUAUCUGGUGCCUGGCCAUCGUCUGCCUGACGAUACUGGCAUUCACUUUGUUGACCCGUCAUUCGCUUUACGAACUGCGAAUACGGGACGGUAGCAGGGAGGUUGCGGCAGUCAUGUCUUGUGAGUCCAACC__\
) } def
/len { sequence length } bind def

/coor [
[180.32893372 356.82678223]
[194.22412109 351.17669678]
[209.20175171 351.99563599]
[222.39805603 359.12704468]
[215.81010437 345.65118408]
[209.22215271 332.17529297]
[202.63421631 318.69943237]
[196.04626465 305.22357178]
[189.45831299 291.74771118]
[182.87036133 278.27185059]
[166.76699829 273.52188110]
[158.89953613 258.30969238]
[164.54765320 241.78512573]
[157.68261719 228.44828796]
[150.81756592 215.11145020]
[143.95251465 201.77462769]
[137.08747864 188.43778992]
[130.22242737 175.10095215]
[123.35738373 161.76411438]
[116.49233246 148.42729187]
[109.62728882 135.09045410]
[102.76224518 121.75361633]
[79.25884247 115.61296082]
[72.45185852 88.13862610]
[57.91085815 84.45634460]
[43.36985397 80.77406311]
[28.82884979 77.09178162]
[18.89308167 86.69679260]
[5.60997105 90.09518433]
[-7.50861931 86.49929810]
[-17.04897308 76.95619965]
[-20.58377838 64.04577637]
[-35.04557419 60.06375885]
[-49.50737000 56.08174515]
[-63.96916962 52.09973145]
[-78.54744720 48.56791306]
[-93.22820282 45.48968506]
[-107.90895081 42.41145325]
[-122.58970642 39.33322525]
[-137.27046204 36.25499344]
[-151.43354797 43.79066086]
[-166.09786987 37.28395081]
[-170.01420593 21.72625732]
[-160.17828369 9.05210781]
[-144.13537598 8.98402691]
[-134.19223022 21.57424164]
[-119.51147461 24.65247154]
[-104.83072662 27.73070145]
[-90.14997101 30.80893135]
[-75.46921539 33.88716125]
[-72.29292297 32.22330475]
[-68.13882446 32.05310440]
[-63.73562622 33.82530594]
[-59.98715591 37.63793564]
[-45.52535629 41.61994934]
[-31.06356049 45.60196304]
[-16.60176468 49.58397675]
[-4.13894320 38.94414902]
[12.37373734 37.79506683]
[26.46971130 46.78443527]
[32.51113129 62.55077744]
[47.05213547 66.23305511]
[61.59313965 69.91534424]
[76.13414764 73.59762573]
[62.45359802 67.44599152]
[55.40118408 54.20727921]
[57.92822647 39.42167664]
[68.97720337 29.27671623]
[83.92428589 28.01790047]
[96.51437378 36.17202377]
[101.47871399 50.32671738]
[96.73904419 64.55947876]
[103.87825775 51.36737061]
[111.01746368 38.17526245]
[118.15667725 24.98315811]
[125.29589081 11.79105091]
[126.64410400 2.69127417]
[132.72140503 -1.59768903]
[140.13172913 -14.63943195]
[147.54205322 -27.68117523]
[154.95239258 -40.72291946]
[162.36271667 -53.76466370]
[169.77304077 -66.80640411]
[161.93302917 -80.01359558]
[161.76303101 -95.37155151]
[169.30876160 -108.74904633]
[182.54046631 -116.54761505]
[197.89888000 -116.66947937]
[211.25265503 -109.08184814]
[219.00970459 -95.82576752]
[219.08343506 -80.46705627]
[211.45397949 -67.13712311]
[198.17364502 -59.42165756]
[182.81478882 -59.39608002]
[175.40444946 -46.35433578]
[167.99412537 -33.31259155]
[160.58380127 -20.27084923]
[153.17347717 -7.22910643]
[145.76315308 5.81263685]
[138.48799133 18.93026161]
[131.34878540 32.12236786]
[124.20957184 45.31447601]
[117.07035828 58.50658035]
[109.93115234 71.69868469]
[122.93743134 85.18677521]
[124.52462769 102.12581635]
[116.09907532 114.88857269]
[122.96412659 128.22540283]
[129.82917786 141.56224060]
[136.69421387 154.89907837]
[143.55926514 168.23590088]
[150.42430115 181.57273865]
[157.28935242 194.90957642]
[164.15440369 208.24641418]
[171.01943970 221.58323669]
[177.88449097 234.92007446]
[191.13478088 237.53987122]
[200.30825806 247.18618774]
[202.20288086 260.16546631]
[196.34622192 271.68389893]
[202.93417358 285.15975952]
[209.52212524 298.63562012]
[216.11007690 312.11148071]
[222.69802856 325.58737183]
[229.28598022 339.06323242]
[235.87391663 352.53909302]
[244.07814026 365.09658813]
[258.90139771 370.62667847]
[261.22280884 385.33926392]
[270.91729736 396.78552246]
[280.61178589 408.23178101]
[290.30627441 419.67803955]
[306.11145020 422.43048096]
[313.68716431 436.57220459]
[307.22195435 451.25488281]
[291.67541504 455.21520996]
[278.97348022 445.41519165]
[278.86001587 429.37252808]
[269.16552734 417.92626953]
[259.47103882 406.48001099]
[249.77655029 395.03375244]
[235.64671326 390.32238770]
[232.63188171 374.79107666]
[233.86174011 389.74057007]
[228.59524536 403.78564453]
[217.83938599 414.24084473]
[203.65069580 419.10714722]
[188.74206543 417.45410156]
[175.96405029 409.59774780]
[167.75982666 397.04022217]
[165.69805908 382.18261719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[9 121]
[10 120]
[13 116]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[24 64]
[25 63]
[26 62]
[27 61]
[32 57]
[33 56]
[34 55]
[35 54]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[72 104]
[73 103]
[74 102]
[75 101]
[76 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[127 143]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% Start Annotations
4 126 0.0 0.6 colorpair
5 125 0.0 1 colorpair
6 124 0.0 1 colorpair
7 123 0.0 1 colorpair
8 122 0.0 1 colorpair
9 121 0.0 1 colorpair
10 120 0.0 1 colorpair
13 116 0.0 1 colorpair
14 115 0.0 1 colorpair
15 114 0.0 1 colorpair
16 113 0.0 1 colorpair
17 112 0.0 1 colorpair
18 111 0.0 1 colorpair
19 110 0.0 1 colorpair
20 109 0.0 1 colorpair
21 108 0.0 1 colorpair
22 107 0.0 1 colorpair
24 64 0.0 1 colorpair
25 63 0.0 1 colorpair
26 62 0.0 1 colorpair
27 61 0.0 1 colorpair
32 57 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
36 50 0.0 1 colorpair
37 49 0.0 1 colorpair
38 48 0.0 1 colorpair
39 47 0.0 1 colorpair
40 46 0.0 1 colorpair
72 104 0.0 1 colorpair
73 103 0.0 1 colorpair
74 102 0.0 1 colorpair
75 101 0.0 1 colorpair
76 100 0.0 1 colorpair
78 99 0.0 1 colorpair
79 98 0.0 1 colorpair
80 97 0.0 1 colorpair
81 96 0.0 1 colorpair
82 95 0.0 1 colorpair
83 94 0.0 1 colorpair
127 143 0.0 1 colorpair
129 141 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair
132 138 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 126 1 gmark

% End Annotations
showpage
end
%%EOF
