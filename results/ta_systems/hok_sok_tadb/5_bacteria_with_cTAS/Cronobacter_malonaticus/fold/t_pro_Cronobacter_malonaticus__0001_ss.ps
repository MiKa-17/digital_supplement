%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:18:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUGCCGCAAAAUACUCUGAUCUGGUGCGUAUUAAUCGUAUGUGUAACGCUAUUAAUAUUCACAUUCCUGACGCGGGAUACGCUUUGCGAACUCCGCCUGAAGGACGGGCAUAGGGAGGUCGCUGCGUUUCUGGCUUACAAAUCCGGUAAG\
) } def
/len { sequence length } bind def

/coor [
[53.24750137 529.21411133]
[43.04934692 526.25463867]
[33.06004715 522.65216064]
[23.32011223 518.42114258]
[13.86903763 513.57873535]
[4.74515104 508.14462280]
[-4.01454449 502.14074707]
[-12.37452126 495.59146118]
[-20.30087280 488.52331543]
[-27.76144791 480.96490479]
[-34.72598267 472.94689941]
[-41.16622543 464.50180054]
[-47.05604553 455.66378784]
[-52.37155151 446.46871948]
[-57.09116364 436.95382690]
[-61.19573975 427.15771484]
[-64.66860962 417.12008667]
[-67.49567413 406.88162231]
[-69.66545105 396.48382568]
[-71.16912079 385.96884155]
[-72.00057220 375.37933350]
[-72.15640259 364.75817871]
[-71.63596344 354.14846802]
[-70.44134521 343.59323120]
[-68.57736969 333.13525391]
[-66.05156708 322.81692505]
[-62.87416458 312.68011475]
[-59.05801773 302.76586914]
[-54.61857986 293.11447144]
[-49.57382965 283.76501465]
[-43.94420242 274.75540161]
[-37.75250626 266.12222290]
[-31.02382278 257.90042114]
[-23.78541756 250.12342834]
[-16.06661987 242.82272339]
[-7.89871359 236.02793884]
[0.68520325 229.76666260]
[9.65034008 224.06427002]
[18.96035957 218.94390869]
[28.57752991 214.42636108]
[38.46286392 210.52996826]
[48.57629395 207.27052307]
[58.87682343 204.66128540]
[69.32269287 202.71286011]
[79.87156677 201.43313599]
[90.48065948 200.82734680]
[90.78079224 185.83035278]
[91.08092499 170.83334351]
[77.31658936 167.69325256]
[64.43930054 161.90597534]
[52.95263290 153.69784546]
[43.30577087 143.38983154]
[35.87596130 131.38504028]
[30.95375061 118.15293121]
[28.73162270 104.21093750]
[29.29647827 90.10427094]
[32.62622452 76.38458252]
[38.59065247 63.58838654]
[46.95652008 52.21608353]
[57.39667511 42.71239090]
[69.50285339 35.44895172]
[82.80163574 30.70981407]
[96.77297211 28.68029976]
[97.67288208 13.70731831]
[98.57279968 -1.26566243]
[99.47271729 -16.23864365]
[92.57728577 -30.47815132]
[101.06421661 -42.71830368]
[101.96412659 -57.69128418]
[102.86404419 -72.66426849]
[88.70744324 -77.96351624]
[76.74277496 -87.20137787]
[68.03393555 -99.55643463]
[63.35530472 -113.93009186]
[63.12290573 -129.04423523]
[67.35739899 -143.55493164]
[75.68226624 -156.17190552]
[87.35725403 -165.77326965]
[101.34423828 -171.50526428]
[116.39949799 -172.85820007]
[131.18434143 -169.71179199]
[144.38409424 -162.34580994]
[154.82505798 -151.41522217]
[161.57882690 -137.89198303]
[164.04486084 -122.97856140]
[162.00387573 -108.00104523]
[155.63734436 -94.29124451]
[145.51139832 -83.06819916]
[132.52642822 -75.32987213]
[117.83702850 -71.76435089]
[116.93711090 -56.79137039]
[116.03719330 -41.81838989]
[122.99699402 -28.64984703]
[114.44569397 -15.33872700]
[113.54578400 -0.36574665]
[112.64586639 14.60723400]
[111.74594879 29.58021545]
[126.98860931 33.90515518]
[140.90197754 41.48553848]
[152.80075073 51.94800186]
[162.09886169 64.77722168]
[168.33836365 79.34130096]
[171.21191406 94.92291260]
[170.57798767 110.75459290]
[166.46780396 126.05655670]
[159.08381653 140.07513428]
[148.78970337 152.11985779]
[136.09249878 161.59744263]
[121.61758423 168.04112244]
[106.07791901 171.13348389]
[105.77778625 186.13047791]
[105.47765350 201.12747192]
[128.51208496 204.25973511]
[150.88626099 210.56201172]
[172.16618347 219.91162109]
[191.93910217 232.12672424]
[209.82159424 246.96994019]
[225.46693420 264.15292358]
[238.57188416 283.34197998]
[248.88249207 304.16448975]
[256.19912720 326.21624756]
[260.38018799 349.06924438]
[261.34497070 372.27996826]
[259.07525635 395.39797974]
[253.61544800 417.97482300]
[245.07194519 439.57244873]
[233.61090088 459.77200317]
[245.72850037 468.61303711]
[257.84606934 477.45410156]
[272.57135010 472.56060791]
[287.35043335 477.28909302]
[296.50045776 489.82128906]
[296.50308228 505.33837891]
[287.35726929 517.87365723]
[272.57980347 522.60711670]
[257.85287476 517.71862793]
[248.83932495 505.08786011]
[249.00503540 489.57168579]
[236.88745117 480.73065186]
[224.76986694 471.88958740]
[217.87503052 479.96154785]
[210.48033142 487.57849121]
[202.61575317 494.70947266]
[194.31315613 501.32562256]
[185.60618591 507.40002441]
[176.53013611 512.90814209]
[167.12179565 517.82751465]
[157.41929626 522.13818359]
[147.46195984 525.82275391]
[137.29016113 528.86621094]
[126.94512177 531.25616455]
[116.46878815 532.98291016]
[105.90363312 534.03942871]
[95.29248047 534.42150879]
[84.67835236 534.12744141]
[74.10428619 533.15844727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[46 112]
[47 111]
[48 110]
[63 97]
[64 96]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
[127 140]
[128 139]
[129 138]
] def

init

% Start Annotations
46 112 0.16 1 colorpair
47 111 0.0 1 colorpair
48 110 0.32 1 colorpair
64 96 0.16 1 colorpair
65 95 0.0 1 colorpair
66 94 0.16 1 colorpair
68 92 0.0 1 colorpair
69 91 0.16 0.2 colorpair
70 90 0.48 0.2 colorpair
127 140 0.0 1 colorpair
128 139 0.16 1 colorpair
129 138 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
112 cmark
48 cmark
110 cmark
63 97 3 gmark
63 cmark
97 cmark
96 cmark
66 cmark
69 91 2 gmark
69 cmark
70 90 2 gmark
70 cmark
90 cmark
128 cmark
129 cmark
138 cmark

% End Annotations
showpage
end
%%EOF
