%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:18:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAAUCUGAUGUUG_UUCAAGCAUGCAGAUGGCCUCGUUGGUUAAUUGAA_AAAUGACCUUCGGGGCUUUCUUCUUUCUGCCUCACA_CAUUGCGGCA_ACACUGCCAACUGCAUGAGGCAAAAAGCCUCAAGCGCCGCCGGCAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[74.55798340 244.29556274]
[76.52596283 229.35488892]
[81.88701630 215.27099609]
[90.35203552 202.80343628]
[101.46450043 192.62454224]
[114.62513733 185.28326416]
[110.52857971 170.85350037]
[106.43201447 156.42373657]
[102.33545685 141.99395752]
[98.23889923 127.56419373]
[94.14233398 113.13442993]
[97.94606018 127.64413452]
[98.23582458 142.64134216]
[94.99542236 157.28715515]
[88.40610504 170.76234436]
[78.83645630 182.31318665]
[66.82176208 191.29354858]
[53.03406525 197.20112610]
[38.24460220 199.70547485]
[23.28062630 198.66650391]
[8.97916317 194.14231873]
[-3.85982251 186.38600159]
[-14.51817322 175.83140564]
[-22.39970589 163.06890869]
[-27.06356049 148.81237793]
[-28.24885941 133.85928345]
[-25.88930130 119.04602814]
[-20.11687279 105.20121002]
[-11.25445843 93.09924316]
[0.20221628 83.41706085]
[13.61231327 76.69625092]
[28.22572708 73.31274414]
[43.22504425 73.45579529]
[57.77126694 77.11740875]
[71.05074310 84.09276581]
[82.31985474 93.99079132]
[71.25235748 83.86604309]
[60.18485641 73.74129486]
[44.78008652 70.13525391]
[40.61202621 55.83572388]
[29.54452705 45.71097946]
[18.47702789 35.58623505]
[7.40952873 25.46148872]
[-3.65797067 15.33674335]
[-14.72546959 5.21199846]
[-25.79296875 -4.91274643]
[-41.36099625 -4.38905287]
[-52.44078445 -14.81464481]
[-52.84410477 -29.65960693]
[-63.91160583 -39.78435135]
[-74.97910309 -49.90909576]
[-88.73568726 -43.44187927]
[-103.92024231 -42.73635864]
[-118.21723175 -47.90011978]
[-129.44647217 -58.14573288]
[-135.89559937 -71.91080475]
[-136.58113098 -87.09627533]
[-131.39857483 -101.38646698]
[-121.13819885 -112.60221863]
[-107.36465454 -119.03322601]
[-92.17829132 -119.69879150]
[-77.89493561 -114.49743652]
[-66.69268799 -104.22231293]
[-60.27980804 -90.44032288]
[-59.63421631 -75.25309753]
[-64.85436249 -60.97659683]
[-53.78686142 -50.85185242]
[-42.71936035 -40.72710800]
[-27.89722443 -41.64355087]
[-16.52897644 -31.53327942]
[-15.66822433 -15.98024559]
[-4.60072470 -5.85550070]
[6.46677446 4.26924419]
[17.53427315 14.39398956]
[28.60177231 24.51873398]
[39.66927338 34.64347839]
[50.73677063 44.76822281]
[65.34992218 47.65007782]
[70.30960083 62.67379761]
[81.37709808 72.79854584]
[92.44460297 82.92328644]
[85.70184326 69.52421570]
[89.68470764 55.06265259]
[102.33684540 47.00514221]
[117.12592316 49.51179123]
[126.41629791 61.28841019]
[125.41134644 76.25470734]
[114.62802887 86.68434906]
[128.41427612 80.77340698]
[142.20053101 74.86246490]
[155.98678589 68.95151520]
[165.62130737 56.40215683]
[180.36772156 58.49803543]
[194.15396118 52.58708954]
[192.78349304 38.98146820]
[195.31053162 25.55967903]
[201.51972961 13.41406155]
[210.89643860 3.53034925]
[222.66938782 -3.29232693]
[235.87411499 -6.50604773]
[249.43196106 -5.85809898]
[262.23818970 -1.41081643]
[273.25198364 6.46427107]
[281.58108521 17.11746025]
[295.59008789 11.75577831]
[309.59912109 6.39409590]
[314.53344727 -8.44457817]
[327.87850952 -16.59585190]
[343.33316040 -14.21094513]
[353.60018921 -2.41593599]
[353.83181763 13.21993160]
[343.91867065 25.31388092]
[328.54144287 28.15551567]
[314.96078491 20.40310669]
[300.95178223 25.76478767]
[286.94277954 31.12647057]
[287.54544067 47.52820587]
[282.50720215 63.17546082]
[272.41629028 76.18448639]
[258.47024536 84.98290253]
[242.33392334 88.49973297]
[225.94075012 86.29574585]
[211.26095581 78.61821747]
[200.06491089 66.37334442]
[186.27865601 72.28428650]
[177.63021851 84.41085815]
[161.89772034 82.73777008]
[148.11148071 88.64871216]
[134.32522583 94.55966187]
[120.53897095 100.47060394]
[118.07538605 104.04469299]
[115.08396912 106.68864441]
[111.82889557 108.34883118]
[108.57210541 109.03786469]
[112.66866302 123.46763611]
[116.76522827 137.89739990]
[120.86178589 152.32716370]
[124.95834351 166.75694275]
[129.05490112 181.18670654]
[144.10977173 180.51770020]
[158.91300964 183.33921814]
[172.66629028 189.49908447]
[184.62791443 198.66513062]
[194.15281677 210.34301758]
[200.72732544 223.90296936]
[203.99687195 238.61373901]
[203.78515625 253.68199158]
[200.10359192 268.29507446]
[193.15069580 281.66497803]
[183.30146790 293.07064819]
[171.08703613 301.89700317]
[157.16612244 307.66802979]
[142.28945923 310.07254028]
[127.25933075 308.98080444]
[112.88628387 304.45178223]
[99.94544220 296.72961426]
[89.13469696 286.23083496]
[81.03705597 273.52160645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 139]
[7 138]
[8 137]
[9 136]
[10 135]
[11 134]
[36 81]
[37 80]
[38 79]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[49 68]
[50 67]
[51 66]
[88 130]
[89 129]
[90 128]
[91 127]
[93 125]
[94 124]
[104 116]
[105 115]
[106 114]
] def

init

% Start Annotations
6 139 0.16 1 colorpair
7 138 0.0 1 colorpair
8 137 0.0 1 colorpair
9 136 0.0 1 colorpair
10 135 0.0 1 colorpair
11 134 0.0 1 colorpair
36 81 0.16 1 colorpair
37 80 0.0 1 colorpair
38 79 0.16 1 colorpair
40 77 0.16 1 colorpair
41 76 0.0 1 colorpair
42 75 0.0 1 colorpair
43 74 0.0 1 colorpair
44 73 0.0 1 colorpair
45 72 0.0 1 colorpair
46 71 0.0 1 colorpair
49 68 0.0 1 colorpair
50 67 0.0 1 colorpair
51 66 0.16 1 colorpair
88 130 0.0 1 colorpair
89 129 0.0 1 colorpair
91 127 0.0 1 colorpair
93 125 0.16 0.2 colorpair
94 124 0.16 0.2 colorpair
104 116 0.16 0.2 colorpair
105 115 0.16 0.2 colorpair
106 114 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
139 cmark
36 cmark
38 cmark
40 cmark
66 cmark
90 128 4 gmark
90 cmark
128 cmark
93 125 2 gmark
93 cmark
94 124 2 gmark
94 cmark
124 cmark
104 116 2 gmark
104 cmark
116 cmark
105 115 2 gmark
105 cmark
115 cmark
106 114 2 gmark
106 cmark

% End Annotations
showpage
end
%%EOF
