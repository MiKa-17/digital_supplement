%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:27:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________________AUG___CUGACGAAAUAUGCCCUUGU___GGCAGUCAUAGUGCUGUGUUUCACGGUGCUGGUAUUCACAUUGAUGGUAGGAGACUCGCUGUGUGAGUUGCGUAUCAAAGAAGGUAAUAUGGAGUUUACGGCAGUUCUCGCUUACGAAUCGAA___GAA_\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50795746 91.96458435]
[62.54457474 90.89440918]
[47.62892532 89.29084015]
[32.78001404 87.15591431]
[18.01676369 84.49236298]
[3.35798955 81.30356598]
[-11.17762852 77.59359741]
[-25.57156754 73.36718750]
[-39.80548477 68.62970734]
[-53.86124039 63.38721085]
[-67.72092438 57.64636993]
[-81.36686707 51.41450119]
[-94.78169250 44.69954681]
[-107.94829559 37.51006699]
[-120.84989929 29.85521889]
[-133.47006226 21.74476051]
[-145.79270935 13.18902588]
[-157.80210876 4.19891930]
[-169.48300171 -5.21410370]
[-180.82046509 -15.03804684]
[-191.80007935 -25.26039124]
[-202.40782166 -35.86811066]
[-212.63020325 -46.84768677]
[-222.45417786 -58.18512726]
[-231.86723328 -69.86598206]
[-240.85737610 -81.87537384]
[-249.41314697 -94.19799042]
[-257.52365112 -106.81813049]
[-265.17852783 -119.71971130]
[-272.36804199 -132.88629150]
[-279.08303833 -146.30110168]
[-285.31494141 -159.94702148]
[-291.05581665 -173.80668640]
[-296.29837036 -187.86242676]
[-301.03588867 -202.09632874]
[-305.26232910 -216.49026489]
[-308.97235107 -231.02586365]
[-312.16116333 -245.68463135]
[-314.82476807 -260.44787598]
[-316.95974731 -275.29678345]
[-318.56335449 -290.21243286]
[-319.63357544 -305.17581177]
[-320.16903687 -320.16784668]
[-320.16903687 -335.16946411]
[-319.63360596 -350.16149902]
[-318.56341553 -365.12487793]
[-316.95983887 -380.04052734]
[-314.82489014 -394.88943481]
[-312.16134644 -409.65267944]
[-308.97253418 -424.31146240]
[-305.26254272 -438.84707642]
[-301.03610229 -453.24099731]
[-296.29861450 -467.47491455]
[-291.05612183 -481.53067017]
[-285.31524658 -495.39035034]
[-279.08337402 -509.03628540]
[-272.36840820 -522.45111084]
[-265.17892456 -535.61767578]
[-257.52404785 -548.51928711]
[-249.41358948 -561.13946533]
[-240.85784912 -573.46209717]
[-231.86772156 -585.47149658]
[-222.45469666 -597.15234375]
[-212.63073730 -608.48980713]
[-202.40838623 -619.46942139]
[-191.80064392 -630.07714844]
[-180.82106018 -640.29949951]
[-169.48361206 -650.12347412]
[-157.80274963 -659.53649902]
[-145.79335022 -668.52667236]
[-133.47073364 -677.08239746]
[-120.85057831 -685.19287109]
[-107.94898987 -692.84777832]
[-94.78240204 -700.03729248]
[-81.36759186 -706.75225830]
[-67.72165680 -712.98413086]
[-53.86198425 -718.72503662]
[-39.80624008 -723.96752930]
[-25.57233238 -728.70501709]
[-11.17840099 -732.93145752]
[3.35720992 -736.64147949]
[18.01597786 -739.83032227]
[32.77922058 -742.49389648]
[47.62812805 -744.62884521]
[62.54377747 -746.23242188]
[77.50715637 -747.30267334]
[92.49919891 -747.83807373]
[107.50080109 -747.83807373]
[122.49284363 -747.30267334]
[137.45622253 -746.23242188]
[152.37187195 -744.62884521]
[167.22077942 -742.49389648]
[181.98402405 -739.83032227]
[196.64279175 -736.64147949]
[211.17840576 -732.93145752]
[225.57232666 -728.70501709]
[239.80624390 -723.96752930]
[253.86198425 -718.72503662]
[267.72164917 -712.98413086]
[281.36758423 -706.75225830]
[294.78240967 -700.03729248]
[307.94900513 -692.84777832]
[320.85058594 -685.19287109]
[333.47073364 -677.08239746]
[345.79336548 -668.52667236]
[357.80273438 -659.53649902]
[369.48361206 -650.12347412]
[380.82107544 -640.29949951]
[391.80065918 -630.07714844]
[402.40838623 -619.46942139]
[412.63073730 -608.48980713]
[422.45468140 -597.15234375]
[431.86773682 -585.47149658]
[440.85784912 -573.46209717]
[449.41357422 -561.13946533]
[457.52404785 -548.51928711]
[465.17892456 -535.61767578]
[472.36840820 -522.45111084]
[479.08337402 -509.03628540]
[485.31524658 -495.39035034]
[491.05612183 -481.53067017]
[496.29861450 -467.47491455]
[501.03610229 -453.24099731]
[505.26254272 -438.84707642]
[508.97253418 -424.31146240]
[512.16131592 -409.65267944]
[514.82489014 -394.88943481]
[516.95983887 -380.04052734]
[518.56341553 -365.12487793]
[519.63360596 -350.16149902]
[520.16906738 -335.16946411]
[520.16900635 -320.16784668]
[519.63354492 -305.17581177]
[518.56335449 -290.21243286]
[516.95971680 -275.29678345]
[514.82476807 -260.44787598]
[512.16119385 -245.68463135]
[508.97235107 -231.02586365]
[505.26232910 -216.49026489]
[501.03588867 -202.09632874]
[496.29837036 -187.86242676]
[491.05581665 -173.80668640]
[485.31494141 -159.94702148]
[479.08303833 -146.30110168]
[472.36804199 -132.88629150]
[465.17852783 -119.71971130]
[457.52365112 -106.81813049]
[449.41314697 -94.19799042]
[440.85736084 -81.87537384]
[431.86721802 -69.86598206]
[422.45416260 -58.18512726]
[412.63018799 -46.84768677]
[402.40783691 -35.86811066]
[391.80007935 -25.26039124]
[380.82046509 -15.03804684]
[369.48300171 -5.21410370]
[357.80212402 4.19891930]
[345.79269409 13.18902588]
[333.47006226 21.74476051]
[320.84988403 29.85521889]
[307.94830322 37.51006699]
[294.78167725 44.69954681]
[281.36688232 51.41450119]
[267.72091675 57.64636993]
[253.86123657 63.38721085]
[239.80548096 68.62970734]
[225.57156372 73.36718750]
[211.17762756 77.59359741]
[196.64201355 81.30356598]
[181.98323059 84.49236298]
[167.21998596 87.15591431]
[152.37107849 89.29084015]
[137.45542908 90.89440918]
[122.49204254 91.96458435]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
