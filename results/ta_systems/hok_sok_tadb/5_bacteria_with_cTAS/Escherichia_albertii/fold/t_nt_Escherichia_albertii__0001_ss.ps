%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:27:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAACCUUAUGGUGUC___UAUACAUAGG____G_GAGCCUCAUGU___UAAUU_______________UAAA_GUUAAC______UGGGGCUUUUCUCUGUCUGCCUUUCGG__UG_AUA_________________CCUGAGGCAGACAGCCUCAAGCACCCG__________\
) } def
/len { sequence length } bind def

/coor [
[50.77383423 247.72247314]
[48.98985291 232.70007324]
[51.93735504 217.86203003]
[59.32757187 204.66203308]
[70.43648529 194.39328003]
[84.17575073 188.06181335]
[72.34666443 179.08360291]
[70.33046722 164.00415039]
[79.82785034 151.65759277]
[78.04898071 136.76344299]
[76.27011108 121.86930084]
[68.74896240 134.84744263]
[60.35610580 147.27966309]
[51.13101196 159.10749817]
[41.11704636 170.27532959]
[30.36129570 180.73065186]
[18.91433144 190.42431641]
[6.82997704 199.31072998]
[-5.83495045 207.34811401]
[-19.02090263 214.49868774]
[-32.66588211 220.72882080]
[-46.70573044 226.00921631]
[-61.07443619 230.31506348]
[-75.70443726 233.62611389]
[-90.52695465 235.92677307]
[-105.47228241 237.20625305]
[-120.47016144 237.45852661]
[-135.45007324 236.68241882]
[-150.34158325 234.88154602]
[-165.07466125 232.06442261]
[-179.58004761 228.24426270]
[-193.78955078 223.43902588]
[-207.63633728 217.67132568]
[-221.05531311 210.96826172]
[-233.98338318 203.36137390]
[-246.35977173 194.88639832]
[-258.12628174 185.58320618]
[-269.22756958 175.49552917]
[-279.61148071 164.67080688]
[-289.22912598 153.15991211]
[-298.03536987 141.01699829]
[-305.98873901 128.29914856]
[-313.05184937 115.06614685]
[-319.19152832 101.38022614]
[-324.37887573 87.30572510]
[-328.58950806 72.90882874]
[-331.80361938 58.25722885]
[-334.00610352 43.41981125]
[-335.18661499 28.46633720]
[-335.33959961 13.46711636]
[-334.46435547 -1.50732529]
[-332.56494141 -16.38658142]
[-329.65036011 -31.10069466]
[-325.73425293 -45.58047867]
[-320.83505249 -59.75785065]
[-314.97579956 -73.56615448]
[-308.18408203 -86.94046783]
[-300.49176025 -99.81790161]
[-291.93502808 -112.13791656]
[-282.55416870 -123.84257507]
[-272.39321899 -134.87684631]
[-261.49996948 -145.18885803]
[-249.92568970 -154.73011780]
[-237.72473145 -163.45576477]
[-224.95451355 -171.32476807]
[-211.67504883 -178.30014038]
[-197.94877625 -184.34907532]
[-183.84025574 -189.44313049]
[-169.41580200 -193.55836487]
[-154.74324036 -196.67541504]
[-139.89155579 -198.77964783]
[-124.93060303 -199.86114502]
[-109.93069458 -199.91482544]
[-94.96237946 -198.94044495]
[-80.09602356 -196.94259644]
[-65.40152740 -193.93064880]
[-50.94798279 -189.91877747]
[-36.80335236 -184.92584229]
[-23.03413773 -178.97532654]
[-9.70507908 -172.09518433]
[3.12115121 -164.31779480]
[15.38424683 -155.67971802]
[27.02654839 -146.22155762]
[37.99331665 -135.98779297]
[48.23298645 -125.02652740]
[57.69741440 -113.38932037]
[66.34210205 -101.13088226]
[74.12639618 -88.30883789]
[81.01370239 -74.98348999]
[86.97164154 -61.21747971]
[91.97219086 -47.07553864]
[95.99184418 -32.62415695]
[99.01170349 -17.93128586]
[101.01756287 -3.06600761]
[102.00000000 11.90178490]
[101.95439148 26.90171623]
[100.88094330 41.86325836]
[98.78472137 56.71606445]
[95.67131042 71.40744781]
[102.98673248 58.31224060]
[110.30215454 45.21702576]
[101.48444366 32.75867081]
[98.95389557 17.70679092]
[103.21296692 3.04994774]
[113.41600800 -8.30173302]
[127.53720856 -14.09436512]
[142.77278137 -13.17781830]
[156.09770203 -5.73407269]
[164.86628723 6.75890970]
[167.33753967 21.82063866]
[163.02078247 36.46059799]
[152.77311707 47.77201080]
[138.62921143 53.50898743]
[123.39736938 52.53245163]
[116.08194733 65.62766266]
[108.76651764 78.72287750]
[121.46459198 70.73794556]
[134.16265869 62.75301743]
[146.86071777 54.76808929]
[159.55879211 46.78316116]
[172.25686646 38.79823303]
[184.95492554 30.81330490]
[193.36491394 18.39267349]
[204.31468201 8.14070988]
[217.26141357 0.56562060]
[231.56333923 -3.95708656]
[246.51148987 -5.20321512]
[261.36486816 -3.11099195]
[275.38714600 2.21586776]
[287.88323975 10.51330376]
[298.23370361 21.37000084]
[305.92544556 34.24777603]
[310.57717896 48.50826263]
[311.95831299 63.44454575]
[310.00033569 78.31620789]
[304.80038452 92.38604736]
[296.61618042 104.95659637]
[285.85342407 115.40472412]
[273.04565430 123.21248627]
[258.82778931 127.99285126]
[243.90458679 129.50885010]
[229.01583862 127.68532562]
[214.89959717 122.61267853]
[202.25765991 114.54400635]
[187.43469238 112.24622345]
[172.61172485 109.94844818]
[157.78877258 107.65066528]
[142.96580505 105.35288239]
[128.14283752 103.05510712]
[113.31987762 100.75732422]
[125.22663879 109.88032532]
[137.13339233 119.00331879]
[149.04016113 128.12631226]
[160.94691467 137.24931335]
[172.85366821 146.37231445]
[188.88267517 145.70092773]
[199.29228210 157.90829468]
[196.09713745 173.62995911]
[181.74827576 180.80560303]
[167.25292969 173.93069458]
[163.73066711 158.27906799]
[151.82391357 149.15608215]
[139.91716003 140.03308105]
[128.01039124 130.91007996]
[116.10363770 121.78707886]
[104.19688416 112.66407776]
[91.16425323 120.09043121]
[92.94312286 134.98457336]
[94.72199249 149.87872314]
[106.85996246 159.64128113]
[108.45181274 174.77140808]
[99.06990051 186.28294373]
[113.91383362 189.20060730]
[127.12866211 196.56427002]
[137.41972351 207.65252686]
[143.77880859 221.37902832]
[145.58291626 236.39903259]
[142.65530396 251.24101257]
[135.28279114 264.45089722]
[124.18764496 274.73452759]
[110.45687103 281.08441162]
[95.43566895 282.87844849]
[80.59565735 279.94088745]
[67.39070892 272.55953979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 172]
[9 169]
[10 168]
[11 167]
[99 116]
[100 115]
[101 114]
[150 166]
[151 165]
[152 164]
[153 163]
[154 162]
[155 161]
] def

init

% Start Annotations
6 172 0.0 1 colorpair
9 169 0.0 0.6 colorpair
10 168 0.0 1 colorpair
11 167 0.0 0.2 colorpair
99 116 0.0 1 colorpair
100 115 0.0 1 colorpair
101 114 0.0 1 colorpair
150 166 0.0 0.6 colorpair
151 165 0.0 1 colorpair
152 164 0.0 1 colorpair
153 163 0.0 1 colorpair
154 162 0.16 0.6 colorpair
155 161 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 169 1 gmark
11 167 2 gmark
150 166 1 gmark
154 162 1 gmark
154 cmark
162 cmark

% End Annotations
showpage
end
%%EOF
