%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:22:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______CCAUUAAAAACUGCGCUAGGCAUCGUCUUUAUUAUCUGCCUGACGAUAGUGAUAUUUACCUUGAUGACGCGCGAUACACUGUGCGAGUUUCCAAUAAAAAAUGAACAUCAGGAGGUGGCGGCGAAAUUAGCCUGCGUGGCAGGC___\
) } def
/len { sequence length } bind def

/coor [
[112.61580658 219.96107483]
[113.00052643 206.38938904]
[116.23408508 193.19609070]
[122.17438507 180.97267151]
[130.55793762 170.26773071]
[141.01148987 161.56237793]
[134.22891235 148.18341064]
[127.44633484 134.80445862]
[120.66374969 121.42549133]
[113.88117218 108.04652405]
[111.29315948 113.63217926]
[106.42348480 118.26317596]
[99.67586517 121.01494598]
[91.82045746 121.14832306]
[83.90656281 118.25036621]
[77.12321472 112.33454895]
[62.20117950 113.86189270]
[47.27914047 115.38923645]
[32.35710526 116.91658020]
[17.45142174 118.59604645]
[2.56364346 120.42745972]
[-12.32413387 122.25888062]
[-27.21191216 124.09029388]
[-42.09968948 125.92170715]
[-56.98746490 127.75312042]
[-71.87524414 129.58453369]
[-86.76302338 131.41595459]
[-101.65080261 133.24736023]
[-105.67601776 147.90567017]
[-115.00827789 159.90473938]
[-128.22447205 167.41477966]
[-143.30921936 169.29057312]
[-157.96221924 165.24606323]
[-169.94900513 155.89804077]
[-177.44165039 142.67198181]
[-179.29759216 127.58477020]
[-175.23382568 112.93709564]
[-165.87002563 100.96263123]
[-152.63412476 93.48738861]
[-137.54447937 91.65129089]
[-122.90217590 95.73432159]
[-110.94004059 105.11386108]
[-103.48221588 118.35958862]
[-88.59443665 116.52817535]
[-73.70665741 114.69676208]
[-58.81888199 112.86534119]
[-43.93110275 111.03392792]
[-29.04332542 109.20251465]
[-14.15554905 107.37110138]
[0.73222876 105.53968811]
[15.62000656 103.70827484]
[21.91272354 99.74626160]
[30.82975960 101.99454498]
[45.75179672 100.46720123]
[60.67383575 98.93985748]
[75.59587097 97.41250610]
[82.51456451 84.10342407]
[75.19191742 71.01224518]
[67.86927795 57.92107010]
[60.54663086 44.82989502]
[45.12273026 43.13199234]
[33.66521072 32.66753387]
[30.57972336 17.46031952]
[37.05270386 3.35783124]
[50.59515381 -4.21723557]
[65.99972534 -2.35211325]
[77.34305573 8.23602104]
[80.26338959 23.47581291]
[73.63780975 37.50725174]
[80.96044922 50.59842682]
[88.28309631 63.68960571]
[95.60573578 76.78077698]
[110.49351501 74.94936371]
[114.42504120 60.47376251]
[118.35656738 45.99815750]
[122.28809357 31.52255440]
[126.21961975 17.04694939]
[130.15113831 2.57134628]
[134.08267212 -11.90425777]
[124.25393677 -23.91157532]
[123.39366150 -39.40478516]
[131.83264160 -52.42643356]
[146.32591248 -57.96942902]
[161.30050659 -53.90237427]
[170.99841309 -41.78914261]
[171.69055176 -26.28751183]
[163.11082458 -13.35817719]
[148.55827332 -7.97273254]
[144.62673950 6.50287151]
[140.69522095 20.97847557]
[136.76370239 35.45407867]
[132.83216858 49.92968369]
[128.90065002 64.40528870]
[124.96911621 78.88088989]
[135.35932922 68.06222534]
[140.23342896 53.87620926]
[148.15881348 41.14089203]
[158.73341370 30.50237465]
[171.42073059 22.50037575]
[185.57710266 17.54086113]
[200.48437500 15.87543678]
[215.38621521 17.58859634]
[229.52664185 22.59342766]
[242.18826294 30.63601875]
[252.72872925 41.30834961]
[260.61328125 54.06898499]
[265.44192505 68.27054596]
[266.96969604 83.19253540]
[265.11904907 98.07794189]
[259.98391724 112.17156982]
[251.82481384 124.75842285]
[241.05564880 135.19993591]
[228.22277832 142.96636963]
[213.97726440 147.66372681]
[199.04179382 149.05369568]
[184.17411804 147.06575012]
[170.12847900 141.80075073]
[157.61747742 133.52581787]
[147.27580261 122.66073608]
[139.62663269 109.75334930]
[127.26013947 101.26394653]
[134.04270935 114.64291382]
[140.82528687 128.02186584]
[147.60787964 141.40083313]
[154.39045715 154.77980042]
[170.57223511 151.15182495]
[187.13336182 151.78402710]
[202.97178650 156.62902832]
[217.03486633 165.35934448]
[228.38940430 177.38943481]
[236.28346252 191.91497803]
[240.19628906 207.96667480]
[239.87257385 224.47492981]
[235.33911133 240.34111023]
[226.90270996 254.51062012]
[215.12939453 266.04309082]
[222.71755981 278.98217773]
[230.30572510 291.92126465]
[245.40483093 297.34310913]
[250.44338989 312.57443237]
[241.55624390 325.93099976]
[225.56086731 327.16683960]
[214.72752380 315.33392334]
[217.36663818 299.50939941]
[209.77847290 286.57034302]
[202.19032288 273.63125610]
[189.31303406 277.74179077]
[175.85250854 279.05120850]
[162.41123962 277.49804688]
[149.59147644 273.14910889]
[137.96821594 266.19647217]
[128.06338501 256.94912720]
[120.32245636 245.81913757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[16 56]
[17 55]
[18 54]
[19 53]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[57 72]
[58 71]
[59 70]
[60 69]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[136 146]
[137 145]
[138 144]
] def

init

% Start Annotations
6 125 0.0 0.2 colorpair
7 124 0.0 0.6 colorpair
8 123 0.0 0.6 colorpair
9 122 0.0 1 colorpair
10 121 0.0 0.6 colorpair
16 56 0.0 1 colorpair
17 55 0.16 0.6 colorpair
18 54 0.0 1 colorpair
19 53 0.16 0.6 colorpair
20 51 0.32 1 colorpair
21 50 0.0 0.6 colorpair
22 49 0.0 0.2 colorpair
23 48 0.16 1 colorpair
24 47 0.32 1 colorpair
25 46 0.32 1 colorpair
26 45 0.16 0.6 colorpair
27 44 0.0 0.2 colorpair
28 43 0.32 1 colorpair
57 72 0.16 0.6 colorpair
58 71 0.0 1 colorpair
59 70 0.16 1 colorpair
60 69 0.16 1 colorpair
73 94 0.16 0.6 colorpair
74 93 0.16 1 colorpair
75 92 0.0 0.2 colorpair
76 91 0.0 0.6 colorpair
77 90 0.16 1 colorpair
78 89 0.16 0.6 colorpair
79 88 0.16 1 colorpair
136 146 0.0 1 colorpair
137 145 0.16 1 colorpair
138 144 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 125 2 gmark
7 124 1 gmark
8 123 1 gmark
10 121 1 gmark
17 55 1 gmark
17 cmark
55 cmark
19 53 1 gmark
19 cmark
20 cmark
51 cmark
21 50 1 gmark
22 49 2 gmark
23 cmark
24 cmark
47 cmark
25 cmark
46 cmark
26 45 1 gmark
45 cmark
27 44 2 gmark
28 cmark
43 cmark
57 72 1 gmark
57 cmark
72 cmark
70 cmark
60 cmark
69 cmark
73 94 1 gmark
73 cmark
74 cmark
75 92 2 gmark
76 91 1 gmark
90 cmark
78 89 1 gmark
78 cmark
79 cmark
137 cmark
145 cmark
138 144 1 gmark
138 cmark
144 cmark

% End Annotations
showpage
end
%%EOF
