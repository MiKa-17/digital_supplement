%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:49:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________________AAAUGCUGACAAAAUAUGCCCUGGUGGCAAUCAUCGUGCUGUGUCUCACGGUGCUGGGAUUUACGUUGAUGGUGCGCGACUCGCUGUGCGAACUCAGGAUCAAAGAGCGUAGUAUGGAGUUGAAGGCUGUUCUCGCUUACGAAUCGAA___G_AA_\
) } def
/len { sequence length } bind def

/coor [
[105.16599274 311.06643677]
[96.43801117 311.09957886]
[87.71611786 310.77200317]
[79.01522064 310.08419800]
[70.35018158 309.03735352]
[61.73581314 307.63327026]
[53.18683624 305.87435913]
[44.71786118 303.76361084]
[36.34336472 301.30462646]
[28.07765579 298.50164795]
[19.93486023 295.35940552]
[11.92889214 291.88330078]
[4.07343674 288.07928467]
[-3.61808324 283.95385742]
[-11.13252258 279.51403809]
[-18.45703888 274.76742554]
[-25.57911491 269.72216797]
[-32.48657990 264.38684082]
[-39.16762924 258.77056885]
[-45.61084366 252.88298035]
[-51.80521393 246.73411560]
[-57.74015427 240.33448792]
[-63.40551758 233.69503784]
[-68.79162598 226.82708740]
[-73.88927460 219.74241638]
[-78.68975067 212.45309448]
[-83.18485260 204.97158813]
[-87.36689758 197.31069946]
[-91.22872925 189.48350525]
[-94.76376343 181.50338745]
[-97.96595001 173.38397217]
[-100.82981873 165.13916016]
[-103.35047150 156.78302002]
[-105.52360535 148.32983398]
[-107.34550476 139.79406738]
[-108.81305695 131.19029236]
[-109.92375183 122.53320312]
[-124.88552856 123.60328674]
[-139.84730530 124.67337799]
[-151.39767456 135.80751038]
[-167.28480530 133.57630920]
[-175.32148743 119.69138336]
[-169.34265137 104.80403900]
[-153.93473816 100.33457947]
[-140.91740417 109.71159363]
[-125.95561981 108.64151001]
[-110.99383545 107.57141876]
[-111.10955811 97.08811951]
[-110.70474243 86.61200714]
[-109.78037262 76.16889954]
[-108.33873749 65.78455353]
[-106.38338470 55.48457718]
[-103.91915131 45.29436493]
[-100.95209503 35.23904419]
[-97.48954010 25.34340668]
[-93.54002380 15.63185501]
[-89.11328888 6.12833452]
[-84.22024536 -3.14372134]
[-78.87295532 -12.16144943]
[-73.08460999 -20.90261650]
[-66.86948395 -29.34566498]
[-60.24289322 -37.46977997]
[-53.22118759 -45.25492477]
[-45.82167053 -52.68191147]
[-38.06259537 -59.73241806]
[-29.96309090 -66.38906097]
[-21.54312897 -72.63543701]
[-12.82347202 -78.45613098]
[-3.82561874 -83.83679199]
[5.42824268 -88.76416016]
[14.91529560 -93.22608185]
[24.61214638 -97.21155548]
[34.49488449 -100.71075439]
[44.53914261 -103.71504211]
[54.72015762 -106.21702576]
[65.01281738 -108.21052551]
[75.39174652 -109.69062805]
[85.83135986 -110.65368652]
[96.30590057 -111.09732056]
[106.78955841 -111.02044678]
[117.25646973 -110.42324066]
[127.68083191 -109.30718231]
[138.03694153 -107.67502594]
[148.29925537 -105.53079224]
[158.44247437 -102.87977600]
[168.44160461 -99.72850037]
[178.27195740 -96.08473969]
[187.90931702 -91.95748901]
[197.32991028 -87.35691833]
[206.51051331 -82.29436493]
[215.42849731 -76.78231812]
[224.06184387 -70.83437347]
[232.38929749 -64.46519470]
[240.39030457 -57.69047928]
[248.04515076 -50.52693939]
[255.33494568 -42.99223709]
[262.24172974 -35.10494995]
[268.74847412 -26.88452530]
[274.83911133 -18.35123634]
[280.49862671 -9.52612114]
[285.71310425 -0.43094149]
[290.46963501 8.91187668]
[304.22314453 2.92518425]
[317.97668457 -3.06150770]
[331.62115479 -9.29273319]
[345.15225220 -15.76650620]
[358.68331909 -22.24027824]
[372.21441650 -28.71405220]
[369.43661499 -43.54463577]
[370.59286499 -58.58875275]
[375.60433960 -72.82067108]
[384.12933350 -85.27004242]
[395.58660889 -95.08803558]
[409.19500732 -101.60525513]
[424.02664185 -104.37734222]
[439.07031250 -103.21528625]
[453.30032349 -98.19831848]
[465.74639893 -89.66851044]
[475.55996704 -78.20743561]
[482.07192993 -64.59653473]
[484.83828735 -49.76380920]
[483.67041016 -34.72058868]
[478.64794922 -20.49254036]
[470.11334229 -8.04975891]
[458.64846802 1.75938702]
[445.03506470 8.26609325]
[430.20126343 11.02672291]
[415.15850830 9.85305023]
[400.93240356 4.82509851]
[388.49291992 -3.71431756]
[378.68820190 -15.18296719]
[365.15710449 -8.70919418]
[351.62600708 -2.23542070]
[338.09494019 4.23835230]
[335.68170166 8.39375687]
[330.61697388 11.06029034]
[323.96337891 10.69201946]
[310.20983887 16.67871094]
[296.45632935 22.66540337]
[307.77124023 62.49215698]
[311.09613037 103.76130676]
[306.30316162 144.88581848]
[293.57659912 184.28419495]
[273.40588379 220.44136047]
[285.41400146 229.43052673]
[297.42211914 238.41969299]
[312.60540771 234.67774963]
[326.61889648 241.61723328]
[332.84582520 255.96153259]
[328.34606934 270.93771362]
[315.24426270 279.47448730]
[299.72665405 277.54104614]
[289.12020874 266.05029297]
[288.43295288 250.42781067]
[276.42483521 241.43864441]
[264.41671753 232.44947815]
[258.80197144 239.13180542]
[252.91584778 245.57633972]
[246.76837158 251.77209473]
[240.37008667 257.70849609]
[233.73190308 263.37533569]
[226.86517334 268.76300049]
[219.78164673 273.86224365]
[212.49340820 278.66436768]
[205.01292419 283.16116333]
[197.35298157 287.34494019]
[189.52665710 291.20852661]
[181.54733276 294.74536133]
[173.42864990 297.94937134]
[165.18447876 300.81512451]
[156.82890320 303.33764648]
[148.37622070 305.51269531]
[139.84085083 307.33651733]
[131.23741150 308.80599976]
[122.58057404 309.91867065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[37 47]
[38 46]
[39 45]
[102 139]
[103 138]
[104 137]
[105 134]
[106 133]
[107 132]
[108 131]
[144 156]
[145 155]
[146 154]
] def

init

% Start Annotations
37 47 0.16 0.2 colorpair
103 138 0.16 0.2 colorpair
104 137 0.0 1 colorpair
106 133 0.0 0.2 colorpair
107 132 0.16 0.2 colorpair
145 155 0.0 0.2 colorpair
146 154 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
37 47 2 gmark
37 cmark
47 cmark
38 46 24 gmark
38 cmark
46 cmark
39 45 24 gmark
39 cmark
45 cmark
102 139 24 gmark
102 cmark
139 cmark
103 138 2 gmark
103 cmark
105 134 4 gmark
105 cmark
134 cmark
106 133 2 gmark
107 132 2 gmark
132 cmark
108 131 16 gmark
108 cmark
131 cmark
144 156 8 gmark
144 cmark
156 cmark
145 155 2 gmark
146 cmark

% End Annotations
showpage
end
%%EOF
