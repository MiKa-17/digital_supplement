%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____CAUGCUGAAGAAAUAUGCCCUUGUGGCAAUCAUAGUGAUGUGUUUUACGGUUCUGGGAUUCACGCUGAUGAUAGGAGACUCGCUGUGUGAAUUGAGGAUCAAAGAACGUAAUAAGGAGUUUAAGGCGGUUCUCGCCUACAAAUCGAAGAA_\
) } def
/len { sequence length } bind def

/coor [
[-112.25328064 477.16098022]
[-126.93915558 480.21469116]
[-141.82751465 482.04138184]
[-156.81602478 482.62847900]
[-171.80165100 481.97195435]
[-186.68138123 480.07635498]
[-201.35296631 476.95468140]
[-215.71553040 472.62838745]
[-229.67034912 467.12722778]
[-243.12152100 460.48901367]
[-255.97657776 452.75936890]
[-268.14715576 443.99142456]
[-279.54962158 434.24542236]
[-290.10556030 423.58840942]
[-299.74240112 412.09359741]
[-308.39398193 399.83999634]
[-316.00076294 386.91186523]
[-322.51046753 373.39801025]
[-327.87838745 359.39138794]
[-332.06756592 344.98825073]
[-335.04928589 330.28759766]
[-336.80297852 315.39047241]
[-337.31661987 300.39926147]
[-336.58670044 285.41702271]
[-334.61819458 270.54675293]
[-331.42468262 255.89065552]
[-327.02807617 241.54945374]
[-321.45858765 227.62174988]
[-314.75454712 214.20327759]
[-306.96197510 201.38624573]
[-298.13449097 189.25877380]
[-288.33276367 177.90422058]
[-277.62414551 167.40063477]
[-266.08224487 157.82020569]
[-253.78639221 149.22880554]
[-240.82113647 141.68545532]
[-227.27557373 135.24203491]
[-213.24281311 129.94284058]
[-198.81930542 125.82425690]
[-184.10420227 122.91463470]
[-169.19866943 121.23394775]
[-154.20512390 120.79376221]
[-139.22665405 121.59709930]
[-124.36620331 123.63843536]
[-109.72592163 126.90374756]
[-95.40644836 131.37057495]
[-81.50620270 137.00823975]
[-68.12072754 143.77796936]
[-55.34204483 151.63322449]
[-43.25797653 160.52003479]
[-31.95158958 170.37728882]
[-21.50060272 181.13725281]
[-11.97684956 192.72596741]
[-3.44579411 205.06375122]
[4.03392315 218.06582642]
[10.41088963 231.64280701]
[15.64255524 245.70530701]
[22.57248116 232.40206909]
[29.50240898 219.09883118]
[20.49088860 207.21363831]
[17.52111244 192.53405762]
[21.23461533 177.96110535]
[30.94675064 166.39846802]
[44.77218628 160.17398071]
[59.99071884 160.57106018]
[66.92064667 147.26782227]
[73.85057068 133.96458435]
[80.78049469 120.66134644]
[87.71042633 107.35810852]
[87.29634094 93.38240814]
[98.98633575 85.71196747]
[105.91626740 72.40872955]
[104.66928101 54.06279373]
[119.77634430 45.17983246]
[126.43869781 31.74060059]
[133.10105896 18.30136681]
[139.76341248 4.86213303]
[146.42576599 -8.57710075]
[139.39825439 -22.28550148]
[141.76255798 -37.32756042]
[152.40492249 -47.96728897]
[167.09587097 -50.27257919]
[173.75822449 -63.71181488]
[180.42057800 -77.15104675]
[187.08293152 -90.59027863]
[193.74530029 -104.02951050]
[200.40765381 -117.46875000]
[207.07000732 -130.90797424]
[208.68786621 -147.78456116]
[225.35276794 -150.90184021]
[232.96151733 -135.75114441]
[220.50924683 -124.24562073]
[213.84687805 -110.80638885]
[207.18452454 -97.36715698]
[200.52217102 -83.92792511]
[193.85981750 -70.48868561]
[187.19744873 -57.04945755]
[180.53509521 -43.61022186]
[187.59497070 -30.52220154]
[185.57038879 -15.61029148]
[175.03010559 -4.62139082]
[159.86500549 -1.91474307]
[153.20265198 11.52449036]
[146.54029846 24.96372414]
[139.87792969 38.40295792]
[133.21557617 51.84218979]
[136.78248596 63.43756104]
[131.29620361 74.70612335]
[119.21950531 79.33865356]
[112.28957367 92.64189148]
[112.70365906 106.61759186]
[101.01366425 114.28803253]
[94.08373260 127.59127045]
[87.15380859 140.89450073]
[80.22388458 154.19773865]
[73.29395294 167.50097656]
[82.34140778 179.74455261]
[85.16426849 194.64147949]
[81.25524902 209.22708130]
[71.44143677 220.62225342]
[57.70991135 226.60177612]
[42.80564499 226.02876282]
[35.87571716 239.33200073]
[28.94579315 252.63523865]
[41.84590149 244.98100281]
[55.55693817 251.06439209]
[58.53850555 265.76507568]
[48.28105927 276.70971680]
[33.41809082 274.68627930]
[44.98343658 284.23837280]
[56.54878616 293.79049683]
[71.89337158 290.77755737]
[85.55962372 298.37805176]
[91.09477234 313.00323486]
[85.88527679 327.74755859]
[72.39090729 335.64920044]
[56.98328781 332.97723389]
[46.93743134 320.99331665]
[46.99667740 305.35583496]
[35.43133163 295.80374146]
[23.86598396 286.25161743]
[24.52652740 301.23706055]
[23.94346046 316.22573853]
[22.12079048 331.11459351]
[19.07104683 345.80126953]
[14.81519222 360.18487549]
[9.38247967 374.16650391]
[2.81025195 387.65002441]
[-4.85631514 400.54281616]
[-13.56452465 412.75619507]
[-23.25451851 424.20626831]
[-33.85969162 434.81430054]
[-45.30714798 444.50738525]
[-57.51819992 453.21887207]
[-70.40891266 460.88891602]
[-83.89067841 467.46478271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[57 124]
[58 123]
[59 122]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[71 110]
[72 109]
[74 106]
[75 105]
[76 104]
[77 103]
[78 102]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
57 124 0.32 0.2 colorpair
58 123 0.16 1 colorpair
59 122 0.0 1 colorpair
65 116 0.16 1 colorpair
66 115 0.16 0.2 colorpair
67 114 0.0 0.2 colorpair
68 113 0.0 0.2 colorpair
69 112 0.16 0.2 colorpair
71 110 0.0 0.2 colorpair
72 109 0.32 0.2 colorpair
74 106 0.0 0.2 colorpair
75 105 0.16 0.2 colorpair
76 104 0.16 1 colorpair
77 103 0.16 0.2 colorpair
78 102 0.16 1 colorpair
82 98 0.0 0.2 colorpair
83 97 0.0 0.2 colorpair
84 96 0.16 0.2 colorpair
85 95 0.0 0.2 colorpair
86 94 0.0 1 colorpair
87 93 0.32 1 colorpair
88 92 0.16 0.2 colorpair
129 141 0.16 0.2 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
57 124 2 gmark
57 cmark
124 cmark
58 cmark
116 cmark
66 115 2 gmark
66 cmark
115 cmark
67 114 2 gmark
68 113 2 gmark
69 112 2 gmark
69 cmark
112 cmark
71 110 2 gmark
72 109 2 gmark
72 cmark
109 cmark
74 106 2 gmark
75 105 2 gmark
105 cmark
76 cmark
77 103 2 gmark
103 cmark
78 cmark
102 cmark
82 98 2 gmark
83 97 2 gmark
84 96 2 gmark
84 cmark
96 cmark
85 95 2 gmark
87 cmark
93 cmark
88 92 2 gmark
88 cmark
129 141 2 gmark
141 cmark

% End Annotations
showpage
end
%%EOF
