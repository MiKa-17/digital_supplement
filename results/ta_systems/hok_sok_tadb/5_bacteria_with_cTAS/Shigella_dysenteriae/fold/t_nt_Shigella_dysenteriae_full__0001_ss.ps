%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAACCUAACGGUGUCUAGGCAUGGAGU_GGCCUCA__GGUUAAUGUAAAG_____________________UUAACU__GGGGCUUUUCUCUGUCUGCCUUUCGGUG__AAUACCUGAGACA_________________AACAGUCUCAAGCACCCG__________\
) } def
/len { sequence length } bind def

/coor [
[311.70651245 404.88693237]
[310.66168213 389.91513062]
[310.82495117 374.90780640]
[312.19531250 359.96231079]
[314.76382446 345.17550659]
[318.51388550 330.64337158]
[323.42114258 316.46008301]
[329.45376587 302.71768188]
[316.24841309 295.60299683]
[303.04306030 288.48831177]
[297.70520020 295.03717041]
[291.51391602 300.78997803]
[284.58682251 305.63644409]
[277.05557251 309.48355103]
[269.06350708 312.25720215]
[260.76278687 313.90380859]
[252.31164551 314.39117432]
[243.87121582 313.70925903]
[235.60253906 311.87036133]
[227.66351318 308.90875244]
[220.20582581 304.88024902]
[213.37210083 299.86102295]
[207.29313660 293.94616699]
[202.08540344 287.24801636]
[197.84883118 279.89382935]
[194.66488647 272.02352905]
[192.59503174 263.78692627]
[191.67944336 255.34095764]
[191.93635559 246.84664917]
[193.36164856 238.46603394]
[195.92884827 230.35910034]
[199.58972168 222.68069458]
[204.27511597 215.57763672]
[193.57533264 205.06504822]
[182.87554932 194.55245972]
[170.11552429 196.46627808]
[158.41262817 190.58520508]
[152.15000916 178.86067200]
[153.81726074 165.47703552]
[143.30467224 154.77725220]
[132.79208374 144.07746887]
[122.27949524 133.37767029]
[111.76689911 122.67788696]
[101.25431061 111.97810364]
[90.55452728 101.46551514]
[84.17830658 99.54132843]
[80.32888794 95.30904388]
[79.47706604 90.58186340]
[71.20394135 86.63747406]
[68.87544250 79.59925079]
[58.55332565 68.71559906]
[48.23120880 57.83194351]
[37.90909195 46.94829178]
[25.07201576 54.81615067]
[10.87951088 59.84272766]
[-4.04798985 61.80828094]
[-19.05792046 60.62688828]
[-33.49411011 56.35019302]
[-46.72547150 49.16515732]
[-58.17358398 39.38587189]
[-67.33798981 27.43985367]
[-73.81805420 13.84932709]
[-77.33050537 -0.79158759]
[-77.72178650 -15.84285259]
[-74.97479248 -30.64649200]
[-69.20961761 -44.55535126]
[-60.67827988 -56.96139908]
[-49.75374222 -67.32229614]
[-36.91357422 -75.18510437]
[-22.71909142 -80.20609283]
[-7.79081821 -82.16577911]
[7.21864605 -80.97847748]
[21.65315247 -76.69610596]
[34.88168335 -69.50586700]
[46.32595062 -59.72207642]
[55.48565674 -47.77245331]
[61.96037674 -34.17937851]
[65.46706390 -19.53708267]
[65.85242462 -4.48566532]
[63.09960556 10.31689167]
[57.32895660 24.22348404]
[48.79274368 36.62617493]
[59.11486053 47.50982666]
[69.43698120 58.39347839]
[79.75909424 69.27713013]
[90.17685699 80.06926727]
[100.87664032 90.58186340]
[106.04795837 91.63737488]
[110.24929047 95.52903748]
[111.95410156 101.46551514]
[122.46669006 112.16529846]
[132.97927856 122.86508942]
[143.49186707 133.56488037]
[154.00445557 144.26466370]
[164.51704407 154.96444702]
[181.99516296 154.79014587]
[193.96696472 167.05842590]
[193.38813782 183.85267639]
[204.08792114 194.36526489]
[214.78770447 204.87785339]
[235.04339600 194.26379395]
[257.75115967 191.77427673]
[279.77844238 197.73487854]
[298.09310913 211.30671692]
[310.18072510 230.60447693]
[314.38992310 252.95825195]
[310.15774536 275.28295898]
[323.36309814 282.39764404]
[336.56845093 289.51232910]
[344.72683716 276.91525269]
[353.87243652 265.01547241]
[363.94592285 253.89022827]
[374.88195801 243.61163330]
[386.60961914 234.24635315]
[399.05282593 225.85513306]
[412.13092041 218.49240112]
[425.75906372 212.20590210]
[439.84887695 207.03640747]
[454.30895996 203.01744080]
[469.04556274 200.17506409]
[483.96307373 198.52772522]
[498.96478271 198.08609009]
[513.95336914 198.85302734]
[528.83166504 200.82357788]
[543.50317383 203.98493958]
[557.87268066 208.31663513]
[571.84698486 213.79054260]
[585.33557129 220.37118530]
[598.25085449 228.01588440]
[610.50915527 236.67503357]
[622.03088379 246.29249573]
[632.74139404 256.80590820]
[642.57116699 268.14703369]
[651.45648193 280.24240112]
[659.33972168 293.01348877]
[666.16973877 306.37753296]
[671.90222168 320.24780273]
[676.50006104 334.53439331]
[679.93334961 349.14462280]
[682.17987061 363.98373413]
[683.22503662 378.95550537]
[683.06207275 393.96282959]
[681.69207764 408.90838623]
[679.12384033 423.69522095]
[675.37414551 438.22747803]
[670.46716309 452.41085815]
[664.43487549 466.15338135]
[657.31628418 479.36596680]
[649.15759277 491.96289062]
[640.01171875 503.86242676]
[629.93798828 514.98748779]
[619.00177002 525.26580811]
[607.27392578 534.63085938]
[594.83050537 543.02178955]
[581.75225830 550.38421631]
[568.12396240 556.67041016]
[554.03405762 561.83959961]
[539.57385254 565.85827637]
[524.83721924 568.70031738]
[509.91964722 570.34735107]
[494.91790771 570.78863525]
[479.92932129 570.02136230]
[465.05108643 568.05047607]
[450.37969971 564.88879395]
[436.01028442 560.55676270]
[422.03604126 555.08258057]
[408.54760742 548.50164795]
[395.63247681 540.85662842]
[383.37438965 532.19720459]
[371.85287476 522.57952881]
[361.14260864 512.06585693]
[351.31307983 500.72451782]
[342.42800903 488.62896729]
[334.54507446 475.85769653]
[327.71536255 462.49349976]
[321.98315430 448.62310791]
[317.38568115 434.33639526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 109]
[9 108]
[10 107]
[33 100]
[34 99]
[35 98]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 87]
[48 86]
[50 85]
[51 84]
[52 83]
[53 82]
] def

init

% Start Annotations
8 109 0.0 1 colorpair
9 108 0.0 1 colorpair
10 107 0.0 0.2 colorpair
33 100 0.16 1 colorpair
34 99 0.16 1 colorpair
35 98 0.16 1 colorpair
39 95 0.16 1 colorpair
40 94 0.0 1 colorpair
41 93 0.0 1 colorpair
42 92 0.0 1 colorpair
43 91 0.0 1 colorpair
44 90 0.0 1 colorpair
45 87 0.16 1 colorpair
48 86 0.16 1 colorpair
50 85 0.16 1 colorpair
51 84 0.0 1 colorpair
52 83 0.16 1 colorpair
53 82 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 107 2 gmark
33 cmark
34 cmark
99 cmark
35 cmark
39 cmark
45 cmark
48 cmark
86 cmark
85 cmark
52 cmark
83 cmark

% End Annotations
showpage
end
%%EOF
