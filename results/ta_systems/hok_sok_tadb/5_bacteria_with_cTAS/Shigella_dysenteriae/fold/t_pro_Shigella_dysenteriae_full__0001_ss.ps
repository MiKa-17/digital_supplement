%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:29:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________________CAUGCUGCAAAAAUAUGCCCUUGUGGCAGUCAUAGUGAUGUGUUUUACGGUUCUGGGAUUCACGCUGCUGGUCGGAGAUUCGCUGUGUGAGUUGCGUAUCAAGGAAGGUGAUAUGGAGUUUACGGCAGUUCUCGCUUACGAAUCGAAG___AA_____________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50668335 92.00919342]
[62.53745651 91.02807617]
[47.60834503 89.55770874]
[32.73533630 87.59966278]
[17.93435478 85.15602875]
[3.22125268 82.22943115]
[-11.38821697 78.82300568]
[-25.87840843 74.94039154]
[-40.23380661 70.58574677]
[-54.43904114 65.76374054]
[-68.47889709 60.47953796]
[-82.33834076 54.73878860]
[-96.00252533 48.54764557]
[-109.45683289 41.91273499]
[-122.68685150 34.84116745]
[-135.67840576 27.34051132]
[-148.41758728 19.41879845]
[-160.89076233 11.08451176]
[-173.08456421 2.34657669]
[-184.98594666 -6.78564978]
[-196.58215332 -16.30238914]
[-207.86077881 -26.19345093]
[-218.80972290 -36.44824219]
[-229.41729736 -47.05578613]
[-239.67210388 -58.00471497]
[-249.56318665 -69.28331757]
[-259.07995605 -80.87950134]
[-268.21221924 -92.78086090]
[-276.95016479 -104.97464752]
[-285.28448486 -117.44779968]
[-293.20623779 -130.18696594]
[-300.70690918 -143.17851257]
[-307.77850342 -156.40850830]
[-314.41345215 -169.86279297]
[-320.60461426 -183.52697754]
[-326.34539795 -197.38639832]
[-331.62963867 -211.42623901]
[-336.45169067 -225.63146973]
[-340.80633545 -239.98686218]
[-344.68899536 -254.47703552]
[-348.09545898 -269.08651733]
[-351.02209473 -283.79959106]
[-353.46575928 -298.60058594]
[-355.42382812 -313.47357178]
[-356.89422607 -328.40267944]
[-357.87536621 -343.37191772]
[-358.36621094 -358.36523438]
[-358.36624146 -373.36657715]
[-357.87539673 -388.35989380]
[-356.89428711 -403.32910156]
[-355.42391968 -418.25823975]
[-353.46585083 -433.13122559]
[-351.02221680 -447.93222046]
[-348.09561157 -462.64532471]
[-344.68914795 -477.25479126]
[-340.80654907 -491.74496460]
[-336.45187378 -506.10037231]
[-331.62985229 -520.30560303]
[-326.34564209 -534.34545898]
[-320.60488892 -548.20489502]
[-314.41372681 -561.86907959]
[-307.77880859 -575.32336426]
[-300.70724487 -588.55340576]
[-293.20657349 -601.54492188]
[-285.28485107 -614.28411865]
[-276.95056152 -626.75726318]
[-268.21261597 -638.95104980]
[-259.08038330 -650.85241699]
[-249.56362915 -662.44866943]
[-239.67256165 -673.72723389]
[-229.41775513 -684.67620850]
[-218.81021118 -695.28375244]
[-207.86126709 -705.53857422]
[-196.58267212 -715.42962646]
[-184.98646545 -724.94641113]
[-173.08511353 -734.07867432]
[-160.89131165 -742.81658936]
[-148.41815186 -751.15087891]
[-135.67898560 -759.07263184]
[-122.68743896 -766.57330322]
[-109.45743561 -773.64489746]
[-96.00313568 -780.27984619]
[-82.33895874 -786.47100830]
[-68.47952271 -792.21179199]
[-54.43967438 -797.49597168]
[-40.23444748 -802.31799316]
[-25.87905693 -806.67266846]
[-11.38886929 -810.55529785]
[3.22059512 -813.96179199]
[17.93369293 -816.88836670]
[32.73467255 -819.33203125]
[47.60767746 -821.29010010]
[62.53678894 -822.76049805]
[77.50601196 -823.74163818]
[92.49932861 -824.23248291]
[107.50067139 -824.23248291]
[122.49398804 -823.74163818]
[137.46321106 -822.76049805]
[152.39231873 -821.29010010]
[167.26533508 -819.33203125]
[182.06629944 -816.88836670]
[196.77940369 -813.96179199]
[211.38887024 -810.55529785]
[225.87905884 -806.67266846]
[240.23445129 -802.31799316]
[254.43966675 -797.49597168]
[268.47952271 -792.21179199]
[282.33895874 -786.47100830]
[296.00314331 -780.27984619]
[309.45742798 -773.64489746]
[322.68743896 -766.57330322]
[335.67898560 -759.07263184]
[348.41815186 -751.15087891]
[360.89132690 -742.81658936]
[373.08511353 -734.07867432]
[384.98648071 -724.94641113]
[396.58267212 -715.42962646]
[407.86126709 -705.53857422]
[418.81021118 -695.28375244]
[429.41775513 -684.67620850]
[439.67254639 -673.72723389]
[449.56362915 -662.44866943]
[459.08038330 -650.85241699]
[468.21261597 -638.95104980]
[476.95056152 -626.75726318]
[485.28485107 -614.28411865]
[493.20657349 -601.54492188]
[500.70724487 -588.55340576]
[507.77880859 -575.32336426]
[514.41375732 -561.86907959]
[520.60491943 -548.20489502]
[526.34564209 -534.34545898]
[531.62988281 -520.30560303]
[536.45190430 -506.10037231]
[540.80651855 -491.74496460]
[544.68914795 -477.25479126]
[548.09558105 -462.64532471]
[551.02221680 -447.93222046]
[553.46582031 -433.13122559]
[555.42388916 -418.25823975]
[556.89428711 -403.32910156]
[557.87542725 -388.35989380]
[558.36621094 -373.36657715]
[558.36621094 -358.36523438]
[557.87536621 -343.37191772]
[556.89422607 -328.40267944]
[555.42382812 -313.47357178]
[553.46575928 -298.60058594]
[551.02209473 -283.79959106]
[548.09545898 -269.08651733]
[544.68902588 -254.47703552]
[540.80633545 -239.98686218]
[536.45166016 -225.63146973]
[531.62963867 -211.42623901]
[526.34539795 -197.38639832]
[520.60461426 -183.52697754]
[514.41345215 -169.86279297]
[507.77850342 -156.40850830]
[500.70690918 -143.17851257]
[493.20623779 -130.18696594]
[485.28448486 -117.44779968]
[476.95016479 -104.97464752]
[468.21221924 -92.78086090]
[459.07995605 -80.87950134]
[449.56320190 -69.28331757]
[439.67211914 -58.00471497]
[429.41729736 -47.05578613]
[418.80972290 -36.44824219]
[407.86077881 -26.19345093]
[396.58215332 -16.30238914]
[384.98593140 -6.78564978]
[373.08456421 2.34657669]
[360.89077759 11.08451176]
[348.41760254 19.41879845]
[335.67840576 27.34051132]
[322.68685913 34.84116745]
[309.45684814 41.91273499]
[296.00253296 48.54764557]
[282.33834839 54.73878860]
[268.47888184 60.47953796]
[254.43904114 65.76374054]
[240.23381042 70.58574677]
[225.87840271 74.94039154]
[211.38821411 78.82300568]
[196.77874756 82.22943115]
[182.06564331 85.15602875]
[167.26466370 87.59966278]
[152.39164734 89.55770874]
[137.46253967 91.02807617]
[122.49331665 92.00919342]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
