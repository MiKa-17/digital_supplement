%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUGCCGUUAAAAACCGUGUUAGGCAUUGUUUUAAUCGUGUGUCUAACAAUCGUGAUAUUUACCUUUAUGAAUCGCGACACACUCUGCGAGUUGACAAUAAAGAAUGAACAUCAGGAGGUCGCGGCAAAACUAGCCUGCAAAUCGGGU___\
) } def
/len { sequence length } bind def

/coor [
[94.52344513 343.89172363]
[82.02378845 343.28997803]
[69.57143402 342.04806519]
[57.19915771 340.16921997]
[44.93950272 337.65835571]
[32.82473373 334.52215576]
[20.88673019 330.76882935]
[9.15690708 326.40823364]
[-2.33387136 321.45187378]
[-13.55536747 315.91281128]
[-24.47805214 309.80557251]
[-35.07318497 303.14624023]
[-45.31288528 295.95236206]
[-55.17020798 288.24282837]
[-64.61921692 280.03796387]
[-73.63504028 271.35937500]
[-82.19396210 262.22982788]
[-90.27345276 252.67341614]
[-97.85226440 242.71524048]
[-104.91043854 232.38153076]
[-111.42941284 221.69947815]
[-117.39202881 210.69717407]
[-122.78260040 199.40357971]
[-127.58693695 187.84841919]
[-131.79240417 176.06208801]
[-135.38792419 164.07562256]
[-138.36404419 151.92053223]
[-140.71293640 139.62881470]
[-142.42840576 127.23282623]
[-143.50595093 114.76517487]
[-143.94273376 102.25867462]
[-143.73760986 89.74622345]
[-142.89109802 77.26075745]
[-141.40545654 64.83512878]
[-139.28456116 52.50203323]
[-136.53402710 40.29392242]
[-133.16105652 28.24292183]
[-129.17456055 16.38074493]
[-124.58500671 4.73860455]
[-119.40447998 -6.65286398]
[-113.64660645 -17.76368523]
[-107.32654572 -28.56462288]
[-100.46092224 -39.02725601]
[-93.06780243 -49.12404633]
[-85.16664886 -58.82843399]
[-76.77824402 -68.11488342]
[-67.92465973 -76.95894623]
[-58.62919617 -85.33736420]
[-48.91631699 -93.22808075]
[-38.81157684 -100.61032867]
[-28.34156799 -107.46469879]
[-17.53384018 -113.77313995]
[-6.41683292 -119.51905823]
[4.98020124 -124.68733215]
[16.62727165 -129.26435852]
[28.49372864 -133.23809814]
[40.54834747 -136.59809875]
[52.75941086 -139.33551025]
[65.09477997 -141.44313049]
[77.52200317 -142.91542053]
[90.00836945 -143.74848938]
[102.52103424 -143.94017029]
[115.02706146 -143.48992920]
[127.49354553 -142.39897156]
[139.88768005 -140.67016602]
[152.17686462 -138.30805969]
[164.32873535 -135.31887817]
[176.31134033 -131.71046448]
[188.09313965 -127.49232483]
[193.93722534 -141.30705261]
[199.78129578 -155.12178040]
[205.62538147 -168.93650818]
[211.46945190 -182.75123596]
[217.31353760 -196.56597900]
[223.15760803 -210.38070679]
[213.95315552 -229.22683716]
[221.42982483 -248.51123047]
[240.39204407 -256.01336670]
[245.11285400 -270.25112915]
[249.83366394 -284.48889160]
[254.55447388 -298.72665405]
[259.27526855 -312.96441650]
[250.12101746 -325.49353027]
[250.11317444 -341.01062012]
[259.25476074 -353.54901123]
[274.03063965 -358.28744507]
[288.75921631 -353.40390015]
[297.77700806 -340.77618408]
[297.61651611 -325.25994873]
[288.33947754 -312.82147217]
[273.51306152 -308.24359131]
[268.79223633 -294.00582886]
[264.07144165 -279.76806641]
[259.35061646 -265.53030396]
[254.62980652 -251.29254150]
[261.27951050 -244.53735352]
[265.00607300 -235.75839233]
[265.24917603 -226.16616821]
[261.93222046 -217.10047913]
[255.47872925 -209.84324646]
[246.75888062 -205.43728638]
[236.97233582 -204.53662109]
[231.12826538 -190.72189331]
[225.28417969 -176.90716553]
[219.44010925 -163.09243774]
[213.59602356 -149.27770996]
[207.75195312 -135.46298218]
[201.90786743 -121.64824677]
[220.50332642 -112.11343384]
[238.21452332 -101.02214813]
[254.91151428 -88.45578003]
[270.47180176 -74.50653076]
[284.78115845 -59.27676773]
[297.73458862 -42.87824249]
[309.23706055 -25.43128586]
[319.20419312 -7.06392336]
[327.56280518 12.08906651]
[334.25155640 31.88714027]
[339.22140503 52.18502045]
[342.43588257 72.83376312]
[343.87136841 93.68185425]
[343.51733398 114.57630157]
[341.37640381 135.36380005]
[337.46423340 155.89178467]
[331.80960083 176.00964355]
[324.45394897 195.56976318]
[315.45129395 214.42858887]
[304.86764526 232.44773865]
[292.78070068 249.49501038]
[304.34606934 259.04711914]
[315.91140747 268.59921265]
[331.25598145 265.58627319]
[344.92224121 273.18676758]
[350.45739746 287.81195068]
[345.24789429 302.55627441]
[331.75354004 310.45791626]
[316.34591675 307.78598022]
[306.30004883 295.80203247]
[306.35931396 280.16458130]
[294.79394531 270.61245728]
[283.22860718 261.06036377]
[274.72830200 270.24447632]
[265.76818848 278.98062134]
[256.37191772 287.24578857]
[246.56413269 295.01824951]
[236.37068176 302.27752686]
[225.81838989 309.00451660]
[214.93502808 315.18154907]
[203.74920654 320.79235840]
[192.29039001 325.82214355]
[180.58871460 330.25772095]
[168.67498779 334.08740234]
[156.58053589 337.30108643]
[144.33720398 339.89031982]
[131.97720337 341.84832764]
[119.53305817 343.16995239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[69 108]
[70 107]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
69 108 0.16 0.2 colorpair
70 107 0.16 1 colorpair
71 106 0.0 1 colorpair
72 105 0.16 0.2 colorpair
73 104 0.0 0.2 colorpair
74 103 0.0 0.2 colorpair
75 102 0.16 0.2 colorpair
78 95 0.0 0.2 colorpair
79 94 0.0 1 colorpair
80 93 0.16 1 colorpair
81 92 0.0 0.2 colorpair
82 91 0.16 1 colorpair
129 141 0.16 0.2 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
69 108 2 gmark
69 cmark
107 cmark
72 105 2 gmark
72 cmark
105 cmark
73 104 2 gmark
74 103 2 gmark
75 102 2 gmark
75 cmark
102 cmark
78 95 2 gmark
93 cmark
81 92 2 gmark
82 cmark
129 141 2 gmark
141 cmark

% End Annotations
showpage
end
%%EOF
