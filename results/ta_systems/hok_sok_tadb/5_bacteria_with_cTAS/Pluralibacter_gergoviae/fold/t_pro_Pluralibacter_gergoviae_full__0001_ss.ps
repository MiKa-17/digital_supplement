%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AA__UCACGAAAGCUGUUGUAUAG__CCUGGUAGUGGUCUGUCUGACGCUACUGGUGUUCACCUGGAUGGUAAGAGACUCACUCUGUGAGGUGCGUAUCAACCAGGGCAAUACGGAGUUUGCGGCGUUUCUGAACUACGAAGGC______\
) } def
/len { sequence length } bind def

/coor [
[72.53527832 361.56835938]
[59.67176819 353.80667114]
[47.98500061 344.36563110]
[37.69269180 333.42114258]
[28.98657608 321.17706299]
[22.02884865 307.86151123]
[16.94912338 293.72256470]
[13.84203720 279.02359009]
[12.76546955 264.03842163]
[13.73947811 249.04626465]
[16.74591637 234.32637024]
[21.72877884 220.15298462]
[28.59523392 206.79014587]
[37.21736526 194.48678589]
[47.43455124 183.47212219]
[59.05644608 173.95133972]
[71.86654663 166.10180664]
[85.62620544 160.06976318]
[100.07908630 155.96757507]
[97.98488617 141.11448669]
[95.89068604 126.26139069]
[92.51042938 140.87556458]
[81.82092285 151.39860535]
[67.15550232 154.54908752]
[53.08734131 149.34457397]
[44.00336456 137.40802002]
[42.73625565 122.46163940]
[49.68114090 109.16619873]
[62.67237473 101.66767883]
[77.65805817 102.30409241]
[71.08393860 103.60749054]
[65.67307281 101.65122223]
[62.70986176 97.84096527]
[48.42557526 93.26284027]
[40.28393173 104.03109741]
[29.23008156 111.74068451]
[16.35577583 115.64739990]
[2.92725039 115.38175201]
[-9.73930836 110.98391724]
[-20.40676880 102.89838409]
[-28.03787994 91.92908478]
[-31.89612579 79.15946198]
[-31.61678696 65.84547424]
[-45.70646286 60.69950867]
[-59.79614258 55.55353928]
[-74.89128876 60.98640823]
[-88.47442627 52.44954681]
[-90.12572479 36.49170685]
[-78.57846069 25.35437202]
[-62.69070053 27.58115768]
[-54.65017319 41.46386337]
[-40.56049728 46.60982895]
[-26.47081947 51.75579834]
[-15.54248714 39.25651550]
[-0.62924898 31.87593269]
[16.00985146 30.76333046]
[31.84233284 36.11613846]
[44.44773102 47.14560699]
[51.88762665 62.19290161]
[53.00370026 78.97855377]
[67.28798676 83.55667877]
[81.66101074 87.84807587]
[69.67475128 78.82978058]
[68.24855804 63.89773941]
[78.31094360 52.77352142]
[93.31076813 52.69960022]
[103.48230743 63.72410583]
[102.20355988 78.66909027]
[108.86591339 65.22985840]
[96.96003723 56.02975845]
[87.08104706 44.68722534]
[79.60723114 31.63942337]
[74.82419586 17.38876152]
[72.91400909 2.48354077]
[73.94822693 -12.50314045]
[77.88522339 -26.99541664]
[84.57187653 -40.43678665]
[93.74953461 -52.31148529]
[105.06396484 -62.16426849]
[118.07909393 -69.61786652]
[132.29376221 -74.38744354]
[147.16105652 -76.29145813]
[162.10934448 -75.25859070]
[176.56422424 -71.33040619]
[183.22657776 -84.76963806]
[189.88893127 -98.20886993]
[196.55128479 -111.64810181]
[192.80924988 -127.24863434]
[202.78634644 -139.81196594]
[218.82901001 -139.70056152]
[228.63067627 -126.99990082]
[224.67236328 -111.45283508]
[209.99052429 -104.98574829]
[203.32817078 -91.54651642]
[196.66580200 -78.10727692]
[190.00344849 -64.66804504]
[201.88151550 -55.54195404]
[211.75398254 -44.27020264]
[219.23999023 -31.28477097]
[224.05021667 -17.08380318]
[225.99801636 -2.21249580]
[225.00665283 12.75783825]
[221.11236572 27.25170898]
[214.46301270 40.71157837]
[205.31250000 52.61930466]
[194.01098633 62.51608658]
[180.99163818 70.02014923]
[166.75389099 74.84145355]
[151.84432983 76.79293823]
[136.83576965 75.79772949]
[122.30515289 71.89221191]
[115.64279175 85.33144379]
[122.83751678 98.49336243]
[137.74676514 100.14086914]
[152.65600586 101.78837585]
[167.56526184 103.43588257]
[177.90960693 91.86980438]
[193.08380127 88.62582397]
[207.25306702 94.95130920]
[214.96900940 108.41399384]
[213.26470947 123.83718872]
[202.79550171 135.29037476]
[187.58700562 138.36955261]
[173.48721313 131.89071655]
[165.91775513 118.34513092]
[151.00849915 116.69762421]
[136.09925842 115.05011749]
[121.19001007 113.40261078]
[110.74377441 124.16719055]
[112.83797455 139.02027893]
[114.93217468 153.87336731]
[129.95585632 153.81953430]
[144.84692383 155.81199646]
[159.32797241 159.81362915]
[173.12921143 165.74989319]
[185.99356079 173.51019287]
[197.68135071 182.94996643]
[207.97485352 193.89335632]
[216.68229675 206.13648987]
[223.64146423 219.45127869]
[228.72271729 233.58969116]
[231.83139038 248.28831482]
[232.90957642 263.27334595]
[231.93719482 278.26562500]
[228.93235779 292.98583984]
[223.95101929 307.15975952]
[217.08601379 320.52334595]
[208.46520996 332.82763672]
[198.24922180 343.84341431]
[186.62835693 353.36544800]
[173.81910706 361.21636963]
[160.06010437 367.24990845]
[145.60766602 371.35366821]
[130.73103333 373.45117188]
[115.70735168 373.50338745]
[100.81649780 371.50930786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 131]
[20 130]
[21 129]
[30 62]
[33 61]
[34 60]
[43 53]
[44 52]
[45 51]
[68 112]
[69 111]
[84 96]
[85 95]
[86 94]
[87 93]
[113 128]
[114 127]
[115 126]
[116 125]
] def

init

% Start Annotations
19 131 0.0 0.2 colorpair
20 130 0.0 1 colorpair
21 129 0.16 1 colorpair
30 62 0.16 1 colorpair
33 61 0.0 1 colorpair
34 60 0.0 1 colorpair
43 53 0.0 1 colorpair
44 52 0.0 1 colorpair
45 51 0.0 0.2 colorpair
68 112 0.0 1 colorpair
69 111 0.16 1 colorpair
84 96 0.16 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.16 1 colorpair
113 128 0.0 1 colorpair
114 127 0.16 1 colorpair
115 126 0.16 1 colorpair
116 125 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 131 2 gmark
21 cmark
62 cmark
45 51 2 gmark
69 cmark
111 cmark
84 cmark
96 cmark
87 cmark
93 cmark
114 cmark
115 cmark
116 cmark

% End Annotations
showpage
end
%%EOF
