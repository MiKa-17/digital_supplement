%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AA___GAAAACGUAAAGAAACCUGUUCUAGAGCCUGGUUAUCGUCUGUCUGACGAUACUGGCAUUCACCCGGAUGACCCGCCACUCACUUUACGAACUGCGAAUCAACCACGGCAACACGGAGUUUGCGGCGAUUAUGAACUACGAAGGCAGGCGC\
) } def
/len { sequence length } bind def

/coor [
[94.54437256 432.03237915]
[79.54179382 432.62805176]
[64.56089783 431.62564087]
[49.77142334 429.03649902]
[35.34095001 424.89001465]
[21.43298340 419.23309326]
[8.20511341 412.12988281]
[-4.19277906 403.66085815]
[-15.62021637 393.92199707]
[-25.94771576 383.02359009]
[-35.05826187 371.08920288]
[-42.84862137 358.25399780]
[-49.23052597 344.66342163]
[-54.13166046 330.47149658]
[-57.49649429 315.83898926]
[-59.28690338 300.93173218]
[-59.48259735 285.91860962]
[-58.08135986 270.96975708]
[-55.09906387 256.25451660]
[-50.56951141 241.93965149]
[-44.54401398 228.18736267]
[-37.09085464 215.15345764]
[-28.29447746 202.98564148]
[-18.25455666 191.82177734]
[-7.08484697 181.78834534]
[5.08808661 172.99903870]
[18.12631607 165.55346680]
[31.88210869 159.53596497]
[46.19960022 155.01473999]
[60.91656494 152.04100037]
[75.86624146 150.64845276]
[90.87924957 150.85287476]
[92.67583466 135.96086121]
[94.47242737 121.06884003]
[85.75615692 133.27648926]
[77.84992218 146.02369690]
[63.93614960 151.62788391]
[49.40184402 147.91925049]
[39.87427521 136.33367920]
[39.04224396 121.35677338]
[47.22788620 108.78715515]
[61.26087952 103.49147797]
[76.09284210 101.25253296]
[62.00316620 96.10656738]
[47.91349030 90.96060181]
[32.81834030 96.39347076]
[19.23520660 87.85660553]
[17.58390236 71.89876556]
[29.13116837 60.76143265]
[45.01893234 62.98821640]
[53.05945587 76.87092590]
[67.14913177 82.01689148]
[81.23881531 87.16285706]
[71.34106445 75.89189911]
[61.44331741 64.62093353]
[48.45603561 57.11557007]
[39.99505997 44.72961426]
[37.72654724 29.90214348]
[42.09722137 15.55302525]
[52.24639893 4.50792503]
[66.17546844 -1.05812526]
[81.14148712 -0.04904433]
[94.19731140 7.33645725]
[102.77193451 19.64400673]
[105.17683411 34.44996643]
[100.93946838 48.83683777]
[101.53581238 63.82498169]
[102.13215637 78.81311798]
[108.79451752 65.37388611]
[97.73262024 55.10186768]
[90.02117920 42.14208221]
[86.27780914 27.54920006]
[86.79759216 12.50798702]
[91.52986908 -1.76287591]
[100.08300781 -14.10953236]
[111.75681305 -23.53624535]
[125.59984589 -29.28570366]
[140.48695374 -30.89984703]
[155.21072388 -28.25635910]
[161.87307739 -41.69559479]
[168.53543091 -55.13482666]
[163.71932983 -69.94843292]
[170.66735840 -83.48281860]
[184.81953430 -87.98294830]
[191.48190308 -101.42218018]
[198.14425659 -114.86141205]
[204.80661011 -128.30064392]
[201.06455994 -143.90118408]
[211.04167175 -156.46450806]
[227.08433533 -156.35310364]
[236.88600159 -143.65245056]
[232.92767334 -128.10537720]
[218.24584961 -121.63829041]
[211.58348083 -108.19905853]
[204.92112732 -94.75981903]
[198.25877380 -81.32058716]
[203.24562073 -67.33248901]
[196.68048096 -53.60828781]
[181.97467041 -48.47246933]
[175.31230164 -35.03323746]
[168.64994812 -21.59400177]
[179.66835022 -11.47608471]
[187.39704895 1.34960747]
[191.20239258 15.84806061]
[190.76771545 30.84645271]
[186.11970520 45.12902832]
[177.62689209 57.53565216]
[165.97053528 67.05602264]
[152.08987427 72.91197968]
[137.10650635 74.62104797]
[122.23374939 72.03624725]
[115.57138824 85.47547913]
[122.76611328 98.63739014]
[137.67535400 100.28489685]
[152.58460999 101.93240356]
[167.49386597 103.57991028]
[177.83821106 92.01383972]
[193.01240540 88.76985168]
[207.18165588 95.09534454]
[214.89761353 108.55802155]
[213.19331360 123.98122406]
[202.72410583 135.43440247]
[187.51560974 138.51358032]
[173.41580200 132.03475952]
[165.84635925 118.48915863]
[150.93710327 116.84165192]
[136.02786255 115.19414520]
[121.11860657 113.54664612]
[109.36444855 122.86542511]
[107.56785583 137.75744629]
[105.77127075 152.64947510]
[120.40215302 156.02131653]
[134.59173584 160.92926025]
[148.17922974 167.31767273]
[161.01069641 175.11418152]
[172.94073486 184.23043823]
[183.83418274 194.56317139]
[193.56758118 205.99526978]
[202.03065491 218.39721680]
[209.12751770 231.62849426]
[214.77775574 245.53916931]
[218.91735840 259.97161865]
[221.49938965 274.76232910]
[222.49461365 289.74371338]
[221.89175415 304.74600220]
[219.69763184 319.59921265]
[215.93711853 334.13507080]
[210.65283203 348.18881226]
[203.90461731 361.60128784]
[195.76896667 374.22042847]
[186.33804321 385.90332031]
[175.71871948 396.51754761]
[164.03131104 405.94287109]
[151.40824890 414.07247925]
[137.99256897 420.81427002]
[123.93627167 426.09182739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[32 131]
[33 130]
[34 129]
[43 53]
[44 52]
[45 51]
[68 112]
[69 111]
[79 101]
[80 100]
[81 99]
[84 96]
[85 95]
[86 94]
[87 93]
[113 128]
[114 127]
[115 126]
[116 125]
] def

init

% Start Annotations
32 131 0.0 1 colorpair
33 130 0.0 1 colorpair
34 129 0.0 1 colorpair
43 53 0.0 1 colorpair
44 52 0.0 1 colorpair
45 51 0.0 0.2 colorpair
68 112 0.0 1 colorpair
69 111 0.16 1 colorpair
79 101 0.0 0.2 colorpair
80 100 0.0 1 colorpair
81 99 0.16 0.2 colorpair
84 96 0.16 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.16 1 colorpair
113 128 0.0 1 colorpair
114 127 0.16 1 colorpair
115 126 0.16 1 colorpair
116 125 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
45 51 2 gmark
69 cmark
111 cmark
79 101 2 gmark
81 99 2 gmark
81 cmark
99 cmark
84 cmark
96 cmark
87 cmark
93 cmark
114 cmark
115 cmark
116 cmark

% End Annotations
showpage
end
%%EOF
