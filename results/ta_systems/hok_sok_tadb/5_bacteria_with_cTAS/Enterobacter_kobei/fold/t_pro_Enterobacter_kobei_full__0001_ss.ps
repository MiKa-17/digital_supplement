%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:26:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AAUGCCAAAACGUACUCUGCUGUUAGGUUUGUUUCUGAUCUGUACGACGCUAUUGAUCUUCACCUGGAUGGUGCGUGAUUCGCUAUGUGAAUUGCAUUUCAGACAGGAGAAAACAGAGCUGGCAGCAGUGUUGGCUUACAAAGCAAA____\
) } def
/len { sequence length } bind def

/coor [
[103.38371277 555.14794922]
[103.95468140 540.07025146]
[108.40951538 525.65435791]
[116.44447327 512.88323975]
[127.51171875 502.62759399]
[140.85667419 495.58666992]
[137.51885986 480.96273804]
[134.18104553 466.33883667]
[130.84323120 451.71490479]
[121.64736938 463.56549072]
[106.79007721 465.62969971]
[94.71192932 456.73486328]
[92.27462769 441.93420410]
[100.86283112 429.63610840]
[115.59750366 426.82727051]
[128.10797119 435.10375977]
[126.58061981 420.18170166]
[117.58760834 408.30841064]
[123.87951660 393.79214478]
[122.35217285 378.87011719]
[120.82482910 363.94805908]
[119.29747772 349.02603149]
[117.77013397 334.10400391]
[116.24279022 319.18194580]
[114.71544647 304.25991821]
[113.18810272 289.33789062]
[111.66075897 274.41583252]
[110.13341522 259.49380493]
[101.14039612 247.62051392]
[107.43231201 233.10423279]
[105.90496063 218.18218994]
[104.37761688 203.26016235]
[102.85027313 188.33811951]
[101.32292938 173.41607666]
[99.79558563 158.49403381]
[98.26824188 143.57200623]
[96.58877563 128.66632080]
[94.75735474 113.77854156]
[86.01501465 101.58955383]
[72.50048065 95.08129883]
[58.98594666 88.57304382]
[45.47141266 82.06478882]
[34.16030121 92.21994781]
[19.82232666 97.26879883]
[4.64392424 96.44142914]
[-9.06030941 89.86401367]
[-19.20057869 78.53955841]
[-24.23056602 64.19495392]
[-23.38323212 49.01765060]
[-16.78779411 35.32207870]
[-5.45000553 25.19671631]
[8.90120316 20.18560410]
[24.07737732 21.05290031]
[37.76425934 27.66634941]
[47.87469864 39.01744843]
[52.86692810 53.37523651]
[51.97966766 68.55025482]
[65.49420166 75.05850983]
[79.00873566 81.56676483]
[92.52326965 88.07501984]
[99.55039215 85.45404053]
[94.30866241 71.39971161]
[108.36308289 66.15821075]
[113.60463715 80.21208191]
[120.63175964 77.59109497]
[126.58335876 63.82234955]
[132.53495789 50.05360031]
[138.48655701 36.28485107]
[132.90359497 21.74290276]
[139.13551331 7.86421633]
[153.03344727 2.63133168]
[158.98504639 -11.13741684]
[164.93664551 -24.90616608]
[163.30999756 -40.64352798]
[175.46203613 -49.25614548]
[173.83537292 -64.99350739]
[185.98741150 -73.60612488]
[191.93901062 -87.37487793]
[197.89060974 -101.14362335]
[203.84222412 -114.91237640]
[209.79382324 -128.68112183]
[215.74542236 -142.44987488]
[221.69702148 -156.21862793]
[227.64862061 -169.98736572]
[233.60021973 -183.75611877]
[234.33473206 -200.69415283]
[250.81414795 -204.67726135]
[259.20355225 -189.94448853]
[247.36897278 -177.80451965]
[241.41737366 -164.03576660]
[235.46577454 -150.26701355]
[229.51417542 -136.49827576]
[223.56256104 -122.72952271]
[217.61096191 -108.96076965]
[211.65936279 -95.19202423]
[205.70776367 -81.42327881]
[199.75616455 -67.65452576]
[201.80851746 -52.90199661]
[189.23077393 -43.30454636]
[191.28312683 -28.55201721]
[178.70539856 -18.95456505]
[172.75379944 -5.18581581]
[166.80218506 8.58293247]
[172.51255798 22.29158974]
[166.67292786 36.33984375]
[152.25531006 42.23645401]
[146.30371094 56.00520325]
[140.35211182 69.77394867]
[134.40051270 83.54270172]
[109.64513397 111.94712830]
[111.47654724 126.83490753]
[115.65269470 135.02807617]
[113.19027710 142.04466248]
[114.71762085 156.96669006]
[116.24496460 171.88873291]
[117.77231598 186.81077576]
[119.29965973 201.73280334]
[120.82700348 216.65484619]
[122.35434723 231.57688904]
[131.45660400 244.51750183]
[125.05545044 257.96646118]
[126.58279419 272.88848877]
[128.11013794 287.81051636]
[129.63748169 302.73257446]
[131.16482544 317.65460205]
[132.69216919 332.57666016]
[134.21951294 347.49868774]
[135.74685669 362.42071533]
[137.27421570 377.34277344]
[138.80155945 392.26480103]
[147.90380859 405.20541382]
[141.50265503 418.65435791]
[143.02999878 433.57641602]
[145.46714783 448.37710571]
[148.80496216 463.00100708]
[152.14277649 477.62493896]
[155.48059082 492.24884033]
[170.55891418 492.80233765]
[184.97991943 497.24047852]
[197.76036072 505.26065063]
[208.02882385 516.31597900]
[215.08520508 529.65277100]
[218.44839478 544.36169434]
[217.88906860 559.43975830]
[213.44537354 573.85906982]
[205.42027283 586.63641357]
[194.36096191 596.90063477]
[181.02145386 603.95184326]
[166.31126404 607.30932617]
[151.23336792 606.74420166]
[136.81579590 602.29492188]
[124.04154968 594.26489258]
[113.78162384 583.20166016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 137]
[7 136]
[8 135]
[9 134]
[16 133]
[17 132]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[30 119]
[31 118]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 111]
[38 110]
[39 60]
[40 59]
[41 58]
[42 57]
[65 109]
[66 108]
[67 107]
[68 106]
[71 103]
[72 102]
[73 101]
[75 99]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
6 137 0.0 1 colorpair
7 136 0.0 1 colorpair
8 135 0.0 1 colorpair
9 134 0.0 1 colorpair
16 133 0.0 1 colorpair
17 132 0.0 1 colorpair
19 130 0.0 1 colorpair
20 129 0.0 1 colorpair
21 128 0.0 1 colorpair
22 127 0.0 1 colorpair
23 126 0.0 1 colorpair
24 125 0.0 1 colorpair
25 124 0.0 1 colorpair
26 123 0.0 1 colorpair
27 122 0.0 1 colorpair
28 121 0.0 1 colorpair
30 119 0.0 1 colorpair
31 118 0.0 1 colorpair
32 117 0.0 1 colorpair
33 116 0.0 1 colorpair
34 115 0.0 1 colorpair
35 114 0.0 1 colorpair
36 113 0.0 1 colorpair
37 111 0.0 1 colorpair
38 110 0.0 1 colorpair
39 60 0.0 1 colorpair
40 59 0.0 1 colorpair
41 58 0.0 1 colorpair
42 57 0.0 1 colorpair
65 109 0.0 1 colorpair
66 108 0.0 1 colorpair
67 107 0.0 1 colorpair
68 106 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
75 99 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
