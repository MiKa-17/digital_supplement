%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAGCCUUACGUUGCU_AGACAUAGGAGUAGCCUCAUUUCGAUUUAUAGUCGGAUGGGGCUUUUCUCUUUCUGCCUGAAACA__________________UAAUGCUCAAGACAGAAAGUCUCAAGCACCCG\
) } def
/len { sequence length } bind def

/coor [
[118.54222107 126.06238556]
[110.08569336 130.35359192]
[100.74263763 131.97671509]
[91.33430481 130.78907776]
[82.68768311 126.89508820]
[75.56282043 120.63700867]
[62.15281677 127.35800934]
[48.74281693 134.07901001]
[35.33281326 140.80001831]
[21.92281342 147.52101135]
[8.51281166 154.24201965]
[-4.89718962 160.96302795]
[-13.76771736 174.06356812]
[-28.61272621 172.84909058]
[-42.02272797 179.57008362]
[-55.43273163 186.29109192]
[-68.84272766 193.01210022]
[-82.25273132 199.73309326]
[-95.66273499 206.45410156]
[-109.07273865 213.17509460]
[-122.48273468 219.89610291]
[-135.89273071 226.61709595]
[-142.29562378 241.32704163]
[-157.82525635 245.35325623]
[-170.56861877 235.60714722]
[-170.75009155 219.56512451]
[-158.23046875 209.53324890]
[-142.61373901 213.20710754]
[-129.20373535 206.48609924]
[-115.79373932 199.76509094]
[-102.38373566 193.04409790]
[-88.97373199 186.32308960]
[-75.56373596 179.60209656]
[-62.15373230 172.88108826]
[-48.74372864 166.16009521]
[-35.33372879 159.43908691]
[-27.42237473 146.81927490]
[-11.61819172 147.55302429]
[1.79180992 140.83201599]
[15.20181084 134.11102295]
[28.61181259 127.39001465]
[42.02181244 120.66901398]
[55.43181610 113.94801331]
[68.84181976 107.22701263]
[68.06619263 98.18511963]
[69.86125946 89.28932953]
[74.08252716 81.25576019]
[64.32819366 69.86045074]
[54.57386017 58.46514511]
[44.81953049 47.06983948]
[35.06519699 35.67453384]
[25.31086540 24.27922630]
[15.55653286 12.88392067]
[0.66319638 4.78300333]
[4.32464075 -11.77085304]
[21.24515533 -12.83506298]
[26.95183945 3.12958860]
[36.70617294 14.52489471]
[46.46050262 25.92020035]
[56.21483612 37.31550598]
[65.96916962 48.71081543]
[75.72350311 60.10612106]
[85.47782898 71.50142670]
[110.75471497 69.87694550]
[129.28733826 87.14256287]
[144.05300903 84.50153351]
[158.81867981 81.86050415]
[173.55422974 79.05630493]
[188.25785828 76.08927917]
[202.96148682 73.12224579]
[217.66511536 70.15522003]
[222.63877869 55.69112778]
[234.10876465 45.72437668]
[248.92900085 42.85607147]
[263.10028076 47.75821686]
[272.84942627 59.01964188]
[287.55303955 56.05261230]
[302.25668335 53.08558655]
[316.96029663 50.11855698]
[331.66394043 47.15152740]
[346.36758423 44.18449783]
[361.07119751 41.21746826]
[375.74111938 38.08797455]
[390.37551880 34.79639816]
[405.00988770 31.50481987]
[419.64428711 28.21324158]
[434.27868652 24.92166328]
[434.09552002 9.86642838]
[437.04687500 -4.89782286]
[443.00378418 -18.72565842]
[451.70581055 -31.01258659]
[462.77252197 -41.22147369]
[475.72015381 -48.90603256]
[489.98269653 -53.73032761]
[504.93661499 -55.48345947]
[519.92822266 -54.08878708]
[534.30218506 -49.60728455]
[547.43005371 -42.23486328]
[558.73797607 -32.29381180]
[567.73162842 -20.21870804]
[574.01782227 -6.53742743]
[577.32171631 8.15194416]
[577.49902344 23.20725060]
[574.54180908 37.97034073]
[568.57946777 51.79582977]
[559.87261963 64.07933807]
[548.80187988 74.28386688]
[535.85125732 81.96333313]
[521.58679199 86.78201294]
[506.63220215 88.52926636]
[491.64111328 87.12869263]
[477.26895142 82.64154053]
[464.14398193 75.26395416]
[452.83996582 65.31845093]
[443.85107422 53.23981094]
[437.57028198 39.55606079]
[422.93588257 42.84763718]
[408.30148315 46.13921356]
[393.66708374 49.43079376]
[379.03268433 52.72237015]
[373.15063477 57.29508209]
[364.03823853 55.92110062]
[349.33459473 58.88813019]
[334.63098145 61.85515594]
[319.92733765 64.82218933]
[305.22369385 67.78921509]
[290.52008057 70.75624084]
[275.81643677 73.72327423]
[271.19723511 87.88407898]
[260.03585815 97.89806366]
[245.26304626 101.00130463]
[230.82560730 96.26238251]
[220.63214111 84.85884857]
[205.92851257 87.82588196]
[191.22488403 90.79290771]
[176.52125549 93.75993347]
[170.53950500 98.20140839]
[161.45970154 96.62617493]
[146.69403076 99.26720428]
[131.92837524 101.90823364]
[129.96562195 111.18588257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[65 140]
[66 139]
[67 138]
[68 136]
[69 135]
[70 134]
[71 133]
[76 128]
[77 127]
[78 126]
[79 125]
[80 124]
[81 123]
[82 122]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.0 1 colorpair
12 38 0.0 1 colorpair
14 36 0.0 0.6 colorpair
15 35 0.0 1 colorpair
16 34 0.0 1 colorpair
17 33 0.0 1 colorpair
18 32 0.0 1 colorpair
19 31 0.0 0.6 colorpair
20 30 0.0 1 colorpair
21 29 0.16 1 colorpair
22 28 0.0 0.6 colorpair
47 63 0.0 1 colorpair
48 62 0.0 1 colorpair
49 61 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
53 57 0.0 1 colorpair
65 140 0.0 1 colorpair
66 139 0.0 1 colorpair
67 138 0.0 1 colorpair
68 136 0.0 1 colorpair
69 135 0.0 1 colorpair
70 134 0.0 1 colorpair
71 133 0.0 1 colorpair
76 128 0.0 1 colorpair
77 127 0.0 1 colorpair
78 126 0.0 1 colorpair
79 125 0.0 1 colorpair
80 124 0.0 1 colorpair
81 123 0.0 1 colorpair
82 122 0.0 1 colorpair
83 120 0.0 1 colorpair
84 119 0.0 0.6 colorpair
85 118 0.0 1 colorpair
86 117 0.16 1 colorpair
87 116 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
14 36 1 gmark
19 31 1 gmark
29 cmark
22 28 1 gmark
84 119 1 gmark
117 cmark

% End Annotations
showpage
end
%%EOF
