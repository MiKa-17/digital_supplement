%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUGCGCUGAUGGGGUCCAGGCAUCAGUAGGCCUCGUGGGUUAAUUGAAAAAUUACCUUCGGGGCUUUCUUCUUUCUGCCUCACCACAUUUUGCAUUUCUGCCGACCGCAGGAGGCAAAAAGCCUCAAGCGCCGCCGCCCUUAUA\
) } def
/len { sequence length } bind def

/coor [
[227.59048462 158.52421570]
[213.48350525 153.42587280]
[199.37652588 148.32752991]
[194.69963074 149.53706360]
[189.21566772 147.77845764]
[184.80531311 142.72279358]
[170.91802979 137.05329895]
[157.03073120 131.38378906]
[143.14344788 125.71429443]
[129.25616455 120.04479218]
[115.66722107 133.21888733]
[96.63422394 137.84260559]
[77.25120544 131.99238586]
[63.05618668 116.64329529]
[50.27458572 124.49382019]
[37.49298477 132.34432983]
[24.71138191 140.19485474]
[11.92978001 148.04537964]
[-0.85182160 155.89588928]
[-13.63342285 163.74641418]
[-13.84530544 179.17231750]
[-22.38246918 192.02224731]
[-36.52074051 198.19580078]
[-51.74864197 195.72305298]
[-63.20701218 185.39303589]
[-67.23952484 170.50201416]
[-62.55941391 155.80166626]
[-50.66009521 145.98281860]
[-35.33859253 144.17863464]
[-21.48394203 150.96481323]
[-8.70234108 143.11428833]
[4.07926035 135.26377869]
[16.86086273 127.41325378]
[29.64246368 119.56273651]
[42.42406464 111.71221161]
[55.20566559 103.86169434]
[56.42830658 88.91160583]
[45.09206390 79.08869934]
[33.75581741 69.26578522]
[22.41957474 59.44287491]
[11.08333111 49.61996078]
[-0.25291216 39.79705048]
[-11.58915615 29.97414017]
[-22.92539978 20.15122986]
[-38.42172623 16.96150017]
[-42.97350311 2.77944803]
[-54.30974960 -7.04346275]
[-65.64598846 -16.86637306]
[-76.98223114 -26.68928528]
[-85.57248688 -29.97194099]
[-88.44689941 -36.83004379]
[-99.58040619 -46.88215256]
[-110.71392059 -56.93426514]
[-121.84743500 -66.98637390]
[-137.98805237 -69.88678741]
[-143.29121399 -85.40479279]
[-132.30148315 -97.57679749]
[-116.32414246 -93.88128662]
[-111.79531860 -78.11988831]
[-100.66181183 -68.06777954]
[-89.52829742 -58.01566696]
[-78.39478302 -47.96355438]
[-67.15932465 -38.02552795]
[-55.82308197 -28.20261765]
[-44.48683548 -18.37970734]
[-33.15059280 -8.55679512]
[-18.46510887 -6.06966639]
[-13.10248852 8.81498623]
[-1.76624477 18.63789749]
[9.56999874 28.46080780]
[20.90624237 38.28371811]
[32.24248505 48.10662842]
[43.57873154 57.92954254]
[54.91497421 67.75244904]
[66.25122070 77.57536316]
[73.10127258 70.31380463]
[81.43190765 65.02247620]
[90.70066071 61.97979736]
[100.31983185 61.31995773]
[109.69365692 63.02787781]
[118.25525665 66.94353485]
[125.50086975 72.77517700]
[131.01948547 80.12033081]
[134.51596069 88.49329376]
[135.82652283 97.35700989]
[134.92565918 106.15750885]
[148.81295776 111.82700348]
[162.70024109 117.49650574]
[176.58752441 123.16600800]
[190.47480774 128.83551025]
[204.47486877 134.22055054]
[218.58184814 139.31889343]
[232.68882751 144.41722107]
[239.05258179 132.70765686]
[246.99903870 122.01119232]
[256.36972046 112.54019928]
[266.97793579 104.48262787]
[278.61242676 97.99827576]
[291.04153442 93.21562195]
[304.01797485 90.22925568]
[317.28353882 89.09804535]
[330.57443237 89.84394073]
[343.62640381 92.45157623]
[356.17999268 96.86858368]
[367.98577881 103.00660706]
[378.80923462 110.74312592]
[388.43545532 119.92385864]
[396.67340088 130.36585999]
[403.35968018 141.86117554]
[408.36181641 154.18093872]
[411.58081055 167.07995605]
[412.95318604 180.30163574]
[412.45220947 193.58297729]
[410.08837891 206.65994263]
[405.90917969 219.27255249]
[419.28814697 226.05513000]
[432.66711426 232.83770752]
[447.52328491 228.15461731]
[460.99484253 235.22369385]
[465.36791992 249.41566467]
[478.74688721 256.19824219]
[492.12582397 262.98083496]
[505.50479126 269.76339722]
[518.88378906 276.54598999]
[534.51721191 272.94393921]
[546.99060059 283.03329468]
[546.73535156 299.07431030]
[533.94732666 308.76171875]
[518.43640137 304.66415405]
[512.10119629 289.92492676]
[498.72222900 283.14236450]
[485.34326172 276.35977173]
[471.96429443 269.57720947]
[458.58532715 262.79461670]
[444.55310059 267.65585327]
[430.88830566 260.96795654]
[425.88452148 246.21667480]
[412.50555420 239.43409729]
[399.12661743 232.65151978]
[389.11944580 246.17218018]
[376.86526489 257.70034790]
[362.75381470 266.86782837]
[347.23416138 273.38140869]
[330.80038452 277.03247070]
[313.97595215 277.70352173]
[297.29702759 275.37194824]
[281.29525757 270.11087036]
[266.48098755 262.08691406]
[253.32685852 251.55465698]
[242.25282288 238.84886169]
[233.61268616 224.37365723]
[227.68280029 208.58973694]
[224.65324402 191.99969482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[46 66]
[47 65]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
[115 139]
[116 138]
[117 137]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
] def

init

% Start Annotations
1 93 0.0 0.6 colorpair
2 92 0.0 1 colorpair
3 91 0.0 0.6 colorpair
6 90 0.0 1 colorpair
7 89 0.0 0.6 colorpair
8 88 0.0 1 colorpair
9 87 0.16 1 colorpair
10 86 0.0 1 colorpair
14 36 0.16 1 colorpair
15 35 0.0 1 colorpair
16 34 0.0 1 colorpair
17 33 0.16 1 colorpair
18 32 0.0 1 colorpair
19 31 0.16 1 colorpair
20 30 0.16 1 colorpair
37 75 0.16 1 colorpair
38 74 0.0 0.6 colorpair
39 73 0.0 0.6 colorpair
40 72 0.0 0.6 colorpair
41 71 0.0 0.6 colorpair
42 70 0.16 1 colorpair
43 69 0.0 1 colorpair
44 68 0.0 0.6 colorpair
46 66 0.0 0.6 colorpair
47 65 0.0 1 colorpair
48 64 0.0 1 colorpair
49 63 0.16 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.16 1 colorpair
115 139 0.0 0.6 colorpair
116 138 0.0 1 colorpair
117 137 0.0 1 colorpair
120 134 0.16 1 colorpair
121 133 0.0 1 colorpair
122 132 0.0 1 colorpair
123 131 0.16 1 colorpair
124 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 93 1 gmark
3 91 1 gmark
7 89 1 gmark
87 cmark
14 cmark
36 cmark
17 cmark
33 cmark
19 cmark
31 cmark
20 cmark
30 cmark
37 cmark
38 74 1 gmark
39 73 1 gmark
40 72 1 gmark
41 71 1 gmark
42 cmark
44 68 1 gmark
46 66 1 gmark
63 cmark
54 cmark
59 cmark
115 139 1 gmark
120 cmark
134 cmark
123 cmark
131 cmark

% End Annotations
showpage
end
%%EOF
