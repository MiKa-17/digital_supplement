%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________ACAAAAGACCGCUUUACUGAGCUUAAUCGUUAUUUGCUUAACGUUAUUAGGCUUCACAUGGAUGGUGAGAGACUCGCUCUGUGAGCUUCAAGUAAGGAAUGGGAACUCGGUAUUCUUGGCAACACUCGCCUACGAAUCGAGA\
) } def
/len { sequence length } bind def

/coor [
[176.13581848 306.15274048]
[168.62002563 319.13400269]
[157.94235229 329.66903687]
[144.86120605 337.00961304]
[130.30574036 340.63427734]
[115.30979156 340.28561401]
[100.93850708 335.98837280]
[88.21266174 328.04782104]
[78.03614044 317.02789307]
[71.13178253 303.71136475]
[67.98998260 289.04409790]
[68.83390045 274.06784058]
[73.60359955 259.84640503]
[81.96028900 247.38983154]
[93.31040955 237.58296204]
[106.84777832 231.12232971]
[121.61085510 228.46684265]
[136.55104065 229.80509949]
[150.60714722 235.04205322]
[162.77896118 243.80400085]
[156.54774475 230.15953064]
[150.31651306 216.51504517]
[143.80825806 203.00050354]
[137.02568054 189.62155151]
[130.24310303 176.24258423]
[123.46052551 162.86361694]
[116.67794800 149.48466492]
[109.89537048 136.10569763]
[103.11278534 122.72673798]
[75.97955322 119.06034851]
[64.14511871 86.28347778]
[50.14506912 80.89843750]
[36.14501953 75.51339722]
[22.14497375 70.12835693]
[8.14492512 64.74331665]
[-5.85512257 59.35827255]
[-19.85517120 53.97323227]
[-33.85521698 48.58819199]
[-47.96220016 43.48985291]
[-62.17024612 38.68033600]
[-76.37828827 33.87081909]
[-90.58633423 29.06130219]
[-104.79438019 24.25178528]
[-118.85004425 31.47769928]
[-133.87265015 26.56885338]
[-140.94955444 12.43757820]
[-135.88215637 -2.53229141]
[-121.67685699 -9.45939732]
[-106.76139832 -4.23401070]
[-99.98486328 10.04374027]
[-85.77681732 14.85325718]
[-71.56877136 19.66277313]
[-57.36072922 24.47229004]
[-43.15268326 29.28180695]
[-38.50143433 27.97712326]
[-32.98273468 29.62350655]
[-28.47017860 34.58814621]
[-14.47012997 39.97318649]
[-0.47008207 45.35822678]
[13.52996540 50.74326706]
[27.53001404 56.12830734]
[41.53005981 61.51334763]
[55.53010941 66.89838409]
[69.53015900 72.28342438]
[80.96600342 62.57665634]
[77.92719269 47.88769150]
[74.88837433 33.19873047]
[71.84956360 18.50976753]
[57.99765015 11.25315094]
[52.09877777 -3.22915959]
[56.93821335 -18.09905815]
[70.23091888 -26.33543396]
[85.70049286 -24.04932213]
[96.04267120 -12.32015419]
[96.37419128 3.31391454]
[86.53852844 15.47095490]
[89.57733917 30.15991783]
[92.61614990 44.84888077]
[95.65496826 59.53784180]
[110.45565033 61.97498322]
[118.04381561 49.03590393]
[125.63197327 36.09682083]
[125.93892670 20.27859306]
[139.05160522 13.21410465]
[146.63977051 0.27502367]
[154.22792053 -12.66405773]
[161.81608582 -25.60313797]
[169.40425110 -38.54222107]
[172.20129395 -55.26384735]
[189.04374695 -57.20511246]
[195.57159424 -41.55827332]
[182.34332275 -30.95405960]
[174.75517273 -18.01497841]
[167.16700745 -5.07589722]
[159.57884216 7.86318398]
[151.99069214 20.80226517]
[152.22648621 35.69500351]
[138.57106018 43.68498230]
[130.98289490 56.62406540]
[123.39472961 69.56314850]
[130.58122253 97.74884796]
[116.49175262 115.94416046]
[123.27433014 129.32312012]
[130.05691528 142.70208740]
[136.83949280 156.08103943]
[143.62207031 169.46000671]
[150.40464783 182.83897400]
[157.18722534 196.21792603]
[162.58554077 200.20152283]
[164.78529358 205.52389526]
[163.96099854 210.28381348]
[170.19221497 223.92829895]
[176.42344666 237.57278442]
[181.06170654 239.88555908]
[184.34921265 243.38520813]
[186.05876160 247.46354675]
[186.20318604 251.50605774]
[196.91741943 262.00390625]
[207.63165283 272.50177002]
[218.34588623 282.99963379]
[229.06011963 293.49749756]
[239.77435303 303.99536133]
[252.90420532 298.68011475]
[267.02536011 298.78161621]
[279.99746704 304.25143433]
[289.86691284 314.22979736]
[295.16116333 327.18081665]
[295.10836792 341.12866211]
[289.74963379 353.95913696]
[300.24749756 364.67337036]
[310.74536133 375.38760376]
[326.32156372 374.00335693]
[339.11373901 382.99746704]
[343.08181763 398.12322998]
[336.35220337 412.23870850]
[322.10238647 418.67898560]
[307.06072998 414.40316772]
[298.32943726 401.43020630]
[300.03112793 385.88546753]
[289.53326416 375.17123413]
[279.03540039 364.45700073]
[264.02914429 369.86791992]
[248.10609436 368.20123291]
[234.44683838 359.73907471]
[225.80184937 346.12594604]
[223.93774414 330.04940796]
[229.27648926 314.70962524]
[218.56225586 304.21173096]
[207.84802246 293.71386719]
[197.13378906 283.21600342]
[186.41955566 272.71813965]
[175.70532227 262.22027588]
[179.80891418 276.64804077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 113]
[21 112]
[22 111]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[65 79]
[66 78]
[67 77]
[68 76]
[80 100]
[81 99]
[82 98]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[117 152]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
20 113 0.0 1 colorpair
21 112 0.0 1 colorpair
22 111 0.0 1 colorpair
23 108 0.0 1 colorpair
24 107 0.0 1 colorpair
25 106 0.0 1 colorpair
26 105 0.0 1 colorpair
27 104 0.0 1 colorpair
28 103 0.0 1 colorpair
29 102 0.0 1 colorpair
31 64 0.0 1 colorpair
32 63 0.0 1 colorpair
33 62 0.0 1 colorpair
34 61 0.0 1 colorpair
35 60 0.0 1 colorpair
36 59 0.0 1 colorpair
37 58 0.0 1 colorpair
38 57 0.0 1 colorpair
39 54 0.0 1 colorpair
40 53 0.0 1 colorpair
41 52 0.0 1 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
65 79 0.0 1 colorpair
66 78 0.0 1 colorpair
67 77 0.0 1 colorpair
68 76 0.0 1 colorpair
80 100 0.0 1 colorpair
81 99 0.0 1 colorpair
82 98 0.0 1 colorpair
84 96 0.0 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.0 1 colorpair
88 92 0.0 1 colorpair
117 152 0.0 1 colorpair
118 151 0.0 1 colorpair
119 150 0.0 1 colorpair
120 149 0.0 1 colorpair
121 148 0.0 1 colorpair
122 147 0.0 1 colorpair
129 141 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
