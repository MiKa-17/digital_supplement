%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:13:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGAGGCUAUCCUGAUGUUGUCUAGGCAUACAGGUGGCCUCGUGGGUUAAUGAAAAUUAACUACGGGGCUUUCUGCUUUCUGCCACACAACACGGUAACAAACCACCUUCACGUCAUGAGGCAAAAAGCCUCAAGCGCCACCGCCAGUAUA\
) } def
/len { sequence length } bind def

/coor [
[45.40841675 207.48771667]
[36.35429382 195.52850342]
[33.76991272 180.75280762]
[38.22868347 166.42782593]
[26.07535172 175.21968079]
[13.92201900 184.01152039]
[1.76868606 192.80335999]
[-10.38464737 201.59519958]
[-22.53797913 210.38703918]
[-34.69131470 219.17889404]
[-39.85093307 226.79296875]
[-47.18564987 228.02345276]
[-59.51693344 236.56390381]
[-71.84822083 245.10437012]
[-84.17950439 253.64482117]
[-96.42245483 262.31143188]
[-108.57579041 271.10327148]
[-120.72911835 279.89511108]
[-132.88246155 288.68695068]
[-145.03578186 297.47879028]
[-148.98747253 313.02755737]
[-163.66654968 319.50091553]
[-177.81248474 311.93307495]
[-180.57371521 296.12942505]
[-169.83207703 284.21319580]
[-153.82763672 285.32546997]
[-141.67430115 276.53363037]
[-129.52096558 267.74179077]
[-117.36763000 258.94995117]
[-105.21430206 250.15809631]
[-101.61603546 243.64927673]
[-92.71996307 241.31353760]
[-80.38867950 232.77308655]
[-68.05739594 224.23262024]
[-55.72610855 215.69216919]
[-43.48315430 207.02555847]
[-31.32982254 198.23371887]
[-19.17648888 189.44186401]
[-7.02315664 180.65002441]
[5.13017654 171.85818481]
[17.28351021 163.06634521]
[29.43684196 154.27450562]
[40.52197647 144.16906738]
[50.39768219 132.87878418]
[60.27338791 121.58850098]
[70.14909363 110.29822540]
[68.76506805 95.36221313]
[56.98293304 86.07882690]
[45.20079422 76.79544067]
[33.41865921 67.51205444]
[21.63652229 58.22866821]
[9.85438442 48.94528580]
[-6.44432545 47.13307953]
[-12.77552414 32.00535583]
[-2.62621689 19.12422180]
[13.56285858 21.74068260]
[19.13776970 37.16314697]
[30.91990662 46.44653320]
[42.70204544 55.72991943]
[54.48418045 65.01330566]
[66.26631927 74.29669189]
[78.04845428 83.58007812]
[87.28481293 77.72844696]
[97.40368652 76.26353455]
[106.55233765 78.88273621]
[113.27059174 84.58171082]
[126.55792999 77.62136078]
[135.19215393 64.36387634]
[150.05654907 65.31199646]
[163.34388733 58.35163879]
[176.63122559 51.39128113]
[189.91856384 44.43092346]
[192.28640747 29.20924568]
[203.03756714 18.42656898]
[217.90061951 16.06999969]
[231.14280701 22.83628654]
[244.43014526 15.87592983]
[257.71749878 8.91557407]
[271.00482178 1.95521784]
[284.29217529 -5.00513840]
[292.92639160 -18.26262283]
[307.79077148 -17.31450272]
[321.07812500 -24.27485847]
[334.36547852 -31.23521423]
[347.65280151 -38.19557190]
[356.28701782 -51.45305634]
[371.15142822 -50.50493622]
[384.43875122 -57.46529007]
[389.24539185 -72.28196716]
[402.81982422 -79.15147400]
[416.91561890 -74.47776794]
[430.20297241 -81.43812561]
[435.09094238 -100.86665344]
[452.37792969 -110.37892914]
[470.83090210 -104.29955292]
[483.66455078 -112.06468964]
[496.49819946 -119.82982635]
[497.66873169 -135.30268860]
[507.73611450 -147.11065674]
[522.82916260 -150.71331787]
[537.14434814 -144.72537231]
[545.17712402 -131.44932556]
[543.83880615 -115.99006653]
[533.64398193 -104.29201508]
[518.51269531 -100.85329437]
[504.26333618 -106.99617004]
[491.42968750 -99.23104095]
[478.59603882 -91.46590424]
[478.91406250 -81.09996796]
[474.83901978 -71.47518921]
[467.05438232 -64.37984467]
[456.93951416 -61.16283035]
[446.32543945 -62.47761536]
[437.16333008 -68.15077972]
[423.87597656 -61.19042587]
[419.69253540 -46.94141388]
[406.31643677 -39.69334030]
[391.39910889 -44.17794800]
[378.11178589 -37.21759415]
[370.42794800 -24.45796013]
[354.61315918 -24.90822983]
[341.32580566 -17.94787407]
[328.03848267 -10.98751736]
[314.75112915 -4.02716112]
[307.06732178 8.73247242]
[291.25253296 8.28220272]
[277.96517944 15.24255943]
[264.67782593 22.20291519]
[251.39050293 29.16327095]
[238.10316467 36.12362671]
[236.12600708 50.86231232]
[225.72621155 61.73927689]
[210.74061584 64.43837738]
[196.87892151 57.71826553]
[183.59158325 64.67861938]
[170.30424500 71.63897705]
[157.01690674 78.59933472]
[149.33308411 91.35897064]
[133.51828003 90.90869904]
[120.23094940 97.86905670]
[110.72845459 121.33216095]
[81.43937683 120.17392731]
[71.56366730 131.46421814]
[61.68796158 142.75448608]
[51.81225586 154.04476929]
[66.48459625 150.92668152]
[80.95915985 154.86203003]
[92.03288269 164.97996521]
[97.25526428 179.04150391]
[95.47064209 193.93496704]
[87.07394409 206.36457825]
[73.92325592 213.57981873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[43 145]
[44 144]
[45 143]
[46 142]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[66 140]
[67 139]
[69 137]
[70 136]
[71 135]
[72 134]
[76 130]
[77 129]
[78 128]
[79 127]
[80 126]
[82 124]
[83 123]
[84 122]
[85 121]
[87 119]
[88 118]
[91 115]
[92 114]
[95 108]
[96 107]
[97 106]
] def

init

% Start Annotations
4 42 0.0 1 colorpair
5 41 0.0 1 colorpair
6 40 0.0 1 colorpair
7 39 0.0 1 colorpair
8 38 0.0 1 colorpair
9 37 0.0 1 colorpair
10 36 0.0 1 colorpair
12 35 0.0 1 colorpair
13 34 0.0 1 colorpair
14 33 0.0 1 colorpair
15 32 0.0 1 colorpair
16 30 0.0 1 colorpair
17 29 0.0 1 colorpair
18 28 0.0 1 colorpair
19 27 0.0 1 colorpair
20 26 0.0 1 colorpair
43 145 0.0 1 colorpair
44 144 0.0 1 colorpair
45 143 0.0 1 colorpair
46 142 0.0 1 colorpair
47 62 0.0 1 colorpair
48 61 0.0 1 colorpair
49 60 0.0 1 colorpair
50 59 0.0 1 colorpair
51 58 0.0 1 colorpair
52 57 0.0 1 colorpair
66 140 0.0 1 colorpair
67 139 0.0 1 colorpair
69 137 0.0 1 colorpair
70 136 0.0 1 colorpair
71 135 0.0 1 colorpair
72 134 0.0 1 colorpair
76 130 0.0 1 colorpair
77 129 0.0 1 colorpair
78 128 0.0 1 colorpair
79 127 0.0 1 colorpair
80 126 0.0 1 colorpair
82 124 0.0 1 colorpair
83 123 0.0 1 colorpair
84 122 0.0 1 colorpair
85 121 0.0 1 colorpair
87 119 0.0 1 colorpair
88 118 0.0 1 colorpair
91 115 0.0 1 colorpair
92 114 0.0 1 colorpair
95 108 0.0 1 colorpair
96 107 0.0 1 colorpair
97 106 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
