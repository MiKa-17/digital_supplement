%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUGCUAACGAAGUACGCCCUGGUGGCGAUCGUGGUGCUGUGUAUGACAGCACUGGGUUUCACGCUGUUAGUACGCGACUCGCUUUGCGAGAUGACGUUCAAACAACGGGAUACGGAGUUUAAAGCUGUUCUCGCUUACGAACCGAAGAA_\
) } def
/len { sequence length } bind def

/coor [
[288.80557251 120.91357422]
[283.78082275 114.78698730]
[280.60083008 107.50000000]
[265.60083008 107.50000000]
[250.60083008 107.50000000]
[235.60083008 107.50000000]
[220.60083008 107.50000000]
[205.60083008 107.50000000]
[190.60083008 107.50000000]
[175.60083008 107.50000000]
[165.28314209 118.18087006]
[150.07101440 118.39455414]
[138.93788147 107.50000000]
[123.93788147 107.50000000]
[108.14518738 123.72611237]
[85.71623993 120.62150574]
[73.87913513 129.83470154]
[62.04202652 139.04788208]
[50.20491791 148.26107788]
[46.80166626 163.93901062]
[32.35896301 170.92382812]
[17.95601082 163.85740662]
[14.64152241 148.16046143]
[24.95808983 135.87437439]
[40.99172592 136.42396545]
[52.82883453 127.21077728]
[64.66593933 117.99758911]
[76.50305176 108.78440094]
[75.73886108 106.37725830]
[75.22058105 103.90547180]
[74.95346832 101.39409637]
[59.67618179 105.50689697]
[49.23775482 94.88199615]
[34.69675064 91.19971466]
[20.15574837 87.51743317]
[5.61474371 83.83515167]
[-8.92625999 80.15287018]
[-23.46726418 76.47058105]
[-38.00826645 72.78829956]
[-52.54927063 69.10601807]
[-67.09027863 65.42373657]
[-81.55268097 72.36767578]
[-95.93558502 65.26052856]
[-99.20565796 49.55427551]
[-88.85437012 37.29742432]
[-72.82234955 37.89237595]
[-63.40799332 50.88273239]
[-48.86698914 54.56501770]
[-34.32598495 58.24729919]
[-19.78498268 61.92958069]
[-5.24397802 65.61186218]
[9.29702568 69.29414368]
[23.83802986 72.97642517]
[38.37903214 76.65870667]
[52.92003632 80.34099579]
[67.15725708 75.96481323]
[78.63574982 86.85309601]
[86.63494873 78.77153778]
[97.38030243 75.05186462]
[108.66394043 76.45836639]
[118.16736603 82.70204926]
[123.93788147 92.50000000]
[138.93788147 92.50000000]
[150.07101440 81.60544586]
[165.28314209 81.81912994]
[175.60083008 92.50000000]
[190.60083008 92.50000000]
[205.60083008 92.50000000]
[220.60083008 92.50000000]
[235.60083008 92.50000000]
[250.60083008 92.50000000]
[265.60083008 92.50000000]
[280.60083008 92.50000000]
[295.18197632 74.66419220]
[317.91058350 73.21167755]
[334.26211548 88.68547058]
[349.10540771 86.52285767]
[363.94866943 84.36024475]
[376.48916626 74.71414948]
[390.19897461 80.53565979]
[405.04226685 78.37304688]
[419.88552856 76.21043396]
[427.98645020 71.85165405]
[435.05761719 74.15979767]
[444.75765991 61.97182083]
[459.87939453 60.30223465]
[471.43899536 69.62486267]
[486.32382202 67.76947021]
[501.20861816 65.91408539]
[516.09344482 64.05869293]
[530.97821045 62.20330429]
[545.86303711 60.34791565]
[555.56311035 48.15993881]
[570.68481445 46.49034882]
[582.24444580 55.81297684]
[591.94445801 43.62500381]
[607.06622314 41.95541382]
[618.62579346 51.27804184]
[633.51062012 49.42265320]
[646.24780273 40.03779221]
[659.83435059 46.14140320]
[674.71917725 44.28601456]
[689.60400391 42.43062592]
[704.48876953 40.57523727]
[714.18884277 28.38726044]
[729.31060791 26.71767235]
[740.87017822 36.04030228]
[755.75500488 34.18490982]
[766.70385742 22.45879745]
[782.68634033 23.85145760]
[791.44207764 37.29456329]
[786.25433350 52.47571182]
[771.10278320 57.74922943]
[757.61035156 49.06972122]
[742.72558594 50.92510986]
[733.80828857 62.80017853]
[718.73937988 64.89384460]
[706.34417725 55.46004486]
[691.45935059 57.31543350]
[676.57458496 59.17082214]
[661.68975830 61.02621460]
[650.01727295 70.27836609]
[635.36602783 64.30746460]
[620.48120117 66.16284943]
[611.56390381 78.03792572]
[596.49499512 80.13159180]
[584.09979248 70.69778442]
[575.18249512 82.57286072]
[560.11364746 84.66652679]
[547.71844482 75.23271942]
[532.83361816 77.08811188]
[517.94879150 78.94350433]
[503.06399536 80.79888916]
[488.17919922 82.65428162]
[473.29437256 84.50966644]
[464.37707520 96.38474274]
[449.30819702 98.47840881]
[436.91299438 89.04460907]
[422.04815674 91.05371857]
[407.20486450 93.21633148]
[392.36160278 95.37894440]
[380.88281250 104.87036133]
[366.11129761 99.20352936]
[351.26800537 101.36614227]
[336.42471313 103.52875519]
[334.50848389 110.99372864]
[330.62069702 117.67959595]
[325.04171753 123.07498169]
[318.18185425 126.76257324]
[310.55123901 128.45143127]
[302.72189331 127.99988556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[13 63]
[14 62]
[16 28]
[17 27]
[18 26]
[19 25]
[31 57]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[76 145]
[77 144]
[78 143]
[80 141]
[81 140]
[82 139]
[84 138]
[87 135]
[88 134]
[89 133]
[90 132]
[91 131]
[92 130]
[95 127]
[98 124]
[99 123]
[101 121]
[102 120]
[103 119]
[104 118]
[107 115]
[108 114]
] def

init

% Start Annotations
3 73 0.0 1 colorpair
4 72 0.0 1 colorpair
5 71 0.0 1 colorpair
6 70 0.0 1 colorpair
7 69 0.0 1 colorpair
8 68 0.0 1 colorpair
9 67 0.0 1 colorpair
10 66 0.0 1 colorpair
13 63 0.0 1 colorpair
14 62 0.0 1 colorpair
16 28 0.0 1 colorpair
17 27 0.0 1 colorpair
18 26 0.0 1 colorpair
19 25 0.0 1 colorpair
31 57 0.0 1 colorpair
33 55 0.0 1 colorpair
34 54 0.0 1 colorpair
35 53 0.0 1 colorpair
36 52 0.0 1 colorpair
37 51 0.0 1 colorpair
38 50 0.0 1 colorpair
39 49 0.0 1 colorpair
40 48 0.0 1 colorpair
41 47 0.0 1 colorpair
76 145 0.0 1 colorpair
77 144 0.0 1 colorpair
78 143 0.0 0.2 colorpair
80 141 0.0 1 colorpair
81 140 0.0 1 colorpair
82 139 0.0 1 colorpair
84 138 0.0 1 colorpair
87 135 0.0 1 colorpair
88 134 0.0 1 colorpair
89 133 0.0 1 colorpair
90 132 0.0 1 colorpair
91 131 0.0 1 colorpair
92 130 0.0 1 colorpair
95 127 0.0 1 colorpair
98 124 0.0 1 colorpair
99 123 0.0 1 colorpair
101 121 0.0 1 colorpair
102 120 0.0 1 colorpair
103 119 0.0 1 colorpair
104 118 0.0 1 colorpair
107 115 0.0 1 colorpair
108 114 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
78 143 2 gmark

% End Annotations
showpage
end
%%EOF
