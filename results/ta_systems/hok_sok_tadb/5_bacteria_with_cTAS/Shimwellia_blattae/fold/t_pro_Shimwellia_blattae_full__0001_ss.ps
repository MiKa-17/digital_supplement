%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUCGCAAAAUUCCGCAGUAUGGUGUCUGUUGAUAGUGUGUUUAACGCUGUUACUGCUCACCUUAAUUAUCCACCCCAGGCUAUGUGAAAUUCGCGUAACCAUGGGUUCCCGGGAAAUUGCGGCCAUUAUGGCUUGUGGUG\
) } def
/len { sequence length } bind def

/coor [
[135.21815491 335.39709473]
[129.44027710 321.55456543]
[134.95468140 307.60494995]
[148.63586426 301.45474243]
[162.72863770 306.58892822]
[157.87455750 292.39605713]
[153.02047729 278.20318604]
[148.16638184 264.01028442]
[143.31230164 249.81741333]
[129.86729431 243.51129150]
[124.74237061 229.18684387]
[131.44796753 215.12722778]
[126.59388733 200.93435669]
[121.73979950 186.74147034]
[116.88571930 172.54858398]
[112.03163147 158.35571289]
[95.38124084 159.40383911]
[79.09296417 155.79466248]
[64.44381714 147.81115723]
[52.58229065 136.07920837]
[44.43835068 121.51863861]
[40.65048218 105.27099609]
[41.51565170 88.61009216]
[27.27030945 83.91220093]
[13.02496624 79.21430969]
[-1.22037756 74.51641846]
[-11.84772491 85.41691589]
[-26.09590340 90.60115814]
[-41.12055969 89.09122467]
[-53.94699478 81.23988342]
[-62.05912018 68.65008545]
[-63.89296341 53.84797668]
[-78.13830566 49.15008545]
[-92.38365173 44.45219421]
[-106.62899780 39.75430298]
[-120.87433624 35.05641174]
[-135.11968994 30.35851860]
[-149.36502075 25.66062737]
[-163.61036682 20.96273613]
[-177.85571289 16.26484299]
[-192.77153015 22.17229271]
[-206.61779785 14.06918716]
[-208.77285767 -1.82846355]
[-197.58351135 -13.32534313]
[-181.63328552 -11.60202885]
[-173.15782166 2.01950026]
[-158.91247559 6.71739197]
[-144.66712952 11.41528416]
[-130.42179871 16.11317635]
[-116.17644501 20.81106758]
[-101.93110657 25.50895882]
[-87.68576050 30.20685005]
[-73.44041443 34.90474319]
[-59.19507217 39.60263443]
[-48.91563034 28.79529572]
[-34.90562439 23.50103760]
[-19.92493248 24.82005310]
[-6.94958448 32.54407883]
[1.41943324 45.18711853]
[3.47751427 60.27107620]
[17.72285843 64.96896362]
[31.96820068 69.66685486]
[46.21354675 74.36474609]
[50.46575546 66.88644409]
[55.75055695 60.09842682]
[61.95777893 54.14219666]
[68.95803070 49.14191437]
[76.60537720 45.20182037]
[84.74040985 42.40404892]
[93.19355011 40.80691910]
[101.78856659 40.44372559]
[110.34630585 41.32204056]
[118.68836212 43.42355728]
[126.64084625 46.70446396]
[134.03797913 51.09636688]
[140.72554016 56.50771713]
[152.27484131 46.93620300]
[163.82412720 37.36469269]
[175.37342834 27.79317856]
[186.81687927 18.09538078]
[198.15312195 8.27247047]
[203.51574707 -6.61218166]
[218.20123291 -9.09931087]
[229.53747559 -18.92222214]
[240.87371826 -28.74513245]
[252.20996094 -38.56804276]
[263.54620361 -48.39095688]
[274.88244629 -58.21386719]
[286.21868896 -68.03677368]
[294.22958374 -82.97872162]
[310.80523682 -79.41722870]
[311.97152710 -62.50344086]
[296.04159546 -56.70053482]
[284.70535278 -46.87762070]
[273.36911011 -37.05471039]
[262.03286743 -27.23180008]
[250.69662476 -17.40888977]
[239.36038208 -7.58597851]
[228.02413940 2.23693275]
[223.47236633 16.41898537]
[207.97602844 19.60871506]
[196.63978577 29.43162537]
[193.62118530 36.24169159]
[184.94493103 39.34247208]
[173.39564514 48.91398239]
[161.84634399 58.48549652]
[150.29705811 68.05700684]
[158.01889038 86.43692780]
[159.24536133 106.33526611]
[153.83917236 125.52435303]
[142.40554810 141.85592651]
[126.22451019 153.50161743]
[131.07859802 167.69450378]
[135.93267822 181.88739014]
[140.78677368 196.08026123]
[145.64085388 210.27314758]
[159.55192566 217.28167725]
[164.27247620 231.74443054]
[157.50518799 244.96333313]
[162.35926819 259.15621948]
[167.21334839 273.34909058]
[172.06744385 287.54196167]
[176.92152405 301.73486328]
[182.69981384 315.57723999]
[189.37721252 329.00900269]
[196.05461121 342.44076538]
[202.73200989 355.87252808]
[209.40939331 369.30429077]
[224.73249817 371.75021362]
[235.66760254 382.75942993]
[238.00996399 398.09869385]
[230.85888672 411.86972046]
[216.96409607 418.77731323]
[201.66844177 416.16531372]
[190.85340881 405.03811646]
[188.67758179 389.67434692]
[195.97763062 375.98168945]
[189.30023193 362.54992676]
[182.62283325 349.11816406]
[175.94543457 335.68640137]
[169.26803589 322.25463867]
[163.00726318 335.88555908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[12 116]
[13 115]
[14 114]
[15 113]
[16 112]
[23 63]
[24 62]
[25 61]
[26 60]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[76 107]
[77 106]
[78 105]
[79 104]
[80 102]
[81 101]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% Start Annotations
5 123 0.0 1 colorpair
6 122 0.0 1 colorpair
7 121 0.0 1 colorpair
8 120 0.0 1 colorpair
9 119 0.0 1 colorpair
12 116 0.0 1 colorpair
13 115 0.0 1 colorpair
14 114 0.0 1 colorpair
15 113 0.0 1 colorpair
16 112 0.0 1 colorpair
23 63 0.0 1 colorpair
24 62 0.0 1 colorpair
25 61 0.0 1 colorpair
26 60 0.0 1 colorpair
32 54 0.0 1 colorpair
33 53 0.0 1 colorpair
34 52 0.0 1 colorpair
35 51 0.0 1 colorpair
36 50 0.0 1 colorpair
37 49 0.0 1 colorpair
38 48 0.0 1 colorpair
39 47 0.0 1 colorpair
40 46 0.0 1 colorpair
76 107 0.0 1 colorpair
77 106 0.0 1 colorpair
78 105 0.0 1 colorpair
79 104 0.0 1 colorpair
80 102 0.0 1 colorpair
81 101 0.0 1 colorpair
83 99 0.0 1 colorpair
84 98 0.0 1 colorpair
85 97 0.0 1 colorpair
86 96 0.0 1 colorpair
87 95 0.0 1 colorpair
88 94 0.0 1 colorpair
89 93 0.0 1 colorpair
124 141 0.0 1 colorpair
125 140 0.0 1 colorpair
126 139 0.0 1 colorpair
127 138 0.0 1 colorpair
128 137 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
