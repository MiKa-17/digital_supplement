%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACCUAACGUUGUUU_GG_CG_UUAGAGU_GGCCUCGGGUUGA_UGA_UAUCGACUCGGGGCUUUUCUCUUUCUAUCCUUC________\
) } def
/len { sequence length } bind def

/coor [
[146.21020508 273.02371216]
[131.33688354 271.07836914]
[116.96699524 266.77645874]
[103.47139740 260.22903442]
[91.19836426 251.60507202]
[80.46464539 241.12712097]
[71.54725647 229.06561279]
[64.67632294 215.73181152]
[60.02917862 201.46983337]
[57.72574615 186.64775085]
[57.82548141 171.64808655]
[60.32580185 156.85794067]
[65.16218567 142.65901184]
[72.20981598 129.41775513]
[81.28680420 117.47588348]
[92.15835571 107.14203644]
[77.17468262 106.44242859]
[62.19100571 105.74282074]
[47.19826126 105.27632904]
[32.20007706 105.04304504]
[17.20007515 105.04304504]
[7.47699690 117.29032135]
[-7.85398102 120.37174225]
[-21.55403900 112.83235168]
[-27.15442848 98.23201752]
[-22.01081657 83.46457672]
[-8.55185890 75.50276184]
[6.86753416 78.10589600]
[16.96679878 90.04486084]
[23.72483826 86.73512268]
[32.43335342 90.04486084]
[47.43153763 90.27813721]
[54.28924179 87.18016815]
[62.89061356 90.75914764]
[77.87429047 91.45875549]
[92.85796356 92.15835571]
[105.92540741 84.79344940]
[113.08620453 71.61304474]
[120.24700165 58.43264389]
[114.95520020 41.84832001]
[123.05748749 26.82062912]
[139.17526245 22.30877113]
[145.92268372 8.91204548]
[152.67010498 -4.48467922]
[159.41754150 -17.88140488]
[166.16496277 -31.27812958]
[172.91238403 -44.67485428]
[179.65982056 -58.07157898]
[186.40724182 -71.46830750]
[193.15466309 -84.86502838]
[199.90208435 -98.26175690]
[206.64952087 -111.65847778]
[213.39694214 -125.05520630]
[220.14436340 -138.45193481]
[221.24972534 -147.70237732]
[227.31564331 -152.15547180]
[226.34994507 -168.52616882]
[240.19151306 -177.32064819]
[254.60133362 -169.49191284]
[254.75581360 -153.09349060]
[240.49604797 -144.99467468]
[233.54109192 -131.70451355]
[226.79367065 -118.30777740]
[220.04623413 -104.91105652]
[213.29881287 -91.51432800]
[206.55139160 -78.11760712]
[199.80397034 -64.72087860]
[193.05653381 -51.32415390]
[186.30911255 -37.92742920]
[179.56169128 -24.53070450]
[172.81425476 -11.13397884]
[166.06683350 2.26274633]
[159.31941223 15.65947151]
[152.57199097 29.05619621]
[158.30644226 40.70943832]
[156.19587708 53.72283554]
[146.79751587 63.24498367]
[133.42739868 65.59344482]
[126.26660919 78.77384186]
[119.10581207 91.95424652]
[133.57664490 88.00518799]
[148.49310303 86.42428589]
[163.47023010 87.25233459]
[178.12149048 90.46795654]
[192.06880188 95.98818207]
[204.95217896 103.67053223]
[216.43914795 113.31674957]
[226.23326111 124.67787933]
[234.08174133 137.46073914]
[239.78205872 151.33540344]
[243.18707275 165.94381714]
[244.20893860 180.90896606]
[242.82127380 195.84465027]
[239.05987549 210.36538696]
[233.02182007 224.09645081]
[224.86296082 236.68345642]
[214.79383850 247.80158997]
[203.07431030 257.16387939]
[190.00683594 264.52874756]
[175.92866516 269.70611572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 36]
[17 35]
[18 34]
[19 32]
[20 31]
[21 29]
[37 80]
[38 79]
[39 78]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[56 61]
] def

init

% Start Annotations
16 36 0.0 1 colorpair
17 35 0.32 1 colorpair
18 34 0.0 0.6 colorpair
19 32 0.16 0.6 colorpair
20 31 0.0 0.6 colorpair
21 29 0.32 0.6 colorpair
37 80 0.0 1 colorpair
38 79 0.0 1 colorpair
39 78 0.0 1 colorpair
42 74 0.16 1 colorpair
43 73 0.0 1 colorpair
44 72 0.0 1 colorpair
45 71 0.0 1 colorpair
46 70 0.0 0.2 colorpair
47 69 0.0 1 colorpair
48 68 0.0 1 colorpair
49 67 0.0 0.6 colorpair
50 66 0.16 1 colorpair
51 65 0.0 1 colorpair
52 64 0.0 0.2 colorpair
53 63 0.0 1 colorpair
54 62 0.0 1 colorpair
56 61 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
17 cmark
35 cmark
18 34 1 gmark
19 32 1 gmark
19 cmark
32 cmark
20 31 1 gmark
21 29 1 gmark
21 cmark
29 cmark
74 cmark
46 70 2 gmark
49 67 1 gmark
66 cmark
52 64 2 gmark

% End Annotations
showpage
end
%%EOF
