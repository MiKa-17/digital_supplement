%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACUUAACGUUGUCU_GGCG__UUAGAGU_GGCCUCGGGUUGAUGAAUAUCGACUCGGGGCUUUUCUCUUUGUAUCCUUC________\
) } def
/len { sequence length } bind def

/coor [
[101.17509460 196.27429199]
[89.51036835 195.70834351]
[77.99996185 193.73429871]
[66.81324005 190.38119507]
[56.11476898 185.69834900]
[46.06196213 179.75466919]
[36.80271149 172.63761902]
[28.47325134 164.45187378]
[21.19612503 155.31790161]
[8.28499413 162.95352173]
[2.35895896 170.14656067]
[-5.15379477 170.61886597]
[-18.29839516 177.84516907]
[-31.44299507 185.07147217]
[-37.28163147 200.01435852]
[-52.64683914 204.62846375]
[-65.75174713 195.37422180]
[-66.54339600 179.35072327]
[-54.41449356 168.84979248]
[-38.66930008 171.92687988]
[-25.52470016 164.70057678]
[-12.38010025 157.47425842]
[0.64937264 150.04238892]
[13.56050301 142.40676880]
[6.75466394 123.98806763]
[3.82713342 104.57165527]
[4.89967585 84.96508789]
[9.92768097 65.98386383]
[18.70202065 48.41745758]
[30.85774803 32.99649811]
[45.88927841 20.36238289]
[63.17140961 11.04059887]
[81.98533630 5.41885996]
[101.54853058 3.73098993]
[121.04732513 6.04719114]
[139.67071533 12.27112675]
[146.89701843 -0.87347311]
[154.12332153 -14.01807308]
[161.34962463 -27.16267395]
[156.14001465 -43.77127075]
[164.31393433 -58.75829315]
[180.45133972 -63.19351959]
[187.26119995 -76.55861664]
[194.07106018 -89.92371368]
[200.88092041 -103.28881073]
[207.69078064 -116.65391541]
[214.50064087 -130.01901245]
[221.31048584 -143.38410950]
[228.12034607 -156.74920654]
[234.93020630 -170.11430359]
[241.74006653 -183.47940063]
[248.54992676 -196.84449768]
[255.35977173 -210.20959473]
[262.16964722 -223.57469177]
[257.04809570 -238.52612305]
[264.07379150 -252.68292236]
[279.07855225 -257.64611816]
[293.16027832 -250.47111511]
[297.96453857 -235.41473389]
[290.64105225 -221.40965271]
[275.53472900 -216.76483154]
[268.72488403 -203.39973450]
[261.91500854 -190.03463745]
[255.10516357 -176.66954041]
[248.29530334 -163.30444336]
[241.48544312 -149.93934631]
[234.67558289 -136.57424927]
[227.86573792 -123.20915222]
[221.05587769 -109.84405518]
[214.24601746 -96.47895813]
[207.43615723 -83.11386108]
[200.62629700 -69.74876404]
[193.81643677 -56.38366318]
[199.49690247 -44.70182419]
[197.32377625 -31.69671631]
[187.87777710 -22.21899414]
[174.49421692 -19.93636894]
[167.26791382 -6.79176807]
[160.04161072 6.35283184]
[152.81530762 19.49743271]
[162.17337036 26.48406219]
[170.61669922 34.55229187]
[178.02108765 43.58341980]
[184.27758789 53.44457245]
[189.29417419 63.99067307]
[192.99700928 75.06655884]
[195.33163452 86.50926971]
[196.26370239 98.15046692]
[195.77947998 109.81887817]
[193.88612366 121.34282684]
[190.61146545 132.55276489]
[186.00369263 143.28378296]
[180.13058472 153.37799072]
[173.07856750 162.68685913]
[164.95138550 171.07347107]
[155.86860657 178.41439819]
[145.96386719 184.60166931]
[135.38288879 189.54425049]
[124.28132629 193.16940308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[12 22]
[13 21]
[14 20]
[36 80]
[37 79]
[38 78]
[39 77]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% Start Annotations
10 23 0.0 1 colorpair
12 22 0.0 1 colorpair
13 21 0.16 0.6 colorpair
14 20 0.0 1 colorpair
36 80 0.0 1 colorpair
37 79 0.0 1 colorpair
38 78 0.0 1 colorpair
39 77 0.0 1 colorpair
42 73 0.16 1 colorpair
43 72 0.0 1 colorpair
44 71 0.0 1 colorpair
45 70 0.0 1 colorpair
46 69 0.0 0.6 colorpair
47 68 0.0 1 colorpair
48 67 0.0 1 colorpair
49 66 0.0 0.6 colorpair
50 65 0.16 1 colorpair
51 64 0.0 1 colorpair
52 63 0.0 0.2 colorpair
53 62 0.0 1 colorpair
54 61 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 24 3 gmark
9 cmark
24 cmark
13 21 1 gmark
13 cmark
21 cmark
73 cmark
46 69 1 gmark
49 66 1 gmark
65 cmark
52 63 2 gmark

% End Annotations
showpage
end
%%EOF
