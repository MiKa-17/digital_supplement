%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GAUGCCGAACAAACGAAGCCUGUUAAAACUGGUGGUUAUUUGUGCCACGGUAAUAUCACCGGCAUGGAUAACCCGCAGCAUGCUUUGCGAGCUGCGGAUCCGAUCGGGCAAUACGGAGGUUGCGGCCAUUUGGGCUUACGAAUCCGGGC__\
) } def
/len { sequence length } bind def

/coor [
[70.51078796 498.38870239]
[54.73608780 497.42208862]
[44.32791901 485.52899170]
[45.46126175 469.76538086]
[57.46372604 459.48355103]
[58.38114929 444.51162720]
[59.29857254 429.53970337]
[60.21599960 414.56777954]
[47.35214615 408.88256836]
[37.18672562 399.12002563]
[30.95983505 386.44274902]
[29.44079781 372.37057495]
[32.83315277 358.59838867]
[40.74765778 346.79196167]
[52.24684143 338.38650513]
[65.95600891 334.41226196]
[67.17864227 319.46218872]
[68.24873352 304.50039673]
[69.16616058 289.52847290]
[70.08358002 274.55657959]
[71.00100708 259.58465576]
[71.91843414 244.61273193]
[72.83585358 229.64080811]
[71.01872253 227.43150330]
[69.99464417 224.34793091]
[70.10924530 220.69876099]
[71.58625793 216.91474915]
[74.48780060 213.50148010]
[76.62252045 198.65415955]
[78.75724030 183.80683899]
[76.58307648 176.69566345]
[81.08992767 168.67964172]
[83.52706909 153.87895203]
[85.96421051 139.07826233]
[88.40135193 124.27758026]
[61.14123917 97.48713684]
[84.13294983 51.55852127]
[72.59869385 41.96889496]
[61.06443787 32.37927246]
[49.53017807 22.78964806]
[37.99592209 13.20002270]
[26.46166229 3.61039877]
[14.92740440 -5.97922564]
[3.39314675 -15.56884956]
[-8.14111137 -25.15847397]
[-19.67536926 -34.74810028]
[-31.20962715 -44.33772278]
[-42.74388504 -53.92734909]
[-49.27967072 -55.44204330]
[-53.41064072 -59.45473099]
[-54.54261398 -64.15100098]
[-65.67612457 -74.20311737]
[-76.80963898 -84.25522614]
[-92.57861328 -83.19934845]
[-104.42041779 -93.66583252]
[-105.30951691 -109.44509125]
[-94.71841431 -121.17557526]
[-78.93064117 -121.89779663]
[-67.31278992 -111.18326569]
[-66.75753021 -95.38873291]
[-55.62401581 -85.33662415]
[-44.49050522 -75.28451538]
[-33.15425873 -65.46160889]
[-21.62000275 -55.87198257]
[-10.08574486 -46.28235626]
[1.44851315 -36.69273376]
[12.98277092 -27.10310745]
[24.51702881 -17.51348305]
[36.05128860 -7.92385912]
[47.58554459 1.66576529]
[59.11980438 11.25538921]
[70.65406036 20.84501457]
[82.18831635 30.43463898]
[93.72257996 40.02426147]
[108.31169128 36.53746033]
[114.26329041 22.76871300]
[120.21488953 8.99996376]
[126.16649628 -4.76878500]
[132.11808777 -18.53753471]
[138.06970215 -32.30628204]
[144.02130127 -46.07503128]
[142.39463806 -61.81239319]
[154.54667664 -70.42501068]
[160.49827576 -84.19376373]
[166.44989014 -97.96250916]
[167.18438721 -114.90053558]
[183.66381836 -118.88364410]
[192.05320740 -104.15088654]
[180.21862793 -92.01091003]
[174.26702881 -78.24215698]
[168.31542969 -64.47341156]
[170.36778259 -49.72088242]
[157.79003906 -40.12342834]
[151.83843994 -26.35468102]
[145.88684082 -12.58593273]
[139.93524170 1.18281615]
[133.98364258 14.95156479]
[128.03204346 28.72031403]
[122.08043671 42.48906326]
[127.38373566 47.79236221]
[137.99034119 58.39896393]
[143.29364014 63.70226669]
[157.06239319 57.75066376]
[166.40574646 44.27351379]
[182.72444153 45.89599991]
[189.23118591 60.94905090]
[179.23240662 73.94737244]
[163.01399231 71.51941681]
[149.24523926 77.47101593]
[151.68238831 92.27169800]
[166.63247681 93.49433899]
[181.58256531 94.71697998]
[196.53265381 95.93962097]
[211.48274231 97.16226196]
[223.36805725 86.74522400]
[239.13250732 87.86681366]
[249.42329407 99.86160278]
[248.13510132 115.61330414]
[236.03218079 125.77671051]
[220.29498291 124.32205200]
[210.26010132 112.11235046]
[195.31001282 110.88970947]
[180.35992432 109.66706848]
[165.40983582 108.44442749]
[150.45974731 107.22179413]
[127.21813202 127.84764099]
[103.20204163 126.71472168]
[100.76490021 141.51541138]
[98.32775879 156.31610107]
[95.89061737 171.11677551]
[93.60456848 185.94155884]
[91.46984100 200.78887939]
[89.33512115 215.63619995]
[87.80777740 230.55824280]
[86.89035034 245.53015137]
[85.97292328 260.50207520]
[85.05550385 275.47399902]
[84.13807678 290.44592285]
[83.22064972 305.41781616]
[85.83077240 314.23574829]
[82.12873077 320.68481445]
[80.90609741 335.63491821]
[95.23426056 342.86724854]
[105.67441559 355.00695801]
[110.65646362 370.18322754]
[109.44848633 386.07202148]
[102.26411438 400.25207520]
[90.22544861 410.57379150]
[75.18791962 415.48522949]
[74.27049255 430.45712280]
[73.35306549 445.42904663]
[72.43564606 460.40097046]
[83.09295654 472.07131958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 152]
[6 151]
[7 150]
[8 149]
[16 142]
[17 141]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[28 133]
[29 132]
[30 131]
[32 130]
[33 129]
[34 128]
[35 127]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[51 62]
[52 61]
[53 60]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[83 91]
[84 90]
[85 89]
[102 109]
[103 108]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% Start Annotations
5 152 0.0 0.6 colorpair
6 151 0.0 1 colorpair
7 150 0.0 1 colorpair
8 149 0.0 1 colorpair
16 142 0.0 1 colorpair
17 141 0.0 1 colorpair
18 139 0.0 1 colorpair
19 138 0.0 1 colorpair
20 137 0.0 1 colorpair
21 136 0.0 1 colorpair
22 135 0.0 1 colorpair
23 134 0.0 1 colorpair
28 133 0.0 1 colorpair
29 132 0.0 1 colorpair
30 131 0.0 1 colorpair
32 130 0.0 1 colorpair
33 129 0.0 1 colorpair
34 128 0.0 1 colorpair
35 127 0.0 1 colorpair
37 74 0.0 1 colorpair
38 73 0.0 1 colorpair
39 72 0.0 1 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.0 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
75 99 0.0 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
102 109 0.0 1 colorpair
103 108 0.0 1 colorpair
110 125 0.0 1 colorpair
111 124 0.0 1 colorpair
112 123 0.0 1 colorpair
113 122 0.0 1 colorpair
114 121 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 152 1 gmark

% End Annotations
showpage
end
%%EOF
