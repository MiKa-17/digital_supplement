%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAAUCUGAUGGUGUUCAAGCAUAGAG_G_U_G_GCCUCA_G___GUUAAUG__UAAAGCUUAC____UGCGGGGCUCUCAACGUUAACUGGGGCUUUUC_UCUA_UC__UGCCUUUU____CGAAUGCCUGAGGCAAAAAGCCUCAAGCACCCGCAG_______\
) } def
/len { sequence length } bind def

/coor [
[-57.97153854 334.08575439]
[-73.92176819 322.49127197]
[-89.02401733 309.81198120]
[-103.20463562 296.10971069]
[-116.39449310 281.45126343]
[-128.52928162 265.90814209]
[-140.89752197 274.39498901]
[-153.26576233 282.88183594]
[-165.63401794 291.36868286]
[-178.00225830 299.85552979]
[-190.29382324 308.45303345]
[-184.11198425 322.17422485]
[-180.72610474 336.83786011]
[-180.26631165 351.88027954]
[-182.75027466 366.72332764]
[-188.08255005 380.79647827]
[-196.05813599 393.55877686]
[-206.37051392 404.51965332]
[-218.62327576 413.25784302]
[-232.34547424 419.43746948]
[-247.00964355 422.82098389]
[-262.05215454 423.27835083]
[-276.89480591 420.79196167]
[-290.96707153 415.45742798]
[-303.72805786 407.47976685]
[-314.68728638 397.16561890]
[-323.42352295 384.91143799]
[-329.60092163 371.18826294]
[-332.98205566 356.52352905]
[-333.43698120 341.48095703]
[-330.94818115 326.63870239]
[-325.61135864 312.56729126]
[-317.63165283 299.80758667]
[-307.31573486 288.85003662]
[-295.06011963 280.11581421]
[-281.33593750 273.94061279]
[-266.67068481 270.56185913]
[-251.62802124 270.10937500]
[-236.78617859 272.60055542]
[-222.71563721 277.93963623]
[-209.95721436 285.92144775]
[-199.00132751 296.23913574]
[-195.36798096 289.77429199]
[-186.48910522 287.48727417]
[-174.12086487 279.00042725]
[-161.75260925 270.51358032]
[-149.38436890 262.02673340]
[-137.01612854 253.53990173]
[-143.77609253 242.56352234]
[-150.02810669 231.29008484]
[-155.75914001 219.74307251]
[-160.95724487 207.94656372]
[-165.61158752 195.92510986]
[-169.71247864 183.70378113]
[-173.25135803 171.30804443]
[-176.22087097 158.76371765]
[-178.61482239 146.09693909]
[-180.42820740 133.33412170]
[-181.65727234 120.50183105]
[-182.29943848 107.62683105]
[-182.35337830 94.73593140]
[-181.81898499 81.85600281]
[-180.69735718 69.01388550]
[-178.99082947 56.23633194]
[-176.70297241 43.54996872]
[-173.83854675 30.98122978]
[-170.40353394 18.55630684]
[-166.40505981 6.30108833]
[-161.85148621 -5.75888920]
[-156.75228882 -17.59849548]
[-151.11808777 -29.19306183]
[-144.96064758 -40.51842499]
[-138.29275513 -51.55099106]
[-131.12835693 -62.26776886]
[-123.48233795 -72.64643097]
[-115.37065125 -82.66534424]
[-106.81019592 -92.30363464]
[-97.81880188 -101.54122162]
[-88.41522217 -110.35885620]
[-78.61903381 -118.73816681]
[-68.45065308 -126.66168976]
[-57.93127441 -134.11291504]
[-47.08280945 -141.07630920]
[-35.92787170 -147.53738403]
[-24.48969650 -153.48266602]
[-12.79212284 -158.89974976]
[-0.85952324 -163.77737427]
[11.28323841 -168.10534668]
[23.61086082 -171.87467957]
[36.09765625 -175.07749939]
[48.71760178 -177.70715332]
[61.44440842 -179.75813293]
[74.25155640 -181.22618103]
[87.11235046 -182.10823059]
[100.00000000 -182.40245056]
[112.88764954 -182.10823059]
[125.74844360 -181.22618103]
[138.55558777 -179.75813293]
[151.28239441 -177.70715332]
[163.90234375 -175.07749939]
[176.38914490 -171.87467957]
[188.71676636 -168.10534668]
[200.85952759 -163.77737427]
[212.79212952 -158.89974976]
[224.48970032 -153.48266602]
[235.92787170 -147.53738403]
[247.08280945 -141.07630920]
[257.93127441 -134.11291504]
[268.45065308 -126.66168976]
[278.61901855 -118.73816681]
[288.41522217 -110.35885620]
[297.81881714 -101.54122162]
[306.81018066 -92.30363464]
[315.37063599 -82.66534424]
[323.48233032 -72.64643097]
[331.12835693 -62.26776886]
[338.29275513 -51.55099106]
[344.96063232 -40.51842499]
[351.11810303 -29.19306183]
[356.75228882 -17.59849548]
[361.85150146 -5.75888920]
[366.40505981 6.30108833]
[370.40353394 18.55630684]
[373.83856201 30.98122978]
[376.70297241 43.54996872]
[378.99084473 56.23633194]
[380.69735718 69.01388550]
[381.81896973 81.85600281]
[382.35339355 94.73593140]
[382.29943848 107.62683105]
[381.65725708 120.50183105]
[380.42822266 133.33412170]
[378.61480713 146.09693909]
[376.22085571 158.76371765]
[373.25137329 171.30804443]
[369.71246338 183.70378113]
[365.61160278 195.92510986]
[360.95724487 207.94656372]
[355.75915527 219.74307251]
[350.02810669 231.29008484]
[343.77609253 242.56352234]
[337.01611328 253.53990173]
[349.38436890 262.02673340]
[361.75262451 270.51358032]
[374.12084961 279.00042725]
[390.09268188 277.49041748]
[401.12738037 289.13580322]
[398.76007080 305.00323486]
[384.80676270 312.92059326]
[369.97122192 306.81433105]
[365.63400269 291.36868286]
[353.26577759 282.88183594]
[340.89752197 274.39498901]
[328.52926636 265.90814209]
[316.39450073 281.45126343]
[303.20465088 296.10971069]
[289.02401733 309.81198120]
[273.92178345 322.49127197]
[257.97152710 334.08575439]
[241.25108337 344.53890991]
[223.84193420 353.79977417]
[205.82896423 361.82318115]
[187.30000305 368.57000732]
[168.34539795 374.00738525]
[149.05757141 378.10879517]
[129.53054810 380.85421753]
[109.85954285 382.23028564]
[90.14045715 382.23028564]
[70.46945190 380.85421753]
[50.94242859 378.10879517]
[31.65459442 374.00738525]
[12.69999027 368.57000732]
[-5.82896519 361.82318115]
[-23.84193230 353.79977417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 42]
[142 154]
[143 153]
[144 152]
[145 151]
] def

init

% Start Annotations
6 48 0.0 1 colorpair
7 47 0.0 1 colorpair
8 46 0.0 1 colorpair
9 45 0.0 1 colorpair
10 44 0.0 1 colorpair
142 154 0.16 1 colorpair
143 153 0.0 1 colorpair
144 152 0.16 0.6 colorpair
145 151 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 42 3 gmark
11 cmark
42 cmark
142 cmark
144 152 1 gmark
144 cmark
152 cmark

% End Annotations
showpage
end
%%EOF
