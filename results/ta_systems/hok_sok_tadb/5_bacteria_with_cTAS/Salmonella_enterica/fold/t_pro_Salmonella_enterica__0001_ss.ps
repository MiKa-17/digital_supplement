%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________AUG____AAAAAGCCGCA____AAAGGCCAUGU_UAUUCUGCCUAAUAGUCGUCUGUUUCACCGUGUUAAUAUUCACCUUGCUAACGCGGAAAUCCCUCUGCGAGGUACGGAUCCGAGACGGAAACAGGGAGGUCGCGGCAUUCAUGGCUUACGAAUCC___GAUAAG___\
) } def
/len { sequence length } bind def

/coor [
[81.93786621 492.04022217]
[67.56562042 487.69943237]
[53.71588898 481.90380859]
[40.53548431 474.71487427]
[28.16412163 466.20880127]
[16.73294830 456.47573853]
[6.36314154 445.61889648]
[-2.83537436 433.75332642]
[-10.76508999 421.00485229]
[-17.34194565 407.50860596]
[-22.49622345 393.40762329]
[-26.17328453 378.85140991]
[-28.33415031 363.99429321]
[-28.95591354 348.99368286]
[-28.03198433 334.00869751]
[-25.57215691 319.19812012]
[-21.60250473 304.71896362]
[-16.16511154 290.72473145]
[-9.31761551 277.36373901]
[-1.13260257 264.77764893]
[8.30316067 253.09986877]
[18.88964844 242.45420837]
[30.51464081 232.95349121]
[43.05490494 224.69844055]
[56.37750626 217.77656555]
[70.34121704 212.26124573]
[84.79801941 208.21093750]
[99.59465790 205.66857910]
[98.58741760 190.70243835]
[97.58017731 175.73629761]
[96.57293701 160.77015686]
[95.56569672 145.80401611]
[83.85565186 143.09327698]
[73.24701691 137.44259644]
[64.46354675 129.23748779]
[58.10446548 119.03771210]
[54.60361481 107.53913116]
[54.19982910 95.52621460]
[56.92065811 83.81851196]
[62.58047485 73.21475220]
[70.79315948 64.43835449]
[80.99840546 58.08806992]
[92.50000000 54.59713364]
[92.50000000 39.59713364]
[77.52462006 38.65511703]
[62.63793564 36.77464294]
[47.89870453 33.96313095]
[33.36509705 30.23168564]
[19.09446907 25.59502411]
[5.14313841 20.07145119]
[-8.43383217 13.68276215]
[-21.58286095 6.45417213]
[-34.25205612 -1.58579063]
[-46.39141464 -10.40539646]
[-57.95302963 -19.96983719]
[-68.89127350 -30.24136734]
[-79.16297150 -41.17945099]
[-88.72759247 -52.74091339]
[-97.54739380 -64.88013458]
[-105.58755493 -77.54920197]
[-112.81634521 -90.69812012]
[-119.20524597 -104.27498627]
[-124.72904205 -118.22623444]
[-129.36592102 -132.49679565]
[-133.09759521 -147.03033447]
[-135.90933228 -161.76953125]
[-137.79003906 -176.65617371]
[-138.73229980 -191.63154602]
[-138.73237610 -206.63652039]
[-137.79028320 -221.61190796]
[-135.90972900 -236.49858093]
[-133.09814453 -251.23779297]
[-129.36662292 -265.77139282]
[-124.72988129 -280.04199219]
[-119.20623779 -293.99328613]
[-112.81748199 -307.57022095]
[-105.58882141 -320.71920776]
[-97.54878998 -333.38836670]
[-88.72911835 -345.52767944]
[-79.16461945 -357.08923340]
[-68.89303589 -368.02743530]
[-57.95489883 -378.29907227]
[-46.39338303 -387.86364746]
[-34.25411606 -396.68338013]
[-21.58500671 -404.72348022]
[-8.43605232 -411.95220947]
[5.14085150 -418.34103394]
[19.09212303 -423.86474609]
[33.36270523 -428.50155640]
[47.89627457 -432.23315430]
[62.63547516 -435.04483032]
[77.52213287 -436.92544556]
[92.49751282 -437.86761475]
[107.50248718 -437.86761475]
[122.47786713 -436.92544556]
[137.36453247 -435.04483032]
[152.10372925 -432.23315430]
[166.63729858 -428.50155640]
[180.90788269 -423.86474609]
[194.85914612 -418.34103394]
[208.43605042 -411.95220947]
[221.58500671 -404.72348022]
[234.25411987 -396.68338013]
[246.39338684 -387.86364746]
[257.95489502 -378.29907227]
[268.89303589 -368.02743530]
[279.16461182 -357.08923340]
[288.72912598 -345.52767944]
[297.54879761 -333.38836670]
[305.58880615 -320.71920776]
[312.81747437 -307.57022095]
[319.20623779 -293.99328613]
[324.72988892 -280.04199219]
[329.36660767 -265.77139282]
[333.09814453 -251.23779297]
[335.90972900 -236.49858093]
[337.79028320 -221.61190796]
[338.73236084 -206.63652039]
[338.73229980 -191.63154602]
[337.79003906 -176.65617371]
[335.90933228 -161.76953125]
[333.09759521 -147.03033447]
[329.36593628 -132.49679565]
[324.72903442 -118.22623444]
[319.20526123 -104.27498627]
[312.81634521 -90.69812012]
[305.58755493 -77.54920197]
[297.54739380 -64.88013458]
[288.72760010 -52.74091339]
[279.16296387 -41.17945099]
[268.89126587 -30.24136734]
[257.95303345 -19.96983719]
[246.39141846 -10.40539646]
[234.25205994 -1.58579063]
[221.58285522 6.45417213]
[208.43383789 13.68276215]
[194.85685730 20.07145119]
[180.90553284 25.59502411]
[166.63490295 30.23168564]
[152.10128784 33.96313095]
[137.36206055 36.77464294]
[122.47537994 38.65511703]
[107.50000000 39.59713364]
[107.50000000 54.59713364]
[124.29330444 60.91668320]
[137.39326477 73.17811584]
[144.80830383 89.51730347]
[145.41107178 107.45018768]
[139.10993958 124.25041962]
[126.86289215 137.36383057]
[110.53184509 144.79676819]
[111.53907776 159.76290894]
[112.54631805 174.72906494]
[113.55355835 189.69520569]
[114.56079865 204.66134644]
[129.56466675 205.19808960]
[144.43380737 207.27471924]
[159.01062012 210.86923218]
[173.14057922 215.94352722]
[186.67390442 222.44378662]
[199.46710205 230.30113220]
[211.38459778 239.43225098]
[222.30003357 249.74037170]
[232.09771729 261.11621094]
[240.67376709 273.43914795]
[247.93728638 286.57861328]
[253.81127930 300.39526367]
[258.23348999 314.74267578]
[261.15701294 329.46875000]
[262.55084229 344.41738892]
[262.40026855 359.43008423]
[260.70681763 374.34771729]
[257.48849487 389.01217651]
[252.77938843 403.26800537]
[246.62942505 416.96405029]
[239.10379028 429.95516968]
[230.28227234 442.10360718]
[220.25836182 453.28060913]
[209.13835144 463.36770630]
[197.04008484 472.25793457]
[184.09184265 479.85705566]
[170.43084717 486.08456421]
[156.20195007 490.87435913]
[141.55596924 494.17575073]
[126.64815521 495.95370483]
[111.63654327 496.18936157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 155]
[29 154]
[30 153]
[31 152]
[32 151]
[43 144]
[44 143]
] def

init

% Start Annotations
29 154 0.0 1 colorpair
30 153 0.32 0.2 colorpair
31 152 0.16 0.2 colorpair
43 144 0.16 0.6 colorpair
44 143 0.32 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
28 155 5 gmark
155 cmark
30 153 2 gmark
30 cmark
153 cmark
31 152 2 gmark
152 cmark
32 151 5 gmark
32 cmark
151 cmark
43 144 1 gmark
43 cmark
144 cmark
44 143 1 gmark
44 cmark
143 cmark

% End Annotations
showpage
end
%%EOF
