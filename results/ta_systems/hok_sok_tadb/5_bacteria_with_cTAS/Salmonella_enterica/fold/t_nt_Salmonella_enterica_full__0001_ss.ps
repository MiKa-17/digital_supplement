%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAACCUACAUGUGC_AAAG_CAUGAAAUU__GGCCUCAGAUUA__AUGUUAAGC_G_UCUUGCC_GGACGCGUAAUGUUAACUGGGGCUUUUCUCUAU_CUGCCUUUUGGUGUUCAUGCC__UGAGGCAGAUAGCCUCAAGCACCCGCAAC______\
) } def
/len { sequence length } bind def

/coor [
[-101.74909210 329.51013184]
[-112.76760101 319.33435059]
[-123.27352905 308.63012695]
[-133.24157715 297.42333984]
[-142.64772034 285.74090576]
[-151.46931458 273.61102295]
[-164.01872253 281.82760620]
[-176.56814575 290.04418945]
[-189.11755371 298.26077271]
[-201.66697693 306.47732544]
[-195.87590027 320.36178589]
[-192.73490906 335.07400513]
[-192.35099792 350.11285400]
[-194.73725891 364.96615601]
[-199.81239319 379.12799072]
[-207.40354919 392.11602783]
[-217.25216675 403.48788452]
[-229.02282715 412.85626221]
[-242.31460571 419.90203857]
[-256.67480469 424.38525391]
[-271.61431885 426.15325928]
[-286.62429810 425.14575195]
[-301.19351196 421.39712524]
[-314.82577515 415.03500366]
[-327.05673218 406.27609253]
[-337.46981812 395.41873169]
[-345.71035767 382.83270264]
[-351.49771118 368.94671631]
[-354.63470459 354.23364258]
[-355.01455688 339.19470215]
[-352.62429810 324.34204102]
[-347.54534912 310.18157959]
[-339.95071411 297.19558716]
[-330.09899902 285.82638550]
[-318.32583618 276.46118164]
[-305.03213501 269.41897583]
[-290.67074585 264.93960571]
[-275.73077393 263.17565918]
[-260.72103882 264.18719482]
[-246.15283203 267.93975830]
[-232.52230835 274.30554199]
[-220.29371643 283.06774902]
[-209.88356018 293.92791748]
[-197.33413696 285.71133423]
[-184.78471375 277.49478149]
[-172.23530579 269.27819824]
[-159.68588257 261.06161499]
[-167.27600098 248.12542725]
[-174.22221375 234.83241272]
[-180.50781250 221.21456909]
[-186.11764526 207.30470276]
[-191.03819275 193.13633728]
[-195.25759888 178.74359131]
[-198.76571655 164.16114807]
[-201.55407715 149.42413330]
[-203.61596680 134.56805420]
[-204.94641113 119.62870026]
[-205.54223633 104.64205933]
[-205.40196228 89.64422607]
[-204.52597046 74.67134857]
[-202.91633606 59.75949097]
[-200.57695007 44.94457626]
[-197.51345825 30.26229095]
[-193.73321533 15.74801159]
[-189.24536133 1.43670177]
[-184.06068420 -12.63716030]
[-178.19168091 -26.43967056]
[-171.65249634 -39.93757629]
[-164.45887756 -53.09836197]
[-156.62814331 -65.89031982]
[-148.17918396 -78.28263092]
[-139.13232422 -90.24545288]
[-129.50938416 -101.74994659]
[-119.33354187 -112.76841736]
[-108.62930298 -123.27430725]
[-97.42246246 -133.24230957]
[-85.74000549 -142.64840698]
[-73.61009216 -151.46995544]
[-61.06193542 -159.68568420]
[-48.12576675 -167.27581787]
[-34.83274841 -174.22204590]
[-21.21491051 -180.50765991]
[-7.30505466 -186.11750793]
[6.86330843 -191.03807068]
[21.25604439 -195.25750732]
[35.83848190 -198.76562500]
[50.57549286 -201.55401611]
[65.43156433 -203.61592102]
[80.37092590 -204.94639587]
[95.35756683 -205.54222107]
[110.35539246 -205.40197754]
[125.32826996 -204.52600098]
[140.24012756 -202.91638184]
[155.05505371 -200.57701111]
[169.73733521 -197.51353455]
[184.25161743 -193.73332214]
[198.56294250 -189.24548340]
[212.63681030 -184.06082153]
[226.43933105 -178.19183350]
[239.93724060 -171.65266418]
[253.09803772 -164.45906067]
[265.89001465 -156.62835693]
[278.28231812 -148.17939758]
[290.24514771 -139.13256836]
[301.74966431 -129.50964355]
[312.76815796 -119.33380890]
[323.27404785 -108.62958527]
[333.24206543 -97.42275238]
[342.64819336 -85.74031067]
[351.46972656 -73.61040497]
[359.68548584 -61.06225586]
[367.27563477 -48.12609863]
[374.22189331 -34.83309174]
[380.50750732 -21.21525955]
[386.11737061 -7.30541039]
[391.03796387 6.86294651]
[395.25741577 21.25567818]
[398.76556396 35.83811188]
[401.55395508 50.57511520]
[403.61587524 65.43119049]
[404.94638062 80.37054443]
[405.54220581 95.35718536]
[405.40197754 110.35501099]
[404.52603149 125.32789612]
[402.91644287 140.23976135]
[400.57708740 155.05467224]
[397.51364136 169.73696899]
[393.73342896 184.25126648]
[389.24560547 198.56257629]
[384.06097412 212.63645935]
[378.19198608 226.43898010]
[371.65283203 239.93690491]
[364.45925903 253.09770203]
[356.62857056 265.88967896]
[348.17962646 278.28201294]
[339.13281250 290.24484253]
[329.50988770 301.74938965]
[319.33407593 312.76788330]
[308.62985229 323.27380371]
[297.42303467 333.24182129]
[285.74060059 342.64794922]
[273.61071777 351.46951294]
[261.06259155 359.68527222]
[248.12643433 367.27545166]
[234.83343506 374.22171021]
[221.21560669 380.50735474]
[207.30577087 386.11724854]
[193.13742065 391.03784180]
[178.74468994 395.25729370]
[164.16226196 398.76547241]
[149.42526245 401.55389404]
[134.56918335 403.61584473]
[119.62983704 404.94635010]
[104.64319611 405.54220581]
[89.64537048 405.40200806]
[74.67248535 404.52606201]
[59.76062012 402.91647339]
[44.94569397 400.57714844]
[30.26339912 397.51370239]
[15.74910545 393.73352051]
[1.43777955 389.24572754]
[-12.63610172 384.06109619]
[-26.43863487 378.19216919]
[-39.93656540 371.65301514]
[-53.09737778 364.45944214]
[-65.88936615 356.62875366]
[-78.28170776 348.17984009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
] def

init

% Start Annotations
6 47 0.0 1 colorpair
7 46 0.0 1 colorpair
8 45 0.0 1 colorpair
9 44 0.0 1 colorpair
10 43 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
