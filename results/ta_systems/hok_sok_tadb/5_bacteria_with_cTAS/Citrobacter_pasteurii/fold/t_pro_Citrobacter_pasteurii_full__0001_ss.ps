%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:17:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__CAUGCUGACAAAAUAUGCCCUUGUGGCAAUUGUAGUGCUGUGUUUCACGGCGCUGGGAUUCACGUUAAUGGUGCGAGAUUCGUUGUGCGAGUUAAGUAUUAAAGAACGUGGUAUGGAGUUUAAAGCUGUUCUCGCUUACGAACCGAAGAA_\
) } def
/len { sequence length } bind def

/coor [
[115.78726959 167.03904724]
[130.08160400 162.49240112]
[144.76112366 165.56945801]
[135.17150879 154.03520203]
[125.58187866 142.50093079]
[115.99225616 130.96667480]
[106.40263367 119.43241882]
[109.28850555 134.15219116]
[116.66208649 147.21475220]
[116.01777649 162.20089722]
[107.55027771 174.58239746]
[93.81813812 180.61799622]
[78.97071838 178.48394775]
[67.49436188 168.82511902]
[62.85680008 154.56001282]
[66.45933533 139.99905396]
[77.21563721 129.54081726]
[84.13165283 116.23033905]
[71.68090057 124.59566498]
[59.23014450 132.96099854]
[46.77939224 141.32632446]
[42.29116058 156.72877502]
[27.39654350 162.68946838]
[13.52141285 154.63587952]
[11.30958271 138.74603271]
[22.45777893 127.20925140]
[38.41406250 128.87557983]
[50.86481476 120.51024628]
[63.31556702 112.14491272]
[75.76631927 103.77958679]
[73.63159943 88.93225861]
[59.32840347 84.41356659]
[45.02520752 79.89487457]
[29.53526878 83.11550140]
[19.73005676 71.90358734]
[5.42686081 67.38489532]
[-8.87633514 62.86619949]
[-23.17953110 58.34750748]
[-37.48272705 53.82881546]
[-51.78592300 49.31011963]
[-66.08911896 44.79142761]
[-80.39231873 40.27273560]
[-94.69551086 35.75404358]
[-108.99871063 31.23534966]
[-125.92349243 32.22933578]
[-131.56387329 16.24114227]
[-117.76192474 6.39520979]
[-104.48001099 16.93215370]
[-90.17681885 21.45084572]
[-75.87361908 25.96953964]
[-61.57042694 30.48823166]
[-47.26723099 35.00692368]
[-32.96403503 39.52561951]
[-18.66083908 44.04431152]
[-4.35764217 48.56300354]
[9.94555378 53.08169556]
[24.24874878 57.60038757]
[38.71562576 54.05655670]
[49.54389954 65.59168243]
[63.84709549 70.11037445]
[78.15029144 74.62906647]
[94.34266663 78.23632050]
[102.30924225 88.74324799]
[108.54046631 75.09877014]
[114.77169037 61.45428848]
[121.00291443 47.80980682]
[127.23413849 34.16532898]
[133.46536255 20.52084923]
[127.04779053 4.27811480]
[134.19487000 -11.28704071]
[150.05989075 -16.78491020]
[156.01148987 -30.55365944]
[161.96308899 -44.32240677]
[167.91468811 -58.09115601]
[173.86630249 -71.85990906]
[179.81790161 -85.62865448]
[174.23493958 -100.17060089]
[180.46684265 -114.04929352]
[194.36477661 -119.28217316]
[200.31637573 -133.05091858]
[206.26797485 -146.81967163]
[212.21957397 -160.58842468]
[218.17118835 -174.35717773]
[224.12278748 -188.12591553]
[230.07438660 -201.89466858]
[230.80889893 -218.83270264]
[247.28831482 -222.81581116]
[255.67771912 -208.08303833]
[243.84313965 -195.94306946]
[237.89152527 -182.17431641]
[231.93992615 -168.40556335]
[225.98832703 -154.63682556]
[220.03672791 -140.86807251]
[214.08512878 -127.09931946]
[208.13352966 -113.33057404]
[213.84388733 -99.62191772]
[208.00425720 -85.57366180]
[193.58663940 -79.67705536]
[187.63504028 -65.90830231]
[181.68344116 -52.13955688]
[175.73184204 -38.37080765]
[169.78024292 -24.60205841]
[163.82864380 -10.83331013]
[170.21618652 0.39743942]
[168.93112183 13.44944859]
[160.22088623 23.51374435]
[147.10984802 26.75207329]
[140.87861633 40.39655304]
[134.64739990 54.04103470]
[128.41616821 67.68551636]
[122.18494415 81.32999420]
[115.95372009 94.97447205]
[117.93688965 109.84279633]
[127.52651215 121.37705231]
[137.11613464 132.91131592]
[146.70576477 144.44557190]
[156.29539490 155.97982788]
[167.00962830 166.47769165]
[175.72662354 169.40722656]
[178.87837219 176.14237976]
[190.41262817 185.73200989]
[201.94688416 195.32164001]
[213.48114014 204.91125488]
[231.67344666 207.57502747]
[237.16024780 224.21719360]
[248.88771057 233.56953430]
[260.61517334 242.92187500]
[272.34265137 252.27423096]
[287.63330078 248.99856567]
[301.42791748 256.36355591]
[307.21307373 270.89166260]
[302.25723267 285.72314453]
[288.90036011 293.85507202]
[273.44918823 291.44778442]
[263.19927979 279.63787842]
[262.99032593 264.00170898]
[251.26284790 254.64935303]
[239.53536987 245.29701233]
[227.80789185 235.94465637]
[215.71786499 236.97967529]
[205.86288452 229.23194885]
[203.89152527 216.44551086]
[192.35726929 206.85589600]
[180.82299805 197.26626587]
[169.28874207 187.67665100]
[157.65727234 178.20516968]
[161.03308105 192.82035828]
[156.77824402 207.20425415]
[145.99484253 217.63105774]
[131.47604370 221.39997864]
[116.98259735 217.53479004]
[106.26862335 207.03665161]
[102.10932159 192.62484741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[18 30]
[19 29]
[20 28]
[21 27]
[31 61]
[32 60]
[33 59]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[118 146]
[120 145]
[121 144]
[122 143]
[123 142]
[125 139]
[126 138]
[127 137]
[128 136]
] def

init

% Start Annotations
3 117 0.0 1 colorpair
4 116 0.0 1 colorpair
5 115 0.0 1 colorpair
6 114 0.0 1 colorpair
7 113 0.0 1 colorpair
18 30 0.0 1 colorpair
19 29 0.0 1 colorpair
20 28 0.0 1 colorpair
21 27 0.0 1 colorpair
31 61 0.0 1 colorpair
32 60 0.0 1 colorpair
33 59 0.0 1 colorpair
35 57 0.0 1 colorpair
36 56 0.0 1 colorpair
37 55 0.0 1 colorpair
38 54 0.0 1 colorpair
39 53 0.0 1 colorpair
40 52 0.0 1 colorpair
41 51 0.0 1 colorpair
42 50 0.0 1 colorpair
43 49 0.0 1 colorpair
44 48 0.0 1 colorpair
63 112 0.0 1 colorpair
64 111 0.0 1 colorpair
65 110 0.0 1 colorpair
66 109 0.0 1 colorpair
67 108 0.0 1 colorpair
68 107 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
74 100 0.0 1 colorpair
75 99 0.0 1 colorpair
76 98 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
118 146 0.0 1 colorpair
120 145 0.0 1 colorpair
121 144 0.0 1 colorpair
122 143 0.0 1 colorpair
123 142 0.0 1 colorpair
125 139 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
