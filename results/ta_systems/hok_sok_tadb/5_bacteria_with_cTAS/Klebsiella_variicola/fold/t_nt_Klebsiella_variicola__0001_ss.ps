%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:14:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
G_UAAGAGGCUAUUCUGAUGUUGUCUAGGCAUACAGGGGGCCUCGUGG__GU____UAAUGAAAAUUA______UACGGGGCUUUCUUCUUUCUGCC_CACA_________CAAA_CACC_________UGAGGCA_AAAGCCUCAAGCGCC__C_________\
) } def
/len { sequence length } bind def

/coor [
[250.77871704 120.15161896]
[234.11987305 109.31360626]
[218.34243774 97.22784424]
[203.53965759 83.96571350]
[189.79902649 69.60552979]
[177.20178223 54.23210526]
[164.98313904 62.93295670]
[152.76451111 71.63381195]
[140.54586792 80.33466339]
[128.32722473 89.03552246]
[116.10858917 97.73637390]
[113.47615051 109.11064911]
[103.90200043 115.79192352]
[92.31788635 114.33860779]
[79.93580627 122.80525208]
[67.55372620 131.27189636]
[60.00043488 148.04261780]
[42.48484039 148.74484253]
[30.26620293 157.44569397]
[18.04756355 166.14656067]
[5.82892370 174.84741211]
[4.77009106 190.44909668]
[-6.10679913 201.68418884]
[-21.66601181 203.24781799]
[-34.56096268 194.40167236]
[-38.70304871 179.32264709]
[-32.13650894 165.13058472]
[-17.96185493 158.52655029]
[-2.87192988 162.62876892]
[9.34670925 153.92791748]
[21.56534958 145.22706604]
[33.78398895 136.52621460]
[36.11177444 124.62680054]
[46.25953674 117.28289795]
[59.08708191 118.88982391]
[71.46916199 110.42317963]
[83.85123444 101.95652771]
[90.69087219 86.66018677]
[107.40773010 85.51773071]
[119.62637329 76.81687927]
[131.84501648 68.11602783]
[144.06364441 59.41517258]
[156.28228760 50.71431732]
[168.50093079 42.01346588]
[161.66783142 31.23486900]
[155.37490845 20.13230515]
[149.63746643 8.73282623]
[144.46951294 -2.93579960]
[139.88360596 -14.84514427]
[135.89091492 -26.96619415]
[132.50115967 -39.26942062]
[129.72259521 -51.72485733]
[127.56197357 -64.30215454]
[126.02456665 -76.97067261]
[125.11411285 -89.69956207]
[124.83280945 -102.45780182]
[125.18135071 -115.21432495]
[126.15886688 -127.93804932]
[127.76298523 -140.59797668]
[129.98977661 -153.16328430]
[132.83383179 -165.60336304]
[136.28819275 -177.88789368]
[140.34445190 -189.98695374]
[144.99272156 -201.87109375]
[150.22167969 -213.51135254]
[156.01856995 -224.87937927]
[162.36927795 -235.94747925]
[169.25831604 -246.68870544]
[176.66889954 -257.07687378]
[184.58297729 -267.08673096]
[192.98127747 -276.69384766]
[201.84330750 -285.87484741]
[211.14750671 -294.60736084]
[220.87118530 -302.87011719]
[230.99066162 -310.64300537]
[241.48127747 -317.90710449]
[252.31747437 -324.64471436]
[263.47283936 -330.83941650]
[274.92022705 -336.47610474]
[286.63174438 -341.54113770]
[298.57882690 -346.02209473]
[310.73239136 -349.90811157]
[323.06286621 -353.18969727]
[335.54013062 -355.85891724]
[348.13385010 -357.90921021]
[360.81335449 -359.33566284]
[373.54769897 -360.13473511]
[386.30593872 -360.30450439]
[399.05691528 -359.84457397]
[411.76962280 -358.75607300]
[424.41308594 -357.04168701]
[436.95648193 -354.70553589]
[449.36929321 -351.75335693]
[461.62124634 -348.19232178]
[473.68252563 -344.03115845]
[485.52371216 -339.27993774]
[497.11602783 -333.95031738]
[508.43118286 -328.05523682]
[519.44165039 -321.60906982]
[530.12060547 -314.62753296]
[540.44201660 -307.12762451]
[550.38073730 -299.12762451]
[559.91265869 -290.64703369]
[569.01440430 -281.70651245]
[577.66394043 -272.32785034]
[585.84014893 -262.53387451]
[593.52313232 -252.34844971]
[600.69415283 -241.79641724]
[607.33575439 -230.90345764]
[613.43176270 -219.69613647]
[618.96740723 -208.20173645]
[623.92907715 -196.44825745]
[628.30480957 -184.46434021]
[632.08386230 -172.27919006]
[635.25708008 -159.92247009]
[637.81677246 -147.42428589]
[639.75665283 -134.81510925]
[641.07202148 -122.12562561]
[641.75970459 -109.38676453]
[641.81799316 -96.62954712]
[641.24676514 -83.88505554]
[640.04736328 -71.18434143]
[638.22283936 -58.55832672]
[635.77758789 -46.03777695]
[632.71752930 -33.65318680]
[629.05017090 -21.43472862]
[624.78442383 -9.41215992]
[619.93066406 2.38523507]
[614.50079346 13.92871952]
[608.50799561 25.19017601]
[621.35321045 32.93613815]
[634.19848633 40.68210220]
[647.04370117 48.42806244]
[659.88891602 56.17402267]
[672.73419189 63.91998672]
[688.58978271 61.47475433]
[700.28924561 72.45211029]
[698.85772705 88.43116760]
[685.39337158 97.15415955]
[670.22485352 91.92955780]
[664.98822021 76.76522064]
[652.14300537 69.01925659]
[639.29772949 61.27329636]
[626.45251465 53.52733612]
[613.60729980 45.78137589]
[600.76202393 38.03541183]
[589.38256836 54.32101822]
[576.78558350 69.68471527]
[563.04547119 84.03570557]
[548.24346924 97.28916168]
[532.46691895 109.36673737]
[515.80902100 120.19702148]
[498.36819458 129.71600342]
[480.24743652 137.86737061]
[461.55377197 144.60293579]
[442.39767456 149.88284302]
[422.89230347 153.67585754]
[403.15286255 155.95950317]
[383.29602051 156.72024536]
[363.43905640 155.95353699]
[343.69931030 153.66384888]
[324.19342041 149.86468506]
[305.03665161 144.57841492]
[286.34219360 137.83622742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[14 37]
[15 36]
[16 35]
[18 32]
[19 31]
[20 30]
[21 29]
[130 146]
[131 145]
[132 144]
[133 143]
[134 142]
[135 141]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
11 39 0.32 0.6 colorpair
14 37 0.48 0.6 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
18 32 0.32 0.6 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.32 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 39 1 gmark
11 cmark
39 cmark
14 37 1 gmark
14 cmark
37 cmark
35 cmark
18 32 1 gmark
18 cmark
32 cmark
21 29 2 gmark
21 cmark
29 cmark
130 146 3 gmark
131 145 3 gmark
132 144 3 gmark
133 143 3 gmark
134 142 3 gmark
134 cmark
142 cmark
135 141 3 gmark

% End Annotations
showpage
end
%%EOF
