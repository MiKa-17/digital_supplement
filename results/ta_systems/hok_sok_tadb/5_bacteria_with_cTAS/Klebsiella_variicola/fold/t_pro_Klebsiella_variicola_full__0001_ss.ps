%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:14:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________________UAAUGCCGCAAAAUAAUCUGUUGUGGCGCUUAUUA_UAAUCUGUUUCACGAUAUUGGUAUUGACCUGGUUGGUGCGCAACUCGCUAUGCGAACUACGGAUCAGGGAG___GGAAAUAUUGAGCUGGAGGCUUUUCUAGCUUACGAAUCUAA___AAA_\
) } def
/len { sequence length } bind def

/coor [
[144.23425293 496.22161865]
[129.29907227 497.60507202]
[114.32243347 498.42578125]
[99.32552338 498.68255615]
[84.32956696 498.37506104]
[69.35578918 497.50366211]
[54.42538452 496.06967163]
[39.55948639 494.07510376]
[24.77913475 491.52273560]
[10.10524940 488.41622925]
[-4.44139957 484.75997925]
[-18.84022331 480.55911255]
[-33.07084274 475.81961060]
[-47.11311722 470.54821777]
[-60.94716644 464.75231934]
[-74.55341339 458.44015503]
[-87.91259766 451.62066650]
[-101.00582123 444.30349731]
[-113.81453705 436.49902344]
[-126.32062531 428.21823120]
[-138.50637817 419.47293091]
[-150.35455322 410.27542114]
[-161.84838867 400.63876343]
[-172.97158813 390.57656860]
[-183.70845032 380.10311890]
[-194.04373169 369.23321533]
[-203.96284485 357.98223877]
[-213.45172119 346.36608887]
[-222.49694824 334.40127563]
[-231.08572388 322.10467529]
[-239.20587158 309.49371338]
[-246.84591675 296.58624268]
[-253.99505615 283.40051270]
[-260.64312744 269.95520020]
[-266.78076172 256.26934814]
[-272.39926147 242.36230469]
[-277.49069214 228.25376892]
[-282.04779053 213.96369934]
[-286.06414795 199.51232910]
[-289.53408813 184.92010498]
[-292.45269775 170.20768738]
[-294.81582642 155.39590454]
[-296.62011719 140.50572205]
[-297.86306763 125.55819702]
[-298.54287720 110.57450104]
[-298.65856934 95.57583618]
[-298.21005249 80.58343506]
[-297.19787598 65.61851501]
[-295.62353516 50.70225906]
[-293.48919678 35.85577774]
[-290.79794312 21.10008621]
[-287.55358887 6.45606756]
[-283.76065063 -8.05555058]
[-279.42456055 -22.41422653]
[-274.55142212 -36.59963989]
[-269.14816284 -50.59171295]
[-263.22244263 -64.37063599]
[-256.78259277 -77.91691589]
[-249.83775330 -91.21137238]
[-242.39776611 -104.23519135]
[-234.47314453 -116.96994019]
[-226.07511902 -129.39759827]
[-217.21557617 -141.50054932]
[-207.90704346 -153.26170349]
[-198.16270447 -164.66438293]
[-187.99635315 -175.69247437]
[-177.42237854 -186.33033752]
[-166.45573425 -196.56294250]
[-155.11196899 -206.37579346]
[-143.40710449 -215.75500488]
[-131.35772705 -224.68730164]
[-118.98089600 -233.16003418]
[-106.29412079 -241.16122437]
[-93.31535339 -248.67953491]
[-80.06297302 -255.70431519]
[-66.55574036 -262.22564697]
[-52.81275558 -268.23431396]
[-38.85348892 -273.72174072]
[-24.69768906 -278.68023682]
[-10.36539268 -283.10275269]
[4.12311268 -286.98303223]
[18.74732018 -290.31558228]
[33.48653412 -293.09567261]
[48.31988907 -295.31936646]
[63.22639084 -296.98355103]
[78.18494415 -298.08584595]
[93.17436981 -298.62469482]
[108.17345428 -298.59933472]
[123.16098022 -298.00979614]
[138.11570740 -296.85693359]
[153.01651001 -295.14236450]
[167.84225464 -292.86849976]
[182.57197571 -290.03860474]
[197.18484497 -286.65661621]
[211.66014099 -282.72738647]
[225.97740173 -278.25643921]
[240.11634827 -273.25012207]
[254.05699158 -267.71548462]
[267.77957153 -261.66040039]
[281.26467896 -255.09344482]
[294.49322510 -248.02388000]
[307.44650269 -240.46173096]
[320.10614014 -232.41769409]
[332.45425415 -223.90315247]
[344.47335815 -214.93016052]
[356.14645386 -205.51142883]
[367.45697021 -195.66027832]
[378.38894653 -185.39065552]
[388.92691040 -174.71710205]
[399.05590820 -163.65470886]
[408.76162720 -152.21913147]
[418.03033447 -140.42657471]
[426.84890747 -128.29373169]
[435.20486450 -115.83775330]
[443.08636475 -103.07627869]
[450.48229980 -90.02738190]
[457.38214111 -76.70951843]
[463.77612305 -63.14154053]
[469.65527344 -49.34265518]
[475.01116943 -35.33239365]
[479.83630371 -21.13058472]
[484.12384033 -6.75732803]
[487.86764526 7.76703167]
[491.06250000 22.42193604]
[493.70385742 37.18664551]
[495.78796387 52.04025650]
[497.31185913 66.96175385]
[498.27340698 81.93000793]
[498.67126465 96.92384338]
[498.50485229 111.92202759]
[497.77438354 126.90334320]
[496.48089600 141.84657288]
[494.62625122 156.73057556]
[492.21307373 171.53428650]
[489.24472046 186.23674011]
[485.72546387 200.81715393]
[481.66027832 215.25485229]
[477.05487061 229.52943420]
[471.91577148 243.62066650]
[466.25027466 257.50863647]
[460.06640625 271.17367554]
[453.37289429 284.59640503]
[446.17922974 297.75790405]
[438.49557495 310.63946533]
[430.33282471 323.22290039]
[421.70254517 335.49038696]
[412.61691284 347.42456055]
[424.20156860 356.95324707]
[435.78619385 366.48193359]
[451.12466431 363.43795776]
[464.80627441 371.01077271]
[470.37100220 385.62472534]
[465.19134521 400.37957764]
[451.71301270 408.30850220]
[436.30001831 405.66772461]
[426.22991943 393.70413208]
[426.25753784 378.06658936]
[414.67288208 368.53790283]
[403.08822632 359.00921631]
[393.13110352 370.22656250]
[382.75909424 381.06146240]
[371.98684692 391.49853516]
[360.82968140 401.52301025]
[349.30331421 411.12072754]
[337.42407227 420.27807617]
[325.20880127 428.98211670]
[312.67477417 437.22052002]
[299.83972168 444.98162842]
[286.72180176 452.25445557]
[273.33963013 459.02871704]
[259.71209717 465.29479980]
[245.85852051 471.04385376]
[231.79849243 476.26773071]
[217.55191040 480.95904541]
[203.13896179 485.11114502]
[188.58001709 488.71817017]
[173.89570618 491.77502441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[147 159]
[148 158]
[149 157]
] def

init

% Start Annotations
147 159 0.48 0.6 colorpair
148 158 0.0 0.2 colorpair
149 157 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
147 159 1 gmark
147 cmark
159 cmark
148 158 2 gmark
149 157 1 gmark
149 cmark

% End Annotations
showpage
end
%%EOF
