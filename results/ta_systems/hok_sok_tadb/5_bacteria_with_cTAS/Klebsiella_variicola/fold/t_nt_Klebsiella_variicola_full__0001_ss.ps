%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:14:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAUUCUGAUGUUGUUUAGGCAUA_GGGGGGCCUCGUGG___U____UGAUUAAUAUCA______GGUGGGGCUUUUCUCUGUCUGUCUCCCG_________CUGAAUACC_________UGAGACACACAGUCUCAAGCACCCGC_________\
) } def
/len { sequence length } bind def

/coor [
[229.08444214 108.16166687]
[217.67320251 98.42131805]
[206.75363159 88.13277435]
[196.35205078 77.32083130]
[186.49351501 66.01152039]
[177.20178223 54.23210526]
[164.98313904 62.93295670]
[152.76451111 71.63381195]
[140.54586792 80.33466339]
[128.32722473 89.03552246]
[116.10858917 97.73637390]
[113.47615051 109.11064911]
[103.90200043 115.79192352]
[92.31788635 114.33860779]
[79.93580627 122.80525208]
[67.55372620 131.27189636]
[60.00043488 148.04261780]
[42.48484039 148.74484253]
[30.26620293 157.44569397]
[18.04756355 166.14656067]
[18.88432121 181.55120850]
[11.24000645 194.95150757]
[-2.44610977 202.07145691]
[-17.80683708 200.63912964]
[-29.94062424 191.11154175]
[-34.97562027 176.52894592]
[-31.30518150 161.54457092]
[-20.10052872 150.93988037]
[-4.93702459 148.09880066]
[9.34670925 153.92791748]
[21.56534958 145.22706604]
[33.78398895 136.52621460]
[36.11177444 124.62680054]
[46.25953674 117.28289795]
[59.08708191 118.88982391]
[71.46916199 110.42317963]
[83.85123444 101.95652771]
[90.69087219 86.66018677]
[107.40773010 85.51773071]
[119.62637329 76.81687927]
[131.84501648 68.11602783]
[144.06364441 59.41517258]
[156.28228760 50.71431732]
[168.50093079 42.01346588]
[160.40840149 29.38009644]
[152.94551086 16.36486435]
[146.13023376 2.99912214]
[139.97898865 -10.68493080]
[134.50660706 -24.65432739]
[129.72625732 -38.87541580]
[125.64947510 -53.31393433]
[122.28605652 -67.93510437]
[119.64412689 -82.70368958]
[117.73003387 -97.58412170]
[116.54840088 -112.54055023]
[116.10206604 -127.53694916]
[116.39210510 -142.53718567]
[117.41783142 -157.50511169]
[119.17675781 -172.40467834]
[121.66465759 -187.19999695]
[124.87552643 -201.85542297]
[128.80165100 -216.33563232]
[133.43354797 -230.60575867]
[138.76007080 -244.63142395]
[144.76837158 -258.37884521]
[151.44400024 -271.81488037]
[158.77087402 -284.90716553]
[166.73132324 -297.62417603]
[175.30618286 -309.93524170]
[184.47477722 -321.81076050]
[194.21504211 -333.22207642]
[204.50350952 -344.14172363]
[215.31536865 -354.54339600]
[226.62460327 -364.40200806]
[238.40396118 -373.69384766]
[250.62504578 -382.39648438]
[263.25842285 -390.48898315]
[276.27368164 -397.95184326]
[289.63943481 -404.76708984]
[303.32351685 -410.91827393]
[317.29290771 -416.39062500]
[331.51400757 -421.17092896]
[345.95254517 -425.24771118]
[360.57373047 -428.61108398]
[375.34231567 -431.25296021]
[390.22274780 -433.16702271]
[405.17919922 -434.34863281]
[420.17559814 -434.79492188]
[435.17581177 -434.50485229]
[450.14373779 -433.47909546]
[465.04330444 -431.72012329]
[479.83862305 -429.23217773]
[494.49404907 -426.02127075]
[508.97424316 -422.09512329]
[523.24438477 -417.46319580]
[537.27001953 -412.13662720]
[551.01739502 -406.12829590]
[564.45343018 -399.45260620]
[577.54571533 -392.12573242]
[590.26269531 -384.16525269]
[602.57373047 -375.59036255]
[614.44921875 -366.42172241]
[625.86053467 -356.68142700]
[636.78015137 -346.39294434]
[647.18176270 -335.58105469]
[657.04040527 -324.27178955]
[666.33215332 -312.49243164]
[675.03479004 -300.27130127]
[683.12725830 -287.63790894]
[690.59008789 -274.62261963]
[697.40527344 -261.25686646]
[703.55645752 -247.57276917]
[709.02874756 -233.60334778]
[713.80902100 -219.38223267]
[717.88574219 -204.94369507]
[721.24908447 -190.32250977]
[723.89099121 -175.55390930]
[725.80499268 -160.67346191]
[726.98657227 -145.71702576]
[727.43280029 -130.72064209]
[727.14270020 -115.72040558]
[726.11688232 -100.75247955]
[724.35791016 -85.85292053]
[721.86993408 -71.05760956]
[718.65899658 -56.40221024]
[714.73278809 -41.92201233]
[710.10083008 -27.65190697]
[704.77423096 -13.62627029]
[698.76586914 0.12110770]
[692.09014893 13.55710888]
[684.76324463 26.64936256]
[676.80267334 39.36633301]
[668.22778320 51.67737961]
[659.05914307 63.55284500]
[649.31878662 74.96411896]
[639.03027344 85.88371277]
[628.21838379 96.28531647]
[616.90905762 106.14387512]
[605.12969971 115.43564606]
[592.90856934 124.13822937]
[580.27514648 132.23066711]
[567.25982666 139.69346619]
[553.89404297 146.50863647]
[540.20996094 152.65977478]
[526.24053955 158.13204956]
[512.01940918 162.91229248]
[497.58084106 166.98896790]
[482.95965576 170.35227966]
[468.19104004 172.99409485]
[453.31057739 174.90808105]
[438.35415649 176.08959961]
[423.35775757 176.53582764]
[408.35751343 176.24566650]
[393.38961792 175.21983337]
[378.49005127 173.46080017]
[363.69476318 170.97279358]
[349.03936768 167.76181030]
[334.55917358 163.83558655]
[320.28906250 159.20358276]
[306.26345825 153.87695312]
[292.51608276 147.86854553]
[279.08010864 141.19281006]
[265.98785400 133.86584473]
[253.27091980 125.90530396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[14 37]
[15 36]
[16 35]
[18 32]
[19 31]
[20 30]
] def

init

% Start Annotations
6 44 0.0 1 colorpair
7 43 0.0 1 colorpair
8 42 0.0 1 colorpair
9 41 0.0 1 colorpair
10 40 0.0 1 colorpair
15 36 0.0 1 colorpair
16 35 0.16 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 39 4 gmark
11 cmark
39 cmark
14 37 6 gmark
14 cmark
37 cmark
35 cmark
18 32 6 gmark
18 cmark
32 cmark

% End Annotations
showpage
end
%%EOF
