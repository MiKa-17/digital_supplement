%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:16:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUAUGCUACGAAAGACCGCCCUAAUGGGCUUGGUUGUUAUUUGUGUAACGAUCUUGUGUUUUACAUGGAUGGUACGUGAUUCGCUCUGCGAACUCCAAAUCAAAGAUGGACAAACACUAUUUCUGGCAACGCUAGCCUACGAAGUUAAGU\
) } def
/len { sequence length } bind def

/coor [
[111.86064148 293.88464355]
[116.77552032 279.64883423]
[124.63615417 266.80264282]
[135.07489014 255.94691467]
[147.60348511 247.58938599]
[142.15086365 233.61550903]
[136.69824219 219.64164734]
[131.24562073 205.66778564]
[125.79299927 191.69390869]
[120.39755249 186.57357788]
[120.37537384 177.37448120]
[115.21271515 163.29092407]
[110.05005646 149.20735168]
[104.88739777 135.12377930]
[98.25166321 135.41905212]
[91.67726135 134.47171021]
[85.39485168 132.31495667]
[79.62484741 129.02445984]
[74.56968689 124.71569061]
[61.84531403 132.65863037]
[49.12094116 140.60157776]
[36.39657211 148.54452515]
[29.17281723 163.26693726]
[12.79494858 164.10208130]
[4.11111259 150.19082642]
[12.05449581 135.84387207]
[28.45362663 135.82015991]
[41.17799759 127.87721252]
[53.90236664 119.93426514]
[66.62673950 111.99131775]
[65.43335724 107.91918945]
[64.73491669 103.73366547]
[64.54141998 99.49468231]
[49.92741776 96.11370850]
[35.31341934 92.73272705]
[20.69942093 89.35174561]
[6.08542061 85.97077179]
[-8.52857876 82.58979034]
[-23.14257812 79.20881653]
[-37.75658035 75.82783508]
[-52.37057877 72.44685364]
[-67.88886261 77.74920654]
[-80.06029510 66.75883484]
[-76.36395264 50.78169632]
[-60.60231018 46.25369644]
[-48.98960114 57.83285904]
[-34.37559891 61.21383667]
[-19.76160049 64.59481049]
[-5.14760065 67.97579193]
[9.46639919 71.35677338]
[24.08039856 74.73774719]
[38.69439697 78.11872864]
[53.30839920 81.49970245]
[67.92239380 84.88068390]
[78.08599854 72.11913300]
[92.88755798 65.25839233]
[109.19441986 65.75048828]
[116.05946350 52.41365433]
[122.92451477 39.07682037]
[129.78956604 25.73998833]
[136.65460205 12.40315342]
[143.51965332 -0.93368012]
[137.87153625 -17.45824432]
[145.73898315 -32.67045212]
[161.84236145 -37.42040634]
[168.43031311 -50.89627075]
[175.01824951 -64.37213135]
[167.91505432 -78.04147339]
[170.19613647 -93.09636688]
[180.77952576 -103.79478455]
[195.45748901 -106.18126678]
[202.04544067 -119.65712738]
[208.63339233 -133.13299561]
[215.22134399 -146.60885620]
[205.22622681 -158.02697754]
[200.37719727 -172.36329651]
[201.38366699 -187.42320251]
[208.06117249 -200.91387939]
[219.36428833 -210.79336548]
[233.55009460 -215.57965088]
[248.44692993 -214.57287598]
[255.03486633 -228.04873657]
[261.62283325 -241.52461243]
[268.21075439 -255.00047302]
[274.79870605 -268.47634888]
[276.32324219 -285.36160278]
[292.97064209 -288.57098389]
[300.66305542 -273.46258545]
[288.27459717 -261.88839722]
[281.68664551 -248.41252136]
[275.09869385 -234.93666077]
[268.51074219 -221.46080017]
[261.92279053 -207.98492432]
[271.86709595 -196.84761047]
[276.80316162 -182.71322632]
[275.94934082 -167.72537231]
[269.40472412 -154.16972351]
[258.13851929 -144.12550354]
[243.84683228 -139.14651489]
[228.69720459 -140.02090454]
[222.10925293 -126.54504395]
[215.52130127 -113.06917572]
[208.93334961 -99.59331512]
[216.06547546 -86.54452515]
[214.12338257 -71.62165070]
[203.64402771 -60.57464218]
[188.49412537 -57.78418732]
[181.90617371 -44.30832291]
[175.31822205 -30.83245659]
[181.17486572 -19.31403351]
[179.28025818 -6.33474970]
[170.10678101 3.31157970]
[156.85649109 5.93136597]
[149.99143982 19.26819992]
[143.12638855 32.60503387]
[136.26135254 45.94186783]
[129.39630127 59.27870178]
[122.53125763 72.61553955]
[134.33531189 91.13135529]
[132.97465515 113.04756165]
[118.97097015 129.96112061]
[124.13362885 144.04469299]
[129.29629517 158.12826538]
[134.45895386 172.21182251]
[139.76687622 186.24130249]
[145.21948242 200.21516418]
[150.67210388 214.18902588]
[156.12472534 228.16290283]
[161.57734680 242.13676453]
[176.45533752 239.80021667]
[191.48774719 240.71707153]
[205.97149658 244.84445190]
[219.22912598 251.98931885]
[230.64059448 261.81747437]
[239.67211914 273.86926270]
[245.90130615 287.58099365]
[249.03681946 302.31130981]
[248.93196106 317.37130737]
[245.59167480 332.05654907]
[239.17218018 345.68020630]
[229.97372437 357.60507202]
[218.42654419 367.27340698]
[205.07070923 374.23300171]
[190.53091431 378.15832520]
[175.48718262 378.86578369]
[160.64317322 376.32232666]
[146.69314575 370.64688110]
[134.28956604 362.10488892]
[124.01258087 351.09591675]
[116.34285736 338.13485718]
[111.63912964 323.82788086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[11 124]
[12 123]
[13 122]
[14 121]
[19 30]
[20 29]
[21 28]
[22 27]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[57 118]
[58 117]
[59 116]
[60 115]
[61 114]
[62 113]
[65 109]
[66 108]
[67 107]
[71 103]
[72 102]
[73 101]
[74 100]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
5 129 0.0 0.6 colorpair
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.16 1 colorpair
9 125 0.0 1 colorpair
11 124 0.0 1 colorpair
12 123 0.0 1 colorpair
13 122 0.0 1 colorpair
14 121 0.0 1 colorpair
19 30 0.0 1 colorpair
20 29 0.0 1 colorpair
21 28 0.0 1 colorpair
22 27 0.0 1 colorpair
33 54 0.0 1 colorpair
34 53 0.16 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 1 colorpair
38 49 0.0 1 colorpair
39 48 0.0 1 colorpair
40 47 0.0 1 colorpair
41 46 0.0 1 colorpair
57 118 0.0 0.6 colorpair
58 117 0.16 1 colorpair
59 116 0.0 1 colorpair
60 115 0.0 1 colorpair
61 114 0.0 1 colorpair
62 113 0.0 1 colorpair
65 109 0.0 1 colorpair
66 108 0.0 0.6 colorpair
67 107 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
74 100 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.16 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 129 1 gmark
126 cmark
34 cmark
57 118 1 gmark
58 cmark
117 cmark
66 108 1 gmark
84 cmark
90 cmark

% End Annotations
showpage
end
%%EOF
