%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:27:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____CCGCAAAGUUCUGUUAUCUGGUGCCUUGUUAUCGUCUGUCUGACGAUACUGGCAUUCACACUGUUGACCCGCCAUUCGCUUUACGAACUGCGAAUACGGGAUGGUAUCAGGGAGGUUGCGGCAGUUAUGGCUUGUGAGUCCAGC___\
) } def
/len { sequence length } bind def

/coor [
[207.90882874 398.90670776]
[206.90235901 383.84680176]
[211.75138855 369.51049805]
[221.74650574 358.09237671]
[215.15855408 344.61648560]
[208.57060242 331.14062500]
[201.98265076 317.66476440]
[195.39471436 304.18890381]
[188.80676270 290.71304321]
[182.21881104 277.23718262]
[165.99404907 274.93832397]
[154.20246887 263.32162476]
[151.61000061 246.80545044]
[159.42887878 231.84077454]
[152.56382751 218.50393677]
[145.69877625 205.16711426]
[138.83374023 191.83027649]
[126.12944031 184.05529785]
[126.69292450 168.24412537]
[119.82788086 154.90730286]
[112.96282959 141.57046509]
[106.09778595 128.23362732]
[84.41049194 129.12066650]
[65.40685272 113.61869812]
[60.89506149 86.64138031]
[46.09964371 84.17246246]
[31.30422401 81.70354462]
[16.50880432 79.23461914]
[1.71338487 76.76570129]
[-9.25751305 83.62631226]
[-21.56290436 81.22373962]
[-28.67573738 71.39051819]
[-43.41697311 68.61635590]
[-52.49424362 70.10859680]
[-58.43281555 65.62951660]
[-73.11357117 62.55128479]
[-87.79431915 59.47305679]
[-102.47507477 56.39482498]
[-117.15582275 53.31659698]
[-131.83657837 50.23836517]
[-145.99967957 57.77403259]
[-160.66398621 51.26732254]
[-164.58032227 35.70962906]
[-154.74440002 23.03548050]
[-138.70149231 22.96739960]
[-128.75834656 35.55761337]
[-114.07759857 38.63584518]
[-99.39684296 41.71407318]
[-84.71608734 44.79230499]
[-70.03533936 47.87053299]
[-55.35458374 50.94876480]
[-40.64280701 53.87511826]
[-25.90157127 56.64928436]
[-9.71660328 49.93592453]
[4.18230391 61.97028351]
[18.97772408 64.43920135]
[33.77314377 66.90811920]
[48.56856155 69.37703705]
[63.36398315 71.84596252]
[72.45435333 59.91427612]
[66.14631653 46.30513382]
[59.83827972 32.69599533]
[44.91516495 27.49252510]
[38.11766815 13.22474289]
[43.47862244 -1.64252555]
[57.81747437 -8.28879547]
[72.62723541 -2.77095175]
[79.12153625 11.63736629]
[73.44741821 26.38795853]
[79.75545502 39.99709702]
[86.06349182 53.60623550]
[101.05628967 54.07120132]
[108.19549561 40.87909317]
[115.33470917 27.68698883]
[122.47392273 14.49488163]
[119.54727936 1.89078057]
[125.81523132 -8.96775436]
[137.42518616 -12.50235462]
[144.83552551 -25.54409790]
[152.24584961 -38.58584213]
[159.65617371 -51.62758636]
[167.06649780 -64.66932678]
[174.47682190 -77.71107483]
[166.63681030 -90.91826630]
[166.46681213 -106.27621460]
[174.01254272 -119.65371704]
[187.24424744 -127.45228577]
[202.60266113 -127.57414246]
[215.95643616 -119.98651886]
[223.71350098 -106.73043823]
[223.78721619 -91.37171936]
[216.15776062 -78.04178619]
[202.87744141 -70.32632446]
[187.51856995 -70.30074310]
[180.10824585 -57.25900269]
[172.69790649 -44.21725845]
[165.28758240 -31.17551613]
[157.87725830 -18.13377190]
[150.46693420 -5.09202909]
[151.56129456 12.39581680]
[135.66603088 21.63409233]
[128.52680969 34.82619858]
[121.38760376 48.01830673]
[114.24839020 61.21041107]
[131.98387146 81.04778290]
[132.66540527 104.90068817]
[119.43462372 121.36858368]
[126.29966736 134.70541382]
[133.16471863 148.04225159]
[140.02975464 161.37908936]
[153.22508240 170.10800171]
[152.17056274 184.96522522]
[159.03561401 198.30206299]
[165.90066528 211.63890076]
[172.76570129 224.97572327]
[186.54208374 226.06535339]
[197.88189697 233.77239990]
[203.87016296 245.98585510]
[203.03207397 259.45385742]
[195.69467163 270.64923096]
[202.28262329 284.12509155]
[208.87057495 297.60095215]
[215.45852661 311.07681274]
[222.04647827 324.55267334]
[228.63441467 338.02856445]
[235.22236633 351.50442505]
[250.37199402 350.63003540]
[264.66369629 355.60900879]
[275.92990112 365.65322876]
[282.47451782 379.20886230]
[283.32830811 394.19671631]
[278.39227295 408.33111572]
[268.44796753 419.46844482]
[275.03588867 432.94430542]
[281.62384033 446.42016602]
[288.21179199 459.89602661]
[301.22390747 468.89578247]
[299.86254883 483.72805786]
[314.50842285 490.27621460]
[318.38070679 505.84494019]
[308.50897217 518.49121094]
[292.46594238 518.51391602]
[282.55844116 505.89559937]
[286.38668823 490.31600952]
[273.84579468 482.28012085]
[274.73593140 466.48397827]
[268.14797974 453.00811768]
[261.56002808 439.53225708]
[254.97209167 426.05639648]
[240.07525635 427.06317139]
[225.88945007 422.27688599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[9 121]
[10 120]
[14 115]
[15 114]
[16 113]
[17 112]
[19 110]
[20 109]
[21 108]
[22 107]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[32 53]
[33 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[60 71]
[61 70]
[62 69]
[72 104]
[73 103]
[74 102]
[75 101]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[133 149]
[134 148]
[135 147]
[136 146]
[138 144]
] def

init

% Start Annotations
4 126 0.0 0.6 colorpair
5 125 0.0 1 colorpair
6 124 0.0 1 colorpair
7 123 0.0 1 colorpair
8 122 0.0 1 colorpair
9 121 0.0 1 colorpair
10 120 0.0 1 colorpair
14 115 0.0 1 colorpair
15 114 0.0 1 colorpair
16 113 0.0 1 colorpair
17 112 0.0 1 colorpair
19 110 0.0 1 colorpair
20 109 0.0 1 colorpair
21 108 0.0 1 colorpair
22 107 0.0 1 colorpair
25 59 0.0 1 colorpair
26 58 0.0 1 colorpair
27 57 0.0 1 colorpair
28 56 0.0 1 colorpair
29 55 0.0 1 colorpair
32 53 0.0 1 colorpair
33 52 0.0 1 colorpair
35 51 0.0 1 colorpair
36 50 0.0 1 colorpair
37 49 0.0 1 colorpair
38 48 0.0 1 colorpair
39 47 0.0 1 colorpair
40 46 0.0 1 colorpair
60 71 0.0 1 colorpair
61 70 0.0 1 colorpair
62 69 0.0 1 colorpair
72 104 0.0 1 colorpair
73 103 0.0 1 colorpair
74 102 0.0 1 colorpair
75 101 0.0 1 colorpair
78 99 0.0 1 colorpair
79 98 0.0 1 colorpair
80 97 0.0 1 colorpair
81 96 0.0 1 colorpair
82 95 0.0 1 colorpair
83 94 0.0 1 colorpair
133 149 0.0 0.6 colorpair
134 148 0.0 1 colorpair
135 147 0.0 1 colorpair
136 146 0.0 1 colorpair
138 144 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 126 1 gmark
133 149 1 gmark

% End Annotations
showpage
end
%%EOF
