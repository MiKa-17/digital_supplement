%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUGCCAAAACAAAAGACCGCUUUACUAAGCUUGAUCGUUAUUUGUUUAACGUUAUUAGGCUUCACAUGGAUGGUGAGGGACUCACUCUGUAAGCUUCAAGUAAGGAAUGGGAACUCGGUAUUCUUGGCAACACUCGCCUACGAAUCGAGA\
) } def
/len { sequence length } bind def

/coor [
[118.62064362 236.99476624]
[114.33631897 226.41827393]
[114.33721924 214.95547485]
[118.66190338 204.28416443]
[126.71321869 195.98085022]
[121.61488342 181.87385559]
[116.51654053 167.76687622]
[111.41820526 153.65989685]
[106.31986237 139.55291748]
[101.22152710 125.44593811]
[93.94512939 123.62821960]
[90.30946350 138.18095398]
[75.75679016 134.54504395]
[79.39234161 119.99279785]
[72.11594391 118.17508698]
[60.98243332 128.22718811]
[49.84892273 138.27929688]
[38.71540833 148.33142090]
[34.18658829 164.09281921]
[18.20925331 167.78833008]
[7.21951675 155.61631775]
[12.52267933 140.09831238]
[28.66329956 137.19790649]
[39.79681396 127.14579010]
[50.93032455 117.09368134]
[62.06383514 107.04157257]
[60.69456100 99.66762543]
[46.55322647 94.66535950]
[57.95601654 84.91973114]
[56.58674240 77.54578400]
[42.58669281 72.16074371]
[28.58664513 66.77570343]
[14.58659744 61.39066315]
[0.58654988 56.00562286]
[-13.41349792 50.62058258]
[-27.41354561 45.23554230]
[-41.41359329 39.85050201]
[-55.41364288 34.46546173]
[-69.52062225 29.36712265]
[-83.72866821 24.55760574]
[-97.93671417 19.74808884]
[-112.14476013 14.93857098]
[-126.35280609 10.12905407]
[-140.40846252 17.35496902]
[-155.43107605 12.44612312]
[-162.50798035 -1.68515217]
[-157.44058228 -16.65502167]
[-143.23527527 -23.58212852]
[-128.31982422 -18.35674095]
[-121.54328918 -4.07899094]
[-107.33524323 0.73052603]
[-93.12719727 5.54004288]
[-78.91915131 10.34955978]
[-64.71110535 15.15907669]
[-60.05985641 13.85439205]
[-54.54115677 15.50077629]
[-50.02860260 20.46541405]
[-36.02855301 25.85045433]
[-22.02850533 31.23549461]
[-8.02845764 36.62053680]
[5.97159052 42.00557709]
[19.97163773 47.39061737]
[33.97168732 52.77565765]
[47.97173309 58.16069794]
[61.97178268 63.54573822]
[78.11487579 59.80505371]
[92.63696289 61.84943008]
[103.73765564 68.27693939]
[110.32548523 77.19858551]
[112.12502289 86.53688049]
[109.67041016 94.33773804]
[121.20466614 84.74810791]
[132.73892212 75.15848541]
[144.27317810 65.56886292]
[155.80743408 55.97923660]
[161.47256470 41.20707321]
[176.20573425 39.02002335]
[187.73999023 29.43039894]
[199.27424622 19.84077454]
[210.80850220 10.25114918]
[210.49719238 -3.25030470]
[217.92668152 -14.29390049]
[230.18557739 -18.95499611]
[242.69789124 -15.73435307]
[254.42535400 -25.08670044]
[266.15283203 -34.43904877]
[277.88031006 -43.79139328]
[283.84558105 -58.44492722]
[298.62030029 -60.33098602]
[310.34777832 -69.68333435]
[322.07522583 -79.03568268]
[321.08258057 -90.95463562]
[325.94323730 -101.75087738]
[335.33212280 -108.76517487]
[346.82525635 -110.33207703]
[357.52499390 -106.17416382]
[369.62417603 -115.04038239]
[381.72335815 -123.90660095]
[390.92550659 -138.14585876]
[407.15570068 -133.24514771]
[406.93948364 -116.29257965]
[390.58956909 -111.80741882]
[378.49038696 -102.94120026]
[366.39120483 -94.07498932]
[364.73999023 -75.88736725]
[350.10632324 -64.43840790]
[331.42758179 -67.30820465]
[319.70010376 -57.95586014]
[307.97265625 -48.60351181]
[302.84619141 -34.61892319]
[287.23266602 -32.06392288]
[275.50518799 -22.71157455]
[263.77770996 -13.35922813]
[252.05023193 -4.00688076]
[250.90281677 12.74449825]
[237.75508118 23.72137451]
[220.39813232 21.78540802]
[208.86387634 31.37503242]
[197.32962036 40.96465683]
[185.79534912 50.55427933]
[180.95523071 64.64053345]
[165.39706421 67.51349640]
[153.86280823 77.10311890]
[142.32855225 86.69274139]
[130.79429626 96.28237152]
[119.26003265 105.87199402]
[115.32850647 120.34759521]
[120.42684937 134.45457458]
[125.52518463 148.56155396]
[130.62351990 162.66854858]
[135.72186279 176.77552795]
[140.82020569 190.88250732]
[159.36456299 195.35266113]
[171.42926025 209.93545532]
[172.33218384 228.69134521]
[161.89105225 244.11889648]
[167.84265137 257.88763428]
[173.79425049 271.65640259]
[179.74584961 285.42514038]
[194.98458862 287.83020020]
[206.48875427 298.10919189]
[210.58738708 312.98214722]
[205.97265625 327.70315552]
[194.11708069 337.57476807]
[178.80374146 339.44702148]
[164.91908264 332.72247314]
[156.89361572 319.54690552]
[157.28826904 304.12460327]
[165.97709656 291.37673950]
[160.02549744 277.60800171]
[154.07389832 263.83923340]
[148.12229919 250.07049561]
[136.87100220 249.72108459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 132]
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[15 26]
[16 25]
[17 24]
[18 23]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[71 126]
[72 125]
[73 124]
[74 123]
[75 122]
[77 120]
[78 119]
[79 118]
[80 117]
[84 114]
[85 113]
[86 112]
[87 111]
[89 109]
[90 108]
[91 107]
[96 104]
[97 103]
[98 102]
[136 152]
[137 151]
[138 150]
[139 149]
] def

init

% Start Annotations
5 132 0.0 1 colorpair
6 131 0.0 1 colorpair
7 130 0.0 1 colorpair
8 129 0.0 1 colorpair
9 128 0.0 1 colorpair
10 127 0.0 1 colorpair
15 26 0.0 1 colorpair
16 25 0.0 1 colorpair
17 24 0.0 1 colorpair
18 23 0.0 1 colorpair
30 65 0.0 1 colorpair
31 64 0.0 1 colorpair
32 63 0.0 1 colorpair
33 62 0.0 1 colorpair
34 61 0.0 1 colorpair
35 60 0.0 1 colorpair
36 59 0.0 1 colorpair
37 58 0.0 1 colorpair
38 57 0.0 1 colorpair
39 54 0.0 1 colorpair
40 53 0.0 1 colorpair
41 52 0.0 1 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
71 126 0.0 1 colorpair
72 125 0.0 1 colorpair
73 124 0.0 1 colorpair
74 123 0.0 1 colorpair
75 122 0.0 1 colorpair
77 120 0.0 1 colorpair
78 119 0.0 1 colorpair
79 118 0.0 1 colorpair
80 117 0.0 1 colorpair
84 114 0.0 1 colorpair
85 113 0.0 1 colorpair
86 112 0.0 1 colorpair
87 111 0.0 1 colorpair
89 109 0.0 1 colorpair
90 108 0.0 1 colorpair
91 107 0.0 1 colorpair
96 104 0.0 1 colorpair
97 103 0.0 1 colorpair
98 102 0.0 1 colorpair
136 152 0.0 1 colorpair
137 151 0.0 1 colorpair
138 150 0.0 1 colorpair
139 149 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
