%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________ACAAAAGACCGCUUUACUAAGCUUGAUCGUUAUUUGUUUAACGUUAUUAGGCUUCACAUGGAUGGUGAGGGACUCACUCUGUAAGCUUCAAGUAAGGAAUGGGAACUCGGUAUUCUUGGCAACACUCGCCUACGAAUCGAGA\
) } def
/len { sequence length } bind def

/coor [
[169.16157532 295.74609375]
[161.64578247 308.72732544]
[150.96810913 319.26239014]
[137.88697815 326.60293579]
[123.33150482 330.22760010]
[108.33555603 329.87893677]
[93.96427155 325.58172607]
[81.23841858 317.64114380]
[71.06190491 306.62121582]
[64.15754700 293.30471802]
[61.01574326 278.63742065]
[61.85966492 263.66119385]
[66.62936401 249.43972778]
[74.98605347 236.98316956]
[86.33617401 227.17630005]
[99.87354279 220.71566772]
[114.63661194 218.06018066]
[129.57679749 219.39843750]
[143.63290405 224.63539124]
[155.80473328 233.39733887]
[149.57350159 219.75285339]
[143.34228516 206.10836792]
[136.83403015 192.59384155]
[130.05143738 179.21487427]
[123.26886749 165.83592224]
[116.48628998 152.45695496]
[109.70370483 139.07798767]
[102.92112732 125.69902802]
[96.13854980 112.32006836]
[85.00504303 102.26795959]
[71.00498962 96.88291931]
[57.00494385 91.49787903]
[43.00489426 86.11283875]
[29.00484848 80.72779846]
[15.00480080 75.34275818]
[1.00475252 69.95771790]
[-12.99529552 64.57267761]
[-26.99534225 59.18763351]
[-41.10232544 54.08929443]
[-55.31037140 49.27977753]
[-69.51841736 44.47026062]
[-83.72646332 39.66074371]
[-97.93450165 34.85122681]
[-111.99017334 42.07714081]
[-127.01277924 37.16829681]
[-134.08969116 23.03702164]
[-129.02227783 8.06715107]
[-114.81697845 1.14004493]
[-99.90151978 6.36543179]
[-93.12498474 20.64318275]
[-78.91694641 25.45269966]
[-64.70890045 30.26221657]
[-50.50085449 35.07173157]
[-36.29280853 39.88124847]
[-31.64155769 38.57656479]
[-26.12285995 40.22294998]
[-21.61030197 45.18758774]
[-7.61025476 50.57262802]
[6.38979292 55.95766830]
[20.38984108 61.34270859]
[34.38988876 66.72775269]
[48.38993835 72.11279297]
[62.38998413 77.49783325]
[76.39002991 82.88287354]
[90.39008331 88.26791382]
[96.89797974 84.54001617]
[96.94895172 69.54010010]
[109.91378784 77.08422852]
[116.42169189 73.35633087]
[118.85883331 58.55564499]
[121.29597473 43.75495911]
[123.73311615 28.95427132]
[126.17025757 14.15358353]
[124.17053986 7.74952936]
[125.54214478 2.15620184]
[129.02053833 -1.19598091]
[132.05934143 -15.88494301]
[135.09815979 -30.57390594]
[138.13697815 -45.26286697]
[141.17578125 -59.95183182]
[138.46363831 -76.68743896]
[153.79440308 -83.92647552]
[164.99452209 -71.19879913]
[155.86474609 -56.91301727]
[152.82592773 -42.22405624]
[149.78712463 -27.53509331]
[146.74830627 -12.84613037]
[143.70948792 1.84283209]
[140.97094727 16.59072495]
[138.53379822 31.39141273]
[136.09666443 46.19210052]
[133.65951538 60.99278641]
[131.22238159 75.79347229]
[140.45700073 63.97307587]
[154.76025391 68.49158478]
[164.70463562 79.72142792]
[167.45965576 94.46625519]
[162.24118042 108.52923584]
[150.53453064 117.90763092]
[135.67176819 119.93206787]
[121.88400269 114.02689362]
[109.51751709 105.53749084]
[116.30009460 118.91645050]
[123.08267212 132.29541016]
[129.86524963 145.67437744]
[136.64782715 159.05334473]
[143.43040466 172.43229675]
[150.21298218 185.81126404]
[155.61129761 189.79484558]
[157.81106567 195.11723328]
[156.98675537 199.87715149]
[163.21798706 213.52162170]
[169.44920349 227.16610718]
[174.08746338 229.47889709]
[177.37498474 232.97854614]
[179.08451843 237.05686951]
[179.22894287 241.09938049]
[189.94317627 251.59724426]
[200.65740967 262.09512329]
[211.37164307 272.59298706]
[222.08589172 283.09085083]
[232.80012512 293.58871460]
[245.92996216 288.27343750]
[260.05111694 288.37496948]
[273.02322388 293.84475708]
[282.89266968 303.82312012]
[288.18692017 316.77413940]
[288.13412476 330.72201538]
[282.77539062 343.55245972]
[293.27325439 354.26672363]
[303.77111816 364.98095703]
[319.34732056 363.59667969]
[332.13949585 372.59082031]
[336.10757446 387.71655273]
[329.37796021 401.83203125]
[315.12817383 408.27230835]
[300.08648682 403.99652100]
[291.35519409 391.02352905]
[293.05688477 375.47882080]
[282.55902100 364.76458740]
[272.06115723 354.05032349]
[257.05490112 359.46124268]
[241.13186646 357.79455566]
[227.47259521 349.33239746]
[218.82760620 335.71926880]
[216.96351624 319.64276123]
[222.30226135 304.30294800]
[211.58801270 293.80508423]
[200.87377930 283.30722046]
[190.15954590 272.80935669]
[179.44531250 262.31149292]
[168.73107910 251.81361389]
[172.83467102 266.24139404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 113]
[21 112]
[22 111]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[69 93]
[70 92]
[71 91]
[72 90]
[73 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[117 152]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
20 113 0.0 1 colorpair
21 112 0.0 1 colorpair
22 111 0.0 1 colorpair
23 108 0.0 1 colorpair
24 107 0.0 1 colorpair
25 106 0.0 1 colorpair
26 105 0.0 1 colorpair
27 104 0.0 1 colorpair
28 103 0.0 1 colorpair
29 102 0.0 1 colorpair
30 65 0.0 1 colorpair
31 64 0.0 1 colorpair
32 63 0.0 1 colorpair
33 62 0.0 1 colorpair
34 61 0.0 1 colorpair
35 60 0.0 1 colorpair
36 59 0.0 1 colorpair
37 58 0.0 1 colorpair
38 57 0.0 1 colorpair
39 54 0.0 1 colorpair
40 53 0.0 1 colorpair
41 52 0.0 1 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
69 93 0.0 1 colorpair
70 92 0.0 1 colorpair
71 91 0.0 1 colorpair
72 90 0.0 1 colorpair
73 89 0.0 1 colorpair
76 88 0.0 1 colorpair
77 87 0.0 1 colorpair
78 86 0.0 1 colorpair
79 85 0.0 1 colorpair
80 84 0.0 1 colorpair
117 152 0.0 1 colorpair
118 151 0.0 1 colorpair
119 150 0.0 1 colorpair
120 149 0.0 1 colorpair
121 148 0.0 1 colorpair
122 147 0.0 1 colorpair
129 141 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
