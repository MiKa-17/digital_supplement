%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:15:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGCCAAAACGUACUCUGCUGUUAGGUUUGUUGAUGAUCUGUAUGACGUUACUGAUCUUCACCUGGAUGGUUCGCGGCUCGCUGUGUGAGCUGCGAUUCAGACAGAAACAGACAGAGCUGGCGGCAGUGUUAGCUUACGAAGUGAAACGU\
) } def
/len { sequence length } bind def

/coor [
[126.38176727 504.98629761]
[123.64321899 519.73419189]
[129.61924744 535.00567627]
[119.17175293 547.64617920]
[103.04823303 544.65222168]
[97.83517456 529.10369873]
[108.89533234 516.99566650]
[111.63387299 502.24774170]
[108.23795319 493.62115479]
[112.37747192 484.03237915]
[110.85012817 469.11032104]
[109.32278442 454.18829346]
[107.79544067 439.26626587]
[96.11950684 430.08975220]
[94.35798645 414.97845459]
[104.06230927 402.79385376]
[102.53496552 387.87182617]
[93.54195404 375.99853516]
[99.83386230 361.48226929]
[98.30651855 346.56021118]
[96.77917480 331.63818359]
[95.25183105 316.71615601]
[93.72447968 301.79409790]
[92.19713593 286.87207031]
[90.66979218 271.95004272]
[89.14244843 257.02798462]
[87.61510468 242.10595703]
[86.08776093 227.18391418]
[77.09474182 215.31062317]
[83.38665771 200.79434204]
[81.85931396 185.87231445]
[80.33196259 170.95027161]
[78.80461884 156.02822876]
[77.27727509 141.10620117]
[75.74993134 126.18415833]
[67.13236237 113.90663910]
[53.61783218 107.39837646]
[37.82721710 108.38177490]
[29.71743011 95.88854980]
[16.20289803 89.38029480]
[2.68836451 82.87203979]
[-10.82616806 76.36378479]
[-26.61678314 77.34718323]
[-34.72657013 64.85395813]
[-48.24110413 58.34570312]
[-61.75563431 51.83744812]
[-76.58838654 57.29318237]
[-90.89926147 50.58688736]
[-96.19787598 35.69728470]
[-89.34065247 21.45811272]
[-74.39585876 16.31722069]
[-60.22998047 23.32460594]
[-55.24737930 38.32291412]
[-41.73284531 44.83116913]
[-28.21831322 51.33942413]
[-13.39434910 49.89051437]
[-4.31791258 62.84925079]
[9.19662094 69.35750580]
[22.71115303 75.86576080]
[36.22568512 82.37402344]
[51.04965210 80.92510986]
[60.12608719 93.88385010]
[73.64061737 100.39210510]
[78.59931946 87.38571930]
[89.01022339 79.43067932]
[101.23747253 78.23469543]
[107.18907166 64.46594238]
[113.14067078 50.69719696]
[107.55770874 36.15524673]
[113.78961945 22.27656174]
[127.68755341 17.04367638]
[133.63916016 3.27492809]
[139.59075928 -10.49382114]
[137.96409607 -26.23118210]
[150.11613464 -34.84380341]
[156.06773376 -48.61254883]
[162.01934814 -62.38129807]
[167.97094727 -76.15004730]
[173.92254639 -89.91880035]
[179.87414551 -103.68754578]
[185.82574463 -117.45629120]
[191.77734375 -131.22503662]
[197.72894287 -144.99378967]
[203.68055725 -158.76254272]
[209.63215637 -172.53129578]
[210.36666870 -189.46931458]
[226.84608459 -193.45242310]
[235.23548889 -178.71966553]
[223.40089417 -166.57968140]
[217.44929504 -152.81094360]
[211.49769592 -139.04219055]
[205.54609680 -125.27344513]
[199.59449768 -111.50469208]
[193.64289856 -97.73594666]
[187.69129944 -83.96719360]
[181.73968506 -70.19844818]
[175.78808594 -56.42969894]
[169.83648682 -42.66094971]
[163.88488770 -28.89220047]
[165.93724060 -14.13967133]
[153.35949707 -4.54221964]
[147.40789795 9.22652912]
[141.45629883 22.99527740]
[147.16667175 36.70393372]
[141.32704163 50.75218582]
[126.90942383 56.64879990]
[120.95781708 70.41754913]
[115.00621796 84.18629456]
[121.15990448 92.17399597]
[123.19724274 102.40003204]
[120.39745331 112.80064392]
[113.04820251 121.13891602]
[102.44561768 125.48490906]
[90.67196655 124.65681458]
[92.19931793 139.57885742]
[93.72666168 154.50088501]
[95.25400543 169.42292786]
[96.78134918 184.34497070]
[98.30869293 199.26699829]
[107.41095734 212.20761108]
[101.00979614 225.65657043]
[102.53713989 240.57861328]
[104.06448364 255.50064087]
[105.59183502 270.42269897]
[107.11917877 285.34472656]
[108.64652252 300.26675415]
[110.17386627 315.18881226]
[111.70121002 330.11083984]
[113.22855377 345.03286743]
[114.75589752 359.95492554]
[123.85816193 372.89553833]
[117.45700073 386.34448242]
[118.98435211 401.26651001]
[130.95588684 411.23245239]
[132.29226685 426.38729858]
[122.71747589 437.73889160]
[124.24482727 452.66094971]
[125.77217102 467.58297729]
[127.29951477 482.50500488]
[134.37477112 469.27850342]
[145.64427185 459.37908936]
[159.67245483 454.06777954]
[174.67237854 454.02114868]
[188.73332214 459.24514771]
[200.06413269 469.07434082]
[207.22148132 482.25659180]
[209.29362488 497.11279297]
[206.01663208 511.75045776]
[197.80790710 524.30499268]
[185.71313477 533.17724609]
[171.27294922 537.23693848]
[156.32679749 535.96697998]
[142.77857971 529.52917480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 139]
[11 138]
[12 137]
[13 136]
[16 133]
[17 132]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[30 119]
[31 118]
[32 117]
[33 116]
[34 115]
[35 114]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
[46 53]
[66 108]
[67 107]
[68 106]
[71 103]
[72 102]
[73 101]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
1 8 0.0 1 colorpair
2 7 0.0 1 colorpair
10 139 0.0 1 colorpair
11 138 0.0 1 colorpair
12 137 0.0 0.6 colorpair
13 136 0.0 1 colorpair
16 133 0.0 1 colorpair
17 132 0.0 1 colorpair
19 130 0.0 1 colorpair
20 129 0.0 1 colorpair
21 128 0.0 1 colorpair
22 127 0.0 1 colorpair
23 126 0.0 1 colorpair
24 125 0.0 1 colorpair
25 124 0.0 1 colorpair
26 123 0.0 1 colorpair
27 122 0.0 1 colorpair
28 121 0.0 1 colorpair
30 119 0.0 1 colorpair
31 118 0.0 1 colorpair
32 117 0.0 1 colorpair
33 116 0.0 1 colorpair
34 115 0.0 1 colorpair
35 114 0.0 1 colorpair
36 63 0.0 1 colorpair
37 62 0.0 1 colorpair
39 60 0.0 1 colorpair
40 59 0.0 1 colorpair
41 58 0.0 1 colorpair
42 57 0.0 1 colorpair
44 55 0.0 1 colorpair
45 54 0.0 1 colorpair
46 53 0.0 1 colorpair
66 108 0.0 1 colorpair
67 107 0.0 1 colorpair
68 106 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
75 99 0.0 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 137 1 gmark

% End Annotations
showpage
end
%%EOF
