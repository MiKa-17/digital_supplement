%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACCUGAUGUUGU_U_AGACAUUCAGAGUGGCCUCGGGUUGAUA_AUAUCGACUCGGGGCCUUUCUCUUUCUAUC_________\
) } def
/len { sequence length } bind def

/coor [
[73.26777649 161.30155945]
[65.76777649 174.29194641]
[58.26778030 187.28233337]
[58.06839371 203.10227966]
[45.00405884 210.25576782]
[37.50405884 223.24615479]
[34.82077408 239.98640442]
[17.99192429 242.04216003]
[11.35782623 226.44006348]
[24.51367569 215.74615479]
[32.01367569 202.75576782]
[31.67661285 187.86497498]
[45.27739716 179.78233337]
[52.77739716 166.79194641]
[60.27739716 153.80155945]
[40.51209641 130.55622864]
[33.13004684 100.95017242]
[18.20227623 99.47991943]
[3.27450609 98.00965881]
[-11.65326500 96.53940582]
[-26.58103561 95.06914520]
[-41.50880814 93.59888458]
[-53.56515121 103.81750488]
[-69.30883789 102.43478394]
[-79.39941406 90.27108002]
[-77.85032654 74.54289246]
[-65.58061218 64.58148193]
[-49.86968231 66.29677582]
[-40.03855133 78.67111969]
[-25.11077881 80.14137268]
[-10.18300819 81.61163330]
[4.74476290 83.08188629]
[19.67253494 84.55214691]
[34.60030365 86.02239990]
[40.32338333 69.81400299]
[49.98886871 55.59977341]
[62.95823669 44.31875229]
[78.37469482 36.71619797]
[95.21977997 33.29435730]
[112.38066101 34.27928162]
[128.72363281 39.60591125]
[136.64465332 26.86787796]
[144.56567383 14.12984562]
[152.48669434 1.39181328]
[160.40771484 -11.34621906]
[168.32872009 -24.08425140]
[176.24974060 -36.82228470]
[184.17076111 -49.56031799]
[192.09178162 -62.29835129]
[200.01280212 -75.03638458]
[207.93382263 -87.77441406]
[215.85482788 -100.51245117]
[223.77584839 -113.25048065]
[231.69686890 -125.98851013]
[231.69235229 -142.38766479]
[246.02558899 -150.35574341]
[259.95178223 -141.69587708]
[259.14483643 -125.31659698]
[244.43490601 -118.06749725]
[236.51388550 -105.32946014]
[228.59286499 -92.59143066]
[220.67184448 -79.85340118]
[212.75082397 -67.11536407]
[204.82981873 -54.37733078]
[196.90879822 -41.63930130]
[188.98777771 -28.90126801]
[181.06675720 -16.16323471]
[173.14573669 -3.42520165]
[165.22473145 9.31283092]
[157.30371094 22.05086327]
[149.38269043 34.78889465]
[141.46166992 47.52692795]
[147.22616577 52.64830399]
[152.36282349 58.39917755]
[156.80335999 64.70310211]
[160.48875427 71.47625732]
[163.37001038 78.62861633]
[165.40879822 86.06509399]
[166.57804871 93.68682098]
[166.86219788 101.39247131]
[166.25747681 109.07961273]
[164.77192688 116.64604950]
[162.42527771 123.99118805]
[159.24874878 131.01739502]
[155.28456116 137.63124084]
[150.58541870 143.74481201]
[145.21377563 149.27684021]
[139.24105835 154.15377808]
[132.74667358 158.31079102]
[125.81694794 161.69261169]
[118.54400635 164.25428772]
[111.02453613 165.96174622]
[103.35851288 166.79231262]
[95.64783478 166.73493958]
[87.99501801 165.79037476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[5 11]
[6 10]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% Start Annotations
1 15 0.0 1 colorpair
2 14 0.0 1 colorpair
3 13 0.16 1 colorpair
5 11 0.0 1 colorpair
6 10 0.0 1 colorpair
17 34 0.16 1 colorpair
18 33 0.0 1 colorpair
19 32 0.16 1 colorpair
20 31 0.0 1 colorpair
21 30 0.16 1 colorpair
22 29 0.0 1 colorpair
41 72 0.16 1 colorpair
42 71 0.0 1 colorpair
43 70 0.0 1 colorpair
44 69 0.0 1 colorpair
45 68 0.0 0.6 colorpair
46 67 0.0 1 colorpair
47 66 0.0 1 colorpair
48 65 0.0 1 colorpair
49 64 0.0 1 colorpair
50 63 0.0 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 cmark
17 cmark
19 cmark
32 cmark
30 cmark
72 cmark
45 68 1 gmark

% End Annotations
showpage
end
%%EOF
