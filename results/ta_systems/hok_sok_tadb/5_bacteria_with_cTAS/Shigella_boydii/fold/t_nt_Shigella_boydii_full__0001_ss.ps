%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAACCUAAAGGUGUUCAGCCAUGAGGGAGCCUCA__GAUUAAUGU_AA______U_C_GG_C____AUUGUCA___G___CUGGGGCUUUUCUCUGUCUGCCUUUCGGUGUUCAUGCC_UGAGACAGACAGCCUCAAGCACCCG__________\
) } def
/len { sequence length } bind def

/coor [
[-30.44323158 325.99273682]
[-47.25682449 315.41488647]
[-63.21702957 303.58868408]
[-78.23134613 290.58261108]
[-92.21277618 276.47207642]
[-105.08028412 261.33886719]
[-117.13105774 270.27075195]
[-129.18182373 279.20266724]
[-141.23258972 288.13458252]
[-153.28337097 297.06646729]
[-165.33413696 305.99838257]
[-162.14826965 319.79235840]
[-164.46186829 333.71514893]
[-171.89192200 345.66375732]
[-183.28509521 353.84616089]
[-196.89669800 357.05010986]
[-210.65782166 354.82263184]
[-222.48976135 347.53375244]
[-234.70840454 356.23461914]
[-246.92704773 364.93545532]
[-246.09028625 380.34011841]
[-253.73460388 393.74041748]
[-267.42071533 400.86038208]
[-282.78143311 399.42803955]
[-294.91522217 389.90045166]
[-299.95022583 375.31784058]
[-296.27978516 360.33346558]
[-285.07513428 349.72879028]
[-269.91162109 346.88772583]
[-255.62789917 352.71682739]
[-243.40925598 344.01596069]
[-231.19061279 335.31512451]
[-234.19735718 319.64208984]
[-230.06362915 304.16778564]
[-219.56565857 291.99411011]
[-204.76065063 285.58404541]
[-188.58370972 286.26358032]
[-174.26603699 293.94760132]
[-162.21527100 285.01571655]
[-150.16450500 276.08380127]
[-138.11372375 267.15188599]
[-126.06295776 258.22000122]
[-114.01219177 249.28808594]
[-121.07002258 238.62249756]
[-127.59677887 227.62388611]
[-133.57678223 216.31869507]
[-138.99566650 204.73406982]
[-143.84040833 192.89784241]
[-148.09936523 180.83843994]
[-151.76232910 168.58483887]
[-154.82048035 156.16648865]
[-157.26647949 143.61320496]
[-159.09443665 130.95515442]
[-160.29998779 118.22273254]
[-160.88021851 105.44653320]
[-160.83372498 92.65724945]
[-160.16064453 79.88561249]
[-158.86257935 67.16229248]
[-156.94264221 54.51785660]
[-154.40547180 41.98268509]
[-151.25712585 29.58688545]
[-147.50518799 17.36024094]
[-143.15867615 5.33212042]
[-138.22802734 -6.46857929]
[-132.72508240 -18.01350975]
[-126.66305542 -29.27493668]
[-120.05651855 -40.22580719]
[-112.92134857 -50.83981323]
[-105.27467346 -61.09146118]
[-97.13487244 -70.95611572]
[-88.52148438 -80.41008759]
[-79.45522308 -89.43065643]
[-69.95785522 -97.99615479]
[-60.05219269 -106.08601379]
[-49.76204300 -113.68079376]
[-39.11211777 -120.76224518]
[-28.12800598 -127.31336212]
[-16.83609390 -133.31840515]
[-5.26350451 -138.76293945]
[6.56195784 -143.63391113]
[18.61188698 -147.91960144]
[30.85733223 -151.60969543]
[43.26887894 -154.69537354]
[55.81671524 -157.16917419]
[68.47068787 -159.02519226]
[81.20040131 -160.25895691]
[93.97528076 -160.86750793]
[106.76463318 -160.84936523]
[119.53773499 -160.20458984]
[132.26390076 -158.93472290]
[144.91256714 -157.04281616]
[157.45332336 -154.53343201]
[169.85607910 -151.41256714]
[182.09100342 -147.68774414]
[194.12872314 -143.36788940]
[205.94032288 -138.46340942]
[217.49742126 -132.98606873]
[228.77226257 -126.94901276]
[239.73774719 -120.36676788]
[250.36753845 -113.25513458]
[260.63610840 -105.63120270]
[270.51876831 -97.51328278]
[279.99182129 -88.92087555]
[289.03247070 -79.87462616]
[297.61898804 -70.39626312]
[305.73077393 -60.50855637]
[313.34835815 -50.23526382]
[320.45336914 -39.60105896]
[327.02883911 -28.63149452]
[333.05886841 -17.35291862]
[338.52905273 -5.79242468]
[343.42620850 6.02221298]
[347.73861694 18.06261253]
[351.45584106 30.29985237]
[354.56900024 42.70452881]
[357.07061768 55.24684906]
[358.95468140 67.89667511]
[360.21664429 80.62362671]
[360.85351562 93.39712524]
[360.86370850 106.18648529]
[360.24725342 118.96099091]
[359.00558472 131.68994141]
[357.14172363 144.34275818]
[354.66012573 156.88905334]
[351.56677246 169.29869080]
[347.86907959 181.54183960]
[343.57592773 193.58911133]
[338.69763184 205.41154480]
[333.24591064 216.98075867]
[327.23385620 228.26895142]
[340.07910156 236.01490784]
[352.92431641 243.76086426]
[365.76956177 251.50683594]
[381.58285522 252.00737000]
[388.48632812 265.20553589]
[404.34191895 262.76031494]
[416.04138184 273.73767090]
[414.60986328 289.71673584]
[401.14550781 298.43972778]
[385.97702026 293.21511841]
[380.74035645 278.05078125]
[365.84585571 278.10427856]
[358.02359009 264.35208130]
[345.17837524 256.60610962]
[332.33312988 248.86013794]
[319.48788452 241.11418152]
[308.11715698 257.40203857]
[295.54034424 272.77767944]
[281.83029175 287.15203857]
[267.06652832 300.44183350]
[251.33454895 312.57000732]
[234.72555542 323.46627808]
[217.33580017 333.06750488]
[199.26603699 341.31805420]
[180.62101746 348.17010498]
[161.50877380 353.58395386]
[142.04008484 357.52822876]
[122.32775116 359.98004150]
[102.48602295 360.92523193]
[82.62989044 360.35827637]
[62.87442398 358.28247070]
[43.33410645 354.70989990]
[24.12218094 349.66119385]
[5.34998703 343.16561890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[18 32]
[19 31]
[20 30]
[130 146]
[131 145]
[132 144]
[133 143]
[135 141]
] def

init

% Start Annotations
6 43 0.0 1 colorpair
7 42 0.0 1 colorpair
8 41 0.0 1 colorpair
9 40 0.0 1 colorpair
10 39 0.0 1 colorpair
18 32 0.16 0.6 colorpair
20 30 0.16 1 colorpair
130 146 0.0 1 colorpair
131 145 0.0 1 colorpair
132 144 0.0 1 colorpair
133 143 0.0 1 colorpair
135 141 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 38 4 gmark
11 cmark
38 cmark
18 32 1 gmark
18 cmark
32 cmark
19 31 10 gmark
19 cmark
31 cmark
20 cmark
30 cmark

% End Annotations
showpage
end
%%EOF
