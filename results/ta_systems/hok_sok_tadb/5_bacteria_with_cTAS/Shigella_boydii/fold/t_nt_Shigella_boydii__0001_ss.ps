%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAACCUAAAGGUGUUCAGACAUGAAGGAGCCUCA__GAUUAAUGU_AA______U_C_GG_C____A___UUGUUAACUGGGGCUUUUCUCUGUCUGCCUUUCGGUGUUCAUGCC_UGAGACAGAAAGCCUCAAGCACCCG__________\
) } def
/len { sequence length } bind def

/coor [
[-29.25620651 319.06826782]
[-45.83696365 308.39782715]
[-61.54136276 296.47509766]
[-76.27503967 283.37170410]
[-89.94945526 269.16641235]
[-102.48243713 253.94458008]
[-114.68572235 262.66696167]
[-126.88899994 271.38934326]
[-139.09228516 280.11172485]
[-151.29556274 288.83410645]
[-163.49884033 297.55648804]
[-160.55163574 311.40548706]
[-163.10679626 325.28802490]
[-170.74472046 337.10723877]
[-182.28060913 345.09072876]
[-195.94816589 348.05636597]
[-209.67004395 345.58734131]
[-221.37351990 338.09020996]
[-233.74363708 346.57431030]
[-246.11376953 355.05841064]
[-245.54869080 370.47543335]
[-253.42805481 383.73889160]
[-267.23754883 390.61645508]
[-282.57064819 388.91354370]
[-294.53460693 379.17355347]
[-299.31173706 364.50445557]
[-295.37771606 349.58712769]
[-283.98785400 339.18161011]
[-268.77661133 336.60827637]
[-254.59786987 342.68829346]
[-242.22773743 334.20419312]
[-229.85762024 325.72009277]
[-232.58781433 309.99832153]
[-228.18382263 294.60061646]
[-217.47584534 282.61364746]
[-202.56306458 276.46319580]
[-186.40217590 277.42343140]
[-172.22122192 285.35321045]
[-160.01794434 276.63082886]
[-147.81466675 267.90844727]
[-135.61137390 259.18606567]
[-123.40809631 250.46368408]
[-111.20481873 241.74130249]
[-118.06672668 230.93882751]
[-124.37660980 219.80488586]
[-130.11849976 208.36766052]
[-135.27784729 196.65611267]
[-139.84161377 184.69989014]
[-143.79823303 172.52925110]
[-147.13769531 160.17501831]
[-149.85153198 147.66844177]
[-151.93289185 135.04121399]
[-153.37651062 122.32526398]
[-154.17871094 109.55280304]
[-154.33746338 96.75616455]
[-153.85238647 83.96773529]
[-152.72470093 71.21988678]
[-150.95726013 58.54489517]
[-148.55453491 45.97484589]
[-145.52259827 33.54156113]
[-141.86914062 21.27650833]
[-137.60340881 9.21073914]
[-132.73620605 -2.62520170]
[-127.27983093 -14.20135307]
[-121.24811554 -25.48841095]
[-114.65632629 -36.45780182]
[-107.52114868 -47.08176041]
[-99.86064148 -57.33338547]
[-91.69419861 -67.18673706]
[-83.04249573 -76.61685944]
[-73.92742920 -85.59989166]
[-64.37207794 -94.11308289]
[-54.40063095 -102.13489532]
[-44.03832626 -109.64501190]
[-33.31139755 -116.62442780]
[-22.24699593 -123.05547333]
[-10.87313652 -128.92185974]
[0.78139228 -134.20875549]
[12.68708706 -138.90275574]
[24.81380844 -142.99198914]
[37.13085938 -146.46611023]
[49.60705948 -149.31631470]
[62.21082687 -151.53538513]
[74.91025543 -153.11770630]
[87.67320251 -154.05928040]
[100.46734619 -154.35772705]
[113.26030731 -154.01226807]
[126.01970673 -153.02380371]
[138.71322632 -151.39482117]
[151.30876160 -149.12945557]
[163.77439880 -146.23341370]
[176.07859802 -142.71406555]
[188.19021606 -138.58029175]
[200.07858276 -133.84257507]
[211.71360779 -128.51289368]
[223.06582642 -122.60474396]
[234.10652161 -116.13308716]
[244.80773926 -109.11430359]
[255.14237976 -101.56615448]
[265.08428955 -93.50775909]
[274.60827637 -84.95951080]
[283.69027710 -75.94304657]
[292.30728149 -66.48118591]
[300.43743896 -56.59789658]
[308.06024170 -46.31818771]
[315.15631104 -35.66808319]
[321.70776367 -24.67454529]
[327.69796753 -13.36539841]
[333.11175537 -1.76927435]
[337.93542480 10.08447266]
[342.15679932 22.16583443]
[345.76516724 34.44422913]
[348.75137329 46.88857269]
[351.10791016 59.46736908]
[352.82876587 72.14876556]
[353.90960693 84.90067291]
[354.34768677 97.69079590]
[354.14187622 110.48677063]
[353.29275513 123.25619507]
[351.80242920 135.96675110]
[349.67468262 148.58625793]
[346.91488647 161.08276367]
[343.53005981 173.42465210]
[339.52874756 185.58067322]
[334.92108154 197.52003479]
[329.71871948 209.21253967]
[323.93484497 220.62858582]
[336.92523193 228.12858582]
[349.91561890 235.62858582]
[362.90597534 243.12858582]
[375.89636230 250.62858582]
[388.88674927 258.12860107]
[404.69293213 255.38192749]
[416.59927368 266.13455200]
[415.47222900 282.13796997]
[402.17636108 291.11572266]
[386.91116333 286.18084717]
[381.38674927 271.11895752]
[368.39636230 263.61895752]
[355.40597534 256.11895752]
[342.41561890 248.61897278]
[329.42523193 241.11897278]
[316.43484497 233.61897278]
[305.43438721 249.98263550]
[293.19940186 265.44503784]
[279.80349731 279.91323853]
[265.32711792 293.30032349]
[249.85725403 305.52584839]
[233.48687744 316.51632690]
[216.31436157 326.20574951]
[198.44290161 334.53585815]
[179.97988892 341.45660400]
[161.03625488 346.92639160]
[141.72584534 350.91238403]
[122.16470337 353.39059448]
[102.47037506 354.34616089]
[82.76119232 353.77331543]
[63.15560532 351.67550659]
[43.77141953 348.06533813]
[24.72512245 342.96453857]
[6.13116026 336.40371704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[18 32]
[19 31]
[20 30]
[127 143]
[128 142]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% Start Annotations
6 43 0.0 1 colorpair
7 42 0.0 1 colorpair
8 41 0.0 1 colorpair
9 40 0.0 1 colorpair
10 39 0.0 1 colorpair
11 38 0.32 0.6 colorpair
18 32 0.16 0.6 colorpair
20 30 0.16 1 colorpair
127 143 0.0 1 colorpair
128 142 0.0 1 colorpair
129 141 0.0 1 colorpair
130 140 0.0 1 colorpair
132 138 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 38 1 gmark
11 cmark
38 cmark
18 32 1 gmark
18 cmark
32 cmark
19 31 3 gmark
19 cmark
31 cmark
20 cmark
30 cmark
131 139 3 gmark
131 cmark
139 cmark

% End Annotations
showpage
end
%%EOF
