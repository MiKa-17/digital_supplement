%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUAUGCCACAAAAAACGUUUGUUCUAUGCCUAUUAAUUGUUUGUAUAACAGUACUGGCAUUUACAUUGAUUACGCAUAAGUCACUGUGUGAAUUACGCUUAAAAGAUGGAAACAAAGAGGUUGCGGCCAUUUUAGCUUACGAAUCUGAA___\
) } def
/len { sequence length } bind def

/coor [
[148.53431702 398.99722290]
[151.68568420 384.28445435]
[157.56477356 370.43408203]
[165.95903015 357.94677734]
[176.56503296 347.27392578]
[188.99937439 338.80139160]
[183.04776001 325.03265381]
[177.09616089 311.26391602]
[164.94412231 302.65127563]
[166.57078552 286.91390991]
[160.61918640 273.14517212]
[154.66757202 259.37643433]
[141.96852112 259.26956177]
[130.21800232 254.33038330]
[121.19004059 245.26600647]
[116.26225281 233.40913391]
[116.20568085 220.52229309]
[121.06439209 208.53575134]
[130.14352417 199.25845337]
[124.75848389 185.25840759]
[119.37344360 171.25836182]
[113.98840332 157.25831604]
[108.60336304 143.25827026]
[103.21832275 129.25822449]
[87.47645569 126.63760376]
[75.41581726 116.18699646]
[70.58157349 100.97830963]
[55.95765305 97.64049530]
[41.33373260 94.30268097]
[26.70981598 90.96486664]
[12.08589745 87.62705994]
[3.78757644 97.06779480]
[-7.68053770 102.03337860]
[-20.09856606 101.62998199]
[-31.09134674 95.99661255]
[-38.58272934 86.26667023]
[-41.18761826 74.34047699]
[-55.66322327 70.40895081]
[-70.13882446 66.47742462]
[-84.61442566 62.54590225]
[-99.09003448 58.61437607]
[-113.56563568 54.68285370]
[-128.14518738 61.37733078]
[-142.40388489 54.02415848]
[-145.40367126 38.26405334]
[-134.84336853 26.18682480]
[-118.82392883 27.05708694]
[-109.63410950 40.20724869]
[-95.15850830 44.13877487]
[-80.68290710 48.07030106]
[-66.20729828 52.00182343]
[-51.73169708 55.93334961]
[-37.25609207 59.86487579]
[-24.07858849 48.17960739]
[-6.37281132 46.68511200]
[8.84258652 56.16164780]
[15.42371082 73.00313568]
[30.04763031 76.34095001]
[44.67154694 79.67876434]
[59.29546738 83.01657867]
[73.91938782 86.35439301]
[79.32061005 79.05330658]
[86.69046021 73.74629211]
[95.32733917 70.93856049]
[104.40904999 70.89739990]
[110.36064911 57.12865067]
[116.31224823 43.35990143]
[122.26385498 29.59115410]
[116.68088531 15.04920483]
[122.91279602 1.17051852]
[136.81072998 -4.06236649]
[142.76232910 -17.83111572]
[148.71392822 -31.59986305]
[147.08728027 -47.33722687]
[159.23931885 -55.94984436]
[165.19091797 -69.71859741]
[163.56427002 -85.45595551]
[175.71630859 -94.06857300]
[181.66790771 -107.83732605]
[187.61950684 -121.60607147]
[185.99285889 -137.34342957]
[198.14489746 -145.95605469]
[204.09649658 -159.72480774]
[210.04809570 -173.49354553]
[215.99969482 -187.26229858]
[216.73420715 -204.20033264]
[233.21362305 -208.18344116]
[241.60302734 -193.45066833]
[229.76844788 -181.31069946]
[223.81684875 -167.54194641]
[217.86523438 -153.77319336]
[211.91363525 -140.00445557]
[213.96598816 -125.25192261]
[201.38825989 -115.65447235]
[195.43666077 -101.88571930]
[189.48504639 -88.11697388]
[191.53739929 -73.36444092]
[178.95967102 -63.76699066]
[173.00807190 -49.99824524]
[175.06042480 -35.24571609]
[162.48268127 -25.64826202]
[156.53108215 -11.87951374]
[150.57948303 1.88923490]
[156.28984070 15.59789181]
[150.45022583 29.64614487]
[136.03259277 35.54275513]
[130.08099365 49.31150436]
[124.12939453 63.08025360]
[118.17779541 76.84899902]
[128.22140503 91.63616943]
[127.85676575 109.50798035]
[117.21836853 123.87317657]
[122.60341644 137.87322998]
[127.98845673 151.87327576]
[133.37348938 165.87332153]
[138.75852966 179.87336731]
[144.14356995 193.87341309]
[161.51405334 196.17466736]
[175.27909851 206.87300110]
[181.73089600 222.97340393]
[179.18885803 240.04148865]
[168.43632507 253.42481995]
[174.38792419 267.19357300]
[180.33952332 280.96231079]
[192.91726685 290.55978394]
[190.86491394 305.31231689]
[196.81651306 319.08105469]
[202.76811218 332.84979248]
[217.45887756 329.59741211]
[232.49967957 329.18429565]
[247.34681702 331.62539673]
[261.46356201 336.83248901]
[274.33963013 344.61730957]
[285.50952148 354.69848633]
[294.56948853 366.71154785]
[301.19198608 380.22222900]
[305.13766479 394.74215698]
[306.26382446 409.74642944]
[304.52978516 424.69265747]
[299.99826050 439.04052734]
[292.83300781 452.27139282]
[283.29309082 463.90698242]
[271.72335815 473.52661133]
[258.54202271 480.78262329]
[244.22563171 485.41262817]
[229.29167175 487.24932861]
[214.28001404 486.22628784]
[199.73332214 482.38049316]
[186.17744446 475.85098267]
[174.10240173 466.87377930]
[163.94473267 455.77340698]
[156.07160950 442.95114136]
[150.76763916 428.87051392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[10 124]
[11 123]
[12 122]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[65 109]
[66 108]
[67 107]
[68 106]
[71 103]
[72 102]
[73 101]
[75 99]
[76 98]
[78 96]
[79 95]
[80 94]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
19 117 0.0 1 colorpair
20 116 0.0 1 colorpair
21 115 0.0 1 colorpair
22 114 0.0 1 colorpair
23 113 0.0 1 colorpair
24 112 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
30 58 0.0 1 colorpair
31 57 0.0 1 colorpair
37 53 0.0 1 colorpair
38 52 0.0 1 colorpair
39 51 0.0 1 colorpair
40 50 0.0 1 colorpair
41 49 0.0 1 colorpair
42 48 0.0 1 colorpair
65 109 0.0 1 colorpair
66 108 0.0 1 colorpair
67 107 0.0 1 colorpair
68 106 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.0 1 colorpair
73 101 0.0 1 colorpair
75 99 0.0 1 colorpair
76 98 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
