%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUGCCACAAAAAACGUUUGUUCUAUGCCUAUUAAUUGUUUGUAUAACAGUACUGGCAUUUACAUUGAUUACGCAUAAGUCACUGUGUGAAUUACGCUUAAAAGAUGGAAACAAAGAGGUUGCGGCCAUUUUAGCUUACGAAUCUGAACGG\
) } def
/len { sequence length } bind def

/coor [
[88.96836090 290.17266846]
[89.10396576 305.30001831]
[84.55638885 319.72830200]
[75.77116394 332.04391479]
[63.60896683 341.04037476]
[49.26133347 345.83627319]
[34.13389206 345.96173096]
[19.70867920 341.40451050]
[7.39893055 332.61102295]
[-1.58937144 320.44281006]
[-6.37564421 306.09194946]
[-6.49097729 290.96444702]
[-1.92407215 276.54226685]
[6.87765312 264.23843384]
[19.05189514 255.25827026]
[33.40594482 250.48162842]
[48.53353882 250.37641907]
[53.05223083 236.07322693]
[57.57092285 221.77003479]
[62.08961868 207.46684265]
[66.60830688 193.16363525]
[70.83429718 178.77124023]
[74.76582336 164.29563904]
[78.69734955 149.82003784]
[82.62887573 135.34443665]
[66.23337555 120.26820374]
[60.63862228 98.70890045]
[46.01470184 95.37108612]
[31.39078522 92.03327179]
[16.76686668 88.69545746]
[2.14294744 85.35764313]
[-6.15537310 94.79838562]
[-17.62348747 99.76396942]
[-30.04151535 99.36056519]
[-41.03429413 93.72719574]
[-48.52568054 83.99725342]
[-51.13056564 72.07106781]
[-65.60617065 68.13954163]
[-80.08177185 64.20801544]
[-94.55738068 60.27648926]
[-109.03298187 56.34496307]
[-123.50858307 52.41344070]
[-138.08815002 59.10791779]
[-152.34683228 51.75474548]
[-155.34661865 35.99464035]
[-144.78631592 23.91741180]
[-128.76687622 24.78767204]
[-119.57706451 37.93783569]
[-105.10145569 41.86936188]
[-90.62585449 45.80088425]
[-76.15025330 49.73241043]
[-61.67464447 53.66393661]
[-47.19904327 57.59546280]
[-34.02153778 45.91019440]
[-16.31576157 44.41569901]
[-1.10036278 53.89223480]
[5.48076153 70.73372650]
[20.10468102 74.07154083]
[34.72859955 77.40935516]
[49.35251617 80.74716949]
[63.97643661 84.08498383]
[67.11742401 78.32695007]
[71.17050171 73.17007446]
[76.02323914 68.75740051]
[81.54103851 65.21132660]
[87.57084656 62.63021088]
[93.94541168 61.08564377]
[100.48791504 60.62047577]
[103.52673340 45.93151474]
[106.56554413 31.24254990]
[109.60435486 16.55358887]
[112.64317322 1.86462605]
[111.31452942 -7.23499155]
[115.89669037 -13.09157848]
[119.23450470 -27.71549606]
[122.57231903 -42.33941650]
[125.91013336 -56.96333313]
[129.24795532 -71.58724976]
[132.58576965 -86.21117401]
[123.96621704 -99.45801544]
[127.31990051 -114.90238190]
[140.65713501 -123.38139343]
[156.06518555 -119.86460876]
[164.40270996 -106.43846893]
[160.72322083 -91.06847382]
[147.20968628 -82.87335968]
[143.87187195 -68.24943542]
[140.53405762 -53.62551880]
[137.19624329 -39.00160217]
[133.85842896 -24.37768364]
[130.52061462 -9.75376415]
[127.33213043 4.90343904]
[124.29331970 19.59240150]
[121.25450897 34.28136444]
[118.21569061 48.97032547]
[115.17687988 63.65929031]
[131.52735901 76.39891815]
[139.14448547 95.67625427]
[154.09457397 96.89888763]
[169.04466248 98.12152863]
[173.86865234 95.82962036]
[178.60771179 95.67466736]
[182.44877625 97.25581360]
[184.86242676 99.90376282]
[199.70974731 102.03849030]
[214.55706787 104.17321014]
[229.40438843 106.30792999]
[244.25170898 108.44265747]
[259.09902954 110.57737732]
[273.94635010 112.71209717]
[284.77636719 101.75688934]
[299.80490112 99.30799103]
[313.23486328 106.09769440]
[320.01046753 119.33512115]
[334.85778809 121.46984100]
[349.70510864 123.60456085]
[363.35821533 115.18008423]
[378.40802002 120.73734283]
[383.30957031 136.01327515]
[374.30282593 149.28950500]
[358.29699707 150.38163757]
[347.57037354 138.45188904]
[332.72305298 136.31716919]
[317.87573242 134.18243408]
[307.64517212 144.97474670]
[292.84634399 147.70576477]
[279.11651611 141.12203979]
[271.81161499 127.55941772]
[256.96429443 125.42469788]
[242.11698914 123.28997803]
[227.26966858 121.15525055]
[212.42234802 119.02053070]
[197.57502747 116.88581085]
[182.72770691 114.75108337]
[167.82202148 113.07161713]
[152.87193298 111.84897614]
[137.92184448 110.62634277]
[133.62707520 120.49890137]
[126.81919098 128.83949280]
[118.00698090 135.02474976]
[107.84902954 138.59245300]
[97.10447693 139.27595520]
[93.17295074 153.75155640]
[89.24142456 168.22717285]
[85.30990601 182.70277405]
[86.64715576 189.27716064]
[84.71315002 194.70175171]
[80.91150665 197.68232727]
[76.39281464 211.98553467]
[71.87412262 226.28872681]
[67.35543060 240.59191895]
[62.83673477 254.89511108]
[75.15825653 263.67208862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 152]
[18 151]
[19 150]
[20 149]
[21 148]
[22 145]
[23 144]
[24 143]
[25 142]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[98 137]
[99 136]
[100 135]
[104 134]
[105 133]
[106 132]
[107 131]
[108 130]
[109 129]
[110 128]
[114 124]
[115 123]
[116 122]
] def

init

% Start Annotations
17 152 0.0 1 colorpair
18 151 0.0 1 colorpair
19 150 0.0 1 colorpair
20 149 0.0 1 colorpair
21 148 0.0 1 colorpair
22 145 0.0 1 colorpair
23 144 0.0 1 colorpair
24 143 0.0 1 colorpair
25 142 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
30 58 0.0 1 colorpair
31 57 0.0 1 colorpair
37 53 0.0 1 colorpair
38 52 0.0 1 colorpair
39 51 0.0 1 colorpair
40 50 0.0 1 colorpair
41 49 0.0 1 colorpair
42 48 0.0 1 colorpair
68 96 0.0 1 colorpair
69 95 0.0 1 colorpair
70 94 0.0 1 colorpair
71 93 0.0 1 colorpair
72 92 0.0 1 colorpair
74 91 0.0 1 colorpair
75 90 0.0 1 colorpair
76 89 0.0 1 colorpair
77 88 0.0 1 colorpair
78 87 0.0 1 colorpair
79 86 0.0 1 colorpair
98 137 0.0 1 colorpair
99 136 0.0 1 colorpair
100 135 0.0 1 colorpair
104 134 0.0 1 colorpair
105 133 0.0 1 colorpair
106 132 0.0 1 colorpair
107 131 0.0 1 colorpair
108 130 0.0 1 colorpair
109 129 0.0 1 colorpair
110 128 0.0 1 colorpair
114 124 0.0 1 colorpair
115 123 0.0 1 colorpair
116 122 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
