%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AAAUGCAGCAAGAACGGGUCGUUCUAAGGCUGAUGAUUAUCUGCAUCACGCUGAUAGCGCUGAUGUGGAUCACCCGCGGUUCGCUAUGUGAACUGCGCAUCACACUGGGAGACACGGAGGUAGCCGCCAUUUUGGCUUACGAAACCGAA___\
) } def
/len { sequence length } bind def

/coor [
[61.78565216 203.53225708]
[55.06767654 200.79856873]
[48.54377365 197.62951660]
[42.24211884 194.03878784]
[36.18992996 190.04188538]
[30.41334534 185.65606689]
[24.93731880 180.90029907]
[14.01117134 191.17742920]
[3.08502436 201.45455933]
[-7.84112263 211.73168945]
[-12.70640945 231.25335693]
[-31.63991928 235.00205994]
[-42.13778305 245.71629333]
[-52.63564682 256.43054199]
[-63.13351440 267.14477539]
[-73.63137817 277.85900879]
[-74.90619659 293.85131836]
[-88.28440094 302.70587158]
[-103.50337219 297.63021851]
[-108.88842773 282.51794434]
[-100.30860138 268.96191406]
[-84.34561157 267.36114502]
[-73.84774780 256.64691162]
[-63.34988403 245.93266296]
[-52.85201645 235.21842957]
[-42.35415268 224.50419617]
[-43.37416077 214.26309204]
[-38.45720673 204.97181702]
[-29.02877617 199.84445190]
[-18.11824799 200.80554199]
[-7.19210148 190.52841187]
[3.73404551 180.25128174]
[14.66019249 169.97415161]
[3.11346459 152.84188843]
[-5.03772068 133.85768127]
[-9.50769234 113.68688965]
[-10.13979244 93.03640747]
[-6.91186905 72.62998199]
[0.06295106 53.18278503]
[10.54022408 35.37636566]
[-0.99403411 25.78674316]
[-12.52829170 16.19711876]
[-24.06254959 6.60749388]
[-35.59680939 -2.98213053]
[-47.13106537 -12.57175446]
[-58.66532516 -22.16137886]
[-70.19958496 -31.75100327]
[-81.73384094 -41.34062958]
[-93.26809692 -50.93025208]
[-104.89956665 -60.40172958]
[-116.62703705 -69.75407410]
[-128.35450745 -79.10642242]
[-144.39352417 -78.74623108]
[-154.56427002 -91.15330505]
[-151.06462097 -106.80999756]
[-136.57922363 -113.70584106]
[-122.22001648 -106.55092621]
[-119.00216675 -90.83390045]
[-107.27468872 -81.48155212]
[-95.54721832 -72.12920380]
[-88.31322479 -70.40727234]
[-83.67847443 -62.46451187]
[-72.14421844 -52.87488556]
[-60.60995865 -43.28526306]
[-49.07569885 -33.69563675]
[-37.54144287 -24.10601234]
[-26.00718307 -14.51638794]
[-14.47292519 -4.92676401]
[-2.93866754 4.66286039]
[8.59559059 14.25248432]
[20.12984848 23.84210968]
[39.58012772 7.64901400]
[62.20800018 -3.68717480]
[86.82342529 -9.57026672]
[112.13182068 -9.69085789]
[136.80218506 -4.04260826]
[142.75378418 -17.81135750]
[148.70539856 -31.58010483]
[154.65699768 -45.34885406]
[160.60859680 -59.11760330]
[166.56019592 -72.88635254]
[172.51179504 -86.65509796]
[178.46339417 -100.42385101]
[184.41499329 -114.19259644]
[190.36660767 -127.96134949]
[191.10112000 -144.89938354]
[207.58053589 -148.88247681]
[215.96992493 -134.14971924]
[204.13534546 -122.00974274]
[198.18374634 -108.24099731]
[192.23214722 -94.47225189]
[186.28054810 -80.70349884]
[180.32894897 -66.93475342]
[174.37734985 -53.16600037]
[168.42573547 -39.39725494]
[162.47413635 -25.62850380]
[156.52253723 -11.85975552]
[150.57093811 1.90899312]
[161.07922363 8.08376408]
[170.84251404 15.37964725]
[179.74172974 23.70765305]
[187.66833496 32.96620560]
[194.52563477 43.04237366]
[200.22999573 53.81326294]
[204.71183777 65.14749146]
[207.91650391 76.90682220]
[222.76382446 74.77210236]
[237.61114502 72.63738251]
[245.70138550 59.25522614]
[260.51736450 54.25315857]
[275.06344604 59.99300003]
[282.47137451 73.76457214]
[279.24340820 89.06536865]
[266.90365601 98.67080688]
[251.27857971 98.04550171]
[239.74586487 87.48470306]
[224.89854431 89.61942291]
[210.05122375 91.75415039]
[210.35968018 100.08442688]
[210.03848267 108.41422272]
[209.08944702 116.69601440]
[207.51802063 124.88254547]
[205.33314514 132.92710876]
[202.54728699 140.78381348]
[199.17634583 148.40782166]
[195.23956299 155.75563049]
[190.75938416 162.78533936]
[202.48686218 172.13768005]
[214.21434021 181.49003601]
[225.94180298 190.84237671]
[242.09516907 195.99069214]
[241.61975098 212.93797302]
[225.20315552 217.17260742]
[216.58946228 202.56985474]
[204.86198425 193.21749878]
[193.13452148 183.86515808]
[181.40704346 174.51281738]
[176.33686829 179.69909668]
[170.93699646 184.54116821]
[165.23072815 189.01806641]
[159.24272156 193.11050415]
[152.99884033 196.80076599]
[146.52603149 200.07293701]
[139.85227966 202.91288757]
[133.00640869 205.30831909]
[126.01795959 207.24891663]
[118.91714478 208.72628784]
[111.73461914 209.73405457]
[104.50141907 210.26786804]
[97.24877167 210.32540894]
[90.00800323 209.90643311]
[82.81039429 209.01277161]
[75.68702698 207.64823914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 60]
[51 59]
[52 58]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[106 118]
[107 117]
[108 116]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% Start Annotations
7 33 0.0 1 colorpair
8 32 0.0 1 colorpair
9 31 0.0 1 colorpair
10 30 0.0 1 colorpair
12 26 0.16 1 colorpair
13 25 0.0 1 colorpair
14 24 0.16 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
40 71 0.0 0.2 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.16 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.16 1 colorpair
79 95 0.0 1 colorpair
80 94 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.32 1 colorpair
85 89 0.0 1 colorpair
106 118 0.0 1 colorpair
107 117 0.0 1 colorpair
108 116 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair
130 134 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
26 cmark
14 cmark
40 71 2 gmark
45 cmark
48 cmark
63 cmark
78 cmark
94 cmark
84 cmark
90 cmark
130 134 2 gmark

% End Annotations
showpage
end
%%EOF
