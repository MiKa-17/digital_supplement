%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:25:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUGCAGCAAGAACGGGUCGUUCUAAGGCUGAUGAUUAUCUGCAUCACGCUGAUAGCGCUGAUGUGGAUCACCCGCGGUUCACUAUGUGAACUGCGCAUCACACUGGGAGACACGGAGGUAGCCGCCAUUUUGGCUUACGAAACCGAAGGG\
) } def
/len { sequence length } bind def

/coor [
[131.34976196 122.98169708]
[124.38769531 130.26890564]
[115.78617096 135.52130127]
[106.12342834 138.38580322]
[96.04904938 138.66983032]
[86.24026489 136.35430908]
[77.35647583 131.59489441]
[66.43032837 141.87200928]
[55.50417709 152.14913940]
[44.57802963 162.42626953]
[39.71274567 181.94793701]
[20.77923584 185.69664001]
[10.28137016 196.41087341]
[-0.21649413 207.12510681]
[-10.71435928 217.83934021]
[-21.21222305 228.55357361]
[-31.71008873 239.26782227]
[-38.47643280 254.81300354]
[-55.28722000 252.61442566]
[-57.82825470 235.85198975]
[-42.42432404 228.76994324]
[-31.92645836 218.05570984]
[-21.42859459 207.34147644]
[-10.93072891 196.62724304]
[-0.43286455 185.91300964]
[10.06500053 175.19877625]
[9.04499149 164.95767212]
[13.96194553 155.66639709]
[23.39037704 150.53903198]
[34.30090714 151.50012207]
[45.22705078 141.22299194]
[56.15319824 130.94586182]
[67.07934570 120.66873932]
[64.33802032 115.46575928]
[62.41300201 109.90876770]
[61.34833908 104.12496948]
[61.16841125 98.24674988]
[61.87733078 92.40866089]
[63.45887756 86.74433899]
[65.87684631 81.38343811]
[54.34258652 71.79380798]
[42.80832672 62.20418549]
[31.27407074 52.61456299]
[19.73981285 43.02493668]
[8.20555401 33.43531418]
[-3.32870388 23.84568977]
[-14.86296177 14.25606537]
[-26.39721870 4.66644096]
[-37.93147659 -4.92318344]
[-49.56294632 -14.39466190]
[-61.29042053 -23.74700928]
[-73.01789093 -33.09935760]
[-84.74536133 -42.45170212]
[-100.89872742 -47.60002136]
[-100.42330170 -64.54730225]
[-84.00672150 -68.78192902]
[-75.39302063 -54.17917633]
[-63.66554642 -44.82682800]
[-51.93807220 -35.47447968]
[-40.21060181 -26.12213326]
[-32.97660065 -24.40019989]
[-28.34185219 -16.45744133]
[-16.80759430 -6.86781693]
[-5.27333736 2.72180748]
[6.26092052 12.31143188]
[17.79517746 21.90105629]
[29.32943535 31.49068069]
[40.86369324 41.08030319]
[52.39795303 50.66992950]
[63.93220901 60.25955200]
[75.46646881 69.84917450]
[99.07965851 61.13974762]
[123.07868958 68.72156525]
[137.40251160 89.41613007]
[152.35260010 88.19348907]
[167.30268860 86.97085571]
[179.49168396 78.22850800]
[185.44328308 64.45975494]
[191.39488220 50.69100952]
[197.34648132 36.92226028]
[203.29808044 23.15351105]
[209.24967957 9.38476181]
[215.20127869 -4.38398695]
[221.15287781 -18.15273476]
[227.10449219 -31.92148399]
[227.83900452 -48.85951233]
[244.31842041 -52.84262085]
[252.70782471 -38.10985947]
[240.87322998 -25.96988297]
[234.92163086 -12.20113468]
[228.97003174 1.56761444]
[223.01843262 15.33636284]
[217.06683350 29.10511208]
[211.11523438 42.87385941]
[205.16363525 56.64260864]
[199.21202087 70.41136169]
[193.26042175 84.18010712]
[205.08453369 74.95024109]
[216.90864563 65.72037506]
[223.97676086 52.49003983]
[235.09008789 42.41562271]
[248.94844055 36.67577362]
[263.93048096 35.94202042]
[278.28341675 40.30020905]
[290.32800293 49.24045181]
[298.65509033 61.71680069]
[302.29049683 76.26959991]
[300.80889893 91.19624329]
[294.38360596 104.75041962]
[283.76635742 115.34635925]
[270.19927979 121.74440765]
[255.26969910 123.19602966]
[240.72424316 119.53138733]
[228.26472473 111.17930603]
[213.48915100 108.59429932]
[198.71356201 106.00929260]
[210.44104004 115.36164093]
[222.16850281 124.71398163]
[240.84725952 121.84418488]
[255.48091125 133.29313660]
[257.13211060 151.48075867]
[269.23129272 160.34698486]
[281.33047485 169.21319580]
[293.51947021 177.95555115]
[305.79699707 186.57310486]
[318.07452393 195.19067383]
[330.35202026 203.80824280]
[345.87411499 200.83496094]
[358.90521240 209.77732849]
[361.71423340 225.32998657]
[352.63458252 238.26582336]
[337.05310059 240.91023254]
[324.21398926 231.69433594]
[321.73446655 216.08576965]
[309.45693970 207.46820068]
[297.17941284 198.85063171]
[284.90188599 190.23306274]
[277.57614136 188.95680237]
[272.46426392 181.31237793]
[260.36508179 172.44616699]
[248.26589966 163.57994080]
[237.56619263 167.73785400]
[226.07304382 166.17095947]
[216.68415833 159.15666199]
[211.82350159 148.36041260]
[212.81616211 136.44145203]
[201.08868408 127.08911133]
[189.36122131 117.73676300]
[179.74731445 115.28840637]
[172.48904419 109.54473114]
[168.52532959 101.92094421]
[153.57524109 103.14357758]
[138.62515259 104.36621857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 60]
[51 59]
[52 58]
[53 57]
[74 153]
[75 152]
[76 151]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[116 148]
[117 147]
[118 146]
[121 141]
[122 140]
[123 139]
[124 137]
[125 136]
[126 135]
[127 134]
] def

init

% Start Annotations
7 33 0.0 1 colorpair
8 32 0.0 1 colorpair
9 31 0.0 1 colorpair
10 30 0.0 1 colorpair
12 26 0.16 1 colorpair
13 25 0.0 1 colorpair
14 24 0.16 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
17 21 0.0 0.6 colorpair
40 71 0.0 0.6 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.16 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 1 colorpair
50 60 0.0 1 colorpair
51 59 0.0 1 colorpair
52 58 0.0 1 colorpair
53 57 0.0 0.6 colorpair
74 153 0.0 1 colorpair
75 152 0.0 1 colorpair
76 151 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.16 1 colorpair
79 95 0.0 1 colorpair
80 94 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.32 1 colorpair
85 89 0.0 1 colorpair
116 148 0.0 0.6 colorpair
117 147 0.0 1 colorpair
118 146 0.0 1 colorpair
121 141 0.0 1 colorpair
122 140 0.0 1 colorpair
123 139 0.0 0.6 colorpair
124 137 0.0 1 colorpair
125 136 0.0 1 colorpair
126 135 0.0 0.6 colorpair
127 134 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
26 cmark
14 cmark
17 21 1 gmark
40 71 1 gmark
45 cmark
48 cmark
63 cmark
53 57 1 gmark
78 cmark
94 cmark
84 cmark
90 cmark
116 148 1 gmark
123 139 1 gmark
126 135 1 gmark
134 cmark

% End Annotations
showpage
end
%%EOF
