%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:13:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________________AUGCUGACAAAAUAUGCCCU__UGUGGCAAUCAUCG_UACUCUGUAUUACGGUACUGGGAUUUACGCUGUUGGUGCACAGCUCGCUAUGCGAACUGAGUAUUAAAGAGCGUAAUAUUGAGUUUAAAGCUGUUCUCGCUUACGAAUC___GAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[99.24034882 420.71286011]
[85.27075958 420.37536621]
[71.32913971 419.42965698]
[57.44194412 417.87756348]
[43.63554001 415.72198486]
[29.93614006 412.96707153]
[16.36974716 409.61801147]
[2.96211720 405.68115234]
[-10.26129723 401.16403198]
[-23.27539253 396.07516479]
[-36.05546570 390.42422485]
[-48.57724762 384.22195435]
[-60.81697464 377.48013306]
[-72.75141144 370.21154785]
[-84.35789490 362.42996216]
[-95.61439514 354.15020752]
[-106.49954987 345.38796997]
[-116.99268341 336.15991211]
[-127.07387543 326.48352051]
[-136.72399902 316.37716675]
[-145.92472839 305.86004639]
[-154.65859985 294.95211792]
[-162.90901184 283.67410278]
[-170.66033936 272.04739380]
[-177.89784241 260.09408569]
[-184.60778809 247.83683777]
[-190.77743530 235.29895020]
[-196.39508057 222.50421143]
[-201.45004272 209.47691345]
[-205.93273926 196.24177551]
[-209.83465576 182.82394409]
[-213.14839172 169.24888611]
[-215.86764526 155.54235840]
[-217.98725891 141.73039246]
[-232.90132141 143.33381653]
[-247.81536865 144.93724060]
[-262.72943115 146.54066467]
[-271.29214478 159.62553406]
[-286.27722168 164.09559631]
[-300.60916138 157.84024048]
[-307.52084351 143.81303406]
[-303.74880981 128.63720703]
[-291.07409668 119.47831726]
[-275.48129272 120.66091919]
[-264.33285522 131.62661743]
[-249.41879272 130.02319336]
[-234.50474548 128.41976929]
[-219.59068298 126.81633759]
[-220.49058533 111.96300507]
[-220.70051575 97.08391571]
[-220.22004700 82.21110535]
[-219.05021667 67.37659454]
[-217.19352722 52.61231613]
[-214.65397644 37.95005035]
[-211.43705750 23.42136765]
[-207.54966736 9.05754280]
[-203.00018311 -5.11050081]
[-197.79840088 -19.05226326]
[-191.95550537 -32.73772812]
[-185.48410034 -46.13743591]
[-178.39810181 -59.22254181]
[-170.71278381 -71.96487427]
[-162.44465637 -84.33699036]
[-153.61154175 -96.31227875]
[-144.23245239 -107.86493683]
[-134.32759094 -118.97010803]
[-123.91825104 -129.60388184]
[-113.02687073 -139.74336243]
[-101.67687988 -149.36671448]
[-89.89272308 -158.45324707]
[-77.69976807 -166.98336792]
[-65.12425232 -174.93873596]
[-52.19326401 -182.30220032]
[-38.93463135 -189.05793762]
[-25.37690163 -195.19139099]
[-11.54926014 -200.68934631]
[2.51852512 -205.53999329]
[16.79616928 -209.73286438]
[31.25293350 -213.25894165]
[45.85769653 -216.11064148]
[60.57901764 -218.28181458]
[75.38520050 -219.76779175]
[90.24437714 -220.56536865]
[105.12455750 -220.67283630]
[119.99370575 -220.08995056]
[134.81980896 -218.81797791]
[149.57095337 -216.85966492]
[164.21537781 -214.21920776]
[178.72157288 -210.90229797]
[193.05828857 -206.91607666]
[207.19465637 -202.26913452]
[221.10026550 -196.97146606]
[234.74517822 -191.03446960]
[248.09999084 -184.47094727]
[261.13598633 -177.29499817]
[273.82510376 -169.52209473]
[286.13998413 -161.16897583]
[295.12915039 -173.17709351]
[304.11831665 -185.18521118]
[313.10748291 -197.19332886]
[322.09664917 -209.20144653]
[331.08581543 -221.20956421]
[327.34387207 -236.39283752]
[334.28335571 -250.40631104]
[348.62765503 -256.63327026]
[363.60385132 -252.13349915]
[372.14059448 -239.03169250]
[370.20715332 -223.51408386]
[358.71640015 -212.90765381]
[343.09393311 -212.22039795]
[334.10476685 -200.21228027]
[325.11560059 -188.20416260]
[316.12643433 -176.19604492]
[307.13726807 -164.18792725]
[298.14810181 -152.17980957]
[310.98547363 -141.54183960]
[323.25265503 -130.25111389]
[334.91650391 -118.33816528]
[345.94552612 -105.83517456]
[356.30990601 -92.77592468]
[365.98162842 -79.19570923]
[374.93453979 -65.13123322]
[383.14447021 -50.62050247]
[390.58923340 -35.70273209]
[397.24868774 -20.41823196]
[403.10482788 -4.80831337]
[408.14187622 11.08484268]
[412.34619141 27.21828461]
[415.70642090 43.54841232]
[418.21347046 60.03109741]
[419.86056519 76.62179565]
[420.64328003 93.27567291]
[420.55944824 109.94772339]
[419.60937500 126.59288788]
[417.79553223 143.16618347]
[415.12289429 159.62283325]
[411.59866333 175.91835022]
[407.23236084 192.00871277]
[402.03576660 207.85041809]
[396.02297974 223.40068054]
[389.21017456 238.61744690]
[381.61581421 253.45960999]
[373.26040649 267.88705444]
[364.16656494 281.86080933]
[354.35879517 295.34310913]
[366.03842163 304.75515747]
[377.71804810 314.16717529]
[393.02520752 310.96954346]
[406.78207397 318.40478516]
[412.49304199 332.96218872]
[407.46163940 347.76824951]
[394.06344604 355.83193970]
[378.62475586 353.34585571]
[368.43521118 341.48385620]
[368.30599976 325.84680176]
[356.62637329 316.43475342]
[344.94674683 307.02273560]
[335.69631958 317.49615479]
[325.99841309 327.55667114]
[315.87149048 337.18521118]
[305.33477783 346.36346436]
[294.40823364 355.07403564]
[283.11264038 363.30038452]
[271.46942139 371.02688599]
[259.50067139 378.23886108]
[247.22915649 384.92263794]
[234.67813110 391.06549072]
[221.87142944 396.65582275]
[208.83337402 401.68298340]
[195.58869934 406.13742065]
[182.16258240 410.01071167]
[168.58047485 413.29547119]
[154.86817932 415.98544312]
[141.05171204 418.07559204]
[127.15731812 419.56188965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 48]
[35 47]
[36 46]
[37 45]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[145 157]
[146 156]
[147 155]
] def

init

% Start Annotations
35 47 0.48 1 colorpair
36 46 0.16 0.6 colorpair
37 45 0.32 1 colorpair
98 114 0.16 1 colorpair
101 111 0.0 0.6 colorpair
102 110 0.0 0.6 colorpair
145 157 0.32 1 colorpair
146 156 0.0 1 colorpair
147 155 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
34 48 4 gmark
34 cmark
48 cmark
35 cmark
47 cmark
36 46 1 gmark
36 cmark
37 cmark
45 cmark
97 115 4 gmark
97 cmark
115 cmark
98 cmark
99 113 3 gmark
99 cmark
113 cmark
100 112 6 gmark
100 cmark
112 cmark
101 111 1 gmark
102 110 1 gmark
145 cmark
157 cmark

% End Annotations
showpage
end
%%EOF
