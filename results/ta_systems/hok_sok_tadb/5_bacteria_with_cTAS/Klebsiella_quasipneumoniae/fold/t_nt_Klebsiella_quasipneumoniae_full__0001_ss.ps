%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGAGGCUACUCUUAUGGUGUUCAUGCA_UA_GGGGAGCCUCACU_______UUGAUUACUAUCA______GGUGGGGCUUUUCUCUGUCUGCCUCCCG_________CUGAAUACC_________UGAGACACACAGUCUCAAGCACCCGC_________\
) } def
/len { sequence length } bind def

/coor [
[193.03939819 214.96717834]
[191.79841614 198.69215393]
[192.52597046 182.38505554]
[195.21171570 166.28314209]
[199.81683350 150.62071228]
[186.01425171 144.74800110]
[172.21168518 138.87527466]
[158.40910339 133.00254822]
[144.60652161 127.12983704]
[139.89138794 133.68154907]
[134.22268677 139.42813110]
[127.73590088 144.23222351]
[120.58612061 147.97897339]
[112.94424438 150.57881165]
[104.99294281 151.96960449]
[96.92228699 152.11811829]
[88.92520142 151.02076721]
[81.19285583 148.70381165]
[73.91007996 145.22262573]
[67.25096130 140.66043091]
[61.37468338 135.12626648]
[48.94269180 143.51945496]
[36.51070023 151.91264343]
[29.81839752 166.88412476]
[13.48090172 168.30477905]
[4.30482864 154.71318054]
[11.72973442 140.09118652]
[28.11751366 139.48065186]
[40.54950333 131.08746338]
[52.98149490 122.69427490]
[48.07971191 105.48213196]
[49.27870941 87.62581635]
[56.43759537 71.22350311]
[47.90631866 67.82798004]
[45.12272644 60.94359970]
[34.11764526 50.75104523]
[23.11256599 40.55848694]
[7.73024082 36.85786057]
[3.65012217 22.53298950]
[-7.35495806 12.34043217]
[-18.36003876 2.14787579]
[-29.36511803 -8.04468060]
[-40.37019730 -18.23723793]
[-51.37527847 -28.42979431]
[-62.38035965 -38.62234879]
[-73.38543701 -48.81490707]
[-84.39051819 -59.00746536]
[-96.31488037 -52.69973755]
[-109.58242035 -50.39007950]
[-122.89163208 -52.29073715]
[-134.94134521 -58.20162964]
[-144.55792236 -67.53131866]
[-150.80958557 -79.35616302]
[-153.09667969 -92.51174164]
[-151.20918274 -105.70748901]
[-145.34585571 -117.65336609]
[-155.95246887 -128.25996399]
[-166.55906677 -138.86656189]
[-177.16566467 -149.47317505]
[-193.13745117 -153.19262695]
[-197.64263916 -168.96080017]
[-186.04669189 -180.55674744]
[-170.27851868 -176.05154419]
[-166.55906677 -160.07977295]
[-155.95246887 -149.47317505]
[-145.34585571 -138.86656189]
[-134.73925781 -128.25996399]
[-119.55157471 -134.98762512]
[-102.90864563 -135.38645935]
[-87.34778595 -129.36758423]
[-75.25206757 -117.82268524]
[-68.48541260 -102.49198151]
[-68.10536957 -85.70201874]
[-74.19795990 -70.01254272]
[-63.19288254 -59.81998825]
[-52.18780136 -49.62742996]
[-41.18272400 -39.43487549]
[-30.17764282 -29.24231720]
[-19.17256165 -19.04976082]
[-8.16748142 -8.85720444]
[2.83759856 1.33535218]
[13.84267902 11.52790833]
[28.43784714 14.49949741]
[33.30512238 29.55340767]
[44.31020355 39.74596405]
[55.31528091 49.93851852]
[66.41748047 60.02520370]
[82.70603943 50.73856735]
[101.22509766 47.80546951]
[119.58615112 51.60420990]
[135.42106628 61.64484024]
[146.68751526 76.63236237]
[151.93238831 94.63375092]
[150.47924805 113.32725525]
[164.28182983 119.19997406]
[178.08439636 125.07269287]
[191.88697815 130.94541931]
[205.68955994 136.81813049]
[212.42301941 124.75893402]
[220.34999084 113.44928741]
[229.38781738 103.00688934]
[239.44229126 93.54037476]
[250.40859985 85.14821625]
[262.17248535 77.91770172]
[274.61135864 71.92398834]
[287.59567261 67.22937012]
[300.99014282 63.88259888]
[314.65527344 61.91838837]
[328.44873047 61.35705185]
[342.22689819 62.20429611]
[355.84631348 64.45116425]
[369.16519165 68.07411194]
[382.04486084 73.03529358]
[394.35128784 79.28290558]
[405.95632935 86.75177765]
[416.73928833 95.36401367]
[426.58792114 105.02982330]
[435.39981079 115.64846802]
[443.08328247 127.10928345]
[449.55844116 139.29284668]
[454.75799561 152.07223511]
[458.62792969 165.31431580]
[461.12808228 178.88117981]
[462.23257446 192.63150024]
[461.93002319 206.42211914]
[460.22369385 220.10942078]
[457.13153076 233.55090332]
[452.68588257 246.60662842]
[446.93313599 259.14068604]
[459.82666016 266.80596924]
[472.72021484 274.47125244]
[485.61376953 282.13653564]
[498.50729370 289.80181885]
[511.40084839 297.46710205]
[527.24084473 294.92251587]
[539.00885010 305.82629395]
[537.67755127 321.81402588]
[524.26812744 330.62124634]
[509.06719971 325.49185181]
[503.73556519 310.36062622]
[490.84201050 302.69537354]
[477.94848633 295.03009033]
[465.05493164 287.36480713]
[452.16137695 279.69952393]
[439.26785278 272.03424072]
[429.38034058 284.99462891]
[418.00363159 296.67108154]
[405.30307007 306.89352417]
[391.46328735 315.51309204]
[376.68542480 322.40411377]
[361.18444824 327.46612549]
[345.18572998 330.62527466]
[328.92199707 331.83532715]
[312.62982178 331.07846069]
[296.54629517 328.36538696]
[280.90536499 323.73535156]
[265.93472290 317.25546265]
[251.85220337 309.01977539]
[238.86283875 299.14788818]
[227.15576172 287.78320312]
[216.90144348 275.09088135]
[208.24926758 261.25540161]
[201.32533264 246.47795105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[21 30]
[22 29]
[23 28]
[33 87]
[35 86]
[36 85]
[37 84]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[56 67]
[57 66]
[58 65]
[59 64]
[129 145]
[130 144]
[131 143]
[132 142]
[133 141]
[134 140]
] def

init

% Start Annotations
5 98 0.0 1 colorpair
6 97 0.0 0.2 colorpair
7 96 0.0 1 colorpair
8 95 0.16 1 colorpair
9 94 0.0 1 colorpair
21 30 0.0 1 colorpair
22 29 0.0 1 colorpair
23 28 0.0 0.2 colorpair
33 87 0.16 0.2 colorpair
35 86 0.16 1 colorpair
36 85 0.16 1 colorpair
37 84 0.16 1 colorpair
39 82 0.16 1 colorpair
40 81 0.0 1 colorpair
41 80 0.0 1 colorpair
42 79 0.0 1 colorpair
43 78 0.0 1 colorpair
44 77 0.0 1 colorpair
45 76 0.16 1 colorpair
46 75 0.16 1 colorpair
47 74 0.16 1 colorpair
56 67 0.0 1 colorpair
57 66 0.16 1 colorpair
58 65 0.0 1 colorpair
59 64 0.0 1 colorpair
129 145 0.0 1 colorpair
130 144 0.0 1 colorpair
131 143 0.0 1 colorpair
132 142 0.0 1 colorpair
133 141 0.16 1 colorpair
134 140 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 97 2 gmark
95 cmark
23 28 2 gmark
33 87 2 gmark
33 cmark
35 cmark
86 cmark
85 cmark
37 cmark
39 cmark
45 cmark
76 cmark
46 cmark
75 cmark
47 cmark
74 cmark
57 cmark
66 cmark
133 cmark
141 cmark

% End Annotations
showpage
end
%%EOF
