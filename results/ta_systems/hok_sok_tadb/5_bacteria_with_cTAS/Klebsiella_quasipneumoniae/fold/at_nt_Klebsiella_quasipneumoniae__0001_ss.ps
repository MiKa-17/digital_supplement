%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCU__UGUGGCAAUCAUCA_UACUCUGUAUUACGGUACUGGGAUUUACGCUGUUGGUGCGCAACUCGCUAUGCGAACUCAGGAUUAAAGAGCGUAAUAUUGAGUUUAAAGCUGUUCUCGCUUACGAAUCG___AAGAAGUAGC_AUCC___GCGCGGGGGCAACCCCGCGUAUCGGUUGUCAGGACG____CAUCCUCUUGCACC__CAUUUUUAGUUUGUUAA_____\
) } def
/len { sequence length } bind def

/coor [
[343.71731567 610.61755371]
[332.40563965 605.97009277]
[321.24673462 600.96691895]
[310.25180054 595.61297607]
[299.43182373 589.91369629]
[288.79766846 583.87475586]
[278.36001587 577.50219727]
[268.12927246 570.80242920]
[258.11572266 563.78216553]
[248.32943726 556.44848633]
[238.78016663 548.80859375]
[229.47750854 540.87030029]
[220.43080139 532.64147949]
[211.64909363 524.13043213]
[203.14118958 515.34558105]
[194.91561890 506.29586792]
[186.98062134 496.99029541]
[179.34417725 487.43820190]
[172.01390076 477.64913940]
[164.99717712 467.63293457]
[158.30101013 457.39959717]
[151.93212891 446.95944214]
[145.89691162 436.32290649]
[140.20141602 425.50061035]
[134.85133362 414.50344849]
[129.85205078 403.34243774]
[125.20856476 392.02874756]
[120.92553711 380.57373047]
[117.00724792 368.98889160]
[113.45764160 357.28576660]
[110.28026581 345.47613525]
[107.47830963 333.57183838]
[105.05458832 321.58480835]
[103.01152039 309.52703857]
[101.35115814 297.41061401]
[100.07517242 285.24771118]
[99.18484497 273.05047607]
[98.68106079 260.83117676]
[98.56432343 248.60203552]
[98.83476257 236.37530518]
[99.49209595 224.16325378]
[100.53567505 211.97810364]
[101.96444702 199.83209229]
[103.77699280 187.73736572]
[105.97148132 175.70608521]
[108.54572296 163.75025940]
[111.49713898 151.88191223]
[114.82276154 140.11293030]
[118.51927948 128.45509338]
[122.58296204 116.92010498]
[108.61985779 111.43999481]
[94.76687622 113.33378601]
[85.90002441 102.52311707]
[71.93692017 97.04299927]
[57.97381210 91.56288147]
[46.88845825 103.21769714]
[32.21338654 109.70793152]
[16.20974159 110.06594849]
[1.33096755 104.26646423]
[-10.15330124 93.22592926]
[-16.50345230 78.65779877]
[-16.77337456 62.80668259]
[-30.80971718 57.51696777]
[-44.84605789 52.22724915]
[-60.48819733 54.60087585]
[-69.66928101 42.87240601]
[-83.70561981 37.58268738]
[-97.74195862 32.29297256]
[-111.77830505 27.00325584]
[-128.73210144 27.07551956]
[-133.49481201 10.80429268]
[-119.17792511 1.72337961]
[-106.48858643 12.96691418]
[-92.45224762 18.25662994]
[-78.41590118 23.54634666]
[-64.37956238 28.83606339]
[-49.74139786 26.08408165]
[-39.55634308 38.19090652]
[-25.52000046 43.48062515]
[-11.48365784 48.77033997]
[-2.28838873 38.17860794]
[9.99497700 31.34522629]
[23.90222359 29.10806656]
[37.76758575 31.75572205]
[49.92327118 38.99046326]
[58.90006256 49.96155548]
[63.60489655 63.36526871]
[63.45392990 77.59977722]
[77.41703796 83.07989502]
[91.38014221 88.56000519]
[105.23312378 86.66621399]
[114.09997559 97.47688293]
[128.06307983 102.95700073]
[139.11125183 78.74147034]
[151.80056763 55.34446335]
[166.07072449 32.87704086]
[181.85397339 11.44584560]
[199.07533264 -8.84740639]
[217.65301514 -27.90639877]
[237.49880981 -45.64067841]
[258.51843262 -61.96608734]
[280.61212158 -76.80514526]
[303.67492676 -90.08744049]
[327.59738159 -101.74996185]
[352.26583862 -111.73736572]
[377.56320190 -120.00227356]
[403.36935425 -126.50550079]
[429.56179810 -131.21620178]
[456.01614380 -134.11204529]
[482.60681152 -135.17935181]
[482.81079102 -150.17796326]
[483.01480103 -165.17657471]
[471.05615234 -175.25251770]
[468.42291260 -190.66679382]
[476.35842896 -204.14126587]
[491.11578369 -209.31370544]
[505.72702026 -203.74183655]
[513.29315186 -190.05651855]
[510.24166870 -174.71955872]
[498.01339722 -164.97257996]
[497.80941772 -149.97396851]
[497.60543823 -134.97535706]
[509.81842041 -134.37873840]
[522.00646973 -133.39581299]
[534.15728760 -132.02757263]
[546.25866699 -130.27539062]
[558.29858398 -128.14100647]
[570.26489258 -125.62657928]
[582.14569092 -122.73461151]
[593.92895508 -119.46800232]
[605.60290527 -115.83003998]
[617.15588379 -111.82434845]
[628.57629395 -107.45495605]
[639.85266113 -102.72623444]
[650.97369385 -97.64292908]
[661.92828369 -92.21012878]
[672.70544434 -86.43328094]
[683.29431152 -80.31816864]
[693.68432617 -73.87092590]
[703.86505127 -67.09801483]
[713.82629395 -60.00621796]
[723.55804443 -52.60264969]
[733.05059814 -44.89472198]
[742.29443359 -36.89016342]
[751.28021240 -28.59699440]
[759.99902344 -20.02352715]
[768.44207764 -11.17835617]
[776.60089111 -2.07034326]
[784.46734619 7.29138231]
[792.03350830 16.89743805]
[799.29180908 26.73819733]
[806.23498535 36.80379486]
[812.85601807 47.08414841]
[819.14837646 57.56895065]
[825.10565186 68.24768829]
[830.72198486 79.10967255]
[835.99157715 90.14400482]
[840.90930176 101.33963013]
[845.47021484 112.68532562]
[849.66961670 124.16972351]
[853.50341797 135.78131104]
[856.96777344 147.50845337]
[860.05914307 159.33940125]
[862.77441406 171.26228333]
[865.11096191 183.26515198]
[867.06640625 195.33599854]
[868.63873291 207.46269226]
[869.82641602 219.63310242]
[870.62829590 231.83502197]
[871.04351807 244.05622864]
[871.07159424 256.28448486]
[870.71264648 268.50747681]
[869.96691895 280.71301270]
[868.83526611 292.88885498]
[867.31866455 305.02276611]
[865.41882324 317.10263062]
[863.13745117 329.11630249]
[860.47698975 341.05175781]
[857.44000244 352.89700317]
[854.02960205 364.64022827]
[850.24920654 376.26959229]
[846.10253906 387.77349854]
[841.59375000 399.14038086]
[836.72747803 410.35885620]
[831.50848389 421.41769409]
[825.94201660 432.30578613]
[820.03369141 443.01220703]
[813.78942871 453.52627563]
[807.21539307 463.83743286]
[800.31829834 473.93530273]
[793.10504150 483.80981445]
[785.58276367 493.45108032]
[777.75909424 502.84936523]
[769.64178467 511.99533081]
[761.23901367 520.87976074]
[752.55926514 529.49377441]
[743.61114502 537.82867432]
[734.40368652 545.87622070]
[724.94604492 553.62823486]
[715.24780273 561.07702637]
[705.31854248 568.21508789]
[695.16833496 575.03527832]
[684.80731201 581.53070068]
[674.24584961 587.69494629]
[663.49456787 593.52178955]
[652.56420898 599.00537109]
[641.46569824 604.14025879]
[630.21020508 608.92120361]
[618.80902100 613.34350586]
[607.27349854 617.40264893]
[595.61529541 621.09466553]
[583.84606934 624.41577148]
[571.97753906 627.36267090]
[560.02166748 629.93237305]
[547.99047852 632.12237549]
[535.89593506 633.93041992]
[523.75024414 635.35467529]
[511.56552124 636.39379883]
[499.35397339 637.04663086]
[487.12789917 637.31262207]
[474.89950562 637.19146729]
[462.68106079 636.68328857]
[450.48480225 635.78863525]
[438.32296753 634.50830078]
[426.20776367 632.84362793]
[414.15127563 630.79626465]
[402.16564941 628.36834717]
[390.26284790 625.56219482]
[378.45486450 622.38067627]
[366.75344849 618.82696533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[50 93]
[51 92]
[53 90]
[54 89]
[55 88]
[62 80]
[63 79]
[64 78]
[66 76]
[67 75]
[68 74]
[69 73]
[110 122]
[111 121]
[112 120]
] def

init

% Start Annotations
50 93 0.32 0.2 colorpair
55 88 0.16 1 colorpair
63 79 0.16 1 colorpair
66 76 0.0 0.6 colorpair
67 75 0.0 0.6 colorpair
69 73 0.16 0.6 colorpair
110 122 0.32 1 colorpair
111 121 0.0 1 colorpair
112 120 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
50 93 2 gmark
50 cmark
93 cmark
51 92 3 gmark
51 cmark
53 90 5 gmark
53 cmark
90 cmark
54 89 4 gmark
54 cmark
89 cmark
88 cmark
62 80 3 gmark
62 cmark
80 cmark
63 cmark
64 78 3 gmark
64 cmark
78 cmark
66 76 1 gmark
67 75 1 gmark
68 74 4 gmark
68 cmark
74 cmark
69 73 1 gmark
69 cmark
110 cmark
122 cmark

% End Annotations
showpage
end
%%EOF
