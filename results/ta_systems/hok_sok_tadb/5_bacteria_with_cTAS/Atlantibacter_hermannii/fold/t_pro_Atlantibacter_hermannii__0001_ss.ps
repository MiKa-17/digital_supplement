%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:17:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____CCACUACGCUAUCUGUUUGCGUGUUUAUUAGUUAUUUGCGUAACAGUACUGUUUUUUUCUUUAUUUAAUCGCGGUCUGCUUUGCGAAUUAAGAAUAAAGAACGGAAAUCAGGAGGUGGCGGCGAAAUUAGCCUGC_____C_GG___\
) } def
/len { sequence length } bind def

/coor [
[11.01683235 604.07891846]
[0.00042207 602.01867676]
[-10.87210655 599.29895020]
[-21.56130791 595.92956543]
[-32.02840424 591.92272949]
[-42.23542023 587.29296875]
[-52.14532471 582.05706787]
[-61.72216034 576.23400879]
[-70.93118286 569.84497070]
[-79.73896790 562.91296387]
[-88.11356354 555.46319580]
[-96.02458191 547.52270508]
[-103.44331360 539.12030029]
[-110.34282684 530.28637695]
[-116.69809723 521.05303955]
[-122.48603821 511.45370483]
[-127.68566132 501.52322388]
[-132.27807617 491.29763794]
[-136.24661255 480.81399536]
[-139.57685852 470.11032104]
[-142.25672913 459.22543335]
[-144.27647400 448.19885254]
[-145.62875366 437.07055664]
[-146.30865479 425.88088989]
[-146.31370544 414.67044067]
[-145.64382935 403.47988892]
[-144.30148315 392.34985352]
[-142.29150391 381.32067871]
[-139.62117004 370.43237305]
[-136.30015564 359.72445679]
[-132.34046936 349.23577881]
[-127.75649261 339.00436401]
[-122.56481934 329.06735229]
[-116.78427887 319.46078491]
[-110.43582153 310.21954346]
[-103.54245758 301.37716675]
[-96.12918854 292.96569824]
[-88.22289276 285.01565552]
[-79.85223389 277.55593872]
[-71.04756927 270.61361694]
[-61.84083176 264.21383667]
[-52.26540375 258.37985229]
[-42.35601044 253.13282776]
[-32.14859772 248.49183655]
[-21.68017960 244.47372437]
[-10.98872566 241.09306335]
[-0.11301680 238.36213684]
[10.90750122 236.29087830]
[22.03285408 234.88681030]
[33.22268677 234.15502930]
[44.43640900 234.09823608]
[55.63334656 234.71661377]
[66.77288055 236.00796509]
[69.54704285 221.26673889]
[72.32121277 206.52549744]
[75.09537506 191.78425598]
[77.86954498 177.04302979]
[80.64371490 162.30178833]
[83.41787720 147.56056213]
[86.19204712 132.81932068]
[88.96620941 118.07808685]
[79.34898376 104.70076752]
[82.22856140 88.47881317]
[95.86239624 79.22882080]
[98.33131409 64.43339539]
[100.80023193 49.63797760]
[103.26914978 34.84255981]
[95.01948547 27.90515900]
[90.45956421 18.22788620]
[90.36302948 7.61165476]
[94.67977905 -1.99895132]
[102.55751038 -8.87186432]
[112.50911713 -11.79962254]
[115.89009094 -26.41362190]
[119.27107239 -41.02762222]
[122.65205383 -55.64162064]
[126.03302765 -70.25562286]
[129.41400146 -84.86962128]
[120.83361053 -98.14186096]
[124.23287964 -113.57625580]
[137.59509277 -122.01584625]
[152.99269104 -118.45358276]
[161.29054260 -105.00289154]
[157.56568909 -89.64382172]
[144.02801514 -81.48863983]
[140.64703369 -66.87464142]
[137.26605225 -52.26064301]
[133.88507080 -37.64664459]
[130.50408936 -23.03264427]
[127.12311554 -8.41864395]
[138.64881897 7.22038603]
[134.99909973 26.60982323]
[118.06456757 37.31147766]
[115.59564972 52.10689926]
[113.12673187 66.90232086]
[110.65781403 81.69773865]
[119.21667480 91.09600830]
[120.85327911 103.70169067]
[114.97808075 114.97394562]
[103.70745087 120.85225677]
[100.93328094 135.59349060]
[98.15911102 150.33473206]
[95.38494873 165.07595825]
[92.61077881 179.81719971]
[89.83660889 194.55842590]
[87.06244659 209.29966736]
[84.28827667 224.04089355]
[81.51411438 238.78213501]
[103.43015289 245.27786255]
[124.38399506 254.40972900]
[144.05992126 266.03982544]
[162.16151428 279.99261475]
[178.41610718 296.05761719]
[192.57891846 313.99240112]
[204.43669128 333.52655029]
[213.81092834 354.36544800]
[220.56062317 376.19491577]
[224.58430481 398.68582153]
[225.82160950 421.49911499]
[224.25415039 444.29092407]
[219.90585327 466.71780396]
[212.84254456 488.44171143]
[203.17092896 509.13531494]
[191.03707886 528.48687744]
[202.87417603 537.70001221]
[214.71128845 546.91320801]
[229.96218872 543.45721436]
[243.84280396 550.65875244]
[249.79914856 565.11755371]
[245.01881409 580.00653076]
[231.75891113 588.29565430]
[216.28038025 586.07098389]
[205.89170837 574.38299561]
[205.49809265 558.75036621]
[193.66099548 549.53717041]
[181.82388306 540.32397461]
[174.33786011 548.66149902]
[166.36337280 556.53338623]
[157.92936707 563.91101074]
[149.06640625 570.76757812]
[139.80664062 577.07818604]
[130.18365479 582.82000732]
[120.23233032 587.97216797]
[109.98876953 592.51593018]
[99.49012756 596.43481445]
[88.77448273 599.71466064]
[77.88069153 602.34344482]
[66.84826660 604.31164551]
[55.71723938 605.61212158]
[44.52797699 606.24017334]
[33.32106400 606.19348145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
[64 96]
[65 95]
[66 94]
[67 93]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[124 136]
[125 135]
[126 134]
] def

init

% Start Annotations
53 108 0.0 0.6 colorpair
54 107 0.16 0.6 colorpair
55 106 0.16 0.6 colorpair
56 105 0.0 0.6 colorpair
57 104 0.0 0.2 colorpair
58 103 0.16 0.6 colorpair
59 102 0.0 0.6 colorpair
60 101 0.0 0.6 colorpair
61 100 0.0 0.2 colorpair
64 96 0.16 0.6 colorpair
65 95 0.0 1 colorpair
66 94 0.16 1 colorpair
67 93 0.16 1 colorpair
73 90 0.0 0.2 colorpair
74 89 0.0 1 colorpair
75 88 0.0 0.2 colorpair
76 87 0.0 0.2 colorpair
77 86 0.0 1 colorpair
78 85 0.0 0.2 colorpair
124 136 0.16 1 colorpair
125 135 0.0 1 colorpair
126 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
53 108 1 gmark
54 107 1 gmark
107 cmark
55 106 1 gmark
55 cmark
106 cmark
56 105 1 gmark
57 104 2 gmark
58 103 1 gmark
103 cmark
59 102 1 gmark
60 101 1 gmark
61 100 2 gmark
64 96 1 gmark
64 cmark
66 cmark
94 cmark
67 cmark
73 90 2 gmark
75 88 2 gmark
76 87 2 gmark
78 85 2 gmark
136 cmark

% End Annotations
showpage
end
%%EOF
