%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:17:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGCGGCUAUUCUCAACUUGUC_GGAGUUGAGAGAUAGCCUCGGGUUAAUAGAAAUAUUGCCCGGGGCUUUUCUCUUUCUGUCCCUCGUCCAUGUGUACUUAAGACAGAAAGCCUUAAGCACCCG\
) } def
/len { sequence length } bind def

/coor [
[129.85542297 144.12220764]
[119.19963837 154.67939758]
[104.45307159 157.42509460]
[90.71173859 151.41047668]
[82.72425842 138.71400452]
[83.25088501 123.72325897]
[92.10991669 111.61840057]
[78.11502838 117.01682281]
[64.12013245 122.41524506]
[50.12524414 127.81367493]
[36.13035202 133.21209717]
[22.13545799 138.61051941]
[8.20786762 144.18028259]
[-5.65032530 149.92053223]
[-19.50851822 155.66078186]
[-33.36671066 161.40103149]
[-47.22490311 167.14129639]
[-61.08309555 172.88154602]
[-74.94129181 178.62179565]
[-88.79948425 184.36204529]
[-102.65767670 190.10229492]
[-110.10079956 204.31423950]
[-125.87953949 207.21438599]
[-137.88980103 196.57797241]
[-136.91833496 180.56436157]
[-123.71037292 171.45782471]
[-108.39792633 176.24409485]
[-94.53973389 170.50384521]
[-80.68154144 164.76359558]
[-66.82334900 159.02334595]
[-52.96515656 153.28309631]
[-39.10696411 147.54284668]
[-25.24876976 141.80259705]
[-11.39057732 136.06234741]
[2.46761608 130.32208252]
[7.49626637 124.79759979]
[16.73703384 124.61563110]
[30.73192596 119.21720886]
[44.72681808 113.81877899]
[58.72171021 108.42035675]
[72.71659851 103.02193451]
[86.71149445 97.62350464]
[86.75409698 95.39749146]
[87.17826843 93.13028717]
[87.99714661 90.88835907]
[81.58382416 77.32852173]
[75.17049408 63.76868439]
[68.75717163 50.20884323]
[62.19004822 43.70516968]
[62.35741806 36.23661804]
[56.27880096 22.52347183]
[50.20018005 8.81032467]
[44.12155914 -4.90282154]
[30.55861855 -14.12120819]
[32.03019333 -30.45419693]
[47.02245331 -37.09980774]
[60.11264801 -27.22160721]
[57.83470535 -10.98144150]
[63.91332626 2.73170519]
[69.99194336 16.44485092]
[76.07056427 30.15799713]
[82.31700897 43.79551697]
[88.73033905 57.35535812]
[95.14366150 70.91519928]
[101.55699158 84.47503662]
[114.22978973 92.50000000]
[129.22979736 92.50000000]
[144.22979736 92.50000000]
[159.22866821 92.31592560]
[174.22415161 91.94780731]
[189.21961975 91.57968903]
[204.21510315 91.21157074]
[211.62538147 77.83117676]
[224.65213013 70.00807953]
[239.74530029 69.75743866]
[252.84974670 77.04643250]
[260.49475098 89.82998657]
[275.49023438 89.46186829]
[290.48571777 89.09375000]
[305.48120117 88.72563171]
[320.47668457 88.35751343]
[335.47216797 87.98939514]
[350.46765137 87.62127686]
[365.46313477 87.25315094]
[380.45861816 86.88503265]
[387.86889648 73.50463867]
[400.89562988 65.68154907]
[415.98880005 65.43090057]
[429.09326172 72.71989441]
[436.73828125 85.50344849]
[451.73376465 85.13533020]
[460.43243408 72.28572083]
[475.03405762 67.03480530]
[489.92401123 71.40166473]
[499.37677002 83.70714569]
[499.75756836 99.21954346]
[490.92001343 111.97402954]
[476.26226807 117.06623840]
[461.42059326 112.53811646]
[452.10186768 100.13081360]
[437.10638428 100.49893188]
[430.09783936 113.64221191]
[417.36682129 121.56542969]
[402.27954102 122.05567169]
[388.88464355 114.88119507]
[380.82675171 101.88051605]
[365.83126831 102.24863434]
[350.83578491 102.61675262]
[335.84030151 102.98487091]
[320.84481812 103.35298920]
[305.84933472 103.72110748]
[290.85385132 104.08922577]
[275.85836792 104.45734406]
[260.86288452 104.82546234]
[253.85432434 117.96874237]
[241.12332153 125.89196014]
[226.03604126 126.38220215]
[212.64112854 119.20772552]
[204.58322144 106.20705414]
[189.58773804 106.57517242]
[174.59226990 106.94329071]
[159.59678650 107.31140900]
[152.91685486 110.65592957]
[144.22979736 107.50000000]
[129.22979736 107.50000000]
[114.22978973 107.50000000]
[126.85145569 115.60515594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[45 65]
[46 64]
[47 63]
[48 62]
[50 61]
[51 60]
[52 59]
[53 58]
[66 126]
[67 125]
[68 124]
[69 122]
[70 121]
[71 120]
[72 119]
[77 114]
[78 113]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[90 101]
[91 100]
] def

init

% Start Annotations
7 42 0.0 1 colorpair
8 41 0.0 1 colorpair
9 40 0.0 1 colorpair
10 39 0.0 1 colorpair
11 38 0.0 1 colorpair
12 37 0.0 1 colorpair
13 35 0.16 1 colorpair
14 34 0.0 1 colorpair
15 33 0.0 1 colorpair
16 32 0.0 1 colorpair
17 31 0.0 1 colorpair
18 30 0.0 1 colorpair
19 29 0.0 1 colorpair
20 28 0.16 1 colorpair
21 27 0.0 1 colorpair
45 65 0.0 1 colorpair
46 64 0.0 1 colorpair
47 63 0.0 1 colorpair
48 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair
66 126 0.0 1 colorpair
67 125 0.0 1 colorpair
68 124 0.0 1 colorpair
69 122 0.0 1 colorpair
70 121 0.0 1 colorpair
71 120 0.0 1 colorpair
72 119 0.0 1 colorpair
77 114 0.0 1 colorpair
78 113 0.0 1 colorpair
79 112 0.0 1 colorpair
80 111 0.0 1 colorpair
81 110 0.0 1 colorpair
82 109 0.0 1 colorpair
83 108 0.0 1 colorpair
84 107 0.0 1 colorpair
85 106 0.0 1 colorpair
90 101 0.0 1 colorpair
91 100 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
35 cmark
28 cmark

% End Annotations
showpage
end
%%EOF
