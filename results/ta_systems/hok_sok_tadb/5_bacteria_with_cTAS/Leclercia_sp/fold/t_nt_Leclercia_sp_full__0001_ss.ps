%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:15:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAUUCUGGAUGUGUCUAGCAUCAGGAUGCCUCGUUGGUUAAUUGAAAAAUUACCUUCGGGGCUUUCUUCUUUCUGCCUCACAACAACCAUAACAAACCCAUAACGUCAUGAGGCAAAAAGCCUCAAGCGCCAACGCCAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[98.79081726 151.59835815]
[96.95940399 136.71058655]
[95.12799072 121.82280731]
[84.19362640 118.31484985]
[75.70275879 109.32408905]
[72.36332703 96.50086212]
[59.91257477 104.86619568]
[47.46182251 113.23152161]
[35.01107025 121.59685516]
[22.56031609 129.96218872]
[17.14090157 137.39173889]
[9.76916790 138.36813354]
[-2.84963465 146.47773743]
[-15.46843815 154.58735657]
[-28.08724022 162.69697571]
[-40.70604324 170.80657959]
[-53.32484818 178.91619873]
[-58.89468765 186.23365784]
[-66.28480530 187.05947876]
[-79.06640625 194.90998840]
[-91.84800720 202.76051331]
[-104.62960815 210.61103821]
[-109.74234772 225.81759644]
[-124.86769867 231.16580200]
[-138.40278625 222.55296326]
[-139.96464539 206.58612061]
[-128.35516357 195.51365662]
[-112.48012543 197.82943726]
[-99.69852448 189.97891235]
[-86.91692352 182.12838745]
[-74.13532257 174.27787781]
[-61.43445969 166.29739380]
[-48.81565475 158.18777466]
[-36.19685364 150.07817078]
[-23.57805061 141.96855164]
[-10.95924664 133.85894775]
[1.65955603 125.74932861]
[14.19498634 117.51142883]
[26.64573860 109.14610291]
[39.09649277 100.78076935]
[51.54724503 92.41543579]
[63.99799728 84.05010986]
[64.60982513 69.06259155]
[49.11295700 70.63890839]
[37.35285950 60.98723602]
[35.94558716 46.20362473]
[24.21811485 36.85127640]
[12.49064255 27.49892998]
[3.77364087 24.56939125]
[0.62189525 17.83423615]
[-10.91236305 8.24461174]
[-22.44662094 -1.34501219]
[-33.98087692 -10.93463612]
[-50.22637177 -13.17428017]
[-56.15807724 -28.46306419]
[-45.67396545 -41.07319641]
[-29.55919266 -38.03245544]
[-24.39125443 -22.46889496]
[-12.85699654 -12.87926960]
[-1.32273829 -3.28964567]
[10.21151924 6.29997873]
[21.84298897 15.77145672]
[33.57046127 25.12380409]
[45.29793549 34.47615051]
[60.02403641 32.55847931]
[72.05059052 41.87602615]
[73.96217346 57.33512115]
[88.86785889 59.01458740]
[102.38239288 52.50633240]
[111.45882416 39.54759216]
[126.28279114 40.99650574]
[139.79733276 34.48824692]
[153.31185913 27.97999191]
[166.82638550 21.47173691]
[168.07177734 6.22718763]
[176.72332764 -6.26470900]
[190.37524414 -12.70611572]
[205.31837463 -11.45766830]
[217.54788208 -2.95444632]
[231.06240845 -9.46270275]
[244.57695007 -15.97095871]
[258.09149170 -22.47921562]
[267.16790771 -35.43795013]
[281.99188232 -33.98904037]
[295.50640869 -40.49729919]
[309.02093506 -47.00555420]
[322.53549194 -53.51380920]
[336.05001831 -60.02206421]
[349.56454468 -66.53031921]
[363.07907104 -73.03857422]
[368.38272095 -87.68471527]
[382.18109131 -94.09249115]
[396.11123657 -88.94602966]
[409.62579346 -95.45428467]
[407.15789795 -110.35684204]
[408.98986816 -125.35086060]
[414.97320557 -139.22084045]
[424.62286377 -150.84240723]
[437.15655518 -159.27345276]
[451.55828857 -163.83050537]
[466.66055298 -164.14416504]
[481.23907471 -160.18896484]
[494.11203003 -152.28558350]
[504.23587036 -141.07467651]
[510.78991699 -127.46507263]
[513.24285889 -112.56004333]
[511.39581299 -97.56787109]
[505.39855957 -83.70391083]
[495.73721313 -72.09204102]
[483.19503784 -63.67359161]
[468.78872681 -59.13100433]
[453.68615723 -58.83253098]
[439.11163330 -62.80236053]
[426.24661255 -70.71868134]
[416.13403320 -81.93975067]
[402.61950684 -75.43149567]
[397.95785522 -61.33169174]
[384.34490967 -54.53887177]
[369.58734131 -59.52404404]
[356.07281494 -53.01578903]
[342.55825806 -46.50753403]
[329.04373169 -39.99927521]
[315.52920532 -33.49102020]
[302.01467896 -26.98276520]
[288.50015259 -20.47450829]
[280.39035034 -7.98128557]
[264.59973145 -8.96468163]
[251.08520508 -2.45642567]
[237.57066345 4.05183029]
[224.05613708 10.56008625]
[223.07925415 25.42317200]
[214.73843384 37.88457870]
[201.19050598 44.54192352]
[186.02980042 43.51740646]
[173.33464050 34.98627090]
[159.82011414 41.49452591]
[146.30558777 48.00278091]
[132.79104614 54.51103592]
[124.68125916 67.00425720]
[108.89064789 66.02086639]
[95.37611389 72.52912140]
[113.71155548 77.34294891]
[123.86853790 92.20651245]
[121.90333557 109.14130402]
[110.01576996 119.99139404]
[111.84718323 134.87916565]
[113.67859650 149.76695251]
[126.89293671 158.12847900]
[131.59173584 173.04341125]
[125.55637360 187.46937561]
[111.63655090 194.59486389]
[96.40479279 191.05545044]
[87.05306244 178.52232361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 31]
[20 30]
[21 29]
[22 28]
[43 67]
[46 64]
[47 63]
[48 62]
[50 61]
[51 60]
[52 59]
[53 58]
[68 141]
[69 140]
[71 138]
[72 137]
[73 136]
[74 135]
[79 130]
[80 129]
[81 128]
[82 127]
[84 125]
[85 124]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
[93 116]
[94 115]
] def

init

% Start Annotations
1 147 0.0 1 colorpair
2 146 0.0 1 colorpair
3 145 0.0 1 colorpair
6 42 0.0 1 colorpair
7 41 0.0 1 colorpair
8 40 0.0 1 colorpair
9 39 0.0 1 colorpair
10 38 0.0 1 colorpair
12 37 0.0 1 colorpair
13 36 0.0 1 colorpair
14 35 0.0 1 colorpair
15 34 0.0 1 colorpair
16 33 0.0 1 colorpair
17 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.0 1 colorpair
22 28 0.0 1 colorpair
43 67 0.0 1 colorpair
46 64 0.0 1 colorpair
47 63 0.0 1 colorpair
48 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
52 59 0.0 1 colorpair
53 58 0.0 1 colorpair
68 141 0.0 1 colorpair
69 140 0.0 1 colorpair
71 138 0.0 1 colorpair
72 137 0.0 1 colorpair
73 136 0.0 1 colorpair
74 135 0.0 1 colorpair
79 130 0.0 1 colorpair
80 129 0.0 1 colorpair
81 128 0.0 1 colorpair
82 127 0.0 1 colorpair
84 125 0.0 1 colorpair
85 124 0.0 1 colorpair
86 123 0.0 1 colorpair
87 122 0.0 1 colorpair
88 121 0.0 1 colorpair
89 120 0.0 1 colorpair
90 119 0.0 1 colorpair
93 116 0.0 1 colorpair
94 115 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
