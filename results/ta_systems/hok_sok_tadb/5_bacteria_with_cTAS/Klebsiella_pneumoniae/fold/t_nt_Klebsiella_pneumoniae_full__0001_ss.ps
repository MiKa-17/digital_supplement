%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:53:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
G_UAAGAGGCUACUCUGAUGGUGUCUAGGCA_UAGGGGU_GCCUCGUGG______GU___UAAUGAAAAUUAAC____UACGGGGCUUUCUUCUUUCUGCCUCACAAC____A______CAAAACACC___AC_UCAUGAGGCACAAAGCCUCAAGCGCCCGC___AU_AUA\
) } def
/len { sequence length } bind def

/coor [
[281.47985840 67.36968994]
[269.94186401 57.78029251]
[258.86251831 47.66447067]
[248.26580811 37.04413223]
[238.17469788 25.94227791]
[228.61102295 14.38295174]
[216.62147522 23.39687729]
[204.63192749 32.41080475]
[192.64239502 41.42472839]
[180.65284729 50.43865585]
[180.64323425 63.34462357]
[173.08007812 74.04177856]
[160.54870605 78.48448181]
[147.56138611 74.83472443]
[135.41014099 83.62944794]
[123.25890350 92.42417908]
[111.10765839 101.21890259]
[99.03676605 110.12359619]
[87.12955475 119.24600983]
[75.30567169 128.47616577]
[76.81955719 143.82907104]
[69.77238464 157.55279541]
[56.41286469 165.26817322]
[41.00398636 164.51322937]
[28.46265602 155.52886963]
[22.79077339 141.18197632]
[25.79821396 126.05059052]
[36.52531052 114.96308136]
[51.54909134 111.45742798]
[66.07551575 116.65227509]
[77.89940643 107.42212677]
[81.24904633 100.80390167]
[90.02283478 98.13405609]
[94.07939148 91.13265991]
[102.31292725 89.06765747]
[114.46417236 80.27293396]
[126.61541748 71.47820282]
[138.76666260 62.68347549]
[141.20552063 45.37816620]
[155.12118530 35.37316895]
[171.63891602 38.44911194]
[183.62846375 29.43518639]
[195.61801147 20.42126083]
[207.60754395 11.40733433]
[219.59709167 2.39340901]
[211.14915466 -10.00474453]
[203.28720093 -22.78251648]
[196.02824402 -35.91223145]
[189.38801575 -49.36545563]
[183.38090515 -63.11304855]
[178.01989746 -77.12523651]
[173.31661987 -91.37167358]
[169.28126526 -105.82151031]
[165.92254639 -120.44344330]
[163.24777222 -135.20581055]
[161.26271057 -150.07662964]
[159.97166443 -165.02369690]
[159.37744141 -180.01464844]
[159.48132324 -195.01702881]
[160.28308105 -209.99830627]
[161.78099060 -224.92607117]
[163.97178650 -239.76797485]
[166.85073853 -254.49188232]
[170.41160583 -269.06591797]
[174.64668274 -283.45846558]
[179.54678345 -297.63842773]
[185.10131836 -311.57501221]
[191.29823303 -325.23809814]
[198.12413025 -338.59808350]
[205.56420898 -351.62603760]
[213.60235596 -364.29370117]
[222.22116089 -376.57366943]
[231.40197754 -388.43936157]
[241.12489319 -399.86508179]
[251.36888123 -410.82601929]
[262.11172485 -421.29852295]
[273.33016968 -431.25985718]
[284.99993896 -440.68844604]
[297.09573364 -449.56390381]
[309.59136963 -457.86697388]
[322.45974731 -465.57971191]
[335.67306519 -472.68536377]
[349.20263672 -479.16857910]
[363.01922607 -485.01531982]
[377.09283447 -490.21289062]
[391.39303589 -494.75006104]
[405.88885498 -498.61700439]
[420.54888916 -501.80532837]
[435.34136963 -504.30810547]
[450.23431396 -506.11999512]
[465.19537354 -507.23699951]
[480.19223022 -507.65670776]
[495.19238281 -507.37826538]
[510.16333008 -506.40222168]
[525.07263184 -504.73068237]
[539.88806152 -502.36730957]
[554.57745361 -499.31719971]
[569.10906982 -495.58697510]
[583.45135498 -491.18469238]
[597.57330322 -486.11990356]
[611.44433594 -480.40356445]
[625.03436279 -474.04806519]
[638.31402588 -467.06716919]
[651.25451660 -459.47598267]
[663.82775879 -451.29095459]
[676.00659180 -442.52981567]
[687.76464844 -433.21154785]
[699.07641602 -423.35632324]
[709.91741943 -412.98547363]
[720.26422119 -402.12149048]
[730.09429932 -390.78787231]
[739.38647461 -379.00918579]
[748.12054443 -366.81091309]
[756.27764893 -354.21951294]
[763.84008789 -341.26220703]
[770.79150391 -327.96713257]
[777.11682129 -314.36300659]
[782.80236816 -300.47933960]
[787.83581543 -286.34616089]
[792.20629883 -271.99414062]
[795.90423584 -257.45428467]
[798.92175293 -242.75814819]
[801.25225830 -227.93754578]
[802.89068604 -213.02455139]
[803.83349609 -198.05146790]
[804.07867432 -183.05075073]
[803.62567139 -168.05487061]
[802.47546387 -153.09629822]
[800.63055420 -138.20742798]
[798.09490967 -123.42053223]
[794.87408447 -108.76761627]
[790.97497559 -94.28041840]
[786.40612793 -79.99031067]
[781.17730713 -65.92825317]
[775.29992676 -52.12469101]
[768.78668213 -38.60952759]
[761.65173340 -25.41202545]
[753.91046143 -12.56077385]
[745.57971191 -0.08360378]
[736.67742920 11.99246216]
[727.22296143 23.64126968]
[717.23675537 34.83758926]
[706.74041748 45.55717087]
[695.75677490 55.77680206]
[684.30950928 65.47434998]
[672.42346191 74.62879944]
[660.12438965 83.22034454]
[647.43890381 91.23036194]
[634.39453125 98.64151001]
[621.01940918 105.43773651]
[607.34259033 111.60431671]
[593.39373779 117.12790680]
[579.20294189 121.99653625]
[564.80102539 126.19966125]
[550.21911621 129.72817993]
[535.48883057 132.57444763]
[520.64215088 134.73229980]
[505.71109009 136.19708252]
[490.72805786 136.96559143]
[475.72549438 137.03617859]
[460.73590088 136.40869141]
[445.79171753 135.08448792]
[430.92532349 133.06642151]
[416.16894531 130.35890198]
[401.55450439 126.96775055]
[387.11364746 122.90032959]
[372.87768555 118.16545105]
[358.87744141 112.77336884]
[345.14318848 106.73574829]
[331.70474243 100.06568909]
[318.59118652 92.77761841]
[305.83087158 84.88732147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[14 38]
[15 37]
[16 36]
[17 35]
[18 33]
[19 31]
[20 30]
] def

init

% Start Annotations
6 45 0.0 1 colorpair
7 44 0.0 1 colorpair
8 43 0.0 1 colorpair
9 42 0.0 1 colorpair
10 41 0.0 1 colorpair
15 37 0.0 1 colorpair
16 36 0.16 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
14 38 93 gmark
14 cmark
38 cmark
36 cmark
17 35 86 gmark
17 cmark
35 cmark
18 33 6 gmark
18 cmark
33 cmark

% End Annotations
showpage
end
%%EOF
