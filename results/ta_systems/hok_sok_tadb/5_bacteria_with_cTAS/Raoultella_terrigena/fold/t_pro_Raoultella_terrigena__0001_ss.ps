%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:17:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____ACUGCCACGAAGUACCCUGAUCUGGUGUGUAUUAAUAGUGUGCCUCACACUGCUGAUAUUCACUUACCUGACCCGUAAAUCGCUCUGCGAAAUCCGGUAC________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[152.91171265 435.01959229]
[144.65455627 422.48348999]
[137.60758972 409.22924805]
[131.83276367 395.37335205]
[127.38079834 381.03759766]
[124.29084015 366.34790039]
[122.59003448 351.43341064]
[122.29334259 336.42520142]
[123.40335083 321.45516968]
[125.91031647 306.65484619]
[129.79220581 292.15429688]
[135.01490784 278.08099365]
[141.53251648 264.55859375]
[149.28776550 251.70594788]
[158.21247864 239.63600159]
[168.22824097 228.45481873]
[179.24703979 218.26066589]
[170.13584900 206.34484863]
[161.02467346 194.42904663]
[151.91349792 182.51324463]
[142.80232239 170.59742737]
[130.82189941 168.67143250]
[123.13848877 158.76622009]
[124.32483673 145.88322449]
[115.45861816 133.78404236]
[106.59239960 121.68486023]
[87.85298157 122.39587402]
[72.82419586 107.86518097]
[72.85976410 84.80524445]
[59.21528625 78.57402039]
[45.57080841 72.34279633]
[31.92632675 66.11157227]
[16.15905762 67.41687012]
[7.79611492 55.09167099]
[-5.84836483 48.86044693]
[-19.49284554 42.62922287]
[-33.13732529 36.39799500]
[-46.78180313 30.16677094]
[-60.42628479 23.93554688]
[-76.19355011 25.24084282]
[-84.55649567 12.91564751]
[-98.20097351 6.68442249]
[-111.84545898 0.45319715]
[-125.48993683 -5.77802801]
[-139.13441467 -12.00925350]
[-152.77890015 -18.24047852]
[-166.42337036 -24.47170448]
[-183.34289551 -25.55157280]
[-186.98901367 -42.10881042]
[-172.08819580 -50.19594193]
[-160.19215393 -38.11618423]
[-146.54766846 -31.88495827]
[-132.90319824 -25.65373230]
[-119.25871277 -19.42250824]
[-105.61423492 -13.19128323]
[-91.96974945 -6.96005774]
[-78.32527161 -0.72883236]
[-63.53394699 -2.47982836]
[-54.19506073 10.29106617]
[-40.55057907 16.52229118]
[-26.90609932 22.75351715]
[-13.26161957 28.98474121]
[0.38286027 35.21596527]
[14.02733994 41.44719315]
[28.81866455 39.69619751]
[38.15755081 52.46709061]
[51.80203247 58.69831467]
[65.44651031 64.92954254]
[79.09099579 71.16076660]
[70.10424042 59.15084076]
[61.11749268 47.14091110]
[48.17943192 39.55101776]
[39.44979858 27.35292244]
[36.43965530 12.65805721]
[39.67004395 -1.98996675]
[48.58179474 -14.05564880]
[61.63233185 -21.45047760]
[76.56266785 -22.89444542]
[90.78843689 -18.13760757]
[101.84722900 -8.00335026]
[107.82481384 5.75413704]
[107.68650818 20.75349998]
[101.45761108 34.39658737]
[101.00169373 49.38965607]
[100.54578400 64.38272858]
[108.13394928 51.44364548]
[115.72210693 38.50456619]
[123.31026459 25.56548309]
[126.10732269 8.84385586]
[142.94976807 6.90259171]
[149.47761536 22.54942894]
[136.24934387 33.15364456]
[128.66119385 46.09272385]
[121.07302856 59.03180695]
[113.48487091 71.97088623]
[125.97659302 93.07227325]
[118.69158173 112.81864166]
[127.55780029 124.91782379]
[136.42401123 137.01701355]
[153.42834473 144.01048279]
[154.71812439 161.48625183]
[163.82929993 173.40206909]
[172.94049072 185.31787109]
[182.05166626 197.23367310]
[191.16284180 209.14947510]
[203.88865662 201.18780518]
[217.30409241 194.45280457]
[231.29127502 189.00364685]
[245.72726440 184.88822937]
[260.48519897 182.14271545]
[275.43539429 180.79122925]
[290.44644165 180.84567261]
[305.38641357 182.30552673]
[320.12405396 185.15800476]
[334.52981567 189.37800598]
[348.47711182 194.92845154]
[361.84335327 201.76058960]
[374.51107788 209.81433105]
[386.36898804 219.01893616]
[397.31283569 229.29348755]
[407.24645996 240.54771423]
[416.08258057 252.68269348]
[423.74349976 265.59179688]
[430.16192627 279.16152954]
[435.28143311 293.27270508]
[439.05706787 307.80126953]
[441.45559692 322.61956787]
[442.45596313 337.59732056]
[442.04937744 352.60296631]
[440.23941040 367.50460815]
[437.04199219 382.17126465]
[432.48519897 396.47406006]
[426.60903931 410.28729248]
[419.46524048 423.48956299]
[411.11651611 435.96487427]
[401.63626099 447.60357666]
[391.10778809 458.30337524]
[379.62359619 467.97024536]
[367.28466797 476.51922607]
[354.19940186 483.87518311]
[340.48281860 489.97351074]
[326.25540161 494.76055908]
[311.64227295 498.19430542]
[296.77178955 500.24453735]
[281.77468872 500.89324951]
[266.78271484 500.13473511]
[251.92764282 497.97567749]
[237.34002686 494.43502808]
[223.14807129 489.54394531]
[209.47650146 483.34536743]
[196.44543457 475.89376831]
[184.16943359 467.25466919]
[172.75634766 457.50399780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[24 99]
[25 98]
[26 97]
[29 69]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% Start Annotations
17 105 0.0 1 colorpair
18 104 0.0 1 colorpair
19 103 0.0 1 colorpair
20 102 0.0 1 colorpair
21 101 0.0 1 colorpair
24 99 0.0 1 colorpair
25 98 0.0 1 colorpair
26 97 0.0 1 colorpair
29 69 0.0 1 colorpair
30 68 0.0 1 colorpair
31 67 0.0 1 colorpair
32 66 0.0 1 colorpair
34 64 0.0 1 colorpair
35 63 0.0 1 colorpair
36 62 0.0 1 colorpair
37 61 0.0 1 colorpair
38 60 0.0 1 colorpair
39 59 0.0 1 colorpair
41 57 0.0 1 colorpair
42 56 0.0 1 colorpair
43 55 0.0 1 colorpair
44 54 0.0 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
47 51 0.0 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.0 1 colorpair
88 92 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
