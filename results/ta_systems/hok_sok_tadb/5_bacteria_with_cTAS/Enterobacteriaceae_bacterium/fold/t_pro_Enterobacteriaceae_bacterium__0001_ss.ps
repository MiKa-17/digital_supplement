%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 21:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________G_AAU___GCCGAAAAAAUAUGUCCUUGUGGCCAUCGUAGUGCUGUGUAUCACGGUACUGGUAUUCACGCUGAUGGUGCGCGACUCGCUAUGCGAGUUGCGUAUCAGACAGCGUAAUAUUGAGUUUAAGGCUGUUCUCGCUUACGAAUCGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[87.25935364 566.08142090]
[72.79011536 562.05395508]
[58.92549515 556.27880859]
[45.87567902 548.84362793]
[33.83849716 539.86114502]
[22.99643135 529.46740723]
[13.51384544 517.82006836]
[5.53449202 505.09570312]
[-0.82066357 491.48721313]
[-5.45527935 477.20083618]
[-8.29909515 462.45321655]
[-9.30900002 447.46789551]
[-8.46968365 432.47207642]
[-5.79386997 417.69305420]
[-1.32212389 403.35488892]
[4.87776423 389.67492676]
[12.71180630 376.86059570]
[22.06123924 365.10610962]
[32.78432846 354.58969116]
[44.71851349 345.47076416]
[57.68288040 337.88757324]
[71.48088837 331.95504761]
[85.90335846 327.76318359]
[100.73165894 325.37545776]
[100.18382263 310.38546753]
[99.63599396 295.39547729]
[73.18242645 293.54675293]
[47.22279358 288.13317871]
[22.23523712 279.25448608]
[-1.32000756 267.07418823]
[-23.00909233 251.81661987]
[-42.43253326 233.76284790]
[-59.23258209 213.24534607]
[-73.09980774 190.64204407]
[-83.77880096 166.36924744]
[-91.07286072 140.87403870]
[-94.84764099 114.62598419]
[-109.83763885 115.17382050]
[-124.82762909 115.72164917]
[-136.75912476 126.44633484]
[-152.55882263 123.66263580]
[-160.10655212 109.50595856]
[-153.61233521 94.83610535]
[-138.05798340 90.90652466]
[-125.37545776 100.73165894]
[-110.38546753 100.18382263]
[-95.39547729 99.63599396]
[-95.20112610 91.27966309]
[-94.64957428 82.93928528]
[-93.74182129 74.63012695]
[-92.47953796 66.36739349]
[-90.86502838 58.16620636]
[-88.90124512 50.04157257]
[-86.59178162 42.00835800]
[-83.94087219 34.08126450]
[-80.95336151 26.27480125]
[-77.63471985 18.60324860]
[-73.99101257 11.08064747]
[-70.02891541 3.72076273]
[-65.75567627 -3.46293688]
[-61.17911530 -10.45730591]
[-56.30760574 -17.24954605]
[-51.15006638 -23.82722473]
[-45.71592712 -30.17830849]
[-40.01514053 -36.29117584]
[-34.05813217 -42.15463638]
[-27.85580826 -47.75796509]
[-21.41951561 -53.09090424]
[-14.76103306 -58.14369965]
[-7.89254522 -62.90709686]
[-0.82662040 -67.37239075]
[6.42381048 -71.53140259]
[13.84547997 -75.37651825]
[21.42480659 -78.90071106]
[29.14792252 -82.09751892]
[37.00069046 -84.96110535]
[44.96874619 -87.48622894]
[53.03750229 -89.66825867]
[61.19219971 -91.50320435]
[69.41790771 -92.98771667]
[77.69958496 -94.11907959]
[86.02207184 -94.89521027]
[94.37013245 -95.31468964]
[102.72850037 -95.37676239]
[111.08187103 -95.08130646]
[119.41496277 -94.42886353]
[127.71252441 -93.42063141]
[135.95938110 -92.05844879]
[144.14042664 -90.34481049]
[152.24070740 -88.28285217]
[160.24537659 -85.87635040]
[168.13981628 -83.12970734]
[175.90954590 -80.04795074]
[183.54039001 -76.63671112]
[191.01834106 -72.90224457]
[198.32974243 -68.85137177]
[205.46119690 -64.49151611]
[212.39967346 -59.83065033]
[219.13247681 -54.87730408]
[228.72756958 -66.40701294]
[238.32266235 -77.93671417]
[247.91775513 -89.46642303]
[257.51284790 -100.99613190]
[262.99722290 -117.03851318]
[279.93087769 -116.20945740]
[283.82192993 -99.70806122]
[269.04257202 -91.40103149]
[259.44744873 -79.87133026]
[249.85237122 -68.34162140]
[240.25727844 -56.81191254]
[230.66217041 -45.28220749]
[240.60319519 -35.68443680]
[249.84103394 -25.40809441]
[258.32949829 -14.50456619]
[266.02612305 -3.02838635]
[272.89245605 8.96305275]
[278.89410400 21.40977859]
[284.00109863 34.24954605]
[288.18786621 47.41814041]
[291.43347168 60.84970474]
[293.72171021 74.47705841]
[295.04113770 88.23206329]
[295.38510132 102.04592133]
[294.75192261 115.84954071]
[293.14477539 129.57389832]
[290.57168579 143.15036011]
[287.04553223 156.51101685]
[282.58392334 169.58905029]
[277.20919800 182.31906128]
[270.94821167 194.63737488]
[263.83230591 206.48240662]
[255.89703369 217.79490662]
[247.18211365 228.51828003]
[237.73110962 238.59893799]
[227.59129333 247.98643494]
[216.81338501 256.63381958]
[205.45126343 264.49789429]
[193.56178284 271.53924561]
[181.20437622 277.72274780]
[168.44085693 283.01742554]
[155.33505249 287.39678955]
[141.95251465 290.83895874]
[128.36016846 293.32672119]
[114.62598419 294.84765625]
[115.17382050 309.83764648]
[115.72164917 324.82763672]
[130.68467712 326.12658691]
[145.37466431 329.25451660]
[159.56890869 334.16400146]
[173.05223083 340.78063965]
[185.62020874 349.00408936]
[197.08235168 358.70971680]
[207.26486206 369.75036621]
[216.01338196 381.95867920]
[223.19531250 395.14956665]
[228.70175171 409.12307739]
[232.44921875 423.66735840]
[234.38092041 438.56192017]
[234.46757507 453.58096313]
[232.70785522 468.49685669]
[229.12843323 483.08340454]
[223.78358459 497.11950684]
[216.75434875 510.39236450]
[208.14724731 522.70080566]
[198.09280396 533.85821533]
[186.74342346 543.69543457]
[174.27114868 552.06335449]
[160.86506653 558.83514404]
[146.72842407 563.90808105]
[132.07550049 567.20526123]
[117.12844849 568.67675781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 146]
[25 145]
[26 144]
[37 47]
[38 46]
[39 45]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% Start Annotations
24 146 0.16 1 colorpair
25 145 0.0 1 colorpair
26 144 0.48 1 colorpair
37 47 0.32 0.2 colorpair
38 46 0.16 0.2 colorpair
39 45 0.48 0.6 colorpair
99 111 0.16 0.2 colorpair
100 110 0.0 0.6 colorpair
101 109 0.0 0.6 colorpair
103 107 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
146 cmark
26 cmark
144 cmark
37 47 2 gmark
37 cmark
47 cmark
38 46 2 gmark
38 cmark
39 45 1 gmark
39 cmark
45 cmark
99 111 2 gmark
99 cmark
111 cmark
100 110 1 gmark
101 109 1 gmark
102 108 4 gmark
102 cmark
108 cmark
103 cmark

% End Annotations
showpage
end
%%EOF
