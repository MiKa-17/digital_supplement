%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 00:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGCCACAAAAUACGCUUGUUUGGUGCCUAUUGAUUGUUUGUAUAACAGUUCUGGCAUUUACAUUAAUUACGCAUAAGUCACUGUGUGAAUUACGCCUAAAAGAUGGAAACAAGGAAGUUGCGGCCAUUUUAGCUUACGAAUCUGAAAGG\
) } def
/len { sequence length } bind def

/coor [
[207.72973633 397.38354492]
[203.90472412 389.99026489]
[202.44386292 381.76086426]
[203.49902344 373.43551636]
[206.99481201 365.76901245]
[212.63371277 359.46258545]
[206.68209839 345.69384766]
[200.73049927 331.92510986]
[188.57846069 323.31246948]
[190.20512390 307.57510376]
[184.25352478 293.80636597]
[178.30191040 280.03762817]
[165.60285950 279.93075562]
[153.85234070 274.99157715]
[144.82438660 265.92718506]
[139.89659119 254.07032776]
[139.84002686 241.18348694]
[144.69873047 229.19694519]
[153.77786255 219.91964722]
[148.39282227 205.91960144]
[143.00778198 191.91955566]
[137.62274170 177.91950989]
[132.23770142 163.91946411]
[126.85266113 149.91941833]
[121.46762085 135.91935730]
[67.57807922 112.41524506]
[52.95416260 109.07743073]
[38.33024597 105.73961639]
[23.70632553 102.40180206]
[9.08240795 99.06398773]
[-5.54151106 95.72617340]
[-14.24121571 103.93360901]
[-25.71262360 106.86475372]
[-37.05049896 103.89756012]
[-45.44140625 95.88880920]
[-48.86178589 84.93102264]
[-63.33739090 80.99949646]
[-77.81299591 77.06797028]
[-92.28859711 73.13644409]
[-106.76420593 69.20491791]
[-121.23980713 65.27339172]
[-135.71540833 61.34186935]
[-150.29496765 68.03634644]
[-164.55366516 60.68317413]
[-167.55343628 44.92306900]
[-156.99313354 32.84584045]
[-140.97370911 33.71610260]
[-131.78388977 46.86626434]
[-117.30828094 50.79779053]
[-102.83267975 54.72931671]
[-88.35707092 58.66084290]
[-73.88146973 62.59236526]
[-59.40586472 66.52389526]
[-44.93025970 70.45541382]
[-29.68109894 60.40658569]
[-11.60600567 64.70933533]
[-2.20369697 81.10225677]
[12.42022133 84.44007111]
[27.04413986 87.77788544]
[41.66806030 91.11569977]
[56.29197693 94.45350647]
[70.91589355 97.79132080]
[77.22529602 93.73651886]
[65.61318970 84.24131012]
[71.05535126 70.26336670]
[86.03088379 71.11977386]
[89.84410095 85.62690735]
[96.15350342 81.57209778]
[99.19231415 66.88314056]
[102.23112488 52.19417572]
[105.26994324 37.50521088]
[108.30875397 22.81624985]
[106.98011780 13.71663284]
[111.56227875 7.86004591]
[114.90009308 -6.76387262]
[118.23790741 -21.38779068]
[121.57572174 -36.01171112]
[124.91353607 -50.63562775]
[128.25134277 -65.25954437]
[119.63179779 -78.50639343]
[122.98548126 -93.95075989]
[136.32272339 -102.42977142]
[151.73075867 -98.91298676]
[160.06829834 -85.48684692]
[156.38880920 -70.11684418]
[142.87525940 -61.92173386]
[139.53744507 -47.29781342]
[136.19963074 -32.67389679]
[132.86181641 -18.04997635]
[129.52401733 -3.42605853]
[126.18619537 11.19785976]
[122.99771881 25.85506248]
[119.95890045 40.54402542]
[116.92008972 55.23298645]
[113.88127899 69.92195129]
[110.84246826 84.61091614]
[116.75359344 89.22703552]
[128.57585144 98.45927429]
[134.48696899 103.07540131]
[148.00151062 96.56713867]
[150.63958740 81.27596283]
[161.78520203 70.47991943]
[177.15266418 68.33030701]
[190.83285522 75.65369415]
[197.56546021 89.63409424]
[194.76165771 104.89575958]
[183.49957275 115.57025909]
[168.10969543 117.55303955]
[154.50976562 110.08167267]
[140.99522400 116.58992767]
[135.46766663 130.53431702]
[140.85270691 144.53437805]
[146.23774719 158.53442383]
[151.62278748 172.53446960]
[157.00782776 186.53451538]
[162.39286804 200.53456116]
[167.77790833 214.53460693]
[185.14839172 216.83586121]
[198.91343689 227.53419495]
[205.36523438 243.63459778]
[202.82319641 260.70266724]
[192.07066345 274.08602905]
[198.02226257 287.85476685]
[203.97386169 301.62350464]
[216.55160522 311.22097778]
[214.49925232 325.97348022]
[220.45085144 339.74224854]
[226.40245056 353.51098633]
[247.92565918 359.85800171]
[257.77459717 379.71862793]
[249.99287415 400.18695068]
[257.58105469 413.12603760]
[265.16918945 426.06509399]
[272.75735474 439.00418091]
[280.34552002 451.94326782]
[287.93368530 464.88235474]
[303.35205078 465.40884399]
[316.02514648 474.20635986]
[321.90902710 488.46762085]
[319.12615967 503.64190674]
[308.56457520 514.88720703]
[293.59439087 518.61511230]
[278.99258423 513.63610840]
[269.41848755 501.53897095]
[267.92721558 486.18383789]
[274.99459839 472.47052002]
[267.40643311 459.53143311]
[259.81826782 446.59234619]
[252.23011780 433.65325928]
[244.64196777 420.71420288]
[237.05380249 407.77511597]
[228.91815186 408.70385742]
[220.84075928 407.16641235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[10 124]
[11 123]
[12 122]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[99 110]
[100 109]
[131 151]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
] def

init

% Start Annotations
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
19 117 0.0 1 colorpair
20 116 0.0 1 colorpair
21 115 0.0 1 colorpair
22 114 0.0 1 colorpair
23 113 0.0 1 colorpair
24 112 0.0 1 colorpair
25 111 0.0 1 colorpair
26 62 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
30 58 0.0 1 colorpair
31 57 0.0 1 colorpair
36 54 0.0 1 colorpair
37 53 0.0 1 colorpair
38 52 0.0 1 colorpair
39 51 0.0 1 colorpair
40 50 0.0 1 colorpair
41 49 0.0 1 colorpair
42 48 0.0 1 colorpair
68 96 0.0 1 colorpair
69 95 0.0 1 colorpair
70 94 0.0 1 colorpair
71 93 0.0 1 colorpair
72 92 0.0 1 colorpair
74 91 0.0 1 colorpair
75 90 0.0 1 colorpair
76 89 0.0 1 colorpair
77 88 0.0 1 colorpair
78 87 0.0 1 colorpair
79 86 0.0 1 colorpair
99 110 0.0 1 colorpair
100 109 0.0 1 colorpair
131 151 0.0 1 colorpair
132 150 0.0 1 colorpair
133 149 0.0 1 colorpair
134 148 0.0 1 colorpair
135 147 0.0 1 colorpair
136 146 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
