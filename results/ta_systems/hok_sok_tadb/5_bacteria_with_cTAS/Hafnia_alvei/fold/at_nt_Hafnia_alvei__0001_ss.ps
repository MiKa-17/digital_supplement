%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGAUUUAUUGUGUAUUGAUCGUCUGUCUAACGCUACUGGCGUUUAUCAGAAUCACACAUGGAUAUCUGUGUGAGAUACAUAUAAAAAACGGUAAUAAAGAGGUUGCCGCUGUUUUAGCCUACGCAUCUAAACGGUAAG_UGACUCAACGG_____________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[55.27957916 397.48941040]
[51.09008789 383.08633423]
[47.62200546 368.49276733]
[44.88390732 353.74478149]
[42.88256836 338.87890625]
[41.62294388 323.93188477]
[41.10815048 308.94073486]
[41.33945847 293.94250488]
[42.31629944 278.97436523]
[44.03625488 264.07327271]
[46.49506760 249.27618408]
[49.68665314 234.61965942]
[53.60311890 220.13996887]
[58.23477173 205.87295532]
[63.57015228 191.85389709]
[69.59605408 178.11750793]
[76.29757690 164.69776917]
[83.65813446 151.62786865]
[91.66310120 138.93475342]
[79.21393585 147.30244446]
[66.76477051 155.67015076]
[59.62761688 169.79003906]
[44.74846649 170.46838379]
[32.29930115 178.83607483]
[19.85013580 187.20376587]
[23.51748848 201.91180420]
[21.93014145 216.98681641]
[15.27977371 230.60842896]
[4.36945057 241.13177490]
[-9.48335361 247.28608704]
[-24.60584641 248.32821655]
[-39.17191315 244.13232422]
[-51.42262650 235.20507812]
[-59.87865829 222.62448120]
[-63.51889801 207.90971375]
[-61.90377426 192.83764648]
[-55.22831345 179.22830200]
[-44.29861832 168.72509766]
[-30.43449402 162.59631348]
[-15.31010723 161.58204651]
[-0.75179935 165.80477905]
[11.48244381 174.75459290]
[23.93160820 166.38690186]
[36.38077545 158.01921082]
[42.62747955 144.49781799]
[58.39707565 143.22097778]
[70.84624481 134.85328674]
[83.29541016 126.48559570]
[84.54977417 119.09123230]
[69.61292267 120.46612549]
[54.67606354 121.84101868]
[39.73920822 123.21591187]
[24.80235100 124.59080505]
[11.33269882 131.19145203]
[-3.66519928 131.44258118]
[-17.34828377 125.29658508]
[-27.12274170 113.91853333]
[-31.13568687 99.46529388]
[-28.62641144 84.67666626]
[-20.07058525 72.35604095]
[-7.09007978 64.83895874]
[7.85447073 63.55039215]
[21.93012238 68.73460388]
[32.46730804 79.40672302]
[46.11510849 85.63066864]
[59.76290894 91.85461426]
[73.41070557 98.07856750]
[87.05850983 104.30251312]
[88.31287384 96.90814972]
[79.31972504 84.90302277]
[70.32657623 72.89788818]
[61.33341980 60.89275360]
[52.34026718 48.88762283]
[43.34711456 36.88248825]
[29.34528923 42.50487518]
[14.36526489 44.31078339]
[-0.57159287 42.17707825]
[-14.44686413 36.24924088]
[-26.31451035 26.93144226]
[-35.36537552 14.85898399]
[-40.98235703 0.85498732]
[-42.78248215 -14.12573242]
[-40.64300919 -29.06176567]
[-34.70981598 -42.93474579]
[-25.38743401 -54.79879379]
[-13.31148243 -63.84499741]
[0.69468254 -69.45657349]
[15.67609692 -71.25090790]
[30.61130142 -69.10567474]
[44.48199081 -63.16712189]
[56.34243774 -53.84016037]
[65.38397980 -41.76071548]
[70.99014282 -27.75238609]
[72.77870178 -12.77028084]
[70.62769318 2.16409492]
[64.68378448 16.03249168]
[55.35224915 27.88933563]
[64.34539795 39.89447021]
[73.33855438 51.89960098]
[82.33170319 63.90473557]
[91.32485962 75.90986633]
[100.31800842 87.91500092]
[107.46767426 85.64954376]
[128.91667175 78.85318756]
[129.35498047 63.85959244]
[129.79327393 48.86599731]
[121.54012299 34.69498825]
[129.91973877 20.59838676]
[146.31187439 21.07756805]
[153.85372925 35.63959503]
[144.78686523 49.30429840]
[144.34857178 64.29788971]
[143.91026306 79.29148865]
[155.43417358 69.68943024]
[167.42131042 60.67230606]
[179.84201050 52.26242065]
[192.66554260 44.48058319]
[205.86018372 37.34605026]
[219.39328003 30.87647438]
[233.23133850 25.08786392]
[247.34013367 19.99454117]
[261.68475342 15.60910797]
[276.22970581 11.94241714]
[290.93896484 9.00353909]
[305.77621460 6.79974651]
[320.70465088 5.33649206]
[335.68740845 4.61739683]
[350.68737793 4.64423943]
[365.66748047 5.41695356]
[380.59060669 6.93362761]
[395.41986084 9.19050884]
[410.11853027 12.18201256]
[424.65023804 15.90073681]
[438.97906494 20.33748055]
[453.06954956 25.48126602]
[466.88681030 31.31936646]
[480.39666748 37.83733749]
[493.56567383 45.01904678]
[506.36126709 52.84672928]
[518.75177002 61.30101395]
[530.70660400 70.36098480]
[542.19604492 80.00422668]
[553.19177246 90.20687103]
[563.66656494 100.94367981]
[573.59448242 112.18808746]
[582.95092773 123.91226959]
[591.71282959 136.08721924]
[599.85845947 148.68280029]
[607.36767578 161.66786194]
[614.22186279 175.01026917]
[620.40411377 188.67701721]
[625.89910889 202.63427734]
[630.69323730 216.84751892]
[634.77465820 231.28157043]
[638.13330078 245.90072632]
[640.76074219 260.66882324]
[642.65063477 275.54928589]
[643.79821777 290.50531006]
[644.20062256 305.49990845]
[643.85693359 320.49597168]
[642.76794434 335.45639038]
[640.93634033 350.34414673]
[638.36669922 365.12240601]
[635.06536865 379.75460815]
[631.04046631 394.20452881]
[626.30200195 408.43643188]
[620.86175537 422.41510010]
[614.73303223 436.10595703]
[607.93115234 449.47509766]
[600.47283936 462.48947144]
[592.37658691 475.11685181]
[583.66241455 487.32601929]
[574.35192871 499.08673096]
[564.46813965 510.36993408]
[554.03552246 521.14770508]
[543.07983398 531.39331055]
[531.62817383 541.08148193]
[519.70898438 550.18817139]
[507.35165405 558.69091797]
[494.58679199 566.56866455]
[481.44598389 573.80187988]
[467.96176147 580.37268066]
[454.16748047 586.26483154]
[440.09725952 591.46374512]
[425.78591919 595.95654297]
[411.26885986 599.73217773]
[396.58200073 602.78118896]
[381.76171875 605.09613037]
[366.84463501 606.67120361]
[351.86770630 607.50262451]
[336.86795044 607.58819580]
[321.88247681 606.92773438]
[306.94842529 605.52294922]
[292.10266113 603.37731934]
[277.38198853 600.49603271]
[262.82281494 596.88629150]
[248.46113586 592.55706787]
[234.33250427 587.51904297]
[220.47187805 581.78466797]
[206.91355896 575.36816406]
[193.69108582 568.28533936]
[180.83717346 560.55377197]
[168.38363647 552.19256592]
[156.36128235 543.22247314]
[144.79986572 533.66558838]
[133.72798157 523.54565430]
[123.17303467 512.88763428]
[113.16113281 501.71795654]
[103.71705627 490.06423950]
[94.86416626 477.95529175]
[86.62437439 465.42111206]
[79.01805878 452.49267578]
[72.06404877 439.20202637]
[65.77954865 425.58200073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 48]
[20 47]
[21 46]
[23 44]
[24 43]
[25 42]
[69 102]
[70 101]
[71 100]
[72 99]
[73 98]
[74 97]
[104 113]
[105 112]
[106 111]
] def

init

% Start Annotations
19 48 0.0 1 colorpair
20 47 0.32 1 colorpair
21 46 0.16 1 colorpair
23 44 0.16 0.2 colorpair
24 43 0.16 1 colorpair
25 42 0.16 1 colorpair
69 102 0.0 1 colorpair
70 101 0.0 1 colorpair
72 99 0.0 1 colorpair
74 97 0.0 1 colorpair
105 112 0.0 1 colorpair
106 111 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 cmark
47 cmark
21 cmark
23 44 2 gmark
23 cmark
44 cmark
24 cmark
43 cmark
42 cmark
71 100 3 gmark
71 cmark
100 cmark
73 98 3 gmark
98 cmark
104 113 3 gmark
104 cmark
113 cmark

% End Annotations
showpage
end
%%EOF
