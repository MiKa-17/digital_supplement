%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 10 23:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGCCGCAAAAAACGGUGAUUUAUUGUGUAUUGAUCGUCUGUCUAACGCUACUGGCGUUUAUCAGAAUCACACAUGGAUAUCUGUGUGAGAUACAUAUAAAAAACGGUAAUAAAGAGGUUGCCGCUGUUUUAGCCUACGCAUCUAAACGG\
) } def
/len { sequence length } bind def

/coor [
[16.24466896 170.44020081]
[11.06314468 163.77313232]
[6.41106224 156.72642517]
[2.31611657 149.34202576]
[-1.19731569 141.66389465]
[-4.10831881 133.73773193]
[-18.66110802 137.37315369]
[-33.21389771 141.00859070]
[-47.76668549 144.64401245]
[-46.05804062 159.56834412]
[-46.31208801 174.58801270]
[-48.52448273 189.44601440]
[-52.65736389 203.88810730]
[-58.64001465 217.66719055]
[-66.37006378 230.54745483]
[-75.71524048 242.30851746]
[-86.51564026 252.74913025]
[-98.58644867 261.69064331]
[-111.72112274 268.98004150]
[-125.69490051 274.49261475]
[-140.26869202 278.13403320]
[-155.19309998 279.84197998]
[-170.21275330 279.58721924]
[-185.07064819 277.37411499]
[-199.51255798 273.24053955]
[-213.29135132 267.25723267]
[-226.17124939 259.52655029]
[-237.93186951 250.18083191]
[-248.37196350 239.37992859]
[-257.31289673 227.30870056]
[-264.60168457 214.17367554]
[-270.11358643 200.19964600]
[-273.75430298 185.62568665]
[-275.46151733 170.70118713]
[-275.20605469 155.68154907]
[-272.99224854 140.82374573]
[-268.85800171 126.38204193]
[-262.87402344 112.60353851]
[-255.14274597 99.72400665]
[-245.79644775 87.96382904]
[-234.99505615 77.52424622]
[-222.92340088 68.58387756]
[-209.78804016 61.29572296]
[-195.81373596 55.78448486]
[-181.23959351 52.14446259]
[-166.31503296 50.43795013]
[-151.29539490 50.69414139]
[-136.43771362 52.90865707]
[-121.99619293 57.04360199]
[-108.21797180 63.02822113]
[-95.33880615 70.76010895]
[-83.57907867 80.10696411]
[-73.14000702 90.90885925]
[-64.20021820 102.98094177]
[-56.91268921 116.11665344]
[-51.40211105 130.09121704]
[-36.84932327 126.45579529]
[-22.29653358 122.82036591]
[-7.74374485 119.18494415]
[-9.14528656 108.00518036]
[-9.38991070 96.74055481]
[-8.47502327 85.51049042]
[-6.41032124 74.43400574]
[-3.21769142 63.62851715]
[1.06902564 53.20856094]
[6.40439177 43.28458405]
[12.73185253 33.96177673]
[19.98433876 25.33896255]
[28.08497429 17.50754166]
[36.94789505 10.55052471]
[46.47915649 4.54165363]
[56.57772827 -0.45537743]
[67.13656616 -4.38760138]
[78.04375458 -7.21333742]
[89.18367004 -8.90263271]
[100.43824005 -9.43758297]
[111.68815613 -8.81251526]
[122.81419373 -7.03405666]
[133.69839478 -4.12105799]
[144.22540283 -0.10439692]
[154.28363037 4.97335100]
[163.76646423 11.05836296]
[172.57337952 18.08613777]
[180.61103821 25.98218536]
[187.79423523 34.66280365]
[200.41304016 26.55319214]
[213.03184509 18.44358063]
[225.65065002 10.33396816]
[238.26943970 2.22435594]
[250.88824463 -5.88525629]
[246.28382874 -20.25403404]
[245.55619812 -35.32496643]
[248.75494385 -50.07048798]
[255.66198730 -63.48522568]
[265.80639648 -74.65454102]
[278.49645996 -82.81689453]
[292.86703491 -87.41575623]
[307.93823242 -88.13758087]
[322.68252563 -84.93313599]
[336.09460449 -78.02091980]
[347.26000977 -67.87220764]
[355.41744995 -55.17896652]
[360.01077271 -40.80663681]
[360.72677612 -25.73514938]
[357.51663208 -10.99210167]
[350.59924316 2.41729927]
[340.44619751 13.57877922]
[327.74981689 21.73132896]
[313.37573242 26.31909370]
[298.30395508 27.02927399]
[283.56213379 23.81344795]
[270.15542603 16.89087486]
[258.99786377 6.73354673]
[246.37905884 14.84315872]
[233.76025391 22.95277023]
[221.14144897 31.06238365]
[208.52264404 39.17199707]
[195.90383911 47.28160858]
[208.86965942 88.85665131]
[204.59529114 132.19630432]
[218.59533691 137.58134460]
[232.59538269 142.96638489]
[248.70126343 139.87892151]
[259.22192383 152.45858765]
[253.33457947 167.76451111]
[237.09564209 170.05126953]
[227.21034241 156.96643066]
[213.21029663 151.58139038]
[199.21025085 146.19635010]
[195.35328674 153.70779419]
[190.92868042 160.89952087]
[185.96278381 167.72869873]
[180.48513794 174.15469360]
[174.52836609 180.13925171]
[168.12792969 185.64672852]
[161.32192993 190.64434814]
[154.15086365 195.10237122]
[146.65745544 198.99423218]
[138.88627625 202.29679871]
[130.88362122 204.99037170]
[122.69711304 207.05894470]
[114.37548065 208.49018860]
[105.96827698 209.27560425]
[97.52554321 209.41047668]
[89.09754181 208.89404297]
[80.73444366 207.72935486]
[72.48603058 205.92335510]
[64.40140533 203.48680115]
[56.52870560 200.43417358]
[48.91478729 196.78366089]
[41.60498428 192.55700684]
[34.64280319 187.77934265]
[28.06969643 182.47914124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 59]
[7 58]
[8 57]
[9 56]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[120 129]
[121 128]
[122 127]
] def

init

% Start Annotations
6 59 0.16 1 colorpair
7 58 0.16 1 colorpair
8 57 0.0 1 colorpair
9 56 0.16 1 colorpair
85 118 0.0 1 colorpair
86 117 0.0 1 colorpair
88 115 0.0 1 colorpair
90 113 0.0 1 colorpair
121 128 0.0 1 colorpair
122 127 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
59 cmark
7 cmark
58 cmark
9 cmark
87 116 3 gmark
87 cmark
116 cmark
89 114 3 gmark
114 cmark
120 129 3 gmark
120 cmark
129 cmark

% End Annotations
showpage
end
%%EOF
