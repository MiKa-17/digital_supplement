%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 17:24:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AU_GC_C_G__CA_AAAA_UC_UGUGCU_________AU_UGGCCCU_GAU_C_GUCAUCUGU______UUCACGGUGUUGG_UAUUCACCUUGAUGAUGCGCG_AAUCGCUGUGCGAGUUGCGUAUCAGAAACGGAAA_UA_C______GGAGGUU_GCGGCUUU___UUUG_G_C____U_UA_CGAA____UC___C_AA___A__\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50548553 92.05548096]
[62.53072739 91.16682434]
[47.58887863 89.83480072]
[32.69306564 88.06059265]
[17.85636902 85.84574890]
[3.09182191 83.19221497]
[-11.58760834 80.10231781]
[-26.16902733 76.57878113]
[-40.63962936 72.62470245]
[-54.98670197 68.24353790]
[-69.19764709 63.43915558]
[-83.25997925 58.21575928]
[-97.16135406 52.57794571]
[-110.88955688 46.53066254]
[-124.43252563 40.07921982]
[-137.77836609 33.22929001]
[-150.91535950 25.98688889]
[-163.83197021 18.35837173]
[-176.51686096 10.35044384]
[-188.95886230 1.97013700]
[-201.14706421 -6.77518749]
[-213.07077026 -15.87784863]
[-224.71949768 -25.32985115]
[-236.08300781 -35.12289429]
[-247.15132141 -45.24837494]
[-257.91473389 -55.69739914]
[-268.36376953 -66.46079254]
[-278.48928833 -77.52909851]
[-288.28234863 -88.89259338]
[-297.73434448 -100.54129791]
[-306.83703613 -112.46498871]
[-315.58239746 -124.65317535]
[-323.96270752 -137.09516907]
[-331.97067261 -149.78004456]
[-339.59918213 -162.69664001]
[-346.84161377 -175.83361816]
[-353.69155884 -189.17945862]
[-360.14303589 -202.72241211]
[-366.19033813 -216.45060730]
[-371.82818604 -230.35195923]
[-377.05160522 -244.41429138]
[-381.85601807 -258.62521362]
[-386.23718262 -272.97229004]
[-390.19128418 -287.44290161]
[-393.71484375 -302.02429199]
[-396.80477905 -316.70373535]
[-399.45834351 -331.46826172]
[-401.67318726 -346.30496216]
[-403.44744873 -361.20077515]
[-404.77947998 -376.14260864]
[-405.66815186 -391.11737061]
[-406.11270142 -406.11187744]
[-406.11270142 -421.11300659]
[-405.66818237 -436.10751343]
[-404.77951050 -451.08227539]
[-403.44750977 -466.02410889]
[-401.67327881 -480.91992188]
[-399.45843506 -495.75662231]
[-396.80487061 -510.52117920]
[-393.71496582 -525.20062256]
[-390.19143677 -539.78204346]
[-386.23733521 -554.25262451]
[-381.85617065 -568.59967041]
[-377.05178833 -582.81060791]
[-371.82836914 -596.87298584]
[-366.19055176 -610.77435303]
[-360.14328003 -624.50250244]
[-353.69183350 -638.04547119]
[-346.84188843 -651.39135742]
[-339.59945679 -664.52832031]
[-331.97094727 -677.44494629]
[-323.96301270 -690.12982178]
[-315.58270264 -702.57177734]
[-306.83737183 -714.76000977]
[-297.73471069 -726.68371582]
[-288.28268433 -738.33239746]
[-278.48965454 -749.69592285]
[-268.36416626 -760.76422119]
[-257.91513062 -771.52764893]
[-247.15173340 -781.97668457]
[-236.08341980 -792.10217285]
[-224.71990967 -801.89526367]
[-213.07119751 -811.34722900]
[-201.14750671 -820.44995117]
[-188.95932007 -829.19525146]
[-176.51731873 -837.57556152]
[-163.83244324 -845.58349609]
[-150.91584778 -853.21203613]
[-137.77885437 -860.45446777]
[-124.43301392 -867.30444336]
[-110.89005280 -873.75585938]
[-97.16186523 -879.80316162]
[-83.26049805 -885.44097900]
[-69.19816589 -890.66442871]
[-54.98722839 -895.46881104]
[-40.64015961 -899.84997559]
[-26.16956139 -903.80407715]
[-11.58814621 -907.32763672]
[3.09128046 -910.41754150]
[17.85582542 -913.07110596]
[32.69252014 -915.28594971]
[47.58832932 -917.06018066]
[62.53017807 -918.39221191]
[77.50493622 -919.28088379]
[92.49945068 -919.72540283]
[107.50054932 -919.72540283]
[122.49506378 -919.28088379]
[137.46981812 -918.39221191]
[152.41166687 -917.06018066]
[167.30747986 -915.28594971]
[182.14418030 -913.07110596]
[196.90872192 -910.41754150]
[211.58815002 -907.32763672]
[226.16955566 -903.80407715]
[240.64015198 -899.84997559]
[254.98722839 -895.46881104]
[269.19818115 -890.66442871]
[283.26049805 -885.44097900]
[297.16186523 -879.80316162]
[310.89004517 -873.75585938]
[324.43301392 -867.30444336]
[337.77883911 -860.45446777]
[350.91583252 -853.21203613]
[363.83245850 -845.58349609]
[376.51730347 -837.57556152]
[388.95932007 -829.19525146]
[401.14752197 -820.44995117]
[413.07119751 -811.34722900]
[424.71990967 -801.89526367]
[436.08340454 -792.10217285]
[447.15173340 -781.97668457]
[457.91513062 -771.52764893]
[468.36416626 -760.76422119]
[478.48965454 -749.69592285]
[488.28268433 -738.33239746]
[497.73471069 -726.68371582]
[506.83737183 -714.76000977]
[515.58270264 -702.57177734]
[523.96301270 -690.12982178]
[531.97094727 -677.44494629]
[539.59948730 -664.52832031]
[546.84185791 -651.39135742]
[553.69183350 -638.04547119]
[560.14324951 -624.50250244]
[566.19055176 -610.77435303]
[571.82836914 -596.87298584]
[577.05175781 -582.81060791]
[581.85620117 -568.59967041]
[586.23736572 -554.25262451]
[590.19140625 -539.78204346]
[593.71496582 -525.20062256]
[596.80487061 -510.52117920]
[599.45843506 -495.75662231]
[601.67327881 -480.91992188]
[603.44750977 -466.02410889]
[604.77954102 -451.08227539]
[605.66821289 -436.10751343]
[606.11273193 -421.11300659]
[606.11273193 -406.11187744]
[605.66815186 -391.11737061]
[604.77947998 -376.14260864]
[603.44744873 -361.20077515]
[601.67321777 -346.30496216]
[599.45831299 -331.46826172]
[596.80474854 -316.70373535]
[593.71484375 -302.02429199]
[590.19128418 -287.44290161]
[586.23718262 -272.97229004]
[581.85601807 -258.62521362]
[577.05157471 -244.41429138]
[571.82818604 -230.35195923]
[566.19036865 -216.45060730]
[560.14300537 -202.72241211]
[553.69158936 -189.17945862]
[546.84161377 -175.83361816]
[539.59918213 -162.69664001]
[531.97064209 -149.78004456]
[523.96270752 -137.09516907]
[515.58239746 -124.65317535]
[506.83703613 -112.46498871]
[497.73434448 -100.54129791]
[488.28234863 -88.89259338]
[478.48928833 -77.52909851]
[468.36376953 -66.46079254]
[457.91473389 -55.69739914]
[447.15133667 -45.24837494]
[436.08300781 -35.12289429]
[424.71948242 -25.32985115]
[413.07077026 -15.87784863]
[401.14706421 -6.77518749]
[388.95886230 1.97013700]
[376.51684570 10.35044384]
[363.83197021 18.35837173]
[350.91537476 25.98688889]
[337.77838135 33.22929001]
[324.43252563 40.07921982]
[310.88955688 46.53066254]
[297.16134644 52.57794571]
[283.25997925 58.21575928]
[269.19766235 63.43915558]
[254.98670959 68.24353790]
[240.63963318 72.62470245]
[226.16902161 76.57878113]
[211.58760071 80.10231781]
[196.90817261 83.19221497]
[182.14363098 85.84574890]
[167.30693054 88.06059265]
[152.41111755 89.83480072]
[137.46926880 91.16682434]
[122.49451447 92.05548096]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
