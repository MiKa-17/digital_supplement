%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 14:29:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________________________________________________________A_AAAUG___CC___G___CAAAAAUCUGUG_________UUAG_UGGCCCU__GAUCGUCAUCUGU______UUCACGGUAUU_GGUAUUCACAUUGAUGACGCGGG_AAUCGCUGUGCGAGUUGCGUAUCAGAGA___CGGAAAUACGGAGGUU_GCGGCCUUUU___UGGCUUACGAAU___C___CG_A___\
G_AAG________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50323486 92.15854645]
[62.51813126 91.47579956]
[47.55245209 90.45213318]
[32.61394882 89.08805084]
[17.71037102 87.38428497]
[2.84943700 85.34170532]
[-11.96115112 82.96137238]
[-26.71371651 80.24451447]
[-41.40061569 77.19255066]
[-56.01423645 73.80705261]
[-70.54700470 70.08978271]
[-84.99139404 66.04266357]
[-99.33991241 61.66778946]
[-113.58512878 56.96743393]
[-127.71965790 51.94402695]
[-141.73617554 46.60017776]
[-155.62741089 40.93864822]
[-169.38618469 34.96237946]
[-183.00535583 28.67446518]
[-196.47784424 22.07816315]
[-209.79670715 15.17689514]
[-222.95501709 7.97423410]
[-235.94596863 0.47391433]
[-248.76281738 -7.32017756]
[-261.39892578 -15.40400219]
[-273.84774780 -23.77337074]
[-286.10284424 -32.42394638]
[-298.15783691 -41.35124207]
[-310.00646973 -50.55064011]
[-321.64266968 -60.01736450]
[-333.06033325 -69.74651337]
[-344.25357056 -79.73303986]
[-355.21658325 -89.97177887]
[-365.94369507 -100.45742035]
[-376.42935181 -111.18451691]
[-386.66809082 -122.14752960]
[-396.65463257 -133.34077454]
[-406.38378906 -144.75842285]
[-415.85052490 -156.39460754]
[-425.04992676 -168.24325562]
[-433.97723389 -180.29823303]
[-442.62780762 -192.55331421]
[-450.99719238 -205.00212097]
[-459.08102417 -217.63822937]
[-466.87512207 -230.45507812]
[-474.37545776 -243.44601440]
[-481.57812500 -256.60433960]
[-488.47940063 -269.92318726]
[-495.07571411 -283.39566040]
[-501.36364746 -297.01483154]
[-507.33993530 -310.77359009]
[-513.00146484 -324.66482544]
[-518.34533691 -338.68133545]
[-523.36871338 -352.81588745]
[-528.06909180 -367.06109619]
[-532.44396973 -381.40960693]
[-536.49114990 -395.85397339]
[-540.20837402 -410.38674927]
[-543.59393311 -425.00036621]
[-546.64587402 -439.68725586]
[-549.36273193 -454.43981934]
[-551.74310303 -469.25042725]
[-553.78570557 -484.11135864]
[-555.48944092 -499.01492310]
[-556.85357666 -513.95343018]
[-557.87725830 -528.91912842]
[-558.55999756 -543.90423584]
[-558.90148926 -558.90100098]
[-558.90148926 -573.90161133]
[-558.55999756 -588.89837646]
[-557.87725830 -603.88348389]
[-556.85357666 -618.84918213]
[-555.48950195 -633.78765869]
[-553.78570557 -648.69128418]
[-551.74316406 -663.55218506]
[-549.36279297 -678.36279297]
[-546.64593506 -693.11535645]
[-543.59399414 -707.80224609]
[-540.20849609 -722.41583252]
[-536.49121094 -736.94860840]
[-532.44409180 -751.39300537]
[-528.06921387 -765.74151611]
[-523.36883545 -779.98675537]
[-518.34545898 -794.12127686]
[-513.00158691 -808.13781738]
[-507.34005737 -822.02905273]
[-501.36376953 -835.78778076]
[-495.07586670 -849.40698242]
[-488.47955322 -862.87945557]
[-481.57827759 -876.19830322]
[-474.37561035 -889.35662842]
[-466.87530518 -902.34759521]
[-459.08120728 -915.16442871]
[-450.99737549 -927.80053711]
[-442.62799072 -940.24932861]
[-433.97741699 -952.50445557]
[-425.05010986 -964.55944824]
[-415.85073853 -976.40808105]
[-406.38400269 -988.04425049]
[-396.65484619 -999.46191406]
[-386.66830444 -1010.65515137]
[-376.42956543 -1021.61816406]
[-365.94393921 -1032.34533691]
[-355.21682739 -1042.83093262]
[-344.25381470 -1053.06970215]
[-333.06057739 -1063.05615234]
[-321.64291382 -1072.78540039]
[-310.00674438 -1082.25207520]
[-298.15808105 -1091.45153809]
[-286.10308838 -1100.37878418]
[-273.84802246 -1109.02941895]
[-261.39920044 -1117.39880371]
[-248.76309204 -1125.48254395]
[-235.94624329 -1133.27673340]
[-222.95530701 -1140.77697754]
[-209.79699707 -1147.97961426]
[-196.47814941 -1154.88098145]
[-183.00564575 -1161.47729492]
[-169.38647461 -1167.76513672]
[-155.62771606 -1173.74145508]
[-141.73648071 -1179.40295410]
[-127.71996307 -1184.74682617]
[-113.58543396 -1189.77026367]
[-99.34022522 -1194.47058105]
[-84.99170685 -1198.84545898]
[-70.54731750 -1202.89257812]
[-56.01455307 -1206.60986328]
[-41.40093231 -1209.99536133]
[-26.71403694 -1213.04736328]
[-11.96147156 -1215.76428223]
[2.84911537 -1218.14453125]
[17.71004868 -1220.18713379]
[32.61362839 -1221.89099121]
[47.55212784 -1223.25500488]
[62.51780701 -1224.27868652]
[77.50291443 -1224.96142578]
[92.49967194 -1225.30297852]
[107.50032806 -1225.30297852]
[122.49708557 -1224.96142578]
[137.48219299 -1224.27868652]
[152.44787598 -1223.25500488]
[167.38636780 -1221.89099121]
[182.28994751 -1220.18713379]
[197.15087891 -1218.14453125]
[211.96147156 -1215.76428223]
[226.71403503 -1213.04736328]
[241.40093994 -1209.99536133]
[256.01455688 -1206.60986328]
[270.54733276 -1202.89257812]
[284.99169922 -1198.84545898]
[299.34020996 -1194.47058105]
[313.58544922 -1189.77026367]
[327.71997070 -1184.74682617]
[341.73648071 -1179.40295410]
[355.62771606 -1173.74145508]
[369.38647461 -1167.76513672]
[383.00564575 -1161.47729492]
[396.47814941 -1154.88098145]
[409.79699707 -1147.97961426]
[422.95529175 -1140.77697754]
[435.94625854 -1133.27673340]
[448.76309204 -1125.48254395]
[461.39920044 -1117.39880371]
[473.84802246 -1109.02941895]
[486.10308838 -1100.37878418]
[498.15808105 -1091.45153809]
[510.00674438 -1082.25207520]
[521.64288330 -1072.78540039]
[533.06054688 -1063.05615234]
[544.25378418 -1053.06970215]
[555.21679688 -1042.83093262]
[565.94390869 -1032.34533691]
[576.42956543 -1021.61816406]
[586.66833496 -1010.65515137]
[596.65484619 -999.46191406]
[606.38397217 -988.04425049]
[615.85070801 -976.40808105]
[625.05010986 -964.55944824]
[633.97741699 -952.50445557]
[642.62799072 -940.24932861]
[650.99737549 -927.80053711]
[659.08117676 -915.16442871]
[666.87530518 -902.34759521]
[674.37561035 -889.35662842]
[681.57830811 -876.19830322]
[688.47955322 -862.87945557]
[695.07586670 -849.40698242]
[701.36376953 -835.78778076]
[707.34002686 -822.02905273]
[713.00158691 -808.13781738]
[718.34545898 -794.12127686]
[723.36883545 -779.98675537]
[728.06921387 -765.74151611]
[732.44409180 -751.39300537]
[736.49121094 -736.94860840]
[740.20849609 -722.41583252]
[743.59399414 -707.80224609]
[746.64593506 -693.11535645]
[749.36279297 -678.36279297]
[751.74316406 -663.55218506]
[753.78570557 -648.69128418]
[755.48950195 -633.78765869]
[756.85357666 -618.84918213]
[757.87725830 -603.88348389]
[758.55999756 -588.89837646]
[758.90148926 -573.90161133]
[758.90148926 -558.90100098]
[758.55999756 -543.90423584]
[757.87725830 -528.91912842]
[756.85357666 -513.95343018]
[755.48944092 -499.01492310]
[753.78570557 -484.11135864]
[751.74310303 -469.25042725]
[749.36273193 -454.43981934]
[746.64587402 -439.68725586]
[743.59393311 -425.00036621]
[740.20837402 -410.38674927]
[736.49114990 -395.85397339]
[732.44396973 -381.40960693]
[728.06909180 -367.06109619]
[723.36871338 -352.81588745]
[718.34533691 -338.68133545]
[713.00146484 -324.66482544]
[707.33990479 -310.77359009]
[701.36364746 -297.01483154]
[695.07574463 -283.39566040]
[688.47943115 -269.92318726]
[681.57812500 -256.60433960]
[674.37548828 -243.44601440]
[666.87512207 -230.45507812]
[659.08105469 -217.63822937]
[650.99719238 -205.00212097]
[642.62780762 -192.55331421]
[633.97723389 -180.29823303]
[625.04992676 -168.24325562]
[615.85052490 -156.39460754]
[606.38378906 -144.75842285]
[596.65460205 -133.34077454]
[586.66809082 -122.14752960]
[576.42932129 -111.18451691]
[565.94372559 -100.45742035]
[555.21661377 -89.97177887]
[544.25360107 -79.73303986]
[533.06030273 -69.74651337]
[521.64263916 -60.01736450]
[510.00646973 -50.55064011]
[498.15783691 -41.35124207]
[486.10284424 -32.42394638]
[473.84774780 -23.77337074]
[461.39892578 -15.40400219]
[448.76281738 -7.32017756]
[435.94598389 0.47391433]
[422.95501709 7.97423410]
[409.79672241 15.17689514]
[396.47784424 22.07816315]
[383.00534058 28.67446518]
[369.38619995 34.96237946]
[355.62741089 40.93864822]
[341.73617554 46.60017776]
[327.71966553 51.94402695]
[313.58511353 56.96743393]
[299.33990479 61.66778946]
[284.99139404 66.04266357]
[270.54699707 70.08978271]
[256.01425171 73.80705261]
[241.40061951 77.19255066]
[226.71371460 80.24451447]
[211.96115112 82.96137238]
[197.15055847 85.34170532]
[182.28962708 87.38428497]
[167.38604736 89.08805084]
[152.44755554 90.45213318]
[137.48187256 91.47579956]
[122.49676514 92.15854645]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
