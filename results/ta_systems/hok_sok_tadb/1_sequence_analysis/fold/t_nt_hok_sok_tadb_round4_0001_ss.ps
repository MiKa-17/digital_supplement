%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 09:33:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUA_UCCUG_AUGUUGUCUAG_GC_AU_A_C_AG___G__GGCCUCGU__G_____G__GUUA____AU__GA________A_A___AUU____AAC____UACGGGGCU_UUCUUCU_______UUCUGCC__ACACAAC_ACG_GUAACAAACCAC________CU_U_CACGUCAU_GAGGC_AAAAAGCCUCAAGCGCCA_G_CCA_UUAUA\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50486755 92.08116150]
[62.52727890 91.24379730]
[47.57891083 89.98856354]
[32.67141724 88.31642914]
[17.81642532 86.22871399]
[3.02551651 83.72702789]
[-11.68977356 80.81333923]
[-26.31797218 77.48990631]
[-40.84767151 73.75932312]
[-55.26753998 69.62450409]
[-69.56633759 65.08867645]
[-83.73291016 60.15536499]
[-97.75621796 54.82842255]
[-111.62531281 49.11200714]
[-125.32939911 43.01057053]
[-138.85777283 36.52886963]
[-152.19989014 29.67196465]
[-165.34535217 22.44519806]
[-178.28392029 14.85420513]
[-191.00547791 6.90490675]
[-203.50010681 -1.39649880]
[-215.75808716 -10.04353905]
[-227.76985168 -19.02947044]
[-239.52603149 -28.34728622]
[-251.01745605 -37.98972321]
[-262.23516846 -47.94925690]
[-273.17041016 -58.21812820]
[-283.81466675 -68.78832245]
[-294.15963745 -79.65160370]
[-304.19726562 -90.79949188]
[-313.91970825 -102.22331238]
[-323.31939697 -113.91413879]
[-332.38897705 -125.86286163]
[-341.12139893 -138.06016541]
[-349.50985718 -150.49653625]
[-357.54779053 -163.16227722]
[-365.22894287 -176.04750061]
[-372.54730225 -189.14218140]
[-379.49722290 -202.43611145]
[-386.07321167 -215.91888428]
[-392.27020264 -229.58003235]
[-398.08331299 -243.40887451]
[-403.50805664 -257.39465332]
[-408.54016113 -271.52642822]
[-413.17572021 -285.79321289]
[-417.41113281 -300.18383789]
[-421.24307251 -314.68713379]
[-424.66857910 -329.29177856]
[-427.68493652 -343.98635864]
[-430.28985596 -358.75946045]
[-432.48123169 -373.59948730]
[-434.25741577 -388.49496460]
[-435.61700439 -403.43420410]
[-436.55892944 -418.40557861]
[-437.08245850 -433.39739990]
[-437.18719482 -448.39801025]
[-436.87304688 -463.39572144]
[-436.14025879 -478.37878418]
[-434.98941040 -493.33554077]
[-433.42138672 -508.25436401]
[-431.43740845 -523.12353516]
[-429.03906250 -537.93157959]
[-426.22814941 -552.66687012]
[-423.00692749 -567.31787109]
[-419.37786865 -581.87329102]
[-415.34381104 -596.32165527]
[-410.90789795 -610.65179443]
[-406.07360840 -624.85241699]
[-400.84469604 -638.91259766]
[-395.22521973 -652.82122803]
[-389.21960449 -666.56756592]
[-382.83248901 -680.14086914]
[-376.06890869 -693.53051758]
[-368.93408203 -706.72613525]
[-361.43359375 -719.71734619]
[-353.57330322 -732.49414062]
[-345.35931396 -745.04638672]
[-336.79806519 -757.36444092]
[-327.89617920 -769.43865967]
[-318.66067505 -781.25958252]
[-309.09869385 -792.81805420]
[-299.21771240 -804.10498047]
[-289.02542114 -815.11163330]
[-278.52978516 -825.82946777]
[-267.73898315 -836.25000000]
[-256.66143799 -846.36523438]
[-245.30577087 -856.16717529]
[-233.68084717 -865.64819336]
[-221.79573059 -874.80102539]
[-209.65968323 -883.61834717]
[-197.28218079 -892.09344482]
[-184.67285156 -900.21954346]
[-171.84155273 -907.99047852]
[-158.79827881 -915.40008545]
[-145.55320740 -922.44262695]
[-132.11665344 -929.11260986]
[-118.49909973 -935.40478516]
[-104.71117401 -941.31433105]
[-90.76361847 -946.83654785]
[-76.66730499 -951.96716309]
[-62.43323898 -956.70220947]
[-48.07250977 -961.03796387]
[-33.59631729 -964.97106934]
[-19.01595116 -968.49841309]
[-4.34277964 -971.61730957]
[10.41175556 -974.32525635]
[25.23614883 -976.62023926]
[40.11883926 -978.50036621]
[55.04822540 -979.96417236]
[70.01266479 -981.01062012]
[85.00048065 -981.63879395]
[100.00000000 -981.84820557]
[114.99951935 -981.63879395]
[129.98733521 -981.01062012]
[144.95178223 -979.96417236]
[159.88116455 -978.50036621]
[174.76385498 -976.62023926]
[189.58824158 -974.32525635]
[204.34277344 -971.61730957]
[219.01594543 -968.49841309]
[233.59631348 -964.97106934]
[248.07250977 -961.03796387]
[262.43322754 -956.70220947]
[276.66729736 -951.96716309]
[290.76361084 -946.83654785]
[304.71118164 -941.31433105]
[318.49911499 -935.40478516]
[332.11663818 -929.11260986]
[345.55319214 -922.44262695]
[358.79827881 -915.40008545]
[371.84155273 -907.99047852]
[384.67285156 -900.21954346]
[397.28216553 -892.09344482]
[409.65969849 -883.61834717]
[421.79574585 -874.80102539]
[433.68084717 -865.64819336]
[445.30578613 -856.16717529]
[456.66143799 -846.36523438]
[467.73898315 -836.25000000]
[478.52978516 -825.82946777]
[489.02542114 -815.11163330]
[499.21771240 -804.10498047]
[509.09869385 -792.81805420]
[518.66064453 -781.25958252]
[527.89617920 -769.43865967]
[536.79803467 -757.36444092]
[545.35931396 -745.04638672]
[553.57330322 -732.49414062]
[561.43359375 -719.71734619]
[568.93408203 -706.72613525]
[576.06890869 -693.53051758]
[582.83251953 -680.14086914]
[589.21960449 -666.56756592]
[595.22521973 -652.82122803]
[600.84466553 -638.91259766]
[606.07360840 -624.85241699]
[610.90789795 -610.65179443]
[615.34381104 -596.32165527]
[619.37786865 -581.87329102]
[623.00689697 -567.31787109]
[626.22814941 -552.66687012]
[629.03906250 -537.93157959]
[631.43743896 -523.12353516]
[633.42138672 -508.25436401]
[634.98937988 -493.33554077]
[636.14025879 -478.37878418]
[636.87304688 -463.39572144]
[637.18719482 -448.39801025]
[637.08245850 -433.39739990]
[636.55895996 -418.40557861]
[635.61700439 -403.43420410]
[634.25744629 -388.49496460]
[632.48126221 -373.59948730]
[630.28985596 -358.75946045]
[627.68493652 -343.98635864]
[624.66857910 -329.29177856]
[621.24310303 -314.68713379]
[617.41113281 -300.18383789]
[613.17572021 -285.79321289]
[608.54016113 -271.52642822]
[603.50805664 -257.39465332]
[598.08331299 -243.40887451]
[592.27020264 -229.58003235]
[586.07324219 -215.91888428]
[579.49719238 -202.43611145]
[572.54730225 -189.14218140]
[565.22894287 -176.04750061]
[557.54779053 -163.16227722]
[549.50982666 -150.49653625]
[541.12139893 -138.06016541]
[532.38897705 -125.86286163]
[523.31939697 -113.91413879]
[513.91973877 -102.22331238]
[504.19726562 -90.79949188]
[494.15963745 -79.65160370]
[483.81466675 -68.78832245]
[473.17041016 -58.21812820]
[462.23516846 -47.94925690]
[451.01745605 -37.98972321]
[439.52603149 -28.34728622]
[427.76986694 -19.02947044]
[415.75808716 -10.04353905]
[403.50012207 -1.39649880]
[391.00546265 6.90490675]
[378.28390503 14.85420513]
[365.34536743 22.44519806]
[352.19989014 29.67196465]
[338.85778809 36.52886963]
[325.32940674 43.01057053]
[311.62530518 49.11200714]
[297.75622559 54.82842255]
[283.73291016 60.15536499]
[269.56634521 65.08867645]
[255.26754761 69.62450409]
[240.84767151 73.75932312]
[226.31797791 77.48990631]
[211.68977356 80.81333923]
[196.97448730 83.72702789]
[182.18357849 86.22871399]
[167.32858276 88.31642914]
[152.42109680 89.98856354]
[137.47271729 91.24379730]
[122.49513245 92.08116150]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
