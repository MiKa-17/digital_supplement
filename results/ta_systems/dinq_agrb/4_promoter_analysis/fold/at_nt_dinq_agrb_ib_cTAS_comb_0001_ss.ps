%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:51:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUGAAGACAAUCUCACUCCAGCCAGAGCCACCAACUCAGGGCUGGAAAGU___AAAAAAACCGACGACAAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[139.92581177 180.36141968]
[129.08012390 184.89036560]
[117.73552704 187.96293640]
[106.08666992 189.52642822]
[94.33338165 189.55398560]
[82.67731476 188.04518127]
[71.31843567 185.02584839]
[60.45161438 180.54783630]
[50.26328659 174.68792725]
[40.92824173 167.54669189]
[32.60662842 159.24661255]
[25.44121742 149.93011475]
[19.55493355 139.75700378]
[15.04876328 128.90182495]
[12.00001621 117.55080414]
[10.46099472 105.89868927]
[10.45810223 94.14537048]
[11.99139023 82.49250031]
[15.03455162 71.13998413]
[19.53537750 60.28258896]
[25.41665459 50.10658646]
[32.57748032 40.78655624]
[40.89500809 32.48238754]
[31.99277878 20.40967941]
[23.09054756 8.33696938]
[14.18831825 -3.73573899]
[5.28608751 -15.80844784]
[-11.69432545 -22.65827560]
[-13.21399879 -40.04491043]
[-22.53674698 -51.79592514]
[-31.85949516 -63.54693985]
[-47.49510574 -63.79531860]
[-59.27910614 -74.07497406]
[-61.64744949 -89.53217316]
[-53.48188019 -102.86849213]
[-38.63792419 -107.78693390]
[-24.12445068 -101.96516418]
[-16.79427528 -88.15203094]
[-20.10848045 -72.86968994]
[-10.78573227 -61.11867523]
[-1.46298349 -49.36765671]
[10.64640713 -47.61314774]
[18.49392509 -37.70469666]
[17.35879707 -24.71067810]
[26.26102638 -12.63796902]
[35.16325760 -0.56526053]
[44.06548691 11.50744820]
[52.96771622 23.58015633]
[70.69706726 15.18628597]
[89.82672882 10.84545708]
[109.44254303 10.76510620]
[128.60713196 14.94907284]
[146.40464783 23.19741631]
[161.98460388 35.11597061]
[174.60246277 50.13516998]
[183.65524292 67.53729248]
[188.71035767 86.49073029]
[189.52621460 106.08973694]
[186.06382751 125.39773560]
[200.04528809 130.83087158]
[214.02673340 136.26402283]
[228.00817871 141.69715881]
[241.98963928 147.13031006]
[255.97108459 152.56344604]
[269.95254517 157.99659729]
[283.93399048 163.42973328]
[297.91543579 168.86288452]
[311.89688110 174.29602051]
[325.87832642 179.72917175]
[341.08148193 174.60626221]
[354.48712158 183.41921997]
[355.81158447 199.40750122]
[344.03890991 210.30627441]
[328.20001221 207.75491333]
[320.44519043 193.71061707]
[306.46374512 188.27748108]
[292.48229980 182.84432983]
[278.50085449 177.41119385]
[264.51937866 171.97804260]
[250.53793335 166.54490662]
[236.55648804 161.11175537]
[222.57504272 155.67861938]
[208.59358215 150.24546814]
[194.61213684 144.81233215]
[180.63069153 139.37918091]
[174.79219055 149.57978821]
[167.67056274 158.92980957]
[159.38798523 167.26882935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[29 41]
[30 40]
[31 39]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% Start Annotations
23 48 0.0 0.6 colorpair
24 47 0.32 1 colorpair
25 46 0.0 1 colorpair
26 45 0.16 0.6 colorpair
27 44 0.0 1 colorpair
29 41 0.0 0.6 colorpair
30 40 0.0 1 colorpair
31 39 0.0 0.2 colorpair
59 85 0.0 1 colorpair
60 84 0.0 1 colorpair
61 83 0.0 1 colorpair
62 82 0.0 1 colorpair
63 81 0.32 1 colorpair
64 80 0.16 0.2 colorpair
65 79 0.0 1 colorpair
66 78 0.0 1 colorpair
67 77 0.0 1 colorpair
68 76 0.0 1 colorpair
69 75 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
23 48 1 gmark
24 cmark
47 cmark
26 45 1 gmark
26 cmark
29 41 1 gmark
31 39 2 gmark
63 cmark
81 cmark
64 80 2 gmark
64 cmark
80 cmark
69 cmark

% End Annotations
showpage
end
%%EOF
