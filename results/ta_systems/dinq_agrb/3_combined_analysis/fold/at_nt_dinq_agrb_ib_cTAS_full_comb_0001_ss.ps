%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:49:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUGUGGGCUAUCUCACUCCAGCCAGAGCCACCAACUCAGGGCUGAACAGU___AAAAAAACCGACGCGAAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[215.94769287 283.48303223]
[205.09757996 288.02557373]
[193.74534607 291.11135864]
[182.08564758 292.68701172]
[170.31852722 292.72506714]
[158.64585876 291.22454834]
[147.26802063 288.21078491]
[136.38031006 283.73507690]
[126.16972351 277.87390137]
[116.81165314 270.72741699]
[108.46690369 262.41799927]
[101.27895355 253.08793640]
[95.37144470 242.89704895]
[90.84609985 232.02001953]
[87.78092194 220.64334106]
[86.22888947 208.96209717]
[86.21703339 197.17669678]
[87.74595642 185.48934937]
[90.78980255 174.10066223]
[95.29674530 163.20613098]
[101.18980408 152.99287415]
[108.36820984 143.63630676]
[116.70910645 135.29724121]
[107.80686951 123.22452545]
[98.90464020 111.15181732]
[89.79073334 99.23810577]
[74.33650970 97.28754425]
[65.04931641 85.23754120]
[67.00411224 70.51631927]
[57.68136215 58.76530075]
[42.34082413 60.39974976]
[28.56215477 53.46059418]
[20.74208260 40.16209793]
[21.37595940 24.74776077]
[30.26152039 12.13624477]
[44.56341553 6.35183573]
[59.71796036 9.24031925]
[70.88939667 19.87998962]
[74.51295471 34.87576675]
[69.43238068 49.44255447]
[78.75512695 61.19356918]
[93.53514099 62.63811111]
[103.15713501 74.42250824]
[101.54174805 89.91535187]
[108.78253937 93.88157654]
[110.97734833 102.24958801]
[119.87958527 114.32229614]
[128.78181458 126.39500427]
[146.58207703 117.99278259]
[165.77682495 113.66110229]
[185.44796753 113.60437012]
[204.65522766 117.82259369]
[222.48110962 126.11151123]
[238.07466125 138.07246399]
[250.69219971 153.13159180]
[259.73266602 170.56732178]
[264.76632690 189.54501343]
[265.55517578 209.15684509]
[262.06427002 228.46528625]
[276.04571533 233.89843750]
[290.02716064 239.33157349]
[304.00860596 244.76472473]
[317.99008179 250.19786072]
[331.97152710 255.63101196]
[345.95297241 261.06414795]
[359.93441772 266.49728394]
[373.91586304 271.93045044]
[387.89730835 277.36358643]
[401.87878418 282.79672241]
[417.08190918 277.67379761]
[430.48754883 286.48678589]
[431.81204224 302.47506714]
[420.03933716 313.37384033]
[404.20043945 310.82247925]
[396.44561768 296.77816772]
[382.46417236 291.34503174]
[368.48272705 285.91189575]
[354.50128174 280.47872925]
[340.51983643 275.04559326]
[326.53836060 269.61245728]
[312.55691528 264.17932129]
[298.57546997 258.74615479]
[284.59402466 253.31301880]
[270.61257935 247.87988281]
[256.63113403 242.44673157]
[250.80175781 252.65455627]
[243.68721008 262.01403809]
[235.40924072 270.36437988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 48]
[24 47]
[25 46]
[26 44]
[29 41]
[30 40]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% Start Annotations
23 48 0.0 0.2 colorpair
24 47 0.32 1 colorpair
25 46 0.0 1 colorpair
26 44 0.16 1 colorpair
29 41 0.0 0.2 colorpair
30 40 0.0 1 colorpair
59 85 0.0 1 colorpair
60 84 0.0 1 colorpair
61 83 0.0 1 colorpair
62 82 0.0 1 colorpair
63 81 0.32 1 colorpair
65 79 0.0 1 colorpair
66 78 0.0 1 colorpair
67 77 0.0 1 colorpair
68 76 0.0 1 colorpair
69 75 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
23 48 2 gmark
24 cmark
47 cmark
26 cmark
29 41 2 gmark
63 cmark
81 cmark
64 80 4 gmark
64 cmark
80 cmark
69 cmark

% End Annotations
showpage
end
%%EOF
