%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 19:51:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUGUGGGCAUUCUCACUCCAGCCAGAGCCACCAACUCUGGGCUGAAAAGU_AAAAAACCGACGUAAAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[86.24148560 131.52262878]
[77.62541962 126.88076019]
[70.53613281 119.89909363]
[65.60368347 111.07048035]
[53.40433884 119.79836273]
[48.08774185 127.52286530]
[40.59625626 128.61260986]
[28.08628845 136.88911438]
[15.57632065 145.16563416]
[3.06635308 153.44215393]
[-9.44361401 161.71867371]
[-16.27568436 176.62687683]
[-32.62575531 177.89465332]
[-41.67427444 164.21778870]
[-34.11290359 149.66589355]
[-17.72013092 149.20869446]
[-5.21016312 140.93218994]
[7.29980421 132.65567017]
[19.80977058 124.37915039]
[32.31974030 116.10263824]
[44.67645645 107.59901428]
[56.87580109 98.87113190]
[59.86930466 84.17286682]
[52.05519867 71.36897278]
[44.24109268 58.56507874]
[36.42699051 45.76118088]
[28.61288452 32.95728683]
[13.75826645 35.97657776]
[-1.23270810 33.73013687]
[-14.54980469 26.48922729]
[-24.58492088 15.12823105]
[-30.12626648 1.01903856]
[-30.50469589 -14.13459492]
[-25.67451477 -28.50279427]
[-16.21898842 -40.35052872]
[-3.27991915 -48.24712753]
[11.58023834 -51.23904037]
[26.56704712 -48.96497726]
[39.87077713 -41.69953918]
[49.88493729 -30.32006836]
[55.40027237 -16.20068741]
[55.75077820 -1.04638350]
[50.89412308 13.31289005]
[41.41678238 25.14318085]
[49.23088455 37.94707489]
[57.04499054 50.75097275]
[64.85909271 63.55487061]
[72.67320251 76.35876465]
[81.62910461 69.55983734]
[92.08093262 65.93410492]
[102.96051025 65.73326874]
[113.19200134 68.86492157]
[121.79824829 74.91255951]
[127.99406433 83.18723297]
[131.25744629 92.80449677]
[131.37231445 102.77831268]
[145.56892395 107.62152100]
[159.76551819 112.46472931]
[173.96211243 117.30792999]
[188.15870667 122.15113831]
[202.35530090 126.99434662]
[216.55189514 131.83755493]
[230.74850464 136.68075562]
[244.94509888 141.52395630]
[259.14169312 146.36717224]
[273.33828735 151.21037292]
[288.31369019 145.45564270]
[302.07644653 153.69981384]
[304.06893921 169.61865234]
[292.76269531 181.00059509]
[276.83093262 179.11439514]
[268.49508667 165.40696716]
[254.29849243 160.56376648]
[240.10188293 155.72056580]
[225.90528870 150.87734985]
[211.70869446 146.03414917]
[197.51210022 141.19094849]
[183.31550598 136.34773254]
[169.11891174 131.50453186]
[154.92230225 126.66132355]
[140.72570801 121.81811523]
[126.52911377 116.97491455]
[121.12459564 124.13616180]
[113.80054474 129.59530640]
[105.08835602 132.84283447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% Start Annotations
4 22 0.0 1 colorpair
5 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.0 1 colorpair
9 18 0.0 1 colorpair
10 17 0.0 1 colorpair
11 16 0.0 1 colorpair
23 48 0.0 0.6 colorpair
24 47 0.16 0.6 colorpair
25 46 0.0 0.6 colorpair
26 45 0.0 0.6 colorpair
27 44 0.0 0.6 colorpair
56 82 0.0 0.6 colorpair
57 81 0.0 0.6 colorpair
58 80 0.0 0.6 colorpair
59 79 0.0 0.6 colorpair
60 78 0.0 0.6 colorpair
61 77 0.0 0.6 colorpair
62 76 0.0 0.6 colorpair
63 75 0.0 0.6 colorpair
64 74 0.0 0.6 colorpair
65 73 0.0 0.6 colorpair
66 72 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
23 48 1 gmark
24 47 1 gmark
24 cmark
25 46 1 gmark
26 45 1 gmark
27 44 1 gmark
56 82 1 gmark
57 81 1 gmark
58 80 1 gmark
59 79 1 gmark
60 78 1 gmark
61 77 1 gmark
62 76 1 gmark
63 75 1 gmark
64 74 1 gmark
65 73 1 gmark
66 72 1 gmark

% End Annotations
showpage
end
%%EOF
