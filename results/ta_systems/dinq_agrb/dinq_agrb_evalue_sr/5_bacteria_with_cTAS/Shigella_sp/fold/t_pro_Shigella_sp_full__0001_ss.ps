%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 20:06:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUAAGCGGAUGCAUUCUCACUCCAUCGCAUGGAGAAAACGGGUGAUUGAUAAA_____________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[110.50234985 122.65081024]
[101.76280975 110.45908356]
[93.06653595 122.68098450]
[84.37026215 134.90289307]
[75.67399597 147.12478638]
[80.45425415 161.76907349]
[75.74988556 176.25086975]
[63.56429672 185.08123779]
[48.69363785 185.04345703]
[39.99736404 197.26536560]
[38.98414230 213.63317871]
[24.18403435 220.69638062]
[10.82211876 211.18894958]
[12.64399052 194.89131165]
[27.77546501 188.56909180]
[36.47173691 176.34718323]
[31.56179619 162.31044006]
[35.91019440 147.90365601]
[48.04996490 138.71238708]
[63.45209122 138.42851257]
[72.14836884 126.20661163]
[80.84464264 113.98471069]
[89.54091644 101.76280975]
[82.41888428 88.56142426]
[67.42920685 89.11787415]
[52.43953323 89.67433167]
[37.44985962 90.23078156]
[22.46018410 90.78723907]
[7.47050858 91.34368896]
[-8.13342094 97.97344971]
[-18.82368469 84.81462860]
[-9.13847542 70.89942169]
[6.91405487 76.35401917]
[21.90373039 75.79756165]
[36.89340591 75.24111176]
[51.88307953 74.68465424]
[66.87275696 74.12820435]
[81.86242676 73.57174683]
[76.47262573 59.57353210]
[72.03190613 45.24593735]
[68.56017303 30.65323067]
[66.07301331 15.86086750]
[64.58158112 0.93519694]
[64.09256744 -14.05682945]
[64.60816193 -29.04796600]
[66.12604523 -43.97097015]
[68.63941956 -58.75889969]
[72.13701630 -73.34542847]
[76.60312653 -87.66513062]
[82.01773834 -101.65377045]
[88.35655212 -115.24860382]
[95.59113312 -128.38864136]
[103.68904114 -141.01496887]
[112.61395264 -153.07092285]
[122.32582092 -164.50242615]
[132.78109741 -175.25823975]
[143.93287659 -185.29006958]
[155.73114014 -194.55294800]
[168.12297058 -203.00532532]
[181.05278015 -210.60926819]
[194.46257019 -217.33068848]
[208.29219055 -223.13943481]
[222.47961426 -228.00944519]
[236.96121216 -231.91888428]
[251.67199707 -234.85020447]
[266.54602051 -236.79026794]
[281.51651001 -237.73036194]
[296.51638794 -237.66627502]
[311.47830200 -236.59829712]
[326.33520508 -234.53121948]
[341.02041626 -231.47430420]
[355.46804810 -227.44128418]
[369.61334229 -222.45022583]
[383.39285278 -216.52351379]
[396.74472046 -209.68775940]
[409.60906982 -201.97361755]
[421.92822266 -193.41566467]
[433.64691162 -184.05232239]
[444.71258545 -173.92555237]
[455.07556152 -163.08081055]
[464.68939209 -151.56672668]
[473.51098633 -139.43496704]
[481.50070190 -126.73991394]
[488.62274170 -113.53852844]
[494.84518433 -99.89002991]
[500.14004517 -85.85563660]
[504.48364258 -71.49829865]
[507.85647583 -56.88241959]
[510.24340820 -42.07355118]
[511.63372803 -27.13812256]
[512.02124023 -12.14312840]
[511.40411377 2.84417272]
[509.78518677 17.75655365]
[507.17175293 32.52712631]
[503.57543945 47.08963776]
[499.01248169 61.37876511]
[493.50326538 75.33041382]
[487.07250977 88.88201141]
[479.74911499 101.97276306]
[471.56588745 114.54395294]
[462.55953979 126.53919220]
[452.77047729 137.90467834]
[442.24261475 148.58943176]
[431.02316284 158.54551697]
[419.16241455 167.72828674]
[406.71365356 176.09654236]
[393.73263550 183.61276245]
[380.27764893 190.24322510]
[366.40899658 195.95817566]
[352.18893433 200.73199463]
[337.68118286 204.54327393]
[322.95089722 207.37490845]
[308.06408691 209.21420288]
[293.08755493 210.05290222]
[278.08847046 209.88723755]
[263.13409424 208.71795654]
[248.29154968 206.55032349]
[233.62738037 203.39402771]
[219.20736694 199.26325989]
[205.09620667 194.17651367]
[191.35716248 188.15664673]
[178.05189514 181.23062134]
[165.24006653 173.42953491]
[152.97914124 164.78836060]
[141.32414246 155.34587097]
[130.32731628 145.14440918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[9 16]
[10 15]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
] def

init

% Start Annotations
2 23 0.0 1 colorpair
3 22 0.0 1 colorpair
4 21 0.0 1 colorpair
5 20 0.0 1 colorpair
9 16 0.0 1 colorpair
10 15 0.0 1 colorpair
24 38 0.0 1 colorpair
25 37 0.0 1 colorpair
26 36 0.0 1 colorpair
27 35 0.0 1 colorpair
28 34 0.0 1 colorpair
29 33 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
