%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 20:05:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUAAGCGGAUGCAUUCUCACUCCAUCGCAUGGAGAAAACGGGUGAUUGAUAAAGCAAUCAUCGUUCUAGGGGCGUUAAUUGCGCUGCUGGAACUGAUCCGCUUUCUGCUUCAGCUUCUGAAC\
) } def
/len { sequence length } bind def

/coor [
[51.25445557 160.30703735]
[44.13407516 153.95086670]
[35.43780136 166.17276001]
[26.74152946 178.39466858]
[18.04525566 190.61656189]
[22.82551765 205.26084900]
[18.12114716 219.74264526]
[5.93556166 228.57301331]
[-8.93509960 228.53523254]
[-17.63137245 240.75714111]
[-18.64459229 257.12496948]
[-33.44470215 264.18814087]
[-46.80661774 254.68072510]
[-44.98474503 238.38308716]
[-29.85327339 232.06086731]
[-21.15699959 219.83895874]
[-26.06694031 205.80221558]
[-21.71854210 191.39543152]
[-9.57877350 182.20416260]
[5.82335615 181.92028809]
[14.51962948 169.69839478]
[23.21590233 157.47648621]
[31.91217613 145.25459290]
[24.79014778 132.05320740]
[9.80047131 132.60964966]
[-5.18920326 133.16610718]
[-20.17887878 133.72256470]
[-35.16855240 134.27900696]
[-50.15822983 134.83546448]
[-65.76216125 141.46522522]
[-76.45242310 128.30641174]
[-66.76721191 114.39119720]
[-50.71468353 119.84579468]
[-35.72500610 119.28933716]
[-20.73533249 118.73288727]
[-5.74565697 118.17642975]
[9.24401855 117.61997986]
[24.23369408 117.06352234]
[22.81071091 107.15246582]
[22.67624664 97.15926361]
[23.82775497 87.25042725]
[26.24130058 77.59043884]
[29.87204552 68.33902740]
[34.65506363 59.64853287]
[40.50649261 51.66139984]
[47.32501602 44.50782776]
[54.99359894 38.30366135]
[63.38151169 33.14851379]
[72.34654236 29.12417221]
[81.73740387 26.29329872]
[91.39630890 24.69846153]
[101.16159821 24.36150169]
[110.87046051 25.28325081]
[120.36163330 27.44358826]
[129.47810364 30.80186844]
[138.06967163 35.29766464]
[145.99546814 40.85185623]
[153.12622070 47.36801147]
[164.78730774 37.93301010]
[170.93264771 20.62755203]
[188.29991150 18.45225525]
[199.72406006 8.73171329]
[211.14820862 -0.98882908]
[222.57234192 -10.70937157]
[225.21434021 -16.96028137]
[229.94288635 -20.35217667]
[234.81028748 -20.61110878]
[246.70117188 -29.75479126]
[258.59204102 -38.89847565]
[270.48294067 -48.04215622]
[272.66735840 -63.46506119]
[284.85665894 -72.56866455]
[299.54656982 -70.39110565]
[305.76983643 -84.93695831]
[320.57556152 -86.56167603]
[332.46643066 -95.70536041]
[344.35733032 -104.84903717]
[342.95544434 -120.21257782]
[350.10250854 -133.88455200]
[363.51791382 -141.50228882]
[378.92089844 -140.63499451]
[391.39636230 -131.55943298]
[396.96347046 -117.17156219]
[393.84576416 -102.06250763]
[383.03811646 -91.05351257]
[367.98916626 -87.65751648]
[353.50100708 -92.95816040]
[341.61013794 -83.81447601]
[329.71923828 -74.67079163]
[324.34649658 -60.77896500]
[308.69027710 -58.50022507]
[307.02200317 -43.74378586]
[295.09323120 -34.30140305]
[279.62661743 -36.15127563]
[267.73574829 -27.00759125]
[255.84484863 -17.86390877]
[243.95397949 -8.72022724]
[232.29289246 0.71477175]
[220.86874390 10.43531418]
[209.44461060 20.15585709]
[198.02046204 29.87639999]
[196.71073914 41.96955872]
[187.17846680 50.15756989]
[174.22230530 49.59409332]
[162.56121826 59.02909088]
[167.22500610 66.96534729]
[170.88502502 75.42769623]
[173.48260498 84.28952789]
[174.97492981 93.41780090]
[175.33586121 102.67498016]
[174.55632019 111.92114258]
[172.64450073 121.01611328]
[169.62576294 129.82151794]
[165.54234314 138.20298767]
[160.45280457 146.03208923]
[154.43106079 153.18843079]
[147.56549072 159.56138611]
[139.95747375 165.05189514]
[131.72000122 169.57392883]
[122.97596741 173.05590820]
[113.85631561 175.44178772]
[104.49810791 176.69195557]
[95.04245758 176.78392029]
[85.63237000 175.71264648]
[76.41064453 173.49075317]
[67.51763916 170.14833069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[9 16]
[10 15]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[58 105]
[59 104]
[61 101]
[62 100]
[63 99]
[64 98]
[67 97]
[68 96]
[69 95]
[70 94]
[73 91]
[75 89]
[76 88]
[77 87]
] def

init

% Start Annotations
2 23 0.0 0.6 colorpair
3 22 0.0 0.6 colorpair
4 21 0.0 1 colorpair
5 20 0.0 1 colorpair
9 16 0.0 0.6 colorpair
10 15 0.16 1 colorpair
24 38 0.0 1 colorpair
25 37 0.0 1 colorpair
26 36 0.0 1 colorpair
27 35 0.0 1 colorpair
28 34 0.0 1 colorpair
29 33 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 23 1 gmark
3 22 1 gmark
9 16 1 gmark
10 cmark
58 105 6 gmark
59 104 6 gmark
61 101 6 gmark
62 100 6 gmark
63 99 6 gmark
64 98 6 gmark
67 97 6 gmark
68 96 6 gmark
69 95 6 gmark
70 94 6 gmark
73 91 6 gmark
75 89 6 gmark
76 88 6 gmark
77 87 6 gmark

% End Annotations
showpage
end
%%EOF
