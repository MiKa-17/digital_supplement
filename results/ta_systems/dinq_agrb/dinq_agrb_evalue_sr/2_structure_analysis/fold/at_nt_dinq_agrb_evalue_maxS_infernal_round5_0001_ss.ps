%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 17:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAG_AUG_A_AGACUGUC__UCA_C__UCC_GG_C_CAGAGCCACCAAC__UCA_GGGCU__GGAA__AGU____A_A___________________AAAAA_CCGAC___U_AC____CAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51332092 91.80718231]
[62.57462311 90.42297363]
[47.71579742 88.35031128]
[32.96855164 85.59363556]
[18.36435127 82.15881348]
[3.93436646 78.05319214]
[-10.29060841 73.28552246]
[-24.28021812 67.86597443]
[-38.00460434 61.80612183]
[-51.43448257 55.11889648]
[-64.54119110 47.81856918]
[-77.29676056 39.92071533]
[-89.67396545 31.44219208]
[-101.64640045 22.40109253]
[-113.18850708 12.81671143]
[-124.27565765 2.70950127]
[-134.88420105 -7.89896774]
[-144.99147034 -18.98605537]
[-154.57592773 -30.52810478]
[-163.61709595 -42.50048065]
[-172.09570312 -54.87763596]
[-179.99363708 -67.63315582]
[-187.29403687 -80.73981476]
[-193.98135376 -94.16965485]
[-200.04129028 -107.89400482]
[-205.46092224 -121.88358307]
[-210.22868347 -136.10852051]
[-214.33439636 -150.53848267]
[-217.76930237 -165.14266968]
[-220.52607727 -179.88989258]
[-222.59881592 -194.74870300]
[-223.98312378 -209.68739319]
[-224.67604065 -224.67407227]
[-224.67607117 -239.67675781]
[-223.98321533 -254.66343689]
[-222.59898376 -269.60211182]
[-220.52629089 -284.46093750]
[-217.76957703 -299.20819092]
[-214.33473206 -313.81237793]
[-210.22908020 -328.24237061]
[-205.46138000 -342.46731567]
[-200.04180908 -356.45690918]
[-193.98191833 -370.18130493]
[-187.29466248 -383.61117554]
[-179.99430847 -396.71786499]
[-172.09643555 -409.47341919]
[-163.61788940 -421.85058594]
[-154.57676697 -433.82299805]
[-144.99235535 -445.36511230]
[-134.88511658 -456.45223999]
[-124.27663422 -467.06072998]
[-113.18952179 -477.16799927]
[-101.64745331 -486.75244141]
[-89.67505646 -495.79357910]
[-77.29788971 -504.27215576]
[-64.54235077 -512.17004395]
[-51.43567276 -519.47045898]
[-38.00582123 -526.15771484]
[-24.28145790 -532.21765137]
[-10.29187298 -537.63720703]
[3.93308282 -542.40496826]
[18.36305046 -546.51062012]
[32.96723557 -549.94549561]
[47.71447372 -552.70227051]
[62.57329178 -554.77496338]
[77.51197815 -556.15924072]
[92.49865723 -556.85211182]
[107.50134277 -556.85211182]
[122.48802185 -556.15924072]
[137.42671204 -554.77496338]
[152.28552246 -552.70227051]
[167.03276062 -549.94549561]
[181.63694763 -546.51062012]
[196.06690979 -542.40496826]
[210.29187012 -537.63720703]
[224.28146362 -532.21765137]
[238.00582886 -526.15771484]
[251.43566895 -519.47045898]
[264.54235840 -512.17004395]
[277.29788208 -504.27215576]
[289.67504883 -495.79357910]
[301.64746094 -486.75244141]
[313.18951416 -477.16799927]
[324.27664185 -467.06072998]
[334.88513184 -456.45223999]
[344.99234009 -445.36511230]
[354.57675171 -433.82299805]
[363.61788940 -421.85058594]
[372.09643555 -409.47341919]
[379.99432373 -396.71786499]
[387.29467773 -383.61117554]
[393.98193359 -370.18130493]
[400.04180908 -356.45690918]
[405.46136475 -342.46731567]
[410.22906494 -328.24237061]
[414.33474731 -313.81237793]
[417.76959229 -299.20819092]
[420.52627563 -284.46093750]
[422.59896851 -269.60211182]
[423.98321533 -254.66343689]
[424.67605591 -239.67675781]
[424.67602539 -224.67407227]
[423.98312378 -209.68739319]
[422.59881592 -194.74870300]
[420.52606201 -179.88989258]
[417.76931763 -165.14266968]
[414.33438110 -150.53848267]
[410.22866821 -136.10852051]
[405.46090698 -121.88358307]
[400.04129028 -107.89400482]
[393.98135376 -94.16965485]
[387.29403687 -80.73981476]
[379.99362183 -67.63315582]
[372.09570312 -54.87763596]
[363.61709595 -42.50048065]
[354.57592773 -30.52810478]
[344.99148560 -18.98605537]
[334.88418579 -7.89896774]
[324.27566528 2.70950127]
[313.18850708 12.81671143]
[301.64639282 22.40109253]
[289.67398071 31.44219208]
[277.29675293 39.92071533]
[264.54119873 47.81856918]
[251.43447876 55.11889648]
[238.00460815 61.80612183]
[224.28021240 67.86597443]
[210.29060364 73.28552246]
[196.06562805 78.05319214]
[181.63565063 82.15881348]
[167.03144836 85.59363556]
[152.28419495 88.35031128]
[137.42536926 90.42297363]
[122.48667908 91.80718231]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
