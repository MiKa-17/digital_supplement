%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 17:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____________GAGUAAGCAGC____GG_UGU_U_CUCACUC__C_AUUU__AA___UGGAG_AA__A_CGG_AUG__________________AUUGAUA______AGGUAAUCAUCGUUCUGAGGGCGGUA__GUUGCGCUGCUAGAACUGAUCCGUGCUCUUCUGGAACUGAU___GAGCUGA______________________________\
) } def
/len { sequence length } bind def

/coor [
[198.56626892 900.09442139]
[183.73744202 897.82385254]
[169.00083923 895.01629639]
[154.37590027 891.67547607]
[139.88191223 887.80584717]
[125.53800201 883.41247559]
[111.36306763 878.50115967]
[97.37582397 873.07836914]
[83.59471130 867.15124512]
[70.03790283 860.72760010]
[56.72328568 853.81597900]
[43.66841507 846.42547607]
[30.89051247 838.56573486]
[18.40643120 830.24725342]
[6.23263550 821.48089600]
[-5.61481762 812.27832031]
[-17.12030220 802.65161133]
[-28.26864433 792.61346436]
[-39.04513931 782.17718506]
[-49.43557358 771.35638428]
[-59.42624283 760.16552734]
[-69.00396729 748.61920166]
[-78.15612793 736.73278809]
[-86.87063599 724.52185059]
[-95.13600159 712.00250244]
[-102.94133759 699.19128418]
[-110.27632904 686.10516357]
[-117.13131714 672.76129150]
[-123.49725342 659.17730713]
[-129.36573792 645.37109375]
[-134.72904968 631.36096191]
[-139.58009338 617.16528320]
[-143.91247559 602.80279541]
[-147.72048950 588.29254150]
[-150.99909973 573.65350342]
[-153.74398804 558.90509033]
[-155.95155334 544.06677246]
[-157.61885071 529.15808105]
[-158.74371338 514.19860840]
[-159.32463074 499.20822144]
[-159.36085510 484.20660400]
[-158.85232544 469.21356201]
[-157.79972839 454.24890137]
[-156.20443726 439.33230591]
[-154.06855774 424.48345947]
[-151.39491272 409.72198486]
[-148.18702698 395.06732178]
[-144.44912720 380.53878784]
[-140.18614197 366.15557861]
[-135.40370178 351.93664551]
[-130.10812378 337.90075684]
[-124.30636597 324.06640625]
[-118.00610352 310.45184326]
[-111.21563721 297.07501221]
[-103.94391632 283.95358276]
[-96.20053864 271.10485840]
[-87.99571991 258.54577637]
[-79.34027863 246.29289246]
[-70.24562836 234.36238098]
[-60.72377014 222.76997375]
[-50.78725815 211.53094482]
[-40.44919586 200.66015625]
[-29.72322464 190.17190552]
[-18.62348747 180.08004761]
[-7.16462231 170.39790344]
[4.63825417 161.13821411]
[16.76957512 152.31320190]
[29.21334267 143.93450928]
[41.95314407 136.01319885]
[54.97217178 128.55969238]
[68.25325775 121.58384705]
[81.77889252 115.09484863]
[95.53121948 109.10126495]
[89.88783264 103.35221863]
[90.06459045 94.90099335]
[84.77662659 80.86399078]
[79.48866272 66.82698822]
[64.76686096 69.86264801]
[49.75143051 70.55781555]
[34.81212997 68.89537048]
[20.31685066 64.91624451]
[6.62255764 58.71843719]
[-5.93351793 50.45457458]
[-17.04216957 40.32815552]
[-26.42984009 28.58855820]
[-33.86534500 15.52487755]
[-39.16558075 1.45881939]
[-42.20002747 -13.26322651]
[-42.89395142 -28.27871704]
[-41.23027039 -43.21788406]
[-37.24995041 -57.71283340]
[-31.05101585 -71.40661621]
[-22.78611374 -83.96200562]
[-12.65878105 -95.06982422]
[-0.91840822 -104.45652771]
[12.14588547 -111.89095306]
[26.21238136 -117.19002533]
[40.93467712 -120.22325897]
[55.95022583 -120.91594696]
[70.88925171 -119.25102997]
[85.38387299 -115.26951599]
[99.07714081 -109.06945038]
[111.63185883 -100.80351257]
[122.73883820 -90.67526245]
[132.12457275 -78.93411255]
[139.55792236 -65.86920929]
[144.85583496 -51.80227661]
[147.88784790 -37.07973099]
[148.57929993 -22.06412506]
[146.91314697 -7.12523460]
[142.93043518 7.36905766]
[136.72924805 21.06181717]
[128.46226501 33.61584473]
[118.33310699 44.72199249]
[106.59118652 54.10675430]
[93.52566528 61.53902817]
[98.81362915 75.57602692]
[104.10159302 89.61302948]
[109.49056244 103.61156464]
[123.64159393 98.63179016]
[137.96411133 94.16913605]
[152.43922424 90.22949219]
[167.04783630 86.81804657]
[181.77070618 83.93930817]
[196.58837891 81.59707642]
[211.48133850 79.79442596]
[226.42993164 78.53374481]
[241.41444397 77.81669617]
[256.41510010 77.64421844]
[271.41213989 78.01654816]
[286.38577271 78.93319702]
[301.31625366 80.39293671]
[316.18386841 82.39385986]
[330.96902466 84.93332672]
[345.65222168 88.00797272]
[360.21408081 91.61376190]
[374.63543701 95.74592590]
[388.89721680 100.39901733]
[402.98062134 105.56690216]
[416.86709595 111.24276733]
[430.53833008 117.41911316]
[443.97628784 124.08780670]
[457.16320801 131.24005127]
[470.08172607 138.86640930]
[482.71484375 146.95681763]
[495.04580688 155.50061035]
[507.05844116 164.48652649]
[518.73687744 173.90269470]
[530.06567383 183.73672485]
[541.02990723 193.97561646]
[551.61511230 204.60589600]
[561.80737305 215.61351013]
[571.59320068 226.98396301]
[580.95971680 238.70225525]
[589.89459229 250.75291443]
[598.38592529 263.12008667]
[606.42260742 275.78741455]
[613.99407959 288.73818970]
[621.09027100 301.95538330]
[627.70184326 315.42150879]
[633.82006836 329.11883545]
[639.43695068 343.02929688]
[644.54498291 357.13452148]
[649.13745117 371.41592407]
[653.20837402 385.85467529]
[656.75231934 400.43173218]
[659.76458740 415.12786865]
[662.24127197 429.92367554]
[664.17901611 444.79965210]
[665.57537842 459.73617554]
[666.42840576 474.71356201]
[666.73706055 489.71203613]
[666.50091553 504.71182251]
[665.72027588 519.69317627]
[664.39611816 534.63629150]
[662.53027344 549.52142334]
[660.12512207 564.32904053]
[657.18389893 579.03955078]
[653.71044922 593.63354492]
[649.70941162 608.09179688]
[645.18597412 622.39526367]
[640.14617920 636.52502441]
[634.59661865 650.46246338]
[628.54461670 664.18920898]
[621.99822998 677.68713379]
[614.96600342 690.93841553]
[607.45721436 703.92565918]
[599.48181152 716.63171387]
[591.05035400 729.03973389]
[582.17382812 741.13342285]
[572.86407471 752.89685059]
[563.13330078 764.31445312]
[552.99438477 775.37121582]
[542.46063232 786.05255127]
[531.54602051 796.34429932]
[520.26489258 806.23297119]
[508.63211060 815.70544434]
[496.66305542 824.74932861]
[484.37350464 833.35260010]
[471.77966309 841.50402832]
[458.89813232 849.19268799]
[445.74591064 856.40856934]
[432.34036255 863.14215088]
[418.69915771 869.38452148]
[404.84027100 875.12738037]
[390.78198242 880.36328125]
[376.54284668 885.08526611]
[362.14166260 889.28704834]
[347.59738159 892.96319580]
[332.92919922 896.10876465]
[318.15649414 898.71966553]
[303.29873657 900.79241943]
[288.37548828 902.32427979]
[273.40646362 903.31329346]
[258.41140747 903.75811768]
[243.41007996 903.65814209]
[228.42227173 903.01348877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[73 119]
[75 118]
[76 117]
[77 116]
] def

init

% Start Annotations
73 119 0.32 0.6 colorpair
75 118 0.16 1 colorpair
77 116 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
73 119 1 gmark
73 cmark
119 cmark
75 cmark
76 117 3 gmark
117 cmark
77 116 2 gmark
116 cmark

% End Annotations
showpage
end
%%EOF
