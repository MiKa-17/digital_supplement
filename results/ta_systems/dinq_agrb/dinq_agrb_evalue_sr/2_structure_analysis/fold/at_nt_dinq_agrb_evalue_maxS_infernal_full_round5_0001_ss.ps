%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 17:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAG_AUG_A_GGACUA__UC__UCA_C__UCCA_G_CC_AGAGCCACCAA_C__UC_AGGGCU__GGAAAG_____U_____A___________________AAA__A_A_C_CG__AC_GCA_____AAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51171875 91.85016632]
[62.56565475 90.55166626]
[47.68987274 88.60694122]
[32.91229630 86.01964569]
[18.26066971 82.79462433]
[3.76250005 78.93794250]
[-10.55499268 74.45684052]
[-24.66492844 69.35972595]
[-38.54082108 63.65616989]
[-52.15661240 57.35688019]
[-65.48674774 50.47368622]
[-78.50620270 43.01950836]
[-91.19052124 35.00833893]
[-103.51590729 26.45521927]
[-115.45920563 17.37620926]
[-126.99800873 7.78835058]
[-138.11064148 -2.29035401]
[-148.77624512 -12.84098339]
[-158.97479248 -23.84373093]
[-168.68714905 -35.27793884]
[-177.89506531 -47.12213898]
[-186.58126831 -59.35409927]
[-194.72943115 -71.95085144]
[-202.32427979 -84.88874817]
[-209.35154724 -98.14350128]
[-215.79803467 -111.69022369]
[-221.65164185 -125.50348663]
[-226.90138245 -139.55735779]
[-231.53738403 -153.82543945]
[-235.55097961 -168.28096008]
[-238.93460083 -182.89677429]
[-241.68190002 -197.64543152]
[-243.78773499 -212.49926758]
[-245.24815369 -227.43037415]
[-246.06037903 -242.41073608]
[-246.22293091 -257.41223145]
[-245.73547363 -272.40667725]
[-244.59893799 -287.36590576]
[-242.81544495 -302.26190186]
[-240.38836670 -317.06661987]
[-237.32221985 -331.75231934]
[-233.62280273 -346.29141235]
[-229.29704285 -360.65658569]
[-224.35304260 -374.82092285]
[-218.80012512 -388.75778198]
[-212.64868164 -402.44097900]
[-205.91026306 -415.84490967]
[-198.59753418 -428.94433594]
[-190.72422791 -441.71466064]
[-182.30509949 -454.13195801]
[-173.35598755 -466.17291260]
[-163.89367676 -477.81488037]
[-153.93591309 -489.03601074]
[-143.50143433 -499.81527710]
[-132.60978699 -510.13241577]
[-121.28144836 -519.96801758]
[-109.53767395 -529.30371094]
[-97.40051270 -538.12188721]
[-84.89275360 -546.40600586]
[-72.03787994 -554.14056396]
[-58.86001587 -561.31097412]
[-45.38391113 -567.90380859]
[-31.63486099 -573.90667725]
[-17.63868141 -579.30828857]
[-3.42164683 -584.09857178]
[10.98955154 -588.26849365]
[25.56785965 -591.81024170]
[40.28590393 -594.71716309]
[55.11605835 -596.98376465]
[70.03047180 -598.60577393]
[85.00115967 -599.58020020]
[100.00000000 -599.90521240]
[114.99884033 -599.58020020]
[129.96952820 -598.60577393]
[144.88394165 -596.98376465]
[159.71409607 -594.71716309]
[174.43214417 -591.81024170]
[189.01045227 -588.26849365]
[203.42164612 -584.09857178]
[217.63868713 -579.30828857]
[231.63485718 -573.90667725]
[245.38391113 -567.90380859]
[258.86001587 -561.31097412]
[272.03787231 -554.14056396]
[284.89276123 -546.40600586]
[297.40051270 -538.12188721]
[309.53768921 -529.30371094]
[321.28146362 -519.96801758]
[332.60980225 -510.13241577]
[343.50143433 -499.81527710]
[353.93591309 -489.03601074]
[363.89367676 -477.81488037]
[373.35598755 -466.17291260]
[382.30511475 -454.13195801]
[390.72421265 -441.71466064]
[398.59753418 -428.94433594]
[405.91027832 -415.84490967]
[412.64868164 -402.44097900]
[418.80010986 -388.75778198]
[424.35305786 -374.82092285]
[429.29702759 -360.65658569]
[433.62280273 -346.29141235]
[437.32223511 -331.75231934]
[440.38836670 -317.06661987]
[442.81546021 -302.26190186]
[444.59893799 -287.36590576]
[445.73547363 -272.40667725]
[446.22293091 -257.41223145]
[446.06039429 -242.41073608]
[445.24813843 -227.43037415]
[443.78775024 -212.49926758]
[441.68191528 -197.64543152]
[438.93460083 -182.89677429]
[435.55096436 -168.28096008]
[431.53738403 -153.82543945]
[426.90136719 -139.55735779]
[421.65164185 -125.50348663]
[415.79803467 -111.69022369]
[409.35153198 -98.14350128]
[402.32427979 -84.88874817]
[394.72943115 -71.95085144]
[386.58126831 -59.35409927]
[377.89505005 -47.12213898]
[368.68713379 -35.27793884]
[358.97479248 -23.84373093]
[348.77624512 -12.84098339]
[338.11062622 -2.29035401]
[326.99801636 7.78835058]
[315.45919800 17.37620926]
[303.51589966 26.45521927]
[291.19052124 35.00833893]
[278.50619507 43.01950836]
[265.48675537 50.47368622]
[252.15661621 57.35688019]
[238.54081726 63.65616989]
[224.66493225 69.35972595]
[210.55499268 74.45684052]
[196.23750305 78.93794250]
[181.73933411 82.79462433]
[167.08770752 86.01964569]
[152.31013489 88.60694122]
[137.43434143 90.55166626]
[122.48828125 91.85016632]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
