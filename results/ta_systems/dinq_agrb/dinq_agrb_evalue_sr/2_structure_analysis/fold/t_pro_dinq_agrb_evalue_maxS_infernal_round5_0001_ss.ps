%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 17:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUAAGCGGCGG_UGUUC_UCACUCC_AUUU________AA_UGGAGAA_AACGG_________AU_________GAUUGAUA______AAGCAAUCAUCGUUCUGAGG_____________________GCGUUAAUUGCGCUUCUGGAACUGAUCCGCUAUCUUCUCCAGUUA_UGAAC_________\
) } def
/len { sequence length } bind def

/coor [
[-93.22387695 577.27233887]
[-107.17907715 582.77978516]
[-121.37210083 587.64166260]
[-135.77310181 591.84765625]
[-150.35179138 595.38903809]
[-165.07751465 598.25830078]
[-179.91928101 600.44940186]
[-194.84591675 601.95776367]
[-209.82600403 602.78021240]
[-224.82804871 602.91503906]
[-239.82049561 602.36187744]
[-254.77182007 601.12194824]
[-269.65057373 599.19787598]
[-284.42547607 596.59368896]
[-299.06542969 593.31488037]
[-313.53970337 589.36828613]
[-327.81777954 584.76226807]
[-341.86968994 579.50646973]
[-355.66586304 573.61193848]
[-369.17727661 567.09112549]
[-382.37554932 559.95776367]
[-395.23287964 552.22674561]
[-407.72225952 543.91442871]
[-419.81741333 535.03820801]
[-431.49291992 525.61688232]
[-442.72418213 515.67010498]
[-453.48760986 505.21890259]
[-463.76058960 494.28521729]
[-473.52148438 482.89202881]
[-482.74978638 471.06335449]
[-491.42605591 458.82400513]
[-499.53207397 446.19973755]
[-507.05081177 433.21713257]
[-513.96643066 419.90347290]
[-520.26434326 406.28674316]
[-525.93139648 392.39556885]
[-530.95562744 378.25921631]
[-535.32647705 363.90737915]
[-539.03472900 349.37023926]
[-542.07263184 334.67840576]
[-544.43371582 319.86270142]
[-546.11309814 304.95434570]
[-547.10717773 289.98468018]
[-547.41394043 274.98516846]
[-547.03271484 259.98736572]
[-545.96429443 245.02279663]
[-544.21087646 230.12297058]
[-541.77624512 215.31918335]
[-538.66546631 200.64259338]
[-534.88507080 186.12405396]
[-530.44299316 171.79409790]
[-525.34863281 157.68286133]
[-519.61267090 143.82002258]
[-513.24719238 130.23474121]
[-506.26556396 116.95557404]
[-498.68246460 104.01045990]
[-490.51385498 91.42661285]
[-481.77688599 79.23050690]
[-472.48995972 67.44778442]
[-462.67263794 56.10321808]
[-452.34548950 45.22068024]
[-441.53027344 34.82304764]
[-430.24975586 24.93218994]
[-418.52761841 15.56890774]
[-406.38854980 6.75289059]
[-393.85803223 -1.49731994]
[-380.96246338 -9.16437340]
[-367.72894287 -16.23214722]
[-354.18530273 -22.68577576]
[-340.36004639 -28.51168823]
[-326.28219604 -33.69763184]
[-311.98141479 -38.23270035]
[-297.48773193 -42.10735703]
[-282.83166504 -45.31345749]
[-268.04403687 -47.84424973]
[-253.15589905 -49.69441986]
[-238.19860840 -50.86006927]
[-223.20359802 -51.33875656]
[-208.20240784 -51.12946701]
[-193.22659302 -50.23264313]
[-178.30763245 -48.65017319]
[-163.47691345 -46.38537979]
[-148.76562500 -43.44303131]
[-134.20469666 -39.82931137]
[-119.82476807 -35.55182266]
[-105.65605927 -30.61956215]
[-91.72837830 -25.04289818]
[-78.07101440 -18.83356285]
[-64.71269226 -12.00461006]
[-51.68149948 -4.57040453]
[-39.00484085 3.45342088]
[-26.70937729 12.04999161]
[-14.82096577 21.20122719]
[-3.36460996 30.88788605]
[7.63559866 41.08959579]
[18.15652657 51.78489685]
[28.17604828 62.95130539]
[37.67309189 74.56533051]
[46.62768555 86.60255432]
[55.02099609 99.03765106]
[62.83537292 111.84449005]
[75.98464966 104.62669373]
[89.13392639 97.40890503]
[102.22433472 90.08489227]
[115.25501251 82.65512085]
[128.28569031 75.22534943]
[141.31636047 67.79557800]
[154.34704590 60.36581039]
[148.83616638 46.38685989]
[145.37088013 31.76589584]
[144.02172852 16.80058479]
[144.81617737 1.79559791]
[147.73806763 -12.94357967]
[152.72789001 -27.11687851]
[159.68406677 -40.43574905]
[168.46499634 -52.62903595]
[178.89187622 -63.44849777]
[190.75245667 -72.67386627]
[203.80526733 -80.11732483]
[217.78454590 -85.62733459]
[232.40573120 -89.09171295]
[247.37112427 -90.43993378]
[262.37606812 -89.64455414]
[277.11505127 -86.72176361]
[291.28805542 -81.73105621]
[304.60647583 -74.77405548]
[316.79922485 -65.99237823]
[327.61804199 -55.56482315]
[336.84268188 -43.70367050]
[344.28533936 -30.65040588]
[349.79446411 -16.67077446]
[353.25796509 -2.04938269]
[354.60525513 12.91609573]
[353.80892944 27.92098427]
[350.88522339 42.65980148]
[345.89364624 56.83248138]
[338.93582153 70.15048981]
[330.15341187 82.34268951]
[319.72515869 93.16085815]
[307.86343384 102.38475800]
[294.80972290 109.82660675]
[280.82974243 115.33487701]
[266.20812988 118.79745483]
[251.24258423 120.14382172]
[236.23774719 119.34658051]
[221.49911499 116.42196655]
[207.32673645 111.42951202]
[194.00915527 104.47085571]
[181.81750488 95.68767548]
[170.99996948 85.25877380]
[161.77680969 73.39648438]
[148.74613953 80.82625580]
[135.71545410 88.25602722]
[122.68478394 95.68579102]
[109.65410614 103.11556244]
[104.75970459 109.53565216]
[96.35171509 110.55818939]
[83.20243835 117.77597809]
[70.05316162 124.99376678]
[76.66172791 138.46247864]
[82.64585876 152.22001648]
[87.99295044 166.23742676]
[92.69177246 180.48524475]
[96.73244476 194.93351746]
[100.10645294 209.55184937]
[102.80671692 224.30949402]
[104.82755280 239.17541504]
[106.16471100 254.11834717]
[106.81538391 269.10687256]
[106.77819061 284.10949707]
[106.05322266 299.09460449]
[104.64199829 314.03073120]
[102.54748535 328.88644409]
[99.77409363 343.63052368]
[96.32764435 358.23193359]
[92.21540070 372.66000366]
[87.44599915 386.88436890]
[82.02947235 400.87509155]
[75.97721863 414.60278320]
[69.30195618 428.03857422]
[62.01772308 441.15420532]
[54.13984680 453.92205811]
[45.68489075 466.31533813]
[36.67063522 478.30795288]
[27.11603355 489.87466431]
[17.04118729 500.99118042]
[6.46727800 511.63409424]
[-4.58345509 521.78106689]
[-16.08777237 531.41070557]
[-28.02147865 540.50280762]
[-40.35947800 549.03820801]
[-53.07582474 556.99896240]
[-66.14377594 564.36840820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[101 159]
[102 158]
[103 157]
[104 155]
[105 154]
[106 153]
[107 152]
[108 151]
] def

init

% Start Annotations
101 159 0.0 1 colorpair
102 158 0.0 1 colorpair
103 157 0.16 0.2 colorpair
104 155 0.32 1 colorpair
105 154 0.32 1 colorpair
106 153 0.0 1 colorpair
107 152 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
103 157 2 gmark
103 cmark
104 cmark
155 cmark
105 cmark
154 cmark
107 cmark
108 151 12 gmark
151 cmark

% End Annotations
showpage
end
%%EOF
