%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 13:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUGAUGGCAUUCUCACUCCAGCCAGAGCCACCAACUCAGGGCUGGAAAGU_AAAAA_A____CCGACGCAAAGUCGGUUUUUUUAC__\
) } def
/len { sequence length } bind def

/coor [
[-17.22140121 204.41433716]
[-31.18470001 209.62304688]
[-45.63269424 213.27485657]
[-60.39237213 215.32623291]
[-75.28701019 215.75279236]
[-90.13829041 214.54960632]
[-104.76842499 211.73123169]
[-119.00230408 207.33160400]
[-132.66957092 201.40356445]
[-145.60668945 194.01823425]
[-157.65884399 185.26419067]
[-168.68186951 175.24636841]
[-178.54391479 164.08482361]
[-187.12704468 151.91331482]
[-194.32864380 138.87765503]
[-200.06265259 125.13396454]
[-204.26060486 110.84687805]
[-206.87239075 96.18746948]
[-207.86692810 81.33127594]
[-207.23248291 66.45616150]
[-222.05950928 64.18474579]
[-236.88653564 61.91333008]
[-249.47528076 71.46836853]
[-265.12176514 69.24046326]
[-274.54315186 56.55138397]
[-272.14996338 40.92934418]
[-259.36196899 31.64262199]
[-243.76611328 34.20086288]
[-234.61511230 47.08630753]
[-219.78808594 49.35772324]
[-204.96105957 51.62913895]
[-201.04768372 37.04552841]
[-195.54231262 22.98448753]
[-188.51255798 9.61923218]
[-180.04481506 -2.88558364]
[-170.24317932 -14.37587833]
[-159.22822571 -24.71004486]
[-147.13542175 -33.76070023]
[-134.11358643 -41.41625214]
[-120.32295227 -47.58226776]
[-105.93325043 -52.18265533]
[-91.12161255 -55.16058731]
[-76.07038116 -56.47921371]
[-60.96487045 -56.12210846]
[-45.99108505 -54.09348297]
[-31.33342171 -50.41812897]
[-17.17241669 -45.14111710]
[-3.68250036 -38.32725143]
[8.97013474 -30.06026459]
[20.62959099 -20.44179344]
[31.15218163 -9.59012794]
[40.40820694 2.36124396]
[48.28353882 15.26527500]
[54.68104935 28.96317291]
[59.52179718 43.28635025]
[62.74599075 58.05850220]
[64.31375122 73.09777069]
[64.20558929 88.21900177]
[79.10086823 89.98834991]
[93.99615479 91.75770569]
[101.91432190 89.47269440]
[109.36148834 93.84663391]
[113.77786255 91.89469910]
[118.12640381 91.62245178]
[121.84561157 92.77352905]
[124.53084564 94.92398834]
[125.97801208 97.55496979]
[140.36390686 101.80305481]
[154.74978638 106.05113220]
[169.13568115 110.29921722]
[183.52156067 114.54730225]
[198.24444580 108.17421722]
[212.33843994 115.83836365]
[214.99182129 131.66047668]
[204.16915894 143.50317383]
[188.17266846 142.28175354]
[179.27348328 128.93319702]
[164.88760376 124.68510437]
[150.50170898 120.43702698]
[136.11581421 116.18894196]
[121.72992706 111.94085693]
[107.09007263 108.67365265]
[92.22679901 106.65298462]
[77.33152008 104.88363647]
[62.43624115 103.11428070]
[59.05843353 117.63706970]
[54.11447144 131.70312500]
[47.66371536 145.14413452]
[39.78355026 157.79924011]
[30.56845856 169.51702881]
[20.12890434 180.15734863]
[8.58999252 189.59292603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 31]
[21 30]
[22 29]
[58 85]
[59 84]
[60 83]
[62 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% Start Annotations
20 31 0.16 0.2 colorpair
22 29 0.16 1 colorpair
58 85 0.16 0.6 colorpair
59 84 0.0 1 colorpair
60 83 0.0 1 colorpair
62 82 0.0 0.2 colorpair
67 81 0.0 1 colorpair
68 80 0.0 0.6 colorpair
69 79 0.0 1 colorpair
70 78 0.0 1 colorpair
71 77 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 31 2 gmark
20 cmark
21 30 3 gmark
30 cmark
22 cmark
58 85 1 gmark
58 cmark
62 82 2 gmark
68 80 1 gmark
71 cmark

% End Annotations
showpage
end
%%EOF
