%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 14:58:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUGAUGGCUUUCUCACUCCAGCCAGAGCCACCAACUCAGGGCUGGAAAGU_A___AAAA__ACCGACGCAAAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[-11.48381901 158.48992920]
[-25.50539207 164.99662781]
[-40.18319702 169.84156799]
[-55.32107162 172.96025085]
[-70.71672821 174.31123352]
[-86.16445923 173.87669373]
[-101.45789337 171.66264343]
[-116.39274597 167.69888306]
[-130.76954651 162.03860474]
[-144.39630127 154.75762939]
[-157.09106445 145.95343018]
[-168.68435669 135.74382019]
[-179.02146912 124.26535034]
[-187.96443176 111.67153168]
[-195.39395142 98.13074493]
[-201.21099854 83.82400513]
[-205.33804321 68.94253540]
[-207.72015381 53.68520355]
[-208.32575989 38.25588608]
[-207.14697266 22.86072540]
[-221.87738037 20.02966118]
[-236.60780334 17.19859695]
[-249.54924011 26.27023888]
[-265.10015869 23.45163155]
[-274.03445435 10.41500473]
[-271.05160522 -5.10524225]
[-257.92123413 -13.90122223]
[-242.43339539 -10.75443554]
[-233.77673340 2.46818399]
[-219.04632568 5.29924774]
[-204.31590271 8.13031197]
[-200.00405884 -5.80048609]
[-194.19908142 -19.17899132]
[-186.96997070 -31.84569550]
[-178.40275574 -43.64955902]
[-168.59938049 -54.44981003]
[-157.67655945 -64.11761475]
[-145.76434326 -72.53764343]
[-133.00459290 -79.60939026]
[-119.54929352 -85.24843597]
[-105.55873108 -89.38742065]
[-91.19958496 -91.97684479]
[-76.64295197 -92.98568726]
[-62.06230164 -92.40174866]
[-47.63140106 -90.23181915]
[-33.52225494 -86.50157928]
[-19.90305710 -81.25532532]
[-6.93617249 -74.55541992]
[5.22378635 -66.48155212]
[16.43180656 -57.12979507]
[26.55420876 -46.61146545]
[35.47023392 -35.05180359]
[43.07349014 -22.58845711]
[49.27321625 -9.36987209]
[53.99536896 4.44649315]
[57.18351746 18.69603920]
[58.79948807 33.20898438]
[58.82385635 47.81239319]
[57.25616074 62.33222580]
[54.11491013 76.59542847]
[68.31539154 81.42723083]
[82.51586914 86.25904083]
[96.71635437 91.09085083]
[102.04821777 89.82569885]
[107.68008423 91.76320648]
[111.70979309 96.77710724]
[125.54308319 102.57711029]
[141.26162720 100.77768707]
[150.00720215 112.83438873]
[163.84049988 118.63439178]
[177.67379761 124.43439484]
[193.00675964 119.71423340]
[206.17529297 128.87768555]
[207.07765198 144.89533997]
[195.02159119 155.47982788]
[179.25552368 152.51162720]
[171.87379456 138.26768494]
[158.04049683 132.46768188]
[144.20721436 126.66767883]
[129.47811890 128.88195801]
[119.74308014 116.41040039]
[105.90979004 110.61039734]
[91.88454437 105.29132843]
[77.68406677 100.45951843]
[63.48358536 95.62771606]
[49.28310394 90.79590607]
[42.66266251 104.77059174]
[34.47439575 117.88715363]
[24.82788849 129.97047424]
[13.85219288 140.85926819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 31]
[21 30]
[22 29]
[60 86]
[61 85]
[62 84]
[63 83]
[66 82]
[67 81]
[69 79]
[70 78]
[71 77]
] def

init

% Start Annotations
20 31 0.16 0.2 colorpair
22 29 0.16 1 colorpair
60 86 0.16 0.6 colorpair
61 85 0.0 0.6 colorpair
62 84 0.0 0.2 colorpair
63 83 0.0 0.2 colorpair
67 81 0.0 1 colorpair
69 79 0.0 0.2 colorpair
70 78 0.0 1 colorpair
71 77 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 31 2 gmark
20 cmark
21 30 4 gmark
30 cmark
22 cmark
60 86 1 gmark
60 cmark
61 85 1 gmark
62 84 2 gmark
63 83 2 gmark
66 82 4 gmark
66 cmark
82 cmark
69 79 2 gmark
71 cmark

% End Annotations
showpage
end
%%EOF
