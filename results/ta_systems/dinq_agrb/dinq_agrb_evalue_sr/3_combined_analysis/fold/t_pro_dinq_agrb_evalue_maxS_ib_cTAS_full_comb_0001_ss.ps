%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Jan 24 19:33:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUAAGCGGAUGCAUUCUCACUCCAUCGCAUGGAGAAAACGGGUGAUUGAUAAAGCAAUCAUCGUUCUAGGGGCGUUAAUUGCGCUGCUGGAACUGAUCCGCUUUCUGCUUCAGCUUCUGAAC\
) } def
/len { sequence length } bind def

/coor [
[43.18248749 371.03833008]
[28.59211159 367.56478882]
[14.21118736 363.30645752]
[0.08189553 358.27578735]
[-13.75432014 352.48754883]
[-27.25687599 345.95870972]
[-40.38616562 338.70846558]
[-53.10367966 330.75802612]
[-65.37211609 322.13073730]
[-77.15548706 312.85192871]
[-88.41922760 302.94876099]
[-99.13031006 292.45031738]
[-109.25730896 281.38739014]
[-118.77052307 269.79241943]
[-127.64204407 257.69940186]
[-135.84585571 245.14385986]
[-143.35787964 232.16256714]
[-150.15611267 218.79362488]
[-156.22058105 205.07623291]
[-161.53352356 191.05064392]
[-166.07934570 176.75799561]
[-169.84469604 162.24018860]
[-172.81855774 147.53982544]
[-174.99220276 132.70002747]
[-176.35925293 117.76430511]
[-191.34892273 118.32075500]
[-206.33859253 118.87721252]
[-221.32827759 119.43366241]
[-236.31794739 119.99011993]
[-251.92187500 126.61988068]
[-262.61215210 113.46105957]
[-252.92692566 99.54584503]
[-236.87440491 105.00044250]
[-221.88471985 104.44398499]
[-206.89505005 103.88753510]
[-191.90538025 103.33107758]
[-176.91569519 102.77462769]
[-176.65979004 87.77866364]
[-175.59240723 72.81854248]
[-173.71664429 57.93814850]
[-171.03804016 43.18112946]
[-167.56443787 28.59077072]
[-163.30601501 14.20986843]
[-158.27526855 0.08060133]
[-152.48696899 -13.75558567]
[-145.95808411 -27.25810814]
[-138.70774841 -40.38735962]
[-130.75726318 -53.10483551]
[-122.12991333 -65.37322998]
[-112.85102844 -77.15655518]
[-102.94781494 -88.42024994]
[-92.44931793 -99.13127136]
[-81.38633728 -109.25821686]
[-69.79132080 -118.77136993]
[-57.69827271 -127.64282990]
[-45.14267349 -135.84657288]
[-32.16134644 -143.35855103]
[-18.79236984 -150.15670776]
[-5.07495499 -156.22111511]
[8.95066261 -161.53398132]
[23.24334335 -166.07972717]
[37.76116180 -169.84501648]
[52.46154022 -172.81880188]
[67.30135345 -174.99237061]
[82.23708344 -176.35932922]
[97.22490692 -176.91569519]
[112.22087860 -176.65982056]
[127.18099976 -175.59245300]
[142.06140137 -173.71672058]
[156.81842041 -171.03813171]
[171.40878296 -167.56455994]
[185.78968811 -163.30615234]
[199.91896057 -158.27543640]
[213.75515747 -152.48716736]
[227.25769043 -145.95829773]
[240.38696289 -138.70799255]
[253.10444641 -130.75752258]
[265.37286377 -122.13019562]
[277.15618896 -112.85132599]
[288.41992188 -102.94812775]
[299.13095093 -92.44964600]
[309.25790405 -81.38668823]
[318.77108765 -69.79167938]
[327.64257812 -57.69865417]
[335.84634399 -45.14307022]
[343.35833740 -32.16175461]
[350.15649414 -18.79278755]
[356.22094727 -5.07538319]
[361.53381348 8.95022583]
[366.07958984 23.24289894]
[369.84490967 37.76071167]
[372.81872559 52.46108627]
[374.99230957 67.30089569]
[376.35931396 82.23661804]
[376.91567993 97.22444916]
[376.65985107 112.22041321]
[375.59249878 127.18054199]
[373.71679688 142.06094360]
[371.03823853 156.81796265]
[367.56466675 171.40834045]
[363.30630493 185.78924561]
[358.27560425 199.91853333]
[352.48736572 213.75474548]
[345.95849609 227.25729370]
[338.70822144 240.38656616]
[330.75778198 253.10406494]
[322.13046265 265.37249756]
[312.85162354 277.15585327]
[302.94845581 288.41955566]
[292.44998169 299.13064575]
[281.38702393 309.25759888]
[269.79205322 318.77081299]
[257.69903564 327.64230347]
[245.14346313 335.84609985]
[232.16215515 343.35809326]
[218.79321289 350.15631104]
[205.07580566 356.22076416]
[191.05021667 361.53366089]
[176.75755310 366.07946777]
[162.23973083 369.84481812]
[147.53936768 372.81863403]
[132.69955444 374.99224854]
[117.76383972 376.35928345]
[102.77601624 376.91567993]
[87.78004456 376.65985107]
[72.81992340 375.59252930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
] def

init

% Start Annotations
25 37 0.0 1 colorpair
26 36 0.0 1 colorpair
27 35 0.0 1 colorpair
28 34 0.0 1 colorpair
29 33 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
