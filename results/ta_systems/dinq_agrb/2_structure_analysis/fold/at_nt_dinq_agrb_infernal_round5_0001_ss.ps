%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:20:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUG_A_AGACUGUC__UCA_C__U_CCGGC_CAGAGCCACCAAC__UCAGGGCCGG_AAAGU_______A_AAA__AAA_C_CGAC_GUCA______AGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[39.11547852 306.05227661]
[24.89034271 301.30325317]
[11.03113174 295.57351685]
[-2.39463425 288.89099121]
[-15.32154560 281.28817749]
[-27.68662453 272.80218506]
[-39.42963028 263.47427368]
[-50.49335480 253.34997559]
[-60.82389069 242.47856140]
[-70.37091064 230.91300964]
[-79.08790588 218.70967102]
[-86.93241119 205.92799377]
[-93.86620331 192.63023376]
[-99.85549927 178.88121033]
[-104.87112427 164.74786377]
[-108.88864136 150.29908752]
[-111.88848114 135.60527039]
[-113.85602570 120.73797607]
[-114.78169250 105.76965332]
[-114.66096497 90.77321625]
[-113.49443817 75.82173157]
[-111.28779602 60.98804474]
[-108.05178070 46.34441757]
[-103.80216217 31.96219444]
[-98.55964661 17.91144371]
[-92.34976959 4.26061630]
[-85.20278931 -8.92377949]
[-77.15352631 -21.57751274]
[-68.24119568 -33.63893509]
[-58.50920868 -45.04928207]
[-48.00498581 -55.75297165]
[-57.95182800 -66.98062897]
[-67.89866638 -78.20829010]
[-77.84550476 -89.43595123]
[-91.42192078 -82.83415985]
[-106.27622223 -80.14118958]
[-121.30614471 -81.55686951]
[-135.39634705 -86.97615814]
[-147.50126648 -95.99689484]
[-156.72261047 -107.94969177]
[-162.37611389 -121.94756317]
[-164.04223633 -136.95178223]
[-161.59735107 -151.84893799]
[-155.22288513 -165.53355408]
[-145.39184570 -176.99014282]
[-132.83378601 -185.36854553]
[-118.48059845 -190.04704285]
[-103.39736176 -190.67845154]
[-88.70336914 -187.21591187]
[-75.48901367 -179.91638184]
[-64.73487854 -169.32151794]
[-57.23899460 -156.21752930]
[-53.55760956 -141.57682800]
[-53.96390533 -126.48586273]
[-58.42773438 -112.06446075]
[-66.61784363 -99.38279724]
[-56.67100525 -88.15513611]
[-46.72416687 -76.92747498]
[-36.77732468 -65.69981384]
[-24.88553619 -74.83725739]
[-12.38532066 -83.12291718]
[0.66242301 -90.51643372]
[14.19412708 -96.98176575]
[28.14386749 -102.48743439]
[42.44367981 -107.00660706]
[57.02390289 -110.51726532]
[71.81349945 -113.00231171]
[86.74041748 -114.44963837]
[101.73193359 -114.85219574]
[116.71501160 -114.20801544]
[131.61665344 -112.52024078]
[146.36427307 -109.79708862]
[160.88600159 -106.05183411]
[175.11109924 -101.30272675]
[188.97027588 -95.57289124]
[202.39599609 -88.89025116]
[215.32284546 -81.28735352]
[227.68786621 -72.80125427]
[239.43080139 -63.47328568]
[250.49444580 -53.34889603]
[260.82492065 -42.47740936]
[270.37185669 -30.91179085]
[279.08874512 -18.70838356]
[286.93316650 -5.92664623]
[293.86685181 7.37115383]
[299.85604858 21.12022972]
[304.87158203 35.25359726]
[308.88900757 49.70240402]
[311.88873291 64.39625549]
[313.85617065 79.26355743]
[314.78173828 94.23188782]
[314.66088867 109.22832489]
[313.49426270 124.17979431]
[311.28750610 139.01347351]
[308.05139160 153.65707397]
[303.80166626 168.03926086]
[298.55905151 182.08998108]
[292.34909058 195.74076843]
[285.20202637 208.92510986]
[277.15264893 221.57878113]
[268.24023438 233.64013672]
[258.50817871 245.05041504]
[248.00387573 255.75402832]
[236.77851868 265.69882202]
[224.88679504 274.83636475]
[212.38662720 283.12210083]
[199.33894348 290.51571655]
[185.80728149 296.98114014]
[171.85758972 302.48690796]
[157.55780029 307.00619507]
[142.97760010 310.51696777]
[128.18803406 313.00210571]
[113.26112366 314.44955444]
[98.26960754 314.85220337]
[83.28652954 314.20812988]
[68.38487244 312.52047729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 59]
[32 58]
[33 57]
[34 56]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
31 59 8 gmark
31 cmark
59 cmark
32 58 13 gmark
32 cmark
58 cmark
33 57 24 gmark
33 cmark
57 cmark
34 56 45 gmark
34 cmark
56 cmark

% End Annotations
showpage
end
%%EOF
