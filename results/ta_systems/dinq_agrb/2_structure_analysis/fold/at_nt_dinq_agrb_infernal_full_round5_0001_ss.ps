%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:20:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUG_A_GGACUAUC__UCA_C__U_CCAGCC_AGAGCCACCAAC__UC_AGGGCU__GGAAAG_____U_A_____AAA__A_A_C_CGAC_GCAA____AGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[181.05276489 475.63500977]
[166.90736389 470.62576294]
[153.14584351 464.64202881]
[139.83525085 457.71286011]
[127.04045105 449.87210083]
[114.82376099 441.15789795]
[103.24469757 431.61273193]
[92.35968781 421.28311157]
[82.22175598 410.21936035]
[72.88028717 398.47534180]
[64.38080597 386.10830688]
[56.76470566 373.17849731]
[50.06910324 359.74893188]
[44.32661438 345.88497925]
[39.56521606 331.65426636]
[35.80810928 317.12603760]
[33.07359695 302.37115479]
[31.37499809 287.46142578]
[30.72059250 272.46954346]
[31.11356544 257.46853638]
[32.55200195 242.53149414]
[35.02889633 227.73115540]
[38.53218460 213.13966370]
[43.04478836 198.82809448]
[48.54473495 184.86616516]
[55.00521851 171.32191467]
[62.39476776 158.26130676]
[70.67738342 145.74800110]
[79.81271362 133.84294128]
[89.75624847 122.60412598]
[100.45954132 112.08632660]
[90.42258453 100.93914795]
[80.09726715 90.05853271]
[69.77194977 79.17791748]
[56.51702499 86.38690948]
[41.84770584 89.91868591]
[26.76416397 89.53244781]
[12.29482174 85.25453949]
[-0.57377762 77.37662506]
[-10.96423149 66.43582916]
[-18.16810036 53.17812729]
[-21.69421387 38.50744629]
[-21.30215645 23.42405510]
[-17.01865578 8.95636463]
[-9.13577175 -3.90919185]
[1.80902934 -14.29542065]
[15.06951237 -21.49417114]
[29.74155617 -25.01461983]
[44.82479477 -24.61673737]
[59.29082870 -20.32765198]
[72.15334320 -12.43979931]
[82.53534698 -1.49098921]
[89.72897339 11.77227211]
[93.24375916 26.44567299]
[92.84004974 41.52875900]
[88.54537964 55.99313736]
[80.65256500 68.85260010]
[90.97788239 79.73321533]
[101.30319977 90.61383057]
[106.51230621 91.95668793]
[110.55110931 96.17773438]
[111.86563110 102.34460449]
[123.92830658 93.41842651]
[136.58425903 85.35545349]
[149.77183533 78.19496155]
[163.42677307 71.97183228]
[177.48255920 66.71638489]
[191.87069702 62.45422745]
[206.52111816 59.20612335]
[221.36241150 56.98789597]
[236.32229614 55.81035614]
[251.32788086 55.67923737]
[266.30606079 56.59518051]
[281.18386841 58.55371857]
[295.88879395 61.54531479]
[310.34921265 65.55539703]
[324.49468994 70.56441498]
[338.25628662 76.54798126]
[351.56698608 83.47693634]
[364.36190796 91.31752014]
[376.57870483 100.03153992]
[388.15789795 109.57653046]
[399.04306030 119.90600586]
[409.18115234 130.96963501]
[418.52279663 142.71350098]
[427.02246094 155.08041382]
[434.63873291 168.01011658]
[441.33453369 181.43959045]
[447.07720947 195.30343628]
[451.83883667 209.53410339]
[455.59613037 224.06227112]
[458.33087158 238.81712341]
[460.02966309 253.72682190]
[460.68429565 268.71868896]
[460.29153442 283.71969604]
[458.85330200 298.65676880]
[456.37661743 313.45715332]
[452.87356567 328.04867554]
[448.36114502 342.36032104]
[442.86141968 356.32232666]
[436.40112305 369.86666870]
[429.01174927 382.92736816]
[420.72930908 395.44082642]
[411.59414673 407.34600830]
[401.65078735 418.58496094]
[390.94763184 429.10290527]
[379.53686523 438.84863281]
[367.47406006 447.77462769]
[354.81799316 455.83743286]
[341.63034058 462.99774170]
[327.97531128 469.22067261]
[313.91943359 474.47592163]
[299.53121948 478.73785400]
[284.88076782 481.98574829]
[270.03942871 484.20376587]
[255.07954407 485.38110352]
[240.07395935 485.51199341]
[225.09579468 484.59585571]
[210.21801758 482.63708496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 62]
[32 59]
[33 58]
[34 57]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
31 62 22 gmark
31 cmark
62 cmark
32 59 60 gmark
32 cmark
59 cmark
33 58 186 gmark
33 cmark
58 cmark
34 57 234 gmark
34 cmark
57 cmark

% End Annotations
showpage
end
%%EOF
