%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 04:35:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_UUAGAUGAUGGCUAUCUC_ACUCCAGCCAGAGCCACCAACUCAGGGCUGGAAAGU_A___AAAA__ACCGACGCAAAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[-10.85980034 155.76472473]
[-24.57701492 162.34895325]
[-38.93254852 167.38954163]
[-53.75331879 170.82591248]
[-68.86064911 172.61682129]
[-84.07242584 172.74084473]
[-99.20530701 171.19670105]
[-114.07691193 168.00317383]
[-128.50804138 163.19891357]
[-142.32479858 156.84199524]
[-155.36073303 149.00923157]
[-167.45883179 139.79516602]
[-178.47335815 129.31098938]
[-188.27171326 117.68321991]
[-196.73591614 105.05210876]
[-203.76409912 91.57000732]
[-209.27171326 77.39949036]
[-213.19255066 62.71141815]
[-215.47952271 47.68288040]
[-216.10525513 32.49503708]
[-215.06236267 17.33095551]
[-212.36361694 2.37339163]
[-226.74951172 -1.87469101]
[-241.13539124 -6.12277365]
[-254.89657593 1.64931774]
[-270.10031128 -2.66604209]
[-277.72647095 -16.50862694]
[-273.25061035 -31.66587639]
[-259.32815552 -39.14526367]
[-244.21908569 -34.50939941]
[-236.88731384 -20.50866318]
[-222.50141907 -16.26058006]
[-208.11553955 -12.01249695]
[-202.43112183 -25.67294884]
[-195.32095337 -38.64939117]
[-186.86608887 -50.79352951]
[-177.16297913 -61.96656036]
[-166.32234192 -72.04076385]
[-154.46788025 -80.90094757]
[-141.73489380 -88.44578552]
[-128.26875305 -94.58896637]
[-114.22320557 -99.26016235]
[-99.75862122 -102.40588379]
[-85.04018402 -103.99003601]
[-70.23599243 -103.99436951]
[-55.51514435 -102.41867065]
[-41.04579544 -99.28077698]
[-26.99325562 -94.61637878]
[-13.51807880 -88.47859955]
[-0.77424854 -80.93740082]
[11.09259224 -72.07878876]
[21.94680405 -62.00380325]
[31.66429901 -50.82741547]
[40.13396454 -38.67718124]
[47.25892639 -25.69178009]
[52.95766449 -12.01946545]
[57.16493607 2.18366265]
[59.83253479 16.75541878]
[60.92983627 31.52939034]
[60.44414520 46.33684158]
[58.38084793 61.00863266]
[54.76335526 75.37715912]
[68.82963562 80.58673859]
[82.89591980 85.79631805]
[96.96220398 91.00589752]
[102.31732941 89.88632202]
[107.88727570 91.96636200]
[111.78223419 97.07136536]
[125.46472931 103.21867371]
[141.22367859 101.81655884]
[149.66217041 114.09015656]
[163.34466553 120.23746490]
[177.02716064 126.38476562]
[192.47436523 122.05311584]
[205.40744019 131.54602051]
[205.90521240 147.58135986]
[193.58584595 157.85816956]
[177.89970398 154.49298096]
[170.87985229 140.06726074]
[157.19735718 133.91995239]
[143.51486206 127.77265167]
[128.73457336 129.61445618]
[119.31742859 116.90116882]
[105.63493347 110.75386047]
[91.75262451 105.07218170]
[77.68634033 99.86260223]
[63.62005997 94.65302277]
[49.55377579 89.44344330]
[42.73898697 103.05312347]
[34.47381973 115.83305359]
[24.85804176 127.62930298]
[14.00769520 138.29978943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 33]
[23 32]
[24 31]
[62 88]
[63 87]
[64 86]
[65 85]
[68 84]
[69 83]
[71 81]
[72 80]
[73 79]
] def

init

% Start Annotations
22 33 0.16 0.2 colorpair
24 31 0.16 1 colorpair
62 88 0.16 1 colorpair
63 87 0.0 0.6 colorpair
64 86 0.0 0.2 colorpair
65 85 0.0 0.2 colorpair
69 83 0.0 1 colorpair
71 81 0.0 0.2 colorpair
72 80 0.0 1 colorpair
73 79 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 33 2 gmark
22 cmark
23 32 4 gmark
32 cmark
24 cmark
62 cmark
63 87 1 gmark
64 86 2 gmark
65 85 2 gmark
68 84 4 gmark
68 cmark
84 cmark
71 81 2 gmark
73 cmark

% End Annotations
showpage
end
%%EOF
