%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 04:04:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUGAUGGCAUUCUCACUCCAGCCAGAGCCACCAACUCAGGGCUGGAAAGU_AAAAA_ACCGACGCAAAGUCGGUUUUUUUAC\
) } def
/len { sequence length } bind def

/coor [
[136.79576111 172.35998535]
[128.11128235 176.15544128]
[119.04360962 178.91284180]
[109.71636200 180.59458923]
[100.25667572 181.17776489]
[90.79348755 180.65441895]
[81.45579529 179.03169250]
[72.37087250 176.33169556]
[63.66255951 172.59123230]
[55.44955444 167.86128235]
[47.84381104 162.20632935]
[40.94900131 155.70346069]
[34.85910416 148.44129944]
[29.65713120 140.51884460]
[25.41399193 132.04408264]
[22.18752289 123.13253021]
[20.02170181 113.90567017]
[18.94605255 104.48925781]
[18.97523689 95.01165771]
[20.10885620 85.60205078]
[5.65560675 81.58912659]
[-8.79764271 77.57620239]
[-22.43025589 85.57166290]
[-37.70232773 81.50480652]
[-45.55321121 67.78842163]
[-41.32511902 52.56019974]
[-27.52649689 44.85477448]
[-12.34382725 49.24363327]
[-4.78471804 63.12295151]
[9.66853237 67.13587189]
[24.12178230 71.14880371]
[27.76943779 62.95082092]
[32.29957199 55.20549393]
[37.65684128 48.00744247]
[43.77578735 41.44461060]
[50.58165359 35.59718323]
[57.99129105 30.53660011]
[65.91416931 26.32468605]
[74.25349426 23.01290321]
[82.90737915 20.64171028]
[91.77008820 19.24008179]
[100.73335266 18.82514000]
[109.68765259 19.40195274]
[118.52359772 20.96347618]
[127.13322449 23.49062920]
[133.43156433 9.87699890]
[139.72990417 -3.73663259]
[137.71339417 -20.01132774]
[150.96072388 -29.67776489]
[165.84419250 -22.79194260]
[167.05294800 -6.43740320]
[153.34353638 2.56170392]
[147.04519653 16.17533493]
[140.74685669 29.78896713]
[165.82478333 52.49216843]
[179.47221375 83.44511414]
[179.31925964 117.27282715]
[193.61820984 121.80493164]
[207.91716003 126.33703613]
[222.21611023 130.86914062]
[231.58117676 130.49356079]
[236.94418335 135.83160400]
[251.07019043 140.87698364]
[265.19619751 145.92236328]
[279.32220459 150.96774292]
[293.44821167 156.01312256]
[307.57424927 161.05850220]
[322.63024902 155.51814270]
[336.27392578 163.95793152]
[338.03897095 179.90359497]
[326.57141113 191.12298584]
[310.66815186 189.00953674]
[302.52886963 175.18450928]
[288.40283203 170.13912964]
[274.27682495 165.09375000]
[260.15081787 160.04837036]
[246.02481079 155.00300598]
[231.89880371 149.95762634]
[217.68400574 145.16809082]
[203.38505554 140.63598633]
[189.08610535 136.10388184]
[174.78715515 131.57177734]
[170.59768677 140.07319641]
[165.44592285 148.02839661]
[159.40206909 155.32891846]
[152.54852295 161.87525940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 31]
[21 30]
[22 29]
[45 54]
[46 53]
[47 52]
[57 82]
[58 81]
[59 80]
[60 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% Start Annotations
20 31 0.0 0.2 colorpair
22 29 0.16 1 colorpair
45 54 0.32 0.2 colorpair
46 53 0.0 0.6 colorpair
47 52 0.0 1 colorpair
57 82 0.0 0.6 colorpair
58 81 0.0 0.2 colorpair
59 80 0.0 0.6 colorpair
60 79 0.0 0.6 colorpair
62 78 0.0 1 colorpair
63 77 0.0 0.6 colorpair
64 76 0.0 0.6 colorpair
65 75 0.0 1 colorpair
66 74 0.0 0.6 colorpair
67 73 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 31 2 gmark
21 30 3 gmark
30 cmark
22 cmark
45 54 2 gmark
45 cmark
54 cmark
46 53 1 gmark
57 82 1 gmark
58 81 2 gmark
59 80 1 gmark
60 79 1 gmark
63 77 1 gmark
64 76 1 gmark
66 74 1 gmark
67 73 1 gmark

% End Annotations
showpage
end
%%EOF
