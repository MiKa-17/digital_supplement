%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 04:24:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUGAUGGCUAUCUCA_CUCCAGCCAGAGCCACCAACUCAGGGCUGGAAAGU_A___AAAA__ACCGACGCAAAGUCGGUUUUUUUAC_\
) } def
/len { sequence length } bind def

/coor [
[161.53340149 224.01234436]
[147.56869507 230.01016235]
[133.03067017 234.44105530]
[118.09455109 237.25163269]
[102.94035339 238.40800476]
[87.75071716 237.89625549]
[72.70870972 235.72254944]
[57.99562836 231.91305542]
[43.78879547 226.51373291]
[30.25943184 219.58961487]
[17.57060242 211.22418213]
[5.87523460 201.51823425]
[-4.68571568 190.58876038]
[-13.98496437 178.56748962]
[-21.91043472 165.59930420]
[-28.36660767 151.84049988]
[-33.27566910 137.45689392]
[-36.57845688 122.62184906]
[-38.23516464 107.51416016]
[-38.22582245 92.31591034]
[-36.55054474 77.21026611]
[-51.19040298 73.94306183]
[-65.83026123 70.67585754]
[-79.03535461 79.35923767]
[-94.49571991 76.08011627]
[-103.03899384 62.78395462]
[-99.59661102 47.35911942]
[-86.21086121 38.95689774]
[-70.82328796 42.56217575]
[-62.56305313 56.03600311]
[-47.92319870 59.30320740]
[-33.28334045 62.57041168]
[-28.52775192 48.56032562]
[-22.30418205 35.13775635]
[-14.68371105 22.45601463]
[-5.75337982 10.65994072]
[4.38481569 -0.11573302]
[15.61508179 -9.74793434]
[27.80915070 -18.12664795]
[40.82775116 -25.15617561]
[54.52218246 -30.75622940]
[68.73604584 -34.86285019]
[83.30698395 -37.42913437]
[98.06858826 -38.42576599]
[112.85224915 -37.84136963]
[127.48912048 -35.68261337]
[141.81202698 -31.97415733]
[155.65736389 -26.75835609]
[168.86701965 -20.09478378]
[181.29011536 -12.05954552]
[192.78474426 -2.74441838]
[203.21963501 7.74420595]
[212.47560120 19.28653145]
[220.44691467 31.75072670]
[227.04255676 44.99443054]
[232.18717957 58.86638260]
[235.82202148 73.20814514]
[237.90556335 87.85591125]
[238.41401672 102.64237976]
[237.34158325 117.39866638]
[234.70048523 131.95623779]
[249.08638000 136.20431519]
[263.47225952 140.45239258]
[277.85815430 144.70048523]
[284.69628906 143.46405029]
[290.21536255 145.67684937]
[293.05386353 149.75161743]
[307.12014771 154.96119690]
[321.18643188 160.17077637]
[335.25271606 165.38035583]
[349.31900024 170.58993530]
[363.38528442 175.79951477]
[378.50482178 170.43490601]
[392.04922485 179.03305054]
[393.62841797 194.99819946]
[382.03094482 206.08323669]
[366.15341187 203.78468323]
[358.17568970 189.86579895]
[344.10940552 184.65621948]
[330.04312134 179.44664001]
[315.97683716 174.23706055]
[301.91055298 169.02748108]
[287.84426880 163.81790161]
[273.61007690 159.08636475]
[259.22418213 154.83828735]
[244.83830261 150.59020996]
[230.45240784 146.34211731]
[224.58638000 160.36270142]
[217.21881104 173.65577698]
[208.43847656 186.06112671]
[198.35122681 197.42926025]
[187.07861328 207.62313843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 32]
[22 31]
[23 30]
[61 87]
[62 86]
[63 85]
[64 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
] def

init

% Start Annotations
21 32 0.16 0.2 colorpair
23 30 0.16 1 colorpair
61 87 0.16 1 colorpair
62 86 0.0 0.6 colorpair
63 85 0.0 0.2 colorpair
64 84 0.0 1 colorpair
67 83 0.16 0.2 colorpair
68 82 0.0 1 colorpair
69 81 0.0 0.6 colorpair
70 80 0.0 1 colorpair
71 79 0.0 1 colorpair
72 78 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
21 32 2 gmark
21 cmark
22 31 4 gmark
31 cmark
23 cmark
61 cmark
62 86 1 gmark
63 85 2 gmark
67 83 2 gmark
67 cmark
83 cmark
69 81 1 gmark
72 cmark

% End Annotations
showpage
end
%%EOF
