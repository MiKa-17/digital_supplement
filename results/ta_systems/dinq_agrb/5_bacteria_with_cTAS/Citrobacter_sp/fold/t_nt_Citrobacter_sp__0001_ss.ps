%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:51:33 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUAAGCGGGUGCAUUCUCACUCCAUCUGAUGGAGAAAACGGGUGAUUGAUAAAGCAAUCAUCGUUCUGGGAGCGUUAAUCGCGUUGCUGGAGCUGAUCCGCUAUCUGCUGCAACUUUUGAACUGA\
) } def
/len { sequence length } bind def

/coor [
[163.58143616 295.35952759]
[175.33396912 285.83413696]
[169.93554688 271.83923340]
[164.53710938 257.84436035]
[159.13868713 243.84945679]
[153.22880554 230.06274414]
[146.81547546 216.50291443]
[140.40216064 202.94306946]
[133.98883057 189.38323975]
[127.57550049 175.82339478]
[121.16217804 162.26354980]
[114.74884796 148.70372009]
[108.98427582 143.95219421]
[108.34909821 134.73149109]
[102.27047729 121.01834106]
[104.23024750 135.88977051]
[95.71181488 148.23628235]
[81.11326599 151.68333435]
[67.97185516 144.45123291]
[63.07253265 130.27389526]
[68.94482422 116.47113800]
[82.55890656 110.16920471]
[67.72125244 112.37016296]
[52.88360977 114.57112122]
[38.04595947 116.77207947]
[23.20831299 118.97303772]
[8.37066555 121.17399597]
[-6.40985012 129.47897339]
[-18.48192215 117.57513428]
[-10.38517189 102.67952728]
[6.16970778 106.33634186]
[21.00735474 104.13539124]
[35.84500504 101.93443298]
[50.68265152 99.73347473]
[65.52030182 97.53251648]
[80.35794830 95.33155823]
[83.64756775 88.59149933]
[68.68383026 89.63385773]
[60.29917526 77.19611359]
[66.87816620 63.71587372]
[81.84188843 62.67323685]
[90.22681427 75.11138153]
[93.51643372 68.37132263]
[86.12296295 55.32001877]
[78.72948456 42.26871490]
[71.33601379 29.21741104]
[63.94254303 16.16610527]
[56.54906845 3.11480069]
[49.15559769 -9.93650436]
[41.76212311 -22.98780823]
[26.46539688 -26.96092987]
[18.53054047 -40.62891006]
[22.66516685 -55.88277435]
[36.41627121 -63.67267990]
[51.62557220 -59.37701035]
[59.26965714 -45.54431534]
[54.81342697 -30.38128281]
[62.20690155 -17.32997704]
[69.60037231 -4.27867222]
[76.99384308 8.77263260]
[84.38732147 21.82393837]
[91.78079224 34.87524414]
[99.17426300 47.92654800]
[106.56774139 60.97785187]
[121.43127441 62.99656296]
[132.03787231 52.38996124]
[142.64448547 41.78335953]
[153.25108337 31.17675781]
[163.85768127 20.57015610]
[174.46427917 9.96355438]
[185.07089233 -0.64304751]
[189.35798645 -15.87234020]
[203.82862854 -19.40078354]
[214.43522644 -30.00738525]
[225.04182434 -40.61398697]
[235.64842224 -51.22058868]
[246.25503540 -61.82719040]
[247.69290161 -77.80567932]
[261.16073608 -86.52332306]
[276.32714844 -81.29269409]
[281.55776978 -66.12628174]
[272.84011841 -52.65845871]
[256.86163330 -51.22058868]
[246.25503540 -40.61398697]
[235.64842224 -30.00738525]
[225.04182434 -19.40078354]
[214.43522644 -8.79418182]
[210.90678406 5.67645645]
[195.67749023 9.96355438]
[185.07089233 20.57015610]
[174.46427917 31.17675781]
[163.85768127 41.78335953]
[153.25108337 52.38996124]
[142.64448547 62.99656296]
[132.03787231 73.60316467]
[115.98362732 114.93972015]
[122.06224823 128.65286255]
[128.30868530 142.29039001]
[134.72201538 155.85021973]
[141.13534546 169.41006470]
[147.54867554 182.96990967]
[153.96199036 196.52973938]
[160.37532043 210.08958435]
[166.78865051 223.64942932]
[171.26353455 226.73030090]
[173.78527832 230.83450317]
[174.29594421 235.01625061]
[173.13357544 238.45103455]
[178.53201294 252.44592285]
[183.93043518 266.44082642]
[189.32885742 280.43569946]
[204.43377686 279.60104370]
[219.05680847 283.47683716]
[231.76535034 291.68344116]
[241.31434631 303.41680908]
[246.76828003 317.52743530]
[247.59283447 332.63290405]
[243.70722961 347.25332642]
[235.49212646 359.95639038]
[223.75236511 369.49752808]
[209.63809204 374.94198608]
[194.53205872 375.75640869]
[179.91423035 371.86102295]
[167.21669006 363.63739014]
[157.68344116 351.89123535]
[152.24841309 337.77331543]
[151.44410706 322.66674805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[6 104]
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[14 97]
[15 96]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
] def

init

% Start Annotations
2 111 0.0 1 colorpair
3 110 0.0 1 colorpair
4 109 0.0 1 colorpair
5 108 0.0 1 colorpair
6 104 0.0 1 colorpair
7 103 0.0 1 colorpair
8 102 0.0 1 colorpair
9 101 0.0 1 colorpair
10 100 0.0 1 colorpair
11 99 0.0 1 colorpair
12 98 0.0 1 colorpair
14 97 0.0 1 colorpair
15 96 0.0 1 colorpair
22 36 0.0 1 colorpair
23 35 0.0 1 colorpair
24 34 0.0 1 colorpair
25 33 0.0 1 colorpair
26 32 0.0 1 colorpair
27 31 0.0 1 colorpair
43 64 0.0 1 colorpair
44 63 0.0 1 colorpair
45 62 0.0 1 colorpair
46 61 0.0 1 colorpair
47 60 0.0 1 colorpair
48 59 0.0 1 colorpair
49 58 0.0 1 colorpair
50 57 0.0 1 colorpair
65 95 0.0 1 colorpair
66 94 0.0 1 colorpair
67 93 0.0 1 colorpair
68 92 0.0 1 colorpair
69 91 0.0 1 colorpair
70 90 0.0 1 colorpair
71 89 0.0 1 colorpair
73 87 0.0 1 colorpair
74 86 0.0 1 colorpair
75 85 0.0 1 colorpair
76 84 0.0 1 colorpair
77 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
