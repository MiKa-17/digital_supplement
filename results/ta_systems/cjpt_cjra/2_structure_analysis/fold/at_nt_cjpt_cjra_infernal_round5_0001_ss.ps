%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 03:50:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACUUCCUAAAUG_AAAGCUUGGCGAAGAAUUGGCUUACUUUU_UAAGUAGGU___UACCCAGCCUAAGAGCGGGGAUAAU\
) } def
/len { sequence length } bind def

/coor [
[74.88896942 161.12257385]
[68.29779816 147.64828491]
[69.00064850 132.66476440]
[76.82419586 119.86663055]
[89.83815002 112.40998077]
[75.34925842 116.29226685]
[60.86037064 120.17455292]
[46.37148285 124.05683899]
[31.95772362 128.20936584]
[17.62413216 132.63070679]
[3.29053998 137.05203247]
[-11.04305172 141.47335815]
[-25.37664413 145.89468384]
[-39.71023560 150.31600952]
[-48.44772720 163.77096558]
[-64.42831421 165.18528748]
[-75.39306641 153.47401428]
[-72.93075562 137.62104797]
[-58.93026352 129.78741455]
[-44.13156509 135.98242188]
[-29.79797173 131.56109619]
[-15.46437931 127.13976288]
[-1.13078761 122.71843719]
[13.20280457 118.29711151]
[27.53639603 113.87577820]
[33.13601303 108.77043152]
[42.48919678 109.56795502]
[56.97808456 105.68566895]
[71.46697235 101.80338287]
[85.95586395 97.92109680]
[86.75743866 92.70937347]
[89.53189087 87.85142517]
[94.10731506 84.10070801]
[100.02452850 82.12419891]
[105.50464630 68.16109467]
[110.19322205 53.91268158]
[114.07550812 39.42379379]
[117.95779419 24.93490791]
[121.84008026 10.44602013]
[125.72236633 -4.04286671]
[129.60464478 -18.53175354]
[133.48693848 -33.02064133]
[137.36921692 -47.50952911]
[132.60447693 -63.20122147]
[144.00752258 -74.98692322]
[159.84786987 -70.74250793]
[163.83035278 -54.83427429]
[151.85810852 -43.62724304]
[147.97583008 -29.13835526]
[144.09353638 -14.64946842]
[140.21125793 -0.16058113]
[136.32896423 14.32830620]
[132.44668579 28.81719398]
[128.56439209 43.30607986]
[124.68211365 57.79496765]
[126.32054138 61.18202591]
[126.24076080 65.58113861]
[123.96350098 70.09570312]
[119.46775055 73.64121246]
[113.98764038 87.60431671]
[119.20570374 101.66744995]
[132.46743774 108.67648315]
[145.72915649 115.68550873]
[158.99089050 122.69454193]
[171.95277405 114.45529175]
[187.29838562 113.81686401]
[200.89985657 120.95099640]
[209.09843445 133.93862915]
[209.68875122 149.28617859]
[202.51202393 162.86520386]
[189.49874878 171.02304077]
[174.14942932 171.56526184]
[160.59295654 164.34599304]
[152.47596741 151.30722046]
[151.98185730 135.95626831]
[138.72013855 128.94725037]
[125.45840454 121.93821716]
[112.19667053 114.92918396]
[123.22573853 125.09577942]
[128.00471497 139.31413269]
[125.35518646 154.07827759]
[115.93048859 165.74768066]
[102.05455780 171.44491577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[8 27]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[34 60]
[35 59]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[61 78]
[62 77]
[63 76]
[64 75]
] def

init

% Start Annotations
5 30 0.16 0.6 colorpair
6 29 0.16 1 colorpair
7 28 0.16 0.6 colorpair
8 27 0.16 0.6 colorpair
9 25 0.32 0.6 colorpair
10 24 0.32 0.2 colorpair
11 23 0.0 0.2 colorpair
12 22 0.0 0.2 colorpair
13 21 0.16 0.2 colorpair
14 20 0.32 0.2 colorpair
35 59 0.16 0.6 colorpair
36 55 0.16 0.6 colorpair
37 54 0.0 0.2 colorpair
38 53 0.16 0.6 colorpair
39 52 0.32 0.6 colorpair
40 51 0.16 0.6 colorpair
42 49 0.16 0.2 colorpair
43 48 0.16 0.2 colorpair
61 78 0.16 0.2 colorpair
62 77 0.0 0.6 colorpair
63 76 0.16 0.2 colorpair
64 75 0.48 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 30 1 gmark
5 cmark
30 cmark
29 cmark
7 28 1 gmark
28 cmark
8 27 1 gmark
8 cmark
27 cmark
9 25 1 gmark
9 cmark
25 cmark
10 24 2 gmark
10 cmark
24 cmark
11 23 2 gmark
12 22 2 gmark
13 21 2 gmark
13 cmark
21 cmark
14 20 2 gmark
14 cmark
20 cmark
34 60 3 gmark
34 cmark
60 cmark
35 59 1 gmark
59 cmark
36 55 1 gmark
36 cmark
37 54 2 gmark
38 53 1 gmark
53 cmark
39 52 1 gmark
39 cmark
52 cmark
40 51 1 gmark
40 cmark
41 50 3 gmark
41 cmark
50 cmark
42 49 2 gmark
42 cmark
49 cmark
43 48 2 gmark
43 cmark
48 cmark
61 78 2 gmark
61 cmark
62 77 1 gmark
63 76 2 gmark
63 cmark
64 75 1 gmark
64 cmark
75 cmark

% End Annotations
showpage
end
%%EOF
