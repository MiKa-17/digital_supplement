%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 03:50:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACUUCCUAA_UG_AAAGAUUGGC_AAGAAUUGGCUUACUUUU_UAAGUAGGU___UUCCCUGUCUUAGAGCAGGGGUUAU\
) } def
/len { sequence length } bind def

/coor [
[76.02609253 206.88002014]
[64.61495209 216.61582947]
[51.89423752 224.56462097]
[38.14144897 230.55300903]
[23.65660095 234.45034790]
[8.75568771 236.17161560]
[-6.23622990 235.67926025]
[-20.99210167 232.98403931]
[-35.19002533 228.14472961]
[-48.52027512 221.26690674]
[-60.69205093 212.50061035]
[-71.43982697 202.03707886]
[-80.52912903 190.10458374]
[-87.76168823 176.96342468]
[-92.97971344 162.90026855]
[-96.06938171 148.22192383]
[-96.96327972 133.24858093]
[-95.64192200 118.30689240]
[-92.13413239 103.72281647]
[-86.51642609 89.81449127]
[-78.91135406 76.88534546]
[-69.48482513 65.21741486]
[-58.44247437 55.06524658]
[-46.02519989 46.65030289]
[-32.50387955 40.15616226]
[-18.17348099 35.72449112]
[-3.34662628 33.45196533]
[11.65323830 33.38816452]
[26.49888802 35.53447723]
[40.86646652 39.84408188]
[54.44254303 46.22296524]
[66.93095398 54.53197098]
[78.05926514 64.58984375]
[87.58470917 76.17715454]
[95.29925537 89.04067230]
[99.98783112 74.79225922]
[103.87011719 60.30337524]
[107.75240326 45.81448746]
[111.63468933 31.32560158]
[115.51697540 16.83671379]
[119.39926147 2.34782577]
[123.28154755 -12.14106178]
[127.16383362 -26.62994957]
[122.39908600 -42.32164001]
[133.80212402 -54.10733795]
[149.64248657 -49.86292648]
[153.62495422 -33.95469284]
[141.65272522 -22.74766350]
[137.77043152 -8.25877571]
[133.88815308 6.23011160]
[130.00585938 20.71899986]
[126.12358093 35.20788574]
[122.24129486 49.69677353]
[118.35900879 64.18566132]
[114.47672272 78.67454529]
[116.11515045 82.06160736]
[116.03536987 86.46072388]
[113.75811005 90.97528076]
[109.26235962 94.52079010]
[109.76990509 95.67571259]
[110.13538361 96.87364960]
[123.39710999 103.88267517]
[136.65884399 110.89170837]
[149.92057800 117.90073395]
[162.88244629 109.66148376]
[178.22807312 109.02305603]
[191.82952881 116.15718842]
[200.02810669 129.14483643]
[200.61843872 144.49237061]
[193.44171143 158.07141113]
[180.42843628 166.22923279]
[165.07911682 166.77145386]
[151.52264404 159.55220032]
[143.40563965 146.51341248]
[142.91154480 131.16247559]
[129.64981079 124.15344238]
[116.38808441 117.14440918]
[103.12635040 110.13538361]
[105.66970825 124.91819000]
[106.00786591 139.91436768]
[104.13346863 154.79679871]
[100.08739471 169.24079895]
[93.95790863 182.93128967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[35 59]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[61 78]
[62 77]
[63 76]
[64 75]
] def

init

% Start Annotations
35 59 0.16 1 colorpair
36 55 0.16 0.6 colorpair
37 54 0.0 0.2 colorpair
38 53 0.16 0.6 colorpair
39 52 0.32 0.6 colorpair
40 51 0.16 0.6 colorpair
42 49 0.16 0.2 colorpair
43 48 0.16 0.2 colorpair
61 78 0.16 0.2 colorpair
62 77 0.0 0.6 colorpair
63 76 0.16 0.2 colorpair
64 75 0.48 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
59 cmark
36 55 1 gmark
36 cmark
37 54 2 gmark
38 53 1 gmark
53 cmark
39 52 1 gmark
39 cmark
52 cmark
40 51 1 gmark
40 cmark
41 50 4 gmark
41 cmark
50 cmark
42 49 2 gmark
42 cmark
49 cmark
43 48 2 gmark
43 cmark
48 cmark
61 78 2 gmark
61 cmark
62 77 1 gmark
63 76 2 gmark
63 cmark
64 75 1 gmark
64 cmark
75 cmark

% End Annotations
showpage
end
%%EOF
