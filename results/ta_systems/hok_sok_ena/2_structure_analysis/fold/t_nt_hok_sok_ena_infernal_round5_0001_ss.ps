%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 01:59:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___GAA_A_AUGCC___G___CAAAAAUCUG___U_CCUUUUGUGCGUAUUAAUGAUGUGUUUCACGCUGCUGAUAUUCACCUUGAUGACCCGCG_AUUCGCUGUGUGAAUUGCGGAUCAAGGAGGGAAAUAUGGAGGUUGCGGCUAUUCUGGCUUACGAAUC___CAA___A_AAG_UA__G_______\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50682831 92.00402832]
[62.53824997 91.01259613]
[47.61063766 89.52680206]
[32.74031067 87.54825592]
[17.94353294 85.07913208]
[3.23648238 82.12213135]
[-11.36475849 78.68047333]
[-25.84422493 74.75793457]
[-40.18608093 70.35880280]
[-54.37464523 65.48788452]
[-68.39440155 60.15050888]
[-82.23002625 54.35250854]
[-95.86637878 48.10022354]
[-109.28855896 41.40049744]
[-122.48188019 34.26064682]
[-135.43193054 26.68848801]
[-148.12452698 18.69229507]
[-160.54580688 10.28081417]
[-172.68218994 1.46324289]
[-184.52038574 -7.75077772]
[-196.04747009 -17.35117149]
[-207.25082397 -27.32744026]
[-218.11820984 -37.66867828]
[-228.63774109 -48.36357117]
[-238.79791260 -59.40042877]
[-248.58760071 -70.76718140]
[-257.99612427 -82.45140076]
[-267.01318359 -94.44030762]
[-275.62890625 -106.72079468]
[-283.83389282 -119.27943420]
[-291.61917114 -132.10249329]
[-298.97619629 -145.17594910]
[-305.89697266 -158.48550415]
[-312.37390137 -172.01660156]
[-318.39990234 -185.75445557]
[-323.96838379 -199.68403625]
[-329.07324219 -213.79011536]
[-333.70895386 -228.05726624]
[-337.87039185 -242.46989441]
[-341.55300903 -257.01220703]
[-344.75280762 -271.66836548]
[-347.46627808 -286.42230225]
[-349.69046021 -301.25787354]
[-351.42288208 -316.15887451]
[-352.66171265 -331.10900879]
[-353.40554810 -346.09191895]
[-353.65359497 -361.09124756]
[-353.40557861 -376.09057617]
[-352.66174316 -391.07348633]
[-351.42297363 -406.02362061]
[-349.69055176 -420.92462158]
[-347.46640015 -435.76022339]
[-344.75296021 -450.51412964]
[-341.55316162 -465.17028809]
[-337.87057495 -479.71261597]
[-333.70913696 -494.12524414]
[-329.07348633 -508.39242554]
[-323.96862793 -522.49847412]
[-318.40014648 -536.42810059]
[-312.37417603 -550.16595459]
[-305.89727783 -563.69708252]
[-298.97653198 -577.00665283]
[-291.61950684 -590.08007812]
[-283.83425903 -602.90313721]
[-275.62930298 -615.46179199]
[-267.01358032 -627.74230957]
[-257.99655151 -639.73126221]
[-248.58804321 -651.41546631]
[-238.79837036 -662.78222656]
[-228.63821411 -673.81909180]
[-218.11869812 -684.51403809]
[-207.25134277 -694.85528564]
[-196.04798889 -704.83154297]
[-184.52091980 -714.43194580]
[-172.68273926 -723.64599609]
[-160.54637146 -732.46362305]
[-148.12510681 -740.87512207]
[-135.43251038 -748.87133789]
[-122.48248291 -756.44348145]
[-109.28916931 -763.58337402]
[-95.86699677 -770.28308105]
[-82.23065186 -776.53540039]
[-68.39504242 -782.33343506]
[-54.37528992 -787.67083740]
[-40.18673325 -792.54174805]
[-25.84488487 -796.94091797]
[-11.36542511 -800.86346436]
[3.23581123 -804.30517578]
[17.94285774 -807.26220703]
[32.73963165 -809.73132324]
[47.60995483 -811.70989990]
[62.53756714 -813.19573975]
[77.50614166 -814.18719482]
[92.49931335 -814.68316650]
[107.50068665 -814.68316650]
[122.49385834 -814.18719482]
[137.46243286 -813.19573975]
[152.39004517 -811.70989990]
[167.26036072 -809.73132324]
[182.05714417 -807.26220703]
[196.76419067 -804.30517578]
[211.36541748 -800.86346436]
[225.84487915 -796.94091797]
[240.18673706 -792.54174805]
[254.37528992 -787.67083740]
[268.39505005 -782.33343506]
[282.23065186 -776.53540039]
[295.86700439 -770.28308105]
[309.28915405 -763.58337402]
[322.48248291 -756.44348145]
[335.43252563 -748.87133789]
[348.12509155 -740.87512207]
[360.54635620 -732.46362305]
[372.68273926 -723.64599609]
[384.52093506 -714.43194580]
[396.04800415 -704.83154297]
[407.25134277 -694.85528564]
[418.11871338 -684.51403809]
[428.63821411 -673.81909180]
[438.79837036 -662.78222656]
[448.58804321 -651.41546631]
[457.99655151 -639.73126221]
[467.01358032 -627.74230957]
[475.62930298 -615.46179199]
[483.83425903 -602.90313721]
[491.61950684 -590.08007812]
[498.97653198 -577.00665283]
[505.89727783 -563.69708252]
[512.37420654 -550.16595459]
[518.40014648 -536.42810059]
[523.96862793 -522.49847412]
[529.07348633 -508.39242554]
[533.70916748 -494.12524414]
[537.87054443 -479.71261597]
[541.55316162 -465.17028809]
[544.75292969 -450.51412964]
[547.46636963 -435.76022339]
[549.69055176 -420.92462158]
[551.42297363 -406.02362061]
[552.66174316 -391.07348633]
[553.40557861 -376.09057617]
[553.65356445 -361.09124756]
[553.40551758 -346.09191895]
[552.66168213 -331.10900879]
[551.42291260 -316.15887451]
[549.69042969 -301.25787354]
[547.46630859 -286.42230225]
[544.75280762 -271.66836548]
[541.55303955 -257.01220703]
[537.87036133 -242.46989441]
[533.70892334 -228.05726624]
[529.07324219 -213.79011536]
[523.96838379 -199.68403625]
[518.39990234 -185.75445557]
[512.37390137 -172.01660156]
[505.89697266 -158.48550415]
[498.97619629 -145.17594910]
[491.61917114 -132.10249329]
[483.83389282 -119.27943420]
[475.62890625 -106.72079468]
[467.01318359 -94.44030762]
[457.99612427 -82.45140076]
[448.58761597 -70.76718140]
[438.79791260 -59.40042877]
[428.63775635 -48.36357117]
[418.11822510 -37.66867828]
[407.25082397 -27.32744026]
[396.04745483 -17.35117149]
[384.52038574 -7.75077772]
[372.68218994 1.46324289]
[360.54580688 10.28081417]
[348.12451172 18.69229507]
[335.43191528 26.68848801]
[322.48187256 34.26064682]
[309.28854370 41.40049744]
[295.86639404 48.10022354]
[282.23001099 54.35250854]
[268.39440918 60.15050888]
[254.37464905 65.48788452]
[240.18608093 70.35880280]
[225.84422302 74.75793457]
[211.36476135 78.68047333]
[196.76351929 82.12213135]
[182.05647278 85.07913208]
[167.25968933 87.54825592]
[152.38935852 89.52680206]
[137.46174622 91.01259613]
[122.49317169 92.00402832]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
