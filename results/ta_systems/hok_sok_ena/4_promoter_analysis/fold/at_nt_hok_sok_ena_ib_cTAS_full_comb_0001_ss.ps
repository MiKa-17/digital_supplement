%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUGUCUG_UCUCAG______________GCAUU_AAC__A_G__A_AA_G_G_CAGAUAGAGAAAAGCCCCAGU_____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[-23.07162094 466.64184570]
[-37.19573212 461.59396362]
[-51.11349106 456.00222778]
[-64.80395508 449.87500000]
[-78.24654388 443.22155762]
[-91.42103577 436.05184937]
[-104.30760956 428.37670898]
[-112.47719574 440.95678711]
[-120.64677429 453.53683472]
[-128.81636047 466.11688232]
[-136.98594666 478.69696045]
[-145.15553284 491.27700806]
[-139.46920776 505.71463013]
[-143.38766479 520.72882080]
[-155.40422058 530.54626465]
[-170.89822388 531.39196777]
[-183.91194153 522.94079590]
[-189.44131470 508.44229126]
[-185.36019897 493.47152710]
[-173.23786926 483.78500366]
[-157.73559570 483.10742188]
[-149.56600952 470.52737427]
[-141.39642334 457.94729614]
[-133.22683716 445.36724854]
[-125.05725098 432.78720093]
[-116.88766479 420.20712280]
[-129.14070129 411.55642700]
[-141.04908752 402.43710327]
[-152.59490967 392.86288452]
[-163.76081848 382.84817505]
[-174.52999878 372.40805054]
[-184.88624573 361.55819702]
[-194.81401062 350.31491089]
[-204.29835510 338.69515991]
[-213.32499695 326.71636963]
[-221.88037109 314.39657593]
[-229.95159912 301.75430298]
[-237.52656555 288.80859375]
[-244.59384155 275.57888794]
[-251.14282227 262.08508301]
[-257.16366577 248.34751892]
[-262.64727783 234.38679504]
[-267.58544922 220.22395325]
[-271.97073364 205.88029480]
[-275.79653931 191.37736511]
[-279.05712891 176.73699951]
[-281.74755859 161.98121643]
[-283.86380005 147.13220215]
[-285.40267944 132.21229553]
[-286.36187744 117.24394989]
[-286.73995972 102.24966431]
[-286.53634644 87.25199127]
[-285.75134277 72.27349091]
[-284.38613892 57.33670044]
[-282.44277954 42.46407318]
[-279.92419434 27.67798996]
[-276.83416748 13.00068283]
[-273.17733765 -1.54576838]
[-268.95919800 -15.93948555]
[-264.18615723 -30.15881729]
[-258.86529541 -44.18238068]
[-253.00469971 -57.98907852]
[-246.61314392 -71.55814362]
[-239.70024109 -84.86917114]
[-232.27639771 -97.90213776]
[-224.35278320 -110.63744354]
[-215.94131470 -123.05593109]
[-207.05464172 -135.13891602]
[-197.70613098 -146.86824036]
[-187.90983582 -158.22624207]
[-177.68049622 -169.19584656]
[-167.03350830 -179.76055908]
[-155.98486328 -189.90449524]
[-144.55120850 -199.61236572]
[-132.74971008 -208.86961365]
[-120.59814453 -217.66227722]
[-108.11477661 -225.97715759]
[-95.31838226 -233.80172729]
[-82.22821808 -241.12423706]
[-68.86396027 -247.93365479]
[-55.24571228 -254.21975708]
[-41.39396286 -259.97308350]
[-27.32954597 -265.18496704]
[-13.07361126 -269.84756470]
[1.35239649 -273.95388794]
[15.92677975 -277.49777222]
[30.62761688 -280.47384644]
[45.43279648 -282.87762451]
[60.32004929 -284.70556641]
[75.26698303 -285.95483398]
[90.25112152 -286.62362671]
[105.24992371 -286.71087646]
[120.24082947 -286.21649170]
[135.20129395 -285.14117432]
[150.10879517 -283.48660278]
[164.94094849 -281.25521851]
[179.67541504 -278.45037842]
[194.29003906 -275.07632446]
[208.76284790 -271.13812256]
[223.07206726 -266.64169312]
[237.19618225 -261.59381104]
[251.11392212 -256.00204468]
[264.80438232 -249.87480164]
[278.24697876 -243.22132874]
[291.42144775 -236.05162048]
[304.30801392 -228.37646484]
[316.88726807 -220.20739746]
[329.14031982 -211.55670166]
[341.04870605 -202.43739319]
[352.59454346 -192.86320496]
[363.76046753 -182.84851074]
[374.52966309 -172.40838623]
[384.88592529 -161.55853271]
[394.81372070 -150.31527710]
[404.29806519 -138.69552612]
[413.32470703 -126.71675110]
[421.88009644 -114.39697266]
[429.95135498 -101.75472260]
[437.52633667 -88.80900574]
[444.59362793 -75.57931519]
[451.14263916 -62.08552933]
[457.16348267 -48.34794998]
[462.64712524 -34.38724518]
[467.58529663 -20.22440910]
[471.97061157 -5.88074350]
[475.79641724 8.62217617]
[479.05703735 23.26253700]
[481.74746704 38.01831818]
[483.86373901 52.86732483]
[485.40264893 67.78722382]
[486.36187744 82.75557709]
[486.73995972 97.74986267]
[486.53637695 112.74753571]
[485.75137329 127.72603607]
[484.38619995 142.66282654]
[482.44284058 157.53546143]
[479.92428589 172.32154846]
[476.83425903 186.99885559]
[473.17745972 201.54531860]
[468.95935059 215.93904114]
[464.18630981 230.15837097]
[458.86547852 244.18194580]
[453.00488281 257.98864746]
[446.61334229 271.55770874]
[439.70046997 284.86874390]
[432.27664185 297.90173340]
[424.35305786 310.63705444]
[415.94158936 323.05554199]
[407.05493164 335.13854980]
[397.70642090 346.86785889]
[387.91015625 358.22589111]
[377.68081665 369.19549561]
[367.03384399 379.76022339]
[355.98522949 389.90417480]
[344.55157471 399.61206055]
[332.75009155 408.86932373]
[320.59854126 417.66201782]
[308.11517334 425.97689819]
[295.31878662 433.80148315]
[282.22863770 441.12402344]
[268.86437988 447.93344116]
[255.24613953 454.21957397]
[241.39440918 459.97290039]
[227.32998657 465.18478394]
[213.07406616 469.84744263]
[198.64805603 473.95376587]
[184.07368469 477.49765015]
[169.37284851 480.47375488]
[154.56767273 482.87756348]
[139.68041992 484.70550537]
[124.73348236 485.95480347]
[109.74935150 486.62359619]
[94.75054932 486.71087646]
[79.75964355 486.21652222]
[64.79918671 485.14123535]
[49.89167023 483.48666382]
[35.05952072 481.25527954]
[20.32504845 478.45046997]
[5.71041584 475.07644653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 26 25 gmark
7 cmark
26 cmark
8 25 37 gmark
25 cmark
9 24 34 gmark
9 cmark
24 cmark
10 23 25 gmark
10 cmark
23 cmark
11 22 34 gmark
11 cmark
22 cmark
12 21 25 gmark
12 cmark
21 cmark

% End Annotations
showpage
end
%%EOF
