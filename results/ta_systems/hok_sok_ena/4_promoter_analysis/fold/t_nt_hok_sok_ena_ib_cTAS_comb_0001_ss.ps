%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:05:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___GGAAUGCCGCAAAAAUAUCUGUUGUUUGGUUUAUUAGUGAUUUGUUUCACGAUUUUGUUAUUUACCUGGAUGGUUCGUGAUUCGCUGUGUGAAUUACAUAUCAAACAGGGGAAUAAUGAGCUGGCGGCAUUUUUAGCCUGCGAAUCAAAACAGUA__A_____\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50894165 91.93234253]
[62.55010223 90.79780579]
[47.64490891 89.09802246]
[32.81471634 86.83541870]
[18.08076477 84.01323700]
[3.46416092 80.63552094]
[-11.01415539 76.70711517]
[-25.33344460 72.23363495]
[-39.47319412 67.22150421]
[-53.41315079 61.67788696]
[-67.13334656 55.61073303]
[-80.61412048 49.02873230]
[-93.83616638 41.94131470]
[-106.78054810 34.35862732]
[-119.42871094 26.29154015]
[-131.76254272 17.75160408]
[-143.76438904 8.75105381]
[-155.41703796 -0.69721788]
[-166.70379639 -10.57967567]
[-177.60852051 -20.88216400]
[-188.11555481 -31.58992386]
[-198.20986938 -42.68761444]
[-207.87701416 -54.15934372]
[-217.10311890 -65.98867035]
[-225.87496948 -78.15866089]
[-234.18000793 -90.65187073]
[-242.00634766 -103.45040894]
[-249.34275818 -116.53594208]
[-256.17874146 -129.88972473]
[-262.50448608 -143.49261475]
[-268.31097412 -157.32514954]
[-273.58984375 -171.36749268]
[-278.33352661 -185.59954834]
[-282.53527832 -200.00091553]
[-286.18905640 -214.55097961]
[-289.28958130 -229.22886658]
[-291.83248901 -244.01358032]
[-293.81408691 -258.88394165]
[-295.23156738 -273.81860352]
[-296.08285522 -288.79623413]
[-296.36676025 -303.79534912]
[-296.08288574 -318.79446411]
[-295.23162842 -333.77209473]
[-293.81420898 -348.70678711]
[-291.83264160 -363.57714844]
[-289.28976440 -378.36187744]
[-286.18923950 -393.03976440]
[-282.53552246 -407.58981323]
[-278.33380127 -421.99121094]
[-273.59011841 -436.22326660]
[-268.31127930 -450.26562500]
[-262.50485229 -464.09817505]
[-256.17913818 -477.70108032]
[-249.34318542 -491.05487061]
[-242.00680542 -504.14044189]
[-234.18049622 -516.93896484]
[-225.87548828 -529.43218994]
[-217.10365295 -541.60223389]
[-207.87757874 -553.43157959]
[-198.21046448 -564.90332031]
[-188.11618042 -576.00103760]
[-177.60916138 -586.70880127]
[-166.70446777 -597.01135254]
[-155.41772461 -606.89379883]
[-143.76509094 -616.34210205]
[-131.76327515 -625.34271240]
[-119.42945862 -633.88262939]
[-106.78131104 -641.94976807]
[-93.83695221 -649.53247070]
[-80.61492157 -656.61993408]
[-67.13416290 -663.20196533]
[-53.41398239 -669.26916504]
[-39.47403717 -674.81280518]
[-25.33429909 -679.82495117]
[-11.01502037 -684.29846191]
[3.46328712 -688.22692871]
[18.07988358 -691.60467529]
[32.81382751 -694.42687988]
[47.64401627 -696.68951416]
[62.54920578 -698.38934326]
[77.50804138 -699.52392578]
[92.49909973 -700.09161377]
[107.50090027 -700.09161377]
[122.49195862 -699.52392578]
[137.45079041 -698.38934326]
[152.35598755 -696.68951416]
[167.18617249 -694.42687988]
[181.92012024 -691.60467529]
[196.53671265 -688.22692871]
[211.01501465 -684.29846191]
[225.33430481 -679.82495117]
[239.47404480 -674.81280518]
[253.41398621 -669.26916504]
[267.13415527 -663.20196533]
[280.61492920 -656.61993408]
[293.83694458 -649.53247070]
[306.78131104 -641.94976807]
[319.42947388 -633.88262939]
[331.76327515 -625.34271240]
[343.76510620 -616.34210205]
[355.41772461 -606.89379883]
[366.70446777 -597.01135254]
[377.60916138 -586.70880127]
[388.11618042 -576.00103760]
[398.21047974 -564.90332031]
[407.87756348 -553.43157959]
[417.10366821 -541.60223389]
[425.87548828 -529.43218994]
[434.18048096 -516.93896484]
[442.00680542 -504.14044189]
[449.34317017 -491.05487061]
[456.17913818 -477.70108032]
[462.50485229 -464.09817505]
[468.31127930 -450.26562500]
[473.59011841 -436.22326660]
[478.33380127 -421.99121094]
[482.53552246 -407.58981323]
[486.18923950 -393.03976440]
[489.28976440 -378.36187744]
[491.83264160 -363.57714844]
[493.81420898 -348.70678711]
[495.23162842 -333.77209473]
[496.08288574 -318.79446411]
[496.36676025 -303.79534912]
[496.08285522 -288.79623413]
[495.23156738 -273.81860352]
[493.81408691 -258.88394165]
[491.83248901 -244.01358032]
[489.28958130 -229.22886658]
[486.18905640 -214.55097961]
[482.53527832 -200.00091553]
[478.33352661 -185.59954834]
[473.58984375 -171.36749268]
[468.31097412 -157.32514954]
[462.50448608 -143.49261475]
[456.17874146 -129.88972473]
[449.34274292 -116.53594208]
[442.00634766 -103.45040894]
[434.18002319 -90.65187073]
[425.87496948 -78.15866089]
[417.10311890 -65.98867035]
[407.87701416 -54.15934372]
[398.20986938 -42.68761444]
[388.11557007 -31.58992386]
[377.60852051 -20.88216400]
[366.70379639 -10.57967567]
[355.41702271 -0.69721788]
[343.76437378 8.75105381]
[331.76254272 17.75160408]
[319.42871094 26.29154015]
[306.78054810 34.35862732]
[293.83618164 41.94131470]
[280.61410522 49.02873230]
[267.13333130 55.61073303]
[253.41314697 61.67788696]
[239.47319031 67.22150421]
[225.33345032 72.23363495]
[211.01416016 76.70711517]
[196.53584290 80.63552094]
[181.91923523 84.01323700]
[167.18528748 86.83541870]
[152.35508728 89.09802246]
[137.44989014 90.79780579]
[122.49105835 91.93234253]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
