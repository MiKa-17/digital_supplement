%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 14:23:47 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAG______________GCAUG___CA_CC_GA_AAG_G_CAGAUAGAGAAAAGCCCCAGU_______________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[258.64218140 303.83197021]
[246.95349121 294.42666626]
[235.72555542 284.47583008]
[224.98382568 274.00201416]
[214.75262451 263.02893066]
[205.05513000 251.58148193]
[195.91331482 239.68557739]
[187.34788513 227.36814880]
[179.37825012 214.65710449]
[172.02244568 201.58125305]
[165.29716492 188.17021179]
[159.21762085 174.45436096]
[153.79757690 160.46476746]
[149.04933167 146.23310852]
[144.98364258 131.79165649]
[141.60971069 117.17310333]
[138.93516541 102.41056824]
[124.06493378 104.37933350]
[109.19469452 106.34809875]
[94.34230804 108.44728088]
[94.33806610 123.47584534]
[92.09387970 138.33590698]
[87.65988922 152.69548035]
[81.13513947 166.23376465]
[72.66541290 178.64833069]
[62.43991089 189.66180420]
[50.68708420 199.02816772]
[37.66949081 206.53816223]
[23.67794991 212.02400208]
[9.02503872 215.36314392]
[-5.96189165 216.48098755]
[-20.94802856 215.35255432]
[-35.59857559 212.00305176]
[-49.58623505 206.50732422]
[-62.59851456 198.98812866]
[-74.34471893 189.61346436]
[-84.56243134 178.59275818]
[-93.02338409 166.17221069]
[-99.53855896 152.62931824]
[-103.96240234 138.26660156]
[-106.19608307 123.40496826]
[-106.18969727 108.37640381]
[-103.94339752 93.51667023]
[-99.50735474 79.15773010]
[-92.98068237 65.62036896]
[-84.50918579 53.20701218]
[-74.28211975 42.19498444]
[-62.52795410 32.83029938]
[-49.50929260 25.32216454]
[-35.51697159 19.83831406]
[-20.86358452 16.50126076]
[-5.87649488 15.38555622]
[9.10948086 16.51612473]
[23.75955009 19.86770821]
[37.74642563 25.36543083]
[50.75763702 32.88647461]
[62.50250626 42.26281357]
[72.71865082 53.28497696]
[81.17783356 65.70672607]
[87.69107819 79.25055695]
[92.11286926 93.61389160]
[99.00518799 89.38572693]
[107.22592926 91.47786713]
[122.09616852 89.50909424]
[136.96640015 87.54032898]
[135.70710754 72.59042358]
[135.16059875 57.59752274]
[135.32809448 42.59560776]
[136.20921326 27.61865044]
[137.80197144 12.70058441]
[140.10276794 -2.12479854]
[143.10636902 -16.82391357]
[146.80598450 -31.36346054]
[151.19322205 -45.71050644]
[156.25816345 -59.83254623]
[161.98931885 -73.69759369]
[168.37370300 -87.27423096]
[175.39686584 -100.53171539]
[183.04287720 -113.44000244]
[191.29444885 -125.96985626]
[200.13285828 -138.09289551]
[209.53810120 -149.78164673]
[219.48886108 -161.00964355]
[229.96260071 -171.75144958]
[240.93559265 -181.98272705]
[252.38299561 -191.68029785]
[264.27883911 -200.82218933]
[276.59622192 -209.38771057]
[289.30718994 -217.35743713]
[302.38299561 -224.71331787]
[315.79400635 -231.43870544]
[329.50979614 -237.51834106]
[343.49935913 -242.93847656]
[357.73098755 -247.68681335]
[372.17242432 -251.75259399]
[386.79095459 -255.12663269]
[401.55346680 -257.80126953]
[416.42651367 -259.77044678]
[431.37643433 -261.02969360]
[446.36932373 -261.57617188]
[461.37124634 -261.40866089]
[476.34820557 -260.52749634]
[491.26626587 -258.93469238]
[506.09164429 -256.63388062]
[520.79077148 -253.63024902]
[535.33026123 -249.93060303]
[549.67730713 -245.54331970]
[563.79937744 -240.47836304]
[577.66436768 -234.74717712]
[591.24102783 -228.36276245]
[604.49847412 -221.33956909]
[617.40673828 -213.69351196]
[629.93658447 -205.44192505]
[642.05963135 -196.60348511]
[653.74835205 -187.19821167]
[664.97631836 -177.24742126]
[675.71807861 -166.77366638]
[685.94934082 -155.80064392]
[695.64691162 -144.35322571]
[704.78875732 -132.45735168]
[713.35424805 -120.13996887]
[721.32391357 -107.42896271]
[728.67980957 -94.35314941]
[735.40515137 -80.94213867]
[741.48474121 -67.22631073]
[746.90484619 -53.23673630]
[751.65313721 -39.00511169]
[755.71893311 -24.56367111]
[759.09289551 -9.94513226]
[761.76751709 4.81739140]
[763.73669434 19.69045639]
[764.99591064 34.64037323]
[765.54235840 49.63327026]
[765.37475586 64.63518524]
[764.49359131 79.61213684]
[762.90075684 94.53019714]
[760.59991455 109.35556793]
[757.59625244 124.05467224]
[753.89654541 138.59420776]
[749.50921631 152.94122314]
[744.44421387 167.06324768]
[738.71301270 180.92826843]
[732.32855225 194.50488281]
[725.30535889 207.76232910]
[717.65930176 220.67057800]
[709.40765381 233.20039368]
[700.56921387 245.32339478]
[691.16387939 257.01211548]
[681.21307373 268.24005127]
[670.73931885 278.98181152]
[659.76623535 289.21304321]
[648.31878662 298.91055298]
[636.42291260 308.05239868]
[624.10552979 316.61785889]
[611.39447021 324.58752441]
[598.31866455 331.94335938]
[584.90765381 338.66867065]
[571.19177246 344.74826050]
[557.20220947 350.16833496]
[542.97058105 354.91659546]
[528.52911377 358.98233032]
[513.91058350 362.35629272]
[499.14804077 365.03085327]
[484.27496338 366.99996948]
[469.32504272 368.25915527]
[454.33215332 368.80557251]
[439.33023071 368.63796997]
[424.35330200 367.75674438]
[409.43524170 366.16387939]
[394.60986328 363.86300659]
[379.91076660 360.85928345]
[365.37124634 357.15957642]
[351.02423096 352.77224731]
[336.90222168 347.70721436]
[323.03723145 341.97595215]
[309.46063232 335.59149170]
[296.20318604 328.56823730]
[283.29495239 320.92211914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 65]
[18 64]
[19 63]
[20 61]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
17 65 296 gmark
17 cmark
65 cmark
18 64 54 gmark
18 cmark
64 cmark
19 63 50 gmark
63 cmark
20 61 70 gmark
20 cmark
61 cmark

% End Annotations
showpage
end
%%EOF
