%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 14:23:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUGUCU_GUCUCAGGC______________A_UU_A__A_CU____G__AA_A_GGCAGAUAGAGAAAAGCCCCAGG_____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[238.76966858 291.09750366]
[228.45314026 280.20425415]
[218.69241333 268.81027222]
[209.51177979 256.94393921]
[200.93403625 244.63475037]
[192.98052979 231.91329956]
[185.67102051 218.81118774]
[179.02368164 205.36103821]
[173.05503845 191.59625244]
[167.77993774 177.55105591]
[163.21148682 163.26039124]
[159.36105347 148.75976562]
[156.23818970 134.08523560]
[153.85069275 119.27329254]
[152.20446777 104.36074829]
[137.23153687 105.26148224]
[122.25860596 106.16221619]
[107.28567505 107.06295013]
[100.04791260 110.65976715]
[92.04840088 107.84838867]
[77.06221008 108.49195862]
[62.07602692 109.13552856]
[60.67230988 124.09358215]
[57.24480820 138.72116089]
[51.85737991 152.74575806]
[44.61038589 165.90611267]
[35.63883209 177.95704651]
[25.10985374 188.67405701]
[13.21960068 197.85749817]
[0.18957953 205.33628845]
[-13.73746777 210.97109985]
[-28.30208778 214.65696716]
[-43.23295212 216.32521057]
[-58.25190735 215.94476318]
[-73.07916260 213.52270508]
[-87.43848419 209.10417175]
[-101.06237793 202.77145386]
[-113.69703674 194.64254761]
[-125.10708618 184.86888123]
[-135.07995605 173.63252258]
[-143.42987061 161.14282227]
[-150.00126648 147.63243103]
[-154.67172241 133.35305786]
[-157.35423279 118.57070923]
[-157.99882507 103.56076813]
[-156.59349060 88.60286713]
[-153.16439819 73.97566223]
[-147.77545166 59.95164871]
[-140.52703857 46.79208374]
[-131.55416870 34.74211884]
[-121.02404022 24.02624702]
[-109.13278961 14.84409046]
[-96.10195923 7.36670971]
[-82.17430115 1.73340392]
[-67.60928345 -1.95088208]
[-52.67823792 -3.61751223]
[-37.65932465 -3.23543835]
[-22.83233643 -0.81177801]
[-8.47348785 3.60831714]
[5.14972210 9.94250393]
[17.78350067 18.07277870]
[29.19248962 27.84768295]
[39.16414642 39.08511353]
[47.51270294 51.57572174]
[54.08263397 65.08682251]
[58.75154495 79.36669922]
[61.43245316 94.14934540]
[76.41864014 93.50577545]
[91.40483093 92.86219788]
[106.38494110 92.09001923]
[121.35787201 91.18928528]
[136.33081055 90.28855133]
[151.30374146 89.38781738]
[151.15034485 74.38546753]
[151.74496460 59.39412308]
[153.08609009 44.45105362]
[155.17041016 29.59341049]
[157.99273682 14.85812950]
[161.54603577 0.28184766]
[165.82148743 -14.09919643]
[170.80847168 -28.24925041]
[176.49456787 -42.13313293]
[182.86566162 -55.71632767]
[189.90589905 -68.96506500]
[197.59777832 -81.84640503]
[205.92219543 -94.32832336]
[214.85841370 -106.37978363]
[224.38426208 -117.97083282]
[234.47601318 -129.07264709]
[245.10861206 -139.65762329]
[256.25561523 -149.69946289]
[267.88931274 -159.17317200]
[279.98074341 -168.05522156]
[292.49990845 -176.32351685]
[305.41564941 -183.95750427]
[318.69586182 -190.93820190]
[332.30749512 -197.24826050]
[346.21676636 -202.87197876]
[360.38906860 -207.79539490]
[374.78915405 -212.00625610]
[389.38125610 -215.49411011]
[404.12905884 -218.25025940]
[418.99588013 -220.26786804]
[433.94482422 -221.54190063]
[448.93869019 -222.06922913]
[463.94021606 -221.84851074]
[478.91204834 -220.88029480]
[493.81704712 -219.16699219]
[508.61810303 -216.71287537]
[523.27844238 -213.52403259]
[537.76159668 -209.60839844]
[552.03155518 -204.97570801]
[566.05285645 -199.63746643]
[579.79064941 -193.60696411]
[593.21081543 -186.89918518]
[606.27984619 -179.53079224]
[618.96539307 -171.52012634]
[631.23590088 -162.88710022]
[643.06079102 -153.65316772]
[654.41076660 -143.84127808]
[665.25750732 -133.47584534]
[675.57409668 -122.58264160]
[685.33483887 -111.18872833]
[694.51556396 -99.32244873]
[703.09332275 -87.01329041]
[711.04693604 -74.29187012]
[718.35650635 -61.18981171]
[725.00390625 -47.73968506]
[730.97265625 -33.97492981]
[736.24780273 -19.92976952]
[740.81634521 -5.63912392]
[744.66687012 8.86148071]
[747.78979492 23.53599167]
[750.17736816 38.34792709]
[751.82366943 53.26045990]
[752.72454834 68.23651886]
[752.87786865 83.23886871]
[752.28320312 98.23020935]
[750.94195557 113.17327118]
[748.85760498 128.03089905]
[746.03521729 142.76617432]
[742.48181152 157.34243774]
[738.20629883 171.72344971]
[733.21923828 185.87348938]
[727.53302002 199.75733948]
[721.16186523 213.34049988]
[714.12158203 226.58920288]
[706.42962646 239.47050476]
[698.10516357 251.95237732]
[689.16888428 264.00378418]
[679.64294434 275.59478760]
[669.55114746 286.69656372]
[658.91851807 297.28146362]
[647.77142334 307.32324219]
[636.13769531 316.79690552]
[624.04620361 325.67889404]
[611.52703857 333.94711304]
[598.61120605 341.58102417]
[585.33099365 348.56167603]
[571.71929932 354.87164307]
[557.80999756 360.49530029]
[543.63769531 365.41864014]
[529.23754883 369.62942505]
[514.64544678 373.11718750]
[499.89767456 375.87329102]
[485.03079224 377.89080811]
[470.08184814 379.16476440]
[455.08798218 379.69201660]
[440.08648682 379.47122192]
[425.11462402 378.50292969]
[410.20965576 376.78955078]
[395.40859985 374.33535767]
[380.74829102 371.14642334]
[366.26516724 367.23071289]
[351.99520874 362.59796143]
[337.97393799 357.25964355]
[324.23617554 351.22906494]
[310.81607056 344.52120972]
[297.74703979 337.15277100]
[285.06152344 329.14202881]
[272.79110718 320.50894165]
[260.96624756 311.27493286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 73]
[16 72]
[17 71]
[18 70]
[20 69]
[21 68]
[22 67]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 73 8 gmark
15 cmark
73 cmark
16 72 6 gmark
72 cmark
17 71 13 gmark
17 cmark
71 cmark
18 70 5 gmark
18 cmark
70 cmark
20 69 7 gmark
69 cmark
21 68 16 gmark
21 cmark
68 cmark
22 67 20 gmark
22 cmark
67 cmark

% End Annotations
showpage
end
%%EOF
