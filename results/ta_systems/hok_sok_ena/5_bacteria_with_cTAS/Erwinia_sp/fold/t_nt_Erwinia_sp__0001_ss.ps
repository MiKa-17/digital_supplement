%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:17:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCCGCAAAGUUCUGUUAUCUGGUGCCUUGUUAUCGUCUGUCUGACGAUACUGGCAUUCACACUGUUGACCCGCCAUUCGCUUUACGAACUGCGAAUACGGGAUGGUAUCAGGGAGGUUGCGGCAGUUAUGGCUUGUGAGUCCAGCCAGUAA\
) } def
/len { sequence length } bind def

/coor [
[208.80928040 408.10147095]
[206.01028442 397.20440674]
[206.13777161 385.93869019]
[209.19111633 375.07766724]
[214.96856689 365.36898804]
[223.08053589 357.48315430]
[216.41818237 344.04391479]
[209.75582886 330.60467529]
[203.09346008 317.16546631]
[196.43110657 303.72622681]
[189.76875305 290.28698730]
[183.10639954 276.84774780]
[166.86608887 274.63668823]
[155.01098633 263.08001709]
[152.33351135 246.57395935]
[160.07966614 231.56764221]
[153.14973450 218.26440430]
[146.21981812 204.96116638]
[139.28988647 191.65792847]
[126.54787445 183.94493103]
[127.03433990 168.13119507]
[120.10441589 154.82795715]
[113.17448425 141.52471924]
[106.24456024 128.22148132]
[84.57964325 129.35693359]
[65.33220673 114.07705688]
[60.38637924 87.06103516]
[45.65658951 84.22673035]
[30.92679787 81.39242554]
[16.19700813 78.55812836]
[1.46721780 75.72382355]
[-9.66556358 82.30928802]
[-21.90409088 79.60776520]
[-28.77439880 69.60905457]
[-43.44452667 66.48059082]
[-52.54770279 67.75347137]
[-58.37553024 63.13998032]
[-72.98012543 59.71861267]
[-87.58472443 56.29724503]
[-102.18932343 52.87587738]
[-116.79391479 49.45451355]
[-131.39851379 46.03314590]
[-145.73428345 53.23488998]
[-160.24212646 46.38637161]
[-163.79286194 30.74118423]
[-153.66265869 18.30097961]
[-137.62255859 18.60881615]
[-127.97714996 31.42854881]
[-113.37255096 34.84991455]
[-98.76795197 38.27128220]
[-84.16336060 41.69264984]
[-69.55876160 45.11401367]
[-54.95416260 48.53538132]
[-40.31606674 51.81045914]
[-25.64593697 54.93891907]
[-9.29985809 48.61943054]
[4.30152082 60.99403381]
[19.03131104 63.82833481]
[33.76110077 66.66263580]
[48.49089050 69.49694061]
[63.22068405 72.33124542]
[72.42140198 60.48443985]
[66.02928162 46.91459274]
[59.63716125 33.34474182]
[44.68213272 28.23370361]
[37.79648590 14.00825405]
[43.06535339 -0.89190018]
[57.36280823 -7.62676144]
[72.20642090 -2.20065618]
[78.78974915 12.16720390]
[73.20700836 26.95262146]
[79.59912872 40.52246857]
[85.99124908 54.09231949]
[100.99050140 54.24239349]
[107.65285492 40.80315781]
[114.31521606 27.36392593]
[120.97756958 13.92469215]
[117.60186768 1.43822968]
[123.47142792 -9.63552380]
[134.94096375 -13.58838272]
[141.87089539 -26.89162064]
[148.80082703 -40.19485855]
[155.73074341 -53.49809265]
[162.66067505 -66.80133057]
[169.59060669 -80.10456848]
[161.27430725 -93.01715088]
[160.54449463 -108.35869598]
[167.59750366 -122.00240326]
[180.53608704 -130.27818298]
[195.87983704 -130.95989990]
[209.50137329 -123.86415863]
[217.73655701 -110.89969635]
[218.37017822 -95.55387878]
[211.23178101 -81.95465851]
[198.24156189 -73.76015472]
[182.89384460 -73.17464447]
[175.96391296 -59.87140274]
[169.03398132 -46.56816864]
[162.10406494 -33.26493073]
[155.17413330 -19.96169281]
[148.24420166 -6.65845633]
[149.97235107 10.78126335]
[134.41680908 20.58704948]
[127.75444794 34.02628326]
[121.09208679 47.46551514]
[114.42973328 60.90475082]
[132.17987061 80.90876770]
[132.80618286 104.83436584]
[119.54779816 121.29156494]
[126.47772217 134.59480286]
[133.40765381 147.89804077]
[140.33757019 161.20127869]
[153.57527161 169.86581421]
[152.59312439 184.72799683]
[159.52305603 198.03123474]
[166.45297241 211.33447266]
[173.38290405 224.63771057]
[187.16043091 225.65921021]
[198.53575134 233.30651855]
[204.58560181 245.48510742]
[203.81954956 258.95339966]
[196.54562378 270.18539429]
[203.20799255 283.62463379]
[209.87034607 297.06387329]
[216.53269958 310.50308228]
[223.19505310 323.94232178]
[229.85742188 337.38156128]
[236.51977539 350.82080078]
[255.67745972 349.74536133]
[273.36303711 357.06188965]
[286.09683228 371.28524780]
[291.39321899 389.57592773]
[288.24575806 408.30682373]
[277.31814575 423.78247070]
[285.28955078 436.48904419]
[293.26095581 449.19558716]
[301.23233032 461.90216064]
[309.20373535 474.60873413]
[323.09182739 482.18710327]
[323.30114746 497.08023071]
[338.55551147 502.04849243]
[344.04693604 517.12243652]
[335.56286621 530.73864746]
[319.61157227 532.45184326]
[308.42950439 520.94793701]
[310.59457397 505.05163574]
[297.27667236 498.38211060]
[296.49719238 482.58013916]
[288.52578735 469.87356567]
[280.55438232 457.16699219]
[272.58297729 444.46044922]
[264.61157227 431.75387573]
[253.82107544 434.59042358]
[242.64852905 434.52697754]
[231.86083984 431.55975342]
[222.20054626 425.88461304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[16 117]
[17 116]
[18 115]
[19 114]
[21 112]
[22 111]
[23 110]
[24 109]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[34 55]
[35 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[62 73]
[63 72]
[64 71]
[74 106]
[75 105]
[76 104]
[77 103]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[134 152]
[135 151]
[136 150]
[137 149]
[138 148]
[140 146]
] def

init

% Start Annotations
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 1 colorpair
9 125 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
16 117 0.0 1 colorpair
17 116 0.0 1 colorpair
18 115 0.0 1 colorpair
19 114 0.0 1 colorpair
21 112 0.0 1 colorpair
22 111 0.0 1 colorpair
23 110 0.0 1 colorpair
24 109 0.0 1 colorpair
27 61 0.0 1 colorpair
28 60 0.0 1 colorpair
29 59 0.0 1 colorpair
30 58 0.0 1 colorpair
31 57 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.0 1 colorpair
37 53 0.0 1 colorpair
38 52 0.0 1 colorpair
39 51 0.0 1 colorpair
40 50 0.0 1 colorpair
41 49 0.0 1 colorpair
42 48 0.0 1 colorpair
62 73 0.0 1 colorpair
63 72 0.0 1 colorpair
64 71 0.0 1 colorpair
74 106 0.0 1 colorpair
75 105 0.0 1 colorpair
76 104 0.0 1 colorpair
77 103 0.0 1 colorpair
80 101 0.0 1 colorpair
81 100 0.0 1 colorpair
82 99 0.0 1 colorpair
83 98 0.0 1 colorpair
84 97 0.0 1 colorpair
85 96 0.0 1 colorpair
134 152 0.0 1 colorpair
135 151 0.0 1 colorpair
136 150 0.0 1 colorpair
137 149 0.0 1 colorpair
138 148 0.0 1 colorpair
140 146 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
