%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AGGAAUGCCGCAAAAGUAUCUGUUGUUUGGCUUAGUAGUGAUUUGCUUCACUAUUUUAUUAUUGACCUGGAUGGUUCGUGAUUCGCUAUGUGAAUUACAGCGCAGGCAGGGAAAUAUUGAGCUGGUGGCAUUCUUAGCCUGUGAUAUUAAACAGUAA\
) } def
/len { sequence length } bind def

/coor [
[161.33642578 217.82707214]
[153.73931885 221.48028564]
[145.92579651 224.64428711]
[137.92732239 227.30630493]
[129.77609253 229.45562744]
[121.50495148 231.08360291]
[113.14720917 232.18368530]
[104.73651123 232.75141907]
[96.30674744 232.78454590]
[87.89185333 232.28291321]
[79.52572632 231.24853516]
[71.24205017 229.68560791]
[63.07418442 227.60038757]
[55.05503464 225.00129700]
[47.21688461 221.89880371]
[39.59130478 218.30538940]
[32.20900726 214.23553467]
[25.09972000 209.70562744]
[18.29207230 204.73390198]
[11.81348228 199.34039307]
[5.69003963 193.54681396]
[-0.05359468 187.37651062]
[-5.39428949 180.85430908]
[-10.31053638 174.00650024]
[-14.78253746 166.86064148]
[-18.79228210 159.44551086]
[-22.32362175 151.79100037]
[-25.36233711 143.92790222]
[-27.89618683 135.88789368]
[-29.91497040 127.70336151]
[-31.41055489 119.40725708]
[-32.37691879 111.03300476]
[-32.81016922 102.61431122]
[-32.70856094 94.18508911]
[-32.07250595 85.77928925]
[-30.90456390 77.43075562]
[-45.51900482 74.05168152]
[-60.13344193 70.67259979]
[-74.74787903 67.29351807]
[-89.36231995 63.91444397]
[-103.97676086 60.53536606]
[-115.60224152 70.81290436]
[-131.05162048 72.26080322]
[-144.38429260 64.32231903]
[-150.47357178 50.04996109]
[-146.97801208 34.93173599]
[-135.24171448 24.78091621]
[-119.77754211 23.50069618]
[-106.53177643 31.58334732]
[-100.59767914 45.92092514]
[-85.98324585 49.30000305]
[-71.36880493 52.67908096]
[-56.75436401 56.05816269]
[-42.13992691 59.43724060]
[-27.52548599 62.81631851]
[-21.89153099 47.20008850]
[-14.35371685 32.40855789]
[-5.02978134 18.67275429]
[5.93464422 6.20722485]
[18.36830330 -4.79332924]
[32.07699203 -14.15708733]
[46.84658432 -21.73779297]
[62.44639969 -27.41704369]
[78.63277435 -31.10613060]
[95.15288544 -32.74743271]
[111.74871063 -32.31531906]
[128.16102600 -29.81653404]
[144.13348389 -25.29010773]
[149.90794373 -39.13407898]
[140.91445923 -53.42933273]
[142.18138123 -70.10437775]
[153.01438904 -82.62589264]
[169.01008606 -86.20577240]
[174.50990295 -100.16112518]
[164.23092651 -111.39073944]
[159.86474609 -125.91049957]
[162.22604370 -140.82507324]
[170.79357910 -153.18461609]
[183.82400513 -160.56819153]
[198.70642090 -161.55792236]
[204.20623779 -175.51327515]
[209.70603943 -189.46864319]
[215.20585632 -203.42399597]
[220.70567322 -217.37934875]
[226.20549011 -231.33471680]
[218.58763123 -244.99128723]
[221.58103943 -260.33969116]
[233.77232361 -270.13287354]
[249.40515137 -269.74679565]
[261.09814453 -259.36373901]
[263.33026123 -243.88629150]
[255.04754639 -230.62240601]
[240.16085815 -225.83489990]
[234.66104126 -211.87953186]
[229.16122437 -197.92417908]
[223.66140747 -183.96882629]
[218.16159058 -170.01345825]
[212.66177368 -156.05810547]
[222.86749268 -145.18112183]
[227.35705566 -130.89291382]
[225.18887329 -116.01137543]
[216.73999023 -103.49592590]
[203.64178467 -95.85889435]
[188.46525574 -94.66131592]
[182.96543884 -80.70595551]
[191.16410828 -70.13198090]
[193.06925964 -56.77867508]
[188.07511902 -44.13211060]
[177.39132690 -35.54760361]
[163.75192261 -33.35961914]
[157.97746277 -19.51564598]
[177.09738159 -8.17286587]
[194.05789185 6.19973278]
[208.38391113 23.19958687]
[219.67420959 42.35054779]
[227.61254883 63.11621475]
[231.97657776 84.91496277]
[232.64407349 107.13623047]
[229.59632874 129.15760803]
[222.91871643 150.36231995]
[212.79827881 170.15643311]
[199.51846313 187.98551941]
[210.17732239 198.53959656]
[220.83618164 209.09368896]
[231.49505615 219.64776611]
[255.80519104 216.55070496]
[274.52648926 231.98506165]
[276.09054565 255.95401001]
[288.61380005 264.21038818]
[301.13705444 272.46679688]
[316.06991577 267.82522583]
[330.47259521 273.91589355]
[337.54464722 287.86294556]
[333.94680786 303.08102417]
[321.37789917 312.38461304]
[305.77258301 311.38082886]
[294.49917603 300.54364014]
[292.88067627 284.99005127]
[280.35739136 276.73367310]
[267.83413696 268.47726440]
[262.54589844 272.39431763]
[256.51953125 275.07675171]
[250.03956604 276.39056396]
[243.41343689 276.26663208]
[236.95709229 274.70410156]
[230.97981262 271.77096558]
[225.76939392 267.60098267]
[221.57835388 262.38766479]
[218.61166382 256.37524414]
[217.01670837 249.84730530]
[216.87600708 243.11337280]
[218.20298767 236.49421692]
[220.94097900 230.30662537]
[210.28210449 219.75254822]
[199.62324524 209.19847107]
[188.96437073 198.64439392]
[182.52836609 204.08863831]
[175.75999451 209.11369324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[68 111]
[69 110]
[73 105]
[74 104]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[122 156]
[123 155]
[124 154]
[125 153]
[128 140]
[129 139]
[130 138]
] def

init

% Start Annotations
36 55 0.16 1 colorpair
37 54 0.16 1 colorpair
38 53 0.16 1 colorpair
39 52 0.0 1 colorpair
40 51 0.0 1 colorpair
41 50 0.16 1 colorpair
68 111 0.16 1 colorpair
69 110 0.16 1 colorpair
73 105 0.0 1 colorpair
74 104 0.16 1 colorpair
81 97 0.16 1 colorpair
82 96 0.16 1 colorpair
84 94 0.0 1 colorpair
85 93 0.0 1 colorpair
122 156 0.0 0.6 colorpair
123 155 0.32 1 colorpair
124 154 0.0 1 colorpair
125 153 0.16 1 colorpair
128 140 0.16 1 colorpair
129 139 0.0 1 colorpair
130 138 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
36 cmark
54 cmark
38 cmark
53 cmark
41 cmark
50 cmark
68 cmark
111 cmark
69 cmark
104 cmark
80 98 5 gmark
80 cmark
98 cmark
81 cmark
82 cmark
96 cmark
83 95 5 gmark
83 cmark
95 cmark
122 156 1 gmark
123 cmark
155 cmark
125 cmark
153 cmark
128 cmark
140 cmark

% End Annotations
showpage
end
%%EOF
