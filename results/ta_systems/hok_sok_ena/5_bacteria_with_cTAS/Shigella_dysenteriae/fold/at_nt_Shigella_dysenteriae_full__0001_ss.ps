%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:58:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGCAUGAACACCGAAAGGCAGAUAGAGAAAAGCCCCAGU____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[-21.75780678 313.91290283]
[-31.93280220 307.79177856]
[-41.80074692 301.18707275]
[-50.81187820 313.17871094]
[-59.82301331 325.17034912]
[-68.83414459 337.16198730]
[-77.84528351 349.15365601]
[-86.85641479 361.14529419]
[-95.86754608 373.13693237]
[-104.87868500 385.12857056]
[-113.88981628 397.12020874]
[-122.90095520 409.11184692]
[-131.91207886 421.10348511]
[-131.09068298 437.12548828]
[-143.20005798 447.64892578]
[-158.95092773 444.60110474]
[-166.26058960 430.32006836]
[-159.52168274 415.76098633]
[-143.90373230 412.09234619]
[-134.89259338 400.10070801]
[-125.88146210 388.10906982]
[-116.87032318 376.11743164]
[-107.85919189 364.12579346]
[-98.84806061 352.13415527]
[-89.83692169 340.14251709]
[-80.82579041 328.15087891]
[-71.81465149 316.15924072]
[-62.80352020 304.16757202]
[-53.79238892 292.17593384]
[-73.49935913 274.58999634]
[-91.20845795 254.99360657]
[-106.71575928 233.61244202]
[-119.84270477 210.69271851]
[-130.43812561 186.49835205]
[-138.38000488 161.30793762]
[-143.57691956 135.41156006]
[-145.96899414 109.10739899]
[-145.52870178 82.69837189]
[-142.26110840 56.48858261]
[-136.20385742 30.77982712]
[-127.42666626 5.86815500]
[-141.10516357 -0.28803706]
[-154.78366089 -6.44422913]
[-166.43325806 3.41729999]
[-181.21008301 7.23934937]
[-196.18019104 4.26304913]
[-208.37127686 -4.92065477]
[-215.36276245 -18.48833084]
[-215.76649475 -33.74610901]
[-209.50231934 -47.66454315]
[-197.81398010 -57.48011780]
[-183.02221680 -61.24394989]
[-168.06393433 -58.20872116]
[-155.90911865 -48.97707748]
[-148.97111511 -35.38197708]
[-148.62747192 -20.12272644]
[-134.94897461 -13.96653461]
[-121.27046967 -7.81034279]
[-115.81346130 -18.35641289]
[-109.85418701 -28.62702751]
[-103.40650940 -38.59828186]
[-96.48543549 -48.24697495]
[-89.10707092 -57.55064774]
[-81.28859711 -66.48764801]
[-73.04820251 -75.03717041]
[-64.40506744 -83.17932892]
[-55.37930298 -90.89516449]
[-45.99192047 -98.16672516]
[-36.26476669 -104.97708130]
[-26.22047997 -111.31039429]
[-15.88243580 -117.15190887]
[-5.27469444 -122.48804474]
[5.57805681 -127.30637360]
[16.65056038 -131.59568787]
[27.91704369 -135.34599304]
[39.35129166 -138.54858398]
[50.92668533 -141.19598389]
[62.61629105 -143.28204346]
[74.39289856 -144.80189514]
[86.22911072 -145.75201416]
[98.09736633 -146.13018799]
[109.97004700 -145.93554688]
[121.81952667 -145.16851807]
[133.61822510 -143.83090210]
[145.33868408 -141.92581177]
[156.95362854 -139.45767212]
[168.43601990 -136.43223572]
[179.75912476 -132.85655212]
[190.89662170 -128.73892212]
[201.82257080 -124.08895111]
[212.51153564 -118.91744232]
[222.93864441 -113.23644257]
[233.07965088 -107.05916595]
[242.91091919 -100.40000153]
[252.40959167 -93.27443695]
[261.55355835 -85.69905090]
[270.32153320 -77.69149017]
[278.69311523 -69.27037811]
[286.64883423 -60.45531464]
[294.17013550 -51.26682281]
[301.23953247 -41.72628021]
[307.84060669 -31.85589218]
[313.95794678 -21.67863274]
[319.57733154 -11.21818542]
[324.68569946 -0.49889684]
[329.27114868 10.45428658]
[333.32299805 21.61587143]
[336.83181763 32.95988464]
[339.78945923 44.45992279]
[342.18905640 56.08921814]
[344.02496338 67.82070923]
[345.29296875 79.62709808]
[345.99008179 91.48089600]
[346.11468506 103.35452271]
[345.66650391 115.22033691]
[344.64657593 127.05073547]
[343.05728149 138.81817627]
[340.90231323 150.49526978]
[338.18667603 162.05484009]
[334.91668701 173.47000122]
[331.09997559 184.71417236]
[326.74542236 195.76116943]
[321.86315918 206.58531189]
[316.46453857 217.16139221]
[310.56213379 227.46479797]
[304.16970825 237.47155762]
[297.30206299 247.15835571]
[289.97525024 256.50268555]
[282.20632935 265.48278809]
[274.01330566 274.07772827]
[265.41534424 282.26754761]
[256.43237305 290.03317261]
[247.08532715 297.35650635]
[237.39598083 304.22055054]
[227.38687134 310.60931396]
[217.08126831 316.50790405]
[206.50320435 321.90258789]
[195.67724609 326.78085327]
[184.62863159 331.13131714]
[173.38305664 334.94384766]
[161.96669006 338.20962524]
[150.40611267 340.92095947]
[138.72821045 343.07162476]
[126.96018982 344.65658569]
[115.12941742 345.67211914]
[103.26343536 346.11590576]
[91.38985443 345.98690796]
[79.53631592 345.28540039]
[67.73040009 344.01303101]
[55.99958801 342.17279053]
[44.37118149 339.76889038]
[32.87223816 336.80700684]
[21.52952766 333.29397583]
[10.36944199 329.23797607]
[-0.58204371 324.64849854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[41 58]
[42 57]
[43 56]
] def

init

% Start Annotations
3 29 0.0 1 colorpair
4 28 0.0 1 colorpair
5 27 0.16 1 colorpair
6 26 0.0 1 colorpair
7 25 0.0 1 colorpair
8 24 0.16 1 colorpair
9 23 0.0 1 colorpair
10 22 0.0 1 colorpair
11 21 0.16 1 colorpair
12 20 0.32 1 colorpair
13 19 0.16 1 colorpair
41 58 0.0 1 colorpair
42 57 0.0 1 colorpair
43 56 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
27 cmark
24 cmark
21 cmark
12 cmark
20 cmark
13 cmark

% End Annotations
showpage
end
%%EOF
