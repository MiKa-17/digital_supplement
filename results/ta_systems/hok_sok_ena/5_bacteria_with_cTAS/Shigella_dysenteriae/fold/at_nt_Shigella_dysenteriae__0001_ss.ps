%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:58:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGCAUGAACACC_AACGGCAGAUAGAGAAAAGCCCCAGU____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[137.23727417 94.67596436]
[123.10776520 99.71153259]
[108.97825623 104.74710083]
[103.00602722 110.23464966]
[94.51321411 109.73867798]
[80.28516388 114.48869324]
[66.05712128 119.23871613]
[51.82907486 123.98873901]
[48.66907883 138.95408630]
[38.50969315 150.25379944]
[24.15380669 154.92016602]
[9.48784351 151.79519653]
[-1.57030988 141.81607056]
[-15.79835606 146.56608582]
[-30.02640343 151.31611633]
[-44.25444794 156.06613159]
[-58.48249817 160.81614685]
[-72.71054077 165.56616211]
[-86.93859100 170.31619263]
[-101.16663361 175.06620789]
[-115.39468384 179.81622314]
[-115.03100586 194.92778015]
[-119.13929749 209.47471619]
[-127.35424805 222.16352844]
[-138.94540405 231.86593628]
[-152.88206482 237.71920776]
[-167.92500305 239.20288086]
[-182.73661804 236.18501282]
[-195.99986267 228.93395996]
[-206.53538513 218.09448242]
[-213.40635681 204.63041687]
[-216.00184631 189.73898315]
[-214.09103394 174.74430847]
[-207.84384155 160.97972107]
[-197.81576538 149.66914368]
[-184.89848328 141.81831360]
[-170.24061584 138.12532043]
[-155.14550781 138.91854858]
[-140.95541382 144.12745667]
[-128.93211365 153.28887939]
[-120.14469910 165.58818054]
[-105.91665649 160.83816528]
[-91.68860626 156.08815002]
[-77.46056366 151.33811951]
[-63.23251724 146.58810425]
[-49.00447083 141.83808899]
[-34.77642441 137.08805847]
[-20.54837608 132.33804321]
[-6.32032967 127.58802032]
[-3.47484779 112.96718597]
[6.37244463 101.65848541]
[20.65243340 96.76478577]
[35.56250000 99.69509125]
[47.07905579 109.76068878]
[61.30710220 105.01067352]
[75.53514862 100.26065063]
[89.76319122 95.51062775]
[103.94268799 90.61759186]
[118.07220459 85.58202362]
[132.20170593 80.54645538]
[128.08018494 66.11840057]
[124.89154816 51.45592117]
[122.64888763 36.61927414]
[121.36142731 21.66942024]
[121.03445435 6.66779518]
[121.66931152 -8.32395649]
[123.26339722 -23.24423027]
[125.81015778 -38.03171539]
[129.29911804 -52.62564468]
[133.71595764 -66.96604919]
[139.04251099 -80.99400330]
[145.25691223 -94.65185547]
[152.33360291 -107.88349152]
[160.24349976 -120.63453674]
[168.95411682 -132.85258484]
[178.42965698 -144.48744202]
[188.63117981 -155.49128723]
[199.51675415 -165.81890869]
[211.04167175 -175.42787170]
[223.15853882 -184.27868652]
[235.81761169 -192.33497620]
[248.96682739 -199.56364441]
[262.55218506 -205.93498230]
[276.51782227 -211.42282104]
[290.80639648 -216.00459290]
[305.35916138 -219.66146851]
[320.11630249 -222.37843323]
[335.01724243 -224.14431763]
[350.00067139 -224.95187378]
[365.00506592 -224.79776001]
[379.96875000 -223.68263245]
[394.83026123 -221.61106873]
[409.52850342 -218.59156799]
[424.00308228 -214.63655090]
[438.19451904 -209.76228333]
[452.04452515 -203.98875427]
[465.49615479 -197.33972168]
[478.49411011 -189.84251404]
[490.98504639 -181.52790833]
[502.91757202 -172.43008423]
[514.24267578 -162.58644104]
[524.91381836 -152.03741455]
[534.88720703 -140.82635498]
[544.12176514 -128.99932861]
[552.57958984 -116.60494232]
[560.22595215 -103.69412231]
[567.02935791 -90.31993103]
[572.96191406 -76.53731537]
[577.99920654 -62.40291977]
[582.12060547 -47.97482300]
[585.30908203 -33.31230927]
[587.55157471 -18.47563553]
[588.83886719 -3.52576876]
[589.16564941 11.47586060]
[588.53063965 26.46760559]
[586.93640137 41.38785934]
[584.38946533 56.17531586]
[580.90032959 70.76921082]
[576.48333740 85.10956573]
[571.15661621 99.13745880]
[564.94207764 112.79524231]
[557.86523438 126.02680206]
[549.95520020 138.77775574]
[541.24444580 150.99571228]
[531.76879883 162.63046265]
[521.56713867 173.63420105]
[510.68145752 183.96170044]
[499.15643311 193.57052612]
[487.03945923 202.42120361]
[474.38031006 210.47735596]
[461.23101807 217.70588684]
[447.64556885 224.07707214]
[433.67987061 229.56474304]
[419.39126587 234.14636230]
[404.83843994 237.80308533]
[390.08126831 240.51988220]
[375.18032837 242.28559875]
[360.19686890 243.09298706]
[345.19247437 242.93870544]
[330.22879028 241.82341003]
[315.36730957 239.75167847]
[300.66909790 236.73202515]
[286.19458008 232.77685547]
[272.00317383 227.90242004]
[258.15325928 222.12873840]
[244.70172119 215.47956848]
[231.70382690 207.98219299]
[219.21299744 199.66746521]
[207.28056335 190.56950378]
[195.95555115 180.72573853]
[185.28451538 170.17658997]
[175.31127930 158.96542358]
[166.07684326 147.13829041]
[157.61915588 134.74382019]
[149.97296143 121.83290863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 57]
[6 56]
[7 55]
[8 54]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
] def

init

% Start Annotations
1 60 0.0 0.2 colorpair
2 59 0.0 0.2 colorpair
3 58 0.0 1 colorpair
5 57 0.0 1 colorpair
6 56 0.0 1 colorpair
7 55 0.0 1 colorpair
8 54 0.0 1 colorpair
13 49 0.16 1 colorpair
14 48 0.0 1 colorpair
15 47 0.32 1 colorpair
16 46 0.0 1 colorpair
17 45 0.16 1 colorpair
18 44 0.0 0.6 colorpair
19 43 0.0 1 colorpair
20 42 0.16 1 colorpair
21 41 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 60 2 gmark
2 59 2 gmark
13 cmark
15 cmark
47 cmark
17 cmark
18 44 1 gmark
20 cmark
21 cmark

% End Annotations
showpage
end
%%EOF
