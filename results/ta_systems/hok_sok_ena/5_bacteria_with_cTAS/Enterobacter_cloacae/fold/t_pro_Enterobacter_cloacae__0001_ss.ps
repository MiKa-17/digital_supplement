%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:15:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AGGA_GUAAAAGGCAUG_____ACGCCAUUAAAAACUGCGUUAGGCAUCGUCUUUAUUAUUUGCCUGACGAUAGUGAUCUUUACCUUUAUUACUCGCGGUAAGCUCUGCGAGUUUUCAAUAAAGAGUGAACAUCAGGAGGUGGCGGCGAAAUUAGCCUGCAACGCAGGC___\
) } def
/len { sequence length } bind def

/coor [
[-165.50846863 449.23931885]
[-179.73825073 453.99197388]
[-194.16430664 458.11050415]
[-208.75843811 461.58691406]
[-223.49205017 464.41436768]
[-238.33631897 466.58734131]
[-253.26216125 468.10156250]
[-268.24038696 468.95410156]
[-283.24166870 469.14324951]
[-298.23660278 468.66867065]
[-313.19589233 467.53128052]
[-328.09024048 465.73327637]
[-342.89047241 463.27822876]
[-357.56759644 460.17092896]
[-372.09292603 456.41741943]
[-386.43801880 452.02508545]
[-400.57476807 447.00253296]
[-414.47552490 441.35958862]
[-428.11306763 435.10726929]
[-441.46069336 428.25784302]
[-454.49227905 420.82470703]
[-467.18234253 412.82241821]
[-479.50598145 404.26663208]
[-491.43914795 395.17410278]
[-502.95840454 385.56265259]
[-514.04125977 375.45104980]
[-524.66595459 364.85910034]
[-534.81182861 353.80758667]
[-544.45886230 342.31808472]
[-553.58819580 330.41308594]
[-562.18206787 318.11596680]
[-570.22351074 305.45071411]
[-577.69689941 292.44216919]
[-584.58758545 279.11575317]
[-590.88201904 265.49761963]
[-596.56793213 251.61437988]
[-601.63415527 237.49320984]
[-606.07080078 223.16177368]
[-609.86920166 208.64811707]
[-613.02185059 193.98065186]
[-615.52264404 179.18809509]
[-617.36669922 164.29939270]
[-618.55035400 149.34368896]
[-619.07128906 134.35028076]
[-618.92852783 119.34848785]
[-618.12231445 104.36770630]
[-616.65423584 89.43724823]
[-614.52716064 74.58633423]
[-611.74523926 59.84404755]
[-608.31396484 45.23924637]
[-604.24005127 30.80051231]
[-599.53143311 16.55611610]
[-594.19732666 2.53393936]
[-588.24822998 -11.23856735]
[-581.69573975 -24.73444366]
[-574.55267334 -37.92727280]
[-566.83306885 -50.79122543]
[-558.55194092 -63.30112457]
[-549.72564697 -75.43247986]
[-540.37133789 -87.16153717]
[-530.50732422 -98.46534729]
[-520.15301514 -109.32176971]
[-509.32861328 -119.70956421]
[-498.05532837 -129.60839844]
[-486.35522461 -138.99887085]
[-474.25119019 -147.86262512]
[-461.76690674 -156.18229675]
[-448.92684937 -163.94161987]
[-435.75613403 -171.12536621]
[-422.28057861 -177.71951294]
[-408.52648926 -183.71113586]
[-394.52084351 -189.08848572]
[-380.29107666 -193.84107971]
[-365.86499023 -197.95957947]
[-351.27084351 -201.43592834]
[-336.53723145 -204.26332092]
[-321.69296265 -206.43624878]
[-306.76708984 -207.95042419]
[-291.78887939 -208.80288696]
[-276.78759766 -208.99198914]
[-261.79263306 -208.51734924]
[-246.83335876 -207.37989807]
[-231.93904114 -205.58186340]
[-217.13882446 -203.12675476]
[-202.46168518 -200.01937866]
[-187.93637085 -196.26583862]
[-173.59130859 -191.87345886]
[-159.45455933 -186.85084534]
[-145.55383301 -181.20783997]
[-131.91632080 -174.95547485]
[-118.56871033 -168.10600281]
[-105.53713989 -160.67282104]
[-92.84712219 -152.67048645]
[-80.52349854 -144.11465454]
[-68.59038544 -135.02209473]
[-57.07115555 -125.41058350]
[-45.98834229 -115.29894257]
[-35.36365128 -104.70697021]
[-25.21787834 -93.65539551]
[-15.57088470 -82.16586304]
[-6.44155455 -70.26085663]
[2.15224123 -57.96367645]
[10.19367981 -45.29840088]
[17.66701889 -32.28982162]
[24.55763054 -18.96340370]
[30.85202599 -5.34523535]
[36.53787994 8.53802681]
[41.60406876 22.65920448]
[46.04066849 36.99065781]
[49.83899689 51.50432587]
[52.99161911 66.17180634]
[55.49236298 80.96437836]
[57.33633423 95.85308838]
[72.28957367 94.66963959]
[87.24282074 93.48619080]
[98.86988831 85.72070312]
[111.57373810 91.56056213]
[124.72044373 82.75859833]
[138.01849365 89.46764374]
[152.97172546 88.28419495]
[155.54882812 73.42453766]
[161.74114990 59.67296219]
[171.15945435 47.89389801]
[183.21170044 38.82778931]
[197.14025879 33.04454041]
[212.06958008 30.90769386]
[227.06120300 32.55157089]
[241.17271423 37.87283325]
[253.51707458 46.53698349]
[263.31829834 57.99938965]
[269.96029663 71.53951263]
[273.02551270 86.30620575]
[272.32125854 101.37123108]
[267.89184570 115.78757477]
[260.01568604 128.64903259]
[249.18788147 139.14709473]
[236.08909607 146.62187195]
[221.54269409 150.60348511]
[206.46310425 150.84162903]
[191.79823303 147.32136536]
[178.46992493 140.26394653]
[167.31600952 130.11303711]
[159.03762817 117.50672150]
[154.15518188 103.23743439]
[139.20193481 104.42088318]
[127.12478638 113.13820648]
[112.75717926 106.51380920]
[101.13011169 114.27929688]
[88.42626190 108.43943787]
[73.47302246 109.62287903]
[58.51977921 110.80632782]
[59.04077911 125.79974365]
[58.89805603 140.80152893]
[58.09189224 155.78231812]
[56.62386703 170.71278381]
[54.49685287 185.56370544]
[51.71501160 200.30599976]
[48.28379440 214.91081238]
[44.20991516 229.34956360]
[39.50135040 243.59397888]
[34.16731262 257.61618042]
[28.21824455 271.38870239]
[21.66579628 284.88461304]
[14.52279186 298.07745361]
[6.80321312 310.94143677]
[-1.47782719 323.45135498]
[-10.30411911 335.58276367]
[-19.65838432 347.31185913]
[-29.52231026 358.61569214]
[-39.87659073 369.47213745]
[-50.70095444 379.85998535]
[-61.97421265 389.75885010]
[-73.67429352 399.14938354]
[-85.77830505 408.01318359]
[-98.26254272 416.33288574]
[-111.10256958 424.09225464]
[-124.27324677 431.27606201]
[-137.74880981 437.87023926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[113 151]
[114 150]
[115 149]
[117 147]
[119 145]
[120 144]
] def

init

% Start Annotations
113 151 0.16 0.2 colorpair
114 150 0.0 1 colorpair
117 147 0.0 1 colorpair
120 144 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
113 151 2 gmark
151 cmark
115 149 3 gmark
115 cmark
119 145 5 gmark
119 cmark

% End Annotations
showpage
end
%%EOF
