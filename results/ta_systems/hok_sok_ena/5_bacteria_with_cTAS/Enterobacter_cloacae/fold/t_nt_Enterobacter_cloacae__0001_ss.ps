%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:15:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AUGACGCCAAAAAAAACUCUGUUAGGCGUUUUGUUUAUUAUCUGUAUGACGAUAGUGAUCUUUACCUUGAUGACGCGCGAUACGCUGUGCGAGUUGCAAUUCAGAAAUGAGCAUCCGGAGGUGGCGGCAAUGUUGGCUUGCGAAGCAGAACGUUA____\
) } def
/len { sequence length } bind def

/coor [
[58.87213135 219.94334412]
[50.41698837 216.70233154]
[42.21470642 212.86614990]
[34.30711365 208.45439148]
[26.73454285 203.48951721]
[19.53560829 197.99688721]
[12.74702454 192.00450134]
[6.40341091 185.54289246]
[0.53711849 178.64505005]
[-4.82193613 171.34613037]
[-9.64642239 163.68336487]
[-13.91173649 155.69583130]
[-17.59612846 147.42425537]
[-20.68080521 138.91082764]
[-23.15003777 130.19895935]
[-24.99123192 121.33308411]
[-26.19499969 112.35842133]
[-26.75520325 103.32073212]
[-26.66898346 94.26610565]
[-25.93677902 85.24072266]
[-24.56232643 76.29060364]
[-22.55263519 67.46140289]
[-19.91795349 58.79813766]
[-16.67171669 50.34499741]
[-12.83047962 42.14508057]
[-8.41383362 34.24021530]
[-3.44430232 26.67070770]
[2.05277205 19.47516441]
[8.04935455 12.69027805]
[14.51486492 6.35065222]
[21.41633034 0.48861629]
[28.71855354 -4.86593390]
[36.38429642 -9.68569183]
[44.37446594 -13.94607735]
[52.64831161 -17.62536430]
[61.16363907 -20.70478821]
[57.42202377 -35.23063660]
[53.68040466 -49.75648880]
[49.93878937 -64.28233337]
[46.19717026 -78.80818939]
[42.45555496 -93.33403778]
[37.26021194 -100.90828705]
[38.78513336 -108.17785645]
[35.32589722 -122.77353668]
[31.86665916 -137.36920166]
[16.97940063 -135.42663574]
[1.97130871 -135.02511597]
[-12.99852180 -136.16888428]
[-27.77140236 -138.84582520]
[-42.19073105 -143.02755737]
[-56.10366058 -148.66976929]
[-69.36270142 -155.71263123]
[-81.82729340 -164.08149719]
[-93.36531830 -173.68763733]
[-103.85446167 -184.42924500]
[-113.18352509 -196.19242859]
[-121.25363159 -208.85249329]
[-127.97921753 -222.27526855]
[-133.28898621 -236.31842041]
[-137.12667847 -250.83311462]
[-139.45158386 -265.66546631]
[-140.23905945 -280.65826416]
[-139.48077393 -295.65255737]
[-137.18473816 -310.48941040]
[-133.37533569 -325.01156616]
[-128.09289551 -339.06503296]
[-121.39346313 -352.50085449]
[-113.34802246 -365.17660522]
[-104.04187012 -376.95794678]
[-93.57366180 -387.71994019]
[-82.05436707 -397.34854126]
[-69.60608673 -405.74163818]
[-56.36078262 -412.81030273]
[-42.45886612 -418.47958374]
[-28.04770470 -422.68939209]
[-13.28006363 -425.39508057]
[1.68751144 -426.56799316]
[16.69635582 -426.19570923]
[31.58736801 -424.28210449]
[46.20269394 -420.84753418]
[60.38740540 -415.92840576]
[73.99113464 -409.57681274]
[86.86966705 -401.86010742]
[98.88649750 -392.86013794]
[109.91423035 -382.67224121]
[119.83597565 -371.40444946]
[128.54653931 -359.17620850]
[135.95359802 -346.11712646]
[141.97863770 -332.36566162]
[146.55778503 -318.06756592]
[149.64248657 -303.37442017]
[151.20005798 -288.44195557]
[151.21397400 -273.42849731]
[149.68409729 -258.49319458]
[146.62664795 -243.79435730]
[142.07403564 -229.48779297]
[136.07450867 -215.72517395]
[128.69166565 -202.65238953]
[120.00379181 -190.40800476]
[110.10296631 -179.12182617]
[99.09414673 -168.91351318]
[87.09402466 -159.89125061]
[74.22982025 -152.15069580]
[60.63789368 -145.77389526]
[46.46232986 -140.82844543]
[49.92156982 -126.23277283]
[53.38080597 -111.63710022]
[56.98140335 -97.07565308]
[60.72302246 -82.54980469]
[64.46463776 -68.02395630]
[68.20625305 -53.49810410]
[71.94787598 -38.97225571]
[75.68949127 -24.44640541]
[100.77496338 -26.79632568]
[125.82983398 -24.13995361]
[149.86486816 -16.58217430]
[171.93109131 -4.42138767]
[191.15727234 11.86226177]
[206.78428650 31.62584686]
[218.19514465 54.08904648]
[224.93931580 78.36494446]
[226.75051880 103.49505615]
[223.55723572 128.48716736]
[215.48554993 152.35453796]
[228.75697327 159.34518433]
[243.68447876 154.89462280]
[257.04400635 162.17318726]
[261.19494629 176.43171692]
[274.46636963 183.42236328]
[287.73779297 190.41300964]
[302.14447021 184.33178711]
[317.07427979 188.98312378]
[325.47781372 202.17079163]
[323.38717651 217.66799927]
[311.78948975 228.15742493]
[296.16085815 228.68627930]
[283.88061523 219.00486755]
[280.74713135 203.68444824]
[267.47570801 196.69378662]
[254.20428467 189.70314026]
[240.09785461 194.34468079]
[226.53915405 187.44421387]
[221.76632690 172.61660767]
[208.49488831 165.62596130]
[203.53471375 173.20159912]
[198.04650879 180.40391541]
[192.05830383 187.19619751]
[185.60063171 193.54379272]
[178.70640564 199.41433716]
[171.41078186 204.77789307]
[163.75099182 209.60711670]
[155.76609802 213.87734985]
[147.49679565 217.56684875]
[138.98527527 220.65676880]
[130.27493286 223.13137817]
[121.41019440 224.97804260]
[112.43627930 226.18734741]
[103.39893341 226.75312805]
[94.34425354 226.67250061]
[85.31842041 225.94586182]
[76.36746216 224.57693481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[41 108]
[43 107]
[44 106]
[45 105]
[124 144]
[125 143]
[128 140]
[129 139]
[130 138]
] def

init

% Start Annotations
37 112 0.16 1 colorpair
38 111 0.16 0.2 colorpair
39 110 0.32 0.6 colorpair
40 109 0.16 0.6 colorpair
41 108 0.32 1 colorpair
43 107 0.16 0.6 colorpair
44 106 0.32 0.2 colorpair
45 105 0.16 0.2 colorpair
124 144 0.16 0.2 colorpair
125 143 0.16 0.6 colorpair
128 140 0.32 0.6 colorpair
129 139 0.0 0.2 colorpair
130 138 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
36 113 4 gmark
113 cmark
112 cmark
38 111 2 gmark
38 cmark
39 110 1 gmark
39 cmark
110 cmark
40 109 1 gmark
109 cmark
41 cmark
108 cmark
43 107 1 gmark
107 cmark
44 106 2 gmark
44 cmark
106 cmark
45 105 2 gmark
45 cmark
105 cmark
124 144 2 gmark
144 cmark
125 143 1 gmark
143 cmark
128 140 1 gmark
128 cmark
140 cmark
129 139 2 gmark
130 cmark

% End Annotations
showpage
end
%%EOF
