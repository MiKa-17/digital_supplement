%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:15:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGAAUGCCAAAACGUACUCUGCUGUUAGGUUUGUUUCUGAUCUGUACGACGCUGUUGAUCUUCACCUGGAUGGUGCGCGACUCGCUGUGUGAGCUGCACUUCAGACAGGAGAAAACAGAGCUGGCGGCAGUGUUGGCUUACGAAGCAAAACGUUA____\
) } def
/len { sequence length } bind def

/coor [
[142.00492859 435.32913208]
[133.97685242 433.70962524]
[126.09441376 431.48553467]
[118.40309906 428.66961670]
[110.94725800 425.27807617]
[103.76992035 421.33035278]
[96.91248322 416.84918213]
[90.41452026 411.86038208]
[84.31354523 406.39263916]
[78.64476776 400.47744751]
[73.44091034 394.14883423]
[68.73203278 387.44332886]
[64.54533386 380.39947510]
[60.90500641 373.05792236]
[57.83208847 365.46090698]
[55.34435272 357.65228271]
[53.45620728 349.67700195]
[52.17859268 341.58108521]
[51.51893616 333.41113281]
[51.48110199 325.21429443]
[52.06536484 317.03784180]
[53.26841736 308.92886353]
[55.08338547 300.93420410]
[57.49985886 293.09991455]
[60.50396347 285.47119141]
[64.07843781 278.09204102]
[68.20272064 271.00506592]
[72.85308075 264.25112915]
[78.00276184 257.86923218]
[83.62212372 251.89619446]
[89.67879486 246.36648560]
[96.13790131 241.31204224]
[102.96224213 236.76206970]
[110.11249542 232.74282837]
[117.54747009 229.27755737]
[125.22431946 226.38629150]
[121.48270416 211.86044312]
[117.74108124 197.33459473]
[113.99946594 182.80874634]
[110.25785065 168.28289795]
[106.51623535 153.75704956]
[101.77909851 148.03588867]
[102.84580994 138.91322327]
[99.38657379 124.31755066]
[95.92733765 109.72187805]
[86.80770111 115.72828674]
[74.33522797 116.50962830]
[60.96756363 110.81977844]
[47.56307602 104.08779144]
[34.15858459 97.35580444]
[17.82755852 98.84898376]
[8.59124088 85.29824829]
[15.95116425 70.64343262]
[32.33607101 69.96015930]
[40.89057541 83.95131683]
[54.29506302 90.68330383]
[67.69955444 97.41529083]
[74.23079681 93.72844696]
[65.69474030 81.39411926]
[57.15867996 69.05978394]
[48.62261963 56.72545624]
[40.08655930 44.39112854]
[31.55050087 32.05679703]
[23.01444244 19.72246933]
[9.70242310 12.80942631]
[2.80374813 -0.51004356]
[4.83791494 -15.37147617]
[15.06201553 -26.34725761]
[29.74205780 -29.42886925]
[43.51667786 -23.49086571]
[51.35517883 -10.70188999]
[50.39527893 4.26616383]
[56.54494858 17.94759560]
[62.69461823 31.62902832]
[68.84428406 45.31045914]
[74.99394989 58.99189377]
[81.14362335 72.67332458]
[87.29328918 86.35475922]
[93.82453918 82.66790771]
[94.98692322 67.71301270]
[85.69040680 54.63806534]
[90.25485229 39.25802994]
[105.17880249 33.37116241]
[119.01388550 41.49335861]
[121.14700317 57.39397049]
[109.94181824 68.87540436]
[108.77942657 83.83029938]
[113.58847809 69.62209320]
[122.64768219 57.66672516]
[135.02539062 49.19369507]
[149.44868469 45.07437134]
[164.43423462 45.73238754]
[178.44094849 51.10007477]
[190.02835083 60.62541580]
[198.00479126 73.32881927]
[201.54995728 87.90386200]
[200.29927063 102.85162354]
[194.38136292 116.63488770]
[184.40481567 127.83615875]
[171.39562988 135.30349731]
[156.69168091 138.26896667]
[141.80513000 136.42756653]
[128.26692200 129.96870422]
[117.46934509 119.55659485]
[110.52301025 106.26263428]
[113.98224640 120.85831451]
[117.44148254 135.45397949]
[121.04208374 150.01542664]
[124.78369904 164.54127502]
[128.52531433 179.06712341]
[132.26693726 193.59297180]
[136.00854492 208.11882019]
[139.75016785 222.64468384]
[166.13160706 221.08885193]
[192.09436035 225.98402405]
[216.08508301 237.03381348]
[236.66928101 253.57373047]
[252.61708069 274.61111450]
[262.97668457 298.88473511]
[267.13122559 324.94036865]
[264.83541870 351.21795654]
[256.23007202 376.14498901]
[269.22045898 383.64498901]
[282.35382080 390.89166260]
[295.62524414 397.88232422]
[310.55276489 393.43176270]
[323.91229248 400.71032715]
[328.06323242 414.96884155]
[341.33465576 421.95950317]
[354.60607910 428.95016479]
[369.01275635 422.86892700]
[383.94256592 427.52026367]
[392.34609985 440.70794678]
[390.25546265 456.20513916]
[378.65777588 466.69454956]
[363.02914429 467.22341919]
[350.74890137 457.54199219]
[347.61541748 442.22158813]
[334.34399414 435.23092651]
[321.07257080 428.24026489]
[306.96612549 432.88180542]
[293.40744019 425.98135376]
[288.63461304 411.15374756]
[275.36318970 404.16308594]
[270.57403564 404.71377563]
[265.39486694 402.22732544]
[261.72045898 396.63537598]
[248.73007202 389.13537598]
[243.90473938 395.74533081]
[238.59149170 401.97039795]
[232.82095337 407.77465820]
[226.62632751 413.12457275]
[220.04328918 417.98925781]
[213.10978699 422.34063721]
[205.86573792 426.15353394]
[198.35289001 429.40594482]
[190.61454773 432.07904053]
[182.69531250 434.15734863]
[174.64079285 435.62884521]
[166.49746704 436.48498535]
[158.31225586 436.72076416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[41 108]
[43 107]
[44 106]
[45 105]
[48 57]
[49 56]
[50 55]
[79 87]
[80 86]
[122 148]
[123 147]
[124 144]
[125 143]
[128 140]
[129 139]
[130 138]
] def

init

% Start Annotations
37 112 0.16 1 colorpair
38 111 0.16 0.2 colorpair
39 110 0.32 0.6 colorpair
40 109 0.16 0.6 colorpair
41 108 0.32 1 colorpair
43 107 0.16 0.6 colorpair
44 106 0.32 0.2 colorpair
45 105 0.16 0.2 colorpair
48 57 0.32 0.2 colorpair
49 56 0.16 0.2 colorpair
50 55 0.16 0.6 colorpair
79 87 0.16 1 colorpair
122 148 0.0 0.2 colorpair
124 144 0.16 0.2 colorpair
125 143 0.16 0.6 colorpair
128 140 0.32 0.6 colorpair
129 139 0.0 0.2 colorpair
130 138 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
36 113 5 gmark
113 cmark
112 cmark
38 111 2 gmark
38 cmark
39 110 1 gmark
39 cmark
110 cmark
40 109 1 gmark
109 cmark
41 cmark
108 cmark
43 107 1 gmark
107 cmark
44 106 2 gmark
44 cmark
106 cmark
45 105 2 gmark
45 cmark
105 cmark
48 57 2 gmark
48 cmark
57 cmark
49 56 2 gmark
49 cmark
56 cmark
50 55 1 gmark
50 cmark
87 cmark
80 86 5 gmark
80 cmark
86 cmark
122 148 2 gmark
123 147 8 gmark
123 cmark
147 cmark
124 144 2 gmark
144 cmark
125 143 1 gmark
143 cmark
128 140 1 gmark
128 cmark
140 cmark
129 139 2 gmark
130 cmark

% End Annotations
showpage
end
%%EOF
