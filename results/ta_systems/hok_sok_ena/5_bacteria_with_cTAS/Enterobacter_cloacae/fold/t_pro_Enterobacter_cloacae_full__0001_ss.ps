%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:15:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________AAGGAGGCUAUGACGCCAUUAAAAACUCCGUUAGGCAUUGUCUUUAUUAUCUGCCUGACGAUAGUGAUCUUUACCUUUAUUACUCGCGAUACGCUGUGUGAGUUGCCAAUAAAGAGUGAGCAUCAGGAGGUGGCGGCAAAAUUAGCCUGCGAAGCAAA____\
) } def
/len { sequence length } bind def

/coor [
[70.66082764 362.72720337]
[60.14582825 373.44073486]
[48.66004562 383.10620117]
[36.30749893 391.63610840]
[23.20005798 398.95321655]
[9.45642948 404.99121094]
[-4.79892015 409.69543457]
[-19.43688965 413.02328491]
[-34.32491302 414.94461060]
[-49.32815552 415.44204712]
[-64.31074524 414.51104736]
[-79.13699341 412.16006470]
[-93.67263031 408.41040039]
[-107.78601074 403.29598999]
[-121.34932709 396.86315918]
[-134.23973083 389.17016602]
[-146.34049988 380.28671265]
[-157.54203796 370.29318237]
[-167.74288940 359.28012085]
[-176.85069275 347.34729004]
[-184.78294373 334.60272217]
[-191.46780396 321.16183472]
[-196.84475708 307.14636230]
[-200.86508179 292.68325806]
[-203.49238586 277.90347290]
[-204.70286560 262.94085693]
[-204.48556519 247.93095398]
[-202.84245300 233.00965881]
[-199.78839111 218.31211853]
[-195.35107422 203.97145081]
[-189.57064819 190.11752319]
[-182.49949646 176.87577820]
[-174.20162964 164.36618042]
[-164.75221252 152.70199585]
[-154.23683167 141.98884583]
[-142.75068665 132.32379150]
[-130.39782715 123.79432678]
[-117.29012299 116.47772217]
[-103.54627991 110.44022369]
[-89.29075623 105.73651123]
[-74.65266418 102.40919495]
[-59.76457214 100.48839569]
[-44.76131058 99.99151611]
[-29.77875328 100.92305756]
[-14.95259094 103.27457428]
[-0.41709158 107.02478027]
[13.69610405 112.13970184]
[27.25918388 118.57302856]
[34.94628525 105.69248199]
[42.63338852 92.81193542]
[50.32049179 79.93138885]
[37.39916229 87.54973602]
[29.57831383 100.34951782]
[18.54986191 110.51677704]
[5.15779018 117.27343750]
[-9.57302380 120.10241699]
[-24.51525497 118.78722382]
[-38.52539825 113.42849731]
[-50.53127670 104.43634796]
[-59.61410141 92.49891663]
[-65.07878113 78.52975464]
[-66.50711060 63.59791565]
[-63.78977585 48.84609985]
[-57.13473892 35.40324020]
[-47.05129623 24.29809761]
[-34.31111908 16.38053322]
[-19.88918877 12.25646496]
[-4.88919544 12.24150085]
[9.54093361 16.33678627]
[22.29688454 24.22891426]
[32.40246582 35.31391525]
[39.08412933 48.74292755]
[51.29650879 57.45256805]
[44.75476074 43.95421219]
[38.21301651 30.45586014]
[24.34423637 21.70434761]
[25.25915909 5.33074284]
[40.01659393 -1.82119441]
[53.43535233 7.60583639]
[51.71136856 23.91411400]
[58.25311661 37.41246796]
[64.79486084 50.91082382]
[72.27199554 51.49602127]
[73.00253296 36.51382065]
[73.73306274 21.53162003]
[74.46360016 6.54942036]
[75.19412994 -8.43278027]
[75.92466736 -23.41497993]
[76.65519714 -38.39717865]
[77.38572693 -53.37937927]
[78.11626434 -68.36157990]
[77.60850525 -83.35298157]
[90.89385223 -90.31714630]
[102.93409729 -81.37105560]
[100.10027313 -66.64099884]
[98.49102783 -51.72757339]
[96.88177490 -36.81414413]
[95.27252197 -21.90071678]
[93.66326904 -6.98729038]
[92.05401611 7.92613649]
[90.44477081 22.83956337]
[88.83551788 37.75299072]
[87.22626495 52.66641998]
[94.70339966 53.25161743]
[103.26552582 40.93537140]
[101.85298157 24.95462418]
[113.56545258 13.99116516]
[129.41815186 16.45522118]
[137.25022888 30.45657921]
[131.05360413 45.25459671]
[115.58177948 49.49749756]
[107.01964569 61.81374741]
[118.28731537 69.38045502]
[125.35928345 79.66793823]
[127.86003876 90.79158783]
[142.83236694 89.88091278]
[157.80470276 88.97023773]
[171.10966492 80.40937805]
[184.28320312 87.35971069]
[197.58818054 78.79885101]
[210.76171875 85.74918365]
[225.73405457 84.83850861]
[228.58158875 70.02829742]
[235.02355957 56.39188004]
[244.65501404 44.78645706]
[256.87051392 35.94155121]
[270.90219116 30.41316223]
[285.86798096 28.54880905]
[300.82711792 30.46568489]
[314.83929443 36.04329681]
[327.02368164 44.93103027]
[336.61434937 56.57019043]
[343.00839233 70.22914124]
[345.80392456 85.04925537]
[344.82519531 100.09893799]
[340.13372803 114.43214417]
[332.02444458 127.14788818]
[321.00704956 137.44683838]
[307.77416992 144.68159485]
[293.15762329 148.39738464]
[278.07620239 148.36062622]
[263.47793579 144.57362366]
[250.28048706 137.27442932]
[239.31346130 126.92188263]
[231.26625061 114.16675568]
[226.64472961 99.81083679]
[211.67239380 100.72151184]
[199.43833923 109.21723175]
[185.19387817 102.33203888]
[172.95983887 110.82775879]
[158.71537781 103.94256592]
[143.74304199 104.85324097]
[128.77070618 105.76391602]
[125.08704376 117.39513397]
[116.73713684 126.93702698]
[104.83209229 132.54199219]
[91.19994354 132.92863464]
[78.10635376 127.65177155]
[67.87815094 117.23851776]
[62.49205399 103.15769958]
[63.20103836 87.61849213]
[55.51393509 100.49903870]
[47.82683182 113.37958527]
[40.13972855 126.26013184]
[52.24081802 135.14317322]
[63.44271851 145.13627625]
[73.64397430 156.14895630]
[82.75220490 168.08146667]
[90.68492126 180.82575989]
[97.37027740 194.26638794]
[102.74773407 208.28166199]
[106.76859283 222.74462891]
[109.39643860 237.52432251]
[110.60746002 252.48687744]
[110.39070892 267.49679565]
[108.74813843 282.41815186]
[105.69461823 297.11578369]
[101.25781250 311.45663452]
[95.47789764 325.31076050]
[88.40721893 338.55276489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[48 164]
[49 163]
[50 162]
[51 161]
[73 82]
[74 81]
[75 80]
[104 112]
[105 111]
[115 153]
[116 152]
[117 151]
[119 149]
[121 147]
[122 146]
] def

init

% Start Annotations
48 164 0.16 0.2 colorpair
50 162 0.16 1 colorpair
75 80 0.16 0.2 colorpair
104 112 0.16 1 colorpair
115 153 0.16 0.2 colorpair
116 152 0.0 1 colorpair
119 149 0.0 1 colorpair
122 146 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
48 164 2 gmark
48 cmark
164 cmark
49 163 4 gmark
49 cmark
162 cmark
51 161 6 gmark
51 cmark
73 82 4 gmark
73 cmark
82 cmark
74 81 4 gmark
74 cmark
81 cmark
75 80 2 gmark
75 cmark
112 cmark
105 111 12 gmark
105 cmark
111 cmark
115 153 2 gmark
153 cmark
117 151 4 gmark
117 cmark
121 147 6 gmark
121 cmark

% End Annotations
showpage
end
%%EOF
