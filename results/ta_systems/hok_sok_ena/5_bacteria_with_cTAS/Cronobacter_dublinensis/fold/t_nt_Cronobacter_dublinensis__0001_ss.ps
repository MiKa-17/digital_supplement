%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:14:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGCCACUGCGUUAUUUACUGGCCUGUUUAUUAGUGGUCUGCGUAACUAUUUUGAUUUUUGCUUUAAUGAAUCGGGGUUGUUAUGCGAAUUUACCCUCAGAAGCGGCAACCAGGAGGUGGCAGCUAUGCUUUCCUGUAAGGACAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[209.46899414 448.87445068]
[203.32266235 437.59918213]
[201.91355896 424.78787231]
[205.48818970 412.35614014]
[213.54518127 402.17651367]
[206.72160339 388.81838989]
[199.89802551 375.46029663]
[193.07446289 362.10220337]
[186.25088501 348.74411011]
[179.42730713 335.38601685]
[172.60372925 322.02789307]
[165.35047913 322.71060181]
[158.13592529 321.54940796]
[151.42274475 318.60757446]
[145.64424133 314.06289673]
[141.17637634 308.19699097]
[138.31341553 301.37789917]
[137.24844360 294.03695679]
[138.06045532 286.64154053]
[140.70857239 279.66528320]
[145.03398132 273.55776978]
[150.76939392 268.71560669]
[146.22210693 254.42147827]
[141.67481995 240.12733459]
[137.12753296 225.83320618]
[121.91114807 213.96058655]
[126.35554504 194.33979797]
[121.22524261 180.24441528]
[116.09494019 166.14903259]
[110.96463776 152.05363464]
[105.83433533 137.95825195]
[100.70403290 123.86286163]
[86.59674835 119.75562286]
[77.56649017 108.16513062]
[77.03384399 93.48175812]
[85.20057678 81.26744080]
[80.07027435 67.17205811]
[74.15885925 60.12570953]
[74.98258972 52.73425293]
[70.14276886 38.53649902]
[65.30295563 24.33874702]
[47.33874130 10.99594021]
[52.02239609 -10.11247921]
[46.03409958 -23.86530876]
[40.04580307 -37.61813736]
[34.05750656 -51.37096786]
[28.06921005 -65.12379456]
[22.08091354 -78.87662506]
[16.09261703 -92.62945557]
[10.10432053 -106.38227844]
[-2.49896526 -115.94615936]
[-0.48595932 -130.70410156]
[-6.47425604 -144.45693970]
[-12.46255207 -158.20976257]
[-18.45084953 -171.96260071]
[-24.43914604 -185.71542358]
[-30.42744255 -199.46824646]
[-36.41573715 -213.22108459]
[-42.40403366 -226.97390747]
[-48.39233017 -240.72674561]
[-54.38063049 -254.47956848]
[-66.98391724 -264.04345703]
[-64.97090912 -278.80139160]
[-79.76835632 -284.35217285]
[-86.23059082 -298.77490234]
[-80.52367401 -313.51284790]
[-66.03343201 -319.82220459]
[-51.35665894 -313.95980835]
[-45.20082474 -299.40365601]
[-51.21807861 -284.78970337]
[-39.04311752 -276.20950317]
[-40.62779999 -260.46786499]
[-34.63950348 -246.71504211]
[-28.65120697 -232.96220398]
[-22.66291046 -219.20938110]
[-16.67461395 -205.45654297]
[-10.68631649 -191.70372009]
[-4.69801998 -177.95089722]
[1.29027641 -164.19805908]
[7.27857304 -150.44523621]
[13.26686954 -136.69239807]
[25.44183350 -128.11222839]
[23.85714912 -112.37057495]
[29.84544563 -98.61775208]
[35.83374405 -84.86492157]
[41.82204056 -71.11209106]
[47.81033707 -57.35926437]
[53.79863358 -43.60643387]
[59.78693008 -29.85360527]
[65.77522278 -16.10077667]
[73.68535614 -14.82140827]
[80.50574493 -10.43832111]
[85.06055450 -3.61756754]
[86.52912140 4.54760933]
[84.59288025 12.71176243]
[79.50070953 19.49893188]
[84.34052277 33.69668198]
[89.18033600 47.89443588]
[94.16566467 62.04175186]
[99.29596710 76.13713837]
[113.40325165 80.24437714]
[122.43350983 91.83486938]
[122.96615601 106.51824188]
[114.79942322 118.73255920]
[119.92972565 132.82794189]
[125.06002808 146.92333984]
[130.19033813 161.01872253]
[135.32063293 175.11412048]
[140.45094299 189.20950317]
[150.62780762 193.26347351]
[156.73912048 202.08821106]
[156.94555664 212.60008240]
[151.42166138 221.28591919]
[155.96894836 235.58004761]
[160.51623535 249.87417603]
[165.06352234 264.16830444]
[187.05044556 272.67532349]
[195.74116516 294.31542969]
[185.96183777 315.20434570]
[192.78540039 328.56243896]
[199.60897827 341.92053223]
[206.43255615 355.27862549]
[213.25613403 368.63671875]
[220.07971191 381.99484253]
[226.90328979 395.35293579]
[244.41807556 395.81921387]
[259.22888184 405.01312256]
[267.33505249 420.34594727]
[266.60025024 437.58541870]
[257.31460571 452.02377319]
[264.68084717 465.09048462]
[272.04708862 478.15716553]
[279.41333008 491.22387695]
[286.77957153 504.29055786]
[294.27957153 517.28094482]
[301.91253662 530.19366455]
[309.54550171 543.10632324]
[317.17846680 556.01904297]
[330.44342041 566.57733154]
[323.96984863 582.24670410]
[307.12078857 580.36383057]
[304.26577759 563.65197754]
[296.63281250 550.73931885]
[288.99984741 537.82659912]
[281.36685181 524.91387939]
[275.21783447 520.73040771]
[273.71286011 511.65679932]
[266.34661865 498.59008789]
[258.98037720 485.52340698]
[251.61415100 472.45672607]
[244.24790955 459.39001465]
[231.60639954 460.61886597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 125]
[6 124]
[7 123]
[8 122]
[9 121]
[10 120]
[11 119]
[22 116]
[23 115]
[24 114]
[25 113]
[27 109]
[28 108]
[29 107]
[30 106]
[31 105]
[32 104]
[36 100]
[37 99]
[39 98]
[40 97]
[41 96]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[63 70]
[130 151]
[131 150]
[132 149]
[133 148]
[134 147]
[135 145]
[136 144]
[137 143]
[138 142]
] def

init

% Start Annotations
5 125 0.0 1 colorpair
6 124 0.0 1 colorpair
7 123 0.0 1 colorpair
8 122 0.0 1 colorpair
9 121 0.0 1 colorpair
10 120 0.0 1 colorpair
11 119 0.0 1 colorpair
22 116 0.0 1 colorpair
23 115 0.0 1 colorpair
24 114 0.0 1 colorpair
25 113 0.0 1 colorpair
27 109 0.0 1 colorpair
28 108 0.0 1 colorpair
29 107 0.0 1 colorpair
30 106 0.0 1 colorpair
31 105 0.0 1 colorpair
32 104 0.0 1 colorpair
36 100 0.0 1 colorpair
37 99 0.0 1 colorpair
39 98 0.0 1 colorpair
40 97 0.0 1 colorpair
41 96 0.0 1 colorpair
43 90 0.0 1 colorpair
44 89 0.0 1 colorpair
45 88 0.0 1 colorpair
46 87 0.0 1 colorpair
47 86 0.0 1 colorpair
48 85 0.0 1 colorpair
49 84 0.0 1 colorpair
50 83 0.0 1 colorpair
52 81 0.0 1 colorpair
53 80 0.0 1 colorpair
54 79 0.0 1 colorpair
55 78 0.0 1 colorpair
56 77 0.0 1 colorpair
57 76 0.0 1 colorpair
58 75 0.0 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
61 72 0.0 1 colorpair
63 70 0.0 1 colorpair
130 151 0.0 1 colorpair
131 150 0.0 1 colorpair
132 149 0.0 1 colorpair
133 148 0.0 1 colorpair
134 147 0.0 1 colorpair
135 145 0.0 1 colorpair
136 144 0.0 1 colorpair
137 143 0.0 1 colorpair
138 142 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
