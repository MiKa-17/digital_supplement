%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGCAUUAACCGAAAGGCAGAUAGAGAAAAGCCCCAAA____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[213.21382141 66.24198914]
[199.21377563 71.62702942]
[185.21372986 77.01206970]
[180.06886292 82.38107300]
[170.87277222 82.36096954]
[156.76579285 87.45930481]
[142.65881348 92.55764771]
[128.55183411 97.65599060]
[125.91371918 112.21395874]
[116.36400604 123.51426697]
[102.44975281 128.54295349]
[87.88211823 125.95878601]
[76.54650879 116.45099640]
[62.43952560 121.54933167]
[48.33254242 126.64767456]
[34.22555923 131.74601746]
[20.11857986 136.84434509]
[6.01159716 141.94268799]
[-8.09538460 147.04103088]
[-22.20236588 152.13937378]
[-36.30934906 157.23771667]
[-50.41632843 162.33604431]
[-57.52684021 178.28761292]
[-73.64669800 184.07597351]
[-88.67697906 176.59159851]
[-102.67703247 181.97663879]
[-116.67707825 187.36167908]
[-126.56237793 200.44650269]
[-142.80130005 198.15975952]
[-148.68864441 182.85383606]
[-138.16799927 170.27415466]
[-122.06211853 173.36163330]
[-108.06207275 167.97659302]
[-94.06201935 162.59155273]
[-90.51046753 150.16911316]
[-80.28828430 141.95245361]
[-67.00361633 141.13044739]
[-55.51466751 148.22906494]
[-41.40768814 143.13072205]
[-27.30070496 138.03239441]
[-13.19372368 132.93405151]
[0.91325778 127.83570862]
[15.02023983 122.73737335]
[29.12722206 117.63903046]
[43.23420334 112.54069519]
[57.34118652 107.44235229]
[71.44816589 102.34400940]
[74.08628082 87.78604126]
[83.63599396 76.48573303]
[97.55024719 71.45704651]
[112.11788177 74.04121399]
[123.45349121 83.54900360]
[137.56047058 78.45066833]
[151.66744995 73.35232544]
[165.77444458 68.25399017]
[179.82868958 63.01202393]
[193.82873535 57.62698364]
[207.82878113 52.24194336]
[203.35008240 37.92073822]
[199.79815674 23.34200287]
[197.18759155 8.56564903]
[195.52912903 -6.34760523]
[194.82955933 -21.33647728]
[195.09178162 -36.33937454]
[196.31469727 -51.29464340]
[198.49330139 -66.14083862]
[201.61862183 -80.81694031]
[205.67782593 -95.26264954]
[210.65423584 -109.41860199]
[216.52740479 -123.22663116]
[223.27317810 -136.62998962]
[230.86386108 -149.57360840]
[239.26826477 -162.00428772]
[248.45181274 -173.87095642]
[258.37680054 -185.12484741]
[269.00247192 -195.71972656]
[280.28509521 -205.61204529]
[292.17834473 -214.76115417]
[304.63336182 -223.12945557]
[317.59893799 -230.68255615]
[331.02178955 -237.38945007]
[344.84680176 -243.22253418]
[359.01712036 -248.15786743]
[373.47454834 -252.17515564]
[388.15966797 -255.25790405]
[403.01211548 -257.39343262]
[417.97085571 -258.57296753]
[432.97445679 -258.79168701]
[447.96124268 -258.04864502]
[462.86959839 -256.34692383]
[477.63833618 -253.69352722]
[492.20669556 -250.09933472]
[506.51486206 -245.57913208]
[520.50402832 -240.15147400]
[534.11663818 -233.83868408]
[547.29687500 -226.66668701]
[559.99053955 -218.66497803]
[572.14538574 -209.86640930]
[583.71154785 -200.30715942]
[594.64147949 -190.02648926]
[604.89031982 -179.06666565]
[614.41583252 -167.47271729]
[623.17895508 -155.29228210]
[631.14367676 -142.57540894]
[638.27728271 -129.37435913]
[644.55041504 -115.74338531]
[649.93731689 -101.73849487]
[654.41589355 -87.41724396]
[657.96765137 -72.83847046]
[660.57800293 -58.06208420]
[662.23632812 -43.14881134]
[662.93572998 -28.15993309]
[662.67333984 -13.15703869]
[661.45025635 1.79821897]
[659.27148438 16.64438629]
[656.14599609 31.32045364]
[652.08666992 45.76611710]
[647.11010742 59.92201614]
[641.23675537 73.72998047]
[634.49084473 87.13326263]
[626.90002441 100.07679749]
[618.49548340 112.50738525]
[609.31176758 124.37395477]
[599.38665771 135.62774658]
[588.76092529 146.22248840]
[577.47814941 156.11468506]
[565.58477783 165.26365662]
[553.12969971 173.63182068]
[540.16406250 181.18478394]
[526.74108887 187.89152527]
[512.91601562 193.72445679]
[498.74566650 198.65963745]
[484.28817749 202.67677307]
[469.60305786 205.75935364]
[454.75057983 207.89472961]
[439.79180908 209.07409668]
[424.78820801 209.29263306]
[409.80145264 208.54943848]
[394.89306641 206.84754944]
[380.12438965 204.19398499]
[365.55606079 200.59962463]
[351.24795532 196.07925415]
[337.25885010 190.65145874]
[323.64627075 184.33851624]
[310.46612549 177.16636658]
[297.77258301 169.16452026]
[285.61782837 160.36581421]
[274.05175781 150.80642700]
[263.12191772 140.52565002]
[252.87324524 129.56570435]
[243.34783936 117.97164917]
[234.58483887 105.79111481]
[226.62023926 93.07415771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[5 55]
[6 54]
[7 53]
[8 52]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[25 34]
[26 33]
[27 32]
] def

init

% Start Annotations
1 58 0.0 1 colorpair
2 57 0.0 1 colorpair
3 56 0.0 1 colorpair
5 55 0.0 1 colorpair
6 54 0.0 1 colorpair
7 53 0.0 1 colorpair
8 52 0.0 1 colorpair
13 47 0.0 1 colorpair
14 46 0.0 1 colorpair
15 45 0.16 1 colorpair
16 44 0.0 1 colorpair
17 43 0.16 1 colorpair
18 42 0.0 1 colorpair
19 41 0.0 1 colorpair
20 40 0.16 1 colorpair
21 39 0.16 1 colorpair
22 38 0.0 0.6 colorpair
25 34 0.16 1 colorpair
26 33 0.0 1 colorpair
27 32 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 cmark
45 cmark
17 cmark
20 cmark
21 cmark
39 cmark
22 38 1 gmark
34 cmark
27 32 1 gmark
27 cmark
32 cmark

% End Annotations
showpage
end
%%EOF
