%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 18:06:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGCAU_UAA__CCGAAAGGCAGAUAGAGAAAAGCCCC_AGU___________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[214.37368774 70.42783356]
[200.18386841 75.29085541]
[185.99404907 80.15386963]
[180.65618896 85.32640076]
[171.47138977 84.96914673]
[157.18710327 89.54727173]
[142.90281677 94.12539673]
[128.61854553 98.70352173]
[125.44888306 113.15507507]
[115.49160767 124.09796143]
[101.40247345 128.61354065]
[86.93927765 125.49743652]
[75.95958710 115.58076477]
[61.67530441 120.15888977]
[47.39101791 124.73701477]
[33.10673523 129.31513977]
[18.82245255 133.89326477]
[4.53816795 138.47138977]
[-9.74611568 143.04951477]
[-24.03039932 147.62763977]
[-38.31468201 152.20576477]
[-52.59896851 156.78388977]
[-60.29104233 172.46557617]
[-76.61501312 177.65699768]
[-91.36019897 169.62147522]
[-105.55001831 174.48449707]
[-109.13265991 189.49009705]
[-120.27502441 200.16020203]
[-135.42163086 203.09001160]
[-149.73925781 197.34465027]
[-158.65917969 184.75741577]
[-159.33511353 169.34486389]
[-151.55134583 156.02508545]
[-137.79165649 149.04837036]
[-122.44671631 150.64096069]
[-110.41304016 160.29466248]
[-96.22322083 155.43164062]
[-92.21550751 143.15138245]
[-81.69927979 135.31875610]
[-68.39588928 134.98588562]
[-57.17709351 142.49960327]
[-42.89281082 137.92147827]
[-28.60852623 133.34335327]
[-14.32424164 128.76522827]
[-0.03995764 124.18710327]
[14.24432659 119.60897827]
[28.52861023 115.03085327]
[42.81289291 110.45272827]
[57.09717941 105.87460327]
[71.38146210 101.29647827]
[74.55111694 86.84492493]
[84.50839233 75.90203857]
[98.59752655 71.38645935]
[113.06072235 74.50256348]
[124.04041290 84.41923523]
[138.32469177 79.84111023]
[152.60897827 75.26298523]
[166.89326477 70.68486023]
[181.13102722 65.96405029]
[195.32084656 61.10103226]
[209.51066589 56.23801041]
[205.56526184 41.76080704]
[202.55552673 27.06056404]
[200.49382019 12.19768810]
[199.38862610 -2.76674318]
[199.24447632 -17.77123833]
[200.06198120 -32.75414276]
[201.83775330 -47.65388107]
[204.56451416 -62.40923691]
[208.23104858 -76.95957184]
[212.82229614 -91.24508667]
[218.31939697 -105.20709229]
[224.69975281 -118.78820801]
[231.93714905 -131.93263245]
[240.00184631 -144.58633423]
[248.86070251 -156.69734192]
[258.47729492 -168.21586609]
[268.81216431 -179.09458923]
[279.82275391 -189.28880310]
[291.46389771 -198.75662231]
[303.68774414 -207.45912170]
[316.44403076 -215.36056519]
[329.68035889 -222.42846680]
[343.34234619 -228.63378906]
[357.37380981 -233.95103455]
[371.71716309 -238.35835266]
[386.31338501 -241.83763123]
[401.10256958 -244.37457275]
[416.02389526 -245.95875549]
[431.01608276 -246.58366394]
[446.01748657 -246.24673462]
[460.96646118 -244.94935608]
[475.80163574 -242.69685364]
[490.46197510 -239.49847412]
[504.88729858 -235.36737061]
[519.01831055 -230.32052612]
[532.79687500 -224.37867737]
[546.16650391 -217.56622314]
[559.07214355 -209.91117859]
[571.46081543 -201.44499207]
[583.28161621 -192.20243835]
[594.48596191 -182.22152710]
[605.02777100 -171.54324341]
[614.86376953 -160.21148682]
[623.95355225 -148.27281189]
[632.25970459 -135.77629089]
[639.74816895 -122.77326202]
[646.38812256 -109.31715393]
[652.15228271 -95.46327209]
[657.01696777 -81.26854706]
[660.96221924 -66.79129791]
[663.97180176 -52.09102249]
[666.03332520 -37.22812271]
[667.13836670 -22.26367950]
[667.28234863 -7.25918245]
[666.46466064 7.72371149]
[664.68872070 22.62343216]
[661.96185303 37.37875748]
[658.29510498 51.92904663]
[653.70373535 66.21451569]
[648.20648193 80.17646027]
[641.82592773 93.75750732]
[634.58843994 106.90184784]
[626.52355957 119.55546570]
[617.66461182 131.66636658]
[608.04785156 143.18479919]
[597.71289062 154.06340027]
[586.70214844 164.25749207]
[575.06091309 173.72517395]
[562.83697510 182.42755127]
[550.08062744 190.32884216]
[536.84417725 197.39660645]
[523.18212891 203.60177612]
[509.15060425 208.91886902]
[494.80722046 213.32601929]
[480.21093750 216.80514526]
[465.42175293 219.34191895]
[450.50039673 220.92593384]
[435.50820923 221.55067444]
[420.50683594 221.21357727]
[405.55783081 219.91603088]
[390.72271729 217.66336060]
[376.06237793 214.46482849]
[361.63711548 210.33357239]
[347.50616455 205.28656006]
[333.72763062 199.34455872]
[320.35812378 192.53195190]
[307.45254517 184.87677002]
[295.06396484 176.41043091]
[283.24328613 167.16775513]
[272.03906250 157.18672180]
[261.49734497 146.50833130]
[251.66148376 135.17645264]
[242.57185364 123.23768616]
[234.26580811 110.74106598]
[226.77751160 97.73795319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[5 58]
[6 57]
[7 56]
[8 55]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[25 37]
[26 36]
] def

init

% Start Annotations
1 61 0.0 1 colorpair
2 60 0.0 1 colorpair
3 59 0.0 1 colorpair
5 58 0.0 1 colorpair
6 57 0.0 1 colorpair
7 56 0.0 1 colorpair
8 55 0.0 1 colorpair
13 50 0.0 1 colorpair
14 49 0.0 1 colorpair
15 48 0.16 1 colorpair
16 47 0.0 1 colorpair
17 46 0.16 1 colorpair
18 45 0.0 1 colorpair
19 44 0.0 1 colorpair
20 43 0.16 1 colorpair
21 42 0.16 1 colorpair
22 41 0.0 0.6 colorpair
25 37 0.16 1 colorpair
26 36 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 cmark
48 cmark
17 cmark
20 cmark
21 cmark
22 41 1 gmark
37 cmark

% End Annotations
showpage
end
%%EOF
