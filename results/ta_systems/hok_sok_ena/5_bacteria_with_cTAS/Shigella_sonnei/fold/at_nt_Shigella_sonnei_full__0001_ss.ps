%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 18:06:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGCAUGAA_ACCGAAAGGCAGAUAGAGAAAAGCCCCAGU____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[214.00903320 69.04578400]
[199.87951660 74.08135223]
[185.75001526 79.11692047]
[180.47483826 84.35488129]
[171.28497314 84.10849762]
[157.05691528 88.85852051]
[142.82887268 93.60853577]
[128.60083008 98.35855865]
[125.60564423 112.84727478]
[115.78102875 123.90942383]
[101.74736786 128.59454346]
[87.24765778 125.65305328]
[76.14919281 115.86948395]
[61.92114639 120.61950684]
[47.69309998 125.36952972]
[33.46505356 130.11955261]
[19.23700714 134.86956787]
[5.00896072 139.61958313]
[-9.21908569 144.36961365]
[-23.44713211 149.11962891]
[-37.67517853 153.86964417]
[-42.53321457 170.04275513]
[-55.92823792 180.05125427]
[-72.48339081 180.12397766]
[-85.69835663 170.42965698]
[-99.82786560 175.46522522]
[-104.07562256 190.38957214]
[-116.30519104 199.94035339]
[-131.81405640 200.44508362]
[-144.63874817 191.70968628]
[-149.84790039 177.09310913]
[-145.43849182 162.21571350]
[-133.10603333 152.79817200]
[-117.59260559 152.46171570]
[-104.86343384 161.33572388]
[-90.73392487 156.30015564]
[-88.16014862 143.16758728]
[-79.35173798 132.94924927]
[-66.53764343 128.39526367]
[-53.04273224 130.80114746]
[-42.42519760 139.64160156]
[-28.19715309 134.89158630]
[-13.96910572 130.14155579]
[0.25894064 125.39154053]
[14.48698711 120.64151764]
[28.71503448 115.89150238]
[42.94308090 111.14147949]
[57.17112732 106.39146423]
[71.39917755 101.64144135]
[74.39435577 87.15272522]
[84.21897125 76.09057617]
[98.25263214 71.40544891]
[112.75234222 74.34694672]
[123.85080719 84.13051605]
[138.07885742 79.38049316]
[152.30690002 74.63047028]
[166.53494263 69.88045502]
[180.71444702 64.98741150]
[194.84394836 59.95184326]
[208.97346497 54.91627502]
[204.85194397 40.48822403]
[201.66329956 25.82574654]
[199.42063904 10.98909664]
[198.13317871 -3.96075630]
[197.80621338 -18.96238136]
[198.44107056 -33.95413208]
[200.03515625 -48.87440872]
[202.58190918 -63.66189194]
[206.07087708 -78.25582123]
[210.48771667 -92.59622955]
[215.81427002 -106.62417603]
[222.02865601 -120.28203583]
[229.10534668 -133.51367188]
[237.01525879 -146.26470947]
[245.72587585 -158.48275757]
[255.20141602 -170.11761475]
[265.40292358 -181.12145996]
[276.28851318 -191.44909668]
[287.81341553 -201.05805969]
[299.93029785 -209.90885925]
[312.58935547 -217.96516418]
[325.73858643 -225.19383240]
[339.32391357 -231.56517029]
[353.28958130 -237.05299377]
[367.57815552 -241.63476562]
[382.13088989 -245.29164124]
[396.88806152 -248.00860596]
[411.78897095 -249.77449036]
[426.77243042 -250.58204651]
[441.77682495 -250.42793274]
[456.74050903 -249.31280518]
[471.60202026 -247.24124146]
[486.30026245 -244.22174072]
[500.77484131 -240.26673889]
[514.96630859 -235.39245605]
[528.81628418 -229.61894226]
[542.26788330 -222.96990967]
[555.26586914 -215.47268677]
[567.75677490 -207.15808105]
[579.68933105 -198.06025696]
[591.01446533 -188.21661377]
[601.68560791 -177.66758728]
[611.65893555 -166.45652771]
[620.89349365 -154.62950134]
[629.35131836 -142.23512268]
[636.99768066 -129.32431030]
[643.80108643 -115.95011139]
[649.73364258 -102.16749573]
[654.77099609 -88.03309631]
[658.89233398 -73.60499573]
[662.08081055 -58.94248581]
[664.32330322 -44.10581207]
[665.61059570 -29.15594482]
[665.93743896 -14.15431690]
[665.30236816 0.83742791]
[663.70812988 15.75768375]
[661.16119385 30.54513931]
[657.67211914 45.13903046]
[653.25506592 59.47938538]
[647.92840576 73.50727844]
[641.71380615 87.16506958]
[634.63702393 100.39662170]
[626.72692871 113.14757538]
[618.01617432 125.36553192]
[608.54052734 137.00028992]
[598.33886719 148.00401306]
[587.45318604 158.33152771]
[575.92816162 167.94035339]
[563.81121826 176.79103088]
[551.15203857 184.84718323]
[538.00274658 192.07571411]
[524.41735840 198.44689941]
[510.45162964 203.93457031]
[496.16302490 208.51618958]
[481.61019897 212.17289734]
[466.85302734 214.88970947]
[451.95208740 216.65542603]
[436.96862793 217.46281433]
[421.96423340 217.30853271]
[407.00054932 216.19323730]
[392.13906860 214.12150574]
[377.44085693 211.10185242]
[362.96633911 207.14668274]
[348.77493286 202.27223206]
[334.92501831 196.49856567]
[321.47348022 189.84938049]
[308.47558594 182.35202026]
[295.98474121 174.03727722]
[284.05230713 164.93933105]
[272.72729492 155.09555054]
[262.05627441 144.54641724]
[252.08303833 133.33523560]
[242.84860229 121.50811768]
[234.39091492 109.11363983]
[226.74470520 96.20273590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 57]
[6 56]
[7 55]
[8 54]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[25 36]
[26 35]
] def

init

% Start Annotations
1 60 0.0 1 colorpair
2 59 0.0 1 colorpair
3 58 0.0 1 colorpair
5 57 0.0 1 colorpair
6 56 0.0 1 colorpair
7 55 0.0 1 colorpair
8 54 0.0 1 colorpair
13 49 0.0 1 colorpair
14 48 0.0 1 colorpair
15 47 0.16 1 colorpair
16 46 0.0 1 colorpair
17 45 0.16 1 colorpair
18 44 0.0 1 colorpair
19 43 0.0 1 colorpair
20 42 0.16 1 colorpair
21 41 0.16 1 colorpair
25 36 0.16 1 colorpair
26 35 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 cmark
47 cmark
17 cmark
20 cmark
21 cmark
36 cmark

% End Annotations
showpage
end
%%EOF
