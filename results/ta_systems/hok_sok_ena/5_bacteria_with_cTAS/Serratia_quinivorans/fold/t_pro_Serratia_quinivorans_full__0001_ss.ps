%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:55:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___CGGAGGGCAAACAUGCCGCGAAAACAGGUGUUACAAGCAUUAACAGUAGGAUGCAUAACAAUCUUGAUAUUCAUCUGGAUGAUAAGAGACUCACUGUGUGAGCUGACAAUCAAACAGGAAAAUACCAAGAUAGCGACAAGGUUAGCCUGUAACGU_______\
) } def
/len { sequence length } bind def

/coor [
[46.13180542 209.66140747]
[38.74057770 205.71041870]
[31.63760948 201.26199341]
[24.85631752 196.33709717]
[18.42861176 190.95887756]
[12.38473988 185.15264893]
[6.75313854 178.94575500]
[1.56030869 172.36737061]
[-3.16931510 165.44845581]
[-7.41347790 158.22158813]
[-21.01475334 164.54656982]
[-34.61602783 170.87153625]
[-35.12983704 184.87402344]
[-41.60425568 197.22567749]
[-52.72130585 205.53524780]
[-66.27064514 208.22196960]
[-79.58892059 204.81599426]
[-90.08328247 196.03941345]
[-103.80181885 202.10586548]
[-117.52035522 208.17231750]
[-115.53715515 223.14707947]
[-117.85453796 238.07377625]
[-124.28463745 251.74238586]
[-134.30618286 263.04483032]
[-147.10679626 271.06484985]
[-161.64877319 275.15237427]
[-176.75325012 274.97595215]
[-191.19580078 270.54995728]
[-203.80561829 262.23315430]
[-213.56048584 250.69976807]
[-219.66961670 236.88473511]
[-221.63775635 221.90797424]
[-219.30538940 206.98361206]
[-212.86155701 193.32148743]
[-202.82865906 182.02911377]
[-190.02000427 174.02192688]
[-175.47393799 169.94903564]
[-160.36962891 170.14060974]
[-145.93153381 174.58111572]
[-133.33007812 182.91058350]
[-123.58680725 194.45378113]
[-109.86827087 188.38732910]
[-96.14973450 182.32087708]
[-94.82240295 166.23686218]
[-85.52182007 152.93307495]
[-70.70169830 146.08413696]
[-54.35562515 147.63964844]
[-40.94100571 157.27026367]
[-27.33972931 150.94528198]
[-13.73845482 144.62031555]
[-18.39723969 130.15794373]
[-21.22491837 115.22917175]
[-22.17775726 100.06486511]
[-21.24102020 84.89955139]
[-18.42919350 69.96778107]
[-13.78576756 55.50047684]
[-7.38255405 41.72139740]
[0.68141598 28.84364128]
[10.28142643 17.06637573]
[21.26900482 6.57174444]
[33.47422028 -2.47794509]
[46.70831299 -9.94273186]
[60.76660156 -15.70716763]
[75.43166351 -19.68210030]
[90.47669983 -21.80605507]
[105.66901398 -22.04618263]
[120.77365875 -20.39876938]
[135.55702209 -16.88929367]
[149.79046631 -11.57203197]
[163.25386047 -4.52922106]
[171.79278564 -16.86156082]
[180.33172607 -29.19390106]
[188.87065125 -41.52624130]
[197.40959167 -53.85858154]
[194.79023743 -69.21360779]
[203.62561035 -81.59870911]
[218.28041077 -84.00123596]
[226.81935120 -96.33358002]
[235.35829163 -108.66591644]
[243.89721680 -120.99826050]
[233.75219727 -132.12860107]
[226.34207153 -145.23121643]
[222.03569031 -159.64738464]
[221.04591370 -174.65318298]
[223.41920471 -189.49580383]
[229.03335571 -203.43139648]
[237.60380554 -215.76222229]
[248.69810486 -225.87170410]
[261.75765991 -233.25521851]
[276.12591553 -237.54525757]
[291.08139038 -238.52972412]
[305.87374878 -236.16247559]
[319.76168823 -230.56539917]
[328.30062866 -242.89775085]
[336.83956909 -255.23008728]
[345.37850952 -267.56243896]
[343.93588257 -283.54049683]
[355.62768555 -294.52597046]
[371.48501587 -292.09173584]
[379.34341431 -278.10516357]
[373.17465210 -263.29550171]
[357.71084595 -259.02349854]
[349.17190552 -246.69114685]
[340.63296509 -234.35881042]
[332.09402466 -222.02647400]
[342.22003174 -210.99624634]
[349.64105225 -197.98291016]
[353.98208618 -183.63751221]
[355.02233887 -168.67858887]
[352.70645142 -153.85614014]
[347.14739990 -139.91406250]
[338.62097168 -127.55274200]
[327.55215454 -117.39398193]
[314.49389648 -109.94963837]
[300.09951782 -105.59584808]
[285.08999634 -104.55404663]
[270.21789551 -106.87969208]
[256.22955322 -112.45932770]
[247.69062805 -100.12698364]
[239.15168762 -87.79464722]
[230.61276245 -75.46230316]
[233.52062988 -60.89934158]
[225.03662109 -48.27095795]
[209.74192810 -45.31964874]
[201.20300293 -32.98730850]
[192.66406250 -20.65496826]
[184.12513733 -8.32262802]
[175.58619690 4.00971222]
[192.20167542 19.83603859]
[205.56483459 38.49005508]
[215.20433044 59.31375885]
[220.78013611 81.57262421]
[222.09555054 104.48149109]
[219.10420227 127.23227692]
[211.91159058 149.02247620]
[200.77143860 169.08348083]
[212.59936523 178.30845642]
[224.42729187 187.53343201]
[236.25520325 196.75840759]
[248.08312988 205.98338318]
[264.29122925 210.95671082]
[263.99911499 227.90814209]
[247.62927246 232.32005310]
[238.85815430 217.81130981]
[227.03022766 208.58633423]
[215.20230103 199.36135864]
[203.37438965 190.13636780]
[191.54646301 180.91139221]
[185.78410339 186.99710083]
[179.61808777 192.67344666]
[173.07743835 197.91372681]
[166.19291687 202.69326782]
[158.99693298 206.98957825]
[151.52333069 210.78247070]
[143.80729675 214.05406189]
[135.88511658 216.78898621]
[127.79409027 218.97434998]
[119.57227325 220.59989929]
[111.25836182 221.65795898]
[102.89147949 222.14355469]
[94.51098633 222.05441284]
[86.15631866 221.39094543]
[77.86679840 220.15626526]
[69.68141937 218.35621643]
[61.63871002 215.99922180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 50]
[11 49]
[12 48]
[18 43]
[19 42]
[20 41]
[70 128]
[71 127]
[72 126]
[73 125]
[74 124]
[77 121]
[78 120]
[79 119]
[80 118]
[93 105]
[94 104]
[95 103]
[96 102]
[136 148]
[137 147]
[138 146]
[139 145]
[140 144]
] def

init

% Start Annotations
10 50 0.0 1 colorpair
11 49 0.0 1 colorpair
12 48 0.16 1 colorpair
18 43 0.0 1 colorpair
19 42 0.16 1 colorpair
20 41 0.16 1 colorpair
70 128 0.16 1 colorpair
71 127 0.0 1 colorpair
72 126 0.0 1 colorpair
73 125 0.0 1 colorpair
74 124 0.0 1 colorpair
77 121 0.0 1 colorpair
78 120 0.16 1 colorpair
79 119 0.0 1 colorpair
80 118 0.0 1 colorpair
93 105 0.0 1 colorpair
94 104 0.0 1 colorpair
95 103 0.0 1 colorpair
96 102 0.0 1 colorpair
136 148 0.16 1 colorpair
137 147 0.16 1 colorpair
138 146 0.0 1 colorpair
139 145 0.16 1 colorpair
140 144 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 cmark
48 cmark
19 cmark
42 cmark
20 cmark
41 cmark
70 cmark
128 cmark
78 cmark
136 cmark
148 cmark
137 cmark
147 cmark
139 cmark
140 cmark

% End Annotations
showpage
end
%%EOF
