%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:14:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCCACUACGCUAUCUGUUUGCGUGUUUAUUAGUUAUUUGCGUAACAGUACUGUUUUUUUCUUUAUUUAAUCGCGGUCUGCUUUGCGAAUUAAGAAUAAAGAACGGAAAUCAGGAGGUGGCGGCGAAAUUAGCCUGCACUCAACAGUAA\
) } def
/len { sequence length } bind def

/coor [
[133.21141052 353.76571655]
[146.29516602 346.42980957]
[160.85507202 342.82296753]
[175.85025024 343.20303345]
[190.20874023 347.54284668]
[202.90080261 355.52941895]
[196.11822510 342.15045166]
[189.33563232 328.77148438]
[182.55305481 315.39251709]
[175.77047729 302.01358032]
[168.98789978 288.63461304]
[161.74400330 288.17483521]
[155.06027222 285.17291260]
[149.80740356 279.96725464]
[146.68803406 273.18652344]
[146.14294434 265.67401123]
[148.28944397 258.38269043]
[152.90036011 252.25439453]
[147.51530457 238.25434875]
[142.13026428 224.25430298]
[136.74522400 210.25425720]
[131.21766663 196.30986023]
[125.54817200 182.42257690]
[119.87866974 168.53527832]
[107.90484619 159.67657471]
[109.85218048 143.97566223]
[104.18267822 130.08837891]
[98.51318359 116.20109558]
[85.00119019 106.30252075]
[87.38728333 89.72354889]
[81.43568420 75.95480347]
[75.48407745 62.18605423]
[69.53247833 48.41730499]
[63.58087921 34.64855576]
[57.62927628 20.87980652]
[42.44821167 19.01365089]
[30.31959534 9.85977459]
[24.44039154 -4.04351091]
[26.29730988 -18.92329025]
[35.29227829 -30.79578400]
[29.34067917 -44.56453323]
[23.38907814 -58.33328247]
[17.43747520 -72.10202789]
[11.48587513 -85.87078094]
[5.53427362 -99.63952637]
[-0.41732755 -113.40827942]
[-15.42042828 -116.90300751]
[-25.37259293 -128.42723083]
[-26.61585426 -143.42451477]
[-18.88228416 -156.12608337]
[-24.83388519 -169.89483643]
[-30.78548622 -183.66357422]
[-37.10074997 -190.34832764]
[-36.71487808 -197.77441406]
[-42.38438034 -211.66171265]
[-48.05387878 -225.54899597]
[-53.72338104 -239.43627930]
[-59.39287949 -253.32357788]
[-73.68721771 -259.51306152]
[-79.23906708 -273.67749023]
[-73.25025177 -287.26681519]
[-78.91975403 -301.15411377]
[-94.14749908 -303.15695190]
[-106.32391357 -312.51806641]
[-112.17360687 -326.71936035]
[-110.12303925 -341.94076538]
[-100.72380066 -354.08776855]
[-86.50424194 -359.89291382]
[-71.28935242 -357.79464722]
[-59.17186356 -348.35739136]
[-53.41131210 -334.11968994]
[-55.55726242 -318.91146851]
[-65.03246307 -306.82360840]
[-59.36296463 -292.93630981]
[-45.57466507 -287.42102051]
[-39.62715912 -273.41812134]
[-45.50559235 -258.99307251]
[-39.83609390 -245.10578918]
[-34.16659164 -231.21849060]
[-28.49709129 -217.33120728]
[-22.82759094 -203.44392395]
[-17.01673889 -189.61518860]
[-11.06513691 -175.84643555]
[-5.11353588 -162.07768250]
[9.43700409 -159.00851440]
[19.50935745 -147.82765198]
[21.08507347 -132.68266296]
[13.35142136 -119.35987854]
[19.30302238 -105.59112549]
[25.25462341 -91.82238007]
[31.20622444 -78.05363464]
[37.15782547 -64.28488159]
[43.10942841 -50.51613235]
[49.06102753 -36.74738312]
[63.87189865 -35.16506958]
[75.98272705 -26.32290840]
[82.08192444 -12.51471710]
[80.43988037 2.59158850]
[71.39802551 14.92820454]
[77.34962463 28.69695282]
[83.30123138 42.46570206]
[89.25283051 56.23445129]
[95.20442963 70.00319672]
[101.15602875 83.77194977]
[111.73525238 88.73191071]
[116.26160431 99.50377655]
[112.40046692 110.53159332]
[118.06996918 124.41888428]
[123.73947144 138.30616760]
[136.11882019 148.15818787]
[133.76596069 162.86578369]
[139.43545532 176.75306702]
[145.10496521 190.64036560]
[151.28254700 197.45252991]
[150.74528503 204.86921692]
[156.13032532 218.86926270]
[161.51536560 232.86930847]
[166.90040588 246.86935425]
[186.18569946 259.73092651]
[182.36686707 281.85202026]
[189.14944458 295.23098755]
[195.93202209 308.60995483]
[202.71459961 321.98892212]
[209.49717712 335.36785889]
[216.27975464 348.74682617]
[225.75123596 360.37829590]
[237.47871399 369.73065186]
[249.20617676 379.08300781]
[264.49682617 375.80734253]
[278.29144287 383.17233276]
[284.07659912 397.70043945]
[279.12075806 412.53192139]
[265.76388550 420.66384888]
[250.31269836 418.25653076]
[240.06278992 406.44665527]
[239.85383606 390.81048584]
[228.12635803 381.45812988]
[216.39889526 372.10577393]
[221.64953613 386.15676880]
[222.98937988 401.09683228]
[220.32260132 415.85784912]
[213.83987427 429.38467407]
[204.00463867 440.71020508]
[191.51997375 449.02484131]
[177.27841187 453.73419189]
[162.29804993 454.50155640]
[147.64982605 451.27212524]
[134.38088989 444.27670288]
[123.43984985 434.01544189]
[115.60884857 421.22189331]
[111.44771576 406.81060791]
[111.25391388 391.81185913]
[115.04131317 377.29788208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[18 118]
[19 117]
[20 116]
[21 115]
[22 113]
[23 112]
[24 111]
[26 109]
[27 108]
[28 107]
[30 104]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[50 84]
[51 83]
[52 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[61 74]
[62 73]
[126 138]
[127 137]
[128 136]
] def

init

% Start Annotations
6 125 0.0 1 colorpair
7 124 0.0 1 colorpair
8 123 0.0 1 colorpair
9 122 0.0 1 colorpair
10 121 0.0 1 colorpair
11 120 0.0 1 colorpair
18 118 0.0 1 colorpair
19 117 0.0 1 colorpair
20 116 0.0 1 colorpair
21 115 0.0 1 colorpair
22 113 0.0 1 colorpair
23 112 0.0 1 colorpair
24 111 0.0 1 colorpair
26 109 0.0 1 colorpair
27 108 0.0 1 colorpair
28 107 0.0 1 colorpair
30 104 0.0 1 colorpair
31 103 0.0 1 colorpair
32 102 0.0 1 colorpair
33 101 0.0 1 colorpair
34 100 0.0 1 colorpair
35 99 0.16 1 colorpair
40 94 0.16 1 colorpair
41 93 0.0 1 colorpair
42 92 0.0 1 colorpair
43 91 0.0 1 colorpair
44 90 0.0 1 colorpair
45 89 0.0 1 colorpair
46 88 0.0 1 colorpair
50 84 0.0 1 colorpair
51 83 0.0 1 colorpair
52 82 0.0 1 colorpair
54 81 0.16 1 colorpair
55 80 0.0 1 colorpair
56 79 0.0 1 colorpair
57 78 0.0 1 colorpair
58 77 0.0 1 colorpair
61 74 0.0 1 colorpair
62 73 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
99 cmark
40 cmark
54 cmark

% End Annotations
showpage
end
%%EOF
