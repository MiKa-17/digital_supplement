%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:50:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCCGCAAAAAAUCGCAAUAUUUAGUUUGAUUAUUAUUUGUGUGACGUUACUCAUAUUCACGUGGAUAACAAGGGGCUCACUCUGUAAGCUCCACAUCAAACGAGGUAAUACAGAGGUUGCGGCAAUCAUGGCUUACGAAUCCAGCAAUAG\
) } def
/len { sequence length } bind def

/coor [
[294.61569214 547.74499512]
[288.45950317 534.06646729]
[282.30331421 520.38800049]
[276.14712524 506.70947266]
[261.38223267 497.26980591]
[263.31115723 478.98367310]
[256.88076782 465.43191528]
[250.45037842 451.88015747]
[244.01998901 438.32839966]
[237.58959961 424.77664185]
[231.15921021 411.22488403]
[224.72882080 397.67312622]
[213.34201050 396.24609375]
[203.97680664 389.40777588]
[199.04920959 378.77801514]
[199.89997864 366.97204590]
[206.43208313 356.95721436]
[200.55258179 343.15753174]
[184.49395752 341.61456299]
[171.31921387 332.14260864]
[164.66569519 317.24050903]
[166.42863464 300.92181396]
[176.22248840 287.63369751]
[170.06629944 273.95520020]
[163.91011047 260.27670288]
[157.75392151 246.59822083]
[151.59771729 232.91972351]
[139.31864929 224.48921204]
[140.71052551 208.72933960]
[134.55432129 195.05084229]
[128.39813232 181.37234497]
[122.24194336 167.69384766]
[116.08575439 154.01535034]
[109.92955780 140.33685303]
[103.77336884 126.65836334]
[85.76035309 122.85035706]
[74.40586090 108.35742188]
[75.01931000 89.95652008]
[63.21155548 80.70573425]
[51.40380478 71.45494843]
[39.59605026 62.20416641]
[27.78829956 52.95338440]
[15.98054790 43.70260239]
[4.17279530 34.45182037]
[-7.63495684 25.20103455]
[-19.44270897 15.95025253]
[-31.25046158 6.69946909]
[-43.05821228 -2.55131388]
[-54.86596680 -11.80209732]
[-68.53706360 -5.01505566]
[-83.79917908 -4.84039497]
[-97.62201691 -11.31279278]
[-107.26103973 -23.14715004]
[-110.80240631 -37.99374771]
[-107.54298401 -52.90478134]
[-98.12993622 -64.91965485]
[-84.43222046 -71.65280914]
[-69.16953278 -71.76736450]
[-55.37228775 -65.24058533]
[-45.77994537 -53.36835861]
[-42.29706955 -38.50793076]
[-45.61518097 -23.60984993]
[-33.80743027 -14.35906601]
[-21.99967766 -5.10828304]
[-10.19192600 4.14249992]
[1.61582625 13.39328289]
[13.42357826 22.64406586]
[25.23133087 31.89484978]
[37.03908157 41.14563370]
[48.84683609 50.39641571]
[60.65458679 59.64719772]
[72.46234131 68.89797974]
[84.27008820 78.14876556]
[88.33986664 75.73175049]
[92.77002716 74.06481171]
[97.42364502 73.19946289]
[102.15689087 73.16244507]
[107.47596741 59.13720322]
[112.79503632 45.11195755]
[118.11411285 31.08671570]
[123.43318176 17.06147194]
[128.75225830 3.03622746]
[126.41136169 -12.61084175]
[138.15901184 -21.76736450]
[143.47808838 -35.79260635]
[143.44129944 -52.74651337]
[159.72245789 -57.47517776]
[168.77339172 -43.13932037]
[157.50334167 -30.47353363]
[152.18426514 -16.44828987]
[154.90560913 -1.80439985]
[142.77749634 8.35530090]
[137.45843506 22.38054466]
[132.13935852 36.40578842]
[126.82028198 50.43103027]
[121.50120544 64.45627594]
[116.18213654 78.48152161]
[125.48170471 91.30580139]
[125.96015930 107.13979340]
[117.45186615 120.50216675]
[123.60805511 134.18066406]
[129.76425171 147.85916138]
[135.92044067 161.53765869]
[142.07662964 175.21615601]
[148.23281860 188.89465332]
[154.38902283 202.57315063]
[167.10842896 211.98204041]
[165.27621460 226.76353455]
[171.43241882 240.44203186]
[177.58860779 254.12052917]
[183.74479675 267.79901123]
[189.90098572 281.47750854]
[203.90316772 282.16607666]
[216.17813110 288.79980469]
[224.34812927 300.02865601]
[226.85870361 313.61898804]
[223.27424622 326.89767456]
[214.35227966 337.27801514]
[220.23178101 351.07769775]
[238.03430176 357.42486572]
[245.47222900 374.45367432]
[238.28057861 391.24273682]
[244.71096802 404.79449463]
[251.14135742 418.34625244]
[257.57174683 431.89801025]
[264.00213623 445.44976807]
[270.43252563 459.00152588]
[276.86291504 472.55328369]
[288.75973511 477.63226318]
[293.82281494 489.09820557]
[289.82562256 500.55328369]
[295.98181152 514.23181152]
[302.13800049 527.91027832]
[308.29418945 541.58880615]
[328.26181030 553.36474609]
[325.66049194 575.66210938]
[333.16049194 588.65246582]
[340.66049194 601.64282227]
[356.07492065 602.27416992]
[368.68789673 611.15765381]
[374.47467041 625.45861816]
[371.58868408 640.61364746]
[360.95086670 651.78680420]
[345.95568848 655.41284180]
[331.38806152 650.33465576]
[321.89645386 638.17272949]
[320.50964355 622.80780029]
[327.67010498 609.14282227]
[320.17010498 596.15246582]
[312.67010498 583.16210938]
[305.41931152 583.09686279]
[298.58856201 580.46697998]
[293.06378174 575.56207275]
[289.57934570 568.96990967]
[288.62081909 561.50640869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[17 119]
[18 118]
[23 112]
[24 111]
[25 110]
[26 109]
[27 108]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[34 101]
[35 100]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[84 90]
[85 89]
[136 150]
[137 149]
[138 148]
] def

init

% Start Annotations
1 134 0.0 1 colorpair
2 133 0.0 1 colorpair
3 132 0.0 1 colorpair
4 131 0.0 1 colorpair
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
8 126 0.0 1 colorpair
9 125 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
17 119 0.0 1 colorpair
18 118 0.0 1 colorpair
23 112 0.0 1 colorpair
24 111 0.0 1 colorpair
25 110 0.0 1 colorpair
26 109 0.0 1 colorpair
27 108 0.0 1 colorpair
29 106 0.0 1 colorpair
30 105 0.0 1 colorpair
31 104 0.0 1 colorpair
32 103 0.0 1 colorpair
33 102 0.0 1 colorpair
34 101 0.0 1 colorpair
35 100 0.0 1 colorpair
38 73 0.0 1 colorpair
39 72 0.0 1 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 1 colorpair
47 64 0.0 1 colorpair
48 63 0.0 1 colorpair
49 62 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.0 1 colorpair
80 94 0.0 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
136 150 0.0 1 colorpair
137 149 0.0 1 colorpair
138 148 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
