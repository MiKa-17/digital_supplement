%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AUGCUAACAAAAUAUGCCCUUGUGGCAAUCGUCGUACUGUGUAUUACGGUACUGGGAUUUACGCUUUUGGUGCGCAGCUCGCUGUGCGAACUCAGUAUUAAAGAGCGUAGUAUGGAGUUUAAAGCUGUUCUCGCUUACGAAUCGAAGAAAUAG\
) } def
/len { sequence length } bind def

/coor [
[77.42980957 248.12921143]
[86.13411713 235.91304016]
[98.11763000 226.89108276]
[112.26420593 221.90367126]
[127.25625610 221.41531372]
[141.69741821 225.47148132]
[154.24325562 233.69493103]
[147.88896179 220.10731506]
[141.53468323 206.51971436]
[128.68234253 210.67475891]
[115.42965698 213.28506470]
[101.96161652 214.31417847]
[88.46620178 213.74774170]
[75.13176727 211.59368896]
[62.14443207 207.88203430]
[49.68546677 202.66462708]
[37.92876816 196.01428223]
[27.03843498 188.02380371]
[17.16646385 178.80471802]
[8.45064735 168.48573303]
[-4.12399435 176.66365051]
[-16.69863510 184.84156799]
[-21.41703796 200.17506409]
[-36.39925766 205.91203308]
[-50.15221405 197.65153503]
[-52.12582016 181.73034668]
[-40.80609131 170.36181641]
[-24.87655640 172.26692200]
[-12.30191612 164.08900452]
[0.27272534 155.91108704]
[-6.08406067 142.63508606]
[-10.68250847 128.65242004]
[-13.44639874 114.19483948]
[-14.32992077 99.50197601]
[-13.31842995 84.81736755]
[-28.02289009 81.85445404]
[-42.72735214 78.89154816]
[-57.43181229 75.92863464]
[-72.13626862 72.96572113]
[-86.84072876 70.00281525]
[-98.16981506 80.60617828]
[-113.57187653 82.49200439]
[-127.12448883 74.93514252]
[-133.61642456 60.84136581]
[-130.55137634 45.63002014]
[-119.10792542 35.15017319]
[-103.68631744 33.43154526]
[-90.21647644 41.13497925]
[-83.87782288 55.29835129]
[-69.17336273 58.26126480]
[-54.46889877 61.22417450]
[-39.76443863 64.18708801]
[-25.05997849 67.14999390]
[-10.35551834 70.11290741]
[-5.33463955 55.54561234]
[1.59940183 41.78573227]
[10.32066441 29.08317757]
[20.67074776 17.66866684]
[32.46166229 7.74951553]
[45.47925949 -0.49411723]
[59.48709869 -6.91250467]
[74.23076630 -11.38907146]
[89.44246674 -13.84251118]
[104.84592438 -14.22826195]
[120.16136169 -12.53931808]
[135.11062622 -8.80635548]
[140.64358521 -22.74860764]
[146.17654419 -36.69085693]
[136.93605042 -50.82693100]
[137.91212463 -67.52088165]
[148.52447510 -80.22912598]
[164.45449829 -84.08805084]
[169.70916748 -98.13755035]
[174.96382141 -112.18705750]
[164.48983765 -123.23500061]
[159.87013245 -137.67608643]
[161.96997070 -152.62971497]
[170.31982422 -165.13735962]
[183.21899414 -172.74792480]
[198.08178711 -173.99803162]
[203.33645630 -188.04754639]
[200.92378235 -203.68370056]
[212.62930298 -212.89402771]
[217.88397217 -226.94352722]
[223.13862610 -240.99304199]
[228.39329529 -255.04254150]
[228.27870178 -271.99609375]
[244.53799438 -276.79940796]
[253.65461731 -262.50524902]
[242.44279480 -249.78787231]
[237.18812561 -235.73837280]
[231.93347168 -221.68887329]
[226.67880249 -207.63937378]
[229.46731567 -193.00811768]
[217.38595581 -182.79287720]
[212.13128662 -168.74337769]
[222.52587891 -158.04673767]
[227.26487732 -143.83929443]
[225.35755920 -128.92208862]
[217.12905884 -116.26064301]
[204.16656494 -108.39547729]
[189.01332092 -106.93238831]
[183.75866699 -92.88288879]
[178.50399780 -78.83338928]
[186.88688660 -68.40387726]
[189.02513123 -55.08514404]
[184.25207520 -42.35267639]
[173.71884155 -33.58289719]
[160.11878967 -31.15789986]
[154.58583069 -17.21564865]
[149.05287170 -3.27339697]
[162.71588135 4.40555763]
[175.20031738 13.88094425]
[186.27156067 24.97470093]
[195.72158813 37.47834778]
[203.37278748 51.15691757]
[209.08137512 65.75335693]
[212.74008179 80.99337006]
[214.28015137 96.59055328]
[213.67265320 112.25181580]
[210.92898560 127.68283081]
[206.10070801 142.59362793]
[199.27857971 156.70399475]
[190.59077454 169.74877930]
[180.20056152 181.48281860]
[168.30320740 191.68560791]
[155.12228394 200.16542053]
[161.47657776 213.75303650]
[167.83085632 227.34063721]
[175.93452454 233.05940247]
[177.77868652 241.68205261]
[188.27931213 252.39358521]
[198.77995300 263.10510254]
[209.28057861 273.81661987]
[224.60966492 271.40859985]
[238.41120911 278.50061035]
[245.37825012 292.36566162]
[242.83180237 307.67239380]
[231.75103760 318.53497314]
[216.39672852 320.77661133]
[202.67292786 313.53527832]
[195.85670471 299.59542847]
[198.56904602 284.31726074]
[188.06842041 273.60574341]
[177.56779480 262.89422607]
[167.06715393 252.18269348]
[170.37451172 266.81353760]
[169.11500549 281.76055908]
[163.40591431 295.63162231]
[153.77902222 307.13479614]
[141.13093567 315.19863892]
[126.63970184 319.07217407]
[111.65501404 318.39453125]
[97.57254028 313.22891235]
[85.70389557 304.05636597]
[77.15453339 291.73126221]
[72.72071838 277.40151978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 129]
[8 128]
[9 127]
[20 30]
[21 29]
[22 28]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[66 111]
[67 110]
[68 109]
[72 104]
[73 103]
[74 102]
[80 96]
[81 95]
[83 93]
[84 92]
[85 91]
[86 90]
[131 146]
[132 145]
[133 144]
[134 143]
] def

init

% Start Annotations
7 129 0.0 1 colorpair
8 128 0.0 1 colorpair
9 127 0.16 1 colorpair
20 30 0.16 1 colorpair
21 29 0.16 1 colorpair
22 28 0.16 1 colorpair
35 54 0.16 1 colorpair
36 53 0.16 1 colorpair
37 52 0.16 1 colorpair
38 51 0.0 1 colorpair
39 50 0.0 1 colorpair
40 49 0.16 1 colorpair
66 111 0.0 1 colorpair
67 110 0.16 1 colorpair
68 109 0.16 1 colorpair
72 104 0.0 1 colorpair
73 103 0.16 1 colorpair
74 102 0.16 1 colorpair
80 96 0.16 1 colorpair
81 95 0.16 1 colorpair
83 93 0.0 1 colorpair
84 92 0.0 1 colorpair
85 91 0.16 1 colorpair
86 90 0.0 1 colorpair
131 146 0.16 1 colorpair
132 145 0.16 1 colorpair
133 144 0.16 1 colorpair
134 143 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 cmark
127 cmark
20 cmark
30 cmark
21 cmark
29 cmark
22 cmark
28 cmark
35 cmark
53 cmark
37 cmark
52 cmark
40 cmark
49 cmark
67 cmark
110 cmark
68 cmark
103 cmark
102 cmark
80 cmark
81 cmark
95 cmark
91 cmark
131 cmark
146 cmark
145 cmark
133 cmark
144 cmark
134 cmark

% End Annotations
showpage
end
%%EOF
