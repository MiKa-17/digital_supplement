%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:55:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______GCCAUGUAUAAAAAACAUGCGCUCUACGCGUUACUGGCUGUAUGCAUUACGGUUUUGGUAUUAGUCUGGAUGAUUAAAGACCGCUUUUGCGGUCUGGAAAUCUACCA__________________________________\
) } def
/len { sequence length } bind def

/coor [
[100.63932800 225.15696716]
[94.89557648 211.30021667]
[91.18556213 196.76626587]
[89.58505249 181.85189819]
[90.12672424 166.86167908]
[92.79819489 152.10691833]
[96.94535828 137.69160461]
[86.39481354 148.35397339]
[75.84426880 159.01632690]
[65.40670776 169.78932190]
[55.08330154 180.67175293]
[44.75989532 191.55418396]
[34.43648911 202.43661499]
[24.11308289 213.31904602]
[26.06568336 228.83424377]
[17.54508972 241.94657898]
[2.57446861 246.46482849]
[-11.77751350 240.25558472]
[-18.73428726 226.25068665]
[-15.01107883 211.06280518]
[-2.36587214 201.86320496]
[13.23065281 202.99563599]
[23.55405998 192.11320496]
[33.87746811 181.23077393]
[44.20087433 170.34834290]
[54.52428055 159.46592712]
[56.86172485 152.40077209]
[65.18190002 148.46578979]
[75.73244476 137.80342102]
[86.28299713 127.14105988]
[85.88784027 119.65148163]
[70.90866089 120.44153595]
[70.11885834 105.46234131]
[85.09754181 104.67230988]
[84.70238495 97.18273163]
[73.08844757 87.68976593]
[55.75208664 89.77227783]
[42.51218033 78.91224670]
[41.21591949 62.17512894]
[29.40441704 52.92913437]
[17.59291458 43.68313980]
[5.78141356 34.43714523]
[-6.22239637 25.44222641]
[-18.41317749 16.70238304]
[-30.60395813 7.96253967]
[-42.79473877 -0.77730328]
[-54.98551941 -9.51714611]
[-67.17630005 -18.25699043]
[-79.36708069 -26.99683189]
[-95.36663055 -25.81618881]
[-106.15908051 -37.68643188]
[-103.46537781 -53.50172424]
[-89.35191345 -61.12993240]
[-74.64531708 -54.71934128]
[-70.62724304 -39.18761444]
[-58.43645859 -30.44777107]
[-46.24567795 -21.70792770]
[-34.05489731 -12.96808434]
[-21.86411476 -4.22824097]
[-9.67333412 4.51160192]
[2.51744676 13.25144482]
[7.35392332 13.35653400]
[12.15995502 16.54682922]
[15.02740765 22.62564278]
[26.83891106 31.87163734]
[38.65041351 41.11763000]
[50.46191406 50.36362457]
[62.94906616 47.02993393]
[75.25250244 51.58478546]
[82.77913666 62.56776047]
[82.58140564 76.07582092]
[94.19535065 85.56878662]
[109.18785095 85.09445953]
[120.17850494 74.88635254]
[131.16915894 64.67824554]
[142.15980530 54.47013092]
[142.90298462 38.91103745]
[154.19448853 28.71512794]
[169.02313232 29.51951218]
[180.01377869 19.31140137]
[191.00444031 9.10329247]
[201.99508667 -1.10481739]
[202.30061340 -18.56313515]
[214.86766052 -30.19519043]
[231.62493896 -29.19265747]
[242.39793396 -39.63021469]
[253.17092896 -50.06777191]
[263.94390869 -60.50532532]
[274.71691895 -70.94288635]
[285.48989868 -81.38043976]
[296.26290894 -91.81799316]
[300.23446655 -107.72896576]
[316.07189941 -111.98425293]
[327.48303223 -100.20639038]
[322.72906494 -84.51142883]
[306.70046997 -81.04499817]
[295.92745972 -70.60744476]
[285.15447998 -60.16988754]
[274.38146973 -49.73233032]
[263.60848999 -39.29477692]
[252.83549500 -28.85721970]
[242.06250000 -18.41966248]
[243.65892029 -5.59414673]
[237.46588135 5.97163630]
[225.55758667 11.92719936]
[212.20320129 9.88583755]
[201.21253967 20.09394646]
[190.22189331 30.30205727]
[179.23123169 40.51016617]
[178.94013977 55.35775375]
[167.93946838 65.86679840]
[152.36791992 65.46078491]
[141.37727356 75.66889954]
[130.38661194 85.87700653]
[119.39595795 96.08511353]
[133.93519592 92.39585876]
[146.77478027 84.64054871]
[160.58869934 78.79452515]
[175.09483337 74.97718811]
[189.99696350 73.26647949]
[204.99076843 73.69733429]
[219.77006531 76.26096344]
[234.03306580 80.90499878]
[247.48847961 87.53461456]
[259.86154175 96.01443481]
[270.89959717 106.17127991]
[280.37719727 117.79774475]
[288.10086060 130.65640259]
[293.91284180 144.48468018]
[297.69442749 159.00016785]
[299.36840820 173.90646362]
[298.90060425 188.89916992]
[296.30056763 203.67211914]
[291.62139893 217.92361450]
[284.95864868 231.36265564]
[276.44839478 243.71479797]
[266.26437378 254.72778320]
[254.61459351 264.17672729]
[241.73693848 271.86868286]
[227.89439392 277.64654541]
[213.36962891 281.39236450]
[198.45924377 283.02963257]
[183.46774292 282.52487183]
[168.70124817 279.88845825]
[154.46131897 275.17419434]
[141.03872681 268.47836304]
[128.70759583 259.93768311]
[117.71974182 249.72656250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 30]
[8 29]
[9 28]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[35 72]
[36 71]
[39 67]
[40 66]
[41 65]
[42 64]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[73 115]
[74 114]
[75 113]
[76 112]
[79 109]
[80 108]
[81 107]
[82 106]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% Start Annotations
7 30 0.0 0.6 colorpair
8 29 0.0 1 colorpair
9 28 0.0 1 colorpair
10 26 0.0 1 colorpair
11 25 0.0 1 colorpair
12 24 0.0 1 colorpair
13 23 0.0 1 colorpair
14 22 0.0 1 colorpair
35 72 0.0 1 colorpair
36 71 0.0 1 colorpair
39 67 0.0 1 colorpair
40 66 0.0 1 colorpair
41 65 0.0 1 colorpair
42 64 0.0 1 colorpair
43 61 0.0 1 colorpair
44 60 0.0 1 colorpair
45 59 0.0 1 colorpair
46 58 0.0 1 colorpair
47 57 0.0 1 colorpair
48 56 0.0 1 colorpair
49 55 0.0 1 colorpair
73 115 0.0 0.6 colorpair
74 114 0.0 1 colorpair
75 113 0.0 1 colorpair
76 112 0.0 1 colorpair
79 109 0.0 1 colorpair
80 108 0.0 1 colorpair
81 107 0.0 1 colorpair
82 106 0.0 1 colorpair
85 102 0.0 1 colorpair
86 101 0.0 1 colorpair
87 100 0.0 1 colorpair
88 99 0.0 1 colorpair
89 98 0.0 1 colorpair
90 97 0.0 1 colorpair
91 96 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 30 1 gmark
73 115 1 gmark

% End Annotations
showpage
end
%%EOF
