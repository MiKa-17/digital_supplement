%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:55:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______GCAAGCAUGUAUAAAAAACAUGCGCUAUACGCGUUAACUGUUGUAUGUAUUACGGUUUUGAUAUUUGGAUGGAUGAUGAAAGAUCGCUUUUGCGGGUUGGAAAUCUACCA__________________________________\
) } def
/len { sequence length } bind def

/coor [
[62.12341309 189.92422485]
[69.58225250 176.91017151]
[78.81056976 165.09558105]
[83.10846710 150.72448730]
[87.40637207 136.35340881]
[91.70426941 121.98232269]
[81.04264069 132.53361511]
[70.38101959 143.08489990]
[68.23818207 149.45010376]
[63.83808899 153.17440796]
[59.04954910 153.84179688]
[47.95823669 163.94044495]
[36.86692047 174.03909302]
[25.77560425 184.13774109]
[14.68428898 194.23640442]
[3.59297371 204.33505249]
[4.40615511 219.95147705]
[-5.05018091 232.40585327]
[-20.31104088 235.81762695]
[-34.17071533 228.57583618]
[-40.08508682 214.09985352]
[-35.26157379 199.22477722]
[-21.97768784 190.97418213]
[-6.50567579 193.24372864]
[4.58563948 183.14508057]
[15.67695522 173.04643250]
[26.76827049 162.94778442]
[37.85958481 152.84913635]
[48.95090103 142.75048828]
[59.82972717 132.42327881]
[70.49135590 121.87198639]
[81.15297699 111.32070160]
[67.40775299 117.32642365]
[53.70294571 111.22901917]
[48.96113968 96.99823761]
[56.26950455 83.89908600]
[70.86990356 80.45983124]
[83.25643158 88.91923523]
[74.74534607 76.56766510]
[66.23425293 64.21609497]
[57.72316360 51.86452103]
[49.21207428 39.51294708]
[35.01058578 32.53955078]
[34.16024399 17.66923714]
[25.64915276 5.31766462]
[17.13806152 -7.03390789]
[8.62697124 -19.38548088]
[0.11588144 -31.73705292]
[-13.68774891 -31.05959511]
[-25.91899109 -37.25715637]
[-33.41678619 -48.60764313]
[-34.30323029 -62.07336807]
[-28.45286560 -74.11368561]
[-36.70515442 -86.63964081]
[-44.95744324 -99.16560364]
[-53.20973206 -111.69156647]
[-61.46202469 -124.21752930]
[-69.71430969 -136.74349976]
[-85.24309540 -139.68157959]
[-94.07691956 -152.78649902]
[-90.97481537 -168.28335571]
[-77.77722168 -176.97813416]
[-62.31402969 -173.71237183]
[-53.75928116 -160.42358398]
[-57.18835068 -144.99578857]
[-48.93606186 -132.46981812]
[-40.68377304 -119.94385529]
[-32.43148422 -107.41789246]
[-24.17919350 -94.89193726]
[-15.92690468 -82.36597443]
[0.45786643 -82.15479279]
[13.63425827 -72.13737488]
[18.31247330 -56.08758545]
[12.46745396 -40.24814224]
[20.97854424 -27.89657021]
[29.48963356 -15.54499817]
[38.00072479 -3.19342542]
[46.51181412 9.15814686]
[60.10453415 15.24807835]
[61.56364441 31.00185776]
[70.07473755 43.35343170]
[78.58582306 55.70500183]
[87.09691620 68.05657196]
[95.60800934 80.40814972]
[103.05895996 81.26449585]
[97.09115601 67.50276184]
[106.02519226 55.45356750]
[120.92712402 57.16598129]
[126.89517975 70.92760468]
[117.96086121 82.97718048]
[125.41181183 83.83352661]
[136.50312805 73.73487854]
[147.59443665 63.63622665]
[152.05722046 47.85599518]
[168.01893616 44.09360504]
[179.05955505 56.21947861]
[173.82142639 71.75955963]
[157.69308472 74.72754669]
[146.60177612 84.82619476]
[135.51046753 94.92484283]
[142.41746521 108.23999786]
[157.06095886 104.98917389]
[171.70446777 101.73834991]
[179.46342468 96.79362488]
[186.68632507 98.57556152]
[201.39428711 95.63008118]
[213.34576416 84.40090179]
[228.96597290 89.39498901]
[232.18620300 105.47486115]
[219.69374084 116.09891510]
[204.33978271 110.33804321]
[189.63182068 113.28352356]
[174.95529175 116.38185120]
[160.31178284 119.63267517]
[145.66828918 122.88349915]
[160.07769775 127.05110168]
[174.48710632 131.21870422]
[188.89651489 135.38630676]
[202.82347107 140.95765686]
[215.81642151 148.45320129]
[227.61119080 157.72053528]
[237.96794128 168.57122803]
[246.67613220 180.78465271]
[253.55865479 194.11247253]
[258.47558594 208.28369141]
[261.32696533 223.01019287]
[262.05480957 237.99252319]
[260.64428711 252.92605591]
[257.12414551 267.50717163]
[251.56588745 281.43936157]
[244.08258057 294.43933105]
[234.82633972 306.24282837]
[223.98539734 316.60980225]
[211.78018188 325.32946777]
[198.45884705 332.22451782]
[184.29225159 337.15478516]
[169.56843567 340.02001953]
[154.58680725 340.76196289]
[139.65194702 339.36550903]
[125.06754303 335.85906982]
[111.13012695 330.31393433]
[98.12309265 322.84286499]
[86.31090546 313.59774780]
[75.93374634 302.76657104]
[67.20259857 290.56954956]
[60.29499817 277.25469971]
[55.35139847 263.09274292]
[52.47231293 248.37164307]
[51.71628189 233.39071655]
[53.09867859 218.45454407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[44 78]
[45 77]
[46 76]
[47 75]
[48 74]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[91 100]
[92 99]
[93 98]
[101 115]
[102 114]
[103 113]
[105 112]
[106 111]
] def

init

% Start Annotations
6 32 0.0 0.6 colorpair
7 31 0.0 1 colorpair
8 30 0.0 1 colorpair
11 29 0.0 1 colorpair
12 28 0.0 1 colorpair
13 27 0.0 1 colorpair
14 26 0.0 1 colorpair
15 25 0.0 1 colorpair
16 24 0.0 1 colorpair
38 84 0.0 1 colorpair
39 83 0.0 1 colorpair
40 82 0.0 1 colorpair
41 81 0.0 1 colorpair
42 80 0.0 1 colorpair
44 78 0.0 1 colorpair
45 77 0.0 1 colorpair
46 76 0.0 1 colorpair
47 75 0.0 1 colorpair
48 74 0.0 1 colorpair
53 70 0.0 1 colorpair
54 69 0.0 1 colorpair
55 68 0.0 1 colorpair
56 67 0.0 1 colorpair
57 66 0.0 1 colorpair
58 65 0.0 1 colorpair
91 100 0.0 1 colorpair
92 99 0.0 1 colorpair
93 98 0.0 1 colorpair
101 115 0.0 1 colorpair
102 114 0.0 1 colorpair
103 113 0.0 1 colorpair
105 112 0.0 1 colorpair
106 111 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 32 1 gmark

% End Annotations
showpage
end
%%EOF
