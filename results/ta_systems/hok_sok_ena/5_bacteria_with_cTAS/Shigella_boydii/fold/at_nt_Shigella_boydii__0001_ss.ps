%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:55:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGC______________AU_GAACACCAAAAGGCAGAUAGAGAAAAGCCC_CAGU___________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[206.29866028 105.57518768]
[202.77050781 90.99089050]
[187.99838257 93.59561157]
[181.93408203 97.87009430]
[172.93115234 96.10989380]
[158.11367798 98.44279480]
[143.29620361 100.77570343]
[128.47872925 103.10861206]
[123.12988281 116.90295410]
[111.61193848 126.18901825]
[96.99689484 128.49005127]
[83.18283844 123.19233704]
[73.85417938 111.70886230]
[59.03670120 114.04177094]
[44.21922684 116.37467957]
[29.40175247 118.70758057]
[14.58427811 121.04048920]
[-0.23319606 123.37339783]
[-15.05067062 125.70630646]
[-29.86814499 128.03921509]
[-44.68561935 130.37211609]
[-52.15773773 145.52630615]
[-67.03598022 153.17739868]
[-83.38139343 150.49346924]
[-94.80058289 138.72454834]
[-109.57270050 141.32926941]
[-110.72029877 156.36701965]
[-115.57234955 170.64666748]
[-123.82386017 183.27058411]
[-134.95613098 193.44522095]
[-148.26937866 200.53100586]
[-162.92672729 204.08248901]
[-178.00679016 203.87644958]
[-192.56163025 199.92582703]
[-205.67631531 192.47895813]
[-216.52645874 182.00396729]
[-224.42999268 169.15931702]
[-228.89009094 154.75244141]
[-229.62640381 139.68894958]
[-226.59265137 124.91576385]
[-219.97950745 111.36152649]
[-210.20271301 99.87828064]
[-197.87683105 91.18785858]
[-183.77667236 85.83655548]
[-168.78858948 84.16075897]
[-153.85475159 86.26581573]
[-139.91390991 92.01938629]
[-127.84239197 101.05980682]
[-118.39902496 112.81878662]
[-112.17742157 126.55715179]
[-97.40531158 123.95242310]
[-92.67993927 111.44345093]
[-82.30128479 102.84129333]
[-68.91925812 100.48153687]
[-56.02018356 105.08780670]
[-47.01852417 115.55464172]
[-32.20104980 113.22173309]
[-17.38357735 110.88883209]
[-2.56610274 108.55592346]
[12.25137138 106.22301483]
[27.06884575 103.89010620]
[41.88632202 101.55720520]
[56.70379639 99.22429657]
[71.52127075 96.89138794]
[76.87011719 83.09704590]
[88.38806152 73.81098175]
[103.00310516 71.50994873]
[116.81716156 76.80766296]
[126.14582062 88.29113770]
[140.96330261 85.95822906]
[155.78077698 83.62532043]
[170.59825134 81.29241943]
[185.39366150 78.82350159]
[200.16578674 76.21877289]
[198.49304199 61.30732346]
[197.75990295 46.32026291]
[197.96925354 31.31674194]
[199.12028503 16.35597229]
[201.20843506 1.49699879]
[204.22546387 -13.20153809]
[208.15948486 -27.68162727]
[212.99494934 -41.88612366]
[218.71278381 -55.75896835]
[225.29042053 -69.24541473]
[232.70190430 -82.29222870]
[240.91798401 -94.84793091]
[249.90621948 -106.86295319]
[259.63116455 -118.28989410]
[270.05441284 -129.08364868]
[281.13485718 -139.20162964]
[292.82873535 -148.60388184]
[305.08993530 -157.25332642]
[317.87002563 -165.11581421]
[331.11859131 -172.16030884]
[344.78335571 -178.35900879]
[358.81036377 -183.68746948]
[373.14428711 -188.12463379]
[387.72851562 -191.65301514]
[402.50552368 -194.25868225]
[417.41699219 -195.93135071]
[432.40405273 -196.66441345]
[447.40756226 -196.45498657]
[462.36831665 -195.30387878]
[477.22729492 -193.21565247]
[491.92581177 -190.19853210]
[506.40588379 -186.26445007]
[520.61035156 -181.42890930]
[534.48315430 -175.71099854]
[547.96960449 -169.13328552]
[561.01635742 -161.72174072]
[573.57202148 -153.50559998]
[585.58697510 -144.51728821]
[597.01385498 -134.79228210]
[607.80755615 -124.36897278]
[617.92547607 -113.28848267]
[627.32769775 -101.59455109]
[635.97705078 -89.33332062]
[643.83947754 -76.55317688]
[650.88391113 -63.30457687]
[657.08258057 -49.63978958]
[662.41094971 -35.61275101]
[666.84802246 -21.27881813]
[670.37634277 -6.69456100]
[672.98193359 8.08246136]
[674.65454102 22.99393082]
[675.38751221 37.98099899]
[675.17797852 52.98451996]
[674.02679443 67.94527435]
[671.93847656 82.80422974]
[668.92132568 97.50273132]
[664.98712158 111.98278046]
[660.15155029 126.18722534]
[654.43353271 140.06001282]
[647.85577393 153.54638672]
[640.44415283 166.59312439]
[632.22796631 179.14874268]
[623.23956299 191.16368103]
[613.51452637 202.59051514]
[603.09112549 213.38415527]
[592.01062012 223.50201416]
[580.31658936 232.90415955]
[568.05535889 241.55346680]
[555.27514648 249.41581726]
[542.02648926 256.46017456]
[528.36169434 262.65875244]
[514.33465576 267.98706055]
[500.00067139 272.42407227]
[485.41641235 275.95230103]
[470.63937378 278.55780029]
[455.72787476 280.23031616]
[440.74081421 280.96322632]
[425.73730469 280.75363159]
[410.77655029 279.60238647]
[395.91760254 277.51400757]
[381.21911621 274.49673462]
[366.73907471 270.56250000]
[352.53466797 265.72680664]
[338.66192627 260.00875854]
[325.17556763 253.43089294]
[312.12887573 246.01921082]
[299.57330322 237.80293274]
[287.55841064 228.81449890]
[276.13162231 219.08938599]
[265.33804321 208.66595459]
[255.22023010 197.58535767]
[245.81816101 185.89132690]
[237.16891479 173.63000488]
[229.30662537 160.84979248]
[222.26234436 147.60110474]
[216.06384277 133.93626404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[5 72]
[6 71]
[7 70]
[8 69]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[25 51]
[26 50]
] def

init

% Start Annotations
2 74 0.0 1 colorpair
3 73 0.0 1 colorpair
5 72 0.0 1 colorpair
6 71 0.0 1 colorpair
7 70 0.0 1 colorpair
8 69 0.0 1 colorpair
13 64 0.0 0.6 colorpair
14 63 0.0 0.6 colorpair
15 62 0.32 1 colorpair
16 61 0.0 1 colorpair
17 60 0.16 1 colorpair
18 59 0.0 1 colorpair
19 58 0.0 1 colorpair
20 57 0.16 1 colorpair
21 56 0.16 1 colorpair
25 51 0.16 1 colorpair
26 50 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 64 1 gmark
14 63 1 gmark
15 cmark
62 cmark
17 cmark
20 cmark
21 cmark
51 cmark

% End Annotations
showpage
end
%%EOF
