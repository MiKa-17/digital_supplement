%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:55:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________GGG_____UGCUUGAGGCUAUCUGUCUCAGGCAU_GAACACCAAAAGGCAGAUAGAGAAAAGCCCCAGU____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[281.04135132 259.03222656]
[272.91195679 246.42106628]
[265.52960205 233.35856628]
[258.91925049 219.88893127]
[253.10325623 206.05772400]
[248.10133362 191.91174316]
[243.93038940 177.49885559]
[240.60453796 162.86782837]
[238.13502502 148.06817627]
[236.53022766 133.14997864]
[235.79556274 118.16371155]
[220.79618835 118.02592468]
[217.08250427 124.19572449]
[211.39343262 128.72129822]
[204.41662598 130.99465942]
[197.01696777 130.68382263]
[190.12948608 127.78028107]
[184.64109802 122.60617828]
[181.27651978 115.77913666]
[166.35302734 114.26602936]
[151.42953491 112.75292969]
[136.50604248 111.23982239]
[129.43482971 124.34370422]
[117.89068604 133.74830627]
[103.62786865 138.02452087]
[88.81375885 136.52250671]
[75.69951630 129.47052002]
[66.27797699 117.94019318]
[61.98085022 103.68366241]
[47.05736160 102.17056274]
[32.13387299 100.65745544]
[17.21038437 99.14435577]
[2.28689599 97.63125610]
[-12.63659286 96.11814880]
[-27.56008148 94.60504913]
[-38.64131927 107.35997009]
[-54.97642136 110.97465515]
[-70.10140228 104.22107697]
[-78.15117645 89.93447876]
[-93.09994507 88.69578552]
[-102.40203094 101.00329590]
[-116.88925934 106.30648041]
[-131.93879700 102.91313171]
[-142.74839783 91.90603638]
[-145.86875916 76.79753113]
[-140.30418396 62.40868378]
[-127.83029938 53.33091736]
[-112.42749023 52.46091843]
[-99.01072693 60.07630157]
[-91.86125183 73.74701691]
[-76.91248322 74.98571014]
[-69.16053009 64.09026337]
[-56.93507004 58.41119766]
[-43.39297867 59.53318405]
[-32.08996964 67.26919556]
[-26.04697990 79.68155670]
[-11.12349033 81.19466400]
[3.79999876 82.70776367]
[18.72348785 84.22086334]
[33.64697647 85.73397064]
[48.57046509 87.24707031]
[63.49395370 88.76017761]
[70.56517029 75.65629578]
[82.10931396 66.25168610]
[96.37213135 61.97548676]
[111.18624115 63.47750092]
[124.30048370 70.52947998]
[133.72201538 82.05980682]
[138.01914978 96.31633759]
[152.94264221 97.82943726]
[167.86611938 99.34254456]
[182.78961182 100.85564423]
[203.01004028 89.50878906]
[220.93397522 103.02655792]
[235.93334961 103.16434479]
[236.94319153 88.19409943]
[238.82179260 73.30789948]
[241.56275940 58.55611420]
[245.15682983 43.98866272]
[249.59185791 29.65483284]
[254.85281372 15.60312939]
[260.92190552 1.88109612]
[267.77859497 -11.46483421]
[275.39968872 -24.38950157]
[283.75939941 -36.84917450]
[292.82940674 -48.80169678]
[302.57907104 -60.20661545]
[312.97537231 -71.02534485]
[323.98315430 -81.22128296]
[335.56512451 -90.75992584]
[347.68212891 -99.60898590]
[360.29318237 -107.73854065]
[373.35559082 -115.12107086]
[386.82516479 -121.73159027]
[400.65628052 -127.54774475]
[414.80221558 -132.54985046]
[429.21502686 -136.72097778]
[443.84600830 -140.04701233]
[458.64562988 -142.51669312]
[473.56381226 -144.12168884]
[488.55007935 -144.85653687]
[503.55371094 -144.71878052]
[518.52398682 -143.70886230]
[533.41015625 -141.83020020]
[548.16192627 -139.08917236]
[562.72937012 -135.49504089]
[577.06317139 -131.05996704]
[591.11486816 -125.79894257]
[604.83685303 -119.72979736]
[618.18273926 -112.87304688]
[631.10742188 -105.25190735]
[643.56701660 -96.89215851]
[655.51953125 -87.82208252]
[666.92437744 -78.07237244]
[677.74310303 -67.67602539]
[687.93896484 -56.66821671]
[697.47760010 -45.08618927]
[706.32659912 -32.96913910]
[714.45611572 -20.35805893]
[721.83856201 -7.29562664]
[728.44903564 6.17395973]
[734.26513672 20.00512314]
[739.26715088 34.15106201]
[743.43823242 48.56391525]
[746.76422119 63.19490814]
[749.23382568 77.99453735]
[750.83874512 92.91271973]
[751.57354736 107.89898682]
[751.43572998 122.90261841]
[750.42578125 137.87286377]
[748.54705811 152.75904846]
[745.80596924 167.51080322]
[742.21173096 182.07823181]
[737.77661133 196.41201782]
[732.51556396 210.46368408]
[726.44635010 224.18566895]
[719.58953857 237.53153992]
[711.96832275 250.45614624]
[703.60852051 262.91574097]
[694.53839111 274.86819458]
[684.78863525 286.27304077]
[674.39227295 297.09167480]
[663.38439941 307.28753662]
[651.80236816 316.82608032]
[639.68524170 325.67501831]
[627.07415771 333.80447388]
[614.01165771 341.18688965]
[600.54205322 347.79730225]
[586.71087646 353.61334229]
[572.56494141 358.61532593]
[558.15203857 362.78634644]
[543.52105713 366.11224365]
[528.72137451 368.58181763]
[513.80322266 370.18667603]
[498.81695557 370.92141724]
[483.81329346 370.78353882]
[468.84307861 369.77349854]
[453.95690918 367.89471436]
[439.20513916 365.15356445]
[424.63772583 361.55929565]
[410.30395508 357.12411499]
[396.25231934 351.86297607]
[382.53036499 345.79370117]
[369.18450928 338.93685913]
[356.25994873 331.31561279]
[343.80038452 322.95574951]
[331.84796143 313.88558960]
[320.44317627 304.13577271]
[309.62457275 293.73934937]
[299.42877197 282.73144531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 75]
[12 74]
[19 72]
[20 71]
[21 70]
[22 69]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[39 51]
[40 50]
] def

init

% Start Annotations
11 75 0.0 0.2 colorpair
12 74 0.0 0.2 colorpair
19 72 0.0 0.2 colorpair
20 71 0.0 1 colorpair
21 70 0.0 1 colorpair
22 69 0.0 1 colorpair
29 62 0.32 1 colorpair
30 61 0.0 1 colorpair
31 60 0.16 1 colorpair
32 59 0.0 1 colorpair
33 58 0.0 1 colorpair
34 57 0.16 1 colorpair
35 56 0.16 1 colorpair
39 51 0.16 1 colorpair
40 50 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 75 2 gmark
12 74 2 gmark
19 72 2 gmark
29 cmark
62 cmark
31 cmark
34 cmark
35 cmark
51 cmark

% End Annotations
showpage
end
%%EOF
