%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:39:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGCAUGAACACGAAC_GGCAGAUAGAGAAAAGCCCCAGU_____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[-16.62697601 397.88433838]
[-30.46129417 392.09036255]
[-44.00883102 385.65429688]
[-57.23980331 378.59033203]
[-70.12512970 370.91394043]
[-82.63648224 362.64202881]
[-94.74636841 353.79278564]
[-106.42815399 344.38565063]
[-117.65616608 334.44128418]
[-128.40573120 323.98159790]
[-138.65319824 313.02951050]
[-148.37606812 301.60916138]
[-157.55294800 289.74563599]
[-166.16366577 277.46502686]
[-174.18930054 264.79428101]
[-181.61221313 251.76129150]
[-188.41609192 238.39468384]
[-194.58595276 224.72387695]
[-200.10826111 210.77888489]
[-214.29808044 215.64190674]
[-228.48789978 220.50492859]
[-228.00405884 235.61311340]
[-231.99653625 250.19226074]
[-240.11032104 262.94601440]
[-251.62393188 272.74029541]
[-265.51361084 278.70419312]
[-280.54428101 280.30746460]
[-295.37942505 277.40747070]
[-308.69992065 270.26214600]
[-319.32128906 259.50677490]
[-326.29913330 246.09779358]
[-329.01296997 231.22746277]
[-327.22146606 216.21806335]
[-321.08392334 202.40423584]
[-311.14611816 191.01426697]
[-298.29168701 183.06095886]
[-283.66363525 179.25151062]
[-268.56271362 179.92466736]
[-254.33164978 185.02056885]
[-242.23587036 194.08607483]
[-233.35092163 206.31510925]
[-219.16110229 201.45208740]
[-204.97128296 196.58906555]
[-209.16342163 182.18821716]
[-212.67596436 167.60670471]
[-215.50117493 152.87658691]
[-217.63285828 138.03022766]
[-219.06629944 123.10025787]
[-219.79837036 108.11952209]
[-219.82746887 93.12093353]
[-219.15350342 78.13746643]
[-217.77796936 63.20206070]
[-215.70390320 48.34754562]
[-212.93583679 33.60657120]
[-209.47988892 19.01154327]
[-205.34362793 4.59454536]
[-200.53614807 -9.61273098]
[-195.06803894 -23.57905388]
[-188.95129395 -37.27372360]
[-182.19938660 -50.66663742]
[-174.82713318 -63.72835159]
[-166.85075378 -76.43016052]
[-158.28778076 -88.74413300]
[-149.15704346 -100.64321136]
[-139.47859192 -112.10122681]
[-129.27372742 -123.09300232]
[-118.56486511 -133.59437561]
[-107.37554932 -143.58224487]
[-95.73037720 -153.03468323]
[-83.65495300 -161.93087769]
[-71.17581177 -170.25131226]
[-58.32038498 -177.97766113]
[-45.11694336 -185.09297180]
[-31.59449959 -191.58157349]
[-17.78278351 -197.42922974]
[-3.71215725 -202.62306213]
[10.58645153 -207.15167236]
[25.08160973 -211.00508118]
[39.74145508 -214.17485046]
[54.53376007 -216.65399170]
[69.42601013 -218.43705750]
[84.38547516 -219.52012634]
[99.37925720 -219.90083313]
[114.37440491 -219.57832336]
[129.33795166 -218.55331421]
[144.23701477 -216.82804871]
[159.03883362 -214.40634155]
[173.71086121 -211.29348755]
[188.22087097 -207.49635315]
[202.53694153 -203.02326965]
[216.62762451 -197.88407898]
[230.46192932 -192.09007263]
[244.00944519 -185.65400696]
[257.24041748 -178.58999634]
[270.12570190 -170.91358948]
[282.63705444 -162.64164734]
[294.74691772 -153.79237366]
[306.42868042 -144.38520813]
[317.65667725 -134.44082642]
[328.40621948 -123.98109436]
[338.65365601 -113.02900696]
[348.37649536 -101.60863495]
[357.55334473 -89.74508667]
[366.16406250 -77.46443939]
[374.18966675 -64.79367828]
[381.61254883 -51.76067352]
[388.41638184 -38.39406586]
[394.58621216 -24.72323608]
[400.10848999 -10.77823925]
[404.97106934 3.41027284]
[409.16323853 17.81110954]
[412.67581177 32.39261627]
[415.50106812 47.12273407]
[417.63278198 61.96909332]
[419.06625366 76.89904785]
[419.79837036 91.87978363]
[419.82748413 106.87837219]
[419.15356445 121.86183929]
[417.77804565 136.79725647]
[415.70401001 151.65177917]
[412.93597412 166.39274597]
[409.48007202 180.98779297]
[405.34384155 195.40480042]
[400.53637695 209.61207581]
[395.06829834 223.57841492]
[388.95159912 237.27310181]
[382.19970703 250.66603088]
[374.82748413 263.72775269]
[366.85113525 276.42959595]
[358.28820801 288.74356079]
[349.15747070 300.64266968]
[339.47906494 312.10070801]
[329.27420044 323.09249878]
[318.56536865 333.59390259]
[307.37606812 343.58178711]
[295.73092651 353.03424072]
[283.65551758 361.93048096]
[271.17639160 370.25094604]
[258.32098389 377.97732544]
[245.11755371 385.09265137]
[231.59512329 391.58129883]
[217.78343201 397.42898560]
[203.71281433 402.62283325]
[189.41421509 407.15145874]
[174.91906738 411.00491333]
[160.25923157 414.17471313]
[145.46691895 416.65390015]
[130.57467651 418.43698120]
[115.61521912 419.52011108]
[100.62143707 419.90081787]
[85.62628937 419.57836914]
[70.66273499 418.55337524]
[55.76367569 416.82815552]
[40.96185303 414.40646362]
[26.28981018 411.29364014]
[11.77979755 407.49655151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 43]
[20 42]
[21 41]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 43 47 gmark
43 cmark
20 42 39 gmark
20 cmark
21 41 41 gmark
21 cmark
41 cmark

% End Annotations
showpage
end
%%EOF
