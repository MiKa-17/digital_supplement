%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:39:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGCCUCAGGCAUGAACACC_AAA_GGCAGAUAGAGAAAAGCCCCAGU_____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[-66.58437347 338.91058350]
[-78.66230774 330.01828003]
[-90.26646423 320.51599121]
[-101.36606598 310.42892456]
[-111.93167877 299.78387451]
[-121.93529510 288.60900879]
[-131.35037231 276.93399048]
[-140.15196228 264.78976440]
[-148.31669617 252.20855713]
[-155.82295227 239.22370911]
[-162.65081787 225.86967468]
[-168.78218079 212.18186951]
[-174.20077515 198.19656372]
[-188.44807434 202.88850403]
[-202.69537354 207.58045959]
[-216.94267273 212.27241516]
[-231.18998718 216.96435547]
[-245.43728638 221.65631104]
[-259.68457031 226.34825134]
[-273.93188477 231.04020691]
[-288.17919922 235.73214722]
[-287.67401123 250.82922363]
[-291.44396973 265.45672607]
[-299.18344116 278.42889404]
[-310.26501465 288.69415283]
[-323.79040527 295.42028809]
[-338.66311646 298.06207275]
[-353.67749023 296.40533447]
[-367.61642456 290.58441162]
[-379.34988403 281.07116699]
[-387.92675781 268.63674927]
[-392.65170288 254.28924561]
[-393.14172363 239.19166565]
[-389.35708618 224.56794739]
[-381.60458374 211.60356140]
[-370.51269531 201.34947205]
[-356.98056030 194.63691711]
[-342.10519409 192.01007080]
[-327.09249878 193.68188477]
[-313.15942383 199.51679993]
[-301.43551636 209.04185486]
[-292.87112427 221.48484802]
[-278.62384033 216.79290771]
[-264.37652588 212.10095215]
[-250.12922668 207.40901184]
[-235.88192749 202.71705627]
[-221.63462830 198.02510071]
[-207.38732910 193.33316040]
[-193.14002991 188.64120483]
[-178.89271545 183.94926453]
[-182.84452820 169.48091125]
[-186.04629517 154.82832336]
[-188.48951721 140.03031921]
[-190.16770935 125.12618256]
[-191.07644653 110.15541077]
[-191.21328735 95.15770721]
[-190.57789612 80.17284393]
[-189.17193604 65.24055481]
[-186.99914551 50.40044403]
[-184.06529236 35.69186401]
[-180.37814331 21.15381622]
[-175.94749451 6.82485485]
[-170.78507996 -7.25702429]
[-164.90458679 -21.05447769]
[-158.32162476 -34.53091431]
[-151.05363464 -47.65060425]
[-143.11990356 -60.37874985]
[-134.54145813 -72.68160248]
[-125.34104919 -84.52652740]
[-115.54307556 -95.88213348]
[-105.17353058 -106.71829224]
[-94.25989532 -117.00627136]
[-82.83112335 -126.71878815]
[-70.91751862 -135.83009338]
[-58.55066681 -144.31600952]
[-45.76337051 -152.15405273]
[-32.58953857 -159.32342529]
[-19.06410027 -165.80513000]
[-5.22292852 -171.58197021]
[8.89727592 -176.63861084]
[23.25906754 -180.96166992]
[37.82436371 -184.53965759]
[52.55453491 -187.36311340]
[67.41052246 -189.42451477]
[82.35293579 -190.71842957]
[97.34214783 -191.24142456]
[112.33840179 -190.99208069]
[127.30194092 -189.97108459]
[142.19306946 -188.18115234]
[156.97232056 -185.62699890]
[171.60049438 -182.31541443]
[186.03878784 -178.25520325]
[200.24893188 -173.45709229]
[214.19322205 -167.93382263]
[227.83470154 -161.70005798]
[241.13719177 -154.77229309]
[254.06539917 -147.16893005]
[266.58505249 -138.91012573]
[278.66296387 -130.01776123]
[290.26708984 -120.51544189]
[301.36666870 -110.42835236]
[311.93225098 -99.78324890]
[321.93582153 -88.60836029]
[331.35089111 -76.93331146]
[340.15243530 -64.78907013]
[348.31713867 -52.20783615]
[355.82336426 -39.22297668]
[362.65118408 -25.86892509]
[368.78250122 -12.18109226]
[374.20104980 1.80422544]
[378.89248657 16.04994011]
[382.84432983 30.51827431]
[386.04614258 45.17086029]
[388.48941040 59.96884537]
[390.16763306 74.87298584]
[391.07641602 89.84375763]
[391.21331787 104.84146118]
[390.57794189 119.82632446]
[389.17202759 134.75862122]
[386.99929810 149.59872437]
[384.06549072 164.30732727]
[380.37838745 178.84538269]
[375.94775391 193.17434692]
[370.78540039 207.25624084]
[364.90493774 221.05371094]
[358.32202148 234.53018188]
[351.05404663 247.64988708]
[343.12036133 260.37805176]
[334.54196167 272.68093872]
[325.34158325 284.52587891]
[315.54364014 295.88150024]
[305.17413330 306.71771240]
[294.26052856 317.00570679]
[282.83178711 326.71826172]
[270.91818237 335.82958984]
[258.55136108 344.31555176]
[245.76409912 352.15362549]
[232.59028625 359.32305908]
[219.06486511 365.80477905]
[205.22370911 371.58166504]
[191.10351562 376.63833618]
[176.74174500 380.96145630]
[162.17645264 384.53948975]
[147.44628906 387.36297607]
[132.59030151 389.42443848]
[117.64789581 390.71838379]
[102.65869141 391.24142456]
[87.66243744 390.99212646]
[72.69889832 389.97116089]
[57.80775070 388.18127441]
[43.02849579 385.62716675]
[28.40031815 382.31561279]
[13.96200943 378.25543213]
[-0.24814324 373.45736694]
[-14.19245625 367.93414307]
[-27.83395195 361.70040894]
[-41.13645554 354.77270508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
] def

init

% Start Annotations
14 49 0.0 0.2 colorpair
16 47 0.16 0.2 colorpair
20 43 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 50 4 gmark
13 cmark
14 49 2 gmark
15 48 5 gmark
15 cmark
48 cmark
16 47 2 gmark
47 cmark
17 46 4 gmark
17 cmark
18 45 3 gmark
45 cmark
19 44 5 gmark
44 cmark
20 43 2 gmark
20 cmark
21 42 3 gmark
21 cmark
42 cmark

% End Annotations
showpage
end
%%EOF
