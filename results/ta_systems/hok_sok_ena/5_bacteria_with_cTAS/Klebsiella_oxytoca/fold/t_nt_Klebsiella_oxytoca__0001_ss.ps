%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AUGCUGACAAAAUAUGCCCUUGUGGCAAUCGUCGUACUGUGUAUUACGGUACUGGGAUUUACGCUUUUGGUGCGCAGCUCGCUGUGCGAACUCAGUAUUAAAGAGCGUAGUAUGGAGUUUAAAGCUGUUCUCGCUUACGAAUCGAAGAAAUAG____\
) } def
/len { sequence length } bind def

/coor [
[84.02283478 241.81599426]
[95.09818268 231.69984436]
[108.37696075 224.72315979]
[122.99094391 221.34210205]
[137.98461914 221.77775574]
[152.37763977 226.00163269]
[165.22602844 233.73524475]
[157.97933960 220.60188293]
[150.73265076 207.46850586]
[137.22016907 212.86248779]
[123.14981079 216.56486511]
[108.73249054 218.52014160]
[94.18428040 218.69902039]
[79.72324371 217.09881592]
[65.56611633 213.74351501]
[51.92509079 208.68341064]
[39.00461960 201.99433899]
[26.99835777 193.77655029]
[16.08625793 184.15321350]
[6.43187380 173.26858521]
[-5.93825102 181.75270081]
[-18.30837631 190.23680115]
[-22.64899635 205.68148804]
[-37.48588562 211.78445435]
[-51.43745804 203.86402893]
[-53.80125427 187.99607849]
[-42.76397705 176.35313416]
[-26.79247856 177.86666870]
[-14.42235374 169.38256836]
[-2.05222917 160.89846802]
[-7.87283516 149.86714172]
[-12.50520992 138.28652954]
[-15.89832687 126.28418732]
[-18.01481056 113.99231720]
[-18.83134842 101.54632568]
[-18.33894539 89.08329773]
[-33.15879440 86.76551819]
[-47.97864151 84.44773102]
[-62.79848862 82.12995148]
[-77.61833954 79.81217194]
[-88.47344971 90.90028381]
[-103.77842712 93.45707703]
[-117.64820099 86.49941254]
[-124.74955750 72.70265961]
[-122.35187531 57.37194824]
[-111.37712097 46.40224838]
[-96.04530334 44.01163483]
[-82.25182343 51.11934662]
[-75.30055237 64.99232483]
[-60.48070908 67.31010437]
[-45.66085815 69.62788391]
[-30.84101295 71.94567108]
[-16.02116394 74.26345062]
[-12.04428768 60.38487625]
[-6.41386986 47.09093857]
[0.78699666 34.57782745]
[9.45204163 23.03021431]
[19.45338631 12.61851597]
[30.64343452 3.49638700]
[42.85704041 -4.20154858]
[55.91395950 -10.36168480]
[69.62149811 -14.89311123]
[83.77735138 -17.72895241]
[98.17263031 -18.82736015]
[112.59487152 -18.17211914]
[126.83123779 -15.77290440]
[131.13328552 -30.14274597]
[135.43533325 -44.51258850]
[139.59785461 -58.92346954]
[132.08795166 -72.57041931]
[136.37327576 -87.16804504]
[149.42984009 -94.24347687]
[153.45243835 -108.69403839]
[157.47502136 -123.14460754]
[146.08668518 -133.24742126]
[140.23794556 -147.23596191]
[141.03944397 -162.31501770]
[148.27873230 -175.49658203]
[160.47299194 -184.19195557]
[175.17245483 -186.72006226]
[179.19505310 -201.17062378]
[175.44198608 -216.54023743]
[186.30899048 -226.72639465]
[190.33157349 -241.17695618]
[194.35415649 -255.62751770]
[198.37675476 -270.07806396]
[196.79949951 -286.95849609]
[212.58360291 -293.14706421]
[222.89979553 -279.69299316]
[212.82731628 -266.05548096]
[208.80471802 -251.60491943]
[204.78213501 -237.15435791]
[200.75955200 -222.70379639]
[204.80032349 -208.36778259]
[193.64561462 -197.14802551]
[189.62301636 -182.69746399]
[200.90194702 -172.93778992]
[206.84936523 -159.19233704]
[206.23651123 -144.16616821]
[199.13139343 -130.84185791]
[186.89602661 -121.88736725]
[171.92558289 -119.12201691]
[167.90299988 -104.67145538]
[163.88040161 -90.22088623]
[171.40312195 -77.41681671]
[167.52951050 -62.70458984]
[154.04841614 -54.90087891]
[155.29031372 -47.57764816]
[149.80517578 -40.21054077]
[145.50312805 -25.84069824]
[141.20108032 -11.47085571]
[156.22340393 -4.70056963]
[170.16488647 4.08248901]
[182.75752258 14.70947361]
[193.75920105 26.97608948]
[202.95846558 40.64652252]
[210.17843628 55.45797348]
[215.28033447 71.12570190]
[218.16607666 87.34851074]
[218.78018188 103.81453705]
[217.11083984 120.20722961]
[213.19015503 136.21145630]
[207.09349060 151.51954651]
[198.93806458 165.83723450]
[188.88063049 178.88925171]
[177.11454773 190.42469788]
[163.86602783 200.22181702]
[171.11271667 213.35519409]
[178.35940552 226.48855591]
[186.30693054 231.19908142]
[189.04420471 238.97431946]
[200.90008545 248.16333008]
[212.75598145 257.35232544]
[224.61186218 266.54135132]
[239.47296143 262.07730103]
[254.10858154 267.23269653]
[262.89105225 280.02520752]
[262.44329834 295.53582764]
[252.93753052 307.80038452]
[238.02890015 312.10296631]
[223.45005798 306.78909302]
[214.80688477 293.90206909]
[215.42286682 278.39721680]
[203.56697083 269.20822144]
[191.71107483 260.01922607]
[179.85519409 250.83020020]
[185.51155090 264.72283936]
[187.45976257 279.59579468]
[185.57244873 294.47659302]
[179.97299194 308.39227295]
[171.02752686 320.43298340]
[159.32092285 329.81143188]
[145.61862183 335.91445923]
[130.81651306 338.34298706]
[115.88243103 336.93826294]
[101.79282379 331.79208374]
[89.46891785 323.24099731]
[79.71650696 311.84405518]
[73.17322540 298.34643555]
[70.26691437 283.63067627]
[71.18759155 268.65896606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 129]
[8 128]
[9 127]
[20 30]
[21 29]
[22 28]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[66 111]
[67 110]
[68 109]
[69 107]
[72 104]
[73 103]
[74 102]
[80 96]
[81 95]
[83 93]
[84 92]
[85 91]
[86 90]
[131 146]
[132 145]
[133 144]
[134 143]
] def

init

% Start Annotations
7 129 0.0 1 colorpair
8 128 0.0 1 colorpair
9 127 0.16 1 colorpair
20 30 0.16 1 colorpair
21 29 0.16 1 colorpair
22 28 0.16 1 colorpair
36 53 0.16 1 colorpair
37 52 0.32 1 colorpair
38 51 0.0 1 colorpair
39 50 0.0 1 colorpair
40 49 0.16 1 colorpair
66 111 0.0 1 colorpair
67 110 0.32 1 colorpair
68 109 0.16 1 colorpair
69 107 0.16 1 colorpair
72 104 0.0 1 colorpair
73 103 0.16 1 colorpair
74 102 0.0 1 colorpair
80 96 0.16 1 colorpair
81 95 0.16 1 colorpair
83 93 0.0 1 colorpair
84 92 0.0 1 colorpair
85 91 0.16 1 colorpair
86 90 0.0 1 colorpair
131 146 0.16 1 colorpair
132 145 0.16 1 colorpair
133 144 0.16 1 colorpair
134 143 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 cmark
127 cmark
20 cmark
30 cmark
21 cmark
29 cmark
22 cmark
28 cmark
53 cmark
37 cmark
52 cmark
40 cmark
49 cmark
67 cmark
110 cmark
68 cmark
69 cmark
107 cmark
103 cmark
80 cmark
81 cmark
95 cmark
91 cmark
131 cmark
146 cmark
145 cmark
133 cmark
144 cmark
134 cmark

% End Annotations
showpage
end
%%EOF
