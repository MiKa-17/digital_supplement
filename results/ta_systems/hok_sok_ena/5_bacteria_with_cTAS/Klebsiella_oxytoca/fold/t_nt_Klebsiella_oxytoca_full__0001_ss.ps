%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AUGCUGACAAAAUAUGCCCUUGUGGCAAUCGUCGUACUGUGUAUUACGGUACUGGGAUUUACGCUUUUGGUGCGCAGCUCGCUGUGCGAACUCAGUAUUAAAGAGCGUAGUAUGGAGUUUAAAGCUGUUCUCGCUUACGAAUCGAAGAAAUAG____\
) } def
/len { sequence length } bind def

/coor [
[81.89917755 237.96722412]
[92.97452545 227.85107422]
[106.25330353 220.87438965]
[120.86728668 217.49334717]
[135.86096191 217.92900085]
[150.25398254 222.15286255]
[163.10237122 229.88648987]
[155.85568237 216.75311279]
[148.60899353 203.61973572]
[135.63066101 208.76736450]
[122.12212372 212.29646301]
[108.28439331 214.15451050]
[94.32338715 214.31387329]
[80.44685364 212.77215576]
[66.86128235 209.55230713]
[53.76883698 204.70227051]
[41.36434174 198.29417419]
[29.83238602 190.42340088]
[19.34457207 181.20706177]
[10.05696583 170.78230286]
[-2.31315970 179.26640320]
[-14.68328476 187.75051880]
[-19.02390480 203.19520569]
[-33.86079407 209.29817200]
[-47.81236649 201.37774658]
[-50.17616272 185.50978088]
[-39.13888550 173.86685181]
[-23.16738701 175.38038635]
[-10.79726315 166.89628601]
[1.57286227 158.41218567]
[-4.94315386 145.68171692]
[-9.82073402 132.23803711]
[-12.98372650 118.29103088]
[-14.38274860 104.05846405]
[-13.99595833 89.76252747]
[-28.81580544 87.44474792]
[-43.63565445 85.12696838]
[-58.45550156 82.80918121]
[-73.27535248 80.49140167]
[-88.09519958 78.17362213]
[-98.95030975 89.26172638]
[-114.25528717 91.81852722]
[-128.12506104 84.86086273]
[-135.22640991 71.06410980]
[-132.82873535 55.73339844]
[-121.85398102 44.76369858]
[-106.52216339 42.37308121]
[-92.72868347 49.48079300]
[-85.77741241 63.35377121]
[-70.95756531 65.67155457]
[-56.13771820 67.98933411]
[-41.31787109 70.30711365]
[-26.49802399 72.62490082]
[-11.67817688 74.94268036]
[-7.43700647 60.53895569]
[-1.34679830 46.81437302]
[6.48763323 34.00513840]
[15.93145370 22.33170509]
[26.82213211 11.99497795]
[38.97223282 3.17285514]
[52.17264938 -3.98282933]
[66.19619751 -9.34892368]
[80.80152130 -12.83307457]
[95.73725891 -14.37531853]
[110.74636078 -13.94911194]
[125.57051086 -11.56179142]
[129.87255859 -25.93163490]
[134.17460632 -40.30147552]
[123.74141693 -53.58493423]
[123.26795197 -70.30322266]
[132.74285889 -83.88373566]
[148.28239441 -89.10490417]
[152.30497742 -103.55546570]
[156.32757568 -118.00602722]
[144.93922424 -128.10885620]
[139.09048462 -142.09739685]
[139.89199829 -157.17643738]
[147.13128662 -170.35800171]
[159.32554626 -179.05337524]
[174.02500916 -181.58148193]
[178.04759216 -196.03204346]
[174.29454041 -211.40165710]
[185.16152954 -221.58781433]
[189.18411255 -236.03837585]
[193.20671082 -250.48893738]
[197.22929382 -264.93951416]
[195.65205383 -281.81991577]
[211.43615723 -288.00848389]
[221.75234985 -274.55441284]
[211.67985535 -260.91690063]
[207.65727234 -246.46635437]
[203.63467407 -232.01579285]
[199.61209106 -217.56523132]
[203.65287781 -203.22921753]
[192.49815369 -192.00946045]
[188.47557068 -177.55889893]
[199.75448608 -167.79920959]
[205.70191956 -154.05375671]
[205.08905029 -139.02760315]
[197.98394775 -125.70327759]
[185.74858093 -116.74879456]
[170.77813721 -113.98344421]
[166.75553894 -99.53287506]
[162.73295593 -85.08231354]
[171.98301697 -75.41771698]
[175.26390076 -62.33657455]
[171.61152649 -49.24167252]
[161.87994385 -39.59430313]
[148.54444885 -35.99942780]
[144.24240112 -21.62958527]
[139.94035339 -7.25974274]
[154.36181641 -0.72078884]
[167.74276733 7.74599695]
[179.82710266 17.97855759]
[190.38352966 29.78103828]
[199.20997620 42.92753220]
[206.13749695 57.16641617]
[211.03352356 72.22515106]
[213.80432129 87.81550598]
[214.39686584 103.63907623]
[212.79980469 119.39299011]
[209.04371643 134.77572632]
[203.20050049 149.49282837]
[195.38198853 163.26261902]
[185.73783875 175.82154846]
[174.45262146 186.92922974]
[161.74237061 196.37304688]
[168.98905945 209.50642395]
[176.23574829 222.63980103]
[184.18327332 227.35032654]
[186.92054749 235.12554932]
[198.77642822 244.31455994]
[210.63232422 253.50357056]
[222.48820496 262.69256592]
[237.34930420 258.22854614]
[251.98492432 263.38394165]
[260.76736450 276.17642212]
[260.31964111 291.68704224]
[250.81387329 303.95162964]
[235.90524292 308.25421143]
[221.32640076 302.94033813]
[212.68322754 290.05331421]
[213.29920959 274.54846191]
[201.44331360 265.35946655]
[189.58741760 256.17044067]
[177.73153687 246.98144531]
[183.38789368 260.87408447]
[185.33610535 275.74703979]
[183.44879150 290.62783813]
[177.84933472 304.54351807]
[168.90386963 316.58419800]
[157.19726562 325.96267700]
[143.49496460 332.06567383]
[128.69285583 334.49423218]
[113.75877380 333.08947754]
[99.66916656 327.94332886]
[87.34526062 319.39224243]
[77.59284973 307.99526978]
[71.04956818 294.49768066]
[68.14325714 279.78192139]
[69.06393433 264.81021118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 129]
[8 128]
[9 127]
[20 30]
[21 29]
[22 28]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[66 111]
[67 110]
[68 109]
[72 104]
[73 103]
[74 102]
[80 96]
[81 95]
[83 93]
[84 92]
[85 91]
[86 90]
[131 146]
[132 145]
[133 144]
[134 143]
] def

init

% Start Annotations
7 129 0.0 1 colorpair
8 128 0.0 1 colorpair
9 127 0.16 1 colorpair
20 30 0.16 1 colorpair
21 29 0.16 1 colorpair
22 28 0.16 1 colorpair
35 54 0.16 1 colorpair
36 53 0.16 1 colorpair
37 52 0.32 1 colorpair
38 51 0.0 1 colorpair
39 50 0.0 1 colorpair
40 49 0.16 1 colorpair
66 111 0.0 1 colorpair
67 110 0.32 1 colorpair
68 109 0.16 1 colorpair
72 104 0.0 1 colorpair
73 103 0.16 1 colorpair
74 102 0.0 1 colorpair
80 96 0.16 1 colorpair
81 95 0.16 1 colorpair
83 93 0.0 1 colorpair
84 92 0.0 1 colorpair
85 91 0.16 1 colorpair
86 90 0.0 1 colorpair
131 146 0.16 1 colorpair
132 145 0.16 1 colorpair
133 144 0.16 1 colorpair
134 143 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 cmark
127 cmark
20 cmark
30 cmark
21 cmark
29 cmark
22 cmark
28 cmark
35 cmark
53 cmark
37 cmark
52 cmark
40 cmark
49 cmark
67 cmark
110 cmark
68 cmark
103 cmark
80 cmark
81 cmark
95 cmark
91 cmark
131 cmark
146 cmark
145 cmark
133 cmark
144 cmark
134 cmark

% End Annotations
showpage
end
%%EOF
