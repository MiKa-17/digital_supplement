%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 18:02:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGC______________AUGAACACCGAAAGGCAGAUAGAGAAAAGCCCCAGU____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[217.41943359 87.18843842]
[202.67483521 89.94468689]
[187.93023682 92.70092773]
[181.90943909 97.03798676]
[172.88787842 95.36923218]
[158.09486389 97.85253906]
[143.30184937 100.33584595]
[128.50883484 102.81915283]
[123.30039978 116.66712189]
[111.87737274 126.06970215]
[97.28646851 128.51908875]
[83.41929626 123.36197662]
[73.97446442 111.97386169]
[59.18145752 114.45716858]
[44.38844681 116.94047546]
[29.59543419 119.42378235]
[14.80242348 121.90708923]
[0.00941201 124.39039612]
[-14.78359890 126.87371063]
[-29.57661057 129.35700989]
[-44.36962128 131.84031677]
[-51.68695068 147.06922913]
[-66.48589325 154.87141418]
[-82.85735321 152.35482788]
[-94.39620972 140.70396423]
[-109.14080048 143.46020508]
[-110.29081726 158.50480652]
[-115.29638672 172.73880005]
[-123.81623077 185.19169617]
[-135.26943970 195.01445007]
[-148.87513733 201.53729248]
[-163.70564270 204.31552124]
[-178.74978638 203.15969849]
[-192.98185730 198.14863586]
[-205.43145752 189.62399292]
[-215.24978638 178.16697693]
[-221.76737976 164.55877686]
[-224.53988647 149.72720337]
[-223.37825012 134.68350220]
[-218.36169434 120.45336914]
[-209.83222961 108.00704956]
[-198.37144470 98.19315338]
[-184.76071167 91.68080902]
[-169.92807007 88.91403198]
[-154.88481140 90.08147430]
[-140.65663147 95.10353088]
[-128.21360779 103.63779449]
[-118.40413666 115.10237885]
[-111.89704895 128.71560669]
[-97.15245056 125.95936584]
[-92.55540466 113.40196991]
[-82.26482391 104.69362640]
[-68.90694427 102.19721985]
[-55.96097946 106.67203522]
[-46.85292816 117.04730988]
[-32.05991745 114.56400299]
[-17.26690674 112.08069611]
[-2.47389603 109.59738922]
[12.31911469 107.11408234]
[27.11212540 104.63076782]
[41.90513611 102.14746094]
[56.69814682 99.66415405]
[71.49115753 97.18084717]
[76.69960022 83.33287811]
[88.12262726 73.93029785]
[102.71353149 71.48091125]
[116.58070374 76.63802338]
[126.02553558 88.02613831]
[140.81854248 85.54283142]
[155.61155701 83.05952454]
[170.40457153 80.57621765]
[185.17399597 77.95632935]
[199.91859436 75.20008850]
[214.66319275 72.44384766]
[212.85652161 57.54781723]
[212.00794983 42.56664276]
[212.12097168 27.56188202]
[213.19512939 12.59519005]
[215.22599792 -2.27192926]
[218.20523071 -16.97838402]
[222.12060547 -31.46374130]
[226.95600891 -45.66847610]
[232.69158936 -59.53421783]
[239.30375671 -73.00399017]
[246.76536560 -86.02244568]
[255.04573059 -98.53608704]
[264.11083984 -110.49348450]
[273.92346191 -121.84551239]
[284.44323730 -132.54551697]
[295.62692261 -142.54953003]
[307.42861938 -151.81643677]
[319.79980469 -160.30816650]
[332.68963623 -167.98982239]
[346.04516602 -174.82984924]
[359.81149292 -180.80012512]
[373.93203735 -185.87611389]
[388.34878540 -190.03695679]
[403.00253296 -193.26557922]
[417.83300781 -195.54867554]
[432.77929688 -196.87690735]
[447.77996826 -197.24478149]
[462.77337646 -196.65080261]
[477.69796753 -195.09741211]
[492.49234009 -192.59098816]
[507.09570312 -189.14183044]
[521.44812012 -184.76411438]
[535.49053955 -179.47583008]
[549.16528320 -173.29870605]
[562.41619873 -166.25811768]
[575.18872070 -158.38302612]
[587.43048096 -149.70574951]
[599.09112549 -140.26197815]
[610.12280273 -130.09049988]
[620.48004150 -119.23312378]
[630.12042236 -107.73445892]
[639.00421143 -95.64176178]
[647.09497070 -83.00471497]
[654.35949707 -69.87525177]
[660.76788330 -56.30733109]
[666.29376221 -42.35669708]
[670.91448975 -28.08067894]
[674.61102295 -13.53794289]
[677.36822510 1.21175289]
[679.17474365 16.10779953]
[680.02313232 31.08898354]
[679.90991211 46.09374237]
[678.83563232 61.06042480]
[676.80456543 75.92752075]
[673.82519531 90.63394165]
[669.90966797 105.11925507]
[665.07409668 119.32393646]
[659.33837891 133.18962097]
[652.72601318 146.65931702]
[645.26428223 159.67768860]
[636.98376465 172.19123840]
[627.91851807 184.14852905]
[618.10577393 195.50044250]
[607.58593750 206.20033264]
[596.40209961 216.20422363]
[584.60028076 225.47100830]
[572.22900391 233.96260071]
[559.33911133 241.64411926]
[545.98352051 248.48399353]
[532.21710205 254.45410156]
[518.09649658 259.52993774]
[503.67971802 263.69064331]
[489.02593994 266.91906738]
[474.19543457 269.20202637]
[459.24914551 270.53009033]
[444.24844360 270.89779663]
[429.25503540 270.30364990]
[414.33047485 268.75009155]
[399.53613281 266.24349976]
[384.93280029 262.79418945]
[370.58044434 258.41632080]
[356.53808594 253.12786865]
[342.86340332 246.95059204]
[329.61257935 239.90986633]
[316.84011841 232.03462219]
[304.59844971 223.35720825]
[292.93789673 213.91331482]
[281.90637207 203.74171448]
[271.54922485 192.88421631]
[261.90902710 181.38545227]
[253.02532959 169.29264832]
[244.93467712 156.65551758]
[237.67033386 143.52597046]
[231.26211548 129.95797729]
[225.73638916 116.00728607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[5 71]
[6 70]
[7 69]
[8 68]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[25 50]
[26 49]
] def

init

% Start Annotations
1 74 0.0 0.2 colorpair
2 73 0.0 0.2 colorpair
3 72 0.0 0.2 colorpair
5 71 0.0 0.6 colorpair
6 70 0.0 0.6 colorpair
7 69 0.0 0.6 colorpair
8 68 0.0 0.6 colorpair
13 63 0.16 1 colorpair
14 62 0.0 0.6 colorpair
15 61 0.32 0.6 colorpair
16 60 0.0 0.6 colorpair
17 59 0.16 0.6 colorpair
18 58 0.0 0.6 colorpair
19 57 0.16 1 colorpair
20 56 0.16 1 colorpair
21 55 0.16 1 colorpair
25 50 0.32 0.6 colorpair
26 49 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 74 2 gmark
2 73 2 gmark
3 72 2 gmark
5 71 1 gmark
6 70 1 gmark
7 69 1 gmark
8 68 1 gmark
13 cmark
14 62 1 gmark
15 61 1 gmark
15 cmark
61 cmark
16 60 1 gmark
17 59 1 gmark
17 cmark
18 58 1 gmark
57 cmark
20 cmark
21 cmark
25 50 1 gmark
25 cmark
50 cmark
26 49 1 gmark

% End Annotations
showpage
end
%%EOF
