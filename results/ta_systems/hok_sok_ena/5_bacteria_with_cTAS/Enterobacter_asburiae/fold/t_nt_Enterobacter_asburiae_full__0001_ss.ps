%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 15:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCCAUUAAAAACUGCGUUAGGCAUCGUCUUUAUUAUUUGCCUGACGAUAGUGAUCUUUACCUUUAUUACUCGAAGUAAGUUAUGCGAGUUUUCAAUAAAGGGUGAACAGCAGGAGGUGGCGGCAAAAUUAGCCUGUAACGCAG\
) } def
/len { sequence length } bind def

/coor [
[62.25275421 196.18151855]
[73.24160004 185.97146606]
[87.02162933 180.04602051]
[101.99137115 179.09381104]
[116.41111755 183.22549438]
[128.60453796 191.96038818]
[123.04740143 178.02775574]
[117.49026489 164.09512329]
[111.93312836 150.16249084]
[106.37599182 136.22985840]
[100.81885529 122.29723358]
[91.66323090 121.66831207]
[83.18619537 117.29537201]
[76.90636444 109.64213562]
[74.07072449 99.78028870]
[75.41580963 89.24274445]
[60.43664551 90.03304291]
[45.45748138 90.82334900]
[30.47831345 91.61364746]
[15.50831127 92.56182098]
[0.54913604 93.66775513]
[-14.41003895 94.77368927]
[-29.36921310 95.87961578]
[-44.32838821 96.98554993]
[-59.28756332 98.09148407]
[-74.24673462 99.19741821]
[-89.20590973 100.30335236]
[-104.16508484 101.40927887]
[-108.89772797 115.85472107]
[-118.80193329 127.38619995]
[-132.36738586 134.24526978]
[-147.52546692 135.38595581]
[-161.96466064 130.63432312]
[-173.48310852 120.71495056]
[-180.32432556 107.14048004]
[-181.44506836 91.98091888]
[-176.67443848 77.54798126]
[-166.73992920 66.04259491]
[-153.15647888 59.21924591]
[-137.99545288 58.11844254]
[-123.56880188 62.90804672]
[-112.07649994 72.85768890]
[-105.27101898 86.45010376]
[-90.31184387 85.34417725]
[-75.35266876 84.23824310]
[-60.39349747 83.13230896]
[-45.43432236 82.02637482]
[-30.47514534 80.92044830]
[-15.51597118 79.81451416]
[-0.55679655 78.70858002]
[14.40237808 77.60264587]
[20.88500595 73.94812012]
[29.68800926 76.63448334]
[44.66717529 75.84418488]
[59.64634323 75.05387878]
[74.62551117 74.26357269]
[87.25983429 66.17816162]
[94.25221252 52.90764999]
[101.24459076 39.63713074]
[100.83246613 23.82129288]
[113.61058807 16.16827202]
[120.60297394 2.89775443]
[127.59535217 -10.37276268]
[134.58773804 -23.64328003]
[141.58010864 -36.91379547]
[148.57249451 -50.18431473]
[155.42459106 -63.52780914]
[162.13563538 -76.94279480]
[168.84667969 -90.35778046]
[175.55772400 -103.77276611]
[182.26876831 -117.18775940]
[188.97979736 -130.60273743]
[195.11935425 -144.28872681]
[200.67649841 -158.22135925]
[206.23362732 -172.15397644]
[211.79077148 -186.08660889]
[217.34790039 -200.01924133]
[212.97538757 -212.20063782]
[217.94189453 -223.71591187]
[229.06652832 -228.57353210]
[234.91616821 -242.38589478]
[240.76580811 -256.19827271]
[241.37507629 -273.14126587]
[257.82458496 -277.24609375]
[266.32269287 -262.57577515]
[254.57818604 -250.34863281]
[248.72854614 -236.53625488]
[242.87889099 -222.72387695]
[245.99349976 -205.48284912]
[231.28053284 -194.46211243]
[225.72340393 -180.52947998]
[220.16625977 -166.59684753]
[214.60911560 -152.66421509]
[209.05198669 -138.73158264]
[210.09309387 -136.05946350]
[210.10160828 -132.80073547]
[208.84349060 -129.36050415]
[206.24078369 -126.22268677]
[202.39479065 -123.89170074]
[195.68374634 -110.47671509]
[188.97270203 -97.06172180]
[182.26165771 -83.64673615]
[175.55061340 -70.23175049]
[168.83956909 -56.81676483]
[168.65858459 -49.37718964]
[161.84300232 -43.19193268]
[154.85063171 -29.92141724]
[147.85824585 -16.65089989]
[140.86587524 -3.38038254]
[133.87348938 9.89013481]
[126.88111115 23.16065216]
[127.79338074 38.02729416]
[114.51510620 46.62951279]
[107.52272797 59.90002823]
[100.53034973 73.17054749]
[112.42395020 77.23992157]
[120.77769470 86.05101013]
[123.97189331 97.31999207]
[121.65765381 108.36442566]
[114.75148773 116.74009705]
[120.30862427 130.67272949]
[125.86576080 144.60536194]
[131.42289734 158.53799438]
[136.98004150 172.47062683]
[142.53717041 186.40324402]
[150.35441589 199.20523071]
[160.20988464 210.51318359]
[170.06533813 221.82113647]
[179.92080688 233.12908936]
[189.77627563 244.43704224]
[204.74118042 252.40496826]
[201.22737122 268.99078369]
[184.31700134 270.20568848]
[178.46832275 254.29251099]
[168.61285400 242.98455811]
[158.75738525 231.67660522]
[148.90193176 220.36865234]
[139.04646301 209.06069946]
[141.24667358 223.89845276]
[138.33480835 238.61311340]
[130.64926147 251.49458313]
[119.08322906 261.04583740]
[104.98084259 266.15689087]
[89.98104095 266.23376465]
[75.82702637 261.26748657]
[64.16372681 251.83522034]
[56.34659195 239.03317261]
[53.28409958 224.34913635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[16 56]
[17 55]
[18 54]
[19 53]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[57 115]
[58 114]
[59 113]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[72 99]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[80 88]
[81 87]
[82 86]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% Start Annotations
6 125 0.0 1 colorpair
7 124 0.0 1 colorpair
8 123 0.0 1 colorpair
9 122 0.0 1 colorpair
10 121 0.0 1 colorpair
11 120 0.0 1 colorpair
16 56 0.0 1 colorpair
17 55 0.0 1 colorpair
18 54 0.0 1 colorpair
19 53 0.0 1 colorpair
20 51 0.0 1 colorpair
21 50 0.0 1 colorpair
22 49 0.0 1 colorpair
23 48 0.0 1 colorpair
24 47 0.0 1 colorpair
25 46 0.0 1 colorpair
26 45 0.0 1 colorpair
27 44 0.0 1 colorpair
28 43 0.0 1 colorpair
57 115 0.0 1 colorpair
58 114 0.0 0.6 colorpair
59 113 0.0 1 colorpair
61 111 0.0 1 colorpair
62 110 0.0 1 colorpair
63 109 0.0 1 colorpair
64 108 0.0 1 colorpair
65 107 0.0 1 colorpair
66 106 0.0 1 colorpair
67 104 0.0 1 colorpair
68 103 0.0 1 colorpair
69 102 0.0 1 colorpair
70 101 0.0 1 colorpair
71 100 0.0 1 colorpair
72 99 0.0 1 colorpair
73 94 0.0 1 colorpair
74 93 0.0 1 colorpair
75 92 0.0 1 colorpair
76 91 0.0 1 colorpair
77 90 0.0 1 colorpair
80 88 0.0 1 colorpair
81 87 0.0 1 colorpair
82 86 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 0.6 colorpair
130 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
58 114 1 gmark
129 135 1 gmark

% End Annotations
showpage
end
%%EOF
