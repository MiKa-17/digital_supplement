%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 18:08:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGCCUCAGGCAUGAAC_CCAACGGCAGAUAGAGAAAAGCCCC_AGU___________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[213.62263489 67.65048981]
[199.55636597 72.86006927]
[185.49008179 78.06964874]
[180.27922058 83.37310791]
[171.08557129 83.23910522]
[156.91659546 88.16253662]
[142.74761963 93.08596039]
[128.57864380 98.00939178]
[125.76063538 112.53360748]
[116.07185364 123.71491241]
[102.09645844 128.57107544]
[87.56189728 125.80688477]
[76.34477997 116.15958405]
[62.17580795 121.08301544]
[48.00683212 126.00643921]
[33.83785629 130.92987061]
[19.66888046 135.85330200]
[5.49990559 140.77673340]
[-8.66906929 145.70014954]
[-22.83804512 150.62358093]
[-37.00701904 155.54701233]
[-51.07330322 160.75659180]
[-65.03111267 166.25018311]
[-78.98892212 171.74377441]
[-92.89034271 177.37852478]
[-97.38185120 192.35719299]
[-110.47895813 200.90118408]
[-125.99761963 198.97627258]
[-136.61039734 187.49137878]
[-137.30624390 171.86927795]
[-127.75662994 159.48626709]
[-112.47057343 156.18923950]
[-98.66568756 163.53491211]
[-93.67404175 158.02464294]
[-84.48251343 157.78596497]
[-70.52470398 152.29237366]
[-56.56689072 146.79878235]
[-53.85580444 142.80207825]
[-48.57926941 140.49906921]
[-41.93044662 141.37803650]
[-27.76147270 136.45460510]
[-13.59249783 131.53117371]
[0.57647759 126.60774994]
[14.74545288 121.68432617]
[28.91442871 116.76089478]
[43.08340454 111.83746338]
[57.25237656 106.91403961]
[71.42135620 101.99060822]
[74.23936462 87.46639252]
[83.92814636 76.28508759]
[97.90354156 71.42892456]
[112.43810272 74.19311523]
[123.65522003 83.84041595]
[137.82418823 78.91698456]
[151.99316406 73.99356079]
[166.16213989 69.07012939]
[180.28050232 64.00336456]
[194.34678650 58.79378891]
[208.41305542 53.58420944]
[204.11376953 39.20812607]
[200.74440002 24.58612061]
[198.31878662 9.77828217]
[196.84690857 -5.15454149]
[196.33480835 -20.15098763]
[196.78457642 -35.14943314]
[198.19438171 -50.08824539]
[200.55842590 -64.90603638]
[203.86700439 -79.54191589]
[208.10650635 -93.93574524]
[213.25952148 -108.02837372]
[219.30487061 -121.76188660]
[226.21769714 -135.07986450]
[233.96961975 -147.92756653]
[242.52877808 -160.25219727]
[251.85998535 -172.00311279]
[261.92489624 -183.13203430]
[272.68218994 -193.59323120]
[284.08761597 -203.34370422]
[296.09432983 -212.34339905]
[308.65301514 -220.55532837]
[321.71200562 -227.94573975]
[335.21768188 -234.48426819]
[349.11453247 -240.14405823]
[363.34545898 -244.90184021]
[377.85195923 -248.73805237]
[392.57446289 -251.63696289]
[407.45245361 -253.58662415]
[422.42480469 -254.57904053]
[437.42993164 -254.61013794]
[452.40625000 -253.67979431]
[467.29220581 -251.79180908]
[482.02658081 -248.95396423]
[496.54888916 -245.17790222]
[510.79940796 -240.47915649]
[524.71960449 -234.87701416]
[538.25225830 -228.39451599]
[551.34179688 -221.05830383]
[563.93438721 -212.89849854]
[575.97827148 -203.94865417]
[587.42407227 -194.24552917]
[598.22460938 -183.82902527]
[608.33557129 -172.74191284]
[617.71539307 -161.02976990]
[626.32556152 -148.74072266]
[634.13067627 -135.92526245]
[641.09863281 -122.63605499]
[647.20086670 -108.92771912]
[652.41223145 -94.85656738]
[656.71136475 -80.48043823]
[660.08056641 -65.85839844]
[662.50604248 -51.05053329]
[663.97778320 -36.11769104]
[664.48968506 -21.12123871]
[664.03973389 -6.12279892]
[662.62976074 8.81599808]
[660.26556396 23.63376236]
[656.95684814 38.26960754]
[652.71716309 52.66338730]
[647.56402588 66.75595856]
[641.51849365 80.48941040]
[634.60552979 93.80730438]
[626.85345459 106.65491486]
[618.29418945 118.97945404]
[608.96282959 130.73027039]
[598.89776611 141.85908508]
[588.14038086 152.32015991]
[576.73486328 162.07051086]
[564.72802734 171.07006836]
[552.16925049 179.28186035]
[539.11016846 186.67211914]
[525.60443115 193.21051025]
[511.70751953 198.87013245]
[497.47656250 203.62776184]
[482.97000122 207.46382141]
[468.24746704 210.36254883]
[453.36944580 212.31205750]
[438.39709473 213.30430603]
[423.39193726 213.33523560]
[408.41564941 212.40472412]
[393.52972412 210.51657104]
[378.79534912 207.67855835]
[364.27310181 203.90234375]
[350.02264404 199.20343018]
[336.10250854 193.60115051]
[322.56991577 187.11849976]
[309.48046875 179.78213501]
[296.88796997 171.62219238]
[284.84417725 162.67221069]
[273.39852905 152.96897888]
[262.59808350 142.55233765]
[252.48724365 131.46511841]
[243.10752869 119.75286865]
[234.49749756 107.46372223]
[226.69253540 94.64817810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[5 56]
[6 55]
[7 54]
[8 53]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 37]
[23 36]
[24 35]
[25 33]
] def

init

% Start Annotations
1 59 0.0 1 colorpair
2 58 0.0 1 colorpair
3 57 0.0 1 colorpair
5 56 0.0 1 colorpair
6 55 0.0 1 colorpair
7 54 0.0 1 colorpair
8 53 0.0 1 colorpair
13 48 0.0 1 colorpair
14 47 0.0 1 colorpair
15 46 0.0 1 colorpair
16 45 0.0 1 colorpair
17 44 0.0 1 colorpair
18 43 0.0 1 colorpair
19 42 0.0 1 colorpair
20 41 0.16 1 colorpair
21 40 0.0 1 colorpair
22 37 0.0 1 colorpair
23 36 0.0 0.6 colorpair
24 35 0.16 1 colorpair
25 33 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 cmark
23 36 1 gmark
24 cmark
35 cmark

% End Annotations
showpage
end
%%EOF
