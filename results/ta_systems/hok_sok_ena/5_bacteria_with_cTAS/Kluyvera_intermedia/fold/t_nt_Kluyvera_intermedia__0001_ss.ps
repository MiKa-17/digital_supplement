%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan  9 17:50:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCACAAAAAUCUAUGUUGUAUAGUUUGAUAGUGAUAUGUCUCACUAUUCUAUUAUUUACCUGGAUGGUUCGUGAUUCAUUAUGCGAAUUGCAUAUUAAGCAAGGAAAUAAUGAGGUCGCGGCAUCUUUAGCCUGUGAUAUUAACCAGUAA\
) } def
/len { sequence length } bind def

/coor [
[40.21215057 137.42210388]
[47.75679779 124.45760345]
[59.01725769 114.54791260]
[72.83550262 108.71214294]
[87.78980255 107.55040741]
[72.83971405 106.32776642]
[57.88962555 105.10513306]
[42.92784500 104.03504181]
[27.95592690 103.11761475]
[16.17731476 113.31085205]
[1.00672996 112.16717529]
[-8.63837624 100.87525177]
[-23.61029434 99.95782471]
[-38.58221054 99.04040527]
[-53.55413055 98.12297821]
[-68.52604675 97.20555115]
[-82.77361298 104.08432770]
[-95.00382996 95.58309174]
[-109.97574615 94.66566467]
[-118.99939728 104.71354675]
[-131.97753906 107.66755676]
[-144.10054016 102.66366577]
[-151.00804138 91.74501038]
[-165.95812988 90.52236938]
[-180.90821838 89.29973602]
[-195.85830688 88.07709503]
[-210.80839539 86.85445404]
[-222.79248047 96.80530548]
[-237.93658447 95.35240173]
[-247.34933472 83.86608124]
[-262.29943848 82.64344788]
[-277.24951172 81.42080688]
[-292.19961548 80.19816589]
[-307.14968872 78.97552490]
[-322.09979248 77.75289154]
[-337.04986572 76.53025055]
[-351.99996948 75.30760956]
[-363.88528442 85.72464752]
[-379.64971924 84.60305786]
[-389.94052124 72.60826111]
[-388.65231323 56.85656357]
[-376.54940796 46.69316101]
[-360.81219482 48.14781952]
[-350.77731323 60.35752106]
[-335.82723999 61.58016205]
[-320.87713623 62.80279922]
[-305.92706299 64.02543640]
[-290.97695923 65.24807739]
[-276.02688599 66.47071838]
[-261.07678223 67.69335938]
[-246.12670898 68.91599274]
[-234.97276306 59.11164856]
[-219.79382324 60.13861084]
[-209.58575439 71.90436554]
[-194.63566589 73.12700653]
[-179.68557739 74.34964752]
[-164.73548889 75.57228088]
[-149.78540039 76.79492188]
[-137.47253418 65.37919617]
[-120.37488556 66.39160156]
[-109.05831909 79.69374847]
[-94.08640289 80.61116791]
[-80.90973663 73.66677856]
[-67.60861969 82.23363495]
[-52.63670349 83.15106201]
[-37.66478729 84.06848145]
[-22.69286919 84.98590851]
[-7.72095108 85.90333557]
[3.23067451 75.87350464]
[18.42739677 76.59062195]
[28.87335014 88.14569855]
[43.84526825 89.06312561]
[50.75556564 86.31656647]
[59.11226654 90.15504456]
[74.06235504 91.37767792]
[89.01244354 92.60031891]
[93.18978119 82.31072998]
[105.93673706 76.06227875]
[117.07024384 66.01016998]
[128.20375061 55.95806122]
[139.33726501 45.90595245]
[150.47077942 35.85383987]
[161.60429382 25.80173111]
[172.73780823 15.74962139]
[183.87132263 5.69751120]
[180.23521423 -7.84343910]
[182.78883362 -21.56216049]
[190.97550964 -32.78076172]
[203.14472961 -39.33454895]
[216.88462830 -39.98959351]
[229.49996948 -34.67469406]
[240.83621216 -44.49760818]
[252.17245483 -54.32051849]
[263.50869751 -64.14342499]
[263.07971191 -79.77512360]
[272.83938599 -91.99325562]
[288.17950439 -95.02879333]
[301.85693359 -87.44844818]
[307.41363525 -72.83142853]
[302.22586060 -58.07944489]
[288.74313354 -50.15793228]
[273.33160400 -52.80718613]
[261.99536133 -42.98427582]
[250.65911865 -33.16136169]
[239.32287598 -23.33845139]
[242.77186584 -7.58021545]
[237.79112244 7.86131811]
[225.64491272 18.75935936]
[209.57223511 22.08104897]
[193.92343140 16.83102417]
[182.78991699 26.88313293]
[171.65640259 36.93524170]
[160.52288818 46.98735428]
[149.38937378 57.03946304]
[138.25587463 67.09157562]
[127.12235260 77.14368439]
[115.98884583 87.19579315]
[117.21148682 102.14588165]
[129.83029175 110.25549316]
[142.44909668 118.36510468]
[155.06788635 126.47471619]
[167.68669128 134.58433533]
[180.38755798 142.56480408]
[193.16915894 150.41532898]
[205.95075989 158.26585388]
[220.72708130 153.14779663]
[235.31770325 158.77343750]
[242.83337402 172.48651123]
[239.72544861 187.81213379]
[227.46136475 197.51400757]
[211.83187866 197.01121521]
[200.21672058 186.54115295]
[198.10023499 171.04745483]
[185.31863403 163.19692993]
[172.53703308 155.34642029]
[165.14692688 154.52059937]
[159.57708740 147.20314026]
[146.95828247 139.09352112]
[134.33947754 130.98390198]
[121.72067261 122.87429810]
[109.10186768 114.76468658]
[120.27613068 124.77147675]
[127.70827484 137.80079651]
[130.63397217 152.51271057]
[128.75233459 167.39422607]
[122.25688934 180.91491699]
[111.81562042 191.68432617]
[98.50231934 198.59489441]
[83.68613434 200.93594360]
[68.89076233 198.46672058]
[55.63777542 191.44117737]
[45.29012299 180.58180237]
[38.91195679 167.00538635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[8 72]
[9 71]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[18 62]
[19 61]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[91 105]
[92 104]
[93 103]
[94 102]
[118 141]
[119 140]
[120 139]
[121 138]
[122 137]
[123 135]
[124 134]
[125 133]
] def

init

% Start Annotations
5 76 0.0 1 colorpair
6 75 0.0 1 colorpair
7 74 0.0 1 colorpair
8 72 0.0 1 colorpair
9 71 0.0 1 colorpair
12 68 0.0 1 colorpair
13 67 0.0 1 colorpair
14 66 0.0 1 colorpair
15 65 0.0 1 colorpair
16 64 0.0 1 colorpair
18 62 0.0 1 colorpair
19 61 0.0 1 colorpair
23 58 0.0 1 colorpair
24 57 0.0 1 colorpair
25 56 0.0 1 colorpair
26 55 0.0 1 colorpair
27 54 0.0 1 colorpair
30 51 0.0 1 colorpair
31 50 0.0 1 colorpair
32 49 0.0 1 colorpair
33 48 0.0 1 colorpair
34 47 0.0 1 colorpair
35 46 0.0 1 colorpair
36 45 0.0 1 colorpair
37 44 0.0 1 colorpair
78 117 0.0 1 colorpair
79 116 0.0 1 colorpair
80 115 0.0 1 colorpair
81 114 0.0 1 colorpair
82 113 0.0 1 colorpair
83 112 0.0 1 colorpair
84 111 0.0 1 colorpair
85 110 0.0 1 colorpair
91 105 0.0 1 colorpair
92 104 0.0 1 colorpair
93 103 0.0 1 colorpair
94 102 0.0 1 colorpair
118 141 0.0 1 colorpair
119 140 0.0 1 colorpair
120 139 0.0 1 colorpair
121 138 0.0 1 colorpair
122 137 0.0 1 colorpair
123 135 0.0 1 colorpair
124 134 0.0 1 colorpair
125 133 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
