%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 07:43:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGUCUCAGGCAUUAGCAC__AAC_GGCAGAUAGAGAAAAGCCCCAGG_____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[-14.35428333 416.59313965]
[-28.34398270 411.18472290]
[-42.07886887 405.15850830]
[-55.53166580 398.52639771]
[-68.67567444 391.30160522]
[-81.48479462 383.49847412]
[-93.93358612 375.13247681]
[-102.84660339 387.19720459]
[-111.75962067 399.26196289]
[-120.67263031 411.32672119]
[-129.58564758 423.39147949]
[-138.49867249 435.45620728]
[-134.66073608 450.61550903]
[-141.51142883 464.67260742]
[-155.81605530 470.99017334]
[-170.82040405 466.58526611]
[-179.43989563 453.53771973]
[-177.60464478 438.00817871]
[-166.18122864 427.32925415]
[-150.56341553 426.54321289]
[-141.65039062 414.47845459]
[-132.73738098 402.41369629]
[-123.82436371 390.34893799]
[-114.91135406 378.28421021]
[-105.99833679 366.21945190]
[-117.65307617 356.77859497]
[-128.87568665 346.82794189]
[-139.64387512 336.38723755]
[-149.93627930 325.47720337]
[-159.73246765 314.11950684]
[-169.01296997 302.33670044]
[-177.75938416 290.15216064]
[-185.95431519 277.59008789]
[-193.58152771 264.67544556]
[-200.62585449 251.43383789]
[-207.07331848 237.89158630]
[-212.91111755 224.07556152]
[-218.12767029 210.01318359]
[-222.71260071 195.73240662]
[-226.65681458 181.26155090]
[-229.95248413 166.62934875]
[-232.59306335 151.86488342]
[-234.57331848 136.99742126]
[-235.88929749 122.05651855]
[-236.53840637 107.07182312]
[-236.51936340 92.07308197]
[-235.83216858 77.09008026]
[-234.47822571 62.15256882]
[-232.46020508 47.29019547]
[-229.78211975 32.53247452]
[-226.44927979 17.90870476]
[-222.46830750 3.44791746]
[-217.84710693 -10.82117462]
[-212.59484863 -24.87024117]
[-206.72195435 -38.67139053]
[-200.24009705 -52.19721985]
[-193.16215515 -65.42087555]
[-185.50215149 -78.31610870]
[-177.27531433 -90.85730743]
[-168.49798584 -103.01957703]
[-159.18756104 -114.77877045]
[-149.36254883 -126.11154175]
[-139.04246521 -136.99539185]
[-128.24777222 -147.40870667]
[-116.99991608 -157.33081055]
[-105.32122803 -166.74201965]
[-93.23489380 -175.62364197]
[-80.76491547 -183.95802307]
[-67.93603516 -191.72863770]
[-54.77374268 -198.92005920]
[-41.30415726 -205.51800537]
[-27.55402946 -211.50936890]
[-13.55065250 -216.88224792]
[0.67816782 -221.62600708]
[15.10418224 -225.73120117]
[29.69874954 -229.18968201]
[44.43289185 -231.99459839]
[59.27735901 -234.14036560]
[74.20267487 -235.62272644]
[89.17921448 -236.43873596]
[104.17723083 -236.58679199]
[119.16696167 -236.06657410]
[134.11863708 -234.87913513]
[149.00256348 -233.02682495]
[163.78919983 -230.51332092]
[178.44920349 -227.34361267]
[192.95344543 -223.52398682]
[207.27313232 -219.06204224]
[221.37983704 -213.96662903]
[235.24555969 -208.24786377]
[248.84277344 -201.91711426]
[262.14447021 -194.98692322]
[275.12423706 -187.47106934]
[287.75631714 -179.38446045]
[300.01562500 -170.74317932]
[311.87780762 -161.56434631]
[323.31933594 -151.86621094]
[334.31747437 -141.66801453]
[344.85043335 -130.99000549]
[354.89721680 -119.85339355]
[364.43795776 -108.28028107]
[373.45367432 -96.29364777]
[381.92648315 -83.91729736]
[389.83953857 -71.17578888]
[397.17715454 -58.09443283]
[403.92474365 -44.69919205]
[410.06893921 -31.01666641]
[415.59750366 -17.07401848]
[420.49948120 -2.89893246]
[424.76513672 11.48045063]
[428.38601685 26.03557968]
[431.35491943 40.73756027]
[433.66592407 55.55719757]
[435.31448364 70.46507263]
[436.29730225 85.43158722]
[436.61242676 100.42703247]
[436.25924683 115.42162323]
[435.23846436 130.38558960]
[433.55209351 145.28924561]
[431.20349121 160.10296631]
[428.19729614 174.79736328]
[424.53952026 189.34326172]
[420.23739624 203.71177673]
[415.29943848 217.87437439]
[409.73553467 231.80294800]
[403.55664062 245.46984863]
[396.77508545 258.84793091]
[389.40429688 271.91061401]
[381.45892334 284.63201904]
[372.95477295 296.98681641]
[363.90866089 308.95053101]
[354.33859253 320.49942017]
[344.26354980 331.61050415]
[333.70358276 342.26174927]
[322.67959595 352.43200684]
[311.21347046 362.10107422]
[299.32803345 371.24978638]
[287.04684448 379.85995483]
[274.39428711 387.91445923]
[261.39550781 395.39736938]
[248.07626343 402.29379272]
[234.46304321 408.59002686]
[220.58285522 414.27359009]
[206.46325684 419.33319092]
[192.13229370 423.75878906]
[177.61840820 427.54159546]
[162.95042419 430.67410278]
[148.15744019 433.15008545]
[133.26885986 434.96463013]
[118.31422424 436.11413574]
[103.32322693 436.59631348]
[88.32563019 436.41018677]
[73.35121155 435.55618286]
[58.42970657 434.03594971]
[43.59073257 431.85253906]
[28.86375237 429.01025391]
[14.27800751 425.51473999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
] def

init

% Start Annotations
9 23 0.16 0.6 colorpair
10 22 0.32 1 colorpair
11 21 0.32 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 25 3 gmark
7 cmark
25 cmark
8 24 3 gmark
24 cmark
9 23 1 gmark
23 cmark
10 cmark
22 cmark
11 21 2 gmark
11 cmark
21 cmark
12 20 3 gmark
20 cmark

% End Annotations
showpage
end
%%EOF
