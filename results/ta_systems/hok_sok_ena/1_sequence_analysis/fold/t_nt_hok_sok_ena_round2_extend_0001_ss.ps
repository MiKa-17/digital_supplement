%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 02:01:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUGCCACGAAACACCCUUCUCUGGUGCGUAUUAAUAGUGUGUCUCACACUGUUGAUAUUCACUUACCUGACACGGAAAUCGCUGUGCGAAAUCCGGUACAGGGACGGGAACAGGGAGGUGGCGGCUUUUAUGGCUUACGAAUCCGGU_AAGUAG_\
) } def
/len { sequence length } bind def

/coor [
[105.85078430 333.99157715]
[101.74697876 327.32556152]
[98.24538422 320.32366943]
[95.37326050 313.04019165]
[93.15299988 305.53158569]
[91.60195923 297.85607910]
[90.73227692 290.07315063]
[90.55082703 282.24322510]
[91.05912781 274.42703247]
[92.25336456 266.68521118]
[94.12438202 259.07785034]
[96.65778351 251.66398621]
[99.83403015 244.50120544]
[103.62858582 237.64511108]
[108.01211548 231.14895630]
[112.95070648 225.06321716]
[118.40613556 219.43516541]
[124.33616638 214.30856323]
[130.69487000 209.72328186]
[137.43298340 205.71498108]
[131.49179077 191.94174194]
[125.55059052 178.16850281]
[104.13365173 182.13439941]
[82.42675018 180.33883667]
[61.95255661 172.90774536]
[44.14727020 160.36241150]
[30.25988197 143.58282471]
[21.26454544 123.74605560]
[17.79225349 102.24357605]
[20.08657837 80.58370972]
[5.89435625 75.72769928]
[-8.29786587 70.87168884]
[-23.85970116 73.72473907]
[-33.39675903 62.28385925]
[-47.58898163 57.42784882]
[-61.78120422 52.57183838]
[-75.97342682 47.71583176]
[-90.16564941 42.85982132]
[-104.35787201 38.00381088]
[-117.03469086 46.75620270]
[-132.25653076 46.37034988]
[-144.19123840 37.20373154]
[-148.38951111 22.93795013]
[-162.58174133 18.08194160]
[-176.77395630 13.22593212]
[-190.96618652 8.36992359]
[-205.15840149 3.51391411]
[-222.10197449 4.10698223]
[-227.36230469 -12.01025009]
[-213.33114624 -21.52670670]
[-200.30239868 -10.67830849]
[-186.11016846 -5.82229900]
[-171.91795349 -0.96629006]
[-157.72572327 3.88971901]
[-143.53350830 8.74572849]
[-131.47599792 0.04202546]
[-116.42741394 0.10800303]
[-104.15980530 9.12793541]
[-99.50186157 23.81159019]
[-85.30963898 28.66759872]
[-71.11741638 33.52360916]
[-56.92519379 38.37961578]
[-42.73297119 43.23562622]
[-28.54074860 48.09163666]
[-13.99403763 44.89125443]
[-3.44185710 56.67947006]
[10.75036526 61.53547668]
[24.94258690 66.39148712]
[30.39978981 56.19408798]
[37.23361206 46.86312485]
[45.30888367 38.58315277]
[54.46589279 31.51794052]
[64.52352142 25.80723381]
[75.28282928 21.56398201]
[86.53102875 18.87211418]
[98.04562378 17.78487015]
[109.59886932 18.32375526]
[120.96226501 20.47811317]
[126.09256744 6.38272285]
[131.22286987 -7.71266603]
[136.35317993 -21.80805588]
[141.48347473 -35.90344620]
[131.73069763 -47.68608856]
[129.20175171 -62.66945267]
[134.47708130 -76.81291199]
[146.04608154 -86.35303497]
[160.73805237 -88.80495453]
[165.86834717 -102.90033722]
[165.60395813 -119.85222626]
[181.82015991 -124.79904175]
[191.06274414 -110.58598328]
[179.96374512 -97.77003479]
[174.83343506 -83.67465210]
[184.51206970 -72.35256195]
[187.24217224 -57.60798645]
[182.19206238 -43.38255692]
[170.62365723 -33.53020859]
[155.57885742 -30.77314186]
[150.44856262 -16.67775345]
[145.31826782 -2.58236408]
[140.18795776 11.51302528]
[135.05766296 25.60841370]
[144.37551880 30.76156998]
[152.94947815 37.07544327]
[160.63578796 44.44418335]
[167.30558777 52.74426651]
[172.84709167 61.83654785]
[177.16737366 71.56859589]
[180.19401550 81.77727509]
[181.87628174 92.29144287]
[182.18597412 102.93483734]
[181.11788940 113.52902222]
[178.68995667 123.89641571]
[174.94285583 133.86320496]
[169.93940735 143.26231384]
[163.76348877 151.93617249]
[156.51863098 159.73936462]
[148.32630920 166.54107666]
[139.32383728 172.22731018]
[145.26502991 186.00054932]
[151.20622253 199.77378845]
[176.66560364 195.25701904]
[202.33737183 198.24822998]
[226.05514526 208.48835754]
[245.81935120 225.10687256]
[259.96578979 246.69584656]
[267.30578613 271.42916870]
[267.22607422 297.21701050]
[259.73995972 321.88244629]
[272.73034668 329.38244629]
[285.72070312 336.88244629]
[300.35238647 331.36441040]
[315.09060669 336.59115601]
[322.97644043 350.09478760]
[320.28646851 365.49926758]
[308.29077148 375.53109741]
[292.65338135 375.45355225]
[280.75778198 365.30322266]
[278.22070312 349.87283325]
[265.23034668 342.37283325]
[252.23995972 334.87283325]
[247.50340271 341.08636475]
[242.23799133 346.85949707]
[236.48449707 352.14733887]
[230.28746033 356.90878296]
[223.69490051 361.10684204]
[216.75790405 364.70877075]
[209.53022766 367.68658447]
[202.06790161 370.01699829]
[194.42878723 371.68188477]
[186.67213440 372.66818237]
[178.85809326 372.96810913]
[171.04728699 372.57925415]
[163.30033875 371.50445557]
[155.67735291 369.75198364]
[148.23750305 367.33529663]
[141.03855896 364.27304077]
[134.13639832 360.58886719]
[127.58464050 356.31124878]
[121.43418121 351.47326660]
[115.73281097 346.11236572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 121]
[21 120]
[22 119]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[87 93]
[88 92]
[129 141]
[130 140]
[131 139]
] def

init

% Start Annotations
20 121 0.0 0.2 colorpair
22 119 0.16 0.6 colorpair
30 68 0.0 1 colorpair
31 67 0.0 0.2 colorpair
32 66 0.16 1 colorpair
34 64 0.0 1 colorpair
35 63 0.16 0.6 colorpair
36 62 0.16 0.2 colorpair
37 61 0.16 0.2 colorpair
38 60 0.16 1 colorpair
43 55 0.16 0.6 colorpair
44 54 0.16 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
47 51 0.0 1 colorpair
79 101 0.0 0.6 colorpair
80 100 0.0 1 colorpair
82 98 0.0 0.6 colorpair
88 92 0.16 1 colorpair
129 141 0.32 0.2 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 121 2 gmark
21 120 4 gmark
21 cmark
22 119 1 gmark
22 cmark
31 67 2 gmark
66 cmark
35 63 1 gmark
63 cmark
36 62 2 gmark
36 cmark
37 61 2 gmark
61 cmark
60 cmark
39 59 3 gmark
39 cmark
43 55 1 gmark
55 cmark
54 cmark
78 102 10 gmark
78 cmark
102 cmark
79 101 1 gmark
81 99 10 gmark
81 cmark
99 cmark
82 98 1 gmark
87 93 14 gmark
87 cmark
93 cmark
88 cmark
129 141 2 gmark
129 cmark
141 cmark

% End Annotations
showpage
end
%%EOF
