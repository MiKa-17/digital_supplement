%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 02:01:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GGGUGCUUGAGGCUGUCUGUCU_CAGGCAUUAG__CUGAACGGCAGAUAGAGAAAAGCCCCGAGUGAUA_UUUUACCAUCAACCCGAGGCCCCCUA_UAUGCUGAACACAUGUAGAGUGCCUCUUACUGACCGUAAGGUCAAGGAGAAGAGAGCAAUG\
) } def
/len { sequence length } bind def

/coor [
[220.56858826 159.90270996]
[196.26368713 153.18867493]
[172.93374634 143.61904907]
[150.91293335 131.33061218]
[130.51672363 116.49911499]
[112.03733063 99.33669281]
[101.02249146 109.51870728]
[96.97705841 117.76766205]
[89.89384460 120.01039886]
[78.87900543 130.19241333]
[67.86416626 140.37442017]
[62.98247910 155.42366028]
[48.38447189 158.38127136]
[37.36963272 168.56327820]
[26.35479546 178.74528503]
[30.39259338 193.50857544]
[27.09571838 208.45478821]
[17.22176552 220.14939880]
[3.03969812 225.90504456]
[-12.19154835 224.39915466]
[-24.97194481 215.97775269]
[-32.36465073 202.57600403]
[-32.67087555 187.27355957]
[-25.82025146 173.58680725]
[-13.38700104 164.66082764]
[1.77180505 162.54678345]
[16.17278481 167.73045349]
[27.18762207 157.54844666]
[38.20246124 147.36642456]
[42.29629517 133.04547119]
[57.68215942 129.35958862]
[68.69699860 119.17757416]
[79.71183777 108.99555969]
[90.62618256 98.70590210]
[91.92265320 93.56542969]
[96.03005219 89.53650665]
[102.07353973 88.12406921]
[95.24806213 79.41072083]
[88.88948822 70.35112000]
[83.01535034 60.97026825]
[77.64183044 51.29403687]
[72.78375244 41.34912109]
[68.45450592 31.16294670]
[64.66601562 20.76361847]
[61.42873383 10.17981911]
[58.75157166 -0.55926043]
[56.64191055 -11.42399693]
[55.10555649 -22.38442421]
[54.14673615 -33.41031265]
[53.76809311 -44.47125244]
[53.97065735 -55.53673172]
[54.75386047 -66.57623291]
[56.11553955 -77.55931854]
[58.05192566 -88.45568085]
[60.55767059 -99.23528290]
[63.62585449 -109.86839294]
[67.24800873 -120.32568359]
[71.41413879 -130.57832336]
[76.11273193 -140.59802246]
[81.33083344 -150.35716248]
[87.05404663 -159.82882690]
[93.26657104 -168.98690796]
[99.95127106 -177.80613708]
[107.08969116 -186.26220703]
[114.66215515 -194.33178711]
[122.64775848 -201.99263000]
[131.02447510 -209.22363281]
[139.76919556 -216.00483704]
[148.85778809 -222.31756592]
[158.26519775 -228.14439392]
[167.96545410 -233.46925354]
[177.93182373 -238.27749634]
[188.13679504 -242.55586243]
[198.55221558 -246.29252625]
[209.14936829 -249.47723389]
[219.89903259 -252.10118103]
[230.77154541 -254.15715027]
[241.73690796 -255.63948059]
[252.76489258 -256.54409790]
[263.82507324 -256.86846924]
[274.88696289 -256.61178589]
[285.92004395 -255.77471924]
[296.89385986 -254.35957336]
[307.77816772 -252.37030029]
[318.54296875 -249.81236267]
[329.15853882 -246.69284058]
[339.59564209 -243.02033997]
[349.82546997 -238.80499268]
[359.81979370 -234.05844116]
[369.55108643 -228.79377747]
[378.99252319 -223.02554321]
[388.11801147 -216.76963806]
[396.90243530 -210.04333496]
[405.32156372 -202.86518860]
[413.35214233 -195.25500488]
[420.97210693 -187.23377991]
[428.16036987 -178.82362366]
[434.89718628 -170.04777527]
[441.16390991 -160.93040466]
[446.94329834 -151.49668884]
[452.21942139 -141.77262878]
[456.97772217 -131.78507996]
[461.20510864 -121.56156158]
[464.88992310 -111.13029480]
[468.02197266 -100.52004242]
[470.59268188 -89.76006317]
[472.59494019 -78.88005066]
[474.02322388 -67.91001129]
[474.87359619 -56.88019562]
[475.14376831 -45.82102585]
[474.83297729 -34.76300812]
[473.94207764 -23.73663712]
[472.47354126 -12.77232456]
[470.43145752 -1.90030968]
[467.82141113 8.84942341]
[464.65063477 19.44722939]
[460.92788696 29.86388206]
[456.66345215 40.07065201]
[451.86911011 50.03939438]
[446.55804443 59.74261856]
[440.74493408 69.15356445]
[434.44580078 78.24628448]
[446.22555542 87.53269196]
[458.00531006 96.81909943]
[469.78506470 106.10551453]
[481.56481934 115.39192200]
[493.75579834 106.48783875]
[507.89739990 101.20410156]
[522.94024658 99.93281555]
[537.76800537 102.76830292]
[551.28039551 109.50016022]
[562.47467041 119.62882996]
[570.52020264 132.40270996]
[574.81994629 146.87388611]
[575.05480957 161.96850586]
[571.20733643 176.56643677]
[563.56311035 189.58442688]
[552.68933105 200.05645752]
[539.39288330 207.20541382]
[524.66052246 210.50082397]
[509.58541870 209.69812012]
[495.28628540 204.85688782]
[482.82421875 196.33638000]
[473.12396240 184.76885986]
[466.90533447 171.01271057]
[464.62982178 156.08876038]
[466.46627808 141.10443115]
[472.27841187 127.17167664]
[460.49865723 117.88526154]
[448.71890259 108.59885406]
[436.93914795 99.31244659]
[425.15939331 90.02603912]
[407.74603271 108.24862671]
[388.27975464 124.26144409]
[367.03915405 137.83497620]
[344.32824707 148.77464294]
[320.47213745 156.92352295]
[295.81231689 162.16468811]
[270.70187378 164.42282104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 34]
[9 33]
[10 32]
[11 31]
[13 29]
[14 28]
[15 27]
[122 152]
[123 151]
[124 150]
[125 149]
[126 148]
] def

init

% Start Annotations
6 37 0.0 0.6 colorpair
9 33 0.16 1 colorpair
11 31 0.0 1 colorpair
13 29 0.16 1 colorpair
14 28 0.0 0.6 colorpair
15 27 0.32 1 colorpair
122 152 0.16 1 colorpair
125 149 0.32 1 colorpair
126 148 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 37 1 gmark
7 34 4 gmark
7 cmark
33 cmark
10 32 4 gmark
32 cmark
13 cmark
29 cmark
14 28 1 gmark
15 cmark
27 cmark
122 cmark
123 151 3 gmark
123 cmark
151 cmark
124 150 3 gmark
124 cmark
150 cmark
125 cmark
149 cmark
126 148 1 gmark
126 cmark
148 cmark

% End Annotations
showpage
end
%%EOF
