%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 15:08:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGCCUCAGGCAUGAAC_ACC_AAA_GGCAGAUAGAGAAAAGCC_CCAGUUAACA_UUA_CGCGUCCUGCAAGACGCUUA_ACAUUAAUCU_GAGGC_CAAAUCUA_UGCUUGACACAUGUAGAUUAGCCUCUUACGGA_CCGAAAGGCA______________\
) } def
/len { sequence length } bind def

/coor [
[-18.09008789 473.28747559]
[-32.30135727 468.49038696]
[-46.31845474 463.15249634]
[-60.12081146 457.28161621]
[-73.68817139 450.88635254]
[-87.00061798 443.97613525]
[-100.03861237 436.56109619]
[-107.94811249 449.30627441]
[-115.85761261 462.05148315]
[-123.76711273 474.79666138]
[-131.67660522 487.54183960]
[-139.58610535 500.28704834]
[-134.53639221 515.08685303]
[-140.22938538 529.65130615]
[-153.97705078 537.10357666]
[-169.28814697 533.92480469]
[-178.93325806 521.61602783]
[-178.35823059 505.98904419]
[-167.83460999 494.42239380]
[-152.33129883 492.37753296]
[-144.42179871 479.63235474]
[-136.51229858 466.88717651]
[-128.60279846 454.14196777]
[-120.69329834 441.39678955]
[-112.78379822 428.65161133]
[-125.21590424 420.26022339]
[-137.31747437 411.39883423]
[-149.07075500 402.08041382]
[-160.45848083 392.31866455]
[-171.46394348 382.12786865]
[-182.07101440 371.52304077]
[-192.26409912 360.51971436]
[-202.02824402 349.13403320]
[-211.34910583 337.38269043]
[-220.21304321 325.28298950]
[-228.60700989 312.85263062]
[-236.51870728 300.10989380]
[-243.93652344 287.07348633]
[-250.84956360 273.76251221]
[-257.24768066 260.19650269]
[-263.12149048 246.39538574]
[-268.46237183 232.37940979]
[-273.26245117 218.16915894]
[-277.51477051 203.78547668]
[-281.21298218 189.24948120]
[-284.35174561 174.58248901]
[-286.92642212 159.80604553]
[-288.93322754 144.94181824]
[-290.36920166 130.01164246]
[-291.23226929 115.03742218]
[-291.52114868 100.04112244]
[-291.23541260 85.04476929]
[-290.37551880 70.07036591]
[-288.94265747 55.13988113]
[-286.93896484 40.27523804]
[-284.36740112 25.49825287]
[-281.23175049 10.83060551]
[-277.53656006 -3.70617247]
[-273.28729248 -18.09074783]
[-268.49017334 -32.30200958]
[-263.15222168 -46.31909943]
[-257.28131104 -60.12144470]
[-250.88604736 -73.68878937]
[-243.97581482 -87.00122070]
[-236.56074524 -100.03920746]
[-228.65171814 -112.78360748]
[-220.26036072 -125.21572113]
[-211.39897156 -137.31729126]
[-202.08056641 -149.07057190]
[-192.31881714 -160.45831299]
[-182.12803650 -171.46379089]
[-171.52320862 -182.07084656]
[-160.51988220 -192.26393127]
[-149.13420105 -202.02809143]
[-137.38288879 -211.34896851]
[-125.28318024 -220.21290588]
[-112.85283661 -228.60688782]
[-100.11010742 -236.51860046]
[-87.07368469 -243.93641663]
[-73.76270294 -250.84945679]
[-60.19670486 -257.24758911]
[-46.39559555 -263.12139893]
[-32.37963104 -268.46228027]
[-18.16938210 -273.26239014]
[-3.78570318 -277.51470947]
[10.75029659 -281.21295166]
[25.41728210 -284.35171509]
[40.19372940 -286.92639160]
[55.05794907 -288.93319702]
[69.98812866 -290.36920166]
[84.96234894 -291.23226929]
[99.95864868 -291.52114868]
[114.95500183 -291.23544312]
[129.92941284 -290.37551880]
[144.85989380 -288.94268799]
[159.72453308 -286.93902588]
[174.50152588 -284.36746216]
[189.16917419 -281.23178101]
[203.70594788 -277.53662109]
[218.09053040 -273.28735352]
[232.30178833 -268.49023438]
[246.31887817 -263.15231323]
[260.12124634 -257.28140259]
[273.68856812 -250.88615417]
[287.00100708 -243.97592163]
[300.03900146 -236.56086731]
[312.78341675 -228.65185547]
[325.21551514 -220.26049805]
[337.31710815 -211.39910889]
[349.07040405 -202.08071899]
[360.45812988 -192.31896973]
[371.46362305 -182.12820435]
[382.07067871 -171.52337646]
[392.26379395 -160.52005005]
[402.02795410 -149.13438416]
[411.34884644 -137.38307190]
[420.21276855 -125.28337097]
[428.60675049 -112.85303497]
[436.51846313 -100.11030579]
[443.93630981 -87.07388306]
[450.84936523 -73.76290894]
[457.24749756 -60.19691849]
[463.12130737 -46.39581299]
[468.46218872 -32.37984848]
[473.26232910 -18.16960335]
[477.51464844 -3.78592563]
[481.21289062 10.75007153]
[484.35165405 25.41705513]
[486.92636108 40.19350052]
[488.93316650 55.05771637]
[490.36917114 69.98789215]
[491.23226929 84.96212006]
[491.52114868 99.95841217]
[491.23544312 114.95477295]
[490.37554932 129.92918396]
[488.94271851 144.85966492]
[486.93905640 159.72430420]
[484.36749268 174.50129700]
[481.23184204 189.16894531]
[477.53668213 203.70573425]
[473.28741455 218.09030151]
[468.49032593 232.30157471]
[463.15240479 246.31866455]
[457.28149414 260.12103271]
[450.88626099 273.68838501]
[443.97604370 287.00082397]
[436.56097412 300.03881836]
[428.65197754 312.78323364]
[420.26062012 325.21533203]
[411.39926147 337.31692505]
[402.08087158 349.07022095]
[392.31912231 360.45797729]
[382.12835693 371.46343994]
[371.52352905 382.07052612]
[360.52023315 392.26364136]
[349.13455200 402.02780151]
[337.38323975 411.34869385]
[325.28356934 420.21264648]
[312.85321045 428.60662842]
[300.11050415 436.51837158]
[287.07409668 443.93618774]
[273.76312256 450.84924316]
[260.19711304 457.24740601]
[246.39602661 463.12121582]
[232.38006592 468.46212769]
[218.16983032 473.26226807]
[203.78614807 477.51458740]
[189.25015259 481.21282959]
[174.58317566 484.35162354]
[159.80673218 486.92633057]
[144.94250488 488.93313599]
[130.01232910 490.36917114]
[115.03810883 491.23223877]
[100.04181671 491.52114868]
[85.04546356 491.23544312]
[70.07105255 490.37554932]
[55.14057159 488.94274902]
[40.27592468 486.93908691]
[25.49893188 484.36755371]
[10.83127975 481.23190308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
] def

init

% Start Annotations
10 22 0.16 1 colorpair
12 20 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 25 3 gmark
7 cmark
25 cmark
8 24 3 gmark
24 cmark
9 23 4 gmark
23 cmark
10 cmark
11 21 5 gmark
21 cmark
20 cmark

% End Annotations
showpage
end
%%EOF
