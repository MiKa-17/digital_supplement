%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 23:22:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUACCGCGAAACACCCUUAUCUGGUGCGUAUUAAUCGUGUGUCUCACACUGUUGAUAUUCACUUACCUGACCCGGA_AAUCGCUGUGCGAAAUCCGGUACAGGGACGGAAACAGGGAGGUGGCGGCUUUCAUGGCUUACGAAUC___CGGU_AAGUAG\
) } def
/len { sequence length } bind def

/coor [
[-109.10466003 251.06156921]
[-123.16140747 256.30453491]
[-137.44529724 260.89266968]
[-151.92584229 264.81625366]
[-166.57212830 268.06689453]
[-181.35292053 270.63766479]
[-196.23667908 272.52304077]
[-211.19161987 273.71902466]
[-226.18583679 274.22305298]
[-241.18733215 274.03405762]
[-256.16409302 273.15243530]
[-271.08416748 271.58010864]
[-285.91567993 269.32037354]
[-300.62701416 266.37808228]
[-315.18676758 262.75949097]
[-329.56387329 258.47238159]
[-343.72766113 253.52581787]
[-357.64785767 247.93041992]
[-371.29479980 241.69810486]
[-384.63934326 234.84217834]
[-397.65301514 227.37727356]
[-410.30804443 219.31932068]
[-422.57742310 210.68550110]
[-434.43499756 201.49424744]
[-445.85540771 191.76518250]
[-456.81430054 181.51905823]
[-467.28833008 170.77775574]
[-477.25509644 159.56419373]
[-486.69332886 147.90228271]
[-495.58291626 135.81692505]
[-503.90487671 123.33391571]
[-511.64144897 110.47988129]
[-518.77612305 97.28226471]
[-525.29370117 83.76922607]
[-531.18017578 69.96960449]
[-536.42309570 55.91284943]
[-541.01123047 41.62895203]
[-544.93481445 27.14840317]
[-548.18542480 12.50210094]
[-550.75610352 -2.27869821]
[-552.64147949 -17.16245079]
[-553.83740234 -32.11739349]
[-554.34143066 -47.11161041]
[-554.15240479 -62.11310959]
[-553.27075195 -77.08986664]
[-551.69836426 -92.00992584]
[-549.43859863 -106.84145355]
[-546.49627686 -121.55278778]
[-542.87768555 -136.11253357]
[-538.59051514 -150.48962402]
[-533.64398193 -164.65338135]
[-528.04852295 -178.57357788]
[-521.81616211 -192.22050476]
[-514.96020508 -205.56503296]
[-507.49530029 -218.57868958]
[-499.43731689 -231.23371887]
[-490.80346680 -243.50308228]
[-481.61218262 -255.36061096]
[-471.88311768 -266.78100586]
[-461.63696289 -277.73989868]
[-450.89562988 -288.21389771]
[-439.68203735 -298.18063354]
[-428.02011108 -307.61886597]
[-415.93475342 -316.50842285]
[-403.45172119 -324.83035278]
[-390.59765625 -332.56689453]
[-377.40002441 -339.70153809]
[-363.88699341 -346.21905518]
[-350.08734131 -352.10556030]
[-336.03057861 -357.34844971]
[-321.74667358 -361.93655396]
[-307.26611328 -365.86007690]
[-292.61981201 -369.11062622]
[-277.83901978 -371.68133545]
[-262.95526123 -373.56665039]
[-248.00030518 -374.76257324]
[-233.00608826 -375.26654053]
[-218.00459290 -375.07748413]
[-203.02783203 -374.19580078]
[-188.10777283 -372.62341309]
[-173.27626038 -370.36361694]
[-158.56492615 -367.42126465]
[-144.00518799 -363.80261230]
[-129.62809753 -359.51544189]
[-115.46434784 -354.56881714]
[-101.54416656 -348.97335815]
[-87.89725494 -342.74099731]
[-74.55274200 -335.88500977]
[-61.53909683 -328.42004395]
[-48.88409424 -320.36203003]
[-36.61474609 -311.72817993]
[-24.75723076 -302.53686523]
[-13.33685398 -292.80776978]
[-2.37798786 -282.56161499]
[8.09598064 -271.82025146]
[18.06270027 -260.60662842]
[27.50090027 -248.94468689]
[36.39044189 -236.85929871]
[44.71234894 -224.37625122]
[52.44886780 -211.52218628]
[59.58348465 -198.32453918]
[66.10097504 -184.81147766]
[71.98743439 -171.01184082]
[77.23028564 -156.95504761]
[81.81835938 -142.67114258]
[85.74185944 -128.19056702]
[88.99240112 -113.54425812]
[91.56305695 -98.76345062]
[93.44834900 -83.87968445]
[94.64423370 -68.92474365]
[95.14817810 -53.93051910]
[94.95909119 -38.92902374]
[94.07739258 -23.95226860]
[92.50495148 -9.03221321]
[90.24512482 5.79930115]
[87.30274200 20.51062393]
[83.68408203 35.07035828]
[79.39685822 49.44743347]
[74.45022583 63.61117172]
[68.85473633 77.53134155]
[82.49921417 83.76256561]
[95.32232666 76.58950806]
[109.91730499 78.28413391]
[120.75569153 88.20453644]
[123.73200989 102.59295654]
[137.37649536 108.82418060]
[147.38507080 104.42166138]
[157.94316101 106.24237823]
[165.57853699 113.44102478]
[167.91670227 123.44506073]
[181.31405640 130.19122314]
[194.71141052 136.93737793]
[209.00419617 130.59304810]
[224.01676941 134.96987915]
[232.66065979 148.00126648]
[230.85449219 163.53419495]
[219.45108032 174.23448181]
[203.83476257 175.04978943]
[191.37908936 165.59513855]
[187.96525574 150.33474731]
[174.56788635 143.58857727]
[161.17053223 136.84242249]
[142.03085327 139.39990234]
[131.14526367 122.46865845]
[117.50078583 116.23743439]
[104.67767334 123.41049194]
[90.08269501 121.71586609]
[79.24430847 111.79546356]
[76.26799011 97.40704346]
[62.62351227 91.17581940]
[55.76761246 104.52037811]
[48.30273056 117.53407288]
[40.24479294 130.18911743]
[31.61100197 142.45852661]
[22.41977882 154.31610107]
[12.69073868 165.73654175]
[2.44464278 176.69546509]
[-8.29664230 187.16949463]
[-19.51019287 197.13629150]
[-31.17208099 206.57456970]
[-43.25741577 215.46417236]
[-55.74041367 223.78616333]
[-68.59442902 231.52276611]
[-81.79203033 238.65745544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[120 150]
[121 149]
[125 145]
[126 144]
[130 142]
[131 141]
[132 140]
] def

init

% Start Annotations
120 150 0.0 0.2 colorpair
125 145 0.0 0.2 colorpair
126 144 0.0 0.6 colorpair
131 141 0.0 0.6 colorpair
132 140 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
120 150 2 gmark
121 149 4 gmark
121 cmark
125 145 2 gmark
126 144 1 gmark
130 142 11 gmark
130 cmark
142 cmark
131 141 1 gmark
132 140 1 gmark

% End Annotations
showpage
end
%%EOF
