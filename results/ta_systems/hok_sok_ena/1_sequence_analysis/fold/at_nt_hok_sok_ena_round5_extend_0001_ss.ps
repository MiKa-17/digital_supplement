%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 23:23:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGCCUCAGGCAUGA_CAC_CGAAA_GGCAGAUAGAGAAAAGCCCCAGUUAACA_UUAC_GCGUCCUGCAAG_ACGCUUA_ACAUUA_AUCUGAG_GC_CAAUUGAA_UGC_CUCACACA__GUAGGUUAGCCUCUUAC_GUG_CCGAAAGGUA___________\
) } def
/len { sequence length } bind def

/coor [
[-18.23071098 475.74645996]
[-32.44992828 470.97293091]
[-46.47710419 465.66152954]
[-60.29190445 459.81994629]
[-73.87429810 453.45666504]
[-87.20458984 446.58093262]
[-100.26345062 439.20266724]
[-108.13401794 451.97192383]
[-116.00458527 464.74118042]
[-123.87515259 477.51046753]
[-131.74571228 490.27972412]
[-139.61628723 503.04898071]
[-134.52142334 517.83331299]
[-140.16995239 532.41510010]
[-153.89480591 539.90924072]
[-169.21553040 536.77728271]
[-178.89814758 524.49798584]
[-178.37083435 508.86929321]
[-167.88255310 497.27059937]
[-152.38555908 495.17843628]
[-144.51498413 482.40914917]
[-136.64442444 469.63989258]
[-128.77384949 456.87063599]
[-120.90328217 444.10134888]
[-113.03271484 431.33209229]
[-125.49231720 422.98159790]
[-137.62498474 414.16278076]
[-149.41311646 404.88848877]
[-160.83961487 395.17211914]
[-171.88792419 385.02780151]
[-182.54202271 374.47021484]
[-192.78646851 363.51464844]
[-202.60639954 352.17703247]
[-211.98757935 340.47378540]
[-220.91641235 328.42187500]
[-229.37994385 316.03875732]
[-237.36590576 303.34243774]
[-244.86271667 290.35125732]
[-251.85951233 277.08410645]
[-258.34613037 263.56018066]
[-264.31320190 249.79913330]
[-269.75204468 235.82087708]
[-274.65478516 221.64569092]
[-279.01434326 207.29414368]
[-282.82431030 192.78701782]
[-286.07925415 178.14535522]
[-288.77441406 163.39041138]
[-290.90588379 148.54353333]
[-292.47058105 133.62628174]
[-293.46624756 118.66027832]
[-293.89141846 103.66722107]
[-293.74548340 88.66883850]
[-293.02865601 73.68688965]
[-291.74194336 58.74309540]
[-289.88729858 43.85911560]
[-287.46731567 29.05653572]
[-284.48556519 14.35681629]
[-280.94631958 -0.21872829]
[-276.85476685 -14.64896584]
[-272.21679688 -28.91297340]
[-267.03915405 -42.99007034]
[-261.32931519 -56.85984421]
[-255.09561157 -70.50218964]
[-248.34706116 -83.89731598]
[-241.09341431 -97.02581787]
[-233.34523010 -109.86864471]
[-225.11373901 -122.40718079]
[-216.41084290 -134.62326050]
[-207.24919128 -146.49914551]
[-197.64205933 -158.01763916]
[-187.60336304 -169.16201782]
[-177.14768982 -179.91615295]
[-166.29016113 -190.26443481]
[-155.04655457 -200.19186401]
[-143.43313599 -209.68403625]
[-131.46678162 -218.72718811]
[-119.16481018 -227.30822754]
[-106.54507446 -235.41470337]
[-93.62586975 -243.03486633]
[-80.42591858 -250.15765381]
[-66.96437836 -256.77273560]
[-53.26074982 -262.87054443]
[-39.33491135 -268.44223022]
[-25.20704651 -273.47970581]
[-10.89764595 -277.97567749]
[3.57254553 -281.92361450]
[18.18254662 -285.31777954]
[32.91117859 -288.15328979]
[47.73707962 -290.42602539]
[62.63875580 -292.13265991]
[77.59460449 -293.27075195]
[92.58293915 -293.83865356]
[107.58202362 -293.83551025]
[122.57012177 -293.26135254]
[137.52549744 -292.11697388]
[152.42645264 -290.40411377]
[167.25140381 -288.12515259]
[181.97883606 -285.28347778]
[196.58741760 -281.88317871]
[211.05595398 -277.92916870]
[225.36347961 -273.42721558]
[239.48922729 -268.38381958]
[253.41273499 -262.80633545]
[267.11380005 -256.70278931]
[280.57257080 -250.08204651]
[293.76953125 -242.95373535]
[306.68554688 -235.32817078]
[319.30187988 -227.21640015]
[331.60025024 -218.63021851]
[343.56283569 -209.58204651]
[355.17227173 -200.08500671]
[366.41171265 -190.15286255]
[377.26492310 -179.80004883]
[387.71609497 -169.04153442]
[397.75009155 -157.89294434]
[407.35241699 -146.37042236]
[416.50909424 -134.49070740]
[425.20684814 -122.27098846]
[433.43310547 -109.72899628]
[441.17593384 -96.88292694]
[448.42404175 -83.75138855]
[455.16699219 -70.35343170]
[461.39498901 -56.70848083]
[467.09899902 -42.83631516]
[472.27075195 -28.75705147]
[476.90274048 -14.49110317]
[480.98828125 -0.05915349]
[484.52139282 14.51787281]
[487.49700928 29.21883965]
[489.91076660 44.02243042]
[491.75921631 58.90718842]
[493.03964233 73.85152435]
[493.75018311 88.83377075]
[493.88983154 103.83220673]
[493.45840454 118.82508850]
[492.45648193 133.79067993]
[490.88552856 148.70727539]
[488.74783325 163.55323792]
[486.04650879 178.30706787]
[482.78543091 192.94735718]
[478.96936035 207.45288086]
[474.60382080 221.80261230]
[469.69512939 235.97573853]
[464.25042725 249.95172119]
[458.27758789 263.71026611]
[451.78530884 277.23147583]
[444.78295898 290.49569702]
[437.28070068 303.48373413]
[429.28942871 316.17672729]
[420.82070923 328.55627441]
[411.88684082 340.60446167]
[402.50073242 352.30377197]
[392.67605591 363.63726807]
[382.42703247 374.58853149]
[371.76852417 385.14166260]
[360.71594238 395.28137207]
[349.28536987 404.99295044]
[337.49337769 414.26229858]
[325.35702515 423.07601929]
[312.89392090 431.42129517]
[300.12213135 439.28604126]
[287.06021118 446.65887451]
[273.72705078 453.52908325]
[260.14199829 459.88668823]
[246.32476807 465.72250366]
[232.29537964 471.02807617]
[218.07418823 475.79565430]
[203.68177795 480.01840210]
[189.13905334 483.69012451]
[174.46708679 486.80557251]
[159.68713379 489.36016846]
[144.82066345 491.35021973]
[129.88919067 492.77288818]
[114.91439056 493.62603760]
[99.91796112 493.90847778]
[84.92164612 493.61978149]
[69.94720459 492.76037598]
[55.01632690 491.33151245]
[40.15067673 489.33526611]
[25.37179947 486.77450562]
[10.70112610 483.65298462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
] def

init

% Start Annotations
10 22 0.16 1 colorpair
12 20 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 25 3 gmark
7 cmark
25 cmark
8 24 3 gmark
24 cmark
9 23 4 gmark
23 cmark
10 cmark
11 21 5 gmark
21 cmark
12 cmark
20 cmark

% End Annotations
showpage
end
%%EOF
