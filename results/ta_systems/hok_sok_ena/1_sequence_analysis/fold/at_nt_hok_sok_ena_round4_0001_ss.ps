%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 15:07:28 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUUGAGGCUAUCUGCCUCAGGCAUGAACACCAAA_GGCAGAUAGAGAAAAGCCCCAGU_____________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[-14.16661453 414.12194824]
[-28.14467621 408.68356323]
[-41.86466980 402.62356567]
[-55.29896927 395.95410156]
[-68.42051697 388.68865967]
[-81.20288849 380.84179688]
[-93.62033844 372.42938232]
[-102.58217621 384.45791626]
[-111.54401398 396.48645020]
[-120.50585175 408.51495361]
[-129.46768188 420.54348755]
[-138.42951965 432.57202148]
[-134.65306091 447.74673462]
[-141.56066895 461.77597046]
[-155.89077759 468.03552246]
[-170.87715149 463.56982422]
[-179.44369507 450.48745728]
[-177.54553223 434.96548462]
[-166.07891846 424.33294678]
[-150.45805359 423.61019897]
[-141.49621582 411.58166504]
[-132.53437805 399.55313110]
[-123.57254028 387.52459717]
[-114.61070251 375.49606323]
[-105.64886475 363.46755981]
[-117.26221466 353.97586060]
[-128.43801880 343.97268677]
[-139.15379333 333.47821045]
[-149.38792419 322.51351929]
[-159.11984253 311.10070801]
[-168.32991028 299.26278687]
[-176.99960327 287.02359009]
[-185.11146545 274.40774536]
[-192.64915466 261.44064331]
[-199.59747314 248.14843750]
[-205.94244385 234.55787659]
[-211.67129517 220.69633484]
[-216.77247620 206.59173584]
[-221.23573303 192.27247620]
[-225.05206299 177.76737976]
[-228.21377563 163.10568237]
[-230.71450806 148.31689453]
[-232.54922485 133.43080139]
[-233.71423340 118.47737885]
[-234.20719910 103.48674774]
[-234.02709961 88.48909760]
[-233.17431641 73.51462555]
[-231.65057373 58.59349823]
[-229.45893860 43.75575256]
[-226.60380554 29.03127670]
[-223.09094238 14.44972229]
[-218.92741394 0.04045420]
[-214.12161255 -14.16750908]
[-208.68321228 -28.14555359]
[-202.62315369 -41.86553192]
[-195.95367432 -55.29981232]
[-188.68817139 -68.42134094]
[-180.84129333 -81.20368958]
[-172.42883301 -93.62111664]
[-163.46774292 -105.64862061]
[-153.97605896 -117.26197052]
[-143.97291565 -128.43778992]
[-133.47842407 -139.15356445]
[-122.51375580 -149.38772583]
[-111.10096741 -159.11964417]
[-99.26305389 -168.32972717]
[-87.02384949 -176.99943542]
[-74.40800476 -185.11129761]
[-61.44092178 -192.64898682]
[-48.14872360 -199.59733582]
[-34.55817032 -205.94232178]
[-20.69663811 -211.67118835]
[-6.59203815 -216.77238464]
[7.72722340 -221.23564148]
[22.23230934 -225.05198669]
[36.89400864 -228.21371460]
[51.68279648 -230.71446228]
[66.56888580 -232.54919434]
[81.52230835 -233.71421814]
[96.51293182 -234.20718384]
[111.51058197 -234.02711487]
[126.48505402 -233.17434692]
[141.40618896 -231.65061951]
[156.24392700 -229.45898438]
[170.96841431 -226.60386658]
[185.54997253 -223.09101868]
[199.95924377 -218.92750549]
[214.16720581 -214.12171936]
[228.14526367 -208.68333435]
[241.86524963 -202.62329102]
[255.29953003 -195.95381165]
[268.42105103 -188.68832397]
[281.20343018 -180.84146118]
[293.62084961 -172.42901611]
[305.64837646 -163.46794128]
[317.26171875 -153.97627258]
[328.43756104 -143.97312927]
[339.15335083 -133.47865295]
[349.38751221 -122.51399231]
[359.11944580 -111.10121155]
[368.32952881 -99.26330566]
[376.99926758 -87.02410889]
[385.11114502 -74.40827179]
[392.64883423 -61.44120026]
[399.59719849 -48.14900589]
[405.94219971 -34.55846024]
[411.67108154 -20.69693375]
[416.77227783 -6.59233904]
[421.23556519 7.72691870]
[425.05191040 22.23200226]
[428.21365356 36.89369965]
[430.71441650 51.68248367]
[432.54916382 66.56857300]
[433.71420288 81.52198792]
[434.20718384 96.51261902]
[434.02713013 111.51026917]
[433.17437744 126.48474121]
[431.65066528 141.40586853]
[429.45904541 156.24362183]
[426.60394287 170.96810913]
[423.09109497 185.54966736]
[418.92761230 199.95893860]
[414.12182617 214.16691589]
[408.68344116 228.14497375]
[402.62341309 241.86495972]
[395.95394897 255.29925537]
[388.68847656 268.42077637]
[380.84164429 281.20315552]
[372.42919922 293.62060547]
[363.46813965 305.64813232]
[353.97647095 317.26150513]
[343.97335815 328.43731689]
[333.47888184 339.15313721]
[322.51422119 349.38729858]
[311.10147095 359.11923218]
[299.26354980 368.32934570]
[287.02438354 376.99908447]
[274.40853882 385.11096191]
[261.44146729 392.64868164]
[248.14929199 399.59704590]
[234.55874634 405.94207764]
[220.69723511 411.67095947]
[206.59263611 416.77218628]
[192.27339172 421.23547363]
[177.76831055 425.05184937]
[163.10661316 428.21359253]
[148.31782532 430.71435547]
[133.43174744 432.54913330]
[118.47832489 433.71417236]
[103.48770142 434.20718384]
[88.49005127 434.02713013]
[73.51557922 433.17440796]
[58.59444046 431.65069580]
[43.75669098 429.45910645]
[29.03220558 426.60400391]
[14.45064163 423.09118652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
] def

init

% Start Annotations
10 22 0.16 1 colorpair
12 20 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 25 3 gmark
7 cmark
25 cmark
8 24 3 gmark
24 cmark
9 23 4 gmark
23 cmark
10 cmark
11 21 5 gmark
21 cmark
20 cmark

% End Annotations
showpage
end
%%EOF
