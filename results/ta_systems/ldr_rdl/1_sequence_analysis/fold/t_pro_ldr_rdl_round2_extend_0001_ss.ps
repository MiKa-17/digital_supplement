%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 12:25:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUGACGCUCGCACAGUUGGGCAUGGCCUUCUGGCACGAUCUGGCGGCUCCGAUCAUUGCUGGCAUUCUUGCCAGAAUGAUCGUGAGCUGGCUGCAUAACCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[18.36860275 373.72705078]
[4.68893862 379.91134644]
[-9.53851032 384.70281982]
[-24.17234230 388.05389404]
[-39.06711578 389.93121338]
[-54.07479477 390.31613159]
[-69.04621887 389.20486450]
[-83.83260345 386.60842896]
[-98.28697968 382.55261230]
[-112.26569366 377.07772827]
[-125.62981415 370.23822021]
[-138.24652100 362.10205078]
[-149.99040222 352.75006104]
[-160.74478149 342.27520752]
[-170.40272522 330.78164673]
[-178.86828613 318.38351440]
[-186.05729675 305.20413208]
[-191.89831543 291.37442017]
[-196.33331299 277.03182983]
[-199.31817627 262.31893921]
[-200.82325745 247.38195801]
[-200.83360291 232.36935425]
[-199.34910583 217.43031311]
[-196.38452148 202.71331787]
[-191.96929932 188.36463928]
[-186.14733887 174.52690125]
[-178.97650146 161.33760071]
[-170.52804565 148.92784119]
[-160.88594055 137.42094421]
[-150.14601135 126.93129730]
[-138.41502380 117.56314087]
[-125.80953979 109.40958405]
[-112.45486450 102.55165863]
[-98.48371124 97.05752563]
[-84.03493500 92.98179626]
[-69.25214386 90.36497498]
[-54.28226471 89.23306274]
[-39.27406693 89.59731293]
[-24.37672234 91.45410919]
[-9.73828602 94.78499603]
[4.49575233 99.55686951]
[18.18392563 105.72229767]
[31.19019127 113.22000885]
[43.38528442 121.97547913]
[54.64799881 131.90170288]
[65.63664246 121.69142914]
[76.62528229 111.48114777]
[74.35752869 95.45491028]
[81.99534607 81.18441010]
[96.58827209 74.18228912]
[112.49913025 77.15342712]
[123.18330383 66.62496948]
[133.86747742 56.09650421]
[127.58284760 43.13121033]
[125.63568878 28.87697220]
[128.20507812 14.74355793]
[135.02406311 2.12460661]
[145.40731812 -7.73980618]
[158.32002258 -13.88502121]
[172.48098755 -15.71612453]
[186.48974609 -13.06551647]
[198.96505737 -6.20815563]
[209.95368958 -16.41843033]
[207.95664978 -31.80646133]
[215.41542053 -45.41331863]
[229.46192932 -52.00688553]
[244.69502258 -49.05180740]
[255.25726318 -37.68436813]
[257.08724976 -22.27557945]
[249.48132324 -8.75043678]
[235.36410522 -2.30963230]
[220.16397095 -5.42978764]
[209.17532349 4.78048754]
[215.46858215 19.13306046]
[216.49650574 34.79772949]
[212.11791992 49.90088654]
[202.83943176 62.62985611]
[189.75679016 71.45048523]
[174.42564392 75.29199982]
[158.67642212 73.67699432]
[144.39593506 66.78067017]
[133.71176147 77.30913544]
[123.02759552 87.83760071]
[126.02931213 100.81790161]
[122.21858215 113.58413696]
[112.59275055 122.79510498]
[99.67111969 126.04008484]
[86.83556366 122.46979523]
[75.84691620 132.68006897]
[64.85827637 142.89035034]
[73.93180847 154.85067749]
[81.76937103 167.65502930]
[88.29306793 181.17611694]
[93.43805695 195.27958679]
[97.15321350 209.82524109]
[99.40161133 224.66853333]
[100.16089630 239.66194153]
[99.42353058 254.65643311]
[97.19683838 269.50299072]
[93.50295258 284.05407715]
[88.37858582 298.16503906]
[81.87466431 311.69564819]
[74.05583191 324.51144409]
[64.99979401 336.48504639]
[54.79656219 347.49743652]
[43.54753876 357.43914795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[45 90]
[46 89]
[47 88]
[51 83]
[52 82]
[53 81]
[62 73]
[63 72]
] def

init

% Start Annotations
46 89 0.32 0.2 colorpair
47 88 0.16 0.2 colorpair
52 82 0.32 0.2 colorpair
53 81 0.16 0.2 colorpair
62 73 0.0 1 colorpair
63 72 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
45 90 3 gmark
45 cmark
46 89 2 gmark
46 cmark
89 cmark
47 88 2 gmark
88 cmark
51 83 3 gmark
51 cmark
52 82 2 gmark
52 cmark
82 cmark
53 81 2 gmark
53 cmark
63 72 2 gmark
72 cmark

% End Annotations
showpage
end
%%EOF
