%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 12:25:28 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCGCAGUUGGGCAUGGCCUUCUGGCACGAUCUGGCGGCUCCGAUCAUUGCUGGCAUUCUUGCCAGAAUGAUCGUGAGCUGGCUGCAUAACCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[21.04570580 373.73065186]
[7.31249523 379.79611206]
[-6.96389532 384.44107056]
[-21.63696480 387.61788940]
[-36.55614853 389.29388428]
[-51.56834412 389.45196533]
[-66.51950073 388.09042358]
[-81.25621033 385.22326660]
[-95.62722778 380.87991333]
[-109.48509979 375.10491943]
[-122.68761444 367.95758057]
[-135.09930420 359.51119995]
[-146.59277344 349.85247803]
[-157.05012512 339.08053589]
[-166.36401367 327.30587769]
[-174.43887329 314.64935303]
[-181.19184875 301.24081421]
[-186.55363464 287.21792603]
[-190.46922302 272.72448730]
[-192.89842224 257.90930176]
[-193.81631470 242.92436218]
[-193.21347046 227.92343140]
[-191.09606934 213.06047058]
[-187.48587036 198.48799133]
[-182.41987610 184.35551453]
[-175.95011902 170.80807495]
[-168.14295959 157.98468018]
[-159.07850647 146.01693726]
[-148.84979248 135.02764893]
[-137.56178284 125.12957764]
[-125.33030701 116.42430115]
[-112.28087616 109.00113678]
[-98.54739380 102.93627167]
[-84.27080536 98.29193878]
[-69.59759521 95.11579132]
[-54.67833710 93.44042206]
[-39.66613388 93.28303528]
[-24.71503258 94.64522552]
[-9.97845650 97.51303101]
[4.39237547 101.85701752]
[18.24999237 107.63260651]
[31.45219421 114.78054047]
[43.86350250 123.22745514]
[55.35655975 132.88668823]
[66.11917114 122.43841553]
[76.88177490 111.99015045]
[74.26351929 96.01883698]
[81.58511353 81.58511353]
[96.01883698 74.26351929]
[111.99015045 76.88177490]
[122.43841553 66.11917114]
[132.88668823 55.35655975]
[126.31581116 42.53225327]
[124.05369568 28.32305527]
[126.31060791 14.13485336]
[132.85037231 1.36726010]
[143.01496887 -8.72445965]
[155.79078674 -15.15279579]
[169.90963745 -17.29461861]
[183.97462463 -14.95155525]
[196.59841919 -8.36828899]
[207.36102295 -18.81655502]
[205.02777100 -34.15720367]
[212.18702698 -47.92400360]
[226.08590698 -54.82333755]
[241.38000488 -52.20226669]
[252.18844604 -41.06865311]
[254.35514832 -25.70359612]
[247.04696655 -12.01527023]
[233.07406616 -5.26711988]
[217.80929565 -8.05394554]
[207.04669189 2.39432025]
[213.65214539 16.60436249]
[215.02328491 32.24131775]
[210.97790527 47.43565750]
[201.98252869 60.36453247]
[189.09858704 69.47049713]
[173.85731506 73.64907074]
[158.07766724 72.38271332]
[143.64929199 65.80482483]
[133.20103455 76.56743622]
[122.75276184 87.33003998]
[126.04145050 100.24233246]
[122.51303864 113.09118652]
[113.09118652 122.51303864]
[100.24233246 126.04145050]
[87.33003998 122.75276184]
[76.56743622 133.20103455]
[65.80482483 143.64929199]
[75.11923218 155.42353821]
[83.19464874 168.07971191]
[89.94821930 181.48793030]
[95.31062317 195.51060486]
[99.22684479 210.00386047]
[101.65670013 224.81893921]
[102.57524872 239.80384827]
[101.97306061 254.80479431]
[99.85632324 269.66784668]
[96.24675751 284.24047852]
[91.18139648 298.37319946]
[84.71222687 311.92092896]
[76.90562439 324.74465942]
[67.84171295 336.71279907]
[57.61348343 347.70251465]
[46.32590866 357.60110474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[44 89]
[45 88]
[46 87]
[50 82]
[51 81]
[52 80]
[61 72]
[62 71]
] def

init

% Start Annotations
45 88 0.32 0.2 colorpair
46 87 0.16 0.2 colorpair
51 81 0.32 0.2 colorpair
52 80 0.16 0.2 colorpair
61 72 0.0 1 colorpair
62 71 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
44 89 3 gmark
44 cmark
45 88 2 gmark
45 cmark
88 cmark
46 87 2 gmark
87 cmark
50 82 3 gmark
50 cmark
51 81 2 gmark
51 cmark
81 cmark
52 80 2 gmark
52 cmark
62 71 2 gmark
71 cmark

% End Annotations
showpage
end
%%EOF
