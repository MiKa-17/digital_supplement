%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 18:35:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCAGAGCUGGGCAUGGCCUUCUG_GCAUGAUUUAGCGGCUCCGGUCAUUGCUGGCAUUCUUGCCAGUAUGAUCGUGAACUGGCUGAAUAAGCGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[37.36743927 305.25708008]
[30.16147804 310.52307129]
[22.48293877 315.07101440]
[14.40312386 318.85882568]
[5.99704981 321.85153198]
[-2.65725374 324.02145386]
[-11.47946835 325.34860229]
[-20.38772774 325.82083130]
[-29.29938507 325.43386841]
[-38.13177109 324.19143677]
[-46.80296326 322.10522461]
[-55.23255920 319.19470215]
[-63.34239197 315.48699951]
[-71.05728912 311.01663208]
[-78.30574799 305.82522583]
[-85.02060699 299.96099854]
[-91.13965607 293.47848511]
[-96.60623169 286.43792725]
[-101.36972809 278.90472412]
[-105.38607788 270.94882202]
[-108.61812592 262.64407349]
[-111.03603363 254.06762695]
[-112.61749268 245.29902649]
[-113.34796906 236.41966248]
[-113.22081757 227.51193237]
[-128.06814575 225.37719727]
[-142.94442749 223.45471191]
[-157.76506042 230.47474670]
[-171.09921265 220.92842102]
[-169.22985840 204.63615417]
[-154.08001709 198.35806274]
[-141.23455811 208.55249023]
[-134.12487793 206.15261841]
[-125.93341827 210.52987671]
[-111.08609772 212.66461182]
[-101.62367249 187.96241760]
[-85.54975891 166.93814087]
[-64.17301178 151.31500244]
[-39.23709106 142.37605286]
[-12.77844810 140.85876465]
[13.04001141 146.89421082]
[36.10572052 159.99575806]
[46.24834061 148.94462585]
[56.39096451 137.89350891]
[66.53359222 126.84239960]
[76.51737213 115.64757538]
[86.34028625 104.31133270]
[89.17468262 90.61981201]
[102.32347107 85.86575317]
[112.14638519 74.52951050]
[115.13634491 56.43016052]
[131.82038879 51.19893646]
[141.31556702 39.58681488]
[150.81076050 27.97468948]
[160.30593872 16.36256409]
[169.80113220 4.75044060]
[169.30932617 -8.23587418]
[177.58135986 -17.73068619]
[189.71102905 -18.94151688]
[199.53393555 -30.27776146]
[209.35685730 -41.61400604]
[212.54658508 -57.11033249]
[226.72863770 -61.66210938]
[236.55154419 -72.99835205]
[235.17422485 -88.74250793]
[245.39697266 -100.79534912]
[261.15481567 -102.00613403]
[273.09890747 -91.65652466]
[274.14300537 -75.88676453]
[263.66769409 -64.05277252]
[247.88778687 -63.17544174]
[238.06488037 -51.83919907]
[235.57774353 -37.15371323]
[220.69309998 -31.79109383]
[210.87017822 -20.45484924]
[201.04727173 -9.11860561]
[198.73767090 8.21311760]
[181.41325378 14.24562740]
[171.91806030 25.85775185]
[162.42288208 37.46987534]
[152.92768860 49.08200073]
[143.43251038 60.69412231]
[144.30778503 72.85260773]
[136.36260986 82.62256622]
[123.48262787 84.35242462]
[113.65971375 95.68866730]
[110.82531738 109.38018799]
[97.67652893 114.13424683]
[87.85361481 125.47048950]
[84.52941895 134.14286804]
[77.58470917 136.98501587]
[67.44208527 148.03613281]
[57.29946136 159.08724976]
[47.15683746 170.13836670]
[52.90282440 176.98356628]
[57.96321106 184.34921265]
[62.29116058 192.16691589]
[65.84664917 200.36405945]
[68.59680939 208.86456299]
[70.51626587 217.58953857]
[71.58734131 226.45797729]
[71.80023956 235.38761902]
[71.15312195 244.29560852]
[69.65212250 253.09931946]
[67.31130981 261.71710205]
[64.15252686 270.06906128]
[60.20520782 278.07772827]
[55.50609589 285.66888428]
[50.09889984 292.77218628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 35]
[26 34]
[27 32]
[42 94]
[43 93]
[44 92]
[45 91]
[46 89]
[47 88]
[49 86]
[50 85]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[59 76]
[60 75]
[61 74]
[63 72]
[64 71]
] def

init

% Start Annotations
26 34 0.0 0.2 colorpair
42 94 0.16 1 colorpair
43 93 0.0 1 colorpair
44 92 0.16 1 colorpair
45 91 0.16 1 colorpair
46 89 0.16 1 colorpair
47 88 0.16 0.6 colorpair
49 86 0.16 0.6 colorpair
50 85 0.0 0.6 colorpair
53 81 0.32 1 colorpair
54 80 0.16 1 colorpair
55 79 0.16 0.6 colorpair
56 78 0.0 1 colorpair
59 76 0.32 0.2 colorpair
60 75 0.0 1 colorpair
61 74 0.16 0.6 colorpair
63 72 0.0 1 colorpair
64 71 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
25 35 3 gmark
35 cmark
26 34 2 gmark
27 32 4 gmark
27 cmark
94 cmark
92 cmark
45 cmark
46 cmark
47 88 1 gmark
88 cmark
49 86 1 gmark
86 cmark
50 85 1 gmark
52 82 4 gmark
52 cmark
82 cmark
53 cmark
81 cmark
54 cmark
80 cmark
55 79 1 gmark
55 cmark
59 76 2 gmark
59 cmark
76 cmark
61 74 1 gmark
61 cmark
74 cmark
64 71 1 gmark
64 cmark

% End Annotations
showpage
end
%%EOF
