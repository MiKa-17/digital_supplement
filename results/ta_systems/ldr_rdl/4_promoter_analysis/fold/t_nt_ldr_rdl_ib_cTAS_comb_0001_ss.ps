%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 08:52:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCACAGUUGGGCAUGGCCUUCUGGCACGAUCUGGCGGCUCCGAUCAUUGCUGGCAUUAUUGCCAGUAUGAUCGUGAGCUGGCUGCAUAACCGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[219.81523132 174.06294250]
[212.63847351 160.87927246]
[206.69030762 147.09759521]
[202.02001953 132.83212280]
[198.66633606 118.20105743]
[196.65704346 103.32564545]
[181.67106628 103.97393036]
[166.68507385 104.62222290]
[163.98530579 119.34283447]
[158.07807922 133.09382629]
[149.25952148 145.18588257]
[137.97167969 155.01286316]
[124.78039551 162.08216858]
[110.34692383 166.03942871]
[95.39477539 166.68624878]
[80.67348480 163.99023438]
[66.92098999 158.08651733]
[54.82667542 149.27104187]
[44.99681473 137.98570251]
[37.92414856 124.79621887]
[33.96321869 110.36375427]
[18.97723198 111.01204681]
[10.52019501 124.02197266]
[-3.98075151 129.54484558]
[-18.94969559 125.45702362]
[-28.63077354 113.33034515]
[-29.30141449 97.82776642]
[-20.70374107 84.91035461]
[-6.14373446 79.54510498]
[8.77998352 83.79508209]
[18.32894135 96.02606964]
[33.31492615 95.37777710]
[36.01469803 80.65716553]
[41.92192078 66.90618134]
[50.74048233 54.81411743]
[62.02832031 44.98712921]
[75.21960449 37.91782761]
[89.65307617 33.96057510]
[104.60522461 33.31374741]
[119.32651520 36.00976562]
[133.07901001 41.91348648]
[145.17332458 50.72896194]
[155.00318909 62.01429749]
[162.07585144 75.20378113]
[166.03678894 89.63624573]
[181.02276611 88.98795319]
[196.00875854 88.33966064]
[196.72593689 73.34629822]
[198.80357361 58.48027420]
[202.22445679 43.86477661]
[206.96025085 29.62091446]
[212.97169495 15.86672211]
[220.20896912 2.71617079]
[228.61212158 -9.72176647]
[238.11151123 -21.34402275]
[248.62841797 -32.05429077]
[260.07571411 -41.76382065]
[272.35848999 -50.39215469]
[285.37503052 -57.86779022]
[299.01742554 -64.12879181]
[313.17266846 -69.12326050]
[327.72341919 -72.80982208]
[342.54913330 -75.15792847]
[357.52694702 -76.14811707]
[372.53274536 -75.77217865]
[387.44216919 -74.03324127]
[402.13171387 -70.94570923]
[416.47961426 -66.53515625]
[430.36697388 -60.83814621]
[443.67877197 -53.90187836]
[456.30462646 -45.78383255]
[468.13998413 -36.55128098]
[479.08670044 -26.28072166]
[489.05410767 -15.05726910]
[497.95962524 -2.97392321]
[505.72940063 9.86918736]
[512.29913330 23.36563873]
[517.61431885 37.40359116]
[521.63092041 51.86672211]
[524.31561279 66.63518524]
[525.64630127 81.58659363]
[525.61181641 96.59705353]
[524.21246338 111.54219055]
[521.45983887 126.29815674]
[517.37683105 140.74267578]
[511.99719238 154.75605774]
[505.36553955 168.22216797]
[497.53680420 181.02943420]
[488.57586670 193.07173157]
[478.55697632 204.24925232]
[467.56317139 214.46939087]
[455.68551636 223.64746094]
[443.02246094 231.70739746]
[429.67895508 238.58241272]
[415.76553345 244.21554565]
[401.39752197 248.56010437]
[386.69396973 251.58010864]
[371.77667236 253.25050354]
[356.76931763 253.55746460]
[341.79620361 252.49845886]
[326.98144531 250.08224487]
[312.44778442 246.32885742]
[298.31567383 241.26937866]
[284.70217896 234.94575500]
[271.72015381 227.41036987]
[259.47714233 218.72567749]
[248.07460022 208.96363831]
[237.60700989 198.20515442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[21 32]
[22 31]
] def

init

% Start Annotations
6 47 0.16 1 colorpair
7 46 0.16 0.2 colorpair
8 45 0.16 0.2 colorpair
21 32 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
47 cmark
7 46 2 gmark
7 cmark
8 45 2 gmark
45 cmark
21 32 1 gmark
21 cmark
22 31 21 gmark
22 cmark

% End Annotations
showpage
end
%%EOF
