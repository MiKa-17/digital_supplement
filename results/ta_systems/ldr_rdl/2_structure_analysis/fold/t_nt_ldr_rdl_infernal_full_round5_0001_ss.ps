%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 19:56:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCAGAGUUGGGCAUGGCCUUCUGGCACGAUCUGGCGGC_ACCGAUCAUUGCUGGC_AUUAUUGCCAGUGUGAUCGUCAGCUGGCUGCAUAACCGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[221.27867126 170.95828247]
[213.90916443 157.88203430]
[207.72419739 144.20564270]
[202.77215576 130.03613281]
[199.09181213 115.48441315]
[196.71195984 100.66436005]
[181.74949646 101.72482300]
[166.78701782 102.78528595]
[164.49339294 117.57461548]
[158.96682739 131.48297119]
[150.48439026 143.81314087]
[139.47126770 153.94705200]
[126.47952271 161.37669373]
[112.16041565 165.72966003]
[97.23173523 166.78773499]
[82.44182587 164.49786377]
[68.53206635 158.97485352]
[56.19973373 150.49555969]
[46.06301880 139.48501587]
[38.63005447 126.49517059]
[34.27344131 112.17717743]
[19.31097412 113.23764038]
[11.21517467 126.47537994]
[-3.12828875 132.39523315]
[-18.20406151 128.72090149]
[-28.21520042 116.86524200]
[-29.31221962 101.38699341]
[-21.07329369 88.23786163]
[-6.66645479 82.47395325]
[8.36857128 86.31160736]
[18.25051117 98.27517700]
[33.21297836 97.21471405]
[35.50661087 82.42538452]
[41.03316879 68.51703644]
[49.51561356 56.18686295]
[60.52873993 46.05295563]
[73.52047729 38.62330246]
[87.83958435 34.27033997]
[102.76826477 33.21226883]
[117.55817413 35.50213242]
[131.46792603 41.02514648]
[143.80026245 49.50444412]
[153.93698120 60.51498795]
[161.36994934 73.50482941]
[165.72656250 87.82282257]
[180.68902588 86.76235962]
[195.65148926 85.70189667]
[195.91731262 70.69432831]
[197.50846863 55.76898956]
[200.41252136 41.04268265]
[204.60673523 26.63066673]
[210.05828857 12.64573669]
[216.72450256 -0.80265427]
[224.55320740 -13.60925198]
[233.48313904 -25.67382622]
[243.44439697 -36.90195465]
[254.35903931 -47.20575714]
[266.14163208 -56.50459290]
[278.69992065 -64.72568512]
[291.93569946 -71.80468750]
[305.74530029 -77.68620300]
[320.02069092 -82.32419586]
[334.65011597 -85.68236542]
[349.51910400 -87.73442841]
[364.51126099 -88.46433258]
[379.50927734 -87.86635590]
[394.39572144 -85.94518280]
[409.05413818 -82.71584320]
[423.36978149 -78.20362854]
[437.23059082 -72.44383240]
[450.52813721 -65.48154449]
[463.15829468 -57.37125778]
[475.02221680 -48.17644119]
[486.02709961 -37.96906281]
[496.08676147 -26.82900810]
[505.12246704 -14.84346390]
[513.06353760 -2.10623598]
[519.84783936 11.28298664]
[525.42218018 25.21941566]
[529.74304199 39.59397507]
[532.77655029 54.29416275]
[534.49896240 69.20492554]
[534.89678955 84.20957184]
[533.96691895 99.19065857]
[531.71667480 114.03094482]
[528.16363525 128.61427307]
[523.33563232 142.82652283]
[517.27044678 156.55644226]
[510.01547241 169.69657898]
[501.62759399 182.14410400]
[492.17239380 193.80158997]
[481.72390747 204.57780457]
[470.36389160 214.38839722]
[458.18124390 223.15658569]
[445.27136230 230.81375122]
[431.73522949 237.29995728]
[417.67883301 242.56445312]
[403.21212769 246.56602478]
[388.44839478 249.27336121]
[373.50314331 250.66526794]
[358.49337769 250.73086548]
[343.53656006 249.46961975]
[328.74972534 246.89140320]
[314.24859619 243.01641846]
[300.14672852 237.87495422]
[286.55444336 231.50729370]
[273.57812500 223.96324158]
[261.31933594 215.30184937]
[249.87400818 205.59091187]
[239.33174133 194.90643311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[21 32]
[22 31]
] def

init

% Start Annotations
7 46 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 47 5 gmark
47 cmark
7 46 2 gmark
7 cmark
8 45 3 gmark
8 cmark
45 cmark
21 32 9 gmark
21 cmark
22 31 94 gmark
22 cmark
31 cmark

% End Annotations
showpage
end
%%EOF
