%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:03:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCAGAACUGGGCAUGGCCUUCUGGCAUGAUUUAGCGGCUCCGGUCAUUGCUGGCAUUCUUGCCAGUAUGAUCGUGAACUGGCUGAACAAGCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[88.79854584 104.60305023]
[73.90383148 102.82895660]
[59.00911331 101.05485535]
[44.11439896 99.28076172]
[29.21968079 97.50666046]
[19.97700882 109.69355011]
[5.96778202 115.57898712]
[-9.00686359 113.67469025]
[-20.93791962 104.59141541]
[-26.68178558 90.84828186]
[-41.57650375 89.07418823]
[-49.44782257 98.23774719]
[-60.67794037 102.34949493]
[-72.36658478 100.47322845]
[-81.55596924 93.20328522]
[-85.97920990 82.48353577]
[-100.74267578 79.83017731]
[-115.50613403 77.17682648]
[-130.26959229 74.52346802]
[-145.03305054 71.87011719]
[-159.83419800 69.43582153]
[-174.66979980 67.22112274]
[-189.50541687 65.00642395]
[-204.34101868 62.79172897]
[-213.45605469 64.63602448]
[-219.58082581 60.28528976]
[-234.34428406 57.63193512]
[-249.58103943 63.69603348]
[-262.28164673 53.32169342]
[-259.38079834 37.18115234]
[-243.86264038 31.87841225]
[-231.69093323 42.86847687]
[-216.92747498 45.52183151]
[-202.12631226 47.95612717]
[-187.29071045 50.17082596]
[-172.45510864 52.38552094]
[-157.61950684 54.60021973]
[-150.42395020 52.44023132]
[-142.37969971 57.10665894]
[-127.61623383 59.76001358]
[-112.85277557 62.41336823]
[-98.08931732 65.06671906]
[-83.32585907 67.72007751]
[-69.11273956 56.37232590]
[-50.78360748 58.89857101]
[-39.80240631 74.17946625]
[-24.90768814 75.95356750]
[-16.09644890 63.94408417]
[-2.36565542 57.91737366]
[12.63733673 59.58368301]
[24.87221909 68.59503174]
[30.99377823 82.61194611]
[45.88849640 84.38603973]
[60.78321075 86.16014099]
[75.67792511 87.93423462]
[90.57264709 89.70833588]
[104.78253937 84.90428925]
[115.54515076 74.45602417]
[126.30775452 64.00775909]
[137.07037354 53.55949020]
[147.83297729 43.11122513]
[158.59558105 32.66296005]
[169.35820007 22.21469498]
[180.12080383 11.76642990]
[184.07652283 -4.14847898]
[199.90971375 -8.41952038]
[211.33256531 3.34698653]
[206.59420776 19.04666901]
[190.56906128 22.52903938]
[179.80645752 32.97730255]
[169.04385376 43.42556763]
[158.28123474 53.87383652]
[147.51863098 64.32209778]
[136.75602722 74.77036285]
[125.99341583 85.21862793]
[115.23080444 95.66689301]
[129.68504333 91.65754700]
[144.13929749 87.64820099]
[157.20841980 80.28627014]
[172.20001221 79.78442383]
[185.73222351 86.25585938]
[194.75236511 98.24073029]
[197.22563171 113.03541565]
[192.59410095 127.30247498]
[181.90257263 137.82345581]
[167.56288147 142.22500610]
[152.80987549 139.51417542]
[140.97293091 130.30421448]
[127.26907349 124.20468903]
[113.56520844 118.10516357]
[122.66721344 130.02798462]
[131.76921082 141.95079041]
[147.41461182 145.50062561]
[154.26396179 160.00807190]
[147.06303406 174.34425354]
[131.33576965 177.51168823]
[119.14676666 167.08058167]
[119.84639740 151.05279541]
[110.74440002 139.12997437]
[101.64239502 127.20716858]
[94.60641479 140.45462036]
[80.62333679 145.88357544]
[66.49148560 140.85458374]
[59.08150101 127.81265259]
[61.99598694 113.09851837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[10 47]
[11 46]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 37]
[22 36]
[23 35]
[24 34]
[26 33]
[27 32]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[90 100]
[91 99]
[92 98]
] def

init

% Start Annotations
1 56 0.0 1 colorpair
2 55 0.0 1 colorpair
3 54 0.0 1 colorpair
4 53 0.0 1 colorpair
5 52 0.0 1 colorpair
10 47 0.0 1 colorpair
11 46 0.0 1 colorpair
16 43 0.0 1 colorpair
17 42 0.0 1 colorpair
18 41 0.0 1 colorpair
19 40 0.0 1 colorpair
20 39 0.0 1 colorpair
21 37 0.0 1 colorpair
22 36 0.0 0.2 colorpair
23 35 0.0 1 colorpair
24 34 0.0 1 colorpair
26 33 0.0 1 colorpair
27 32 0.0 1 colorpair
57 76 0.0 0.6 colorpair
58 75 0.0 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair
64 69 0.0 1 colorpair
90 100 0.0 0.2 colorpair
91 99 0.0 0.2 colorpair
92 98 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 36 2 gmark
57 76 1 gmark
90 100 2 gmark
91 99 2 gmark
92 98 2 gmark

% End Annotations
showpage
end
%%EOF
