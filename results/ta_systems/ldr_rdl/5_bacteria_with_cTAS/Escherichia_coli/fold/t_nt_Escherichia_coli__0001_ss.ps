%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:54:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCGCAGUUUGCCAUGACUUUCUGGCACGACCUAGCGGCACCGAUCCUUGCGGGCAUUAUUACCGCAGUGAUUGUCAGCUGGUGGCGUAACCGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[3.89985347 325.55517578]
[-0.11436087 340.05938721]
[-6.88134766 353.50164795]
[-16.14100075 365.36523438]
[-27.53740692 375.19418335]
[-40.63251495 382.61068726]
[-54.92298508 387.32965088]
[-69.85953522 389.16970825]
[-84.86803436 388.06015015]
[-99.37159729 384.04357910]
[-112.81275940 377.27441406]
[-124.67485809 368.01284790]
[-134.50195312 356.61483765]
[-141.91633606 343.51852417]
[-146.63298035 329.22729492]
[-148.47062683 314.29046631]
[-147.35862732 299.28213501]
[-143.33972168 284.77920532]
[-136.56837463 271.33914185]
[-127.30488586 259.47854614]
[-115.90529633 249.65328979]
[-102.80779266 242.24104309]
[-88.51579285 237.52670288]
[-73.57865143 235.69148254]
[-58.57051086 236.80590820]
[-44.06824493 240.82716370]
[-30.62928009 247.60067749]
[-21.39814377 235.77755737]
[-12.16700745 223.95443726]
[-2.93587112 212.13133240]
[6.29526520 200.30821228]
[-2.20435739 189.27816772]
[-7.78237963 176.50830078]
[-10.10198498 162.75759888]
[-9.02018261 148.84461975]
[-4.59660625 135.59880066]
[2.90974426 123.81092834]
[13.05566883 114.18603516]
[25.23992729 107.30113983]
[38.73887634 103.57072449]
[52.74943542 103.22172546]
[66.43686676 106.27979279]
[78.98452759 112.56742096]
[88.88148499 101.29576111]
[98.61498260 89.88265228]
[108.18300629 78.33046722]
[103.75259399 62.08229446]
[109.76741791 46.52865601]
[123.69828033 37.66628265]
[140.00552368 38.78699875]
[149.23664856 26.96388054]
[158.46778870 15.14076138]
[167.69892883 3.31764340]
[176.93006897 -8.50547504]
[170.16032410 -21.00297737]
[168.69824219 -35.09709549]
[172.73367310 -48.63467789]
[181.61915588 -59.56040192]
[193.97357178 -66.22884369]
[207.89671326 -67.65222168]
[221.26153564 -63.64659119]
[230.82955933 -75.19877625]
[226.84898376 -90.19659424]
[232.47550964 -104.65763855]
[245.54562378 -113.02134705]
[261.03359985 -112.07169342]
[272.98400879 -102.17385101]
[276.80166626 -87.13372803]
[271.01861572 -72.73457336]
[257.85852051 -64.51314545]
[242.38174438 -65.63075256]
[232.81372070 -54.07857132]
[239.74407959 -39.75802231]
[239.77191162 -23.79081535]
[232.84150696 -9.34183121]
[220.28126526 0.70317817]
[204.54946899 4.31389618]
[188.75317383 0.72566164]
[179.52204895 12.54877949]
[170.29090881 24.37189865]
[161.05976868 36.19501495]
[151.82862854 48.01813507]
[156.70175171 60.53777313]
[154.69793701 73.93206787]
[146.23953247 84.64818573]
[133.47525024 89.78958130]
[119.73519135 87.89849091]
[110.16716766 99.45067596]
[107.80876160 107.29753876]
[100.15313721 111.19271851]
[90.25617981 122.46437836]
[99.05342865 136.02737427]
[103.72290802 151.49011230]
[103.90277863 167.62770081]
[99.58648682 183.16404724]
[91.12274933 196.87275696]
[79.18733215 207.67390442]
[64.72914124 214.71911621]
[48.89476013 217.45826721]
[32.93754196 215.68231201]
[18.11838341 209.53933716]
[8.88724709 221.36245728]
[-0.34388942 233.18557739]
[-9.57502556 245.00869751]
[-18.80616188 256.83181763]
[-8.97537136 268.22662354]
[-1.55675960 281.32052612]
[3.16452193 295.61026001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[43 91]
[44 90]
[45 88]
[46 87]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[61 72]
[62 71]
] def

init

% Start Annotations
27 105 0.32 0.2 colorpair
28 104 0.0 1 colorpair
29 103 0.0 0.6 colorpair
30 102 0.0 1 colorpair
31 101 0.16 1 colorpair
43 91 0.32 1 colorpair
44 90 0.16 1 colorpair
45 88 0.16 1 colorpair
46 87 0.16 0.2 colorpair
50 82 0.0 0.2 colorpair
51 81 0.32 1 colorpair
52 80 0.16 0.2 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
27 105 2 gmark
27 cmark
105 cmark
29 103 1 gmark
101 cmark
43 cmark
91 cmark
44 cmark
45 cmark
46 87 2 gmark
87 cmark
50 82 2 gmark
51 cmark
81 cmark
52 80 2 gmark
52 cmark

% End Annotations
showpage
end
%%EOF
