%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:55:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCAGAGCUGGGCAUGGCCUUCUGGCAUGAUUUAGCGGCUCCGGUCAUUGCUGGCAUUCUUGCCAGUAUGAUCGUGAACUGGCUGAACAAGCGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[-35.90427780 502.13070679]
[-50.79961777 503.96453857]
[-65.79292297 504.62402344]
[-80.79174805 504.10513306]
[-95.70362854 502.41104126]
[-110.43661499 499.55215454]
[-124.89988708 495.54617310]
[-139.00425720 490.41775513]
[-152.66278076 484.19851685]
[-165.79122925 476.92678833]
[-178.30868530 468.64746094]
[-190.13795471 459.41152954]
[-201.20610046 449.27593994]
[-211.44490051 438.30319214]
[-220.79121399 426.56094360]
[-229.18743896 414.12158203]
[-236.58177185 401.06179810]
[-242.92866516 387.46212769]
[-248.18894958 373.40640259]
[-252.33023071 358.98129272]
[-255.32695007 344.27572632]
[-257.16061401 329.38037109]
[-257.81997681 314.38705444]
[-257.30093384 299.38824463]
[-255.60667419 284.47637939]
[-252.74766541 269.74340820]
[-248.74151611 255.28018188]
[-243.61294556 241.17585754]
[-237.39356995 227.51741028]
[-230.12173462 214.38902283]
[-221.84225464 201.87165833]
[-212.60620117 190.04248047]
[-202.47050476 178.97444153]
[-191.49765015 168.73574829]
[-179.75531006 159.38955688]
[-167.31585693 150.99346924]
[-154.25601196 143.59925842]
[-140.65626526 137.25250244]
[-126.60049438 131.99235535]
[-112.17533112 127.85123444]
[-97.46973419 124.85466766]
[-82.57435608 123.02113342]
[-67.58103943 122.36193848]
[-52.58222198 122.88114166]
[-37.67037964 124.57555389]
[-22.93744659 127.43471527]
[-8.47426033 131.44099426]
[5.63000870 136.56971741]
[19.28840065 142.78923035]
[32.41670609 150.06120300]
[44.93398666 158.34080505]
[54.16512299 146.51768494]
[63.39625931 134.69458008]
[72.62739563 122.87145233]
[65.96177673 110.66593170]
[64.47013092 96.83913422]
[68.37919617 83.49280548]
[77.09477997 72.65564728]
[89.29206848 65.97496796]
[103.11701202 64.46625519]
[116.46815491 68.35884857]
[126.03617859 56.80665970]
[122.05559540 41.80884171]
[127.68212128 27.34779549]
[140.75224304 18.98409081]
[156.24023438 19.93374062]
[168.19064331 29.83158875]
[172.00828552 44.87170410]
[166.22521973 59.27086258]
[153.06513977 67.49229431]
[137.58836365 66.37467957]
[128.02033997 77.92686462]
[134.81785583 92.24887085]
[134.73789978 108.10192871]
[127.79627228 122.35464478]
[115.36413574 132.19171143]
[99.89717102 135.67004395]
[84.45051575 132.10258484]
[75.21937561 143.92570496]
[65.98824310 155.74882507]
[56.75710678 167.57194519]
[67.82546234 177.70730591]
[78.06449127 188.67984009]
[87.41104889 200.42189026]
[95.80751801 212.86108398]
[103.20212555 225.92071533]
[109.54928589 239.52026367]
[114.80986786 253.57586670]
[118.95143890 268.00091553]
[121.94845581 282.70642090]
[123.78244019 297.60174561]
[124.44209290 312.59503174]
[123.92334747 327.59387207]
[122.22940063 342.50576782]
[119.37068939 357.23876953]
[115.36484528 371.70208740]
[110.23656464 385.80651855]
[104.01746368 399.46508789]
[96.74588776 412.59362793]
[88.46667480 425.11114502]
[79.23085785 436.94052124]
[69.09538269 448.00878906]
[58.12274551 458.24768066]
[46.38059235 467.59411621]
[33.94131851 475.99047852]
[20.88161659 483.38494873]
[7.28200626 489.73196411]
[-6.77366495 494.99240112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[51 81]
[52 80]
[53 79]
[54 78]
[61 72]
[62 71]
] def

init

% Start Annotations
51 81 0.32 0.6 colorpair
53 79 0.0 0.6 colorpair
54 78 0.0 0.6 colorpair
61 72 0.0 0.6 colorpair
62 71 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
51 81 1 gmark
51 cmark
81 cmark
52 80 6 gmark
52 cmark
53 79 1 gmark
54 78 1 gmark
61 72 1 gmark
62 71 1 gmark

% End Annotations
showpage
end
%%EOF
