%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:55:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCGCAGUUUGCCAUGACUUUCUGGCACGACCUGGCGGCACCGAUCCUUGCGGGCAUUAUUACCGCAGUGAUUGUCAGCUGGUGGCGUAACCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[-21.35720062 269.68688965]
[-19.09800529 284.57684326]
[-20.09297371 299.60427856]
[-24.29557228 314.06637573]
[-31.50923729 327.28671265]
[-41.39657211 338.64691162]
[-53.49512863 347.61569214]
[-67.23903656 353.77355957]
[-81.98546600 356.83245850]
[-97.04470062 356.64935303]
[-111.71238708 353.23278809]
[-125.30250549 346.74258423]
[-137.17941284 337.48226929]
[-146.78759766 325.88500977]
[-153.67767334 312.49319458]
[-157.52738953 297.93316650]
[-158.15667725 282.88598633]
[-155.53610229 268.05538940]
[-149.78823853 254.13504028]
[-141.18191528 241.77601624]
[-130.11967468 231.55638123]
[-117.11891174 223.95411682]
[-102.78770447 219.32481384]
[-87.79634094 217.88496399]
[-72.84600067 219.70193481]
[-58.63593292 224.69071960]
[-45.83077240 232.61801147]
[-35.38250732 221.85540771]
[-24.93424225 211.09280396]
[-14.48597717 200.33018494]
[-4.03771114 189.56758118]
[-11.30659962 177.68005371]
[-15.47996998 164.37547302]
[-16.30423927 150.44607544]
[-13.72539902 136.72251892]
[-7.89252567 124.02435303]
[0.85082889 113.11110687]
[11.98686981 104.63682556]
[24.85422134 99.11089325]
[38.68720627 96.86740875]
[52.66140366 98.04498291]
[65.94279480 102.57819366]
[77.73751831 110.20121765]
[88.80501556 100.07646942]
[99.72126770 89.78884125]
[110.48387909 79.34057617]
[107.83771515 62.71274567]
[115.49481964 47.90325546]
[130.29594421 40.59580612]
[146.38391113 43.46366501]
[156.83216858 32.70105743]
[167.28044128 21.93844795]
[177.72869873 11.17584038]
[188.17697144 0.41323113]
[182.78839111 -12.74400616]
[182.85182190 -26.91827774]
[188.32424927 -39.94650269]
[198.33973694 -49.85326767]
[211.34629822 -55.15034103]
[225.34632874 -55.06018829]
[238.20339966 -49.62991333]
[248.96600342 -60.07817841]
[246.63275146 -75.41883087]
[253.79200745 -89.18563080]
[267.69088745 -96.08496094]
[282.98498535 -93.46389008]
[293.79342651 -82.33027649]
[295.96011353 -66.96521759]
[288.65194702 -53.27689743]
[274.67904663 -46.52874374]
[259.41427612 -49.31557083]
[248.65167236 -38.86730576]
[253.99041748 -23.88485909]
[252.29298401 -8.01229477]
[243.84568787 5.60067940]
[230.27929688 14.23085785]
[214.25437927 16.12623978]
[198.93957520 10.86149693]
[188.49130249 21.62410545]
[178.04304504 32.38671494]
[167.59477234 43.14932251]
[157.14651489 53.91193008]
[160.64624023 66.88775635]
[157.21014404 79.99305725]
[147.64160156 89.73770142]
[134.39173889 93.47122955]
[120.93214417 90.10317993]
[110.16953278 100.55144501]
[106.97158051 108.10371399]
[98.92976379 111.14397430]
[87.86225891 121.26871490]
[95.12509918 135.70262146]
[98.08241272 151.57382202]
[96.50816345 167.62738037]
[90.53433990 182.59613037]
[80.63989258 195.30067444]
[67.61235809 204.74232483]
[52.48516083 210.18154907]
[36.45566559 211.19602966]
[20.79037857 207.71327209]
[6.72489738 200.01583862]
[-3.72336793 210.77845764]
[-14.17163372 221.54106140]
[-24.61989784 232.30366516]
[-35.06816483 243.06628418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[43 91]
[44 90]
[45 88]
[46 87]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[61 72]
[62 71]
] def

init

% Start Annotations
27 105 0.32 0.6 colorpair
28 104 0.0 1 colorpair
29 103 0.0 0.6 colorpair
30 102 0.0 1 colorpair
31 101 0.16 1 colorpair
43 91 0.32 1 colorpair
44 90 0.16 1 colorpair
45 88 0.16 1 colorpair
46 87 0.16 0.2 colorpair
50 82 0.0 0.2 colorpair
51 81 0.32 1 colorpair
52 80 0.16 0.2 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
27 105 1 gmark
27 cmark
105 cmark
29 103 1 gmark
101 cmark
43 cmark
91 cmark
44 cmark
45 cmark
46 87 2 gmark
87 cmark
50 82 2 gmark
51 cmark
81 cmark
52 80 2 gmark
52 cmark

% End Annotations
showpage
end
%%EOF
