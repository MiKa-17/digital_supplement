%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:13:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGUGCAGUUUAGCGUGAUGUUCUGGCACGACCUGGCAGCCCCAAUCCUUGCGGGUAUUAUCACCGCAGCGAUUGUCGGCUGGUGGCGUAACAGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[6.17634583 280.09808350]
[0.76012111 284.35073853]
[-5.42261124 287.35278320]
[-12.08835030 288.97274780]
[-18.93276596 289.14248657]
[-25.64459038 287.85989380]
[-31.91978264 285.18881226]
[-37.47528458 281.25579834]
[-49.68632126 289.96731567]
[-61.89735794 298.67883301]
[-74.10839081 307.39035034]
[-86.31942749 316.10186768]
[-98.53046417 324.81338501]
[-100.89014435 340.44052124]
[-113.65816498 349.75466919]
[-129.25949097 347.22988892]
[-138.43811035 334.36410522]
[-135.74853516 318.79037476]
[-122.78643036 309.74829102]
[-107.24198151 312.60235596]
[-95.03095245 303.89083862]
[-82.81991577 295.17932129]
[-70.60887909 286.46780396]
[-58.39784241 277.75628662]
[-46.18680573 269.04473877]
[-46.19971085 244.51968384]
[-28.70814133 227.01373291]
[-3.73922396 227.00628662]
[5.14736032 214.92205811]
[14.03394413 202.83782959]
[22.92052841 190.75360107]
[31.80711365 178.66937256]
[29.31503487 164.02952576]
[38.15515137 151.64779663]
[53.52766800 149.13313293]
[62.41424942 137.04890442]
[71.30083466 124.96467590]
[72.75005341 117.59993744]
[80.62174988 112.66521454]
[89.85288239 100.84209442]
[91.98417664 92.93052673]
[99.52436829 88.81634521]
[102.36820984 73.25282288]
[116.44538116 68.38634491]
[126.01340485 56.83416367]
[135.58142090 45.28197479]
[145.14944458 33.72978973]
[154.71746826 22.17760658]
[157.30221558 4.01731730]
[173.86341858 -1.58682764]
[183.09454346 -13.40994549]
[192.32568359 -25.23306465]
[201.55682373 -37.05618286]
[210.78796387 -48.87929916]
[213.18211365 -64.51831055]
[227.11318970 -69.78843689]
[236.34432983 -81.61155701]
[245.57545471 -93.43467712]
[254.80659485 -105.25779724]
[264.03771973 -117.08090973]
[273.26885986 -128.90403748]
[268.07522583 -143.43089294]
[271.58212280 -158.45437622]
[282.67053223 -169.18055725]
[297.80218506 -172.18673706]
[312.14859009 -166.51365662]
[321.13189697 -153.97157288]
[321.88555908 -138.56263733]
[314.16909790 -125.20376587]
[300.44476318 -118.15773010]
[285.09197998 -119.67289734]
[275.86083984 -107.84977722]
[266.62973022 -96.02665710]
[257.39859009 -84.20353699]
[248.16744995 -72.38042450]
[238.93630981 -60.55730438]
[237.20242310 -45.76396179]
[222.61108398 -39.64816284]
[213.37994385 -27.82504654]
[204.14880371 -16.00192833]
[194.91766357 -4.17880964]
[185.68653870 7.64430857]
[186.83520508 19.78181267]
[179.10969543 29.72869301]
[166.26965332 31.74562645]
[156.70162964 43.29781342]
[147.13360596 54.84999847]
[137.56558228 66.40218353]
[127.99756622 77.95436859]
[125.83809662 92.69159698]
[111.07655334 98.38436127]
[101.67600250 110.07322693]
[92.44486237 121.89634705]
[83.38506317 133.85125732]
[74.49848175 145.93548584]
[65.61190033 158.01972961]
[67.79302216 173.44309998]
[58.60861588 185.57164001]
[43.89134216 187.55595398]
[35.00476074 199.64018250]
[26.11817551 211.72441101]
[17.23159027 223.80863953]
[8.34500599 235.89286804]
[12.22853184 241.69152832]
[14.78965855 248.16934204]
[15.91718769 255.02980042]
[15.56540775 261.96011353]
[13.75591660 268.64556885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[35 96]
[36 95]
[37 94]
[39 93]
[40 92]
[42 91]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
] def

init

% Start Annotations
8 25 0.0 1 colorpair
9 24 0.0 1 colorpair
10 23 0.0 1 colorpair
11 22 0.16 1 colorpair
12 21 0.16 1 colorpair
13 20 0.0 1 colorpair
28 103 0.0 1 colorpair
29 102 0.0 1 colorpair
30 101 0.0 1 colorpair
31 100 0.0 0.6 colorpair
32 99 0.0 1 colorpair
35 96 0.0 1 colorpair
36 95 0.0 1 colorpair
37 94 0.0 1 colorpair
39 93 0.16 1 colorpair
40 92 0.0 1 colorpair
42 91 0.0 1 colorpair
44 89 0.0 1 colorpair
45 88 0.0 0.6 colorpair
46 87 0.0 1 colorpair
47 86 0.0 1 colorpair
48 85 0.0 0.6 colorpair
50 82 0.0 1 colorpair
51 81 0.16 1 colorpair
52 80 0.0 1 colorpair
53 79 0.0 1 colorpair
54 78 0.16 1 colorpair
56 76 0.0 1 colorpair
57 75 0.16 1 colorpair
58 74 0.0 1 colorpair
59 73 0.16 1 colorpair
60 72 0.0 1 colorpair
61 71 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
11 cmark
12 cmark
21 cmark
31 100 1 gmark
39 cmark
45 88 1 gmark
48 85 1 gmark
51 cmark
81 cmark
54 cmark
78 cmark
57 cmark
75 cmark
59 cmark
73 cmark

% End Annotations
showpage
end
%%EOF
