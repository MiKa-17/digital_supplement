%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:12:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCACAGUUAGGCGUGGCCUUCUGGCACGAUUUAGCAGCUCCAGUCAUCGCUGGAAUUAUUGCCAGUCUGAUUGUGGGCUGGCUGCGUAACAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[87.40587616 235.58860779]
[89.50459290 220.50500488]
[97.56243896 207.58250427]
[110.18333435 199.06001282]
[107.52998352 184.29655457]
[104.87663269 169.53309631]
[102.22327423 154.76963806]
[90.94673920 154.06195068]
[80.05485535 151.05729675]
[70.01039124 145.88331604]
[61.24012756 138.75987244]
[54.11668015 129.98960876]
[48.94271088 119.94514465]
[45.93805313 109.05326080]
[45.23036575 97.77672577]
[30.46690750 95.12336731]
[15.70344925 92.47001648]
[0.93999088 89.81666565]
[-13.82346821 87.16330719]
[-28.58692741 84.50995636]
[-43.38808060 82.07566071]
[-58.22368622 79.86096191]
[-73.05928802 77.64626312]
[-87.89488983 75.43156433]
[-97.00994110 77.27586365]
[-103.13470459 72.92512512]
[-117.89816284 70.27177429]
[-133.13491821 76.33586884]
[-145.83551025 65.96153259]
[-142.93466187 49.82098770]
[-127.41651154 44.51824951]
[-115.24480438 55.50831604]
[-100.48134613 58.16167068]
[-85.68019104 60.59596252]
[-70.84458923 62.81066132]
[-56.00898743 65.02536011]
[-41.17338562 67.24005890]
[-33.97782516 65.08007050]
[-25.93357277 69.74649811]
[-11.17011356 72.39984894]
[3.59334493 75.05320740]
[18.35680389 77.70655823]
[33.12026215 80.35990906]
[47.88372040 83.01326752]
[53.80446625 70.49359131]
[62.67403412 59.85740662]
[73.92624664 51.78366470]
[86.84283447 46.78773880]
[100.59928894 45.18853760]
[102.81398773 30.35293388]
[105.02868652 15.51733112]
[107.24338531 0.68172824]
[109.45808411 -14.15387440]
[102.94513702 -29.20424080]
[112.93856049 -42.20668793]
[129.15797424 -39.78540802]
[134.91824341 -24.43121147]
[124.29368591 -11.93917656]
[122.07898712 2.89642668]
[119.86428833 17.73202896]
[117.64959717 32.56763077]
[115.43489838 47.40323639]
[123.16733551 50.32173157]
[130.37309265 54.36962509]
[136.88833618 59.45488358]
[142.56495667 65.46189880]
[147.27389526 72.25411224]
[150.90811157 79.67710114]
[153.38496399 87.56211090]
[154.64816284 95.72988892]
[169.62182617 96.61849976]
[184.59547424 97.50711060]
[199.56913757 98.39572144]
[214.54278564 99.28433228]
[229.51644897 100.17293549]
[244.49009705 101.06154633]
[259.46374512 101.95015717]
[274.43740845 102.83876801]
[288.85000610 95.01513672]
[302.68847656 103.81451416]
[301.71697998 120.18486023]
[286.93490601 127.28576660]
[273.54879761 117.81242371]
[258.57513428 116.92381287]
[243.60148621 116.03520203]
[228.62783813 115.14659882]
[213.65417480 114.25798798]
[198.68052673 113.36937714]
[183.70686340 112.48076630]
[168.73321533 111.59215546]
[153.75955200 110.70354462]
[140.98796082 136.39564514]
[116.98673248 152.11627197]
[119.64009094 166.87973022]
[122.29344177 181.64320374]
[124.94679260 196.40666199]
[139.74542236 200.00119019]
[151.79862976 209.30923462]
[159.01815796 222.71813965]
[160.15315247 237.90469360]
[155.00698853 252.23776245]
[144.47125244 263.23403931]
[130.37133789 268.98837280]
[115.15013123 268.50375366]
[101.44480896 261.86419678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 96]
[5 95]
[6 94]
[7 93]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 37]
[22 36]
[23 35]
[24 34]
[26 33]
[27 32]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% Start Annotations
4 96 0.0 1 colorpair
5 95 0.0 1 colorpair
6 94 0.0 0.6 colorpair
7 93 0.0 1 colorpair
15 44 0.0 1 colorpair
16 43 0.0 1 colorpair
17 42 0.16 1 colorpair
18 41 0.0 1 colorpair
19 40 0.0 0.6 colorpair
20 39 0.0 1 colorpair
21 37 0.0 1 colorpair
22 36 0.0 0.6 colorpair
23 35 0.0 1 colorpair
24 34 0.0 0.6 colorpair
26 33 0.16 1 colorpair
27 32 0.16 1 colorpair
49 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 0.6 colorpair
52 59 0.16 1 colorpair
53 58 0.16 1 colorpair
70 91 0.16 1 colorpair
71 90 0.0 1 colorpair
72 89 0.0 1 colorpair
73 88 0.0 1 colorpair
74 87 0.16 1 colorpair
75 86 0.16 1 colorpair
76 85 0.0 0.6 colorpair
77 84 0.16 1 colorpair
78 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 94 1 gmark
42 cmark
19 40 1 gmark
22 36 1 gmark
24 34 1 gmark
26 cmark
27 cmark
51 60 1 gmark
52 cmark
59 cmark
53 cmark
70 cmark
91 cmark
87 cmark
75 cmark
76 85 1 gmark
84 cmark

% End Annotations
showpage
end
%%EOF
