%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCUCAGUUAGGCCUGGUGCUGUGGGACGAUCUGGCGGCUCCGGUGAUUGCUGGCAUUCUUGUCAGCAUCAUCGUGAGCCGGAUGGAUAACCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[-14.04355240 276.35678101]
[-18.67036819 287.79058838]
[-25.79031563 297.85116577]
[-35.02046585 306.00485229]
[-45.86610031 311.82034302]
[-57.74722290 314.99151611]
[-70.02957916 315.35354614]
[-82.05850983 312.89138794]
[-93.19385529 307.74050903]
[-102.84400177 300.17926025]
[-114.76682281 309.28125000]
[-126.68963623 318.38327026]
[-128.54252625 334.07855225]
[-141.00254822 343.80087280]
[-156.67738342 341.78213501]
[-166.26742554 329.22003174]
[-164.08308411 313.56741333]
[-151.42027283 304.11071777]
[-135.79164124 306.46044922]
[-123.86882019 297.35842896]
[-111.94600677 288.25643921]
[-117.99618530 271.39169312]
[-118.09535217 253.45257568]
[-112.21746063 236.47996521]
[-101.01726532 222.40963745]
[-85.75744629 212.85159302]
[-68.16626740 208.90577698]
[-50.24183655 211.03550720]
[-34.02515411 219.01318359]
[-23.57689095 208.25056458]
[-13.12862492 197.48796082]
[-2.68035960 186.72535706]
[7.76790571 175.96273804]
[5.11234236 164.67442322]
[8.34036446 153.41047668]
[16.74341202 145.07179260]
[28.26480103 141.86560059]
[40.00231171 144.72206116]
[51.06980896 134.59730530]
[62.13731003 124.47256470]
[73.20481110 114.34781647]
[84.27230835 104.22307587]
[88.83119965 88.14873505]
[105.14737701 84.55010986]
[115.90998840 74.10184479]
[126.67259216 63.65357590]
[137.43519592 53.20531082]
[148.19781494 42.75704575]
[158.96041870 32.30878067]
[169.56701660 21.70217896]
[180.01528931 10.93956947]
[190.46354675 0.17696103]
[200.91181946 -10.58564758]
[211.36007690 -21.34825706]
[209.61769104 -34.80113983]
[215.89654541 -46.60469818]
[227.67636108 -52.50321198]
[240.50234985 -50.51925659]
[251.26495361 -60.96752548]
[255.77725220 -76.13161469]
[270.29858398 -79.44524384]
[281.06118774 -89.89350891]
[291.82379150 -100.34177399]
[291.80737305 -116.14605713]
[303.03002930 -127.27381897]
[318.83361816 -127.12316895]
[329.84210205 -115.78347778]
[329.52438354 -99.98238373]
[318.06890869 -89.09439850]
[302.27206421 -89.57916260]
[291.50946045 -79.13089752]
[280.74685669 -68.68263245]
[277.00436401 -54.26586914]
[261.71322632 -50.20491409]
[250.95060730 -39.75664902]
[251.46589661 -23.01987839]
[239.53826904 -10.79414940]
[222.12269592 -10.89999104]
[211.67442322 -0.13738237]
[201.22616577 10.62522602]
[190.77789307 21.38783455]
[180.32963562 32.15044403]
[177.88972473 39.25597000]
[169.40869141 43.07138824]
[158.64607239 53.51965332]
[147.88346863 63.96791840]
[137.12086487 74.41618347]
[126.35825348 84.86444855]
[115.59564209 95.31271362]
[114.69155884 107.02515411]
[106.14247894 115.08193207]
[94.39705658 115.29057312]
[83.32955170 125.41532135]
[72.26205444 135.54006958]
[61.19455719 145.66481018]
[50.12705612 155.78955078]
[50.11342239 174.60690308]
[36.69399261 187.34495544]
[18.53051567 186.41101074]
[8.08224964 197.17361450]
[-2.36601615 207.93621826]
[-12.81428146 218.69883728]
[-23.26254654 229.46144104]
[-16.89179420 240.06703186]
[-13.12554359 251.84194946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[12 19]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[38 96]
[39 95]
[40 94]
[41 93]
[42 92]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[58 75]
[59 74]
[61 72]
[62 71]
[63 70]
] def

init

% Start Annotations
10 21 0.0 1 colorpair
11 20 0.0 1 colorpair
12 19 0.0 1 colorpair
29 103 0.0 1 colorpair
31 101 0.0 1 colorpair
32 100 0.0 1 colorpair
33 99 0.0 1 colorpair
38 96 0.0 1 colorpair
39 95 0.0 1 colorpair
40 94 0.0 1 colorpair
41 93 0.0 1 colorpair
42 92 0.0 0.2 colorpair
44 89 0.0 1 colorpair
45 88 0.16 1 colorpair
46 87 0.0 1 colorpair
47 86 0.0 1 colorpair
48 85 0.0 1 colorpair
49 84 0.0 1 colorpair
50 82 0.0 1 colorpair
51 81 0.0 1 colorpair
52 80 0.0 1 colorpair
53 79 0.0 1 colorpair
58 75 0.0 1 colorpair
59 74 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
30 102 4 gmark
30 cmark
102 cmark
42 92 2 gmark
88 cmark
54 78 4 gmark
78 cmark

% End Annotations
showpage
end
%%EOF
