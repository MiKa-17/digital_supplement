%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:12:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCACAGUUAGGCGUGGCCUUCUGGCACGAUUUAGCGGCUCCCAUCAUCGCUGGCACCAUUGCCAGCCUGAUUGUGAGCUGGCUG_______________\
) } def
/len { sequence length } bind def

/coor [
[22.46916199 260.38482666]
[13.29574108 260.14916992]
[4.23737860 258.69491577]
[-4.54481697 256.04855347]
[-12.89472580 252.25765991]
[-20.66399002 247.39021301]
[-27.71464729 241.53332520]
[-33.92158508 234.79162598]
[-39.17476273 227.28547668]
[-43.38115311 219.14875793]
[-57.69948959 223.61924744]
[-65.09242249 229.24592590]
[-72.49524689 228.00581360]
[-86.93646240 232.06181335]
[-101.37768555 236.11781311]
[-108.43227386 247.03419495]
[-120.65855408 250.05778503]
[-131.28526306 244.08186340]
[-145.83737183 247.72001648]
[-160.38948059 251.35816956]
[-174.94158936 254.99630737]
[-188.84126282 264.70379639]
[-202.01718140 254.03460693]
[-195.41241455 238.42007446]
[-178.57972717 240.44419861]
[-164.02761841 236.80606079]
[-149.47550964 233.16790771]
[-134.92340088 229.52975464]
[-123.08007050 216.66838074]
[-105.43368530 221.67658997]
[-90.99246216 217.62059021]
[-76.55124664 213.56459045]
[-62.16997147 209.30090332]
[-47.85163498 204.83042908]
[-48.45375824 181.63902283]
[-41.29478836 159.55131531]
[-27.17896271 141.09117126]
[-7.70624352 128.37254333]
[14.90903091 122.85743713]
[38.08993912 125.18776703]
[59.19061279 135.11073303]
[69.08757019 123.83907318]
[78.98452759 112.56742096]
[88.88148499 101.29576111]
[98.61498260 89.88265228]
[108.18300629 78.33046722]
[117.75102234 66.77828217]
[127.31904602 55.22610092]
[136.88706970 43.67391586]
[146.28761292 31.98504829]
[148.68177795 16.34603882]
[162.61285400 11.07590866]
[171.84399414 -0.74720949]
[181.07511902 -12.57032776]
[190.30625916 -24.39344597]
[189.52226257 -37.36726761]
[197.58064270 -47.04644394]
[209.68203735 -48.52781677]
[219.25006104 -60.08000565]
[228.81808472 -71.63218689]
[238.38610840 -83.18437195]
[247.95411682 -94.73655701]
[257.52215576 -106.28874207]
[267.09017944 -117.84092712]
[269.29940796 -134.09059143]
[284.57705688 -140.05088806]
[297.20678711 -129.59040833]
[294.19619751 -113.46997070]
[278.64236450 -108.27291107]
[269.07434082 -96.72072601]
[259.50631714 -85.16854095]
[249.93829346 -73.61635590]
[240.37026978 -62.06416702]
[230.80224609 -50.51198196]
[221.23422241 -38.95979691]
[219.31263733 -21.58202362]
[202.12937927 -15.16230965]
[192.89823914 -3.33919120]
[183.66709900 8.48392677]
[174.43597412 20.30704498]
[172.70208740 35.10038757]
[158.11073303 41.21618652]
[156.44989014 48.53610229]
[148.43925476 53.24193573]
[138.87123108 64.79412079]
[129.30320740 76.34630585]
[119.73519135 87.89849091]
[110.16716766 99.45067596]
[107.80876160 107.29753876]
[100.15313721 111.19271851]
[90.25617981 122.46437836]
[80.35922241 133.73603821]
[70.46227264 145.00769043]
[76.20439148 152.21118164]
[80.93553925 160.11306763]
[84.57201385 168.57244873]
[87.04960632 177.43856812]
[88.32476044 186.55349731]
[88.37535095 195.75494385]
[87.20101929 204.87918091]
[84.82322693 213.76391602]
[81.28482819 222.25115967]
[76.64929199 230.19010925]
[70.99960327 237.43977356]
[64.43673706 243.87147522]
[57.07786560 249.37117004]
[49.05428314 253.84143066]
[40.50904083 257.20318604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 34]
[11 33]
[13 32]
[14 31]
[15 30]
[18 28]
[19 27]
[20 26]
[21 25]
[41 93]
[42 92]
[43 91]
[44 90]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 82]
[52 80]
[53 79]
[54 78]
[55 77]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% Start Annotations
10 34 0.0 1 colorpair
11 33 0.0 1 colorpair
13 32 0.0 1 colorpair
14 31 0.0 1 colorpair
15 30 0.0 1 colorpair
18 28 0.0 1 colorpair
19 27 0.0 1 colorpair
20 26 0.0 1 colorpair
21 25 0.0 1 colorpair
41 93 0.0 1 colorpair
42 92 0.0 1 colorpair
43 91 0.0 1 colorpair
44 90 0.0 1 colorpair
45 88 0.0 1 colorpair
46 87 0.0 1 colorpair
47 86 0.0 1 colorpair
48 85 0.0 1 colorpair
49 84 0.0 1 colorpair
50 82 0.0 1 colorpair
52 80 0.0 1 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
55 77 0.0 1 colorpair
58 75 0.0 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair
64 69 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
