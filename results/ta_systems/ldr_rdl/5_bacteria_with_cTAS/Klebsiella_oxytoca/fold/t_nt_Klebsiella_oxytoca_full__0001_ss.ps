%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:04:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCUCAGUUGGGCCUGCUGCUGUGGGACGAUCUGGCGGCUCCGGUGAUUGCUGGCAUUCUGGUCAGCAUUAUCGUGAGCCGGAUGGAUAACCGCAAGUAG\
) } def
/len { sequence length } bind def

/coor [
[30.77583122 238.98573303]
[24.25352478 249.25468445]
[14.63731194 256.64865112]
[3.10412431 260.29284668]
[-8.94478130 259.76968384]
[-20.05406380 255.16629028]
[-30.58396530 265.84902954]
[-41.11386490 276.53179932]
[-51.64376831 287.21453857]
[-48.97323990 302.50009155]
[-55.82757187 316.42120361]
[-69.57113647 323.62496948]
[-84.91925812 321.34133911]
[-95.97026062 310.44845581]
[-98.47481537 295.13482666]
[-91.46986389 281.28887939]
[-77.64896393 274.23464966]
[-62.32651901 276.68463135]
[-51.79661942 266.00189209]
[-41.26671600 255.31913757]
[-30.73681450 244.63638306]
[-36.38585663 227.59762573]
[-32.72550201 209.93873596]
[-20.65806770 196.42469788]
[-3.36582208 190.74478149]
[14.52789688 194.50555420]
[24.09591675 182.95336914]
[33.66393661 171.40118408]
[43.23196030 159.84899902]
[45.15354919 142.47122192]
[62.33680725 136.05151367]
[71.56794739 124.22838593]
[80.79907990 112.40527344]
[77.19232178 101.54132843]
[79.30460358 90.29089355]
[86.60628510 81.47502899]
[97.26645660 77.30432129]
[108.61206055 78.82457733]
[118.50901794 67.55292511]
[128.40597534 56.28126907]
[138.30293274 45.00961304]
[148.19989014 33.73795319]
[151.30691528 15.65969563]
[168.02273560 10.53513813]
[177.59075928 -1.01704717]
[187.15876770 -12.56923199]
[196.72679138 -24.12141800]
[206.29481506 -35.67360306]
[215.86283875 -47.22578812]
[225.26339722 -58.91465378]
[234.49452209 -70.73777008]
[243.72566223 -82.56089020]
[252.95680237 -94.38401031]
[249.77899170 -107.56632996]
[254.74742126 -119.97286987]
[265.81716919 -127.10594177]
[278.77734375 -126.52140808]
[288.34536743 -138.07359314]
[297.91339111 -149.62577820]
[307.48141479 -161.17796326]
[317.04943848 -172.73014832]
[326.61746216 -184.28233337]
[336.18548584 -195.83451843]
[334.45788574 -211.54409790]
[344.40966797 -223.82160950]
[360.13665771 -225.38301086]
[372.30825806 -215.30197144]
[373.70330811 -199.55937195]
[363.49414062 -187.49502563]
[347.73767090 -186.26649475]
[338.16964722 -174.71430969]
[328.60162354 -163.16212463]
[319.03359985 -151.60993958]
[309.46557617 -140.05775452]
[299.89755249 -128.50556946]
[290.32952881 -116.95339203]
[292.65194702 -100.36640930]
[282.11004639 -86.92214203]
[264.77990723 -85.15287018]
[255.54878235 -73.32975006]
[246.31764221 -61.50663376]
[237.08650208 -49.68351746]
[235.42565918 -42.36359787]
[227.41502380 -37.65776825]
[217.84700012 -26.10558128]
[208.27897644 -14.55339718]
[198.71095276 -3.00121188]
[189.14294434 8.55097294]
[179.57492065 20.10315895]
[180.37333679 32.26872253]
[172.36437988 41.98884201]
[159.47154236 43.63491058]
[149.57458496 54.90656662]
[139.67762756 66.17822266]
[129.78067017 77.44988251]
[119.88372040 88.72153473]
[121.91064453 106.51841736]
[110.48519135 120.31321716]
[92.62220001 121.63640594]
[83.39105988 133.45951843]
[74.15992737 145.28263855]
[74.94393158 158.25646973]
[66.88555145 167.93563843]
[54.78414536 169.41702271]
[45.21612167 180.96920776]
[35.64810181 192.52139282]
[26.08008194 204.07357788]
[31.77293396 214.94313049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[26 107]
[27 106]
[28 105]
[29 104]
[31 101]
[32 100]
[33 99]
[38 96]
[39 95]
[40 94]
[41 93]
[42 92]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 82]
[51 81]
[52 80]
[53 79]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% Start Annotations
6 21 0.16 1 colorpair
7 20 0.0 1 colorpair
8 19 0.0 1 colorpair
9 18 0.16 1 colorpair
26 107 0.0 1 colorpair
27 106 0.0 1 colorpair
28 105 0.16 0.6 colorpair
29 104 0.0 1 colorpair
31 101 0.0 1 colorpair
32 100 0.0 1 colorpair
33 99 0.16 1 colorpair
38 96 0.0 1 colorpair
39 95 0.0 1 colorpair
40 94 0.0 1 colorpair
41 93 0.16 1 colorpair
42 92 0.0 1 colorpair
44 89 0.0 1 colorpair
45 88 0.16 1 colorpair
46 87 0.0 1 colorpair
47 86 0.0 1 colorpair
48 85 0.0 1 colorpair
49 84 0.0 0.6 colorpair
50 82 0.16 1 colorpair
51 81 0.0 1 colorpair
52 80 0.16 1 colorpair
53 79 0.0 1 colorpair
57 76 0.0 1 colorpair
58 75 0.0 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
21 cmark
9 cmark
28 105 1 gmark
28 cmark
99 cmark
93 cmark
88 cmark
49 84 1 gmark
50 cmark
52 cmark
63 70 1 gmark
63 cmark

% End Annotations
showpage
end
%%EOF
