%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCAGAACUGGGCAUGGCCUUCUGGCAUGAUUUAGCGGCUCCGGUCAUUGCUGGCAUUCUUGCCAGUAUGAUCGUGAACUGGCUGAAUAAGCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[-56.54597473 307.89346313]
[-54.28677750 322.78338623]
[-55.28174591 337.81085205]
[-59.48434448 352.27294922]
[-66.69801331 365.49325562]
[-76.58534241 376.85348511]
[-88.68389893 385.82226562]
[-102.42781067 391.98013306]
[-117.17424011 395.03903198]
[-132.23347473 394.85592651]
[-146.90116882 391.43936157]
[-160.49127197 384.94915771]
[-172.36817932 375.68884277]
[-181.97637939 364.09158325]
[-188.86645508 350.69973755]
[-192.71617126 336.13973999]
[-193.34544373 321.09255981]
[-190.72486877 306.26196289]
[-184.97700500 292.34161377]
[-176.37068176 279.98257446]
[-165.30844116 269.76293945]
[-152.30767822 262.16067505]
[-137.97647095 257.53137207]
[-122.98511505 256.09152222]
[-108.03477478 257.90850830]
[-93.82470703 262.89730835]
[-81.01954651 270.82458496]
[-70.57128143 260.06198120]
[-60.12301636 249.29936218]
[-49.67475128 238.53675842]
[-39.22648621 227.77413940]
[-28.77821922 217.01153564]
[-36.40790558 204.70866394]
[-40.85151672 190.92091370]
[-41.84287643 176.45921326]
[-39.31900406 162.17533875]
[-33.42409897 148.91166687]
[-24.50129318 137.45153809]
[-13.07269859 128.47299194]
[0.19115713 122.50863647]
[14.51065826 119.91405487]
[29.04293251 120.84663391]
[42.93146133 125.25598145]
[55.35655975 132.88668823]
[66.11917114 122.43841553]
[76.88177490 111.99015045]
[74.26351929 96.01883698]
[81.58511353 81.58511353]
[96.01883698 74.26351929]
[111.99015045 76.88177490]
[122.43841553 66.11917114]
[132.88668823 55.35655975]
[143.33494568 44.59394836]
[153.78321838 33.83134079]
[148.39463806 20.67410278]
[148.45806885 6.49983215]
[153.93049622 -6.52839136]
[163.94598389 -16.43515587]
[176.95254517 -21.73223114]
[190.95257568 -21.64207840]
[203.80964661 -16.21180344]
[214.57226562 -26.66006851]
[212.23899841 -42.00072098]
[219.39825439 -55.76751709]
[233.29713440 -62.66685104]
[248.59123230 -60.04578400]
[259.39965820 -48.91217041]
[261.56637573 -33.54711151]
[254.25820923 -19.85878563]
[240.28529358 -13.11063576]
[225.02052307 -15.89746094]
[214.25791931 -5.44919491]
[219.59666443 9.53325176]
[217.89923096 25.40581512]
[209.45193481 39.01879120]
[195.88554382 47.64896774]
[179.86062622 49.54434967]
[164.54582214 44.27960587]
[154.09756470 55.04221725]
[143.64929199 65.80482483]
[133.20103455 76.56743622]
[122.75276184 87.33003998]
[126.04145050 100.24233246]
[122.51303864 113.09118652]
[113.09118652 122.51303864]
[100.24233246 126.04145050]
[87.33003998 122.75276184]
[76.56743622 133.20103455]
[65.80482483 143.64929199]
[73.44616699 157.22430420]
[77.33706665 172.29701233]
[77.22137451 187.85232544]
[73.11256409 202.84413147]
[65.29245758 216.26568604]
[54.29190063 227.21722412]
[40.85474777 234.96624756]
[25.88752937 238.99653625]
[10.39832306 239.04257202]
[-4.57115650 235.10691833]
[-18.01561165 227.45980835]
[-28.46387672 238.22241211]
[-38.91213989 248.98501587]
[-49.36040878 259.74761963]
[-59.80867386 270.51025391]
[-70.25693512 281.27285767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[32 100]
[44 89]
[45 88]
[46 87]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[61 72]
[62 71]
] def

init

% Start Annotations
27 105 0.16 1 colorpair
28 104 0.0 1 colorpair
29 103 0.0 1 colorpair
30 102 0.0 1 colorpair
31 101 0.0 1 colorpair
32 100 0.0 1 colorpair
44 89 0.0 1 colorpair
45 88 0.16 1 colorpair
46 87 0.0 1 colorpair
50 82 0.0 1 colorpair
51 81 0.16 1 colorpair
52 80 0.16 1 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
27 cmark
45 cmark
81 cmark
52 cmark

% End Annotations
showpage
end
%%EOF
