%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:12:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCACACAGUUAGGUGUGGCUUUCUGGCACGAUUUAGCGGCUCCAAUUAUCGCUGGCAUUAUUGCCAGCCUGAUUGUGAACUGGCUG_______________\
) } def
/len { sequence length } bind def

/coor [
[-29.89795113 309.42871094]
[-43.69870758 306.91421509]
[-56.97773743 302.39837646]
[-69.44654083 295.97994995]
[-80.83432007 287.79901123]
[-90.89385223 278.03393555]
[-102.84876251 287.09375000]
[-107.89641571 294.89352417]
[-115.28127289 296.23645020]
[-127.49230957 304.94796753]
[-139.70335388 313.65948486]
[-151.91438293 322.37103271]
[-164.12541199 331.08255005]
[-166.48510742 346.70968628]
[-179.25312805 356.02380371]
[-194.85444641 353.49905396]
[-204.03306580 340.63327026]
[-201.34349060 325.05950928]
[-188.38137817 316.01742554]
[-172.83694458 318.87149048]
[-160.62590027 310.15997314]
[-148.41487122 301.44845581]
[-136.20382690 292.73693848]
[-123.99279785 284.02542114]
[-111.90856934 275.13882446]
[-99.95365143 266.07904053]
[-107.44251251 251.91070557]
[-112.44646454 236.68313599]
[-114.82241058 220.82856750]
[-114.50189209 204.79724121]
[-111.49303436 189.04455566]
[-105.88033295 174.01818848]
[-97.82231903 160.14532471]
[-87.54702759 147.82052612]
[-75.34559631 137.39454651]
[-61.56398392 129.16429138]
[-46.59317398 123.36439514]
[-30.85807610 120.16053772]
[-14.80547523 119.64467621]
[1.10866165 121.83245850]
[16.43213654 126.66271210]
[30.72936821 133.99916077]
[43.59377289 143.63429260]
[54.42715454 133.25942993]
[65.26053619 122.88455963]
[76.09392548 112.50969696]
[86.92730713 102.13483429]
[97.14498138 91.15306854]
[106.71299744 79.60088348]
[116.11355591 67.91201782]
[125.34468842 56.08889771]
[134.57582092 44.26577759]
[143.80696106 32.44266129]
[153.03810120 20.61954308]
[162.26924133 8.79642487]
[161.48522949 -4.17739582]
[169.54360962 -13.85657310]
[181.64501953 -15.33794785]
[191.21304321 -26.89013290]
[200.78105164 -38.44231796]
[210.34907532 -49.99450302]
[219.91709900 -61.54668808]
[229.48512268 -73.09887695]
[239.05314636 -84.65106201]
[241.26237488 -100.90071869]
[256.54003906 -106.86102295]
[269.16976929 -96.40053558]
[266.15917969 -80.28009796]
[250.60533142 -75.08303833]
[241.03730774 -63.53085327]
[231.46928406 -51.97866821]
[221.90126038 -40.42648315]
[212.33323669 -28.87429810]
[202.76522827 -17.32211304]
[193.19720459 -5.76992798]
[191.27560425 11.60784721]
[174.09234619 18.02756119]
[164.86122131 29.85067940]
[155.63008118 41.67379761]
[146.39894104 53.49691391]
[137.16780090 65.32003021]
[127.93666840 77.14315033]
[126.27581787 84.46306610]
[118.26518250 89.16889954]
[108.69716644 100.72108459]
[108.78841400 103.93898773]
[107.63585663 107.25743866]
[105.20232391 110.18680573]
[101.64311981 112.23222351]
[97.30216980 112.96821594]
[86.46878815 123.34307861]
[75.63540649 133.71794128]
[64.80201721 144.09280396]
[53.96863556 154.46766663]
[62.02694321 165.99066162]
[68.30233002 178.57147217]
[72.65889740 191.93632507]
[75.00251770 205.79446411]
[75.28285217 219.84451294]
[73.49440002 233.78099060]
[69.67665100 247.30099487]
[63.91319656 260.11077881]
[56.32989502 271.93206787]
[47.09212112 282.50817871]
[36.40116882 291.60964966]
[24.48986053 299.03900146]
[11.61748028 304.63525391]
[-1.93587720 308.27731323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 85]
[49 84]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% Start Annotations
6 26 0.0 1 colorpair
7 25 0.0 1 colorpair
9 24 0.0 1 colorpair
10 23 0.0 1 colorpair
11 22 0.0 1 colorpair
12 21 0.0 1 colorpair
13 20 0.0 1 colorpair
43 94 0.0 0.6 colorpair
44 93 0.0 1 colorpair
45 92 0.0 1 colorpair
46 91 0.0 1 colorpair
47 90 0.0 1 colorpair
48 85 0.0 1 colorpair
49 84 0.0 1 colorpair
50 82 0.0 1 colorpair
51 81 0.0 1 colorpair
52 80 0.0 1 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
55 77 0.0 1 colorpair
58 75 0.0 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair
64 69 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
43 94 1 gmark

% End Annotations
showpage
end
%%EOF
