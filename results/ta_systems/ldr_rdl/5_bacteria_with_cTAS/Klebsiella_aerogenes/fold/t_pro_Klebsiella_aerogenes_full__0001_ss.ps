%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:03:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCACACAGUUGGGUCUGAUCUUAUGGGACGAUCUGGCGGCGCCGAUAAUCGCUGGCAUUGUGGUCAGUAUUAUCGUCAGCUGGAUGCAUAACCAGAAG\
) } def
/len { sequence length } bind def

/coor [
[83.92590332 126.65443420]
[79.03827667 123.00959778]
[74.95494080 118.48189545]
[71.83257294 113.24504852]
[69.79096985 107.50000000]
[54.79096985 107.50000000]
[39.79096985 107.50000000]
[31.04812431 110.66989136]
[24.34811592 107.27114105]
[10.32472324 114.59609222]
[-2.16767764 106.48503876]
[-11.00061798 109.39446259]
[-17.59696770 105.79866028]
[-32.57062149 104.91004944]
[-47.54427719 104.02143860]
[-55.54133987 115.35950470]
[-68.01559448 121.18110657]
[-81.62538910 120.04598999]
[-92.78369904 112.36173248]
[-98.60352325 100.24770355]
[-113.54426575 98.91576385]
[-128.48501587 97.58382416]
[-143.42576599 96.25188446]
[-157.85845947 102.73322296]
[-169.84841919 93.89636230]
[-184.78916931 92.56442261]
[-201.10261536 97.18042755]
[-210.05424500 82.78234100]
[-198.69689941 70.19477081]
[-183.45722961 77.62367249]
[-168.51647949 78.95561218]
[-155.15245056 72.37900543]
[-142.09382629 81.31114197]
[-127.15307617 82.64308167]
[-112.21232605 83.97501373]
[-97.27158356 85.30695343]
[-86.95697784 72.63194275]
[-70.97448730 68.50491333]
[-55.50618362 74.72454071]
[-46.65567017 89.04778290]
[-31.68201256 89.93639374]
[-16.70835686 90.82500458]
[-1.72317779 91.49163055]
[11.22778702 84.13488007]
[24.79261589 92.27772522]
[39.79096985 92.50000000]
[54.79096985 92.50000000]
[69.79096985 92.50000000]
[87.87580872 71.33226013]
[115.66082764 73.10066986]
[126.10909271 62.33805847]
[136.55735779 51.57545090]
[147.00563049 40.81284332]
[157.45388794 30.05023384]
[167.90216064 19.28762436]
[178.35041809 8.52501583]
[182.16583252 0.04396927]
[189.27136230 -2.39592957]
[200.03396606 -12.84419537]
[210.79658508 -23.29245949]
[221.55918884 -33.74072647]
[232.32179260 -44.18899155]
[243.08441162 -54.63725662]
[243.06796265 -70.44153595]
[254.29063416 -81.56930542]
[270.09420776 -81.41865540]
[281.10269165 -70.07896423]
[280.78497314 -54.27786636]
[269.32952881 -43.38988113]
[253.53266907 -43.87464905]
[242.77006531 -33.42638397]
[232.00746155 -22.97811699]
[221.24484253 -12.52985191]
[210.48223877 -2.08158612]
[199.71963501 8.36667919]
[189.11302185 18.97328186]
[178.66476440 29.73588943]
[168.21649170 40.49849701]
[157.76823425 51.26110840]
[147.31996155 62.02371597]
[136.87170410 72.78632355]
[126.42343903 83.54893494]
[129.58168030 90.31703186]
[131.03672791 97.64264679]
[130.70480347 105.10398102]
[128.60502625 112.27144623]
[124.85826874 118.73237610]
[134.30958557 130.38023376]
[143.76091003 142.02809143]
[153.21221924 153.67594910]
[168.69946289 152.71409607]
[181.77616882 161.06750488]
[187.41407776 175.52410889]
[183.44531250 190.52505493]
[171.39593506 200.30218506]
[155.89916992 201.09596252]
[142.91386414 192.60119629]
[137.43310547 178.08427429]
[141.56436157 163.12725830]
[132.11305237 151.47940063]
[122.66172791 139.83154297]
[113.21041107 128.18368530]
[107.46286011 130.21823120]
[101.42895508 131.09330750]
[95.34022522 130.77534485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[9 45]
[11 43]
[13 42]
[14 41]
[15 40]
[20 36]
[21 35]
[22 34]
[23 33]
[25 31]
[26 30]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[87 102]
[88 101]
[89 100]
[90 99]
] def

init

% Start Annotations
5 48 0.0 1 colorpair
6 47 0.0 1 colorpair
7 46 0.0 1 colorpair
9 45 0.0 1 colorpair
11 43 0.0 1 colorpair
13 42 0.0 1 colorpair
14 41 0.0 1 colorpair
15 40 0.0 1 colorpair
20 36 0.0 0.2 colorpair
21 35 0.0 1 colorpair
22 34 0.0 1 colorpair
23 33 0.0 1 colorpair
25 31 0.0 1 colorpair
26 30 0.0 1 colorpair
50 82 0.0 1 colorpair
51 81 0.16 1 colorpair
52 80 0.0 1 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
55 77 0.0 1 colorpair
56 76 0.0 1 colorpair
58 75 0.16 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair
87 102 0.0 1 colorpair
88 101 0.0 1 colorpair
89 100 0.0 1 colorpair
90 99 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 36 2 gmark
81 cmark
75 cmark

% End Annotations
showpage
end
%%EOF
