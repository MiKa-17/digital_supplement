%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:03:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCACACAGUUGGGUCUGAUCUUAUGGGACGAUCUGGCGGCGCCGAUAAUCGCUGGCAUUGUGGUCAGUAUUAUCGUCAGCUGGAUGCAUAACCAGAAGUGA\
) } def
/len { sequence length } bind def

/coor [
[55.54455566 151.42996216]
[54.60153580 136.45962524]
[60.46903610 122.65483093]
[71.90205383 112.94473267]
[86.47448730 109.38967133]
[71.48850250 110.03796387]
[56.50252151 110.68625641]
[47.91368103 114.22842407]
[41.07661438 111.13098145]
[27.38937378 119.06634521]
[14.55192566 111.51325226]
[5.86457539 114.80644226]
[-0.88038868 111.51325226]
[-15.87883091 111.29709625]
[-30.87727356 111.08094025]
[-38.35432053 122.76252747]
[-50.54901886 129.13827515]
[-64.19128418 128.62036133]
[-75.68292236 121.45345306]
[-82.04662323 109.62163544]
[-97.03260803 108.97335052]
[-112.01859283 108.32505798]
[-127.00457764 107.67676544]
[-141.12625122 114.81039429]
[-153.50723267 106.53025818]
[-168.49322510 105.88196564]
[-184.57887268 111.23809814]
[-194.17863464 97.26380920]
[-183.40794373 84.17073822]
[-167.84492493 90.89598846]
[-152.85894775 91.54427338]
[-139.80915833 84.36427307]
[-126.35628510 92.69078064]
[-111.37030029 93.33907318]
[-96.38431549 93.98736572]
[-81.39833069 94.63565826]
[-71.66929626 81.50067139]
[-55.88640976 76.65184021]
[-40.14903259 82.16807556]
[-30.66111565 96.08249664]
[-15.66267395 96.29865265]
[-0.66423154 96.51481628]
[14.33576870 96.51481628]
[26.95022011 88.59490967]
[40.86045837 96.13253784]
[55.85422897 95.70027161]
[70.84020996 95.05197906]
[85.82619476 94.40368652]
[89.71221924 82.09806824]
[103.93428802 74.24243164]
[113.16542816 62.41931152]
[122.39656067 50.59619141]
[131.62770081 38.77307510]
[140.85884094 26.94995689]
[150.08996582 15.12683773]
[159.32110596 3.30372000]
[162.19926453 -5.52981710]
[168.99259949 -8.72202969]
[178.56062317 -20.27421570]
[188.12863159 -31.82640076]
[197.69665527 -43.37858582]
[207.26467896 -54.93077087]
[216.83270264 -66.48295593]
[215.10510254 -82.19253540]
[225.05691528 -94.47004700]
[240.78387451 -96.03144836]
[252.95547485 -85.95040131]
[254.35052490 -70.20780182]
[244.14135742 -58.14345932]
[228.38488770 -56.91493607]
[218.81686401 -45.36275101]
[209.24884033 -33.81056595]
[199.68081665 -22.25837898]
[190.11280823 -10.70619392]
[180.54478455 0.84599102]
[171.14422607 12.53485680]
[161.91308594 24.35797501]
[152.68196106 36.18109131]
[143.45082092 48.00421143]
[134.21968079 59.82732773]
[124.98854828 71.65044403]
[115.75740814 83.47356415]
[129.44224548 77.33146667]
[142.37504578 84.93032074]
[143.67045593 99.87428284]
[132.23814392 109.58521271]
[117.70046997 105.88951111]
[128.82833862 115.94786835]
[139.95620728 126.00622559]
[151.08406067 136.06459045]
[166.23991394 132.73591614]
[180.44427490 138.98219299]
[188.23527527 152.40156555]
[186.61712646 167.83404541]
[176.21203613 179.34550476]
[161.02098083 182.50956726]
[146.88522339 176.10957336]
[139.24024963 162.60646057]
[141.02571106 147.19245911]
[129.89784241 137.13409424]
[118.76997375 127.07573700]
[107.64210510 117.01737213]
[116.59741974 129.05076599]
[119.20866394 143.82173157]
[114.92176056 158.19609070]
[104.64633942 169.12384033]
[90.56268311 174.28627014]
[75.65913391 172.58798218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[9 45]
[11 43]
[13 42]
[14 41]
[15 40]
[20 36]
[21 35]
[22 34]
[23 33]
[25 31]
[26 30]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[87 102]
[88 101]
[89 100]
[90 99]
] def

init

% Start Annotations
5 48 0.0 1 colorpair
6 47 0.0 1 colorpair
7 46 0.0 1 colorpair
9 45 0.0 1 colorpair
11 43 0.0 1 colorpair
13 42 0.0 1 colorpair
14 41 0.0 1 colorpair
15 40 0.0 1 colorpair
20 36 0.0 0.6 colorpair
21 35 0.0 1 colorpair
22 34 0.0 1 colorpair
23 33 0.0 1 colorpair
25 31 0.0 1 colorpair
26 30 0.0 1 colorpair
50 82 0.0 1 colorpair
51 81 0.16 1 colorpair
52 80 0.0 1 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
55 77 0.0 1 colorpair
56 76 0.0 1 colorpair
58 75 0.16 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair
87 102 0.0 1 colorpair
88 101 0.0 1 colorpair
89 100 0.0 1 colorpair
90 99 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 36 1 gmark
81 cmark
75 cmark

% End Annotations
showpage
end
%%EOF
