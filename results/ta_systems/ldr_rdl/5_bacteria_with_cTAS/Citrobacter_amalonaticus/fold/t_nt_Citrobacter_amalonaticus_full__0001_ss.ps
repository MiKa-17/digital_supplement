%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:11:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUGACUCAGAUAAGCAUGGCCUUCUGGCACGAUUUAGCGGCUCCAGCCAUUGCCGGUAUCAUUGCGGGAAUGGUCGUGAACUGGCU________________\
) } def
/len { sequence length } bind def

/coor [
[104.96265411 484.47256470]
[94.26480103 473.88757324]
[85.83777618 461.41876221]
[80.00550842 447.54537964]
[76.99217224 432.80068970]
[76.91358185 417.75143433]
[79.77276611 402.97607422]
[85.45982361 389.04251099]
[93.75616455 376.48635864]
[104.34288788 365.79022217]
[116.81307220 357.36520386]
[130.68740845 351.53518677]
[127.68159485 336.83944702]
[124.67577362 322.14370728]
[121.66996002 307.44793701]
[118.66414642 292.75219727]
[115.65832520 278.05645752]
[112.77787781 275.78048706]
[110.92887115 271.92669678]
[110.87300110 267.03125000]
[113.08578491 261.96420288]
[111.36029816 247.06376648]
[109.63481140 232.16334534]
[107.90931702 217.26290894]
[106.18383026 202.36248779]
[104.45834351 187.46206665]
[102.73285675 172.56163025]
[100.79282379 157.68762207]
[98.63864899 142.84310913]
[96.48448181 127.99859619]
[94.33030701 113.15408325]
[85.82453156 102.05708313]
[90.82518005 89.00008392]
[88.67101288 74.15557098]
[86.51683807 59.31106186]
[73.19891357 54.77117157]
[63.20732117 44.95893860]
[58.47212982 31.85045433]
[59.87300491 18.05032158]
[67.07643127 6.27419376]
[78.61274719 -1.18564403]
[76.88726044 -16.08606911]
[67.61385345 -28.90459061]
[73.83573914 -42.43741608]
[72.11025238 -57.33784485]
[70.38476562 -72.23826599]
[68.65927124 -87.13869476]
[54.53132629 -93.16336823]
[45.32133865 -105.45449066]
[43.50675201 -120.70581055]
[49.57567978 -134.81480408]
[61.89561081 -143.98622131]
[77.15254211 -145.75299072]
[91.24244690 -139.63987732]
[100.37519836 -127.29125214]
[102.09413910 -112.02885437]
[95.93688202 -97.95818329]
[83.55970001 -88.86418152]
[85.28518677 -73.96376038]
[87.01067352 -59.06333160]
[88.73616791 -44.16290665]
[97.88615417 -32.41016388]
[91.78768921 -17.81155777]
[93.51317596 -2.91113281]
[108.44043732 3.09064078]
[118.39590454 15.84783363]
[120.61573029 31.97110939]
[114.40727997 47.11675262]
[101.36135101 57.15689087]
[103.51551819 72.00140381]
[105.66969299 86.84591675]
[114.17546844 97.94291687]
[109.17481995 110.99991608]
[111.32898712 125.84442902]
[113.48316193 140.68893433]
[115.63733673 155.53344727]
[120.02644348 163.72190857]
[117.63327789 170.83615112]
[119.35877228 185.73657227]
[121.08425903 200.63699341]
[122.80974579 215.53742981]
[124.53523254 230.43785095]
[126.26072693 245.33827209]
[127.98621368 260.23870850]
[130.35408020 275.05062866]
[133.35989380 289.74636841]
[136.36570740 304.44213867]
[139.37152100 319.13787842]
[142.37733459 333.83361816]
[145.38316345 348.52938843]
[160.43237305 348.44348145]
[175.20912170 351.29550171]
[189.14541626 356.97579956]
[201.70559692 365.26602173]
[212.40689087 375.84756470]
[220.83793640 388.31365967]
[226.67469788 402.18515015]
[229.69281006 416.92886353]
[229.77627563 431.97808838]
[226.92187500 446.75439453]
[221.23931885 460.68975830]
[212.94705200 473.24859619]
[202.36378479 483.94818115]
[189.89633179 492.37719727]
[176.02388000 498.21173096]
[161.27967834 501.22744751]
[146.23043823 501.30847168]
[131.45462036 498.45169067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 78]
[28 76]
[29 75]
[30 74]
[31 73]
[33 71]
[34 70]
[35 69]
[41 64]
[42 63]
[44 61]
[45 60]
[46 59]
[47 58]
] def

init

% Start Annotations
12 90 0.0 1 colorpair
13 89 0.0 1 colorpair
14 88 0.0 1 colorpair
15 87 0.0 1 colorpair
16 86 0.0 0.2 colorpair
17 85 0.0 1 colorpair
21 84 0.0 1 colorpair
22 83 0.0 1 colorpair
23 82 0.0 1 colorpair
24 81 0.0 0.2 colorpair
25 80 0.0 1 colorpair
26 79 0.0 1 colorpair
27 78 0.16 1 colorpair
28 76 0.0 1 colorpair
29 75 0.0 0.2 colorpair
30 74 0.0 1 colorpair
31 73 0.0 1 colorpair
33 71 0.0 1 colorpair
34 70 0.0 1 colorpair
35 69 0.0 1 colorpair
41 64 0.0 1 colorpair
42 63 0.0 1 colorpair
44 61 0.0 1 colorpair
45 60 0.0 1 colorpair
46 59 0.0 1 colorpair
47 58 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
16 86 2 gmark
24 81 2 gmark
27 cmark
29 75 2 gmark

% End Annotations
showpage
end
%%EOF
