%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:13:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUUGCACAGUUUGGCAUCGCUUUCUGGCACGAUAUUGCCGCGCCGACCGUCGCGGCUAUUAUCGCCAGCCUGAUCGUUGGCUGGCUCGAAAGCAGAAGGUAA\
) } def
/len { sequence length } bind def

/coor [
[32.62001038 246.52917480]
[19.12814331 239.97406006]
[15.55417824 225.40612793]
[5.02427721 236.08888245]
[0.84702432 251.34866333]
[-13.59781361 254.98127747]
[-24.12771606 265.66403198]
[-34.65761566 276.34680176]
[-30.49835396 291.13177490]
[-34.30437088 306.01162720]
[-45.05187607 316.98370361]
[-59.84983444 321.09661865]
[-74.71767426 317.24398804]
[-85.65602875 306.46212769]
[-89.72251892 291.65136719]
[-85.82329559 276.79565430]
[-75.00721741 265.89117432]
[-60.18376541 261.87112427]
[-45.34036636 265.81689453]
[-34.81046677 255.13414001]
[-24.28056526 244.45138550]
[-20.85648155 229.95570374]
[-5.65847397 225.55897522]
[4.87142706 214.87622070]
[14.60492706 203.46311951]
[23.49151039 191.37889099]
[32.37809372 179.29466248]
[41.26467896 167.21043396]
[50.15126419 155.12620544]
[59.03784943 143.04196167]
[67.92443085 130.95773315]
[76.81101990 118.87350464]
[69.71203613 106.12925720]
[69.37139130 91.06578827]
[76.31333160 77.15510559]
[89.33274078 67.81018066]
[105.68285370 65.55118561]
[104.38748169 50.60722351]
[103.09210968 35.66326141]
[101.79673767 20.71929932]
[88.23132324 9.79027462]
[86.72058105 -7.22729540]
[97.70832062 -19.86814690]
[95.98283386 -34.76856995]
[94.25734711 -49.66899872]
[92.53185272 -64.56941986]
[90.80636597 -79.46984863]
[89.08087921 -94.37027740]
[79.80747223 -107.18879700]
[86.02935791 -120.72162628]
[75.82147980 -133.55638123]
[82.08369446 -148.71279907]
[98.37397766 -150.59922791]
[107.93428040 -137.27508545]
[100.92978668 -122.44711304]
[110.07977295 -110.69436646]
[103.98130798 -96.09576416]
[105.70679474 -81.19533539]
[107.43228149 -66.29491425]
[109.15776825 -51.39448547]
[110.88326263 -36.49406052]
[112.60874939 -21.59363556]
[123.79328918 -15.01986599]
[129.18641663 -3.00596523]
[126.58992004 10.10379410]
[116.74069977 19.42392731]
[118.03607178 34.36788940]
[119.33144379 49.31185150]
[120.62681580 64.25581360]
[132.03991699 73.98931122]
[147.00099182 72.90942383]
[161.96208191 71.82953644]
[176.92315674 70.74964905]
[191.88423157 69.66976166]
[206.84530640 68.58987427]
[221.80638123 67.50998688]
[229.88499451 54.26174927]
[244.22076416 48.32327652]
[259.30130005 51.97803116]
[269.32781982 63.82068634]
[270.44491577 79.29749298]
[262.22308350 92.45731354]
[247.82373047 98.23992157]
[232.78373718 94.42179108]
[222.88627625 82.47106171]
[207.92520142 83.55094910]
[192.96411133 84.63083649]
[178.00303650 85.71072388]
[163.04196167 86.79061127]
[148.08088684 87.87050629]
[133.11981201 88.95039368]
[134.26289368 98.70266724]
[132.64450073 108.20770264]
[128.49342346 116.71348572]
[122.23477936 123.57546234]
[114.44844818 128.30526733]
[105.81632996 130.60491943]
[97.06304932 130.38414001]
[88.89524841 127.76009369]
[80.00865936 139.84431458]
[71.12207794 151.92855835]
[62.23549271 164.01278687]
[53.34891129 176.09701538]
[44.46232605 188.18124390]
[35.57574081 200.26547241]
[26.68915749 212.34970093]
[41.63867950 213.57923889]
[50.24134445 225.86720276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[6 21]
[7 20]
[8 19]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[37 69]
[38 68]
[39 67]
[40 66]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[50 55]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% Start Annotations
3 24 0.0 1 colorpair
4 23 0.0 1 colorpair
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.0 1 colorpair
25 106 0.0 1 colorpair
26 105 0.0 1 colorpair
27 104 0.0 1 colorpair
28 103 0.0 1 colorpair
29 102 0.0 1 colorpair
30 101 0.0 1 colorpair
31 100 0.0 1 colorpair
32 99 0.0 1 colorpair
37 69 0.0 1 colorpair
38 68 0.0 1 colorpair
39 67 0.0 1 colorpair
40 66 0.0 1 colorpair
43 62 0.0 1 colorpair
44 61 0.0 1 colorpair
45 60 0.0 1 colorpair
46 59 0.0 1 colorpair
47 58 0.0 1 colorpair
48 57 0.0 1 colorpair
50 55 0.0 1 colorpair
70 91 0.0 1 colorpair
71 90 0.0 1 colorpair
72 89 0.0 1 colorpair
73 88 0.0 1 colorpair
74 87 0.0 1 colorpair
75 86 0.0 1 colorpair
76 85 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
