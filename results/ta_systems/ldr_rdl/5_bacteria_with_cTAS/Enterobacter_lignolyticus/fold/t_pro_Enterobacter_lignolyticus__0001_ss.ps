%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 09:13:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUUGCACAGUUUGGCAUCGCUUUCUGGCACGAUAUUGCCGCGCCGACCGUCGCGGCUAUUAUCGCCAGCCUGAUCGUUGGCUGGCUCGAAAGCAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[74.64784241 237.87454224]
[64.79511261 226.21751404]
[60.98422241 211.43778992]
[63.97182465 196.46992493]
[73.16473389 184.28579712]
[86.73768616 177.30455017]
[86.29318237 162.31114197]
[85.84868622 147.31771851]
[85.40418243 132.32431030]
[73.34780121 123.39998627]
[58.87826920 127.35379028]
[51.28015137 132.71607971]
[43.92121887 131.20356750]
[29.34087372 134.72685242]
[14.76052952 138.25015259]
[9.05242825 150.55598450]
[-2.55796385 157.18522644]
[-15.66769886 155.88464355]
[-25.45421410 147.36021423]
[-40.13256073 150.44989014]
[-54.81090927 153.53956604]
[-69.06497955 162.71876526]
[-81.83137512 151.56282043]
[-74.64549255 136.20706177]
[-57.90058899 138.86122131]
[-43.22224045 135.77154541]
[-28.54389191 132.68185425]
[-20.04513931 118.25424194]
[-3.43280697 114.28345490]
[11.23723888 123.66979980]
[25.81758308 120.14650726]
[40.39792633 116.62322235]
[54.92446136 112.88426208]
[69.39399719 108.93045044]
[70.93399048 87.63272095]
[85.48513031 72.27679443]
[106.27597809 69.64347839]
[106.27597809 54.64347839]
[106.27597809 39.64347839]
[106.27597809 24.64347649]
[93.70644379 12.58857727]
[93.66413116 -4.49167156]
[105.69187164 -16.14150238]
[105.24736786 -31.13491440]
[104.80287170 -46.12832642]
[104.35836792 -61.12173843]
[103.91387177 -76.11515045]
[103.46936798 -91.10856628]
[95.32652283 -104.67339325]
[102.68327332 -117.62435913]
[93.61077118 -131.28530884]
[101.14659119 -145.85044861]
[117.53853607 -146.33641052]
[125.92397308 -132.24328613]
[117.67668915 -118.06885529]
[125.78774261 -105.57645416]
[118.46278381 -91.55306244]
[118.90728760 -76.55965424]
[119.35178375 -61.56623840]
[119.79627991 -46.57282639]
[120.24078369 -31.57941437]
[120.68527985 -16.58600235]
[131.26994324 -9.07555485]
[135.61343384 3.36191869]
[131.89677429 16.20460320]
[121.27597809 24.64347649]
[121.27597809 39.64347839]
[121.27597809 54.64347839]
[121.27597809 69.64347839]
[131.56361389 80.55973053]
[146.53726196 81.44834137]
[161.51092529 82.33694458]
[176.48457336 83.22555542]
[191.45823669 84.11416626]
[206.43188477 85.00277710]
[221.40554810 85.89138794]
[231.14947510 73.81515503]
[246.13945007 69.80513000]
[260.61151123 75.40325165]
[269.00088501 88.45693207]
[268.08163452 103.94675446]
[258.20727539 115.91657257]
[243.17466736 119.76374817]
[228.76419067 114.00895691]
[220.51693726 100.86504364]
[205.54328918 99.97643280]
[190.56962585 99.08782196]
[175.59596252 98.19921112]
[160.62231445 97.31060028]
[145.64865112 96.42199707]
[130.67500305 95.53338623]
[130.57841492 106.07097626]
[126.94596863 116.02695465]
[120.15759277 124.24324799]
[110.96269989 129.74995422]
[100.39759827 131.87980652]
[100.84209442 146.87322998]
[101.28659821 161.86663818]
[101.73109436 176.86004639]
[115.69378662 183.02496338]
[125.59234619 194.64311218]
[129.46141052 209.40769958]
[126.53276825 224.38720703]
[117.38790894 236.60745239]
[103.84255981 243.64208984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 99]
[7 98]
[8 97]
[9 96]
[10 34]
[11 33]
[13 32]
[14 31]
[15 30]
[19 27]
[20 26]
[21 25]
[37 69]
[38 68]
[39 67]
[40 66]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[50 55]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% Start Annotations
6 99 0.0 1 colorpair
7 98 0.0 1 colorpair
8 97 0.0 1 colorpair
9 96 0.0 1 colorpair
10 34 0.0 1 colorpair
11 33 0.0 1 colorpair
13 32 0.0 1 colorpair
14 31 0.0 1 colorpair
15 30 0.0 1 colorpair
19 27 0.0 1 colorpair
20 26 0.0 1 colorpair
21 25 0.0 1 colorpair
37 69 0.0 1 colorpair
38 68 0.0 1 colorpair
39 67 0.0 1 colorpair
40 66 0.0 1 colorpair
43 62 0.0 1 colorpair
44 61 0.0 1 colorpair
45 60 0.0 1 colorpair
46 59 0.0 1 colorpair
47 58 0.0 1 colorpair
48 57 0.0 1 colorpair
50 55 0.0 1 colorpair
70 91 0.0 1 colorpair
71 90 0.0 1 colorpair
72 89 0.0 1 colorpair
73 88 0.0 1 colorpair
74 87 0.0 1 colorpair
75 86 0.0 1 colorpair
76 85 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
