%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:08:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUUACGCAGUUGGGCGUGGCCUUCUGGCACGAUCUGGCGGCGCCGAUCAUUGCUGGCAUUAUCGCCAGUGUGAUCGUCAACUGGCUACGUGACAGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[93.36099243 186.48077393]
[86.53482056 173.12400818]
[83.17208099 158.50579834]
[83.47583771 143.50888062]
[87.42774200 129.03881836]
[94.78642273 115.97311401]
[84.25652313 126.65586853]
[73.72662354 137.33862305]
[63.19672012 148.02136230]
[52.66682053 158.70411682]
[53.03131104 174.50421143]
[42.05642319 185.87643433]
[26.25336647 186.07385254]
[14.99781418 174.97933960]
[14.96748447 159.17507935]
[26.18037224 148.03746033]
[41.98406982 148.17422485]
[52.51396942 137.49147034]
[63.04387283 126.80871582]
[73.57377625 116.12596130]
[84.10367584 105.44321442]
[83.45598602 97.97122955]
[69.09354401 102.29792786]
[55.62287903 108.89649200]
[42.56408691 101.51625061]
[41.26826477 86.57232666]
[52.86177826 77.05442810]
[67.26789856 81.23647308]
[82.16061401 83.02726746]
[81.51293182 75.55529022]
[69.30189514 66.84376526]
[57.09085846 58.13224411]
[41.36298752 56.41624069]
[35.49568939 42.72594833]
[23.28465271 34.01442719]
[7.28788567 35.23220825]
[-3.53208542 23.38704872]
[-0.87510425 7.56554461]
[13.22062016 -0.09540182]
[27.94205475 6.28103256]
[31.99617577 21.80339241]
[44.20721054 30.51491547]
[59.06166458 31.60781288]
[65.80238342 45.92120743]
[78.01342010 54.63273239]
[90.22444916 63.34425354]
[98.53825378 75.63835907]
[101.52557373 89.23349762]
[112.93868256 79.50000000]
[124.35178375 69.76650238]
[135.76489258 60.03300095]
[141.24433899 45.19095993]
[155.94892883 42.81934357]
[154.88246155 27.45155716]
[162.97492981 14.55328846]
[176.94540405 8.95955086]
[191.35830688 12.62097359]
[202.77140808 2.88747406]
[201.70494080 -12.48031139]
[209.79740906 -25.37858009]
[223.76788330 -30.97231865]
[238.18078613 -27.31089401]
[249.59390259 -37.04439545]
[261.00701904 -46.77789307]
[272.42010498 -56.51139450]
[283.83322144 -66.24489594]
[284.83456421 -82.01742554]
[296.75051880 -92.39939117]
[312.51159668 -91.23135376]
[322.76699829 -79.20628357]
[321.43237305 -63.45845032]
[309.29956055 -53.33075714]
[293.56671143 -54.83178711]
[282.15359497 -45.09828949]
[270.74050903 -35.36478806]
[259.32739258 -25.63128853]
[247.91429138 -15.89778900]
[249.25462341 -1.08760607]
[241.52566528 11.82468796]
[227.51165771 17.77960205]
[212.50491333 14.30058002]
[201.09181213 24.03408051]
[202.43212891 38.84426117]
[194.70318604 51.75655746]
[180.68917847 57.71147156]
[165.68241882 54.23244858]
[161.01931763 68.37828064]
[145.49839783 71.44610596]
[134.08528137 81.17960358]
[122.67218018 90.91310883]
[111.25907135 100.64660645]
[124.82501984 94.24620819]
[139.54225159 91.34740448]
[154.52207947 92.12523651]
[168.85992432 96.53273010]
[181.69001770 104.30374908]
[192.23760986 114.96903229]
[199.86578369 127.88456726]
[204.11390686 142.27044678]
[204.72547913 157.25796509]
[201.66354370 171.94212341]
[195.11302185 185.43621826]
[185.46943665 196.92539978]
[173.31513977 205.71591187]
[159.38404846 211.27691650]
[144.51741028 213.27262878]
[129.61293030 211.58253479]
[115.57061005 206.30870056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[48 91]
[49 90]
[50 89]
[51 88]
[53 86]
[57 82]
[58 81]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% Start Annotations
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.16 1 colorpair
9 18 0.16 0.6 colorpair
10 17 0.0 0.6 colorpair
30 46 0.0 1 colorpair
31 45 0.16 1 colorpair
32 44 0.0 1 colorpair
34 42 0.0 0.6 colorpair
35 41 0.0 1 colorpair
49 90 0.0 1 colorpair
50 89 0.0 1 colorpair
51 88 0.16 1 colorpair
53 86 0.16 1 colorpair
57 82 0.16 1 colorpair
58 81 0.16 1 colorpair
62 77 0.16 1 colorpair
64 75 0.0 1 colorpair
65 74 0.0 1 colorpair
66 73 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 cmark
9 18 1 gmark
9 cmark
10 17 1 gmark
45 cmark
34 42 1 gmark
48 91 35 gmark
48 cmark
91 cmark
51 cmark
53 cmark
86 cmark
57 cmark
82 cmark
81 cmark
62 cmark
63 76 21 gmark
63 cmark
76 cmark
73 cmark

% End Annotations
showpage
end
%%EOF
