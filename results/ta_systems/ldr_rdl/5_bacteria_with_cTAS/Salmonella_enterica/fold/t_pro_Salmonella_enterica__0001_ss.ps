%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:08:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUUACGCAGUUGGGCGUUGCCUUCUGGCACGAUCUGGCGGCACCGAUCAUUGCUGGCAUUAUCGCCAGUCUGAUCGUCAACUGGCUACGUGACAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[107.59361267 187.94747925]
[95.50283051 179.06979370]
[87.71903229 166.24745178]
[85.42224121 151.42434692]
[88.96019745 136.84864807]
[93.39611053 122.51956177]
[82.63350677 132.96781921]
[71.87089539 143.41609192]
[61.10828400 153.86434937]
[50.34567642 164.31262207]
[50.36211777 180.11689758]
[39.13945007 191.24467468]
[23.33587837 191.09402466]
[12.32738495 179.75433350]
[12.64511204 163.95323181]
[24.10055923 153.06524658]
[39.89741135 153.55001831]
[50.66001892 143.10174561]
[61.42263031 132.65348816]
[72.18524170 122.20521545]
[82.94784546 111.75695038]
[70.76786804 120.51184082]
[55.77315903 120.91023254]
[43.14547729 112.81444550]
[37.24860764 99.02217102]
[40.12033463 84.29963684]
[50.76828003 73.73453522]
[65.51280212 70.97788239]
[79.25859833 76.98230743]
[87.25559235 89.67317200]
[81.20874023 75.94598389]
[75.16189575 62.21880341]
[69.11504364 48.49161911]
[63.06818771 34.76443481]
[47.89577484 35.03568649]
[33.81337357 29.49231720]
[22.95550919 19.00802231]
[16.95512009 5.20284462]
[16.69801331 -9.80711079]
[22.19222832 -23.73402596]
[32.57156754 -34.46708679]
[26.52471733 -48.19427109]
[20.47786713 -61.92145538]
[6.10399437 -69.04685974]
[2.85386443 -84.75724030]
[13.22069836 -97.00094604]
[29.25194740 -96.38565063]
[38.64981079 -83.38335419]
[34.20505142 -67.96830750]
[40.25190353 -54.24112320]
[46.29875183 -40.51393890]
[61.22383881 -40.92752838]
[75.20808411 -35.58090973]
[86.10938263 -25.25974464]
[92.24514771 -11.51419735]
[92.65193176 3.57381678]
[87.23663330 17.70596313]
[76.79537201 28.71758270]
[82.84222412 42.44476700]
[88.88907623 56.17195129]
[94.93592834 69.89913940]
[100.98278046 83.62631989]
[113.42386627 92.00601959]
[128.41728210 92.45052338]
[143.41069031 92.89501953]
[153.41014099 84.58259583]
[165.98667908 85.35573578]
[174.33992004 94.24378967]
[188.57421875 87.33760834]
[200.82077026 95.81529236]
[215.79443359 96.70390320]
[230.02873230 89.79772186]
[242.27528381 98.27540588]
[257.24893188 99.16401672]
[272.22259521 100.05262756]
[280.60943604 87.18573761]
[294.31332397 80.25041962]
[309.64801025 81.11222839]
[322.48855591 89.53933716]
[329.38088989 103.26491547]
[328.47100830 118.59683228]
[320.00369263 131.41088867]
[306.25659180 138.26016235]
[290.92758179 137.30223083]
[278.14013672 128.79478455]
[271.33398438 115.02628326]
[256.36032104 114.13767242]
[241.38667297 113.24906158]
[228.22340393 120.21880341]
[214.90582275 111.67755890]
[199.93217468 110.78894806]
[186.76889038 117.75868988]
[173.45130920 109.21744537]
[158.30426025 117.94164276]
[142.96618652 107.88843536]
[127.97277832 107.44393158]
[112.97936249 106.99943542]
[125.92421722 114.57774353]
[140.46466064 118.26221466]
[152.49580383 127.22055817]
[160.19366455 140.09466553]
[162.39126587 154.93281555]
[158.75544739 169.48550415]
[149.83738708 181.54652405]
[136.98908997 189.28739929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[41 51]
[42 50]
[43 49]
[63 97]
[64 96]
[65 95]
[68 93]
[70 91]
[71 90]
[73 88]
[74 87]
[75 86]
] def

init

% Start Annotations
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.16 1 colorpair
9 18 0.16 0.6 colorpair
10 17 0.0 0.6 colorpair
30 62 0.0 0.2 colorpair
31 61 0.0 1 colorpair
32 60 0.16 1 colorpair
33 59 0.16 1 colorpair
34 58 0.0 1 colorpair
41 51 0.16 1 colorpair
42 50 0.0 0.6 colorpair
43 49 0.0 1 colorpair
63 97 0.16 0.6 colorpair
64 96 0.0 1 colorpair
65 95 0.16 1 colorpair
68 93 0.32 1 colorpair
70 91 0.16 0.6 colorpair
71 90 0.0 1 colorpair
73 88 0.16 1 colorpair
74 87 0.0 1 colorpair
75 86 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 cmark
9 18 1 gmark
9 cmark
10 17 1 gmark
30 62 2 gmark
60 cmark
59 cmark
51 cmark
42 50 1 gmark
63 97 1 gmark
63 cmark
97 cmark
95 cmark
68 cmark
93 cmark
70 91 1 gmark
70 cmark
91 cmark
73 cmark
86 cmark

% End Annotations
showpage
end
%%EOF
