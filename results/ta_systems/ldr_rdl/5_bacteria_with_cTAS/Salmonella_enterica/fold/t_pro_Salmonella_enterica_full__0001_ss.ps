%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:08:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUUACGCAGUUGGGCGUGGCCUUCUGGCACGAUCUGGCGGCGCCGAUCAUUGCUGGCAUUAUCGCCAGUGUGAUCGUCAACUGGCUACGUGACAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[95.44164276 185.42347717]
[87.25469208 172.85470581]
[82.84827423 158.51652527]
[82.56359100 143.51922607]
[86.42269897 129.02415466]
[94.12368774 116.15753937]
[83.36108398 126.60580444]
[72.59847260 137.05406189]
[61.83586502 147.50233459]
[51.07325363 157.95059204]
[51.08969879 173.75488281]
[39.86702728 184.88264465]
[24.06345749 184.73199463]
[13.05496311 173.39230347]
[13.37269020 157.59120178]
[24.82813644 146.70321655]
[40.62498856 147.18798828]
[51.38759995 136.73973083]
[62.15020752 126.29145813]
[72.91281891 115.84319305]
[83.67542267 105.39492798]
[83.34210968 97.90233612]
[68.88787079 101.91168213]
[55.06592560 107.73867798]
[42.38665009 99.72394562]
[41.72036743 84.73874664]
[53.63829803 75.63035583]
[67.92232513 80.20713043]
[82.67548370 82.91716003]
[82.34217072 75.42456818]
[70.69431305 65.97325134]
[59.04645538 56.52193451]
[43.45511246 53.83481216]
[38.44726181 39.80731201]
[26.79940224 30.35599518]
[10.75791836 30.58036041]
[0.69259548 18.08760834]
[4.32468891 2.46111035]
[18.86796761 -4.31182289]
[33.16607285 2.96442413]
[36.25072098 18.70813751]
[47.89857864 28.15945435]
[62.65678787 30.17055511]
[68.49777222 44.87407303]
[80.14562988 54.32539368]
[91.79348755 63.77671051]
[100.90687561 75.97464752]
[103.21577454 89.53947449]
[115.65686035 81.15977478]
[128.09794617 72.78007507]
[140.53903198 64.40036774]
[147.66255188 50.27358627]
[162.54104614 49.58089828]
[163.22015381 34.19113159]
[172.72000122 22.29127884]
[187.23364258 18.31410027]
[201.13975525 23.58271408]
[213.58084106 15.20301247]
[214.25994873 -0.18675610]
[223.75978088 -12.08660793]
[238.27343750 -16.06378555]
[252.17953491 -10.79517174]
[264.62063599 -19.17487335]
[277.06170654 -27.55457497]
[289.50280762 -35.93427658]
[301.94387817 -44.31397629]
[304.72332764 -59.87194061]
[317.73742676 -68.83905029]
[333.26510620 -65.89527893]
[342.09414673 -52.78710938]
[338.98635864 -37.29139328]
[325.78558350 -28.60145950]
[310.32357788 -31.87289238]
[297.88250732 -23.49319077]
[285.44140625 -15.11348915]
[273.00033569 -6.73378801]
[260.55923462 1.64591348]
[260.21530151 16.51264572]
[251.07507324 28.46756172]
[236.47731018 32.79867172]
[221.96054077 27.64409828]
[209.51945496 36.02379990]
[209.17552185 50.89052963]
[200.03527832 62.84544754]
[185.43751526 67.17655945]
[170.92074585 62.02198410]
[164.68708801 75.54939270]
[148.91873169 76.84145355]
[136.47764587 85.22115326]
[124.03656006 93.60086060]
[111.59547424 101.98056030]
[125.77721405 97.09401703]
[140.75643921 96.30469513]
[155.37319946 99.67372131]
[168.49563599 106.94020081]
[179.10758972 117.54144287]
[186.38731384 130.65653992]
[189.77108765 145.26988220]
[188.99688721 160.24989319]
[184.12466431 174.43655396]
[175.53170776 186.73132324]
[163.88342285 196.18211365]
[150.08180237 202.05709839]
[135.19561768 203.90133667]
[120.37757874 201.57203674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[48 91]
[49 90]
[50 89]
[51 88]
[53 86]
[57 82]
[58 81]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% Start Annotations
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.16 1 colorpair
9 18 0.16 0.2 colorpair
10 17 0.0 0.2 colorpair
30 46 0.0 1 colorpair
31 45 0.16 1 colorpair
32 44 0.0 1 colorpair
34 42 0.0 0.2 colorpair
35 41 0.0 1 colorpair
49 90 0.0 1 colorpair
50 89 0.0 1 colorpair
51 88 0.16 1 colorpair
53 86 0.16 1 colorpair
57 82 0.16 1 colorpair
58 81 0.16 1 colorpair
62 77 0.16 1 colorpair
64 75 0.0 1 colorpair
65 74 0.0 1 colorpair
66 73 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 cmark
9 18 2 gmark
9 cmark
10 17 2 gmark
45 cmark
34 42 2 gmark
48 91 70 gmark
48 cmark
91 cmark
51 cmark
53 cmark
86 cmark
57 cmark
82 cmark
81 cmark
62 cmark
63 76 42 gmark
63 cmark
76 cmark
73 cmark

% End Annotations
showpage
end
%%EOF
