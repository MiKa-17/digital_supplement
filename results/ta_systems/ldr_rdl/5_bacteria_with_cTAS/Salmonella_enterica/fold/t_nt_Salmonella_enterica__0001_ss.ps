%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUUACGCAGUUGGGCGUUGCCUUCUGGCACGAUCUGGCGGCGCCGAUCAUUGCUGGCAUUAUCGCCAGUCUGAUCGUCAACUGGCUACGUGACAGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[101.81768036 192.67646790]
[92.10230255 181.24794006]
[86.56441498 167.30763245]
[85.78884125 152.32769775]
[89.85678101 137.89151001]
[93.97605133 123.46820831]
[83.44615173 134.15095520]
[72.91625214 144.83370972]
[62.38634872 155.51646423]
[51.85644913 166.19921875]
[52.22093582 181.99929810]
[41.24605179 193.37152100]
[25.44299507 193.56893921]
[14.18744183 182.47444153]
[14.15711212 166.67018127]
[25.36999893 155.53254700]
[41.17369461 155.66931152]
[51.70359802 144.98655701]
[62.23349762 134.30381775]
[72.76339722 123.62106323]
[83.29330444 112.93830872]
[71.55242157 122.27381134]
[56.59469604 123.39921570]
[43.58911133 115.92561340]
[37.03003693 102.43566895]
[39.18410492 87.59114838]
[49.30693436 76.52188873]
[63.90034866 73.05313873]
[77.92127228 78.38359833]
[86.52455902 90.67153931]
[79.46553040 77.43635559]
[72.40649414 64.20117188]
[65.34745789 50.96599197]
[58.28842545 37.73081207]
[43.17905426 39.13885880]
[28.72067261 34.66692352]
[17.10730553 25.02621078]
[10.08875656 11.70977211]
[8.70699501 -3.23865914]
[13.14157104 -17.53830719]
[22.68698120 -29.01935387]
[15.62794876 -42.25453568]
[8.56891537 -55.48971939]
[-6.29872990 -61.51737976]
[-10.71760464 -76.93986511]
[-1.29792619 -89.92636871]
[14.73433399 -90.51474762]
[25.08059692 -78.25365448]
[21.80409813 -62.54875183]
[28.86313057 -49.31356812]
[35.92216492 -36.07838821]
[50.77423477 -37.60982513]
[65.11997986 -33.32673264]
[76.76443481 -23.85194588]
[83.91349792 -10.60511875]
[85.45037842 4.40992928]
[81.10987854 18.90831375]
[71.52361298 30.67177773]
[78.58264160 43.90695953]
[85.64167786 57.14214325]
[92.70070648 70.37732697]
[99.75974274 83.61251068]
[112.99492645 90.67153931]
[127.91867065 89.16094971]
[142.84240723 87.65036774]
[151.67018127 78.11069489]
[164.23435974 77.23598480]
[173.67428589 84.95132446]
[186.88162231 76.24059296]
[200.13288879 83.04154968]
[215.09396362 81.96166229]
[228.30130005 73.25093079]
[241.55258179 80.05187988]
[256.51364136 78.97199249]
[271.47473145 77.89210510]
[278.10437012 64.03774261]
[290.78207397 55.36757660]
[306.09756470 54.21384048]
[319.93109131 60.88687897]
[328.56146240 73.59168243]
[329.66717529 88.91072083]
[322.95083618 102.72325134]
[310.21902466 111.31376648]
[294.89660645 112.37147522]
[281.10519409 105.61183929]
[272.55462646 92.85318756]
[257.59353638 93.93307495]
[242.63246155 95.01296234]
[230.49523926 103.64645386]
[216.17385864 96.92273712]
[201.21278381 98.00262451]
[189.07556152 106.63611603]
[174.75416565 99.91240692]
[160.87440491 110.54405212]
[144.35299683 102.57411194]
[129.42926025 104.08469391]
[114.50550842 105.59528351]
[128.32653809 111.42444611]
[143.26461792 112.78605652]
[156.97734070 118.86560822]
[168.01664734 129.02108765]
[175.21675110 142.18006897]
[177.81730652 156.95291138]
[175.54370117 171.77960205]
[168.63601685 185.09440613]
[157.82371521 195.49124146]
[144.24862671 201.87220764]
[129.34426880 203.56344604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[41 51]
[42 50]
[43 49]
[63 97]
[64 96]
[65 95]
[68 93]
[70 91]
[71 90]
[73 88]
[74 87]
[75 86]
] def

init

% Start Annotations
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.16 1 colorpair
9 18 0.16 0.6 colorpair
10 17 0.0 0.6 colorpair
30 62 0.0 0.6 colorpair
31 61 0.0 1 colorpair
32 60 0.16 1 colorpair
33 59 0.16 1 colorpair
34 58 0.0 1 colorpair
41 51 0.16 1 colorpair
42 50 0.0 0.6 colorpair
43 49 0.0 1 colorpair
63 97 0.16 0.6 colorpair
64 96 0.0 1 colorpair
65 95 0.16 1 colorpair
68 93 0.32 1 colorpair
70 91 0.16 0.6 colorpair
71 90 0.0 1 colorpair
73 88 0.16 1 colorpair
74 87 0.0 1 colorpair
75 86 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 cmark
9 18 1 gmark
9 cmark
10 17 1 gmark
30 62 1 gmark
60 cmark
59 cmark
51 cmark
42 50 1 gmark
63 97 1 gmark
63 cmark
97 cmark
95 cmark
68 cmark
93 cmark
70 91 1 gmark
70 cmark
91 cmark
73 cmark
86 cmark

% End Annotations
showpage
end
%%EOF
