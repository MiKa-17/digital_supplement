%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 15:49:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUCGCAGAACUGGGCAUGGCCUUCUGGCAUGAUUUAGCGGCUCCGGUCAUUGCUGGCAUUCUUGCCAGUAUGAUCGUGAACUGGCUGAACAAGCGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[-27.01011658 367.30038452]
[-31.02433014 381.80459595]
[-37.79131699 395.24685669]
[-47.05097198 407.11044312]
[-58.44737625 416.93939209]
[-71.54248810 424.35589600]
[-85.83295441 429.07485962]
[-100.76950073 430.91491699]
[-115.77799988 429.80535889]
[-130.28157043 425.78878784]
[-143.72273254 419.01962280]
[-155.58482361 409.75805664]
[-165.41192627 398.36004639]
[-172.82630920 385.26373291]
[-177.54295349 370.97250366]
[-179.38059998 356.03567505]
[-178.26860046 341.02734375]
[-174.24967957 326.52444458]
[-167.47834778 313.08438110]
[-158.21485901 301.22375488]
[-146.81526184 291.39849854]
[-133.71775818 283.98626709]
[-119.42575836 279.27191162]
[-104.48861694 277.43667603]
[-89.48047638 278.55111694]
[-74.97821045 282.57238770]
[-61.53924942 289.34588623]
[-52.30811310 277.52276611]
[-43.07697678 265.69964600]
[-33.84584045 253.87654114]
[-24.61470413 242.05342102]
[-15.38356781 230.23030090]
[-24.28895187 218.82229614]
[-30.18814087 205.59643555]
[-32.72957230 191.32969666]
[-31.75908661 176.86135864]
[-27.32926559 163.04373169]
[-19.69660378 150.69187927]
[-9.30666256 140.53553772]
[3.23193431 133.17607117]
[17.18315506 129.05078125]
[31.72676849 128.40698242]
[46.00656128 131.28717041]
[59.18074417 137.52621460]
[68.74876404 125.97402954]
[78.31678772 114.42184448]
[73.98525238 98.82349396]
[79.70708466 83.67979431]
[93.27109528 74.84302521]
[109.43548584 75.72814178]
[118.66661835 63.90502548]
[127.89775848 52.08190536]
[137.12889099 40.25878906]
[146.36003113 28.43567085]
[139.59028625 15.93816757]
[138.12821960 1.84404767]
[142.16363525 -11.69353199]
[151.04911804 -22.61925697]
[163.40353394 -29.28770065]
[177.32667542 -30.71107864]
[190.69151306 -26.70544624]
[200.25952148 -38.25762939]
[196.27894592 -53.25545120]
[201.90547180 -67.71649170]
[214.97558594 -76.08020020]
[230.46357727 -75.13054657]
[242.41398621 -65.23270416]
[246.23164368 -50.19258499]
[240.44857788 -35.79342651]
[227.28848267 -27.57200050]
[211.81170654 -28.68960953]
[202.24369812 -17.13742447]
[209.17404175 -2.81687689]
[209.20188904 13.15032959]
[202.27146912 27.59931374]
[189.71122742 37.64432144]
[173.97943115 41.25504303]
[158.18315125 37.66680527]
[148.95201111 49.48992538]
[139.72087097 61.31304169]
[130.48973083 73.13616180]
[121.25859833 84.95928192]
[125.91505432 97.43846130]
[123.79181671 110.58776855]
[115.44435883 120.96719360]
[103.05646515 125.86135101]
[89.86897278 123.98986816]
[80.30094910 135.54205322]
[70.73293304 147.09423828]
[79.80113220 159.76574707]
[85.30102539 174.33303833]
[86.86784363 189.81381226]
[84.40182495 205.16580200]
[78.07453156 219.35685730]
[68.31695557 231.43434143]
[55.79012299 240.58915710]
[41.34033966 246.20985413]
[25.94201851 247.92352295]
[10.63196087 245.62051392]
[-3.56045008 239.46144104]
[-12.79158592 251.28456116]
[-22.02272224 263.10766602]
[-31.25385857 274.93078613]
[-40.48499680 286.75390625]
[-49.71613312 298.57702637]
[-39.88534164 309.97183228]
[-32.46672821 323.06576538]
[-27.74544716 337.35546875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[32 100]
[44 89]
[45 88]
[46 87]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[61 72]
[62 71]
] def

init

% Start Annotations
27 105 0.16 1 colorpair
28 104 0.0 1 colorpair
29 103 0.0 1 colorpair
30 102 0.0 1 colorpair
31 101 0.0 1 colorpair
32 100 0.0 1 colorpair
44 89 0.0 1 colorpair
45 88 0.16 1 colorpair
46 87 0.0 1 colorpair
50 82 0.16 1 colorpair
51 81 0.16 1 colorpair
52 80 0.16 1 colorpair
53 79 0.0 1 colorpair
54 78 0.0 1 colorpair
61 72 0.0 1 colorpair
62 71 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
27 cmark
45 cmark
50 cmark
81 cmark
52 cmark

% End Annotations
showpage
end
%%EOF
