%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 06:52:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAAAGAUUUAAUGUCGUUGGUUAUCGCACCGAUCUUUGUAGGAUUGGUUCUGGAAAUGAUUUCUCGUGUGUUGGACGAGGAAGACGAUAGCCGAAAG\
) } def
/len { sequence length } bind def

/coor [
[77.77914429 285.23825073]
[69.15381622 297.51031494]
[55.68880844 304.12042236]
[40.70431137 303.43865967]
[27.89519691 295.63308716]
[20.41993523 282.62844849]
[20.12149048 267.63262939]
[9.85328484 278.56713867]
[-0.41492188 289.50167847]
[-1.35018671 305.51745605]
[-14.53753471 314.65380859]
[-29.86076164 309.90216064]
[-35.56520081 294.90753174]
[-27.27489090 281.17251587]
[-11.34945107 279.23345947]
[-1.08124471 268.29895020]
[9.18696213 257.36441040]
[10.99453735 248.24571228]
[19.69401169 242.41438293]
[26.50387001 229.04928589]
[33.31372833 215.68418884]
[40.12358475 202.31909180]
[46.93344116 188.95399475]
[53.74329758 175.58889771]
[60.55315781 162.22380066]
[67.36301422 148.85870361]
[74.17287445 135.49360657]
[80.98272705 122.12850952]
[87.58181763 108.65809631]
[86.17018890 93.72466278]
[77.35341644 81.58940887]
[68.53663635 69.45415497]
[59.71985626 57.31890106]
[50.90307617 45.18364334]
[42.08629990 33.04838943]
[33.26951981 20.91313553]
[24.45273972 8.77787971]
[15.63596153 -3.35737491]
[1.43436170 -12.61755276]
[6.40125418 -28.82762146]
[23.35280037 -28.54223061]
[27.77121735 -12.17415333]
[36.58799362 -0.03889886]
[45.40477371 12.09635639]
[54.22155380 24.23161125]
[63.03833008 36.36686707]
[71.85511017 48.50212097]
[80.67189026 60.63737488]
[89.48867035 72.77262878]
[98.30545044 84.90788269]
[90.11976624 72.33829498]
[88.43685913 57.43299866]
[93.61381531 43.35467911]
[104.55216217 33.09053802]
[118.93094635 28.81847382]
[133.69920349 31.44495392]
[145.72334290 40.41267776]
[152.45202637 53.81883240]
[152.45750427 68.81883240]
[145.73864746 82.22990417]
[133.72106934 91.20642090]
[118.95492554 93.84371185]
[133.83663940 91.96371460]
[148.71836853 90.08371735]
[163.60008240 88.20372009]
[178.48181152 86.32372284]
[193.36352539 84.44371796]
[208.24525452 82.56372070]
[223.12696838 80.68372345]
[231.44532776 67.44216156]
[246.34484863 62.69470215]
[260.79043579 68.68295288]
[267.96130371 82.57943726]
[264.47161865 97.82266998]
[251.96910095 107.21525574]
[236.35702515 106.32231140]
[225.00697327 95.56544495]
[210.12524414 97.44544220]
[195.24353027 99.32543945]
[180.36180115 101.20543671]
[165.48008728 103.08544159]
[150.59835815 104.96543884]
[135.71664429 106.84543610]
[120.83492279 108.72543335]
[101.15422058 115.04478455]
[100.29600525 124.32493591]
[94.34782410 128.93836975]
[87.53797150 142.30346680]
[80.72811127 155.66856384]
[73.91825104 169.03366089]
[67.10839844 182.39875793]
[60.29853821 195.76385498]
[53.48868179 209.12895203]
[46.67882538 222.49404907]
[39.86896515 235.85914612]
[33.05910873 249.22424316]
[47.27072525 244.42529297]
[62.03858185 247.05406189]
[73.72122955 256.46234131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 17]
[8 16]
[9 15]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 85]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% Start Annotations
7 17 0.0 1 colorpair
8 16 0.0 1 colorpair
9 15 0.0 1 colorpair
19 96 0.0 1 colorpair
20 95 0.0 1 colorpair
21 94 0.0 1 colorpair
22 93 0.0 1 colorpair
23 92 0.16 1 colorpair
24 91 0.0 1 colorpair
25 90 0.0 1 colorpair
26 89 0.0 1 colorpair
27 88 0.0 1 colorpair
28 87 0.0 1 colorpair
29 85 0.0 1 colorpair
30 50 0.0 1 colorpair
31 49 0.0 1 colorpair
32 48 0.0 1 colorpair
33 47 0.16 1 colorpair
34 46 0.0 1 colorpair
35 45 0.0 1 colorpair
36 44 0.0 1 colorpair
37 43 0.0 1 colorpair
38 42 0.0 1 colorpair
62 84 0.0 1 colorpair
63 83 0.0 1 colorpair
64 82 0.0 1 colorpair
65 81 0.0 1 colorpair
66 80 0.0 1 colorpair
67 79 0.0 1 colorpair
68 78 0.0 1 colorpair
69 77 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
92 cmark
33 cmark

% End Annotations
showpage
end
%%EOF
