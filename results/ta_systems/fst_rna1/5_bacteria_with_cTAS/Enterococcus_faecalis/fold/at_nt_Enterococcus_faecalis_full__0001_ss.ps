%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 06:52:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___________UAAAAAUAUGUUAUACUAAAGGUGCGAAACGACAUUAAAUCGUACAAAUAACACAAAAAGCAAUCCUACGGCGAAUAGGAUUGCUUUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[164.84446716 180.05741882]
[156.26835632 186.30102539]
[147.09567261 191.62965393]
[137.42367554 195.98678589]
[127.35490417 199.32624817]
[116.99610138 201.61264038]
[106.45710754 202.82170105]
[95.84965515 202.94061279]
[85.28620148 201.96812439]
[74.87874603 199.91455078]
[64.73764038 196.80165100]
[54.97038651 192.66244507]
[45.68054962 187.54080200]
[36.96662521 181.49102783]
[28.92099380 174.57727051]
[21.62895966 166.87283325]
[15.16783619 158.45938110]
[9.60612392 149.42613220]
[5.00279093 139.86885071]
[1.40664196 129.88887024]
[-1.14419556 119.59200287]
[-2.62267685 109.08741760]
[-3.01312661 98.48648834]
[-2.31140542 87.90159607]
[-0.52495295 77.44498444]
[2.32729030 67.22750092]
[6.21508455 57.35747910]
[11.09720993 47.93956375]
[16.92190552 39.07360840]
[23.62741470 30.85361099]
[31.14264488 23.36671829]
[39.38792038 16.69231224]
[48.27581787 10.90115547]
[41.70930481 -2.58516598]
[35.14278793 -16.07148743]
[28.57627106 -29.55780983]
[22.00975609 -43.04413223]
[15.44324112 -56.53045273]
[0.18057469 -56.41306686]
[-13.61787510 -62.93729401]
[-23.21241760 -74.80774689]
[-26.69804573 -89.66752625]
[-23.38269043 -104.56622314]
[-13.92461491 -116.54568481]
[-0.20172735 -123.22738647]
[15.06128311 -123.28466797]
[28.83393288 -116.70615387]
[38.38165665 -104.79801178]
[41.80874252 -89.92462158]
[38.43473816 -75.03909302]
[28.92956161 -63.09696960]
[35.49607849 -49.61064529]
[42.06259537 -36.12432480]
[48.62910843 -22.63800240]
[55.19562531 -9.15168190]
[61.76214218 4.33464003]
[83.36006927 -1.67156720]
[105.74584961 -2.86389184]
[127.85958099 0.81411999]
[148.65423584 9.18832397]
[167.14523315 21.86222267]
[182.45709229 38.23574066]
[193.86480713 57.53363419]
[200.82827759 78.84220123]
[203.01779175 101.15253448]
[200.32969666 123.40829468]
[214.65049744 127.87084198]
[228.97131348 132.33338928]
[243.29212952 136.79592896]
[257.61294556 141.25848389]
[271.93374634 145.72102356]
[286.25457764 150.18357849]
[300.57537842 154.64611816]
[314.89617920 159.10865784]
[329.21701050 163.57121277]
[343.53781128 168.03375244]
[357.85864258 172.49630737]
[372.17944336 176.95884705]
[386.50024414 181.42138672]
[399.56198120 172.82339478]
[415.08847046 174.68421936]
[425.74856567 186.12519836]
[426.50891113 201.74429321]
[417.01049805 214.16661072]
[401.73818970 217.52674866]
[387.90307617 210.23811340]
[382.03771973 195.74220276]
[367.71688843 191.27966309]
[353.39608765 186.81710815]
[339.07528687 182.35456848]
[324.75445557 177.89202881]
[310.43365479 173.42947388]
[296.11282349 168.96693420]
[281.79202271 164.50437927]
[267.47122192 160.04183960]
[253.15039062 155.57929993]
[238.82958984 151.11674500]
[224.50877380 146.65420532]
[210.18795776 142.19165039]
[195.86714172 137.72911072]
[191.47923279 147.38719177]
[186.12142944 156.54284668]
[179.85055542 165.09904480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% Start Annotations
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.16 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
66 100 0.0 1 colorpair
67 99 0.0 1 colorpair
68 98 0.0 1 colorpair
69 97 0.0 1 colorpair
70 96 0.0 1 colorpair
71 95 0.0 1 colorpair
72 94 0.0 1 colorpair
73 93 0.0 1 colorpair
74 92 0.0 1 colorpair
75 91 0.0 1 colorpair
76 90 0.0 1 colorpair
77 89 0.0 1 colorpair
78 88 0.0 1 colorpair
79 87 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
35 cmark

% End Annotations
showpage
end
%%EOF
