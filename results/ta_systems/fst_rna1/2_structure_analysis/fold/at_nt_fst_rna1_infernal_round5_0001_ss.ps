%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 06:51:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAAUAUGCUAUAAUAAAUGUGCGAAACGAGAUGA____AAUCGUACAA____AUAACACAAAAGCCAAUCCUAUUGCGAGUAGGA_UU_GGCUUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[-33.51606750 150.10292053]
[-44.10619354 160.74124146]
[-55.63273621 170.35704041]
[-67.99735260 178.86827087]
[-81.09454346 186.20230103]
[-94.81256866 192.29660034]
[-109.03439331 197.09913635]
[-123.63867188 200.56893921]
[-138.50080872 202.67642212]
[-153.49400330 203.40359497]
[-168.49034119 202.74426270]
[-183.36186218 200.70402527]
[-197.98168945 197.30032349]
[-212.22508240 192.56216431]
[-225.97055054 186.52999878]
[-239.10078430 179.25526428]
[-251.50376892 170.80006409]
[-263.07369995 161.23651123]
[-273.71182251 150.64620972]
[-283.32742310 139.11950684]
[-291.83847046 126.75474548]
[-299.17227173 113.65743256]
[-305.26632690 99.93930054]
[-310.06863403 85.71739960]
[-313.53820801 71.11306000]
[-315.64544678 56.25088501]
[-316.37237549 41.25767899]
[-315.71276855 26.26136208]
[-313.67230225 11.38987541]
[-310.26834106 -3.22989607]
[-305.52993774 -17.47322083]
[-299.49755859 -31.21857643]
[-292.22262573 -44.34869003]
[-283.76721191 -56.75153732]
[-274.20346069 -68.32129669]
[-263.61297607 -78.95926666]
[-252.08610535 -88.57467651]
[-239.72120667 -97.08548737]
[-226.62377930 -104.41909790]
[-212.90554810 -110.51293182]
[-198.68356323 -115.31499481]
[-184.07916260 -118.78431702]
[-169.21694946 -120.89130402]
[-154.22373962 -121.61798096]
[-139.22743225 -120.95813751]
[-124.35597229 -118.91741180]
[-109.73625946 -115.51321411]
[-95.49301147 -110.77458191]
[-81.74775696 -104.74195862]
[-68.61776733 -97.46679688]
[-56.21506119 -89.01117706]
[-44.64545822 -79.44723511]
[-34.00766754 -68.85657501]
[-24.39245033 -57.32955551]
[-15.88184071 -44.96451569]
[-8.54845142 -31.86695862]
[-2.45484853 -18.14862633]
[2.34697795 -3.92656183]
[5.81606007 10.67789364]
[7.92279959 25.54013824]
[8.64922333 40.53336716]
[7.98913193 55.52966309]
[5.94815874 70.40108490]
[20.55739403 73.80258179]
[35.16662979 77.20408630]
[49.77586746 80.60559082]
[64.38510132 84.00709534]
[78.99433899 87.40859222]
[93.60357666 90.81009674]
[108.26298523 93.98841858]
[122.96916199 96.94281006]
[137.71867371 99.67259216]
[152.50810242 102.17713165]
[167.29754639 104.68167114]
[182.08697510 107.18621063]
[196.87640381 109.69075012]
[208.66905212 99.42101288]
[224.30485535 99.18579102]
[236.40109253 109.09614563]
[239.24626160 124.47271729]
[231.49697876 138.05516052]
[216.81221008 143.43025208]
[202.12565613 138.06004333]
[194.37187195 124.48017883]
[179.58242798 121.97563934]
[164.79299927 119.47109985]
[150.00357056 116.96656799]
[135.21414185 114.46202850]
[127.97082520 116.48295593]
[120.01476288 111.64898682]
[105.30859375 108.69458771]
[97.26464844 110.33613586]
[90.20207214 105.41933441]
[75.59283447 102.01782990]
[60.98360062 98.61632538]
[46.37436295 95.21482849]
[31.76512909 91.81332397]
[17.15589142 88.41181946]
[2.54665613 85.01031494]
[-2.19126058 99.25379944]
[-8.22320271 112.99935913]
[-15.49770546 126.12971497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 91]
[71 90]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
] def

init

% Start Annotations
63 99 0.16 1 colorpair
64 98 0.0 1 colorpair
65 97 0.16 1 colorpair
66 96 0.0 1 colorpair
67 95 0.16 1 colorpair
68 94 0.32 1 colorpair
69 93 0.0 1 colorpair
70 91 0.16 1 colorpair
71 90 0.32 0.2 colorpair
73 87 0.16 1 colorpair
74 86 0.0 1 colorpair
75 85 0.16 1 colorpair
76 84 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
63 cmark
65 cmark
97 cmark
67 cmark
95 cmark
68 cmark
94 cmark
70 cmark
91 cmark
71 90 2 gmark
71 cmark
90 cmark
72 88 3 gmark
72 cmark
88 cmark
73 cmark
87 cmark
75 cmark
85 cmark
76 cmark
84 cmark

% End Annotations
showpage
end
%%EOF
