%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:57:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAAAGAUUUAAUGUCGUUGGUUAUCGCACCGAUCUUUGUAGGAUUGGUUCUGGAAAUGAUUUCUCGUGUGUUGGACGAGGAAGACGAUAGCCGAAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[95.10969543 313.66485596]
[81.37868500 319.70303345]
[66.37933350 319.84222412]
[52.53861618 314.05996704]
[42.09604645 303.29183960]
[36.74129105 289.28018188]
[37.34140778 274.28964233]
[27.31578827 285.44702148]
[17.29016685 296.60440063]
[16.70681763 312.63684082]
[3.72327304 322.06057739]
[-11.70060062 317.64654541]
[-17.73292732 302.78079224]
[-9.74622250 288.86706543]
[6.13279676 286.57876587]
[16.15841675 275.42138672]
[26.18403816 264.26403809]
[27.58501434 255.79695129]
[35.07655716 249.72787476]
[40.44495773 235.72145081]
[45.81335831 221.71501160]
[51.18175507 207.70857239]
[56.55015564 193.70213318]
[61.91855621 179.69569397]
[67.28695679 165.68925476]
[72.65535736 151.68281555]
[78.02375793 137.67637634]
[83.39215851 123.66994476]
[88.54633331 109.58326721]
[85.81655121 94.83375549]
[76.13584900 83.37583160]
[66.45514679 71.91790009]
[56.77444839 60.45998001]
[47.09375000 49.00205231]
[37.41304779 37.54412842]
[27.73234749 26.08620453]
[18.05164719 14.62827969]
[8.37094784 3.17035508]
[-6.46987915 -5.02636385]
[-2.70184088 -21.55628204]
[14.22517967 -22.51143837]
[19.82887268 -6.51034546]
[29.50957298 4.94757938]
[39.19027328 16.40550423]
[48.87097168 27.86342812]
[58.55167389 39.32135391]
[68.23237610 50.77927780]
[77.91307831 62.23720169]
[87.59377289 73.69512939]
[97.27447510 85.15305328]
[87.83515167 73.49546814]
[84.62280273 58.84347916]
[88.31903076 44.30601501]
[98.13955688 32.96770477]
[112.00061035 27.23436546]
[126.96109009 28.32252693]
[139.84660339 36.00129700]
[147.92303467 48.64135742]
[149.47669983 63.56068039]
[144.17793274 77.59360504]
[133.15104675 87.76256561]
[118.73596954 91.90984344]
[133.23468018 88.06439209]
[147.73338318 84.21894836]
[162.23210144 80.37350464]
[176.73080444 76.52806091]
[191.22950745 72.68260956]
[205.72822571 68.83716583]
[220.22692871 64.99172211]
[226.70742798 50.76016617]
[240.84184265 44.07043839]
[255.95632935 48.08121872]
[264.91427612 60.89874649]
[263.48605347 76.47097015]
[252.34597778 87.44515991]
[236.75408936 88.63964844]
[224.07237244 79.49042511]
[209.57366943 83.33587646]
[195.07496643 87.18132019]
[180.57624817 91.02676392]
[166.07754517 94.87221527]
[151.57882690 98.71765900]
[137.08012390 102.56310272]
[122.58142090 106.40854645]
[102.70997620 114.52203369]
[102.82364655 123.83080292]
[97.39859009 129.03834534]
[92.03018951 143.04478455]
[86.66179657 157.05122375]
[81.29339600 171.05766296]
[75.92499542 185.06410217]
[70.55659485 199.07052612]
[65.18819427 213.07696533]
[59.81979370 227.08340454]
[54.45139313 241.08984375]
[49.08299637 255.09628296]
[62.15353012 247.73686218]
[77.06646729 246.12303162]
[91.40879059 250.51594543]
[102.85984802 260.20477295]
[109.56677246 273.62182617]
[110.44435883 288.59613037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 17]
[8 16]
[9 15]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 85]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% Start Annotations
7 17 0.0 1 colorpair
8 16 0.0 1 colorpair
9 15 0.0 1 colorpair
19 96 0.0 1 colorpair
20 95 0.0 1 colorpair
21 94 0.0 1 colorpair
22 93 0.0 1 colorpair
23 92 0.16 1 colorpair
24 91 0.0 1 colorpair
25 90 0.0 1 colorpair
26 89 0.0 1 colorpair
27 88 0.0 1 colorpair
28 87 0.0 1 colorpair
29 85 0.0 1 colorpair
30 50 0.0 1 colorpair
31 49 0.0 1 colorpair
32 48 0.0 1 colorpair
33 47 0.16 1 colorpair
34 46 0.0 1 colorpair
35 45 0.0 1 colorpair
36 44 0.0 1 colorpair
37 43 0.0 1 colorpair
38 42 0.0 1 colorpair
62 84 0.0 1 colorpair
63 83 0.0 1 colorpair
64 82 0.0 1 colorpair
65 81 0.0 1 colorpair
66 80 0.0 1 colorpair
67 79 0.0 1 colorpair
68 78 0.0 1 colorpair
69 77 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
92 cmark
33 cmark

% End Annotations
showpage
end
%%EOF
