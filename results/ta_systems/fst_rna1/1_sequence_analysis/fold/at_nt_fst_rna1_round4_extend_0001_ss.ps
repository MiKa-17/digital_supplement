%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:59:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACCUCUUUUAAAAAUAUGUUAUACUAAAGGUGCGAAACGACAUUAAAUCGUACAAAUAACACAAAAAGCAAUCCUACGGCGAAUAGGAUUGCUUUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[116.04146576 179.77485657]
[107.52384949 192.12193298]
[96.25229645 202.01901245]
[82.90744781 208.86846924]
[68.29512787 212.25668335]
[53.29769897 211.97908020]
[38.82077789 208.05241394]
[25.73855019 200.71379089]
[14.84099102 190.40635681]
[6.78614330 177.75253296]
[2.06040049 163.51640320]
[0.94912523 148.55761719]
[3.51942205 133.77947998]
[9.61608410 120.07434082]
[18.87096405 108.26979828]
[30.72520828 99.07866669]
[44.46299744 93.05595398]
[59.25477982 90.56533051]
[74.20735168 91.75720215]
[88.41366577 96.55759430]
[79.89269257 84.21283722]
[71.37171936 71.86808014]
[62.85074997 59.52332306]
[54.32977676 47.17856598]
[45.80880737 34.83380890]
[36.53354645 36.18834305]
[27.38360405 34.36624527]
[19.41046333 29.60698128]
[13.52026749 22.48580551]
[10.37088108 13.84434700]
[10.29848766 4.69120884]
[13.28195095 -3.91575122]
[18.94866180 -10.99167538]
[12.38214684 -24.47799683]
[5.81563091 -37.96431732]
[-0.75088459 -51.45064163]
[-7.31739998 -64.93696594]
[-13.88391590 -78.42328644]
[-29.14658165 -78.30590057]
[-42.94503021 -84.83012390]
[-52.53957367 -96.70057678]
[-56.02520370 -111.56035614]
[-52.70984650 -126.45905304]
[-43.25177002 -138.43852234]
[-29.52888298 -145.12022400]
[-14.26587391 -145.17749023]
[-0.49322310 -138.59898376]
[9.05449867 -126.69084167]
[12.48158455 -111.81745148]
[9.10758305 -96.93192291]
[-0.39759403 -84.98979950]
[6.16892147 -71.50347900]
[12.73543739 -58.01715469]
[19.30195236 -44.53083420]
[25.86846733 -31.04451370]
[32.43498230 -17.55819130]
[53.02005386 -12.89874363]
[63.97449112 5.45952177]
[58.15356445 26.31283569]
[66.67453766 38.65759277]
[75.19550323 51.00235367]
[83.71647644 63.34711075]
[92.23744965 75.69187164]
[100.75842285 88.03662872]
[106.98210907 90.33630371]
[110.99885559 95.57168579]
[125.31967163 100.03423309]
[139.64048767 104.49677277]
[153.96130371 108.95932007]
[168.28210449 113.42186737]
[182.60292053 117.88441467]
[196.92373657 122.34696198]
[211.24455261 126.80950165]
[225.56536865 131.27204895]
[239.88616943 135.73458862]
[254.20698547 140.19714355]
[268.52780151 144.65968323]
[282.84860229 149.12223816]
[297.16943359 153.58477783]
[310.23114014 144.98678589]
[325.75762939 146.84759521]
[336.41772461 158.28858948]
[337.17807007 173.90768433]
[327.67965698 186.33000183]
[312.40734863 189.69012451]
[298.57226562 182.40150452]
[292.70687866 167.90559387]
[278.38607788 163.44303894]
[264.06524658 158.98049927]
[249.74444580 154.51795959]
[235.42362976 150.05540466]
[221.10281372 145.59286499]
[206.78199768 141.13031006]
[192.46119690 136.66777039]
[178.14038086 132.20523071]
[163.81956482 127.74268341]
[149.49874878 123.28013611]
[135.17793274 118.81758881]
[120.85712433 114.35504150]
[106.53631592 109.89249420]
[115.34799194 122.03145599]
[120.93328857 135.95281982]
[122.95491791 150.81596375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% Start Annotations
20 64 0.0 1 colorpair
21 63 0.0 1 colorpair
22 62 0.0 0.6 colorpair
23 61 0.0 1 colorpair
24 60 0.0 1 colorpair
25 59 0.0 0.6 colorpair
33 56 0.0 1 colorpair
34 55 0.0 1 colorpair
35 54 0.16 1 colorpair
36 53 0.0 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
66 100 0.0 1 colorpair
67 99 0.0 1 colorpair
68 98 0.0 1 colorpair
69 97 0.0 1 colorpair
70 96 0.0 1 colorpair
71 95 0.0 1 colorpair
72 94 0.0 1 colorpair
73 93 0.0 1 colorpair
74 92 0.0 1 colorpair
75 91 0.0 1 colorpair
76 90 0.0 1 colorpair
77 89 0.0 1 colorpair
78 88 0.0 1 colorpair
79 87 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 62 1 gmark
25 59 1 gmark
35 cmark

% End Annotations
showpage
end
%%EOF
