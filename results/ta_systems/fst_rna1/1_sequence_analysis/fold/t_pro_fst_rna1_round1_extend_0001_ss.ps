%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 05:54:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCAGUAC_CUAUUUGUAACGAUUAUAGCUCCUAUCAUAGUAGGAGUUAUACUCACAUUAUUUUCUCAUUGGCUGAAUAAUCGUGACAAGUAAUUUAAC\
) } def
/len { sequence length } bind def

/coor [
[200.05911255 473.72811890]
[185.82798767 468.96209717]
[172.02050781 463.08044434]
[158.72398376 456.12039185]
[146.02247620 448.12591553]
[133.99627686 439.14755249]
[122.72144318 429.24209595]
[112.26924133 418.47216797]
[102.70575714 406.90582275]
[94.09146118 394.61624146]
[86.48081970 381.68109131]
[79.92193604 368.18215942]
[74.45628357 354.20480347]
[70.11842346 339.83737183]
[66.93578339 325.17071533]
[64.92847443 310.29754639]
[64.10919952 295.31192017]
[64.48312378 280.30859375]
[66.04789734 265.38238525]
[68.79362488 250.62768555]
[72.70294189 236.13778687]
[77.75112915 222.00427246]
[83.90628052 208.31654358]
[91.12947083 195.16110229]
[99.37503815 182.62113953]
[108.59085083 170.77592468]
[118.71863556 159.70036316]
[129.69436646 149.46447754]
[120.36759186 137.71665955]
[111.04081726 125.96884155]
[101.71404266 114.22102356]
[88.78166199 108.90641022]
[86.53813934 95.10575104]
[77.21136475 83.35793304]
[67.88459015 71.61011505]
[58.55781174 59.86229324]
[49.23103714 48.11447525]
[39.90426254 36.36665344]
[24.46134186 30.84865952]
[21.78519440 14.66934395]
[34.62881088 4.47259998]
[49.77977753 10.74796391]
[51.65208054 27.03987885]
[60.97885895 38.78770065]
[70.30563354 50.53551865]
[79.63240814 62.28334045]
[88.95918274 74.03115845]
[98.28595734 85.77897644]
[111.21833801 91.09358978]
[113.46186066 104.89424896]
[122.78863525 116.64206696]
[132.11541748 128.38989258]
[141.44218445 140.13771057]
[153.90036011 131.76905823]
[166.98402405 124.41667938]
[180.61050415 118.12705231]
[194.69360352 112.93994141]
[209.14431763 108.88813782]
[223.87126160 105.99726105]
[238.78134155 104.28559113]
[253.78027344 103.76394653]
[268.77322388 104.43562317]
[283.66543579 106.29637909]
[298.36273193 109.33444977]
[312.77215576 113.53063202]
[326.80267334 118.85838318]
[340.36553955 125.28402710]
[353.37500000 132.76693726]
[365.74880981 141.25981140]
[377.40875244 150.70893860]
[388.28106689 161.05458069]
[398.29708862 172.23133850]
[407.39340210 184.16853333]
[415.51257324 196.79071045]
[422.60321045 210.01806641]
[428.62054443 223.76695251]
[433.52645874 237.95046997]
[437.29000854 252.47891235]
[439.88735962 267.26046753]
[441.30206299 282.20162964]
[441.52523804 297.20797729]
[440.55545044 312.18460083]
[438.39880371 327.03683472]
[435.06896973 341.67077637]
[430.58697510 355.99389648]
[424.98117065 369.91564941]
[418.28698730 383.34799194]
[410.54675293 396.20602417]
[401.80941772 408.40844727]
[392.13021851 419.87811279]
[381.57031250 430.54248047]
[370.19653320 440.33416748]
[358.08074951 449.19122314]
[345.29956055 457.05770874]
[331.93377686 463.88381958]
[318.06790161 469.62643433]
[303.78958130 474.24923706]
[289.18914795 477.72302246]
[274.35885620 480.02578735]
[259.39251709 481.14303589]
[244.38470459 481.06762695]
[229.43031311 479.80007935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 53]
[29 52]
[30 51]
[31 50]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% Start Annotations
28 53 0.16 1 colorpair
29 52 0.16 1 colorpair
30 51 0.32 1 colorpair
31 50 0.16 0.6 colorpair
34 47 0.0 1 colorpair
35 46 0.0 1 colorpair
37 44 0.0 1 colorpair
38 43 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
28 cmark
52 cmark
30 cmark
51 cmark
31 50 1 gmark
50 cmark
33 48 4 gmark
33 cmark
48 cmark
36 45 4 gmark
36 cmark
45 cmark

% End Annotations
showpage
end
%%EOF
