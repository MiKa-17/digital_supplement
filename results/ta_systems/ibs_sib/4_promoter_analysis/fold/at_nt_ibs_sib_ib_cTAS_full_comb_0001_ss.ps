%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:18:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGUAAGGGA__GGA_UU_U_C_UC_C__C_CCCUC_UG_AU__GCUGUUAGUAAGCCGGGAAACUUAUCAGUAACAGCACAACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUU_U_A_A_GGCCCC_UUCCUCGGGAGGGGCUUU_\
) } def
/len { sequence length } bind def

/coor [
[-179.81237793 701.25439453]
[-194.80148315 701.88684082]
[-209.80387878 701.86022949]
[-224.79063416 701.17468262]
[-239.73281860 699.83148193]
[-254.60159302 697.83331299]
[-269.36822510 695.18395996]
[-284.00424194 691.88854980]
[-298.48138428 687.95343018]
[-312.77172852 683.38623047]
[-326.84765625 678.19567871]
[-340.68200684 672.39196777]
[-354.24807739 665.98608398]
[-367.51968384 658.99060059]
[-380.47119141 651.41888428]
[-393.07763672 643.28558350]
[-405.31466675 634.60638428]
[-417.15866089 625.39807129]
[-428.58673096 615.67846680]
[-439.57687378 605.46618652]
[-450.10781860 594.78106689]
[-460.15930176 583.64367676]
[-469.71185303 572.07556152]
[-478.74707031 560.09899902]
[-487.24749756 547.73718262]
[-495.19674683 535.01385498]
[-502.57943726 521.95367432]
[-509.38137817 508.58181763]
[-515.58941650 494.92410278]
[-521.19152832 481.00686646]
[-526.17687988 466.85699463]
[-530.53594971 452.50183105]
[-534.26031494 437.96902466]
[-537.34271240 423.28665161]
[-539.77716064 408.48306274]
[-541.55908203 393.58682251]
[-542.68499756 378.62670898]
[-543.15264893 363.63159180]
[-542.96124268 348.63037109]
[-542.11108398 333.65203857]
[-540.60388184 318.72552490]
[-538.44244385 303.87960815]
[-535.63098145 289.14297485]
[-532.17498779 274.54403687]
[-528.08105469 260.11099243]
[-523.35711670 245.87170410]
[-518.01232910 231.85365295]
[-512.05688477 218.08389282]
[-505.50241089 204.58901978]
[-498.36151123 191.39506531]
[-490.64797974 178.52751160]
[-482.37667847 166.01118469]
[-473.56356812 153.87025452]
[-464.22570801 142.12814331]
[-454.38110352 130.80752563]
[-444.04873657 119.93024445]
[-433.24856567 109.51731110]
[-422.00143433 99.58881378]
[-410.32907104 90.16392517]
[-398.25396729 81.26083374]
[-385.79946899 72.89672089]
[-372.98959351 65.08773804]
[-359.84909058 57.84894943]
[-346.40332031 51.19433975]
[-332.67822266 45.13674927]
[-318.70028687 39.68787003]
[-304.49649048 34.85821915]
[-290.09429932 30.65711975]
[-275.52145386 27.09268188]
[-260.80609131 24.17178535]
[-245.97666931 21.90007019]
[-231.06176758 20.28191757]
[-216.09017944 19.32045555]
[-201.09080505 19.01753616]
[-186.09260559 19.37374496]
[-171.12452698 20.38839722]
[-156.21545410 22.05953026]
[-141.39418030 24.38392067]
[-126.68931580 27.35708237]
[-112.12923431 30.97327423]
[-97.74204254 35.22551727]
[-83.55551147 40.10560226]
[-69.59702301 45.60411072]
[-55.89352798 51.71043015]
[-42.47147751 58.41276932]
[-29.35677338 65.69819641]
[-16.57473373 73.55264282]
[-4.15003157 81.96095276]
[7.89334965 90.90689850]
[19.53216362 100.37319946]
[30.74394417 110.34159088]
[41.50704956 120.79283905]
[51.80070496 131.70675659]
[63.15435410 121.90396881]
[74.50800323 112.10118103]
[85.86165619 102.29839325]
[90.63903046 89.15806580]
[104.33555603 86.34795380]
[102.90097046 70.89733887]
[110.85093689 57.57151413]
[125.12854004 51.49452972]
[140.24374390 55.00311661]
[150.38444519 66.74814606]
[151.65135193 82.21341705]
[143.55728149 95.45221710]
[129.21459961 101.37395477]
[114.13834381 97.70160675]
[109.36096954 110.84193420]
[95.66444397 113.65204620]
[84.31079102 123.45483398]
[72.95713806 133.25761414]
[61.60348892 143.06040955]
[70.89965820 154.83555603]
[79.66964722 167.00765991]
[87.89651489 179.55323792]
[95.56439209 192.44805908]
[102.65847015 205.66725159]
[109.16505432 219.18528748]
[115.07159424 232.97607422]
[120.36667633 247.01298523]
[125.04009247 261.26892090]
[129.08282471 275.71640015]
[132.48704529 290.32748413]
[135.24620056 305.07400513]
[137.35496521 319.92749023]
[138.80928040 334.85928345]
[139.60630798 349.84051514]
[139.74452209 364.84231567]
[139.22367859 379.83569336]
[138.04475403 394.79174805]
[136.21002197 409.68154907]
[133.72305298 424.47640991]
[130.58862305 439.14776611]
[126.81279755 453.66726685]
[122.40285492 468.00689697]
[117.36730194 482.13900757]
[111.71587372 496.03625488]
[105.45947266 509.67190552]
[98.61017609 523.01953125]
[91.18120575 536.05346680]
[83.18688965 548.74853516]
[74.64267731 561.08013916]
[65.56505585 573.02459717]
[55.97153473 584.55877686]
[45.88064957 595.66046143]
[35.31186676 606.30816650]
[24.28559494 616.48138428]
[12.82311249 626.16040039]
[0.94654691 635.32666016]
[-11.32117653 643.96240234]
[-23.95637894 652.05096436]
[-36.93466949 659.57672119]
[-50.23099899 666.52514648]
[-63.81969833 672.88281250]
[-77.67453766 678.63745117]
[-91.76877594 683.77801514]
[-106.07521057 688.29455566]
[-120.56621552 692.17828369]
[-135.21383667 695.42181396]
[-149.98977661 698.01879883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[93 112]
[94 111]
[95 110]
[96 109]
[98 107]
] def

init

% Start Annotations
93 112 0.0 1 colorpair
94 111 0.0 1 colorpair
95 110 0.0 1 colorpair
96 109 0.16 1 colorpair
98 107 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
96 cmark
107 cmark

% End Annotations
showpage
end
%%EOF
