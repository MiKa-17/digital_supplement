%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 11:16:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AAGGGUAAGGGAGGA_UUUCUCCCCCC__UCUG_AUUGGCUGUUAGUAAGCUGGGAAACUUAUCAGUAAC_AGCACAAUCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUUUAAGG_CCCCUUCCUC_GGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[122.08293915 199.93678284]
[128.06507874 186.15292358]
[135.94805908 173.36074829]
[145.57138062 161.82070923]
[135.53440857 150.67353821]
[125.49745941 139.52636719]
[115.46049500 128.37919617]
[103.61352539 133.64514160]
[90.06347656 133.93515015]
[76.90447235 128.75466919]
[66.34040833 118.48783112]
[60.31914139 104.40010834]
[60.18473434 88.49050903]
[55.10647202 103.47455597]
[40.47100067 106.24082947]
[29.32382965 116.27779388]
[18.17665672 126.31475067]
[15.90450764 142.19609070]
[1.99889648 150.19692993]
[-12.87298107 144.17971802]
[-17.30269432 128.76034546]
[-7.89214468 115.76722717]
[8.13969803 115.16757965]
[19.28687096 105.13061523]
[30.43404198 95.09365845]
[34.71498489 80.82751465]
[50.14777374 77.34333038]
[35.55323792 80.80735779]
[20.95869827 84.27137756]
[6.36415958 87.73539734]
[-6.62886190 95.23081970]
[-21.56560135 96.60697174]
[-35.70941544 91.61171722]
[-46.46892929 81.16026306]
[-51.87283325 67.16748810]
[-50.93104553 52.19708252]
[-43.81612015 38.99186707]
[-31.83161736 29.97123718]
[-17.17329216 26.78792191]
[-2.52677894 30.02515411]
[9.42466450 39.09007263]
[23.46996307 44.35595703]
[37.51526260 49.62184525]
[51.56056213 54.88773346]
[41.75925446 43.53280640]
[31.95794487 32.17787933]
[22.15663528 20.82295418]
[8.49626637 27.24922180]
[-6.39151525 29.75052643]
[-21.40193939 28.14125252]
[-35.42113113 22.54082108]
[-47.40877533 13.36482143]
[-56.47530746 1.29417205]
[-61.94792938 -12.77540398]
[-63.42053986 -27.79985046]
[-60.78385925 -42.66425323]
[-54.23354721 -56.26557541]
[-44.25568008 -67.59451294]
[-31.59068108 -75.81037140]
[-17.17837906 -80.30349731]
[-2.08826256 -80.74045563]
[12.55988312 -77.08882141]
[25.67906761 -69.61958313]
[36.29576111 -58.88699722]
[43.62213516 -45.68749237]
[47.11452103 -31.00056648]
[46.51375961 -15.91608238]
[41.86443710 -1.55340993]
[33.51156235 11.02164555]
[43.31287003 22.37657166]
[53.11417770 33.73149872]
[62.91548920 45.08642197]
[70.39534760 45.63571167]
[67.23773193 30.97182655]
[64.08011627 16.30794525]
[56.92985153 3.12182450]
[58.64849091 -11.77939320]
[68.61273956 -22.99160385]
[83.20895386 -26.44856644]
[97.14363861 -20.89657211]
[105.36320496 -8.34911728]
[104.88674927 6.64331388]
[95.88684082 18.64368439]
[90.62094879 32.68898392]
[85.35506439 46.73428345]
[92.83492279 47.28356934]
[104.18984985 37.48226166]
[115.54477692 27.68095207]
[126.89969635 17.87964249]
[138.25462341 8.07833290]
[149.60955811 -1.72297597]
[148.17697144 -17.17378044]
[156.12867737 -30.49857140]
[170.40707397 -36.57369614]
[185.52182007 -33.06314468]
[195.66099548 -21.31679344]
[196.92587280 -5.85135794]
[188.83009338 7.38638830]
[174.48663330 13.30626106]
[159.41085815 9.63194942]
[148.05593872 19.43325806]
[136.70100403 29.23456764]
[125.34608459 39.03587723]
[113.99115753 48.83718491]
[102.63623047 58.63849640]
[126.65660095 72.35594177]
[135.18327332 96.46932220]
[126.60767365 118.34223938]
[136.64462280 129.48941040]
[146.68159485 140.63658142]
[156.71855164 151.78375244]
[169.20127869 143.41941833]
[182.74736023 136.91677856]
[197.08100891 132.40820312]
[211.91041565 129.98550415]
[226.93367004 129.69798279]
[241.84492493 131.55151367]
[256.34057617 135.50834656]
[270.12554932 141.48793030]
[282.91918945 149.36853027]
[294.46099854 158.98971558]
[304.51605225 170.15557861]
[312.87960815 182.63883972]
[319.38140869 196.18531799]
[323.88909912 210.51925659]
[326.31088257 225.34880066]
[326.59747314 240.37207031]
[324.74301147 255.28320312]
[320.78527832 269.77862549]
[314.80484009 283.56323242]
[306.92346191 296.35635376]
[297.30157471 307.89758301]
[286.13507080 317.95196533]
[273.65130615 326.31472778]
[260.10443115 332.81570435]
[245.77020264 337.32250977]
[230.94050598 339.74337769]
[215.91722107 340.02902222]
[201.00621033 338.17364502]
[186.51103210 334.21502686]
[172.72680664 328.23373413]
[159.93415833 320.35156250]
[148.39350891 310.72894287]
[138.33984375 299.56182861]
[129.97782898 287.07754517]
[123.47769928 273.53024292]
[118.97179413 259.19577026]
[116.55184174 244.36590576]
[116.26712036 229.34260559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 111]
[5 110]
[6 109]
[7 108]
[13 27]
[15 25]
[16 24]
[17 23]
[44 72]
[45 71]
[46 70]
[47 69]
[86 105]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
] def

init

% Start Annotations
4 111 0.0 1 colorpair
5 110 0.0 1 colorpair
6 109 0.0 1 colorpair
7 108 0.16 0.6 colorpair
15 25 0.16 1 colorpair
16 24 0.16 0.6 colorpair
17 23 0.16 0.6 colorpair
44 72 0.32 1 colorpair
45 71 0.16 1 colorpair
46 70 0.0 1 colorpair
47 69 0.0 1 colorpair
86 105 0.0 1 colorpair
87 104 0.0 1 colorpair
88 103 0.16 1 colorpair
89 102 0.16 1 colorpair
90 101 0.0 1 colorpair
91 100 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 108 1 gmark
108 cmark
13 27 3 gmark
13 cmark
27 cmark
25 cmark
16 24 1 gmark
24 cmark
17 23 1 gmark
17 cmark
23 cmark
44 cmark
72 cmark
71 cmark
103 cmark
89 cmark

% End Annotations
showpage
end
%%EOF
