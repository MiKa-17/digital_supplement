%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 13:11:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGUAAGGGAGGG__UUUC__CCCC_C__CC__CCUG____UGGU_CUUAGUAAGCCGGGAAGCUUAUCACUAAG_AGCACCACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUU_UAAGG_CCC_CUUCCUC_GGGA_GGG_GCUUU_\
) } def
/len { sequence length } bind def

/coor [
[-176.11610413 712.68572998]
[-191.10722351 713.26745605]
[-206.10943604 713.19476318]
[-221.09420776 712.46771240]
[-236.03300476 711.08770752]
[-250.89738464 709.05743408]
[-265.65905762 706.38073730]
[-280.28991699 703.06262207]
[-294.76214600 699.10955811]
[-309.04812622 694.52893066]
[-323.12072754 689.32952881]
[-336.95315552 683.52124023]
[-350.51904297 677.11511230]
[-363.79260254 670.12335205]
[-376.74853516 662.55926514]
[-389.36221313 654.43719482]
[-401.60958862 645.77270508]
[-413.46737671 636.58227539]
[-424.91299438 626.88330078]
[-435.92465210 616.69433594]
[-446.48138428 606.03472900]
[-456.56311035 594.92480469]
[-466.15063477 583.38568115]
[-475.22570801 571.43933105]
[-483.77102661 559.10852051]
[-491.77038574 546.41668701]
[-499.20849609 533.38800049]
[-506.07122803 520.04730225]
[-512.34552002 506.41992188]
[-518.01940918 492.53186035]
[-523.08215332 478.40948486]
[-527.52398682 464.07974243]
[-531.33660889 449.56988525]
[-534.51263428 434.90753174]
[-537.04614258 420.12060547]
[-538.93218994 405.23724365]
[-540.16723633 390.28576660]
[-540.74896240 375.29464722]
[-540.67620850 360.29241943]
[-539.94915771 345.30767822]
[-538.56915283 330.36886597]
[-536.53887939 315.50448608]
[-533.86212158 300.74282837]
[-530.54400635 286.11196899]
[-526.59088135 271.63977051]
[-522.01025391 257.35375977]
[-516.81079102 243.28117371]
[-511.00250244 229.44877625]
[-504.59634399 215.88288879]
[-497.60455322 202.60935974]
[-490.04043579 189.65342712]
[-481.91839600 177.03977966]
[-473.25387573 164.79240417]
[-464.06338501 152.93464661]
[-454.36441040 141.48904419]
[-444.17541504 130.47740173]
[-433.51577759 119.92067719]
[-422.40582275 109.83896637]
[-410.86669922 100.25146484]
[-398.92034912 91.17642212]
[-386.58950806 82.63110352]
[-373.89767456 74.63178253]
[-360.86898804 67.19368744]
[-347.52825928 60.33097839]
[-333.90087891 54.05671310]
[-320.01278687 48.38283920]
[-305.89044189 43.32015610]
[-291.56066895 38.87829971]
[-277.05081177 35.06572723]
[-262.38845825 31.88969612]
[-247.60151672 29.35625076]
[-232.71813965 27.47021675]
[-217.76667786 26.23517990]
[-202.77555847 25.65349388]
[-187.77333069 25.72626495]
[-172.78857422 26.45335770]
[-157.84977722 27.83338356]
[-142.98541260 29.86371613]
[-128.22373962 32.54049301]
[-113.59288788 35.85861969]
[-99.12068939 39.81177521]
[-84.83470917 44.39243698]
[-70.76212311 49.59188843]
[-56.92972946 55.40022659]
[-43.36386108 61.80640030]
[-30.09033585 68.79821014]
[-17.13442230 76.36235046]
[-4.52078438 84.48442078]
[7.72656822 93.14895630]
[19.58432198 102.33946991]
[31.02990341 112.03846741]
[42.04152679 122.22748566]
[52.59823227 132.88711548]
[63.70639038 122.80700684]
[74.81455231 112.72688293]
[85.92271423 102.64676666]
[90.37419891 89.39248657]
[103.99716949 86.24507141]
[102.18154144 70.83458710]
[109.80007935 57.31653976]
[123.92328644 50.88889694]
[139.12051392 54.02322006]
[149.54811096 65.51429749]
[151.19645691 80.94357300]
[143.43171692 94.37818146]
[129.23962402 100.65222931]
[114.07728577 97.35323334]
[109.62580109 110.60751343]
[96.00283051 113.75492859]
[84.89466858 123.83504486]
[73.78650665 133.91516113]
[62.67834854 143.99528503]
[72.26591492 155.53436279]
[81.34102631 167.48068237]
[89.88640594 179.81146240]
[97.88578796 192.50326538]
[105.32395172 205.53190613]
[112.18673706 218.87260437]
[118.46106720 232.49995422]
[124.13501740 246.38800049]
[129.19776917 260.51034546]
[133.63970947 274.84005737]
[137.45234680 289.34991455]
[140.62846375 304.01226807]
[143.16198730 318.79919434]
[145.04809570 333.68255615]
[146.28320312 348.63400269]
[146.86497498 363.62512207]
[146.79228210 378.62734985]
[146.06526184 393.61212158]
[144.68531799 408.55090332]
[142.65505981 423.41528320]
[139.97836304 438.17697144]
[136.66030884 452.80783081]
[132.70722961 467.28005981]
[128.12664795 481.56607056]
[122.92726898 495.63867188]
[117.11900330 509.47109985]
[110.71289825 523.03698730]
[103.72116089 536.31054688]
[96.15708923 549.26654053]
[88.03508759 561.88018799]
[79.37061310 574.12762451]
[70.18016052 585.98541260]
[60.48122025 597.43103027]
[50.29226303 608.44268799]
[39.63268280 618.99945068]
[28.52276421 629.08123779]
[16.98366165 638.66876221]
[5.03733873 647.74383545]
[-7.29346418 656.28918457]
[-19.98527527 664.28857422]
[-33.01393509 671.72668457]
[-46.35464096 678.58947754]
[-59.98199844 684.86376953]
[-73.87006378 690.53771973]
[-87.99240875 695.60046387]
[-102.32215118 700.04235840]
[-116.83200073 703.85498047]
[-131.49433899 707.03106689]
[-146.28128052 709.56457520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[93 112]
[94 111]
[95 110]
[96 109]
[98 107]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
93 112 4 gmark
94 111 4 gmark
95 110 4 gmark
110 cmark
96 109 4 gmark
96 cmark
98 107 4 gmark
107 cmark

% End Annotations
showpage
end
%%EOF
