%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 10:43:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGUGAGGGAGGAUUUCUCCCCCC_UCUG_AUUGGCUGUUAGUAAGCUGGGAAACUUACCAGUAACAACACAAUCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUCUAUAAGG_CCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[154.31243896 210.53053284]
[146.99031067 190.68623352]
[153.01115417 170.27143860]
[142.99020386 159.10987854]
[132.96923828 147.94831848]
[122.94828033 136.78675842]
[112.92732239 125.62520599]
[97.01912689 130.88525391]
[79.55783081 126.35818481]
[66.45173645 112.15876770]
[62.87007523 91.86305237]
[52.84911728 103.02461243]
[42.82815933 114.18617249]
[32.80720139 125.34773254]
[22.78624344 136.50929260]
[16.70379639 152.33459473]
[-0.18683599 150.87072754]
[-3.45597363 134.23495483]
[11.62468338 126.48832703]
[21.64564133 115.32677460]
[31.66659927 104.16521454]
[41.68755722 93.00365448]
[51.70851517 81.84209442]
[37.56315994 86.83297729]
[23.41780663 91.82386780]
[9.27245235 96.81475067]
[-2.43570042 106.19127655]
[-16.76164436 110.63732147]
[-31.72124290 109.53710938]
[-45.24259186 103.04302979]
[-55.45298767 92.05449677]
[-60.93829727 78.09342957]
[-60.93880463 63.09343338]
[-55.45444107 49.13199615]
[-45.24478531 38.14277649]
[-31.72387314 31.64777946]
[-16.76435089 30.54655838]
[-2.43810630 34.99163437]
[9.27245235 44.36943436]
[23.41780663 49.36032104]
[37.56315994 54.35120773]
[51.70851517 59.34209442]
[41.68755722 48.18053436]
[31.66659927 37.01897430]
[21.64564133 25.85741615]
[0.92391616 20.58630562]
[-2.74870706 0.31673050]
[-13.46880817 -10.17514420]
[-24.18890953 -20.66701889]
[-34.90900803 -31.15889359]
[-50.18496704 -28.43406677]
[-64.13036346 -35.23889160]
[-71.38290405 -48.95677185]
[-69.15383911 -64.31291199]
[-58.30028915 -75.40254974]
[-42.99567032 -77.96150208]
[-29.12491608 -71.00579834]
[-22.02161598 -57.21004486]
[-24.41713524 -41.87899399]
[-13.69703388 -31.38711929]
[-2.97693300 -20.89524460]
[7.74316788 -10.40336990]
[16.61283112 -11.95724678]
[25.32169533 -9.17317867]
[31.83951378 -2.56548977]
[34.58480072 6.44524670]
[32.80720139 15.83645916]
[42.82815933 26.99801826]
[52.84911728 38.15957642]
[62.87007523 49.32113647]
[70.35922241 49.72439957]
[66.91614532 35.12490845]
[57.67048645 23.31314087]
[57.51717377 8.31392479]
[66.51946259 -3.68435884]
[80.96318054 -7.73145151]
[94.88913727 -2.15760231]
[102.55175018 10.73752785]
[100.78957367 25.63365936]
[90.32841492 36.38557053]
[85.33752441 50.53092575]
[92.82667542 50.93418884]
[103.98823547 40.91323090]
[115.14979553 30.89227295]
[126.31135559 20.87131500]
[137.47291565 10.85035801]
[148.63447571 0.82939982]
[159.79603577 -9.19155788]
[158.06230164 -24.61147499]
[165.75254822 -38.08885193]
[179.90971375 -44.44136810]
[195.09007263 -41.22634506]
[205.45646667 -29.68002701]
[207.02281189 -14.24221039]
[199.18681335 -0.84904963]
[184.96157837 5.34951210]
[169.81698608 1.97000098]
[158.65542603 11.99095917]
[147.49386597 22.01191711]
[136.33230591 32.03287506]
[125.17075348 42.05383301]
[114.00919342 52.07479095]
[102.84763336 62.09574890]
[129.88151550 85.17665863]
[124.08888245 115.60424805]
[134.10984802 126.76580811]
[144.13079834 137.92736816]
[154.15176392 149.08892822]
[164.17271423 160.25048828]
[173.08599854 156.90577698]
[182.55441284 156.17469788]
[191.82931519 158.10188293]
[200.18103027 162.52233887]
[206.95625305 169.07539368]
[211.62913513 177.23422241]
[213.84210205 186.34805298]
[213.43316650 195.69419861]
[210.44772339 204.53521729]
[205.13394165 212.17726135]
[213.63446045 224.53610229]
[222.13499451 236.89495850]
[230.63551331 249.25379944]
[244.11648560 250.17399597]
[254.44062805 258.58602905]
[257.96029663 271.22747803]
[253.60031128 283.39724731]
[261.83294678 295.93612671]
[270.06561279 308.47503662]
[278.29824829 321.01391602]
[286.53088379 333.55279541]
[301.41506958 340.43704224]
[302.62557983 356.79144287]
[288.91711426 365.79199219]
[274.39178467 358.17971802]
[273.99200439 341.78543091]
[265.75936890 329.24655151]
[257.52673340 316.70767212]
[249.29406738 304.16879272]
[241.06143188 291.62991333]
[224.49177551 288.94921875]
[214.76750183 274.85675049]
[218.27667236 257.75433350]
[209.77613831 245.39547729]
[201.27561951 233.03663635]
[192.77508545 220.67779541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[42 70]
[43 69]
[44 68]
[45 67]
[47 62]
[48 61]
[49 60]
[50 59]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[119 145]
[120 144]
[121 143]
[122 142]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% Start Annotations
3 109 0.16 1 colorpair
4 108 0.0 1 colorpair
5 107 0.0 1 colorpair
6 106 0.0 1 colorpair
7 105 0.16 0.6 colorpair
11 23 0.16 0.6 colorpair
12 22 0.32 1 colorpair
13 21 0.0 0.2 colorpair
14 20 0.16 1 colorpair
15 19 0.16 1 colorpair
42 70 0.16 1 colorpair
43 69 0.16 1 colorpair
44 68 0.0 1 colorpair
45 67 0.0 1 colorpair
47 62 0.0 1 colorpair
48 61 0.0 1 colorpair
49 60 0.0 1 colorpair
50 59 0.16 1 colorpair
82 103 0.0 0.6 colorpair
83 102 0.0 1 colorpair
84 101 0.0 1 colorpair
85 100 0.0 1 colorpair
86 99 0.16 1 colorpair
87 98 0.0 1 colorpair
88 97 0.0 1 colorpair
119 145 0.0 0.6 colorpair
120 144 0.0 0.2 colorpair
122 142 0.0 0.6 colorpair
126 139 0.0 0.2 colorpair
127 138 0.0 0.2 colorpair
128 137 0.0 0.6 colorpair
129 136 0.32 0.6 colorpair
130 135 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
7 105 1 gmark
105 cmark
11 23 1 gmark
23 cmark
12 cmark
22 cmark
13 21 2 gmark
14 cmark
19 cmark
42 cmark
70 cmark
69 cmark
59 cmark
82 103 1 gmark
86 cmark
119 145 1 gmark
120 144 2 gmark
121 143 3 gmark
121 cmark
143 cmark
122 142 1 gmark
126 139 2 gmark
127 138 2 gmark
128 137 1 gmark
129 136 1 gmark
129 cmark
136 cmark
130 135 1 gmark
130 cmark
135 cmark

% End Annotations
showpage
end
%%EOF
