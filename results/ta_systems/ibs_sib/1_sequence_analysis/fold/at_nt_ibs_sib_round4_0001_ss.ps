%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 12:02:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGU_AGGGGGGGG_UUUC_CCC__C_CC__CCUG_GUAG__UCUUAGUAAGCUGGGAAGCUUAUCACUAAG_AG___CAC___CAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUUUAAGG_CCCCUUCCUC_GGGA_GGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[-8.15198326 362.37677002]
[-22.33898735 356.06951904]
[-36.15982819 348.99584961]
[-49.57313919 341.17691040]
[-62.53878021 332.63613892]
[-71.45179749 344.70089722]
[-80.36480713 356.76562500]
[-78.21745300 372.19375610]
[-87.42839050 384.30215454]
[-102.14996338 386.25424194]
[-111.06298065 398.31900024]
[-119.97599792 410.38372803]
[-116.13806915 425.54302979]
[-122.98875427 439.60012817]
[-137.29338074 445.91769409]
[-152.29772949 441.51278687]
[-160.91722107 428.46524048]
[-159.08198547 412.93572998]
[-147.65855408 402.25680542]
[-132.04074097 401.47073364]
[-123.12773132 389.40597534]
[-114.21471405 377.34121704]
[-116.67474365 362.69595337]
[-107.80754089 350.33361816]
[-92.42955780 347.85263062]
[-83.51654053 335.78787231]
[-74.60353088 323.72311401]
[-85.84963226 314.47222900]
[-96.60640717 304.65664673]
[-106.84552765 294.30221558]
[-116.54003906 283.43621826]
[-125.66439819 272.08718872]
[-134.19461060 260.28509521]
[-142.10818481 248.06098938]
[-149.38430786 235.44703674]
[-156.00379944 222.47644043]
[-161.94926453 209.18339539]
[-167.20501709 195.60285950]
[-171.75723267 181.77061462]
[-175.59393311 167.72305298]
[-178.70500183 153.49719238]
[-181.08226013 139.13047791]
[-182.71943665 124.66074371]
[-183.61221313 110.12606812]
[-183.75827026 95.56472778]
[-183.15719604 81.01506805]
[-181.81059265 66.51540375]
[-179.72198486 52.10389328]
[-176.89689636 37.81849289]
[-173.34274292 23.69681168]
[-169.06887817 9.77603626]
[-164.08657837 -3.90718532]
[-158.40896606 -17.31682396]
[-152.05094910 -30.41757202]
[-145.02931213 -43.17493820]
[-137.36251831 -55.55533218]
[-129.07077026 -67.52615356]
[-120.17587280 -79.05589294]
[-110.70127106 -90.11418152]
[-100.67190552 -100.67190552]
[-90.11418152 -110.70127106]
[-79.05589294 -120.17587280]
[-67.52615356 -129.07077026]
[-55.55533218 -137.36251831]
[-43.17493820 -145.02931213]
[-30.41757202 -152.05094910]
[-17.31682396 -158.40896606]
[-3.90718532 -164.08657837]
[9.77603626 -169.06887817]
[23.69681168 -173.34274292]
[37.81849289 -176.89689636]
[52.10389328 -179.72198486]
[66.51540375 -181.81059265]
[81.01506805 -183.15719604]
[95.56472778 -183.75827026]
[110.12606812 -183.61221313]
[124.66074371 -182.71943665]
[139.13047791 -181.08226013]
[153.49719238 -178.70500183]
[167.72305298 -175.59393311]
[181.77061462 -171.75723267]
[195.60285950 -167.20501709]
[209.18339539 -161.94926453]
[222.47644043 -156.00379944]
[235.44703674 -149.38430786]
[248.06098938 -142.10818481]
[260.28509521 -134.19461060]
[272.08718872 -125.66439819]
[283.43621826 -116.54003906]
[294.30221558 -106.84552765]
[304.65664673 -96.60640717]
[314.47222900 -85.84963226]
[323.72311401 -74.60353088]
[335.78787231 -83.51654053]
[347.85263062 -92.42955780]
[359.91735840 -101.34257507]
[366.41955566 -115.76589203]
[381.25384521 -117.10520935]
[380.99575806 -132.62013245]
[389.93395996 -145.30430603]
[404.63153076 -150.28039551]
[419.43692017 -145.63497925]
[428.65719604 -133.15434265]
[428.74694824 -117.63752747]
[419.67166138 -105.05107117]
[404.92098999 -100.23471832]
[390.16683960 -105.04045868]
[384.52758789 -91.25466156]
[368.83038330 -89.27782440]
[356.76562500 -80.36480713]
[344.70089722 -71.45179749]
[332.63613892 -62.53878021]
[341.17691040 -49.57313919]
[348.99584961 -36.15982819]
[356.06951904 -22.33898735]
[362.37677002 -8.15198326]
[367.89874268 6.35872030]
[372.61889648 21.14969444]
[376.52307129 36.17666626]
[379.59960938 51.39466476]
[381.83932495 66.75814056]
[383.23547363 82.22110748]
[383.78390503 97.73728943]
[383.48297119 113.26023865]
[382.33355713 128.74349976]
[380.33911133 144.14073181]
[377.50561523 159.40585327]
[373.84155273 174.49317932]
[369.35784912 189.35752869]
[364.06799316 203.95443726]
[357.98776245 218.24021912]
[351.13534546 232.17210388]
[343.53131104 245.70838928]
[335.19836426 258.80856323]
[326.16146851 271.43341064]
[316.44766235 283.54519653]
[306.08602905 295.10760498]
[295.10760498 306.08602905]
[283.54519653 316.44766235]
[271.43341064 326.16146851]
[258.80856323 335.19836426]
[245.70838928 343.53131104]
[232.17210388 351.13534546]
[218.24021912 357.98776245]
[203.95443726 364.06799316]
[189.35752869 369.35784912]
[174.49317932 373.84155273]
[159.40585327 377.50561523]
[144.14073181 380.33911133]
[128.74349976 382.33355713]
[113.26023865 383.48297119]
[97.73728943 383.78390503]
[82.22110748 383.23547363]
[66.75814056 381.83932495]
[51.39466476 379.59960938]
[36.17666626 376.52307129]
[21.14969444 372.61889648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 25]
[10 22]
[11 21]
[12 20]
[93 112]
[94 111]
[95 110]
[96 109]
[98 107]
] def

init

% Start Annotations
93 112 0.0 0.2 colorpair
94 111 0.0 0.2 colorpair
95 110 0.16 0.2 colorpair
96 109 0.16 0.2 colorpair
98 107 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 27 5 gmark
27 cmark
6 26 6 gmark
26 cmark
7 25 5 gmark
7 cmark
25 cmark
10 22 31 gmark
10 cmark
11 21 35 gmark
11 cmark
12 20 9 gmark
12 cmark
20 cmark
93 112 2 gmark
94 111 2 gmark
95 110 2 gmark
110 cmark
96 109 2 gmark
96 cmark
98 107 2 gmark
107 cmark

% End Annotations
showpage
end
%%EOF
