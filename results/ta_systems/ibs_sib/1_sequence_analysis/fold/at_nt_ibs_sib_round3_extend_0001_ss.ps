%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 11:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGGGUAAGGGAGGA_UUUCUCCCCCC__UCUG_AUUGGCUGUUAGUAAGCUGGGAAACUUAUCAGUAAC_AGCACAAUCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUUUAAGG_CCCCUUCC_UCGG_GAGGGGCUUU__\
) } def
/len { sequence length } bind def

/coor [
[145.40161133 208.22100830]
[150.83850098 189.26579285]
[161.15583801 172.44841003]
[150.60382080 161.78750610]
[140.05180359 151.12660217]
[129.49978638 140.46569824]
[118.94777679 129.80477905]
[107.03125000 136.40019226]
[92.87110901 138.16833496]
[78.43872070 134.38237000]
[65.91967773 125.12218475]
[57.38497543 111.32562256]
[54.45689774 94.70697021]
[49.62544632 109.77241516]
[35.03738785 112.77871704]
[24.05658722 122.99742126]
[13.07578468 133.21612549]
[11.06480598 149.13264465]
[-2.70750761 157.36082458]
[-17.67621613 151.58871460]
[-22.35860825 136.24417114]
[-13.16275311 123.09823608]
[2.85707712 122.23532867]
[13.83787918 112.01661682]
[24.81868172 101.79791260]
[28.86471176 87.46337891]
[44.23818970 83.72616577]
[44.46915436 76.22972107]
[29.93348312 79.93300629]
[15.39781380 83.63629150]
[0.86214352 87.33956909]
[-12.23304081 94.65504456]
[-27.23052216 94.38021851]
[-40.04889679 86.58988953]
[-47.19978333 73.40410614]
[-46.73714066 58.41124344]
[-38.78687668 45.69144440]
[-25.51256371 38.70627213]
[-10.52667141 39.35665894]
[2.09070969 47.46357727]
[16.37083244 52.05466461]
[30.65095520 56.64575195]
[44.93107986 61.23683929]
[45.16204071 53.74039459]
[34.83113861 42.86508179]
[24.50023651 31.98976898]
[14.16933441 21.11445427]
[0.83047664 28.18392754]
[-13.92130566 31.39133835]
[-28.99133301 30.49867439]
[-43.26131058 25.57217979]
[-55.67230606 16.97743034]
[-65.30335236 5.35221624]
[-71.43974304 -8.44079685]
[-73.62613678 -23.37807465]
[-71.70027924 -38.35117340]
[-65.80508423 -52.24898529]
[-56.37800980 -64.04020691]
[-44.11861038 -72.84984589]
[-29.93661880 -78.02416992]
[-14.88442802 -79.17921448]
[-0.07901157 -76.22925568]
[13.38097000 -69.39321899]
[24.49669647 -59.17836380]
[32.44330597 -46.34271240]
[36.63111115 -31.83875275]
[36.74934387 -16.74277306]
[32.78923416 -2.17499590]
[25.04464722 10.78355122]
[35.37554932 21.65886497]
[45.70645523 32.53417969]
[56.03735733 43.40949249]
[63.53696060 43.48649216]
[59.68464279 28.98960686]
[55.83232880 14.49272251]
[47.67222595 1.90651119]
[48.28525543 -13.08095646]
[57.44600677 -24.95869446]
[71.78601074 -29.35918236]
[86.03235626 -24.66433334]
[94.94657898 -12.60047340]
[95.25085449 2.39644003]
[86.83447266 14.81102180]
[82.68532562 29.22575569]
[78.53617096 43.64048767]
[86.03577423 43.71748734]
[96.58779144 33.05657959]
[107.13980865 22.39566994]
[117.69181824 11.73476028]
[128.24383545 1.07385170]
[138.79585266 -9.58705711]
[136.15699768 -24.87810326]
[143.04016113 -38.78499603]
[156.79862976 -45.96025085]
[172.14198303 -43.64483261]
[183.17039490 -32.72907257]
[185.64320374 -17.41029930]
[178.60958862 -3.57889485]
[164.77409363 3.44668365]
[149.45675659 0.96495795]
[138.90473938 11.62586689]
[128.35272217 22.28677559]
[117.80071259 32.94768524]
[107.24869537 43.60859299]
[96.69668579 54.26950073]
[126.21578217 66.75357056]
[138.31199646 93.68852997]
[129.60868835 119.25276947]
[140.16070557 129.91368103]
[150.71270752 140.57458496]
[161.26472473 151.23548889]
[171.81674194 161.89640808]
[180.88110352 155.68858337]
[190.77143860 150.91152954]
[201.26368713 147.67254639]
[212.12030029 146.04409790]
[223.09556580 146.06221008]
[233.94126892 147.72563171]
[244.41221619 150.99591064]
[254.27183533 155.79830933]
[263.29745483 162.02345276]
[271.28543091 169.52984619]
[278.05563354 178.14710999]
[283.45562744 187.67984009]
[287.36392212 197.91198730]
[289.69296265 208.61184692]
[290.39086914 219.53723145]
[289.44265747 230.44096375]
[286.87060547 241.07649231]
[282.73370361 251.20344543]
[277.12628174 260.59310913]
[270.17590332 269.03353882]
[262.04037476 276.33432007]
[269.93685913 289.08755493]
[277.16079712 294.78057861]
[277.86141968 302.18472290]
[285.49438477 315.09744263]
[300.61221313 320.46691895]
[305.70352173 335.68066406]
[296.86276245 349.06796265]
[280.87176514 350.35925293]
[269.99746704 338.56393433]
[272.58169556 322.73040771]
[264.94873047 309.81768799]
[257.18359375 296.98403931]
[249.28710938 284.23080444]
[230.63233948 290.36077881]
[211.00704956 291.27471924]
[191.84298706 286.90029907]
[174.53973389 277.55126953]
[160.36248779 263.90493774]
[150.34959412 246.95294189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[13 27]
[15 25]
[16 24]
[17 23]
[44 72]
[45 71]
[46 70]
[47 69]
[86 105]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[133 146]
[134 145]
[136 144]
[137 143]
] def

init

% Start Annotations
3 112 0.16 0.6 colorpair
4 111 0.0 1 colorpair
5 110 0.0 1 colorpair
6 109 0.0 1 colorpair
7 108 0.16 0.6 colorpair
13 27 0.32 0.6 colorpair
16 24 0.16 0.6 colorpair
17 23 0.16 0.6 colorpair
44 72 0.32 1 colorpair
45 71 0.16 1 colorpair
46 70 0.0 1 colorpair
47 69 0.0 1 colorpair
86 105 0.0 1 colorpair
87 104 0.0 1 colorpair
88 103 0.16 1 colorpair
89 102 0.16 1 colorpair
90 101 0.0 1 colorpair
91 100 0.0 1 colorpair
136 144 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 112 1 gmark
3 cmark
7 108 1 gmark
108 cmark
13 27 1 gmark
13 cmark
27 cmark
15 25 3 gmark
25 cmark
16 24 1 gmark
24 cmark
17 23 1 gmark
17 cmark
23 cmark
44 cmark
72 cmark
71 cmark
103 cmark
89 cmark
133 146 7 gmark
133 cmark
146 cmark
134 145 7 gmark
134 cmark
136 144 2 gmark
144 cmark
137 143 6 gmark
137 cmark
143 cmark

% End Annotations
showpage
end
%%EOF
