%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:15:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGUGAGGGAGGAUUUCUCCCCCCUC__UGAUUGGCUGUUAAUAAGCUGCGAAACUUACGAGUAACAACACAACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUCUAUAAGGCCC_CUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[156.89735413 213.85546875]
[149.57522583 194.01118469]
[155.59606934 173.59638977]
[145.57511902 162.43482971]
[135.55415344 151.27326965]
[125.53320312 140.11170959]
[115.51224518 128.95014954]
[105.49128723 117.78858948]
[98.24858093 119.04470825]
[90.88455963 117.38890076]
[79.72299957 127.40985870]
[68.56143951 137.43081665]
[57.39988327 147.45176697]
[52.30013275 162.42852783]
[37.66070938 165.17379761]
[26.49914932 175.19476318]
[15.33759022 185.21571350]
[10.76473999 200.96440125]
[-5.22286034 204.61524963]
[-16.17853737 192.41258240]
[-10.83203125 176.90945435]
[5.31663227 174.05415344]
[16.47819138 164.03320312]
[27.63974953 154.01223755]
[31.94115257 139.75225830]
[47.37892532 136.29020691]
[58.54048538 126.26925659]
[69.70204163 116.24829865]
[80.86360168 106.22734070]
[81.50893402 91.24122620]
[75.19216919 88.92253876]
[71.58621216 84.41228485]
[71.05675507 79.59936523]
[61.27827072 68.22477722]
[51.49978638 56.85018921]
[41.72130203 45.47560120]
[25.54185677 48.71319580]
[10.01936054 43.40028381]
[-0.66028655 31.06918144]
[-3.66736341 15.13111305]
[1.72235942 -0.06712919]
[-8.29859829 -11.22868824]
[-18.31955719 -22.39024734]
[-28.34051514 -33.55180740]
[-38.36147308 -44.71336746]
[-59.08319855 -49.98447800]
[-62.75582123 -70.25405121]
[-73.47592163 -80.74592590]
[-84.19602203 -91.23780060]
[-94.91612244 -101.72967529]
[-110.19208527 -99.00484467]
[-124.13747406 -105.80966949]
[-131.39001465 -119.52755737]
[-129.16094971 -134.88369751]
[-118.30740356 -145.97332764]
[-103.00278473 -148.53228760]
[-89.13202667 -141.57658386]
[-82.02873230 -127.78083038]
[-84.42424774 -112.44977570]
[-73.70414734 -101.95790100]
[-62.98404694 -91.46602631]
[-52.26394653 -80.97415161]
[-43.39428329 -82.52803040]
[-34.68542099 -79.74395752]
[-28.16760063 -73.13626862]
[-25.42231560 -64.12553406]
[-27.19991302 -54.73432541]
[-17.17895508 -43.57276535]
[-7.15799761 -32.41120529]
[2.86296058 -21.24964714]
[12.88391876 -10.08808708]
[26.07076073 -13.78674793]
[39.62710190 -11.41626930]
[50.88429260 -3.38515925]
[57.60121918 8.77807522]
[58.41037369 22.71556854]
[53.09588623 35.69711685]
[62.87437057 47.07170105]
[72.65285492 58.44628906]
[82.43134308 69.82087708]
[92.45230103 80.98243713]
[107.43841553 81.62776947]
[118.59996796 71.60681152]
[129.76153564 61.58585358]
[140.92309570 51.56489563]
[152.08465576 41.54393768]
[163.24620056 31.52297974]
[174.40776062 21.50202179]
[185.56932068 11.48106384]
[186.16871643 -4.31185484]
[197.81646729 -14.99387264]
[213.60217285 -14.22753906]
[224.16044617 -2.46750569]
[223.22724915 13.30920887]
[211.35624695 23.74255753]
[195.59028625 22.64262199]
[184.42872620 32.66358185]
[173.26716614 42.68453979]
[162.10560608 52.70549774]
[150.94404602 62.72645569]
[139.78248596 72.74741364]
[128.62092590 82.76837158]
[117.45937347 92.78932953]
[116.65283966 107.76763153]
[126.67379761 118.92919159]
[136.69476318 130.09074402]
[146.71571350 141.25230408]
[156.73667908 152.41386414]
[166.75762939 163.57542419]
[175.67091370 160.23071289]
[185.13932800 159.49963379]
[194.41423035 161.42683411]
[202.76594543 165.84727478]
[209.54116821 172.40034485]
[214.21406555 180.55915833]
[216.42701721 189.67300415]
[216.01808167 199.01913452]
[213.03263855 207.86016846]
[207.71885681 215.50219727]
[216.21937561 227.86105347]
[224.71990967 240.21989441]
[233.22042847 252.57873535]
[241.72096252 264.93759155]
[250.22148132 277.29641724]
[258.72201538 289.65527344]
[266.21963501 295.00170898]
[267.26910400 302.37274170]
[275.50177002 314.91162109]
[283.73440552 327.45050049]
[291.96704102 339.98937988]
[306.85122681 346.87362671]
[308.06173706 363.22805786]
[294.35327148 372.22860718]
[279.82794189 364.61630249]
[279.42816162 348.22204590]
[271.19552612 335.68313599]
[262.96289062 323.14425659]
[254.73023987 310.60537720]
[246.36315918 298.15579224]
[237.86264038 285.79696655]
[229.36210632 273.43811035]
[220.86158752 261.07925415]
[212.36105347 248.72042847]
[203.86053467 236.36157227]
[195.36000061 224.00273132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[10 29]
[11 28]
[12 27]
[13 26]
[15 24]
[16 23]
[17 22]
[30 81]
[33 80]
[34 79]
[35 78]
[36 77]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[47 62]
[48 61]
[49 60]
[50 59]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[119 145]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[125 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% Start Annotations
3 109 0.0 0.2 colorpair
4 108 0.0 1 colorpair
5 107 0.0 1 colorpair
6 106 0.0 1 colorpair
7 105 0.0 1 colorpair
8 104 0.0 1 colorpair
10 29 0.0 0.2 colorpair
11 28 0.0 1 colorpair
12 27 0.16 0.6 colorpair
13 26 0.0 1 colorpair
15 24 0.0 1 colorpair
16 23 0.0 0.2 colorpair
17 22 0.16 1 colorpair
30 81 0.0 0.6 colorpair
33 80 0.0 1 colorpair
34 79 0.0 1 colorpair
36 77 0.0 1 colorpair
41 71 0.0 1 colorpair
42 70 0.16 1 colorpair
43 69 0.0 1 colorpair
44 68 0.0 1 colorpair
45 67 0.0 1 colorpair
47 62 0.0 1 colorpair
48 61 0.0 0.6 colorpair
49 60 0.0 1 colorpair
50 59 0.0 1 colorpair
82 103 0.0 0.6 colorpair
83 102 0.0 1 colorpair
84 101 0.0 1 colorpair
85 100 0.0 1 colorpair
86 99 0.0 1 colorpair
87 98 0.0 1 colorpair
88 97 0.0 1 colorpair
89 96 0.0 1 colorpair
119 145 0.0 1 colorpair
120 144 0.0 1 colorpair
121 143 0.16 1 colorpair
122 142 0.0 1 colorpair
123 141 0.0 1 colorpair
124 140 0.0 1 colorpair
125 139 0.0 0.6 colorpair
127 138 0.0 1 colorpair
128 137 0.0 1 colorpair
129 136 0.0 1 colorpair
130 135 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 109 2 gmark
10 29 2 gmark
12 27 1 gmark
27 cmark
16 23 2 gmark
17 cmark
22 cmark
30 81 1 gmark
35 78 3 gmark
35 cmark
78 cmark
42 cmark
70 cmark
48 61 1 gmark
82 103 1 gmark
121 cmark
125 139 1 gmark

% End Annotations
showpage
end
%%EOF
