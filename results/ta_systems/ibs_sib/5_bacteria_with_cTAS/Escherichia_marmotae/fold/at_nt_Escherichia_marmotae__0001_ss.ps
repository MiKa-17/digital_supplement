%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:06:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGUAAGGGAGGAUUUCUCUCCCUCUGAUGAGUUGUUAGUAAGUCGGGAAACUUAACAGUAACAACACAACCAGUAUGAUGACGAACUUCAUCAUAACCCUUUCCUUCUAUAAGGCCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[156.67906189 213.55931091]
[149.41787720 193.70167542]
[155.47926331 173.30801392]
[145.47521973 162.13128662]
[135.47119141 150.95454407]
[125.46715546 139.77781677]
[115.46312714 128.60108948]
[105.45909119 117.42435455]
[98.35954285 119.07266235]
[90.83721161 117.80757904]
[79.66048431 127.81161499]
[68.48374939 137.81564331]
[57.30701828 147.81968689]
[46.13028717 157.82371521]
[34.95355606 167.82774353]
[23.77682495 177.83178711]
[21.45783806 193.70634460]
[7.52868605 201.66613770]
[-7.32537699 195.60508728]
[-11.70958519 180.17271423]
[-2.26074982 167.20741272]
[13.77279186 166.65504456]
[24.94952393 156.65101624]
[36.12625504 146.64698792]
[47.30298615 136.64294434]
[58.47971725 126.63891602]
[69.65644836 116.63488770]
[80.83318329 106.63085175]
[81.33087921 91.63910675]
[70.84225464 80.91583252]
[60.35362625 70.19255066]
[42.53751373 65.68482208]
[38.76942825 48.57970047]
[28.04614639 38.09107590]
[12.77036285 33.97270203]
[9.08206558 19.54198074]
[-1.64121413 9.05335426]
[-12.36449432 -1.43527114]
[-23.08777428 -11.92389679]
[-33.81105423 -22.41252136]
[-44.53433609 -32.90114594]
[-55.25761414 -43.38977432]
[-70.53340149 -47.50814819]
[-74.22169495 -61.93886948]
[-85.28707886 -72.06592560]
[-96.68238831 -81.82025909]
[-108.07769012 -91.57458496]
[-119.47299957 -101.32891846]
[-135.20855713 -99.85662842]
[-147.32286072 -110.00646973]
[-148.62870789 -125.75672150]
[-138.35134888 -137.76303101]
[-122.58818054 -138.90228271]
[-110.69119263 -128.49856567]
[-109.71866608 -112.72422791]
[-98.32336426 -102.96989441]
[-86.92805481 -93.21556091]
[-75.53274536 -83.46122742]
[-71.93240356 -83.40079498]
[-68.18977356 -81.54320526]
[-65.17269897 -77.84488678]
[-63.73307037 -72.66214752]
[-49.22428513 -69.29399109]
[-44.76898956 -54.11305237]
[-34.04570770 -43.62442780]
[-23.32242775 -33.13580322]
[-12.59914875 -22.64717674]
[-1.87586856 -12.15855122]
[8.84741116 -1.66992569]
[19.57069206 8.81869984]
[34.07947540 12.18685627]
[38.53477097 27.36779594]
[49.25805283 37.85642242]
[61.40252686 38.05087662]
[70.42571259 46.77051163]
[71.07690430 59.70392609]
[81.56552887 70.42720795]
[92.05415344 81.15048218]
[107.05048370 81.48231506]
[118.00317383 71.23348236]
[128.95585632 60.98464203]
[139.90853882 50.73580551]
[150.86123657 40.48696518]
[161.81391907 30.23812866]
[172.76660156 19.98929214]
[183.71928406 9.74045467]
[183.99310303 -6.06146193]
[195.41825867 -16.98123932]
[211.21640015 -16.54036522]
[222.01477051 -5.00040388]
[221.40689087 10.79219055]
[209.75340271 21.46795273]
[193.96812439 20.69314003]
[183.01544189 30.94197845]
[172.06275940 41.19081497]
[161.11006165 51.43965149]
[150.15737915 61.68849182]
[139.20469666 71.93732452]
[128.25201416 82.18616486]
[117.29932404 92.43500519]
[116.63582611 107.42031860]
[126.63985443 118.59705353]
[136.64389038 129.77378845]
[146.64791870 140.95051575]
[156.65194702 152.12724304]
[166.65599060 163.30397034]
[175.59419250 159.96525574]
[185.08514404 159.25064087]
[194.37632751 161.20361328]
[202.73474121 165.65664673]
[209.50471497 172.24554443]
[214.15936279 180.43914795]
[216.34152222 189.58216858]
[215.89122009 198.94757080]
[212.85722351 207.79440308]
[207.49221802 215.42639160]
[215.92895508 227.82887268]
[224.36570740 240.23135376]
[232.80244446 252.63381958]
[241.23918152 265.03628540]
[249.67591858 277.43878174]
[258.11267090 289.84124756]
[266.54940796 302.24374390]
[274.98614502 314.64620972]
[283.42288208 327.04867554]
[291.85961914 339.45117188]
[306.85446167 346.09091187]
[308.33242798 362.42330933]
[294.77310181 371.64700317]
[280.12515259 364.27343750]
[279.45715332 347.88790894]
[271.02038574 335.48541260]
[262.58364868 323.08294678]
[254.14692688 310.68048096]
[245.71017456 298.27798462]
[237.27343750 285.87551880]
[228.83670044 273.47305298]
[220.39996338 261.07055664]
[211.96322632 248.66809082]
[203.52648926 236.26560974]
[195.08975220 223.86312866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[8 101]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[29 78]
[30 77]
[31 76]
[33 73]
[34 72]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[44 62]
[45 58]
[46 57]
[47 56]
[48 55]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
3 106 0.0 1 colorpair
4 105 0.0 1 colorpair
5 104 0.0 1 colorpair
6 103 0.0 1 colorpair
7 102 0.0 1 colorpair
8 101 0.0 1 colorpair
10 28 0.0 1 colorpair
11 27 0.0 1 colorpair
12 26 0.0 1 colorpair
13 25 0.0 1 colorpair
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
29 78 0.0 1 colorpair
30 77 0.0 1 colorpair
31 76 0.0 1 colorpair
33 73 0.0 1 colorpair
34 72 0.0 1 colorpair
36 70 0.0 1 colorpair
37 69 0.0 1 colorpair
38 68 0.0 1 colorpair
39 67 0.0 1 colorpair
40 66 0.0 1 colorpair
41 65 0.0 1 colorpair
42 64 0.0 1 colorpair
44 62 0.0 1 colorpair
45 58 0.0 1 colorpair
46 57 0.0 1 colorpair
47 56 0.0 1 colorpair
48 55 0.0 1 colorpair
79 100 0.0 1 colorpair
80 99 0.0 1 colorpair
81 98 0.0 1 colorpair
82 97 0.0 1 colorpair
83 96 0.0 1 colorpair
84 95 0.0 1 colorpair
85 94 0.0 1 colorpair
86 93 0.0 1 colorpair
116 141 0.0 1 colorpair
117 140 0.0 1 colorpair
118 139 0.0 1 colorpair
119 138 0.0 1 colorpair
120 137 0.0 1 colorpair
121 136 0.0 1 colorpair
122 135 0.0 1 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.0 1 colorpair
126 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
