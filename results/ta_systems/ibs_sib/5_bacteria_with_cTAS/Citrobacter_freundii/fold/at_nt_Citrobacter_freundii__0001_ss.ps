%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:25:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUUAGGGAGGGUUUCCCCUCCCCCUGGUGUCUUAGUAAGCCGGUAAGCUAAUGACUAAGAGUAUCACCAGUAUGAUGACGUACUUCAUCAUAACCCUUUCCUUAUUUUGGCCCCUUCCUCGGGAGGG_GCUUU\
) } def
/len { sequence length } bind def

/coor [
[172.73727417 135.61691284]
[161.71368408 125.44437408]
[150.69009399 115.27183533]
[139.66650391 105.09929657]
[128.64291382 94.92676544]
[123.08247375 114.08863068]
[107.37461853 123.88338470]
[90.56213379 120.91922760]
[80.26387787 131.82545471]
[69.96562195 142.73168945]
[59.66736221 153.63792419]
[55.81850052 168.98382568]
[41.45493317 172.92555237]
[31.15667725 183.83178711]
[27.89650726 199.90361023]
[12.26393223 204.85887146]
[0.34040460 193.60002136]
[4.39182758 177.70921326]
[20.25044441 173.53352356]
[30.54870224 162.62730408]
[33.66096115 148.06147766]
[48.76113129 143.33966064]
[59.05938721 132.43344116]
[69.35764313 121.52719879]
[79.65589905 110.62097168]
[78.24848938 85.72167969]
[102.09580231 70.98686218]
[90.84185791 61.06976700]
[79.58792114 51.15267181]
[68.33397675 41.23557281]
[57.08003998 31.31847572]
[45.82609940 21.40137672]
[34.12932587 12.01066303]
[22.01432037 3.16607928]
[9.89931583 -5.67850399]
[-2.21568871 -14.52308750]
[-14.33069420 -23.36767006]
[-26.44569969 -32.21225357]
[-38.56070328 -41.05683899]
[-59.91535187 -41.89674759]
[-67.75840759 -60.93542099]
[-80.45272827 -68.92630005]
[-93.14705658 -76.91718292]
[-108.50046539 -73.16905975]
[-121.96371460 -81.44652557]
[-125.54929352 -96.83870697]
[-117.12995148 -110.21369171]
[-101.70072174 -113.63633728]
[-88.41550446 -105.07605743]
[-85.15617371 -89.61150360]
[-72.46185303 -81.62062073]
[-59.76752853 -73.62974548]
[-51.40059280 -77.03044891]
[-42.27431107 -76.13513184]
[-34.49632263 -71.02122498]
[-29.92278290 -62.75509644]
[-29.71611977 -53.17184067]
[-17.60111618 -44.32725906]
[-5.48611069 -35.48267746]
[6.62889433 -26.63809204]
[18.74390030 -17.79350853]
[30.85890388 -8.94892597]
[42.97391129 -0.10434237]
[45.83867264 -0.46326596]
[49.02310562 0.34204349]
[52.06494904 2.44124603]
[54.46319580 5.78713894]
[55.74319458 10.14743710]
[66.99713898 20.06453514]
[78.25107574 29.98163223]
[89.50502014 39.89873123]
[100.75895691 49.81582642]
[112.01290131 59.73292542]
[126.98825836 58.87347031]
[137.03373718 47.73397446]
[147.07920837 36.59447479]
[157.12467957 25.45497894]
[167.17016602 14.31548214]
[177.21563721 3.17598534]
[187.26112366 -7.96351194]
[197.30659485 -19.10300827]
[196.24133301 -34.87135696]
[206.70075989 -46.71939087]
[222.47947693 -47.61788177]
[234.21627808 -37.03377533]
[234.94789124 -21.24642944]
[224.24029541 -9.62219906]
[208.44609070 -9.05753231]
[198.40061951 2.08196497]
[188.35513306 13.22146225]
[178.30966187 24.36096001]
[168.26419067 35.50045776]
[158.21870422 46.63995361]
[148.17323303 57.77944946]
[138.12774658 68.91894531]
[138.81544495 83.90317535]
[149.83903503 94.07571411]
[160.86262512 104.24824524]
[171.88621521 114.42078400]
[182.90980530 124.59331512]
[190.57522583 120.53100586]
[198.97482300 118.42565155]
[207.61833191 118.39232635]
[216.00308228 120.42536926]
[223.64328003 124.39916229]
[230.09814453 130.07589722]
[234.99734497 137.11976624]
[238.06221008 145.11680603]
[239.12161255 153.59927368]
[238.12149048 162.07295227]
[235.12753296 170.04597473]
[230.32096863 177.05737305]
[239.30386353 189.07017517]
[248.28677368 201.08297729]
[257.40682983 212.99200439]
[266.66281128 224.79566956]
[275.91879272 236.59934998]
[285.17480469 248.40301514]
[294.43078613 260.20669556]
[303.68676758 272.01034546]
[319.09625244 277.62109375]
[321.67507935 293.81619263]
[308.77041626 303.93554688]
[293.65744019 297.56921387]
[291.88308716 281.26635742]
[282.62710571 269.46267700]
[273.37112427 257.65899658]
[264.11514282 245.85533142]
[254.85914612 234.05166626]
[245.60314941 222.24798584]
[238.94184875 218.89613342]
[236.27397156 210.06588745]
[227.29106140 198.05308533]
[218.30816650 186.04028320]
[196.46403503 188.65863037]
[177.20126343 177.77774048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[8 25]
[9 24]
[10 23]
[11 22]
[13 20]
[14 19]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[41 52]
[42 51]
[43 50]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[112 134]
[113 133]
[114 132]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% Start Annotations
1 100 0.0 1 colorpair
2 99 0.0 1 colorpair
3 98 0.0 1 colorpair
4 97 0.0 1 colorpair
5 96 0.0 1 colorpair
8 25 0.0 1 colorpair
9 24 0.0 0.2 colorpair
10 23 0.0 1 colorpair
11 22 0.0 1 colorpair
13 20 0.0 0.6 colorpair
14 19 0.0 1 colorpair
27 73 0.0 1 colorpair
28 72 0.16 1 colorpair
29 71 0.0 1 colorpair
30 70 0.0 1 colorpair
31 69 0.0 1 colorpair
32 68 0.0 1 colorpair
33 63 0.0 1 colorpair
34 62 0.0 1 colorpair
35 61 0.0 1 colorpair
36 60 0.0 1 colorpair
37 59 0.0 1 colorpair
38 58 0.0 1 colorpair
39 57 0.0 1 colorpair
41 52 0.0 0.6 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
74 95 0.0 1 colorpair
75 94 0.0 1 colorpair
76 93 0.0 1 colorpair
77 92 0.0 1 colorpair
78 91 0.0 1 colorpair
79 90 0.0 1 colorpair
80 89 0.0 1 colorpair
81 88 0.0 1 colorpair
112 134 0.0 1 colorpair
113 133 0.0 1 colorpair
114 132 0.0 1 colorpair
115 130 0.0 1 colorpair
116 129 0.0 1 colorpair
117 128 0.0 1 colorpair
118 127 0.0 1 colorpair
119 126 0.0 1 colorpair
120 125 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 24 2 gmark
13 20 1 gmark
72 cmark
41 52 1 gmark
120 125 1 gmark

% End Annotations
showpage
end
%%EOF
