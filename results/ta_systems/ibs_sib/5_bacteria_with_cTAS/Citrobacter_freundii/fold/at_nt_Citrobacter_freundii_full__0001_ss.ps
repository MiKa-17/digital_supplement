%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:25:47 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUUAGGGAAGGUUUCCCCUCCCCCUGGUGUCUUAGUAAGCCGGUAAGCUAAUGACUAAGAGUAUCACCAGUAUGAUGACGUACUUCAUCAUAACCCUUUCCUUAUUUUGGCCCCUUCCUCGGGAGGGGCUUU_\
) } def
/len { sequence length } bind def

/coor [
[171.94372559 157.47662354]
[160.92013550 147.30407715]
[149.89654541 137.13154602]
[138.87295532 126.95900726]
[127.84936523 116.78647614]
[115.43700409 126.53077698]
[100.73870850 128.86329651]
[87.60969543 124.04596710]
[77.31143951 134.95219421]
[67.01317596 145.85842896]
[56.71492386 156.76466370]
[52.86606216 172.11056519]
[38.50249481 176.05229187]
[28.20423698 186.95852661]
[24.94406700 203.03034973]
[9.31149197 207.98561096]
[-2.61203575 196.72676086]
[1.43938732 180.83595276]
[17.29800415 176.66027832]
[27.59626198 165.75404358]
[30.70852280 151.18821716]
[45.80868912 146.46641541]
[56.10694885 135.56018066]
[66.40520477 124.65394592]
[76.70346069 113.74771118]
[73.53414917 105.59349060]
[73.13306427 96.85420990]
[75.54215240 88.44396973]
[64.28820801 78.52687073]
[53.03426743 68.60977173]
[41.78032684 58.69267654]
[30.52638817 48.77557755]
[18.82961464 39.38486481]
[6.71461058 30.54027939]
[-5.40039444 21.69569588]
[-17.51539993 12.85111332]
[-29.63040352 4.00652981]
[-41.74541092 -4.83805323]
[-53.86041260 -13.68263626]
[-75.21505737 -14.52254581]
[-83.05812073 -33.56121826]
[-95.75244141 -41.55210114]
[-108.44676208 -49.54298019]
[-123.80017090 -45.79486084]
[-137.26342773 -54.07232666]
[-140.84901428 -69.46450806]
[-132.42965698 -82.83948517]
[-117.00043488 -86.26213837]
[-103.71521759 -77.70185089]
[-100.45588684 -62.23730469]
[-87.76155853 -54.24642181]
[-75.06723785 -46.25554276]
[-66.70030212 -49.65625000]
[-57.57402420 -48.76092911]
[-49.79603195 -43.64702225]
[-45.22249222 -35.38089371]
[-45.01583099 -25.79764175]
[-32.90082550 -16.95305824]
[-20.78582191 -8.10847473]
[-8.67081642 0.73610836]
[3.44418883 9.58069134]
[15.55919361 18.42527580]
[27.67419815 27.26985931]
[30.53896141 26.91093445]
[33.72339630 27.71624374]
[36.76523590 29.81544685]
[39.16348648 33.16133881]
[40.44348526 37.52163696]
[51.69742584 47.43873596]
[62.95136642 57.35583115]
[74.20530701 67.27293396]
[85.45924377 77.19002533]
[105.46555328 70.72190857]
[126.19470215 80.73318481]
[136.24017334 69.59368134]
[146.28565979 58.45418549]
[156.33113098 47.31468964]
[166.37661743 36.17519379]
[176.42208862 25.03569603]
[186.46755981 13.89619827]
[196.51304626 2.75670147]
[195.44776917 -13.01164532]
[205.90719604 -24.85968018]
[221.68592834 -25.75817299]
[233.42271423 -15.17406464]
[234.15434265 0.61328053]
[223.44673157 12.23751163]
[207.65254211 12.80217838]
[197.60705566 23.94167519]
[187.56158447 35.08117294]
[177.51611328 46.22066879]
[167.47062683 57.36016846]
[157.42515564 68.49966431]
[147.37968445 79.63916016]
[137.33419800 90.77865601]
[138.02189636 105.76288605]
[149.04548645 115.93541718]
[160.06907654 126.10795593]
[171.09266663 136.28048706]
[182.11625671 146.45303345]
[190.73448181 141.60803223]
[200.25421143 138.99218750]
[210.10977173 138.75387573]
[219.71719360 140.90036011]
[228.50889587 145.29782104]
[235.96714783 151.67967224]
[241.65461731 159.66267395]
[245.23999023 168.77001953]
[246.51724243 178.45973206]
[245.41749573 188.15693665]
[242.01269531 197.28802490]
[236.51091003 205.31448364]
[245.76690674 217.11814880]
[255.02288818 228.92182922]
[264.27886963 240.72549438]
[273.53488159 252.52917480]
[282.79086304 264.33285522]
[292.04684448 276.13650513]
[301.30285645 287.94018555]
[310.55883789 299.74386597]
[325.96829224 305.35458374]
[328.54714966 321.54968262]
[315.64245605 331.66903687]
[300.52951050 325.30273438]
[298.75515747 308.99984741]
[289.49917603 297.19616699]
[280.24319458 285.39251709]
[270.98718262 273.58883667]
[261.73120117 261.78515625]
[252.47521973 249.98149109]
[243.21922302 238.17781067]
[233.96324158 226.37414551]
[224.70724487 214.57048035]
[204.58267212 219.11390686]
[184.80014038 213.00924683]
[170.63731384 197.81015015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[8 25]
[9 24]
[10 23]
[11 22]
[13 20]
[14 19]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[41 52]
[42 51]
[43 50]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% Start Annotations
1 100 0.0 1 colorpair
2 99 0.0 1 colorpair
3 98 0.0 1 colorpair
4 97 0.0 1 colorpair
5 96 0.0 1 colorpair
8 25 0.0 1 colorpair
9 24 0.0 1 colorpair
10 23 0.0 1 colorpair
11 22 0.0 1 colorpair
13 20 0.0 0.2 colorpair
14 19 0.0 1 colorpair
28 72 0.16 1 colorpair
29 71 0.0 1 colorpair
30 70 0.0 1 colorpair
31 69 0.0 1 colorpair
32 68 0.0 1 colorpair
33 63 0.0 1 colorpair
34 62 0.0 1 colorpair
35 61 0.0 1 colorpair
36 60 0.0 1 colorpair
37 59 0.0 1 colorpair
38 58 0.0 1 colorpair
39 57 0.0 1 colorpair
41 52 0.0 0.2 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
74 95 0.0 1 colorpair
75 94 0.0 1 colorpair
76 93 0.0 1 colorpair
77 92 0.0 1 colorpair
78 91 0.0 1 colorpair
79 90 0.0 1 colorpair
80 89 0.0 1 colorpair
81 88 0.0 1 colorpair
112 133 0.16 1 colorpair
113 132 0.0 0.2 colorpair
114 131 0.0 1 colorpair
115 130 0.0 1 colorpair
116 129 0.0 1 colorpair
117 128 0.0 1 colorpair
118 127 0.0 1 colorpair
119 126 0.0 1 colorpair
120 125 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 20 2 gmark
72 cmark
41 52 2 gmark
133 cmark
113 132 2 gmark
120 125 2 gmark

% End Annotations
showpage
end
%%EOF
