%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:13:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGUAAGGGAGGAU___UU_CUCC_CCC_UC_UGAUUAGUUGUUAGUAAGCCGGGAAACUUAACAGUAACAACACAACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUCUGUAAGGCCC_CUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[84.81061554 238.91047668]
[74.30635071 249.61843872]
[62.40538788 258.74899292]
[49.34251785 266.12200928]
[35.37545395 271.59204102]
[20.77974892 275.05114746]
[5.84335852 276.43109131]
[-9.13904095 275.70465088]
[-23.87186623 272.88616943]
[-38.06445694 268.03125000]
[-51.43680954 261.23565674]
[-63.72510910 252.63345337]
[-74.68692017 242.39437866]
[-84.10597992 230.72041321]
[-91.79645538 217.84188843]
[-97.60663605 204.01286316]
[-101.42188263 189.50617981]
[-103.16693878 174.60803223]
[-102.80736542 159.61233521]
[-100.35025787 144.81495667]
[-95.84409332 130.50781250]
[-89.37776947 116.97315979]
[-81.07886505 104.47803497]
[-71.11110687 93.26894379]
[-59.67113876 83.56702423]
[-46.98466492 75.56369019]
[-33.30196762 69.41683197]
[-18.89299583 65.24772644]
[-4.04201365 63.13861465]
[10.95798492 63.13111496]
[25.81106758 65.22537231]
[40.22420502 69.38007355]
[53.91304016 75.51324463]
[66.60751343 83.50388336]
[78.06348419 93.20050812]
[70.43527985 88.05356598]
[69.19228363 80.71751404]
[60.63157654 68.40027618]
[44.20238495 69.96119690]
[29.30493164 63.08093643]
[19.94800758 49.71475601]
[18.59709549 33.54891968]
[25.52535820 18.98429871]
[11.15421391 12.36759567]
[9.93291855 -2.47685432]
[1.11613953 -14.61210918]
[-7.70063925 -26.74736404]
[-16.51741791 -38.88261795]
[-25.33419609 -51.01787567]
[-39.48439407 -45.75721359]
[-54.52926636 -44.51045990]
[-69.35238647 -47.37012863]
[-82.85377502 -54.12401581]
[-94.03154755 -64.27093506]
[-102.05623627 -77.05791473]
[-106.33235931 -91.53608704]
[-106.54258728 -106.63106537]
[-102.67133331 -121.22270966]
[-95.00586700 -134.22821045]
[-84.11501312 -144.68247986]
[-70.80694580 -151.80975342]
[-56.06921387 -155.08113098]
[-40.99545670 -154.25384521]
[-26.70424461 -149.38929749]
[-14.25608063 -140.84846497]
[-4.57470179 -129.26513672]
[1.62147021 -115.49887848]
[3.87263727 -100.57122040]
[2.01174831 -85.58991241]
[-3.82310629 -71.66665649]
[-13.19894218 -59.83465195]
[-4.38216305 -47.69939804]
[4.43461561 -35.56414413]
[13.25139427 -23.42888832]
[22.06817245 -11.29363346]
[35.80868530 -5.54492474]
[37.66061401 10.16751957]
[51.15512466 7.84811544]
[64.39213562 11.60083961]
[74.76099396 20.74506760]
[80.19108582 33.53106308]
[79.56518555 47.47459793]
[72.94881439 59.83957291]
[81.50952148 72.15681458]
[90.19873810 84.38372803]
[105.05995178 86.41946411]
[116.81535339 77.10224152]
[128.57075500 67.78502655]
[140.32615662 58.46781158]
[152.08155823 49.15059662]
[158.09065247 34.51497650]
[172.87094116 32.67313385]
[184.62634277 23.35591507]
[186.19364929 7.62953234]
[198.47488403 -2.31766725]
[214.18382263 -0.58418638]
[224.00061035 11.80153179]
[222.10115051 27.49125862]
[209.61233521 37.17655945]
[193.94355774 35.11131668]
[182.18815613 44.42853546]
[177.01988220 58.39772034]
[161.39877319 60.90599823]
[149.64337158 70.22321320]
[137.88796997 79.54042816]
[126.13256836 88.85765076]
[114.37716675 98.17486572]
[114.53424072 105.67321777]
[127.67898560 112.89925385]
[114.84837341 120.66992950]
[115.00543976 128.16828918]
[127.14070129 136.98506165]
[139.27595520 145.80184937]
[151.41120911 154.61862183]
[163.54646301 163.43539429]
[175.68171692 172.25218201]
[187.81697083 181.06895447]
[199.77062988 171.83387756]
[213.84242249 166.34191895]
[228.89157104 165.03826904]
[243.69815063 168.02861023]
[257.06182861 175.07054138]
[267.89929199 185.59320068]
[275.33197021 198.74356079]
[278.75735474 213.45556641]
[277.89773560 228.53660583]
[272.82284546 242.76412964]
[263.94403076 254.98474121]
[251.98110962 264.20779419]
[237.90380859 269.68563843]
[222.85334778 270.97415161]
[208.04978943 267.96893311]
[194.69319153 260.91360474]
[183.86631775 250.38005066]
[176.44685364 237.22222900]
[173.03625488 222.50679016]
[173.91099548 207.42662048]
[179.00019836 193.20420837]
[166.86494446 184.38743591]
[154.72969055 175.57064819]
[142.59442139 166.75387573]
[130.45916748 157.93710327]
[118.32392120 149.12031555]
[106.18866730 140.30354309]
[109.28955841 154.97952271]
[110.30357361 169.94520569]
[109.21071625 184.90534973]
[106.03253937 199.56478882]
[100.83174896 213.63432312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[35 85]
[37 84]
[38 83]
[43 77]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[92 101]
[93 100]
[111 144]
[112 143]
[113 142]
[114 141]
[115 140]
[116 139]
[117 138]
] def

init

% Start Annotations
35 85 0.0 0.2 colorpair
37 84 0.0 1 colorpair
38 83 0.0 1 colorpair
43 77 0.16 0.2 colorpair
45 75 0.0 1 colorpair
46 74 0.16 1 colorpair
47 73 0.0 1 colorpair
48 72 0.0 1 colorpair
49 71 0.0 1 colorpair
86 107 0.0 0.2 colorpair
87 106 0.0 1 colorpair
88 105 0.0 1 colorpair
89 104 0.0 1 colorpair
90 103 0.0 1 colorpair
92 101 0.0 1 colorpair
93 100 0.0 1 colorpair
111 144 0.0 1 colorpair
112 143 0.16 1 colorpair
113 142 0.0 0.2 colorpair
114 141 0.0 1 colorpair
115 140 0.0 1 colorpair
116 139 0.0 1 colorpair
117 138 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
35 85 2 gmark
43 77 2 gmark
77 cmark
46 cmark
74 cmark
86 107 2 gmark
143 cmark
113 142 2 gmark
117 138 2 gmark

% End Annotations
showpage
end
%%EOF
