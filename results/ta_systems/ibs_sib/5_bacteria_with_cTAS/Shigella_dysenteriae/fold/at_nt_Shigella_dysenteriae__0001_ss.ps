%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:13:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGUAAGGGAGGAUUUCUCCC_CCCUCUGAU_AGUUGUUAGUAAGCCGGGAAACUUAACAGUAACAACACAACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUCUAUAAGGCCC_CUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[163.98194885 244.10150146]
[153.65687561 248.25610352]
[143.06443787 251.67196655]
[132.25741577 254.33207703]
[121.28967285 256.22317505]
[110.21584320 257.33584595]
[99.09110260 257.66452026]
[87.97089386 257.20761108]
[76.91062927 255.96734619]
[65.96540833 253.94992065]
[55.18978119 251.16539001]
[44.63743210 247.62763977]
[34.36094666 243.35426331]
[24.41152763 238.36659241]
[14.83875465 232.68946838]
[5.69032526 226.35116577]
[-2.98817515 219.38328552]
[-11.15350342 211.82052612]
[-18.76497269 203.70059204]
[-25.78465652 195.06393433]
[-32.17757797 185.95359802]
[-37.91187668 176.41496277]
[-42.95898819 166.49555969]
[-47.29375839 156.24482727]
[-50.89459229 145.71383667]
[-53.74354172 134.95504761]
[-55.82641220 124.02210236]
[-57.13282776 112.96945190]
[-57.65627670 101.85218048]
[-57.39414978 90.72566986]
[-56.34775925 79.64537811]
[-54.52231216 68.66651154]
[-51.92690659 57.84377670]
[-48.57447433 47.23109436]
[-44.48172379 36.88135147]
[-39.66904068 26.84611702]
[-34.16041565 17.17539787]
[-27.98328972 7.91737795]
[-21.16844559 -0.88180935]
[-13.74984074 -9.17831993]
[-24.06533241 -20.06825256]
[-34.38082504 -30.95818520]
[-44.69631577 -41.84811783]
[-55.01180649 -52.73804855]
[-73.77938080 -49.40919876]
[-90.66916656 -57.91757965]
[-99.03176117 -74.71409607]
[-95.69459534 -93.02698517]
[-106.69563293 -103.22390747]
[-117.69667816 -113.42082214]
[-133.47811890 -112.57135773]
[-145.18196106 -123.19187927]
[-145.86453247 -138.98141479]
[-135.12086487 -150.57232666]
[-119.32498932 -151.08792114]
[-107.84832001 -140.22230530]
[-107.49975586 -124.42185974]
[-96.49871826 -114.22494507]
[-85.49768066 -104.02802277]
[-75.03968048 -108.25484467]
[-63.70824432 -108.23847198]
[-53.16698837 -103.94253540]
[-44.97810364 -95.96179962]
[-40.37086487 -85.44013977]
[-40.05718231 -73.90666962]
[-44.12187576 -63.05354309]
[-33.80638504 -52.16360855]
[-23.49089241 -41.27367783]
[-13.17540073 -30.38374519]
[-2.85990834 -19.49381256]
[14.17619991 -32.26188660]
[32.77713394 -42.61843491]
[52.60374069 -50.37461853]
[73.29451752 -55.38902664]
[94.47222137 -57.57022476]
[115.75071716 -56.87844467]
[136.74201965 -53.32630539]
[157.06341553 -46.97856522]
[176.34437561 -37.95096588]
[194.23333740 -26.40810776]
[210.40414429 -12.56045246]
[221.40519714 -22.75737000]
[232.40623474 -32.95428848]
[243.40727234 -43.15120316]
[254.40830994 -53.34812164]
[259.26962280 -68.40396118]
[273.86361694 -71.38133240]
[284.86465454 -81.57824707]
[285.21319580 -97.37869263]
[296.68988037 -108.24430847]
[312.48574829 -107.72871399]
[323.22943115 -96.13780975]
[322.54684448 -80.34826660]
[310.84301758 -69.72774506]
[295.06155396 -70.57720947]
[284.06051636 -60.38029099]
[279.98608398 -46.05380630]
[264.60522461 -42.34708023]
[253.60418701 -32.15016556]
[242.60314941 -21.95324707]
[231.60211182 -11.75632954]
[220.60107422 -1.55941236]
[230.22904968 11.12185001]
[238.52896118 24.70949554]
[245.41613770 39.06495667]
[250.82035828 54.04183578]
[254.68649292 69.48740387]
[256.97515869 85.24413300]
[257.66296387 101.15134430]
[256.74288940 117.04682159]
[254.22438049 132.76844788]
[250.13307190 148.15589905]
[244.51071167 163.05226135]
[237.41461182 177.30560303]
[228.91716003 190.77058411]
[219.10499573 203.30989075]
[208.07820129 214.79562378]
[195.94920349 225.11067200]
[204.50102234 237.43409729]
[213.05282593 249.75750732]
[221.60462952 262.08093262]
[230.15643311 274.40435791]
[238.70823669 286.72775269]
[247.78585815 298.66915894]
[255.73881531 303.31454468]
[257.45166016 310.56146240]
[273.18029785 312.10604858]
[283.14523315 324.37292480]
[281.43444824 340.08435059]
[269.06289673 349.91900635]
[253.37045288 348.04220581]
[243.66712952 335.56741333]
[245.70973206 319.89566040]
[236.24890137 308.25552368]
[233.39749146 307.89691162]
[230.52288818 306.34472656]
[228.09660339 303.58670044]
[226.58474731 299.78713989]
[226.38482666 295.27957153]
[217.83302307 282.95614624]
[209.28120422 270.63272095]
[200.72940063 258.30932617]
[192.17759705 245.98590088]
[183.62579346 233.66247559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[48 59]
[49 58]
[50 57]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[87 96]
[88 95]
[118 144]
[119 143]
[120 142]
[121 141]
[122 140]
[123 139]
[124 134]
[126 133]
] def

init

% Start Annotations
40 70 0.0 1 colorpair
41 69 0.16 1 colorpair
42 68 0.0 1 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
48 59 0.0 1 colorpair
49 58 0.0 1 colorpair
81 102 0.0 0.6 colorpair
82 101 0.0 1 colorpair
83 100 0.0 1 colorpair
84 99 0.0 1 colorpair
85 98 0.0 1 colorpair
87 96 0.0 1 colorpair
88 95 0.0 1 colorpair
118 144 0.0 1 colorpair
119 143 0.0 0.6 colorpair
120 142 0.16 0.6 colorpair
121 141 0.0 0.2 colorpair
122 140 0.0 1 colorpair
123 139 0.0 1 colorpair
124 134 0.0 1 colorpair
126 133 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
41 cmark
69 cmark
50 57 5 gmark
50 cmark
57 cmark
81 102 1 gmark
119 143 1 gmark
120 142 1 gmark
120 cmark
121 141 2 gmark
126 133 1 gmark

% End Annotations
showpage
end
%%EOF
