%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:26:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUUAGGGAGGGUUUCCCCUCCCCCUGGUGUCUUAGUAAGCCGGUAAGCUAAUGACUAAGAGUAUCACCAGUAUGAUGACGUACUUCAUCAUAACCCUUUCCUUAUUUUGGCCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[172.14447021 137.09553528]
[161.29571533 126.73674774]
[150.44694519 116.37796783]
[139.59819031 106.01918793]
[128.74942017 95.66040039]
[122.80189514 114.51158142]
[107.08210754 123.95597076]
[90.45749664 120.85422516]
[80.09870911 131.70298767]
[69.73992920 142.55175781]
[59.38114929 153.40051270]
[49.02236557 164.24928284]
[38.66358566 175.09803772]
[28.30480194 185.94679260]
[24.95525551 202.00022888]
[9.29535103 206.86843872]
[-2.56534600 195.54342651]
[1.57443404 179.67539978]
[17.45603943 175.58801270]
[27.81482124 164.73925781]
[38.17360306 153.89048767]
[48.53238678 143.04173279]
[58.89116669 132.19296265]
[69.24994659 121.34420776]
[79.60873413 110.49544525]
[78.48254395 85.39759827]
[102.81654358 71.06163788]
[91.73141479 60.95620728]
[80.64627838 50.85077286]
[69.56114197 40.74533844]
[58.47600937 30.63990211]
[47.39087677 20.53446770]
[35.85086823 10.95176506]
[23.88060951 1.91224563]
[11.91035080 -7.12727404]
[-0.05990730 -16.16679382]
[-12.03016567 -25.20631218]
[-24.00042343 -34.24583435]
[-35.97068405 -43.28535080]
[-57.30784988 -44.46767426]
[-64.84806061 -63.62718201]
[-77.41552734 -71.81613159]
[-89.98298645 -80.00508118]
[-105.39328003 -76.49816895]
[-118.72508240 -84.98572540]
[-122.06887054 -100.43223572]
[-113.44083405 -113.67355347]
[-97.95983887 -116.85384369]
[-84.81047821 -108.08629608]
[-81.79403687 -92.57254028]
[-69.22657776 -84.38359070]
[-56.65911484 -76.19464111]
[-48.23681641 -79.46469879]
[-39.12263870 -78.42471313]
[-31.42448044 -73.18563080]
[-26.98275757 -64.84423828]
[-26.93116379 -55.25561142]
[-14.96090412 -46.21609116]
[-2.99064612 -37.17657089]
[8.97961235 -28.13705254]
[20.94987106 -19.09753227]
[32.92012787 -10.05801296]
[44.89038849 -1.01849318]
[47.76222610 -1.33230031]
[50.93556595 -0.47516501]
[53.94501495 1.67539322]
[56.28921509 5.06381798]
[57.49631119 9.44933319]
[68.58144379 19.55476761]
[79.66658020 29.66020203]
[90.75171661 39.76563644]
[101.83684540 49.87107086]
[112.92198181 59.97650528]
[127.91297913 59.45686340]
[138.27175903 48.60810089]
[148.63053894 37.75933838]
[158.98931885 26.91057587]
[169.34809875 16.06181335]
[179.70689392 5.21305132]
[190.06567383 -5.63571072]
[200.42445374 -16.48447227]
[199.80888367 -32.27676773]
[210.60163879 -43.82198715]
[226.39955139 -44.27055359]
[237.83001709 -33.35633850]
[238.11154175 -17.55455971]
[227.07708740 -6.24012470]
[211.27320862 -6.12569094]
[200.91442871 4.72307110]
[190.55564880 15.57183361]
[180.19686890 26.42059517]
[169.83808899 37.26935577]
[159.47930908 48.11811829]
[149.12051392 58.96688080]
[138.76173401 69.81564331]
[139.10820007 84.81164551]
[149.95697021 95.17042542]
[160.80572510 105.52920532]
[171.65449524 115.88798523]
[182.50325012 126.24677277]
[190.24339294 122.31198120]
[198.68519592 120.34913635]
[207.33554077 120.46508026]
[215.69099426 122.64547729]
[223.26707458 126.75603485]
[229.62641907 132.55079651]
[234.40394592 139.68682861]
[237.32786560 147.74449158]
[238.23512268 156.25215149]
[237.08047485 164.71377563]
[233.93864441 172.63780212]
[228.99961853 179.56578064]
[237.76023865 191.74163818]
[246.52085876 203.91749573]
[255.28147888 216.09335327]
[264.04208374 228.26922607]
[272.80270386 240.44508362]
[281.56332397 252.62094116]
[290.32394409 264.79678345]
[299.08456421 276.97265625]
[314.24917603 283.21496582]
[316.15698242 299.50277710]
[302.84542847 309.08056641]
[288.00827026 302.09552002]
[286.90872192 285.73327637]
[278.14810181 273.55740356]
[269.38748169 261.38156128]
[260.62686157 249.20570374]
[251.86622620 237.02984619]
[243.10560608 224.85397339]
[234.34498596 212.67811584]
[225.58436584 200.50225830]
[216.82374573 188.32640076]
[194.93759155 190.54765320]
[175.87387085 179.32563782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[41 52]
[42 51]
[43 50]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% Start Annotations
1 100 0.0 1 colorpair
2 99 0.0 1 colorpair
3 98 0.0 1 colorpair
4 97 0.0 0.6 colorpair
5 96 0.0 0.6 colorpair
8 25 0.0 1 colorpair
9 24 0.0 1 colorpair
10 23 0.0 1 colorpair
11 22 0.0 1 colorpair
12 21 0.0 0.2 colorpair
13 20 0.0 1 colorpair
14 19 0.0 1 colorpair
27 73 0.0 1 colorpair
28 72 0.0 1 colorpair
29 71 0.0 1 colorpair
30 70 0.0 1 colorpair
31 69 0.0 1 colorpair
32 68 0.0 1 colorpair
33 63 0.0 1 colorpair
34 62 0.0 1 colorpair
35 61 0.0 1 colorpair
36 60 0.0 1 colorpair
37 59 0.0 1 colorpair
38 58 0.0 1 colorpair
39 57 0.0 1 colorpair
41 52 0.0 0.6 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
74 95 0.0 1 colorpair
75 94 0.0 1 colorpair
76 93 0.0 1 colorpair
77 92 0.0 1 colorpair
78 91 0.0 1 colorpair
79 90 0.0 1 colorpair
80 89 0.0 1 colorpair
81 88 0.0 1 colorpair
112 133 0.0 1 colorpair
113 132 0.0 1 colorpair
114 131 0.0 1 colorpair
115 130 0.0 1 colorpair
116 129 0.0 1 colorpair
117 128 0.0 1 colorpair
118 127 0.0 1 colorpair
119 126 0.0 1 colorpair
120 125 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 97 1 gmark
5 96 1 gmark
12 21 2 gmark
41 52 1 gmark
120 125 1 gmark

% End Annotations
showpage
end
%%EOF
