%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:44:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGUAAGGGAGGAUUU_CU_CCCCCC_UCUGA_UGUGUUGUUAGUAAGCCGGGAAACUUAUCAGUAACAACACAACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUU_UAAGGCCC_C_UUCCUCGGGAGGGGCUUU_\
) } def
/len { sequence length } bind def

/coor [
[59.29333878 314.28469849]
[48.17381287 311.87026978]
[37.19532776 308.87924194]
[26.38776588 305.31973267]
[15.78053379 301.20150757]
[5.40250301 296.53567505]
[-4.71808481 291.33499146]
[-14.55368710 285.61361694]
[-24.07753563 279.38708496]
[-33.26371002 272.67236328]
[-42.08721542 265.48770142]
[-50.52403641 257.85269165]
[-58.55120850 249.78808594]
[-66.14689636 241.31584167]
[-73.29041290 232.45901489]
[-79.96233368 223.24169922]
[-86.14449310 213.68899536]
[-91.82006836 203.82688904]
[-96.97360992 193.68220520]
[-101.59109497 183.28259277]
[-105.65995789 172.65631104]
[-109.16912842 161.83230591]
[-112.10905457 150.84002686]
[-114.47173309 139.70939636]
[-116.25073242 128.47068787]
[-117.44121552 117.15449524]
[-118.03993988 105.79162598]
[-118.04528046 94.41298676]
[-117.45721436 83.04956055]
[-116.27735138 71.73225403]
[-114.50890350 60.49188614]
[-112.15666962 49.35903549]
[-109.22705841 38.36400223]
[-105.72805023 27.53670883]
[-101.66915894 16.90662193]
[-97.06143188 6.50266981]
[-91.91741180 -3.64683318]
[-86.25109863 -13.51426506]
[-80.07790375 -23.07277298]
[-73.41463470 -32.29634476]
[-66.27943420 -41.15987396]
[-58.69169998 -49.63924408]
[-50.67209625 -57.71137619]
[-60.65482330 -68.90714264]
[-70.63755035 -80.10290527]
[-80.62027740 -91.29867554]
[-90.60300446 -102.49443817]
[-104.15821075 -95.84922791]
[-119.00382233 -93.10871887]
[-134.03819275 -94.47628784]
[-148.14567566 -99.85044098]
[-160.27940369 -108.83238983]
[-169.53895569 -120.75560760]
[-175.23724365 -134.73532104]
[-176.95138550 -149.73413086]
[-174.55418396 -164.63902283]
[-168.22355652 -178.34397888]
[-158.42924500 -189.83197021]
[-145.89807129 -198.25053406]
[-131.55992126 -202.97494507]
[-116.47878265 -203.65463257]
[-101.77378845 -200.23915100]
[-88.53612518 -192.98194885]
[-77.74813843 -182.42155457]
[-70.21035004 -169.34162903]
[-66.48212433 -154.71279907]
[-66.84011078 -139.62059021]
[-71.25775909 -125.18498230]
[-79.40723419 -112.47716522]
[-69.42451477 -101.28140259]
[-59.44178391 -90.08563232]
[-49.45905685 -78.88986969]
[-39.47633362 -67.69409943]
[-18.24559212 -83.28376770]
[4.70951223 -96.20061493]
[29.05423164 -106.25628662]
[54.43354797 -113.30414581]
[80.47735596 -117.24140167]
[106.80585480 -118.01064301]
[133.03511047 -115.60064697]
[158.78262329 -110.04656982]
[183.67289734 -101.42940521]
[207.34298706 -89.87480164]
[229.44770813 -75.55127716]
[249.66470337 -58.66769409]
[260.32632446 -69.21898651]
[270.98794556 -79.77027893]
[281.64956665 -90.32156372]
[292.31118774 -100.87285614]
[302.97283936 -111.42414856]
[313.63446045 -121.97543335]
[313.46600342 -137.77882385]
[324.58114624 -149.01400757]
[340.38543701 -149.01536560]
[351.50247192 -137.78205872]
[351.33673096 -121.97864532]
[339.98654175 -110.98098755]
[324.18572998 -111.31381226]
[313.52410889 -100.76251984]
[302.86248779 -90.21122742]
[292.20086670 -79.65994263]
[281.53924561 -69.10865021]
[270.87762451 -58.55735779]
[260.21597290 -48.00606918]
[267.71646118 -39.44942856]
[274.76052856 -30.51328468]
[281.32897949 -21.22195435]
[287.40393066 -11.60072136]
[292.96890259 -1.67577207]
[298.00869751 8.52588367]
[302.50961304 18.97648239]
[306.45944214 29.64758492]
[309.84735107 40.51014709]
[312.66421509 51.53460693]
[314.90228271 62.69096756]
[316.55554199 73.94886017]
[317.61941528 85.27764893]
[318.09106445 96.64650726]
[317.96917725 108.02449036]
[317.25411987 119.38063812]
[315.94778442 130.68403625]
[314.05377197 141.90393066]
[311.57720947 153.00979614]
[308.52487183 163.97137451]
[304.90502930 174.75888062]
[300.72753906 185.34292603]
[296.00378418 195.69470215]
[290.74661255 205.78605652]
[284.97033691 215.58952332]
[278.69064331 225.07841492]
[271.92468262 234.22691345]
[264.69082642 243.01011658]
[257.00875854 251.40412903]
[248.89941406 259.38607788]
[240.38482666 266.93429565]
[231.48820496 274.02819824]
[222.23373413 280.64846802]
[212.64662170 286.77713013]
[202.75292969 292.39749146]
[192.57960510 297.49423218]
[182.15434265 302.05352783]
[171.50547791 306.06292725]
[160.66203308 309.51153564]
[149.65348816 312.38995361]
[138.50981140 314.69036865]
[127.26133728 316.40652466]
[115.93867493 317.53372192]
[104.57263184 318.06890869]
[93.19414520 318.01065063]
[81.83417511 317.35906982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% Start Annotations
43 73 0.0 0.2 colorpair
44 72 0.32 1 colorpair
45 71 0.0 1 colorpair
46 70 0.0 1 colorpair
47 69 0.0 1 colorpair
85 104 0.0 1 colorpair
86 103 0.0 1 colorpair
87 102 0.0 1 colorpair
88 101 0.16 1 colorpair
89 100 0.0 0.2 colorpair
90 99 0.16 1 colorpair
91 98 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
43 73 2 gmark
44 cmark
72 cmark
88 cmark
89 100 2 gmark
99 cmark

% End Annotations
showpage
end
%%EOF
