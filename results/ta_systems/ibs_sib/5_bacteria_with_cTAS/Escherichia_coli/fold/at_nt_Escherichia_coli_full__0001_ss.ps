%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:44:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGUAAGGGAGGAUUU_C_UCC_C_CC_CUCUGA_UGUGUUGUUAGUAAGCCGGGAAACUUAUGACUAACAACACAACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUU_UAAG_GCCC_C_UUCCUCGGGAGGGGCUUU_\
) } def
/len { sequence length } bind def

/coor [
[64.79959106 330.36502075]
[53.25821304 328.30310059]
[41.83514023 325.66336060]
[30.55928421 322.45245361]
[19.45918846 318.67849731]
[8.56294823 314.35104370]
[-2.10185981 309.48104858]
[-12.50824165 304.08087158]
[-22.62985611 298.16412354]
[-32.44108963 291.74581909]
[-41.91710281 284.84219360]
[-51.03391647 277.47073364]
[-59.76845169 269.65008545]
[-68.09860229 261.40002441]
[-76.00328827 252.74143982]
[-83.46249390 243.69627380]
[-90.45734406 234.28739929]
[-96.97013092 224.53863525]
[-102.98438263 214.47465515]
[-108.48486328 204.12092590]
[-113.45764923 193.50367737]
[-117.89016724 182.64974976]
[-121.77118683 171.58662415]
[-125.09088898 160.34233093]
[-127.84087372 148.94528198]
[-130.01417542 137.42436218]
[-131.60530090 125.80872345]
[-132.61021423 114.12775421]
[-133.02638245 102.41102600]
[-132.85273743 90.68820190]
[-132.08972168 78.98893738]
[-130.73928833 67.34285736]
[-128.80482483 55.77943802]
[-126.29124451 44.32793808]
[-123.20491028 33.01735306]
[-119.55361938 21.87630272]
[-115.34663391 10.93298817]
[-110.59458923 0.21510944]
[-105.30951691 -10.25020790]
[-99.50479126 -20.43647385]
[-93.19510651 -30.31790733]
[-86.39643097 -39.86949921]
[-79.12596893 -49.06707001]
[-71.40213776 -57.88734436]
[-63.24446869 -66.30799103]
[-54.67362213 -74.30770874]
[-64.26324463 -85.84196472]
[-73.85286713 -97.37622070]
[-83.44249725 -108.91047668]
[-102.40217590 -106.81147766]
[-118.70513916 -116.42543030]
[-125.92923737 -133.75779724]
[-121.35337067 -151.81570435]
[-131.63049316 -162.74185181]
[-141.90762329 -173.66799927]
[-157.71018982 -173.90095520]
[-168.65948486 -185.29783630]
[-168.25946045 -201.09706116]
[-156.74746704 -211.92523193]
[-140.95335388 -211.35820007]
[-130.24748230 -199.73236084]
[-130.98147583 -183.94512939]
[-120.70435333 -173.01898193]
[-110.42722321 -162.09283447]
[-99.72702026 -165.58842468]
[-88.44584656 -164.80648804]
[-78.23763275 -159.82286072]
[-70.61354065 -151.33224487]
[-66.71830750 -140.55155945]
[-67.15845490 -129.04565430]
[-71.90823364 -118.50010681]
[-62.31861115 -106.96584320]
[-52.72898865 -95.43158722]
[-43.13936234 -83.89733124]
[-22.16541481 -98.45079041]
[0.27457431 -110.62275696]
[23.91131210 -120.26715088]
[48.46115112 -127.26824188]
[73.62947845 -131.54200745]
[99.11425781 -133.03717041]
[124.60967255 -131.73577881]
[149.80976868 -127.65345001]
[174.41210938 -120.83917999]
[198.12147522 -111.37474060]
[220.65335083 -99.37371063]
[241.73731995 -84.98010254]
[261.12036133 -68.36665344]
[271.83462524 -78.86451721]
[282.54885864 -89.36238098]
[293.26309204 -99.86024475]
[297.70529175 -115.04502106]
[312.21118164 -118.42568207]
[322.92541504 -128.92355347]
[322.83596802 -144.72758484]
[334.00711060 -155.90707397]
[349.81121826 -155.82940674]
[360.87197876 -144.54069519]
[360.62722778 -128.73829651]
[349.22219849 -117.79750824]
[333.42327881 -118.20931244]
[322.70904541 -107.71144867]
[319.03317261 -93.27754974]
[303.76095581 -89.14601135]
[293.04672241 -78.64814758]
[282.33248901 -68.15028381]
[271.61825562 -57.65241623]
[279.32998657 -48.82157516]
[286.58782959 -39.61405182]
[293.37341309 -30.05315781]
[299.66955566 -20.16308975]
[305.46032715 -9.96888256]
[310.73107910 0.50366408]
[315.46844482 11.22804260]
[319.66043091 22.17710876]
[323.29644775 33.32315063]
[326.36727905 44.63795471]
[328.86517334 56.09288406]
[330.78378296 67.65894318]
[332.11828613 79.30686188]
[332.86526489 91.00715637]
[333.02285767 102.73020935]
[332.59063721 114.44635773]
[331.56973267 126.12593842]
[329.96270752 137.73939514]
[327.77362061 149.25732422]
[325.00802612 160.65058899]
[321.67291260 171.89033508]
[317.77676392 182.94812012]
[313.32937622 193.79595947]
[308.34204102 204.40640259]
[302.82739258 214.75257874]
[296.79937744 224.80831909]
[290.27322388 234.54815674]
[283.26550293 243.94743347]
[275.79391479 252.98237610]
[267.87738037 261.63012695]
[259.53591919 269.86874390]
[250.79067993 277.67745972]
[241.66378784 285.03643799]
[232.17831421 291.92706299]
[222.35830688 298.33190918]
[212.22859192 304.23477173]
[201.81483459 309.62072754]
[191.14335632 314.47610474]
[180.24119568 318.78860474]
[169.13594055 322.54736328]
[157.85571289 325.74282837]
[146.42903137 328.36691284]
[134.88482666 330.41299438]
[123.25234222 331.87591553]
[111.56100464 332.75189209]
[99.84040070 333.03878784]
[88.12020111 332.73583984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[46 74]
[47 73]
[48 72]
[49 71]
[53 64]
[54 63]
[55 62]
[87 106]
[88 105]
[89 104]
[90 103]
[92 101]
[93 100]
] def

init

% Start Annotations
46 74 0.32 1 colorpair
47 73 0.0 1 colorpair
48 72 0.0 1 colorpair
49 71 0.0 1 colorpair
53 64 0.0 1 colorpair
54 63 0.16 1 colorpair
87 106 0.0 1 colorpair
88 105 0.0 1 colorpair
89 104 0.0 1 colorpair
90 103 0.16 1 colorpair
92 101 0.16 1 colorpair
93 100 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
46 cmark
74 cmark
63 cmark
55 62 1304 gmark
55 cmark
62 cmark
90 cmark
101 cmark

% End Annotations
showpage
end
%%EOF
