%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:18:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGU_AGGGAGGGGUUUCCCCCCCCCUGAUAGG_UCUUAGUAAGCCGGGAAGCUUAUGACUAAGAGCACCACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUUUA__AGGCCCCUUCUUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[144.99816895 223.48719788]
[139.24778748 204.33093262]
[141.07653809 184.38470459]
[150.24105835 166.54156494]
[139.92556763 155.65164185]
[129.61007690 144.76170349]
[119.29457855 133.87176514]
[108.97908783 122.98184204]
[117.33496094 135.43893433]
[115.18043518 150.28340149]
[103.62789154 159.85099792]
[88.64194489 159.20195007]
[77.95986176 148.67137146]
[77.09683228 133.69621277]
[86.50020599 122.00717163]
[75.28083801 131.96336365]
[64.06147003 141.91955566]
[59.39755249 157.64151001]
[43.38909149 161.19976807]
[32.50421906 148.93389893]
[37.94036102 133.46197510]
[54.10527802 130.70018005]
[65.32464600 120.74399567]
[76.54401398 110.78780365]
[76.70649719 103.28955841]
[62.08732224 106.64808655]
[47.46814728 110.00662231]
[35.78356934 119.41249847]
[20.87455750 121.06217194]
[7.41630268 114.43832397]
[-0.37094268 101.61807251]
[-0.04524368 86.62160492]
[8.29126644 74.15154266]
[22.02441406 68.11824799]
[36.84774399 70.41365051]
[48.11153412 80.31575775]
[62.57149887 84.30442047]
[77.03146362 88.29308319]
[77.19394684 80.79483795]
[66.41640472 70.36198425]
[55.63885498 59.92913055]
[44.86130905 49.49627304]
[34.08375931 39.06341934]
[13.04453659 35.25832748]
[7.95637369 15.29794216]
[-3.47605729 5.58714724]
[-14.90848827 -4.12364674]
[-26.34091949 -13.83444118]
[-37.77334976 -23.54523468]
[-53.50318146 -22.01293373]
[-65.65611267 -32.11648941]
[-67.02201843 -47.86164474]
[-56.79054260 -59.90707397]
[-41.03182602 -61.10643768]
[-29.09524345 -50.74818039]
[-28.06255531 -34.97766495]
[-16.63012505 -25.26687241]
[-5.19769382 -15.55607796]
[6.23473692 -5.84528351]
[17.66716766 3.86551094]
[26.40814781 1.69029737]
[35.29395676 3.85586834]
[42.26170349 9.99158478]
[45.63288498 18.79040337]
[44.51661682 28.28587151]
[55.29416275 38.71872711]
[66.07170868 49.15158081]
[76.84925842 59.58443832]
[87.62680817 70.01729584]
[83.17039490 55.69456863]
[72.78186035 44.87429428]
[69.09435272 30.33461571]
[73.07052612 15.87121010]
[83.67236328 5.25984716]
[98.13218689 1.27069330]
[112.67517853 4.94514322]
[123.50477600 15.32395744]
[127.79384613 29.69767761]
[124.42270660 44.31394958]
[114.27055359 55.35764694]
[110.12548828 69.77355194]
[120.67447662 59.10965729]
[131.22348022 48.44575882]
[141.77247620 37.78186417]
[152.32147217 27.11796761]
[162.87046814 16.45406914]
[173.41946411 5.79017305]
[173.08323669 -10.01053905]
[184.07844543 -21.36310959]
[199.88183594 -21.53225708]
[211.11752319 -10.41763306]
[211.11956787 5.38665533]
[199.88677979 16.50420380]
[184.08335876 16.33916855]
[173.53436279 27.00306511]
[162.98536682 37.66696167]
[152.43637085 48.33086014]
[141.88737488 58.99475479]
[131.33837891 69.65865326]
[120.78938293 80.32254791]
[125.97592926 97.51965332]
[119.86901855 112.66635132]
[130.18450928 123.55628204]
[140.50000000 134.44621277]
[150.81549072 145.33615112]
[161.13098145 156.22607422]
[170.39456177 151.02850342]
[180.50527954 147.79602051]
[191.05163574 146.65715027]
[201.60501099 147.65527344]
[211.73707581 150.74697876]
[221.03717041 155.80393982]
[229.12899780 162.61824036]
[235.68577576 170.91091919]
[240.44346619 180.34342957]
[243.21145630 190.53135681]
[243.88009644 201.06019592]
[242.42510986 211.50215149]
[238.90847778 221.43356323]
[233.47570801 230.45205688]
[226.34992981 238.19284058]
[234.63275146 250.69863892]
[242.91557312 263.20443726]
[251.19837952 275.71023560]
[259.48120117 288.21603394]
[267.76403809 300.72183228]
[276.04684448 313.22763062]
[284.32965088 325.73339844]
[292.61248779 338.23919678]
[307.52413940 345.06375122]
[308.80014038 361.41320801]
[295.12783813 370.46859741]
[280.57214355 362.91455078]
[280.10668945 346.52203369]
[271.82385254 334.01623535]
[263.54104614 321.51043701]
[255.25822449 309.00463867]
[246.97540283 296.49884033]
[238.69259644 283.99304199]
[230.40977478 271.48724365]
[222.12695312 258.98144531]
[213.84413147 246.47566223]
[194.59323120 251.45361328]
[174.84803772 248.87191772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 106]
[5 105]
[6 104]
[7 103]
[8 102]
[15 24]
[16 23]
[17 22]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[121 142]
[122 141]
[123 140]
[124 139]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% Start Annotations
4 106 0.0 1 colorpair
5 105 0.0 1 colorpair
6 104 0.0 1 colorpair
7 103 0.0 1 colorpair
8 102 0.0 1 colorpair
15 24 0.0 1 colorpair
16 23 0.0 0.2 colorpair
17 22 0.16 1 colorpair
39 69 0.0 1 colorpair
40 68 0.16 1 colorpair
41 67 0.0 1 colorpair
42 66 0.0 1 colorpair
43 65 0.0 1 colorpair
45 60 0.0 1 colorpair
46 59 0.0 0.2 colorpair
47 58 0.0 1 colorpair
48 57 0.0 1 colorpair
49 56 0.16 0.2 colorpair
81 100 0.0 1 colorpair
82 99 0.0 1 colorpair
83 98 0.0 1 colorpair
84 97 0.0 1 colorpair
85 96 0.0 1 colorpair
86 95 0.0 1 colorpair
87 94 0.0 1 colorpair
121 142 0.0 0.6 colorpair
122 141 0.16 1 colorpair
123 140 0.0 1 colorpair
124 139 0.0 1 colorpair
125 138 0.16 1 colorpair
126 137 0.0 1 colorpair
127 136 0.0 1 colorpair
128 135 0.0 1 colorpair
129 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
16 23 2 gmark
17 cmark
22 cmark
40 cmark
68 cmark
46 59 2 gmark
49 56 2 gmark
49 cmark
56 cmark
121 142 1 gmark
122 cmark
141 cmark
125 cmark
138 cmark

% End Annotations
showpage
end
%%EOF
