%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:18:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGU_AGGGAGGGGUUUCCCCCCCCCUGAUAGG_UCUUAGUAAGCCGGGAAGCUUAUGACUAAGAGCACCACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUUUAA__GGCCCCUUCUUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[147.21472168 215.12141418]
[141.46434021 195.96514893]
[143.29309082 176.01890564]
[152.45759583 158.17578125]
[142.14210510 147.28585815]
[131.82661438 136.39591980]
[121.51112366 125.50598907]
[111.19563293 114.61605072]
[103.34677124 126.01274109]
[86.81390381 131.38569641]
[75.17377472 140.84654236]
[63.53364944 150.30737305]
[51.89352036 159.76821899]
[40.25339508 169.22904968]
[28.61326790 178.68988037]
[16.97314072 188.15072632]
[5.33301401 197.61155701]
[-6.30711269 207.07240295]
[-11.64770985 222.57756042]
[-27.79528236 225.43901062]
[-38.13859558 212.71313477]
[-32.03733063 197.49122620]
[-15.76795101 195.43226624]
[-4.12782383 185.97143555]
[7.51230288 176.51060486]
[19.15242958 167.04975891]
[30.79255676 157.58892822]
[42.43268204 148.12808228]
[54.07281113 138.66725159]
[65.71293640 129.20640564]
[77.35306549 119.74557495]
[77.67795563 112.25260925]
[65.55645752 121.08830261]
[51.09076691 117.12046814]
[45.17357254 103.33689880]
[52.26053619 90.11665344]
[67.01515961 87.41459656]
[78.32773590 97.26669312]
[78.65262604 89.77373505]
[67.87507629 79.34087372]
[57.09753036 68.90802002]
[46.31998444 58.47516632]
[35.54243851 48.04230881]
[24.76489067 37.60945511]
[13.98734379 27.17659760]
[2.87648773 17.09945107]
[-8.55594349 7.38865757]
[-19.98837471 -2.32213664]
[-31.42080498 -12.03293133]
[-47.15063477 -10.50063038]
[-59.30356598 -20.60418701]
[-60.66947556 -36.34933853]
[-50.43799591 -48.39476776]
[-34.67928314 -49.59413528]
[-22.74269867 -39.23587418]
[-21.71001053 -23.46536255]
[-10.27757931 -13.75456715]
[1.15485108 -4.04377317]
[12.58728218 5.66702127]
[16.18303490 5.71588135]
[19.92709541 7.55587101]
[22.95595169 11.23377895]
[24.42020035 16.39905167]
[35.19774628 26.83190727]
[45.97529221 37.26476288]
[56.75284195 47.69762039]
[67.53038788 58.13047409]
[78.30793762 68.56333160]
[89.08547974 78.99618530]
[84.62907410 64.67346191]
[75.10392761 53.08589935]
[73.21858215 38.20485687]
[79.55299377 24.60797310]
[92.15859985 16.47786713]
[107.15772247 16.31548500]
[119.93639374 24.17077827]
[126.56369019 37.62733459]
[125.00095367 52.54570770]
[115.72923279 64.33654022]
[111.58415985 78.75244904]
[122.13315582 68.08854675]
[132.68215942 57.42465210]
[143.23114014 46.76075745]
[153.78013611 36.09685898]
[164.32913208 25.43296242]
[174.87812805 14.76906490]
[185.42712402 4.10516787]
[185.09091187 -11.69554424]
[196.08612061 -23.04811287]
[211.88949585 -23.21726227]
[223.12518311 -12.10263824]
[223.12724304 3.70165038]
[211.89445496 14.81919956]
[196.09101868 14.65416336]
[185.54203796 25.31805992]
[174.99304199 35.98195648]
[164.44404602 46.64585495]
[153.89505005 57.30974960]
[143.34605408 67.97364807]
[132.79705811 78.63754272]
[122.24806213 89.30144501]
[122.08556366 104.30056000]
[132.40106201 115.19049072]
[142.71655273 126.08042908]
[153.03204346 136.97035217]
[163.34753418 147.86029053]
[172.61111450 142.66271973]
[182.72183228 139.43023682]
[193.26818848 138.29136658]
[203.82156372 139.28948975]
[213.95362854 142.38119507]
[223.25372314 147.43814087]
[231.34555054 154.25245667]
[237.90231323 162.54513550]
[242.66001892 171.97763062]
[245.42799377 182.16555786]
[246.09663391 192.69439697]
[244.64166260 203.13636780]
[241.12501526 213.06777954]
[235.69224548 222.08627319]
[228.56648254 229.82705688]
[236.84928894 242.33285522]
[245.13211060 254.83865356]
[253.41493225 267.34445190]
[261.69775391 279.85025024]
[269.98056030 292.35604858]
[278.26339722 304.86181641]
[286.54620361 317.36761475]
[294.82901001 329.87341309]
[309.74069214 336.69796753]
[311.01669312 353.04739380]
[297.34439087 362.10281372]
[282.78869629 354.54876709]
[282.32324219 338.15625000]
[274.04040527 325.65045166]
[265.75759888 313.14465332]
[257.47476196 300.63885498]
[249.19195557 288.13305664]
[240.90913391 275.62725830]
[232.62631226 263.12145996]
[224.34350586 250.61567688]
[216.06068420 238.10987854]
[196.80976868 243.08782959]
[177.06457520 240.50613403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 106]
[5 105]
[6 104]
[7 103]
[8 102]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 59]
[47 58]
[48 57]
[49 56]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[121 142]
[122 141]
[123 140]
[124 139]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% Start Annotations
4 106 0.0 1 colorpair
5 105 0.0 1 colorpair
6 104 0.0 1 colorpair
7 103 0.0 1 colorpair
8 102 0.0 1 colorpair
10 31 0.0 0.2 colorpair
11 30 0.0 1 colorpair
12 29 0.16 0.2 colorpair
13 28 0.0 1 colorpair
14 27 0.16 0.2 colorpair
15 26 0.0 1 colorpair
16 25 0.0 0.6 colorpair
17 24 0.0 0.2 colorpair
18 23 0.0 0.2 colorpair
39 69 0.0 1 colorpair
40 68 0.16 1 colorpair
41 67 0.0 1 colorpair
42 66 0.0 1 colorpair
43 65 0.0 1 colorpair
44 64 0.0 0.2 colorpair
45 63 0.0 1 colorpair
46 59 0.0 0.6 colorpair
47 58 0.0 1 colorpair
48 57 0.0 1 colorpair
49 56 0.16 0.6 colorpair
80 101 0.0 0.2 colorpair
81 100 0.0 1 colorpair
82 99 0.0 1 colorpair
83 98 0.0 1 colorpair
84 97 0.0 1 colorpair
85 96 0.0 1 colorpair
86 95 0.0 1 colorpair
87 94 0.0 1 colorpair
121 142 0.0 1 colorpair
122 141 0.16 1 colorpair
123 140 0.0 1 colorpair
124 139 0.0 1 colorpair
125 138 0.16 1 colorpair
126 137 0.0 1 colorpair
127 136 0.0 1 colorpair
128 135 0.0 1 colorpair
129 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 31 2 gmark
12 29 2 gmark
29 cmark
14 27 2 gmark
14 cmark
27 cmark
16 25 1 gmark
17 24 2 gmark
18 23 2 gmark
40 cmark
68 cmark
44 64 2 gmark
46 59 1 gmark
49 56 1 gmark
49 cmark
56 cmark
80 101 2 gmark
122 cmark
141 cmark
125 cmark
138 cmark

% End Annotations
showpage
end
%%EOF
