%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:26:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGUGAGGGAGGAUUUCUCCCCCCUCUG_AUUGGCUGUUAAUAAGCGGGGAAACUUAUCAGUAACAGCACAAUCAGUAUGAUGACGAACUUCAUCAUAACCCUUUCCUUAUACAAGGCCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[143.29891968 210.02133179]
[145.50585938 191.02638245]
[154.72897339 174.23936462]
[144.83879089 162.96177673]
[134.94860840 151.68417358]
[125.05841064 140.40657043]
[115.16822815 129.12898254]
[105.27803802 117.85137939]
[98.02496338 119.02462769]
[90.68211365 117.28713989]
[79.40451050 127.17733002]
[68.12691498 137.06752014]
[56.84931946 146.95770264]
[51.57535934 161.87399292]
[36.90493011 164.44845581]
[25.62733459 174.33865356]
[14.34973717 184.22883606]
[9.59364414 199.92315674]
[-6.43542194 203.38742065]
[-17.24813080 191.05787659]
[-11.72129536 175.61811829]
[4.45954990 172.95123291]
[15.73714733 163.06105042]
[27.01474380 153.17086792]
[31.48205757 138.96197510]
[46.95913315 135.68009949]
[58.23672867 125.78991699]
[69.51432800 115.89973450]
[80.79192352 106.00954437]
[81.60964203 91.03185272]
[71.47579193 79.97268677]
[61.34193420 68.91352844]
[53.17190933 64.65779877]
[51.11088181 57.50082016]
[36.19458771 52.22686005]
[33.62012482 37.55643082]
[23.72993660 26.27883530]
[8.19839764 25.09178734]
[-1.67100477 13.51381016]
[-0.44361991 -1.28582239]
[-10.45623589 -12.45486546]
[-20.59008980 -23.51402473]
[-30.72394180 -34.57318497]
[-40.85779572 -45.63234711]
[-61.63114929 -50.68683243]
[-65.52178955 -70.91382599]
[-76.35724640 -81.28652191]
[-87.19270325 -91.65921783]
[-98.02816772 -102.03191376]
[-113.27306366 -99.13833618]
[-127.29284668 -105.78854370]
[-134.69662476 -119.42539215]
[-132.63749695 -134.80523682]
[-121.90724182 -146.01422119]
[-106.63185120 -148.74224854]
[-92.68502808 -141.94033813]
[-85.42961884 -128.22396851]
[-87.65547180 -112.86737061]
[-76.82000732 -102.49467468]
[-65.98455048 -92.12197876]
[-55.14908981 -81.74928284]
[-46.29149246 -83.40180969]
[-37.54759598 -80.71031952]
[-30.95606232 -74.16799164]
[-28.11562729 -65.18073273]
[-29.79863548 -55.76619720]
[-19.66478157 -44.70703888]
[-9.53092861 -33.64787674]
[0.60292429 -22.58871841]
[7.49298859 -19.76078224]
[10.83397675 -11.17600918]
[25.66720200 -10.46115398]
[35.85791397 0.83504331]
[35.00753403 16.38864708]
[44.89772034 27.66624451]
[59.10660553 32.13355637]
[62.38848114 47.61063385]
[72.40109253 58.77967834]
[82.53495026 69.83883667]
[92.66880035 80.89799500]
[107.64649963 81.71571350]
[118.92409515 71.82552338]
[130.20169067 61.93534088]
[141.47929382 52.04515076]
[152.75688171 42.15496445]
[164.03448486 32.26477814]
[175.31207275 22.37458992]
[186.58967590 12.48440361]
[187.37309265 -3.30045605]
[199.14456177 -13.84599209]
[214.92025757 -12.89572525]
[225.34074402 -1.01343167]
[224.22373962 14.75133419]
[212.23193359 25.04561615]
[196.47985840 23.76200104]
[185.20227051 33.65218735]
[173.92466736 43.54237366]
[162.64707947 53.43256378]
[151.36947632 63.32275009]
[140.09187317 73.21293640]
[128.81428528 83.10312653]
[117.53668213 92.99330902]
[116.55563354 107.96119690]
[126.44582367 119.23879242]
[136.33601379 130.51638794]
[146.22619629 141.79399109]
[156.11637878 153.07157898]
[166.00657654 164.34918213]
[176.23188782 159.39706421]
[187.30314636 156.89071655]
[198.64442444 156.95588684]
[209.66680908 159.58470154]
[219.79895020 164.63627625]
[228.51667786 171.84423828]
[235.37014771 180.83081055]
[240.00704956 191.12660217]
[242.19068909 202.19509888]
[241.81208801 213.46061707]
[238.89538574 224.33833313]
[233.59642029 234.26448059]
[226.19433594 242.72575378]
[234.52787781 255.19779968]
[242.86143494 267.66986084]
[251.19499207 280.14187622]
[259.52853394 292.61392212]
[267.86209106 305.08596802]
[276.19564819 317.55801392]
[284.52920532 330.03005981]
[299.46847534 336.79400635]
[300.81088257 353.13809204]
[287.17547607 362.24899292]
[272.58920288 354.75415039]
[272.05715942 338.36361694]
[263.72360229 325.89157104]
[255.39006042 313.41952515]
[247.05650330 300.94747925]
[238.72294617 288.47543335]
[230.38938904 276.00338745]
[222.05584717 263.53134155]
[213.72229004 251.05931091]
[195.33177185 255.70019531]
[176.51826477 253.05778503]
[160.06387329 243.49914551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[10 29]
[11 28]
[12 27]
[13 26]
[15 24]
[16 23]
[17 22]
[30 80]
[31 79]
[32 78]
[34 77]
[36 75]
[37 74]
[40 71]
[41 69]
[42 68]
[43 67]
[44 66]
[46 61]
[47 60]
[48 59]
[49 58]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% Start Annotations
3 108 0.0 0.6 colorpair
4 107 0.0 1 colorpair
5 106 0.0 1 colorpair
6 105 0.0 1 colorpair
7 104 0.0 1 colorpair
8 103 0.0 0.2 colorpair
10 29 0.0 1 colorpair
11 28 0.0 1 colorpair
12 27 0.0 1 colorpair
13 26 0.0 1 colorpair
15 24 0.0 1 colorpair
16 23 0.0 1 colorpair
17 22 0.0 1 colorpair
30 80 0.0 1 colorpair
31 79 0.0 1 colorpair
32 78 0.0 1 colorpair
34 77 0.0 1 colorpair
36 75 0.0 1 colorpair
37 74 0.0 1 colorpair
40 71 0.32 1 colorpair
41 69 0.0 1 colorpair
42 68 0.16 1 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
46 61 0.0 1 colorpair
47 60 0.0 1 colorpair
48 59 0.0 1 colorpair
49 58 0.0 1 colorpair
81 102 0.0 1 colorpair
82 101 0.0 1 colorpair
83 100 0.0 1 colorpair
84 99 0.0 1 colorpair
85 98 0.0 1 colorpair
86 97 0.0 1 colorpair
87 96 0.0 1 colorpair
88 95 0.0 1 colorpair
121 140 0.0 1 colorpair
122 139 0.0 1 colorpair
123 138 0.0 1 colorpair
124 137 0.0 1 colorpair
125 136 0.0 1 colorpair
126 135 0.0 1 colorpair
127 134 0.16 1 colorpair
128 133 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 108 1 gmark
8 103 2 gmark
40 cmark
71 cmark
68 cmark
134 cmark

% End Annotations
showpage
end
%%EOF
