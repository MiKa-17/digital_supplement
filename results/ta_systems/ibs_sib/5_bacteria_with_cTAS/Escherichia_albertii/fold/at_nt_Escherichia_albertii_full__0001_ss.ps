%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:26:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AGGGUGAGGGAGGAUUUCUCCCCCCUCUG_AUUGGCUGUUAAUAAGCGGGGAAACUUAUCAGUAACAGCACAAUCAGUAUGAUGACGAACUUCAUCAUAACCCUUUCCUUAUACAAGGCCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[159.19108582 195.11709595]
[156.50813293 176.65116882]
[160.17735291 158.33335876]
[169.78820801 142.28799438]
[159.89802551 131.01039124]
[150.00782776 119.73279572]
[140.11764526 108.45520020]
[130.22746277 97.17760468]
[123.13147736 116.50546265]
[106.24587250 125.72666168]
[88.78747559 121.81912994]
[78.18087006 132.42573547]
[67.57427216 143.03233337]
[56.96766663 153.63893127]
[46.36106491 164.24552917]
[44.92319489 180.22402954]
[31.45537376 188.94166565]
[16.28895950 183.71104431]
[11.05833054 168.54463196]
[19.77597618 155.07681274]
[35.75446320 153.63893127]
[46.36106491 143.03233337]
[56.96766663 132.42573547]
[67.57427216 121.81912994]
[78.18087006 111.21252441]
[74.30924225 100.56637573]
[75.58974457 88.78694153]
[82.21247864 78.33963776]
[93.20580292 71.60815430]
[106.55905914 70.35807037]
[96.42520905 59.29891205]
[86.29135895 48.23974991]
[78.12133026 43.98402023]
[76.06030273 36.82704163]
[61.14400864 31.55307961]
[58.56954575 16.88265228]
[48.67935562 5.60505581]
[33.14781952 4.41800737]
[23.27841568 -7.15996933]
[24.50580025 -21.95960236]
[14.49318504 -33.12864304]
[4.35933208 -44.18780518]
[-5.77452087 -55.24696350]
[-15.90837383 -66.30612183]
[-36.68172836 -71.36061096]
[-40.57236481 -91.58760834]
[-51.40782547 -101.96030426]
[-62.24328232 -112.33300018]
[-73.07874298 -122.70569611]
[-88.32363892 -119.81211853]
[-102.34342194 -126.46232605]
[-109.74720764 -140.09916687]
[-107.68807983 -155.47901917]
[-96.95781708 -166.68798828]
[-81.68242645 -169.41601562]
[-67.73561096 -162.61412048]
[-60.48019791 -148.89775085]
[-62.70604706 -133.54115295]
[-51.87058640 -123.16845703]
[-41.03512955 -112.79576111]
[-30.19966888 -102.42306519]
[-21.34207344 -104.07559204]
[-12.59817410 -101.38409424]
[-6.00664234 -94.84177399]
[-3.16620731 -85.85450745]
[-4.84921408 -76.43997955]
[5.28463888 -65.38082123]
[15.41849232 -54.32165909]
[25.55234528 -43.26249695]
[32.44240952 -40.43456268]
[35.78339767 -31.84978867]
[50.61662292 -31.13493347]
[60.80733490 -19.83873558]
[59.95695496 -4.28513145]
[69.84713745 6.99246550]
[84.05602264 11.45977879]
[87.33789825 26.93685341]
[97.35051727 38.10589600]
[107.48436737 49.16505814]
[117.61822510 60.22421646]
[132.59591675 61.04193497]
[143.87351990 51.15174866]
[155.15110779 41.26156235]
[166.42871094 31.37137413]
[177.70629883 21.48118591]
[188.98390198 11.59099865]
[200.26150513 1.70081151]
[211.53909302 -8.18937588]
[212.32252502 -23.97423553]
[224.09397888 -34.51977158]
[239.86967468 -33.56950378]
[250.29016113 -21.68721008]
[249.17315674 -5.92244482]
[237.18136597 4.37183762]
[221.42929077 3.08822155]
[210.15168762 12.97840881]
[198.87408447 22.86859512]
[187.59649658 32.75878143]
[176.31889343 42.64897156]
[165.04130554 52.53915787]
[153.76370239 62.42934418]
[142.48609924 72.31953430]
[141.50505066 87.28741455]
[151.39524841 98.56501007]
[161.28543091 109.84261322]
[171.17561340 121.12020874]
[181.06581116 132.39781189]
[191.52426147 127.04603577]
[202.87347412 124.04072571]
[214.59425354 123.51589966]
[226.15118408 125.49219513]
[237.01701355 129.87606812]
[246.69673157 136.46421814]
[254.75015259 144.95301819]
[260.81188965 154.95246887]
[264.60794067 166.00416565]
[265.96810913 177.60231018]
[264.83358765 189.21681213]
[261.25949097 200.31756592]
[255.41221619 210.39862061]
[247.56172180 219.00123596]
[255.89526367 231.47328186]
[264.22882080 243.94532776]
[272.56237793 256.41735840]
[280.89593506 268.88940430]
[289.22949219 281.36145020]
[297.56304932 293.83349609]
[305.89660645 306.30554199]
[320.83584595 313.06945801]
[322.17825317 329.41357422]
[308.54287720 338.52444458]
[293.95660400 331.02960205]
[293.42456055 314.63909912]
[285.09100342 302.16705322]
[276.75744629 289.69500732]
[268.42388916 277.22296143]
[260.09033203 264.75091553]
[251.75677490 252.27886963]
[243.42323303 239.80682373]
[235.08967590 227.33479309]
[217.27894592 232.52133179]
[198.73843384 231.43344116]
[181.61624146 224.18247986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[30 80]
[31 79]
[32 78]
[34 77]
[36 75]
[37 74]
[40 71]
[41 69]
[42 68]
[43 67]
[44 66]
[46 61]
[47 60]
[48 59]
[49 58]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% Start Annotations
4 107 0.0 1 colorpair
5 106 0.0 1 colorpair
6 105 0.0 1 colorpair
7 104 0.0 1 colorpair
8 103 0.0 0.2 colorpair
11 25 0.16 1 colorpair
12 24 0.0 1 colorpair
13 23 0.0 1 colorpair
14 22 0.0 1 colorpair
15 21 0.0 1 colorpair
30 80 0.0 1 colorpair
31 79 0.0 1 colorpair
32 78 0.0 1 colorpair
34 77 0.0 1 colorpair
36 75 0.0 1 colorpair
37 74 0.0 1 colorpair
40 71 0.32 1 colorpair
41 69 0.0 1 colorpair
42 68 0.16 1 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
46 61 0.0 1 colorpair
47 60 0.0 1 colorpair
48 59 0.0 1 colorpair
49 58 0.0 1 colorpair
81 102 0.0 1 colorpair
82 101 0.0 1 colorpair
83 100 0.0 1 colorpair
84 99 0.0 1 colorpair
85 98 0.0 1 colorpair
86 97 0.0 1 colorpair
87 96 0.0 1 colorpair
88 95 0.0 1 colorpair
121 140 0.0 1 colorpair
122 139 0.0 1 colorpair
123 138 0.0 1 colorpair
124 137 0.0 1 colorpair
125 136 0.0 1 colorpair
126 135 0.0 1 colorpair
127 134 0.16 1 colorpair
128 133 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 103 2 gmark
25 cmark
40 cmark
71 cmark
68 cmark
134 cmark

% End Annotations
showpage
end
%%EOF
