%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:12:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGUGAGAGGGGAUCUCUCCCCCCUCUGAUUG_CUGUUAGUAAGCUGCGAAACUUAUCAGUAACAGAACAAUCAGUAUGAUGACCUGGUGCAUCAUAACCCUUUCCUUAUUAAAGCCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[174.56593323 173.21046448]
[164.19999695 162.36854553]
[153.83406067 151.52662659]
[143.46810913 140.68470764]
[133.10217285 129.84277344]
[122.73623657 119.00085449]
[99.21401215 129.65617371]
[76.23152161 117.81308746]
[65.15973663 127.93314362]
[54.08795166 138.05320740]
[43.01616669 148.17326355]
[31.94438171 158.29331970]
[20.87259674 168.41337585]
[9.80081081 178.53343201]
[11.67192554 193.93728638]
[4.10212708 207.48268127]
[-9.99784279 213.96115112]
[-25.20625687 210.88157654]
[-35.67517090 199.42813110]
[-37.37907410 184.00488281]
[-29.66277695 170.54240417]
[-15.49335957 164.21728516]
[-0.31924722 167.46165466]
[10.75253773 157.34159851]
[21.82432365 147.22154236]
[32.89610672 137.10148621]
[43.96789169 126.98142242]
[55.03967667 116.86135864]
[66.11146545 106.74130249]
[66.44803619 91.74507904]
[55.84143066 81.13848114]
[45.23482895 70.53187561]
[34.62822723 59.92527390]
[24.02162743 49.31867218]
[6.15795946 45.01010513]
[2.19741488 27.95004272]
[-8.64450836 17.58410454]
[-19.48643112 7.21816397]
[-30.32835388 -3.14777565]
[-41.17027664 -13.51371574]
[-52.01219940 -23.87965584]
[-63.19683075 -33.87485504]
[-74.71150208 -43.48798752]
[-86.22617340 -53.10112381]
[-97.74084473 -62.71425629]
[-109.25551605 -72.32739258]
[-124.26879120 -68.40550232]
[-138.70771790 -74.08854675]
[-147.02023315 -87.19128418]
[-146.01000977 -102.67543793]
[-136.06549072 -114.58704376]
[-121.01055908 -118.34583282]
[-106.63413239 -112.50648499]
[-98.46424103 -99.31434631]
[-99.64237976 -83.84206390]
[-88.12770844 -74.22892761]
[-76.61303711 -64.61579132]
[-65.09836578 -55.00265884]
[-53.58369827 -45.38952637]
[-49.97957993 -45.37500000]
[-46.21043015 -43.56142044]
[-43.14635468 -39.89444733]
[-41.64625931 -34.72157669]
[-30.80433655 -24.35563850]
[-19.96241379 -13.98969841]
[-9.12049103 -3.62375879]
[1.72143161 6.74218082]
[12.56335449 17.10811996]
[24.71141243 17.16500473]
[33.83340454 25.78443336]
[34.62822723 38.71207047]
[45.23482895 49.31867218]
[55.84143066 59.92527390]
[66.44803619 70.53187561]
[77.05463409 81.13848114]
[91.95450592 71.43271637]
[109.71387482 71.98153687]
[123.96290588 82.57162476]
[135.03468323 72.45156860]
[146.10647583 62.33151245]
[157.17825317 52.21145248]
[168.25004578 42.09139633]
[179.32182312 31.97133636]
[190.39361572 21.85127831]
[188.52250671 6.44742966]
[196.09230042 -7.09796715]
[210.19226074 -13.57643032]
[225.40068054 -10.49685955]
[235.86959839 0.95658869]
[237.57350159 16.37982941]
[229.85720825 29.84231186]
[215.68778992 36.16743469]
[200.51367188 32.92306519]
[189.44189453 43.04312134]
[178.37010193 53.16318130]
[167.29832458 63.28323746]
[156.22653198 73.40329742]
[145.15475464 83.52335358]
[134.08296204 93.64340973]
[133.57815552 108.63491821]
[143.94409180 119.47683716]
[154.31004333 130.31875610]
[164.67597961 141.16069031]
[175.04191589 152.00260925]
[185.40785217 162.84452820]
[192.93608093 160.08090210]
[200.90599060 159.48228455]
[208.70945740 161.07948303]
[215.75511169 164.73632812]
[221.51316833 170.16116333]
[225.55523682 176.93000793]
[227.58619690 184.51976013]
[227.46566772 192.34848022]
[225.21766663 199.82017517]
[221.02758789 206.37002563]
[229.56985474 218.70005798]
[238.11212158 231.03009033]
[246.65438843 243.36012268]
[255.19665527 255.69015503]
[263.73892212 268.02017212]
[272.28118896 280.35021973]
[280.82345581 292.68023682]
[289.36572266 305.01028442]
[297.90798950 317.34030151]
[312.95895386 323.85186768]
[314.57623291 340.17105103]
[301.09609985 349.51013184]
[286.38577271 342.26181030]
[285.57797241 325.88256836]
[277.03570557 313.55255127]
[268.49343872 301.22250366]
[259.95117188 288.89248657]
[251.40888977 276.56243896]
[242.86662292 264.23242188]
[234.32435608 251.90238953]
[225.78208923 239.57235718]
[217.23982239 227.24232483]
[208.69755554 214.91229248]
[186.23327637 213.57003784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
1 105 0.0 0.6 colorpair
2 104 0.0 1 colorpair
3 103 0.0 1 colorpair
4 102 0.0 1 colorpair
5 101 0.0 1 colorpair
6 100 0.0 1 colorpair
8 29 0.0 1 colorpair
9 28 0.0 1 colorpair
10 27 0.16 1 colorpair
11 26 0.0 1 colorpair
12 25 0.0 0.6 colorpair
13 24 0.0 1 colorpair
14 23 0.16 1 colorpair
30 75 0.0 1 colorpair
31 74 0.16 1 colorpair
32 73 0.0 1 colorpair
33 72 0.16 1 colorpair
34 71 0.0 0.6 colorpair
36 68 0.0 0.6 colorpair
37 67 0.0 1 colorpair
38 66 0.16 1 colorpair
39 65 0.0 1 colorpair
40 64 0.0 1 colorpair
41 63 0.0 1 colorpair
42 59 0.0 1 colorpair
43 58 0.0 1 colorpair
44 57 0.0 0.6 colorpair
45 56 0.0 1 colorpair
46 55 0.0 1 colorpair
78 99 0.0 1 colorpair
79 98 0.0 1 colorpair
80 97 0.0 1 colorpair
81 96 0.0 1 colorpair
82 95 0.0 1 colorpair
83 94 0.0 1 colorpair
84 93 0.0 1 colorpair
115 138 0.0 0.6 colorpair
116 137 0.16 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 1 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 105 1 gmark
10 cmark
27 cmark
12 25 1 gmark
23 cmark
31 cmark
74 cmark
33 cmark
72 cmark
34 71 1 gmark
36 68 1 gmark
38 cmark
66 cmark
44 57 1 gmark
115 138 1 gmark
116 cmark

% End Annotations
showpage
end
%%EOF
