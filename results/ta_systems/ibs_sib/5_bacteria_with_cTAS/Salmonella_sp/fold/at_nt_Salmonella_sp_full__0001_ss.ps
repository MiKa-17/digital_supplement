%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 18 00:12:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AGGGUGAGAGAGGAUCCCUCCCCCCCCUG___GUCUCUUAGUAAGCCGCGAAACUAAUCACUAACAGAACAACCAGUAUGAUGACCACCUGCAUCAUAACCCUUUCCUUAUUAAAGCCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[144.28477478 178.60688782]
[151.55349731 158.98171997]
[141.18756104 148.13980103]
[130.82162476 137.29788208]
[120.45568848 126.45595551]
[110.08974457 115.61403656]
[102.69525909 125.65984344]
[88.23535919 130.84417725]
[77.16357422 140.96423340]
[66.09178925 151.08430481]
[55.24986267 161.45024109]
[44.64326096 172.05683899]
[34.03665924 182.66343689]
[23.43005753 193.27005005]
[12.82345581 203.87664795]
[9.10400391 219.84841919]
[-6.66416931 224.35362244]
[-18.26011658 212.75767517]
[-13.75492382 196.98950195]
[2.21685457 193.27005005]
[12.82345581 182.66343689]
[23.43005753 172.05683899]
[34.03665924 161.45024109]
[44.64326096 150.84364319]
[45.53250885 146.07463074]
[49.47920227 141.84179688]
[55.97172928 140.01251221]
[67.04351044 129.89245605]
[78.11529541 119.77239990]
[78.19944763 112.27287292]
[66.36787415 121.49317169]
[51.78225327 117.99178314]
[45.42562103 104.40527344]
[52.08455276 90.96434021]
[66.74483490 87.79006958]
[78.36774445 97.27381134]
[78.45188904 89.77428436]
[67.60997009 79.40834808]
[56.76804352 69.04240417]
[45.92612076 58.67646790]
[35.08419800 48.31052780]
[22.10072899 56.01325989]
[7.52025032 59.92634583]
[-7.57526875 59.75939941]
[-22.06564140 55.52481842]
[-34.87558746 47.53683472]
[-45.05451965 36.38820648]
[-51.84709549 22.90623665]
[-54.74925995 8.09137917]
[-53.54565811 -6.95700598]
[-48.32559967 -21.12223053]
[-39.47644806 -33.35313797]
[-27.65487099 -42.74211502]
[-13.73810768 -48.59243774]
[1.24112618 -50.46997452]
[16.17127228 -48.23539734]
[29.94441223 -42.05452728]
[41.53849030 -32.38602448]
[50.09314728 -19.94735909]
[54.97357559 -5.66156006]
[55.81760788 9.41126919]
[52.56261444 24.15262604]
[45.45013809 37.46860504]
[56.29206085 47.83454514]
[67.13398743 58.20048141]
[77.97590637 68.56642151]
[88.81783295 78.93236542]
[84.27284241 64.63749695]
[75.15670776 52.72548676]
[73.74269104 37.79228592]
[80.46097565 24.38092232]
[93.26769257 16.57145119]
[108.26675415 16.73969650]
[120.89507294 24.83447647]
[127.31083679 38.39316559]
[125.56220245 53.29089355]
[116.18100739 64.99552155]
[111.31641388 79.18480682]
[122.38819885 69.06475067]
[133.45997620 58.94469070]
[144.53176880 48.82463074]
[155.60354614 38.70457458]
[166.67533875 28.58451653]
[177.74711609 18.46445656]
[175.87600708 3.06060863]
[183.44580078 -10.48478794]
[197.54577637 -16.96325111]
[212.75419617 -13.88368034]
[223.22309875 -2.43023252]
[224.92700195 12.99300766]
[217.21070862 26.45549011]
[203.04129028 32.78061295]
[187.86718750 29.53624153]
[176.79539490 39.65629959]
[165.72361755 49.77635956]
[154.65182495 59.89641571]
[143.58004761 70.01647186]
[132.50825500 80.13653564]
[121.43647003 90.25659180]
[120.93167114 105.24809265]
[131.29760742 116.09001923]
[141.66354370 126.93193817]
[152.02947998 137.77386475]
[162.39543152 148.61578369]
[171.28186035 144.32778931]
[180.92649841 142.31338501]
[190.75810242 142.68492126]
[200.19601440 145.41363525]
[208.68450928 150.33174133]
[215.72549438 157.14274597]
[220.90766907 165.43931580]
[223.93064880 174.72766113]
[224.62232971 184.45684814]
[222.94862366 194.05155945]
[219.01516724 202.94606018]
[213.06060791 210.61759949]
[221.60287476 222.94763184]
[230.14514160 235.27766418]
[238.68740845 247.60769653]
[247.22967529 259.93774414]
[255.77194214 272.26776123]
[264.31420898 284.59777832]
[272.85647583 296.92782593]
[281.39874268 309.25784302]
[296.44970703 315.76940918]
[298.06698608 332.08862305]
[284.58685303 341.42767334]
[269.87652588 334.17935181]
[269.06872559 317.80010986]
[260.52645874 305.47009277]
[251.98417664 293.14007568]
[243.44190979 280.81002808]
[234.89964294 268.48001099]
[226.35737610 256.14996338]
[217.81510925 243.81993103]
[209.27284241 231.48989868]
[200.73057556 219.15988159]
[180.36262512 222.49810791]
[160.97518921 215.21083069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[8 29]
[9 28]
[10 27]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% Start Annotations
2 104 0.0 1 colorpair
3 103 0.0 1 colorpair
4 102 0.0 1 colorpair
5 101 0.0 1 colorpair
6 100 0.0 1 colorpair
8 29 0.0 1 colorpair
9 28 0.0 1 colorpair
10 27 0.16 1 colorpair
11 24 0.0 1 colorpair
12 23 0.16 1 colorpair
13 22 0.0 1 colorpair
14 21 0.0 1 colorpair
15 20 0.0 1 colorpair
37 67 0.0 1 colorpair
38 66 0.16 1 colorpair
39 65 0.0 1 colorpair
40 64 0.0 1 colorpair
41 63 0.0 1 colorpair
78 99 0.0 1 colorpair
79 98 0.0 1 colorpair
80 97 0.0 1 colorpair
81 96 0.0 1 colorpair
82 95 0.0 1 colorpair
83 94 0.0 1 colorpair
84 93 0.0 1 colorpair
116 137 0.16 1 colorpair
117 136 0.0 1 colorpair
118 135 0.0 1 colorpair
119 134 0.0 1 colorpair
120 133 0.0 1 colorpair
121 132 0.0 1 colorpair
122 131 0.0 1 colorpair
123 130 0.0 1 colorpair
124 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 cmark
27 cmark
12 cmark
23 cmark
38 cmark
66 cmark
116 cmark

% End Annotations
showpage
end
%%EOF
