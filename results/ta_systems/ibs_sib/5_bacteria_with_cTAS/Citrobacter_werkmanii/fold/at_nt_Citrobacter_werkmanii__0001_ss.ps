%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 22:26:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUUAGGGAGGGUUUCCCCUCCCCCUGGUG___UCUUAGUAAGCCGCGAAGCUAAUCACUAAGAGUAUCACCAGUAUGAUGACGUACUUCAUCAUAACCCUUUCCUUAUUUUGGCCCCUUCCUCGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[171.53308105 139.09231567]
[160.86672974 128.54580688]
[150.20036316 117.99931335]
[139.53399658 107.45280457]
[128.86763000 96.90630341]
[122.42407227 115.00448608]
[107.00018311 123.92601776]
[90.84258270 120.96432495]
[80.66368866 131.98204041]
[70.48478699 142.99975586]
[60.30588913 154.01747131]
[50.12699127 165.03518677]
[39.94808960 176.05290222]
[29.76919174 187.07061768]
[26.68420601 203.17697144]
[11.10651016 208.30215454]
[-0.93889701 197.17379761]
[2.93926597 181.23980713]
[18.75147820 176.89170837]
[28.93037605 165.87399292]
[39.10927582 154.85627747]
[49.28817368 143.83857727]
[59.46707535 132.82086182]
[69.64597321 121.80314636]
[79.82487488 110.78543091]
[78.70607758 85.15979004]
[103.97813416 71.24089813]
[93.07614899 60.93814850]
[82.17417145 50.63539124]
[71.27218628 40.33263779]
[60.37020111 30.02988434]
[49.46821594 19.72713089]
[32.93035889 23.07880211]
[17.79030991 16.01125526]
[9.89789104 1.47259688]
[12.17294312 -14.74571228]
[1.04090655 -24.79945564]
[-10.09113026 -34.85319901]
[-21.22316551 -44.90694427]
[-32.35520172 -54.96068573]
[-43.48723984 -65.01443481]
[-54.61927414 -75.06817627]
[-75.77312469 -78.12529755]
[-81.58567047 -97.88088226]
[-93.37329102 -107.15731049]
[-105.16091156 -116.43373108]
[-120.82243347 -114.31420135]
[-133.34474182 -123.95616150]
[-135.29856873 -139.63920593]
[-125.52474976 -152.05886841]
[-109.82191467 -153.84678650]
[-97.50628662 -143.94219971]
[-95.88449097 -128.22134399]
[-84.09687042 -118.94493103]
[-72.30924988 -109.66850281]
[-63.63831711 -112.17290497]
[-54.66166306 -110.33048248]
[-47.46392059 -104.43781281]
[-43.77726364 -95.74678040]
[-44.56553268 -86.20021057]
[-33.43349457 -76.14646912]
[-22.30145836 -66.09272003]
[-11.16942215 -56.03897858]
[-0.03738607 -45.98523712]
[11.09465027 -35.93149185]
[22.22668648 -25.87774849]
[35.02500153 -29.83864403]
[48.21029663 -26.91406822]
[58.29444122 -17.76757050]
[62.55528641 -4.72302294]
[59.77096939 8.82514668]
[70.67295074 19.12790108]
[81.57493591 29.43065453]
[92.47692108 39.73340988]
[103.37890625 50.03616333]
[114.28089142 60.33891678]
[129.28088379 60.33891678]
[140.18287659 50.03616333]
[151.08485413 39.73340988]
[161.98684692 29.43065453]
[172.88882446 19.12790108]
[183.79081726 8.82514668]
[194.69279480 -1.47760785]
[205.59477234 -11.78036213]
[205.79063416 -27.58343697]
[217.16175842 -38.55945206]
[232.96188354 -38.19653320]
[243.81706238 -26.70999336]
[243.28710938 -10.91459274]
[231.68644714 -0.18146190]
[215.89753723 -0.87837780]
[204.99554443 9.42437649]
[194.09356689 19.72713089]
[183.19157410 30.02988434]
[172.28959656 40.33263779]
[161.38761902 50.63539124]
[150.48562622 60.93814850]
[139.58364868 71.24089813]
[139.41413879 86.23994446]
[150.08050537 96.78644562]
[160.74685669 107.33294678]
[171.41322327 117.87944794]
[182.07958984 128.42594910]
[189.86735535 124.63710785]
[198.31971741 122.82395172]
[206.94458008 123.08430481]
[215.24163818 125.39545441]
[222.73141479 129.61598206]
[228.98297119 135.49433899]
[233.63870239 142.68385315]
[236.43479919 150.76318359]
[237.21615601 159.26094055]
[235.94497681 167.68330383]
[232.70254517 175.54260254]
[227.68403625 182.38565063]
[236.27996826 194.67832947]
[244.87590027 206.97100830]
[253.47183228 219.26368713]
[262.06774902 231.55636597]
[270.66369629 243.84904480]
[279.25961304 256.14172363]
[287.85556030 268.43441772]
[296.45147705 280.72708130]
[311.53070068 287.17297363]
[313.21908569 303.48495483]
[299.77978516 312.88269043]
[285.03799438 305.69857788]
[284.15881348 289.32302856]
[275.56286621 277.03033447]
[266.96694946 264.73764038]
[258.37100220 252.44497681]
[249.77507019 240.15229797]
[241.17915344 227.85961914]
[232.58322144 215.56694031]
[223.98728943 203.27426147]
[215.39135742 190.98158264]
[193.47039795 192.89373779]
[174.57229614 181.38365173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 99]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[44 55]
[45 54]
[46 53]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[115 136]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% Start Annotations
1 103 0.0 1 colorpair
2 102 0.0 1 colorpair
3 101 0.0 1 colorpair
4 100 0.0 1 colorpair
5 99 0.0 1 colorpair
8 25 0.0 1 colorpair
9 24 0.0 0.6 colorpair
10 23 0.0 1 colorpair
11 22 0.16 1 colorpair
12 21 0.0 0.6 colorpair
13 20 0.0 1 colorpair
14 19 0.16 1 colorpair
27 76 0.0 1 colorpair
28 75 0.0 1 colorpair
29 74 0.0 1 colorpair
30 73 0.0 0.6 colorpair
31 72 0.0 1 colorpair
32 71 0.16 1 colorpair
36 66 0.0 1 colorpair
37 65 0.16 1 colorpair
38 64 0.0 1 colorpair
39 63 0.0 1 colorpair
40 62 0.0 1 colorpair
41 61 0.0 0.6 colorpair
42 60 0.0 0.6 colorpair
44 55 0.0 1 colorpair
45 54 0.0 1 colorpair
46 53 0.0 0.6 colorpair
77 98 0.0 1 colorpair
78 97 0.0 1 colorpair
79 96 0.0 1 colorpair
80 95 0.0 1 colorpair
81 94 0.0 1 colorpair
82 93 0.0 1 colorpair
83 92 0.0 1 colorpair
84 91 0.0 1 colorpair
115 136 0.16 1 colorpair
116 135 0.16 1 colorpair
117 134 0.0 1 colorpair
118 133 0.0 1 colorpair
119 132 0.0 1 colorpair
120 131 0.0 1 colorpair
121 130 0.0 1 colorpair
122 129 0.0 1 colorpair
123 128 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 24 1 gmark
11 cmark
22 cmark
12 21 1 gmark
14 cmark
19 cmark
30 73 1 gmark
32 cmark
71 cmark
37 cmark
65 cmark
41 61 1 gmark
42 60 1 gmark
46 53 1 gmark
115 cmark
135 cmark
123 128 1 gmark

% End Annotations
showpage
end
%%EOF
