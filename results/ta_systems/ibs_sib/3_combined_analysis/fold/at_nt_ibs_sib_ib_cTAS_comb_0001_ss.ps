%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 19:50:14 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AAGGGUAAGGGAGGAUUU____CUCCCCCC__UC_UG_AU__GUUGUUAGUAAGCCGGGAAACUUAUCAGUAACAGCACAACCAGUAUGAUGACGAGCUUCAUCAUAACCCUUUCCUUAUU_UAAGG_CCC_C_UUCCUCGGGAGGG_GCUUU_\
) } def
/len { sequence length } bind def

/coor [
[-159.80212402 702.29058838]
[-174.79505920 702.82830811]
[-189.79696655 702.68792725]
[-204.77722168 701.86981201]
[-219.70520020 700.37561035]
[-234.55041504 698.20837402]
[-249.28251648 695.37249756]
[-263.87145996 691.87384033]
[-278.28738403 687.71954346]
[-292.50085449 682.91809082]
[-306.48284912 677.47924805]
[-320.20477295 671.41412354]
[-333.63864136 664.73516846]
[-346.75695801 657.45593262]
[-359.53295898 649.59143066]
[-371.94055176 641.15759277]
[-383.95434570 632.17175293]
[-395.54980469 622.65216064]
[-406.70327759 612.61834717]
[-417.39193726 602.09082031]
[-427.59399414 591.09100342]
[-437.28854370 579.64141846]
[-446.45584106 567.76550293]
[-455.07711792 555.48742676]
[-463.13479614 542.83233643]
[-470.61236572 529.82611084]
[-477.49456787 516.49523926]
[-483.76739502 502.86697388]
[-489.41793823 488.96917725]
[-494.43475342 474.83026123]
[-498.80749512 460.47909546]
[-502.52731323 445.94500732]
[-505.58657837 431.25765991]
[-507.97900391 416.44705200]
[-509.69973755 401.54348755]
[-510.74526978 386.57739258]
[-511.11346436 371.57934570]
[-510.80355835 356.57998657]
[-509.81616211 341.60992432]
[-508.15335083 326.69979858]
[-505.81845093 311.88003540]
[-502.81628418 297.18090820]
[-499.15298462 282.63247681]
[-494.83599854 268.26440430]
[-489.87417603 254.10610962]
[-484.27764893 240.18649292]
[-478.05783081 226.53398132]
[-471.22744751 213.17646790]
[-463.80044556 200.14125061]
[-455.79202271 187.45495605]
[-447.21850586 175.14349365]
[-438.09741211 163.23202515]
[-428.44741821 151.74488831]
[-418.28817749 140.70553589]
[-407.64050293 130.13653564]
[-396.52609253 120.05946350]
[-384.96768188 110.49492645]
[-372.98889160 101.46244812]
[-360.61416626 92.98049164]
[-347.86883545 85.06638336]
[-334.77886963 77.73628235]
[-321.37106323 71.00517273]
[-307.67279053 64.88680267]
[-293.71203613 59.39367676]
[-279.51730347 54.53700638]
[-265.11764526 50.32672501]
[-250.54241943 46.77142334]
[-235.82144165 43.87837601]
[-220.98475647 41.65348434]
[-206.06269836 40.10129547]
[-191.08573914 39.22498322]
[-176.08448792 39.02633667]
[-161.08956909 39.50576019]
[-146.13165283 40.66227722]
[-131.24125671 42.49352264]
[-116.44882965 44.99575424]
[-101.78457642 48.16386414]
[-87.27846527 51.99137497]
[-72.96012115 56.47047424]
[-58.85880661 61.59200287]
[-45.00332642 67.34550476]
[-31.42198372 73.71922302]
[-18.14252472 80.70013428]
[-5.19208193 88.27398682]
[7.40289068 96.42529297]
[19.61666107 105.13741302]
[31.42427635 114.39253998]
[42.80161667 124.17176819]
[53.72543716 134.45512390]
[64.49002075 124.00888062]
[75.25460052 113.56265259]
[86.01918030 103.11641693]
[90.02458191 89.72058105]
[103.53458405 86.11900330]
[101.20423126 70.77791595]
[108.36607361 57.01246643]
[122.26625824 50.11575699]
[137.55986023 52.73971176]
[148.36619568 63.87536621]
[150.52999878 79.24082947]
[143.21923828 92.92778015]
[129.24507141 99.67329407]
[113.98081970 96.88358307]
[109.97541809 110.27941895]
[96.46541595 113.88099670]
[85.70082855 124.32723236]
[74.93624878 134.77346802]
[64.17166901 145.21969604]
[74.12255859 156.44720459]
[83.55593872 168.11289978]
[92.45254517 180.19296265]
[100.79418945 192.66267395]
[108.56384277 205.49661255]
[115.74562836 218.66851807]
[122.32487488 232.15148926]
[128.28813171 245.91799927]
[133.62322998 259.93991089]
[138.31925964 274.18856812]
[142.36663818 288.63488770]
[145.75709534 303.24932861]
[148.48368835 318.00204468]
[150.54086304 332.86291504]
[151.92440796 347.80154419]
[152.63151550 362.78744507]
[152.66070557 377.78997803]
[152.01194763 392.77853394]
[150.68656921 407.72244263]
[148.68725586 422.59118652]
[146.01811218 437.35443115]
[142.68457031 451.98196411]
[138.69346619 466.44390869]
[134.05293274 480.71075439]
[128.77246094 494.75332642]
[122.86283112 508.54293823]
[116.33612061 522.05145264]
[109.20566559 535.25115967]
[101.48603058 548.11523438]
[93.19298553 560.61737061]
[84.34347534 572.73193359]
[74.95557404 584.43426514]
[65.04846954 595.70043945]
[54.64239120 606.50744629]
[43.75860596 616.83312988]
[32.41934204 626.65649414]
[20.64777184 635.95739746]
[8.46793938 644.71691895]
[-4.09527063 652.91711426]
[-17.01619339 660.54119873]
[-30.26842880 667.57366943]
[-43.82490921 674.00006104]
[-57.65793228 679.80737305]
[-71.73924255 684.98364258]
[-86.04007721 689.51831055]
[-100.53121185 693.40216064]
[-115.18304443 696.62719727]
[-129.96563721 699.18688965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[89 108]
[90 107]
[91 106]
[92 105]
[94 103]
] def

init

% Start Annotations
89 108 0.0 1 colorpair
90 107 0.0 1 colorpair
91 106 0.0 1 colorpair
92 105 0.16 1 colorpair
94 103 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
92 cmark
103 cmark

% End Annotations
showpage
end
%%EOF
