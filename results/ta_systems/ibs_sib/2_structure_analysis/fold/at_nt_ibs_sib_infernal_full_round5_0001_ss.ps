%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 14:36:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________AGGGU_AAGG__GAGG__AUUU_CUC_C_C__C_CC_UCU_GAUU___CU_GUUAGUAAGCUGGGAA__ACUUAUCAGUAAC_AGUACCACCAGUAU_GAUGACGAGCUUCA___UCAUAACCCUUUCCUUAU_UUAAG_______G_CCC_C_UUCCU__CGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[-37.05103302 141.31964111]
[-51.89441299 143.49346924]
[-66.80798340 145.11734009]
[-81.77137756 146.18902588]
[-96.76414490 146.70704651]
[-111.76581573 146.67071533]
[-126.75590515 146.08007812]
[-141.71392822 144.93592834]
[-156.61946106 143.23985291]
[-171.45213318 140.99414062]
[-186.19169617 138.20187378]
[-200.81802368 134.86686707]
[-215.31111145 130.99366760]
[-229.65119934 126.58757782]
[-243.81866455 121.65460968]
[-257.79418945 116.20149994]
[-271.55865479 110.23569489]
[-285.09329224 103.76535034]
[-298.37957764 96.79929352]
[-311.39938354 89.34704590]
[-324.13494873 81.41879272]
[-336.56884766 73.02535248]
[-348.68408203 64.17819214]
[-360.46414185 54.88939285]
[-371.89291382 45.17164993]
[-382.95480347 35.03823471]
[-393.63470459 24.50298500]
[-403.91799927 13.58029079]
[-413.79067993 2.28507352]
[-423.23922729 -9.36723995]
[-432.25076294 -21.36073494]
[-440.81295776 -33.67902756]
[-448.91412354 -46.30529404]
[-456.54318237 -59.22228622]
[-463.68975830 -72.41236877]
[-470.34405518 -85.85751343]
[-476.49697876 -99.53936005]
[-482.14013672 -113.43923187]
[-487.26580811 -127.53812408]
[-491.86700439 -141.81680298]
[-495.93746948 -156.25573730]
[-499.47158813 -170.83522034]
[-502.46456909 -185.53535461]
[-504.91229248 -200.33602905]
[-506.81146240 -215.21704102]
[-508.15945435 -230.15808105]
[-508.95443726 -245.13871765]
[-509.19531250 -260.13848877]
[-508.88174438 -275.13693237]
[-508.01419067 -290.11355591]
[-506.59381104 -305.04788208]
[-504.62255859 -319.91952515]
[-502.10311890 -334.70816040]
[-499.03897095 -349.39361572]
[-495.43423462 -363.95581055]
[-491.29385376 -378.37484741]
[-486.62350464 -392.63104248]
[-481.42956543 -406.70495605]
[-475.71911621 -420.57730103]
[-469.49996948 -434.22918701]
[-462.78060913 -447.64190674]
[-455.57022095 -460.79721069]
[-447.87863159 -473.67709351]
[-439.71636963 -486.26394653]
[-431.09460449 -498.54061890]
[-422.02505493 -510.49029541]
[-412.52014160 -522.09667969]
[-402.59286499 -533.34393311]
[-392.25674438 -544.21667480]
[-381.52593994 -554.70001221]
[-370.41506958 -564.77972412]
[-358.93933105 -574.44195557]
[-347.11441040 -583.67358398]
[-334.95642090 -592.46191406]
[-322.48202515 -600.79504395]
[-309.70819092 -608.66149902]
[-296.65243530 -616.05053711]
[-283.33251953 -622.95214844]
[-269.76669312 -629.35681152]
[-255.97348022 -635.25585938]
[-241.97171021 -640.64117432]
[-227.78050232 -645.50543213]
[-213.41923523 -649.84197998]
[-198.90753174 -653.64489746]
[-184.26522827 -656.90899658]
[-169.51229858 -659.62982178]
[-154.66891479 -661.80358887]
[-139.75534058 -663.42742920]
[-124.79195404 -664.49908447]
[-109.79917908 -665.01708984]
[-94.79750824 -664.98071289]
[-79.80742645 -664.39007568]
[-64.84940338 -663.24584961]
[-49.94387817 -661.54974365]
[-35.11120605 -659.30401611]
[-20.37164688 -656.51171875]
[-5.74533319 -653.17669678]
[8.74775600 -649.30346680]
[23.08782578 -644.89733887]
[37.25529099 -639.96435547]
[51.23079681 -634.51116943]
[64.99525452 -628.54534912]
[78.52986908 -622.07501221]
[91.81614685 -615.10888672]
[104.83594513 -607.65661621]
[117.57147980 -599.72833252]
[130.00535583 -591.33489990]
[142.12059021 -582.48767090]
[153.90061951 -573.19885254]
[165.32939148 -563.48114014]
[176.39125061 -553.34765625]
[187.07112122 -542.81237793]
[197.35440063 -531.88970947]
[207.22703552 -520.59442139]
[216.67556763 -508.94210815]
[225.68707275 -496.94860840]
[234.24923706 -484.63027954]
[242.35038757 -472.00399780]
[249.97943115 -459.08700562]
[257.12597656 -445.89691162]
[263.78021240 -432.45175171]
[269.93310547 -418.76986694]
[275.57626343 -404.86999512]
[280.70190430 -390.77108765]
[285.30307007 -376.49240112]
[289.37350464 -362.05346680]
[292.90759277 -347.47396851]
[295.90054321 -332.77383423]
[298.34823608 -317.97314453]
[300.24737549 -303.09213257]
[301.59533691 -288.15109253]
[302.39025879 -273.17044067]
[302.63110352 -258.17065430]
[302.31753540 -243.17222595]
[301.44992065 -228.19561768]
[300.02954102 -213.26129150]
[298.05825806 -198.38966370]
[295.53878784 -183.60102844]
[292.47457886 -168.91558838]
[288.86981201 -154.35339355]
[284.72943115 -139.93435669]
[280.05905151 -125.67816925]
[274.86508179 -111.60428619]
[269.15460205 -97.73193359]
[262.93542480 -84.08007812]
[256.21603394 -70.66734314]
[249.00559998 -57.51206970]
[241.31399536 -44.63221359]
[233.15171814 -32.04536819]
[224.52990723 -19.76872826]
[215.46034241 -7.81906176]
[205.95541382 3.78730965]
[196.02810669 15.03453255]
[185.69197083 25.90724564]
[174.96113586 36.39059830]
[163.85025024 46.47026825]
[152.37449646 56.13249207]
[140.54954529 65.36406708]
[128.39154053 74.15238953]
[115.91710663 82.48545837]
[103.14327240 90.35188293]
[109.55452728 95.27306366]
[110.54407501 103.69427490]
[117.70710754 116.87345886]
[133.10923767 118.75864410]
[144.43876648 129.36154175]
[147.33924866 144.60513306]
[140.69540405 158.62792969]
[127.06190491 166.03788757]
[111.68112946 163.98573303]
[100.46729279 153.26054382]
[97.73234558 137.98640442]
[104.52792358 124.03649902]
[97.36489105 110.85731506]
[90.08898926 97.74010468]
[76.76911163 104.64171600]
[63.20330048 111.04643250]
[49.41009521 116.94549561]
[35.40832901 122.33085632]
[21.21712685 127.19514465]
[6.85587358 131.53172302]
[-7.65581465 135.33467102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[161 175]
[163 174]
[164 173]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
161 175 76 gmark
161 cmark
175 cmark
163 174 80 gmark
163 cmark
174 cmark
164 173 78 gmark
164 cmark
173 cmark

% End Annotations
showpage
end
%%EOF
