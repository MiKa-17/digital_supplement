%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 14:36:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______________AGGGU_AAGGGAGGA__UUUCUCCC__C__CC__CC_UG_AUU___CU_CUUAGUAAGCUGGGAAGCUUAUCACUAAC_AGUACCACCAGUAU_GAUGACGAGCUUCA___UCAUAACCCUUUCCUUA_UUUAAG_______G_CCC_C_UUCCU__CGGGAGGGGCUUU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50727844 91.98785400]
[62.54078293 90.96414948]
[47.61796570 89.43006134]
[32.75622177 87.38738251]
[17.97287941 84.83850098]
[3.28517938 81.78638458]
[-11.28975582 78.23459625]
[-25.73493195 74.18727112]
[-40.03350830 69.64913177]
[-54.16880798 64.62546539]
[-68.12435913 59.12213516]
[-81.88388062 53.14555359]
[-95.43133545 46.70269394]
[-108.75092316 39.80106354]
[-121.82711792 32.44871140]
[-134.64466858 24.65420723]
[-147.18864441 16.42664146]
[-159.44439697 7.77560902]
[-171.39765930 -1.28880656]
[-183.03446960 -10.75603485]
[-194.34127808 -20.61503983]
[-205.30490112 -30.85432243]
[-215.91255188 -41.46194839]
[-226.15187073 -52.42554474]
[-236.01089478 -63.73233414]
[-245.47816467 -75.36912537]
[-254.54260254 -87.32235718]
[-263.19366455 -99.57809448]
[-271.42126465 -112.12204742]
[-279.21578979 -124.93957520]
[-286.56817627 -138.01574707]
[-293.46984863 -151.33532715]
[-299.91275024 -164.88276672]
[-305.88934326 -178.64227295]
[-311.39273071 -192.59780884]
[-316.41641235 -206.73309326]
[-320.95458984 -221.03166199]
[-325.00195312 -235.47682190]
[-328.55377197 -250.05175781]
[-331.60592651 -264.73944092]
[-334.15484619 -279.52276611]
[-336.19757080 -294.38452148]
[-337.73168945 -309.30734253]
[-338.75543213 -324.27383423]
[-339.26763916 -339.26654053]
[-339.26763916 -354.26800537]
[-338.75549316 -369.26074219]
[-337.73175049 -384.22723389]
[-336.19766235 -399.15005493]
[-334.15496826 -414.01177979]
[-331.60607910 -428.79513550]
[-328.55395508 -443.48281860]
[-325.00213623 -458.05773926]
[-320.95480347 -472.50292969]
[-316.41665649 -486.80148315]
[-311.39297485 -500.93679810]
[-305.88964844 -514.89233398]
[-299.91305542 -528.65185547]
[-293.47018433 -542.19927979]
[-286.56854248 -555.51885986]
[-279.21615601 -568.59509277]
[-271.42166138 -581.41259766]
[-263.19409180 -593.95660400]
[-254.54302979 -606.21234131]
[-245.47860718 -618.16558838]
[-236.01136780 -629.80236816]
[-226.15235901 -641.10919189]
[-215.91307068 -652.07281494]
[-205.30543518 -662.68048096]
[-194.34182739 -672.91973877]
[-183.03503418 -682.77880859]
[-171.39822388 -692.24603271]
[-159.44499207 -701.31048584]
[-147.18923950 -709.96148682]
[-134.64529419 -718.18908691]
[-121.82775116 -725.98364258]
[-108.75156403 -733.33599854]
[-95.43199158 -740.23767090]
[-81.88454437 -746.68054199]
[-68.12503052 -752.65716553]
[-54.16949463 -758.16052246]
[-40.03420258 -763.18420410]
[-25.73563385 -767.72235107]
[-11.29046440 -771.76971436]
[3.28446460 -775.32153320]
[17.97216034 -778.37365723]
[32.75549698 -780.92254639]
[47.61723709 -782.96527100]
[62.54005432 -784.49938965]
[77.50654602 -785.52313232]
[92.49926758 -786.03527832]
[107.50073242 -786.03527832]
[122.49345398 -785.52313232]
[137.45994568 -784.49938965]
[152.38276672 -782.96527100]
[167.24450684 -780.92254639]
[182.02784729 -778.37365723]
[196.71553040 -775.32153320]
[211.29046631 -771.76971436]
[225.73564148 -767.72235107]
[240.03419495 -763.18420410]
[254.16949463 -758.16052246]
[268.12503052 -752.65716553]
[281.88455200 -746.68054199]
[295.43197632 -740.23767090]
[308.75155640 -733.33599854]
[321.82775879 -725.98364258]
[334.64529419 -718.18908691]
[347.18923950 -709.96148682]
[359.44497681 -701.31048584]
[371.39822388 -692.24603271]
[383.03503418 -682.77880859]
[394.34182739 -672.91973877]
[405.30541992 -662.68048096]
[415.91305542 -652.07281494]
[426.15234375 -641.10919189]
[436.01138306 -629.80236816]
[445.47860718 -618.16558838]
[454.54302979 -606.21234131]
[463.19409180 -593.95660400]
[471.42166138 -581.41259766]
[479.21615601 -568.59509277]
[486.56854248 -555.51885986]
[493.47018433 -542.19927979]
[499.91305542 -528.65185547]
[505.88964844 -514.89233398]
[511.39297485 -500.93679810]
[516.41662598 -486.80148315]
[520.95483398 -472.50292969]
[525.00213623 -458.05773926]
[528.55395508 -443.48281860]
[531.60607910 -428.79513550]
[534.15496826 -414.01177979]
[536.19763184 -399.15005493]
[537.73175049 -384.22723389]
[538.75549316 -369.26074219]
[539.26763916 -354.26800537]
[539.26763916 -339.26654053]
[538.75543213 -324.27383423]
[537.73168945 -309.30734253]
[536.19757080 -294.38452148]
[534.15484619 -279.52276611]
[531.60595703 -264.73944092]
[528.55377197 -250.05175781]
[525.00195312 -235.47682190]
[520.95458984 -221.03166199]
[516.41644287 -206.73309326]
[511.39273071 -192.59780884]
[505.88934326 -178.64227295]
[499.91275024 -164.88276672]
[493.46984863 -151.33532715]
[486.56817627 -138.01574707]
[479.21578979 -124.93957520]
[471.42126465 -112.12204742]
[463.19366455 -99.57809448]
[454.54260254 -87.32235718]
[445.47814941 -75.36912537]
[436.01089478 -63.73233414]
[426.15185547 -52.42554474]
[415.91256714 -41.46194839]
[405.30490112 -30.85432243]
[394.34127808 -20.61503983]
[383.03448486 -10.75603485]
[371.39764404 -1.28880656]
[359.44439697 7.77560902]
[347.18862915 16.42664146]
[334.64468384 24.65420723]
[321.82711792 32.44871140]
[308.75091553 39.80106354]
[295.43133545 46.70269394]
[281.88388062 53.14555359]
[268.12435913 59.12213516]
[254.16880798 64.62546539]
[240.03350830 69.64913177]
[225.73493958 74.18727112]
[211.28974915 78.23459625]
[196.71481323 81.78638458]
[182.02711487 84.83850098]
[167.24377441 87.38738251]
[152.38203430 89.43006134]
[137.45921326 90.96414948]
[122.49272156 91.98785400]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
