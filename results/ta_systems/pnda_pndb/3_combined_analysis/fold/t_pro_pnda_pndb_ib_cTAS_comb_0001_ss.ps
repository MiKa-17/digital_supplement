%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 21:03:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___GGGGCUAUGAUGCCACAGCGAACGUUUUUAAUGAUGUUAAUCGUCGUCUGUGUGACGAUACUGUGUUUUGUCUGGAUGGUGAGGGAUUCGCUUUGCGGAUUCCGUCUCCAGCAGGGAAACACAGUGCUUGUGGCAACGUUAGCCUACGAAGUUAAACGUU\
) } def
/len { sequence length } bind def

/coor [
[72.46461487 329.74624634]
[66.98798370 315.73187256]
[64.26283264 300.93423462]
[64.38766479 285.88827515]
[67.35797882 271.13787842]
[73.06638336 257.21630859]
[81.30653381 244.62675476]
[91.78055573 233.82438660]
[104.10981750 225.19966125]
[117.84861755 219.06436157]
[114.43081665 204.45893860]
[111.01301575 189.85350037]
[100.57928467 179.22398376]
[104.96864319 164.02384949]
[101.55084229 149.41842651]
[98.13303375 134.81298828]
[94.71523285 120.20755768]
[90.71241760 134.66362000]
[86.70960999 149.11965942]
[88.82596588 163.96961975]
[86.10310364 178.72041321]
[78.82453918 191.83615112]
[67.74813843 201.95115662]
[54.02722549 208.01222229]
[39.09047318 209.38824463]
[24.49315643 205.93595886]
[11.75520420 198.01481628]
[2.20294070 186.44960022]
[-3.16901326 172.44451904]
[-3.80130935 157.45785522]
[0.37188977 143.05006409]
[8.91605377 130.72134399]
[20.94153214 121.75541687]
[35.19618225 117.08583832]
[50.19289017 117.19834900]
[63.98403549 111.29882050]
[77.77517700 105.39929962]
[62.84392929 103.96479034]
[47.91268158 102.53028107]
[37.73449326 114.24285126]
[22.60815239 117.70310974]
[8.35004330 111.58053589]
[0.44270027 98.22937012]
[1.92665839 82.78341675]
[12.23130512 71.18195343]
[27.39429283 67.88598633]
[41.58514404 74.16287994]
[49.34718704 87.59903717]
[64.27843475 89.03354645]
[79.20968628 90.46805573]
[91.56071472 81.95617676]
[95.53543854 67.49237823]
[99.51016235 53.02857208]
[103.48488617 38.56476974]
[107.45960999 24.10096931]
[111.43433380 9.63716698]
[105.60404968 6.10735416]
[100.45351410 1.65375388]
[96.12728882 -3.59573483]
[92.74629974 -9.49091816]
[90.40447235 -15.86360359]
[89.16613007 -22.53240013]
[89.06420135 -29.30788231]
[90.09938049 -35.99796295]
[92.24015808 -42.41334915]
[95.42376709 -48.37289810]
[99.55802917 -53.70871353]
[104.52401733 -58.27090836]
[110.17948914 -61.93177795]
[116.36294556 -64.58940887]
[122.89825439 -66.17047882]
[129.59963989 -66.63231659]
[136.27702332 -65.96402740]
[142.74133301 -64.18672943]
[150.40660095 -77.08027649]
[158.07188416 -89.97382355]
[165.73716736 -102.86736298]
[155.80192566 -114.25807190]
[149.88188171 -128.14315796]
[148.54524231 -143.15788269]
[151.91036987 -157.83067322]
[159.63545227 -170.72741699]
[170.95314026 -180.59153748]
[184.74679565 -186.46650696]
[199.66062927 -187.78854370]
[214.23295593 -184.44071960]
[221.89823914 -197.33427429]
[229.56352234 -210.22781372]
[229.96492004 -226.04393005]
[243.11953735 -233.02999878]
[250.78482056 -245.92353821]
[258.45010376 -258.81707764]
[266.11538696 -271.71063232]
[273.78067017 -284.60418701]
[276.67752075 -301.30880737]
[293.53125000 -303.14947510]
[299.96554565 -287.46392822]
[286.67419434 -276.93890381]
[279.00894165 -264.04534912]
[271.34365845 -251.15180969]
[263.67837524 -238.25825500]
[256.01309204 -225.36471558]
[256.15997314 -210.47084045]
[242.45706177 -202.56253052]
[234.79179382 -189.66899109]
[227.12651062 -176.77545166]
[237.02909851 -165.57278442]
[242.99230957 -151.83923340]
[244.42057800 -136.91474915]
[241.16149902 -122.25974274]
[233.52198792 -109.31214142]
[222.23934937 -99.34634399]
[208.41020203 -93.34777069]
[193.38385010 -91.91541290]
[178.63070679 -95.20208740]
[170.96543884 -82.30854034]
[163.30015564 -69.41499329]
[155.63487244 -56.52145386]
[168.22235107 -35.49671173]
[166.13365173 -10.97314739]
[150.03175354 7.78327703]
[125.89813232 13.61188889]
[121.92340851 28.07569122]
[117.94868469 42.53949356]
[113.97396851 57.00329590]
[109.99924469 71.46710205]
[106.02452087 85.93090057]
[109.97118378 87.75400543]
[113.35591125 90.69203949]
[115.86270905 94.56883240]
[117.23153687 99.11874390]
[117.28353882 104.00456238]
[115.94043732 108.84246063]
[113.23638916 113.23213196]
[109.32066345 116.78975677]
[112.73846436 131.39518738]
[116.15627289 146.00062561]
[119.57407379 160.60604858]
[130.25225830 172.28024292]
[125.61844635 186.43569946]
[129.03623962 201.04113770]
[132.45405579 215.64656067]
[147.48864746 215.04861450]
[162.36465454 217.30706787]
[176.54434204 222.34025574]
[189.51510620 229.96624756]
[200.80807495 239.90936279]
[210.01499939 251.81015015]
[216.80307007 265.23843384]
[220.92687988 279.70877075]
[222.23738098 294.69805908]
[220.68717957 309.66448975]
[216.33232117 324.06698608]
[209.33024597 337.38491821]
[199.93405151 349.13684082]
[188.48342896 358.89797974]
[175.39227295 366.31539917]
[161.13386536 371.12103271]
[146.22361755 373.14114380]
[131.20051575 372.30267334]
[116.60764313 368.63598633]
[102.97253418 362.27355957]
[90.78807831 353.44546509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 142]
[11 141]
[12 140]
[14 138]
[15 137]
[16 136]
[17 135]
[37 50]
[38 49]
[39 48]
[51 127]
[52 126]
[53 125]
[54 124]
[55 123]
[56 122]
[74 118]
[75 117]
[76 116]
[77 115]
[86 106]
[87 105]
[88 104]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% Start Annotations
11 141 0.32 0.2 colorpair
12 140 0.16 0.2 colorpair
14 138 0.16 1 colorpair
15 137 0.0 1 colorpair
16 136 0.16 1 colorpair
17 135 0.0 1 colorpair
37 50 0.0 1 colorpair
39 48 0.16 1 colorpair
51 127 0.0 1 colorpair
52 126 0.16 1 colorpair
53 125 0.0 1 colorpair
54 124 0.0 1 colorpair
56 122 0.16 1 colorpair
74 118 0.16 1 colorpair
75 117 0.0 0.6 colorpair
76 116 0.0 1 colorpair
77 115 0.0 1 colorpair
86 106 0.0 0.6 colorpair
87 105 0.32 0.2 colorpair
88 104 0.0 1 colorpair
90 102 0.32 1 colorpair
91 101 0.16 0.6 colorpair
92 100 0.0 1 colorpair
93 99 0.16 1 colorpair
94 98 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 142 3 gmark
10 cmark
11 141 2 gmark
11 cmark
141 cmark
12 140 2 gmark
12 cmark
140 cmark
138 cmark
16 cmark
38 49 3 gmark
49 cmark
39 cmark
48 cmark
126 cmark
55 123 3 gmark
123 cmark
122 cmark
74 cmark
75 117 1 gmark
86 106 1 gmark
87 105 2 gmark
87 cmark
105 cmark
90 cmark
102 cmark
91 101 1 gmark
101 cmark
93 cmark
99 cmark
94 cmark

% End Annotations
showpage
end
%%EOF
