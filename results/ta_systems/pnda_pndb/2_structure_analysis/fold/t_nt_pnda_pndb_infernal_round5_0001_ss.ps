%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 16:43:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCCGCA__AAAAUAUCUGUUAUUUGGUU___UAAUAGUGAUUUG______UUUCACGAUUUUAUUUUUCACCU_GGAUGGUAAGAGAUUCGCUGUGUGAAUUGCAUAUCAAACAGGGAAAUACUGAGCU___GGCGGCAUU___GUUAGCCUGCGAAGUU___AAACAGUAA\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50804901 91.96152496]
[62.54508591 90.88524628]
[47.63040161 89.27254486]
[32.78321838 87.12550354]
[18.02267456 84.44689178]
[3.36779714 81.24015045]
[-11.16252613 77.50942993]
[-25.54956627 73.25952148]
[-39.77478027 68.49591827]
[-53.81982803 63.22474670]
[-67.66661072 57.45281219]
[-81.29727936 51.18755341]
[-94.69425964 44.43703842]
[-107.84029388 37.20997238]
[-120.71842957 29.51567459]
[-133.31207275 21.36405754]
[-145.60498047 12.76562977]
[-157.58131409 3.73147416]
[-169.22564697 -5.72676420]
[-180.52294922 -15.59689426]
[-191.45867920 -25.86619377]
[-202.01872253 -36.52142715]
[-212.18948364 -47.54885864]
[-221.95783997 -58.93427277]
[-231.31121826 -70.66300201]
[-240.23754883 -82.71991730]
[-248.72532654 -95.08948517]
[-256.76361084 -107.75576019]
[-264.34204102 -120.70242310]
[-271.45086670 -133.91276550]
[-278.08090210 -147.36978149]
[-284.22360229 -161.05612183]
[-289.87106323 -174.95414734]
[-295.01599121 -189.04592896]
[-299.65176392 -203.31330872]
[-303.77239990 -217.73789978]
[-307.37258911 -232.30111694]
[-310.44769287 -246.98417664]
[-312.99377441 -261.76815796]
[-315.00750732 -276.63400269]
[-316.48629761 -291.56256104]
[-317.42828369 -306.53457642]
[-317.83221436 -321.53076172]
[-317.69757080 -336.53176880]
[-317.02453613 -351.51831055]
[-315.81396484 -366.47100830]
[-314.06744385 -381.37060547]
[-311.78723145 -396.19790649]
[-308.97619629 -410.93380737]
[-305.63806152 -425.55932617]
[-301.77703857 -440.05557251]
[-297.39816284 -454.40386963]
[-292.50704956 -468.58575439]
[-287.11001587 -482.58291626]
[-281.21398926 -496.37731934]
[-274.82662964 -509.95120239]
[-267.95611572 -523.28704834]
[-260.61135864 -536.36767578]
[-252.80175781 -549.17620850]
[-244.53741455 -561.69616699]
[-235.82897949 -573.91137695]
[-226.68768311 -585.80615234]
[-217.12528992 -597.36511230]
[-207.15414429 -608.57336426]
[-196.78709412 -619.41644287]
[-186.03749084 -629.88043213]
[-174.91920471 -639.95178223]
[-163.44656372 -649.61755371]
[-151.63433838 -658.86529541]
[-139.49777222 -667.68298340]
[-127.05251312 -676.05938721]
[-114.31459045 -683.98364258]
[-101.30042267 -691.44555664]
[-88.02679443 -698.43548584]
[-74.51080322 -704.94445801]
[-60.76987076 -710.96405029]
[-46.82172012 -716.48651123]
[-32.68432236 -721.50476074]
[-18.37589836 -726.01226807]
[-3.91489339 -730.00323486]
[10.68005276 -733.47259521]
[25.39012718 -736.41577148]
[40.19637299 -738.82897949]
[55.07970047 -740.70922852]
[70.02092743 -742.05395508]
[85.00079346 -742.86145020]
[100.00000000 -743.13073730]
[114.99920654 -742.86145020]
[129.97908020 -742.05395508]
[144.92030334 -740.70922852]
[159.80363464 -738.82897949]
[174.60987854 -736.41577148]
[189.31994629 -733.47259521]
[203.91488647 -730.00323486]
[218.37590027 -726.01226807]
[232.68432617 -721.50476074]
[246.82171631 -716.48651123]
[260.76986694 -710.96405029]
[274.51080322 -704.94445801]
[288.02679443 -698.43548584]
[301.30041504 -691.44555664]
[314.31457520 -683.98364258]
[327.05252075 -676.05938721]
[339.49777222 -667.68298340]
[351.63433838 -658.86529541]
[363.44656372 -649.61755371]
[374.91918945 -639.95178223]
[386.03750610 -629.88043213]
[396.78707886 -619.41644287]
[407.15414429 -608.57336426]
[417.12530518 -597.36511230]
[426.68768311 -585.80615234]
[435.82897949 -573.91137695]
[444.53741455 -561.69616699]
[452.80175781 -549.17620850]
[460.61135864 -536.36767578]
[467.95611572 -523.28704834]
[474.82662964 -509.95120239]
[481.21398926 -496.37731934]
[487.11001587 -482.58291626]
[492.50704956 -468.58575439]
[497.39816284 -454.40386963]
[501.77703857 -440.05557251]
[505.63806152 -425.55932617]
[508.97619629 -410.93380737]
[511.78723145 -396.19790649]
[514.06744385 -381.37060547]
[515.81396484 -366.47100830]
[517.02453613 -351.51831055]
[517.69757080 -336.53176880]
[517.83221436 -321.53076172]
[517.42828369 -306.53457642]
[516.48632812 -291.56256104]
[515.00750732 -276.63400269]
[512.99377441 -261.76815796]
[510.44769287 -246.98417664]
[507.37258911 -232.30111694]
[503.77239990 -217.73789978]
[499.65176392 -203.31330872]
[495.01599121 -189.04592896]
[489.87106323 -174.95414734]
[484.22360229 -161.05612183]
[478.08090210 -147.36978149]
[471.45086670 -133.91276550]
[464.34204102 -120.70242310]
[456.76361084 -107.75576019]
[448.72534180 -95.08948517]
[440.23754883 -82.71991730]
[431.31121826 -70.66300201]
[421.95785522 -58.93427277]
[412.18948364 -47.54885864]
[402.01873779 -36.52142715]
[391.45867920 -25.86619377]
[380.52294922 -15.59689426]
[369.22564697 -5.72676420]
[357.58132935 3.73147416]
[345.60498047 12.76562977]
[333.31207275 21.36405754]
[320.71841431 29.51567459]
[307.84030151 37.20997238]
[294.69427490 44.43703842]
[281.29727173 51.18755341]
[267.66659546 57.45281219]
[253.81982422 63.22474670]
[239.77478027 68.49591827]
[225.54956055 73.25952148]
[211.16252136 77.50942993]
[196.63220215 81.24015045]
[181.97732544 84.44689178]
[167.21678162 87.12550354]
[152.36959839 89.27254486]
[137.45491028 90.88524628]
[122.49195099 91.96152496]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
