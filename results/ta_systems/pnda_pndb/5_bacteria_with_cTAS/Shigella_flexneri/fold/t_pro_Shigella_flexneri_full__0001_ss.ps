%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:11:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AUGCCACAACGAACGUUUUUAAUGAUGUUAAUCGUCGUCUGUGUGACGAUACUGUGUUUUGUCUGGAUGGUGAGGGAUUCGCUUUGCGGAUUUCGUAUCGAGCAGGGAAAUACGGUGCUUGUGGCAACGUUAGCCUACGAAGUUA______\
) } def
/len { sequence length } bind def

/coor [
[124.09604645 208.99026489]
[138.93727112 211.16693115]
[152.06701660 218.41539001]
[145.24343872 205.05728149]
[138.41986084 191.69918823]
[131.59628296 178.34107971]
[124.77271271 164.98298645]
[117.94913483 151.62489319]
[111.12555695 138.26678467]
[104.30197906 124.90869141]
[94.19954681 129.30259705]
[81.63813782 129.16625977]
[68.72917938 123.40322113]
[57.14013290 132.92655945]
[45.55108643 142.44989014]
[33.96203613 151.97323608]
[22.37298775 161.49656677]
[10.78393936 171.01991272]
[9.49457645 186.77151489]
[-2.60910082 196.93402100]
[-18.34619522 195.47819519]
[-28.38016701 183.26774597]
[-26.75803947 167.54692078]
[-14.44219112 157.64260864]
[1.26060200 159.43086243]
[12.84965038 149.90751648]
[24.43869972 140.38418579]
[36.02774811 130.86083984]
[47.61679459 121.33750916]
[59.20584488 111.81417084]
[57.37649155 104.54069519]
[42.82947922 108.19917297]
[39.17122269 93.65210724]
[53.71778488 89.99373627]
[51.88843155 82.72026062]
[37.17290878 79.81278992]
[22.45738792 76.90531921]
[7.74186468 73.99784088]
[-6.97365808 71.09037018]
[-21.68918037 68.18289948]
[-35.76377487 75.88259888]
[-50.50269699 69.54668427]
[-54.59950256 54.03553391]
[-44.91147614 41.24797440]
[-28.87044334 40.99352646]
[-18.78170776 53.46737671]
[-4.06618547 56.37485123]
[10.64933681 59.28232193]
[25.36486053 62.18979263]
[40.08038330 65.09726715]
[54.79590607 68.00473785]
[67.78628540 60.50473785]
[72.62609863 46.30698776]
[77.46591949 32.10923386]
[82.30573273 17.91148186]
[87.14555359 3.71372890]
[91.98536682 -10.48402405]
[96.82518768 -24.68177605]
[101.66500092 -38.87952805]
[106.50481415 -53.07728195]
[111.34463501 -67.27503204]
[111.15668488 -76.47071075]
[116.43231964 -81.71283722]
[121.56262207 -95.80822754]
[126.69292450 -109.90361786]
[131.82322693 -123.99900055]
[125.39344788 -138.18687439]
[130.79710388 -152.40852356]
[144.36268616 -158.45089722]
[149.49299622 -172.54627991]
[154.62329102 -186.64167786]
[159.75360107 -200.73706055]
[164.88389587 -214.83245850]
[162.33314514 -230.44668579]
[173.95681763 -239.76010132]
[179.08711243 -253.85548401]
[184.21742249 -267.95086670]
[189.34771729 -282.04626465]
[194.47802734 -296.14166260]
[199.60832214 -310.23703003]
[204.73863220 -324.33242798]
[209.86892700 -338.42782593]
[214.99923706 -352.52322388]
[214.73483276 -369.47509766]
[230.95104980 -374.42190552]
[240.19363403 -360.20886230]
[229.09461975 -347.39291382]
[223.96432495 -333.29751587]
[218.83401489 -319.20211792]
[213.70372009 -305.10675049]
[208.57341003 -291.01135254]
[203.44311523 -276.91595459]
[198.31280518 -262.82058716]
[193.18251038 -248.72518921]
[188.05220032 -234.62979126]
[190.96990967 -220.02375793]
[178.97929382 -209.70214844]
[173.84898376 -195.60676575]
[168.71868896 -181.51136780]
[163.58837891 -167.41598511]
[158.45808411 -153.32060242]
[164.96595764 -139.97207642]
[159.96389771 -125.60426331]
[145.91860962 -118.86870575]
[140.78831482 -104.77331543]
[135.65800476 -90.67792511]
[130.52770996 -76.58253479]
[125.54238892 -62.43521881]
[120.70256805 -48.23746490]
[115.86275482 -34.03971100]
[111.02293396 -19.84195900]
[106.18312073 -5.64420748]
[101.34330750 8.55354500]
[96.50348663 22.75129700]
[91.66367340 36.94905090]
[86.82385254 51.14680481]
[81.98403931 65.34455872]
[115.60116577 69.26838684]
[129.52732849 95.48069763]
[117.66007996 118.08511353]
[124.48365784 131.44320679]
[131.30723572 144.80131531]
[138.13081360 158.15940857]
[144.95437622 171.51751709]
[151.77795410 184.87561035]
[158.60153198 198.23370361]
[165.42510986 211.59181213]
[174.09561157 217.38050842]
[175.94223022 226.44891357]
[186.27313232 237.32421875]
[196.60403442 248.19953918]
[212.40756226 248.35453796]
[223.41294861 259.69726562]
[223.09086609 275.49826050]
[211.63243103 286.38308716]
[195.83570862 285.89398193]
[185.07263184 274.32110596]
[185.72872925 258.53045654]
[175.39782715 247.65513611]
[165.06692505 236.77981567]
[167.53956604 251.57461548]
[164.65910339 266.29544067]
[156.79248047 279.06713867]
[144.94172668 288.26278687]
[130.61647034 292.71102905]
[115.64147949 291.84521484]
[101.92431641 285.77566528]
[91.21231842 275.27551270]
[84.87001038 261.68231201]
[83.70529175 246.72760010]
[87.86653137 232.31634521]
[96.82365417 220.28431702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[9 121]
[10 120]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[52 117]
[53 116]
[54 115]
[55 114]
[56 113]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[63 107]
[64 106]
[65 105]
[66 104]
[69 101]
[70 100]
[71 99]
[72 98]
[73 97]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
[129 140]
[130 139]
[131 138]
] def

init

% Start Annotations
3 127 0.0 1 colorpair
4 126 0.0 1 colorpair
5 125 0.0 1 colorpair
6 124 0.0 1 colorpair
7 123 0.0 1 colorpair
8 122 0.0 1 colorpair
9 121 0.0 1 colorpair
10 120 0.0 1 colorpair
13 30 0.0 1 colorpair
14 29 0.0 1 colorpair
15 28 0.0 1 colorpair
16 27 0.0 1 colorpair
17 26 0.0 1 colorpair
18 25 0.0 1 colorpair
35 51 0.0 1 colorpair
36 50 0.0 1 colorpair
37 49 0.0 1 colorpair
38 48 0.0 1 colorpair
39 47 0.0 1 colorpair
40 46 0.0 1 colorpair
52 117 0.0 1 colorpair
53 116 0.0 1 colorpair
54 115 0.0 1 colorpair
55 114 0.0 1 colorpair
56 113 0.0 1 colorpair
57 112 0.0 1 colorpair
58 111 0.0 1 colorpair
59 110 0.0 1 colorpair
60 109 0.0 1 colorpair
61 108 0.0 1 colorpair
63 107 0.0 1 colorpair
64 106 0.0 1 colorpair
65 105 0.0 1 colorpair
66 104 0.0 1 colorpair
69 101 0.0 1 colorpair
70 100 0.0 1 colorpair
71 99 0.0 1 colorpair
72 98 0.0 1 colorpair
73 97 0.0 1 colorpair
75 95 0.0 1 colorpair
76 94 0.0 1 colorpair
77 93 0.0 1 colorpair
78 92 0.0 1 colorpair
79 91 0.0 1 colorpair
80 90 0.0 1 colorpair
81 89 0.0 1 colorpair
82 88 0.0 1 colorpair
83 87 0.0 1 colorpair
129 140 0.0 1 colorpair
130 139 0.0 1 colorpair
131 138 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
