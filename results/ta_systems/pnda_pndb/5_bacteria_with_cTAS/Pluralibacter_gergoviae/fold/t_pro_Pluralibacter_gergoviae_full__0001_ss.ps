%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:10:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____________CGAAAGCUGUUGUAUAGCCUGGUAGUGGUCUGUCUGACGCUACUGGUGUUCACCUGGAUGGUAAGAGACUCACUCUGUGAGGUGCGUAUCAACCAGGGCAAUACGGAGUUUGCGGCGUUUCUGAACUACGAAGG_______\
) } def
/len { sequence length } bind def

/coor [
[115.30828857 498.33004761]
[104.10089874 488.30181885]
[94.80530548 476.47967529]
[87.70400238 463.22286987]
[83.01277161 448.93429565]
[80.87419128 434.04815674]
[81.35324097 419.01678467]
[84.43536377 404.29702759]
[90.02690125 390.33615112]
[97.95793152 377.55844116]
[107.98744202 366.35220337]
[119.81063843 357.05795288]
[133.06823730 349.95812988]
[147.35734558 345.26852417]
[145.22262573 330.42120361]
[143.08790588 315.57388306]
[140.95318604 300.72656250]
[138.66712952 285.90179443]
[136.22998047 271.10110474]
[133.79284668 256.30041504]
[131.35569763 241.49972534]
[128.91856384 226.69903564]
[125.58074951 212.07511902]
[121.35475922 197.68272400]
[117.12876892 183.29032898]
[112.90277863 168.89793396]
[108.67679596 154.50553894]
[97.66722107 144.47366333]
[101.20314789 129.05264282]
[96.97715759 114.66024780]
[86.15641022 104.27221680]
[71.60361481 100.63678741]
[57.05082703 97.00136566]
[42.49803925 93.36593628]
[27.94524956 89.73050690]
[13.39245987 86.09508514]
[-1.16032922 82.45965576]
[-15.71311855 78.82423401]
[-30.26590729 75.18880463]
[-39.41214752 76.14517975]
[-45.07695770 71.32794952]
[-59.55256271 67.39642334]
[-74.13211823 74.09090424]
[-88.39081573 66.73772430]
[-91.39059448 50.97762299]
[-80.83029175 38.90039444]
[-64.81085968 39.77065659]
[-55.62103653 52.92081833]
[-41.14543533 56.85234451]
[-26.63048172 60.63601685]
[-12.07769299 64.27144623]
[2.47509670 67.90686798]
[17.02788544 71.54229736]
[31.58067513 75.17771912]
[46.13346481 78.81314850]
[60.68625259 82.44857025]
[75.23904419 86.08399963]
[89.79183197 89.71942902]
[76.47049713 82.82434845]
[71.21170044 68.77639008]
[76.73056030 54.82855606]
[90.17768097 48.18212891]
[104.61028290 52.26868439]
[112.57678223 64.97831726]
[109.96300507 79.75077820]
[115.91460419 65.98203278]
[121.86620331 52.21328354]
[127.81781006 38.44453430]
[133.76940918 24.67578506]
[132.14274597 8.93842316]
[144.29479980 0.32580462]
[150.24639893 -13.44294453]
[156.19799805 -27.21169281]
[162.14959717 -40.98044205]
[168.10119629 -54.74919128]
[158.19358826 -66.30776215]
[154.30281067 -80.96207428]
[157.14880371 -95.79178619]
[166.11450195 -107.86560822]
[179.37860107 -114.82070160]
[194.28535461 -115.32498932]
[200.23695374 -129.09373474]
[206.18855286 -142.86248779]
[212.14015198 -156.63124084]
[218.09175110 -170.39999390]
[218.82626343 -187.33801270]
[235.30567932 -191.32112122]
[243.69508362 -176.58836365]
[231.86050415 -164.44837952]
[225.90890503 -150.67964172]
[219.95730591 -136.91088867]
[214.00570679 -123.14214325]
[208.05409241 -109.37339020]
[217.90000916 -98.16966248]
[221.92163086 -83.74274445]
[219.26971436 -68.93975830]
[210.41752625 -56.70624161]
[197.07743835 -49.50004196]
[181.86994934 -48.79758835]
[175.91835022 -35.02883911]
[169.96675110 -21.26009178]
[164.01513672 -7.49134302]
[158.06353760 6.27740574]
[160.11589050 21.02993393]
[147.53816223 30.62738609]
[141.58656311 44.39613724]
[135.63494873 58.16488266]
[129.68334961 71.93363190]
[123.73175049 85.70238495]
[111.36955261 110.43426514]
[115.59554291 124.82666016]
[126.90738678 135.88796997]
[123.06919098 150.27955627]
[127.29517365 164.67195129]
[131.52116394 179.06434631]
[135.74714661 193.45674133]
[139.97314453 207.84913635]
[148.42698669 195.45831299]
[163.13020325 192.48925781]
[175.72976685 200.62873840]
[179.06773376 215.25260925]
[171.24778748 228.05293274]
[156.71249390 231.75772095]
[143.71925354 224.26190186]
[146.15638733 239.06257629]
[148.59353638 253.86326599]
[151.03067017 268.66397095]
[153.46781921 283.46463013]
[157.97467041 291.48065186]
[155.80050659 298.59182739]
[157.93522644 313.43914795]
[160.06994629 328.28646851]
[162.20466614 343.13381958]
[177.23619080 343.60772705]
[191.95700073 346.68484497]
[205.91976929 352.27163696]
[218.70018005 360.19833374]
[229.90985107 370.22402954]
[239.20811462 382.04406738]
[246.31243896 395.29922485]
[251.00689697 409.58676147]
[253.14886475 424.47241211]
[252.67321777 439.50387573]
[249.59443665 454.22436523]
[244.00605774 468.18649292]
[236.07792664 480.96600342]
[226.05096436 492.17453003]
[214.22987366 501.47146606]
[200.97389221 508.57427979]
[186.68583679 513.26708984]
[171.79992676 515.40740967]
[156.76852417 514.93005371]
[142.04840088 511.84957886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 133]
[15 132]
[16 131]
[17 130]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[23 117]
[24 116]
[25 115]
[26 114]
[27 113]
[29 111]
[30 110]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[41 49]
[42 48]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
14 133 0.0 0.2 colorpair
15 132 0.0 1 colorpair
16 131 0.0 1 colorpair
17 130 0.0 1 colorpair
18 128 0.0 1 colorpair
19 127 0.0 1 colorpair
20 126 0.0 1 colorpair
21 125 0.0 1 colorpair
22 124 0.0 1 colorpair
23 117 0.0 1 colorpair
24 116 0.0 1 colorpair
25 115 0.0 1 colorpair
26 114 0.0 1 colorpair
27 113 0.16 1 colorpair
29 111 0.0 1 colorpair
30 110 0.0 1 colorpair
31 58 0.0 1 colorpair
32 57 0.0 1 colorpair
33 56 0.0 1 colorpair
34 55 0.16 1 colorpair
35 54 0.0 0.2 colorpair
36 53 0.16 1 colorpair
37 52 0.0 1 colorpair
38 51 0.0 1 colorpair
39 50 0.0 1 colorpair
41 49 0.0 1 colorpair
42 48 0.0 1 colorpair
65 109 0.0 1 colorpair
66 108 0.0 1 colorpair
67 107 0.0 1 colorpair
68 106 0.0 1 colorpair
69 105 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.16 1 colorpair
73 101 0.0 1 colorpair
74 100 0.0 1 colorpair
75 99 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
14 133 2 gmark
113 cmark
34 cmark
55 cmark
35 54 2 gmark
36 cmark
72 cmark
102 cmark
75 cmark

% End Annotations
showpage
end
%%EOF
