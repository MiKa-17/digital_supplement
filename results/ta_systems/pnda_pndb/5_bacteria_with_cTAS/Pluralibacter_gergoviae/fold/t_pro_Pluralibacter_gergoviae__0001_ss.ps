%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:10:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUGUCACGAAAGCUGUUGUAUAGCCUGGUAGUGGUCUGUCUGACGCUACUGGUGUUUACCUGGAUGGUAAGAGACUCACUCUGUGAGGUCCGUAUCAACCAGGGCAAUACGGAGUUUGCGGCGUUUCUGAACUACGAAGGCAGGCGC\
) } def
/len { sequence length } bind def

/coor [
[31.28668976 291.02578735]
[33.39888000 305.87631226]
[29.39510536 320.33209229]
[19.94374847 331.97991943]
[6.62258768 338.87533569]
[-8.34458065 339.86724854]
[-22.45918465 334.79003906]
[-33.36497116 324.49130249]
[-39.24136353 310.69027710]
[-39.10737228 295.69088745]
[-32.98579025 281.99765015]
[-45.76739502 289.84817505]
[-58.54899597 297.69866943]
[-57.64023590 315.19735718]
[-65.64569092 330.68423462]
[-80.29757690 339.96704102]
[-97.54290009 340.58383179]
[-112.66439056 332.45544434]
[-125.11514282 340.82077026]
[-137.56590271 349.18609619]
[-150.01664734 357.55142212]
[-162.46740723 365.91674805]
[-172.24270630 379.76882935]
[-188.25950623 374.21017456]
[-187.35198975 357.28054810]
[-170.83273315 353.46600342]
[-158.38197327 345.10067749]
[-145.93122864 336.73535156]
[-133.48046875 328.36999512]
[-121.02971649 320.00466919]
[-123.24311066 307.49954224]
[-120.53224945 295.04476929]
[-113.26844025 284.51367188]
[-102.51052094 277.50399780]
[-89.85059357 275.09561157]
[-77.17845154 277.68429565]
[-66.39951324 284.91708374]
[-53.61791229 277.06655884]
[-40.83631134 269.21603394]
[-29.20484161 259.74456787]
[-18.92771530 248.81842041]
[-8.65058994 237.89227295]
[1.62653589 226.96612549]
[11.90366173 216.03997803]
[22.18078804 205.11383057]
[32.45791245 194.18768311]
[42.73503876 183.26153564]
[51.60125732 171.16235352]
[58.92390060 158.07116699]
[66.24654388 144.97999573]
[73.56918335 131.88882446]
[80.89183044 118.79764557]
[88.21446991 105.70646667]
[94.99704742 92.32750702]
[101.22827148 78.68302917]
[107.45950317 65.03854370]
[105.26190948 46.78406525]
[119.88417053 37.12714767]
[125.83576965 23.35839844]
[131.78736877 9.58964825]
[137.73896790 -4.17910004]
[143.69056702 -17.94784927]
[138.10760498 -32.48979950]
[144.33952332 -46.36848450]
[158.23745728 -51.60136795]
[164.18905640 -65.37011719]
[170.14065552 -79.13887024]
[176.09225464 -92.90761566]
[182.04385376 -106.67636108]
[180.41720581 -122.41372681]
[192.56924438 -131.02635193]
[198.52084351 -144.79508972]
[204.47244263 -158.56384277]
[210.42404175 -172.33259583]
[216.37564087 -186.10133362]
[206.46803284 -197.65991211]
[202.57725525 -212.31422424]
[205.42326355 -227.14393616]
[214.38896179 -239.21775818]
[227.65304565 -246.17285156]
[242.55979919 -246.67713928]
[248.51139832 -260.44589233]
[254.46299744 -274.21463013]
[260.41461182 -287.98339844]
[266.36621094 -301.75213623]
[267.10070801 -318.69015503]
[283.58013916 -322.67327881]
[291.96954346 -307.94052124]
[280.13494873 -295.80053711]
[274.18334961 -282.03179932]
[268.23175049 -268.26303101]
[262.28015137 -254.49429321]
[256.32855225 -240.72554016]
[266.17446899 -229.52180481]
[270.19607544 -215.09489441]
[267.54415894 -200.29190063]
[258.69195557 -188.05839539]
[245.35189819 -180.85218811]
[230.14439392 -180.14973450]
[224.19279480 -166.38099670]
[218.24119568 -152.61224365]
[212.28959656 -138.84349060]
[206.33799744 -125.07474518]
[208.39035034 -110.32221222]
[195.81260681 -100.72476196]
[189.86100769 -86.95601654]
[183.90940857 -73.18726349]
[177.95780945 -59.41851807]
[172.00619507 -45.64976883]
[177.71656799 -31.94111061]
[171.87693787 -17.89285851]
[157.45932007 -11.99624729]
[151.50772095 1.77250111]
[145.55612183 15.54125023]
[139.60452271 29.30999947]
[133.65292358 43.07874680]
[137.82057190 54.47483444]
[132.92669678 66.01598358]
[121.10398102 71.26977539]
[114.87275696 84.91425323]
[108.64153290 98.55873108]
[109.50157166 101.55260468]
[109.26335144 104.93156433]
[107.78016663 108.27893829]
[105.06525421 111.12920380]
[101.30564880 113.02911377]
[93.98300171 126.12028503]
[86.66036224 139.21147156]
[79.33771515 152.30264282]
[72.01507568 165.39381409]
[64.69242859 178.48500061]
[78.24852753 172.06376648]
[93.24851227 172.04225159]
[106.82297516 178.42456055]
[116.37519836 189.98982239]
[120.07790375 204.52563477]
[117.22277832 219.25140381]
[108.35598755 231.35017395]
[95.17371368 238.50750732]
[80.19763184 239.35426331]
[66.29258728 233.72845459]
[56.11852646 222.70626831]
[51.62169647 208.39619446]
[53.66118622 193.53865051]
[43.38405991 204.46479797]
[33.10693359 215.39094543]
[22.82980919 226.31709290]
[12.55268288 237.24324036]
[2.27555704 248.16938782]
[-8.00156879 259.09555054]
[-18.27869415 270.02169800]
[-3.62850952 266.80111694]
[11.08695412 269.70889282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 39]
[12 38]
[13 37]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[40 151]
[41 150]
[42 149]
[43 148]
[44 147]
[45 146]
[46 145]
[47 144]
[48 131]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[54 121]
[55 120]
[56 119]
[58 116]
[59 115]
[60 114]
[61 113]
[62 112]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% Start Annotations
11 39 0.0 1 colorpair
12 38 0.0 1 colorpair
13 37 0.0 1 colorpair
18 30 0.0 1 colorpair
19 29 0.0 1 colorpair
20 28 0.0 1 colorpair
21 27 0.0 1 colorpair
22 26 0.0 1 colorpair
40 151 0.0 1 colorpair
41 150 0.0 1 colorpair
42 149 0.0 1 colorpair
43 148 0.0 1 colorpair
44 147 0.0 1 colorpair
45 146 0.0 1 colorpair
46 145 0.0 1 colorpair
47 144 0.0 1 colorpair
48 131 0.0 1 colorpair
49 130 0.0 1 colorpair
50 129 0.0 1 colorpair
51 128 0.0 1 colorpair
52 127 0.0 1 colorpair
53 126 0.0 1 colorpair
54 121 0.0 0.6 colorpair
55 120 0.16 1 colorpair
56 119 0.0 1 colorpair
58 116 0.0 1 colorpair
59 115 0.0 1 colorpair
60 114 0.0 1 colorpair
61 113 0.16 1 colorpair
62 112 0.0 1 colorpair
65 109 0.0 1 colorpair
66 108 0.0 1 colorpair
67 107 0.0 1 colorpair
68 106 0.0 1 colorpair
69 105 0.0 1 colorpair
71 103 0.0 1 colorpair
72 102 0.16 1 colorpair
73 101 0.0 1 colorpair
74 100 0.0 1 colorpair
75 99 0.16 1 colorpair
81 93 0.0 1 colorpair
82 92 0.0 1 colorpair
83 91 0.0 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
54 121 1 gmark
55 cmark
120 cmark
113 cmark
72 cmark
102 cmark
75 cmark

% End Annotations
showpage
end
%%EOF
