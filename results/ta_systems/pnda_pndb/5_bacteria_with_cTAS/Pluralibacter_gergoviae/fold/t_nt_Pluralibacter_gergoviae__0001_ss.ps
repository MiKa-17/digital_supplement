%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:10:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACGAAAGCUGUUGUAUAGCCUGGUAGUGGUCUGUCUGACGCUCCUGGUGUUUACCUGGAUGGUAAGAGACUCACUCUGUGAGGUUCGUAUCAACCAGGGCAAUACGGAGUUUGCGGCGUUUCUGAACUACGAAGGCAGGCGCUAA\
) } def
/len { sequence length } bind def

/coor [
[19.78756142 296.05838013]
[19.80558205 305.82818604]
[17.47739983 315.30200195]
[12.94621277 323.92559814]
[6.48388243 331.19616699]
[-1.52535701 336.69168091]
[-10.60774803 340.09527588]
[-20.22802734 341.21362305]
[-29.82097244 339.98788452]
[-38.82461166 336.49667358]
[-48.19461060 348.21002197]
[-57.56460571 359.92340088]
[-66.93460846 371.63677979]
[-76.30460358 383.35015869]
[-81.47724152 399.49575806]
[-98.42378998 398.99481201]
[-102.63368988 382.57186890]
[-88.01797485 373.98016357]
[-78.64797974 362.26678467]
[-69.27798462 350.55340576]
[-59.90798187 338.84002686]
[-50.53798294 327.12664795]
[-59.55163193 308.53320312]
[-58.05301666 287.85189819]
[-46.37159729 270.63223267]
[-27.57895279 261.53112793]
[-6.68141651 263.05361938]
[0.86418629 250.08969116]
[8.40978909 237.12573242]
[15.95539188 224.16178894]
[23.50099564 211.19784546]
[24.15188789 203.78459167]
[31.34481049 198.04252625]
[39.16205597 185.24055481]
[46.97929764 172.43856812]
[54.79654312 159.63659668]
[62.61378479 146.83460999]
[70.43103027 134.03262329]
[78.24827576 121.23065186]
[70.28955078 106.41617584]
[71.42554474 89.63763428]
[81.30850983 76.03113556]
[96.91316223 69.76178741]
[99.11900330 54.92486572]
[101.32485199 40.08794403]
[103.53069305 25.25102234]
[105.73654175 10.41410160]
[103.63326263 4.03049326]
[104.92436981 -1.59169340]
[108.36088562 -4.99652910]
[111.19023895 -19.72727013]
[114.01959991 -34.45801163]
[116.84895325 -49.18875122]
[119.67831421 -63.91949463]
[111.07929993 -76.90774536]
[114.15850830 -91.80650330]
[126.59381866 -99.92430878]
[129.42317200 -114.65505219]
[132.25253296 -129.38578796]
[135.08189392 -144.11653137]
[137.91123962 -158.84727478]
[132.91587830 -173.85916138]
[142.91494751 -184.89854431]
[145.74430847 -199.62927246]
[148.57366943 -214.36001587]
[151.40303040 -229.09075928]
[154.23239136 -243.82150269]
[149.23701477 -258.83340454]
[159.23609924 -269.87277222]
[162.06544495 -284.60351562]
[153.46643066 -297.59176636]
[156.54565430 -312.49050903]
[168.98095703 -320.60833740]
[171.81031799 -335.33905029]
[174.63966370 -350.06979370]
[177.46902466 -364.80053711]
[180.29838562 -379.53128052]
[177.34822083 -396.22659302]
[192.57437134 -403.68316650]
[203.95455933 -391.11627197]
[195.02912903 -376.70193481]
[192.19976807 -361.97119141]
[189.37040710 -347.24044800]
[186.54104614 -332.50970459]
[183.71170044 -317.77896118]
[192.25468445 -305.63183594]
[189.59515381 -290.65246582]
[176.79618835 -281.77413940]
[173.96682739 -267.04339600]
[179.16458130 -253.08515930]
[168.96311951 -240.99214172]
[166.13377380 -226.26139832]
[163.30441284 -211.53067017]
[160.47505188 -196.79992676]
[157.64569092 -182.06918335]
[162.84344482 -168.11093140]
[152.64198303 -156.01791382]
[149.81263733 -141.28718567]
[146.98327637 -126.55643463]
[144.15391541 -111.82569885]
[141.32455444 -97.09495544]
[149.86753845 -84.94781494]
[147.20802307 -69.96844482]
[134.40905762 -61.09013748]
[131.57969666 -46.35939407]
[128.75033569 -31.62865448]
[125.92098236 -16.89791298]
[123.09162140 -2.16717148]
[120.57346344 12.61994648]
[118.36761475 27.45686913]
[116.16177368 42.29378891]
[113.95592499 57.13071060]
[111.75008392 71.96763611]
[121.22487640 78.24264526]
[127.73268127 87.55908203]
[130.36376953 98.61461639]
[128.75036621 109.86380768]
[141.29875183 118.08196259]
[156.58113098 115.06760406]
[169.18991089 123.58073425]
[171.96945190 138.16873169]
[184.51783752 146.38688660]
[197.06622314 154.60504150]
[213.46095276 154.98587036]
[221.09002686 169.50238037]
[212.10531616 183.22123718]
[195.74951172 182.02964783]
[188.84808350 167.15342712]
[176.29969788 158.93527222]
[163.75131226 150.71711731]
[149.26815796 153.99948120]
[136.42523193 145.84385681]
[133.08059692 130.63034058]
[120.53221130 122.41219330]
[106.67431641 129.65351868]
[91.05025482 129.04789734]
[83.23300934 141.84986877]
[75.41576385 154.65185547]
[67.59852600 167.45382690]
[59.78127670 180.25581360]
[51.96403503 193.05780029]
[44.14678955 205.85977173]
[36.46493912 218.74345398]
[28.91933823 231.70739746]
[21.37373352 244.67134094]
[13.82813168 257.63528442]
[6.28252840 270.59924316]
[12.82817078 277.90905762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[27 147]
[28 146]
[29 145]
[30 144]
[31 143]
[33 142]
[34 141]
[35 140]
[36 139]
[37 138]
[38 137]
[39 136]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[69 89]
[70 88]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[117 134]
[118 133]
[121 130]
[122 129]
[123 128]
] def

init

% Start Annotations
10 22 0.0 1 colorpair
11 21 0.0 1 colorpair
12 20 0.0 1 colorpair
13 19 0.0 1 colorpair
14 18 0.0 1 colorpair
27 147 0.0 1 colorpair
28 146 0.0 1 colorpair
29 145 0.0 1 colorpair
30 144 0.0 1 colorpair
31 143 0.0 1 colorpair
33 142 0.0 1 colorpair
34 141 0.0 1 colorpair
35 140 0.0 1 colorpair
36 139 0.0 1 colorpair
37 138 0.0 1 colorpair
38 137 0.0 1 colorpair
39 136 0.0 1 colorpair
43 113 0.0 1 colorpair
44 112 0.0 1 colorpair
45 111 0.0 1 colorpair
46 110 0.0 1 colorpair
47 109 0.0 1 colorpair
50 108 0.0 1 colorpair
51 107 0.0 1 colorpair
52 106 0.0 1 colorpair
53 105 0.0 1 colorpair
54 104 0.0 1 colorpair
57 101 0.0 1 colorpair
58 100 0.0 1 colorpair
59 99 0.0 1 colorpair
60 98 0.0 1 colorpair
61 97 0.0 1 colorpair
63 95 0.0 1 colorpair
64 94 0.0 1 colorpair
65 93 0.0 1 colorpair
66 92 0.0 1 colorpair
67 91 0.0 1 colorpair
69 89 0.0 1 colorpair
70 88 0.0 1 colorpair
73 85 0.0 1 colorpair
74 84 0.0 1 colorpair
75 83 0.0 1 colorpair
76 82 0.0 1 colorpair
77 81 0.0 1 colorpair
117 134 0.0 1 colorpair
118 133 0.0 1 colorpair
121 130 0.0 1 colorpair
122 129 0.0 1 colorpair
123 128 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
