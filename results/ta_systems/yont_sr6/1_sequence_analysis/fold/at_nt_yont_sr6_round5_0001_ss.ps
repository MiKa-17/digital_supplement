%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 25 13:04:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGUAAGAACCGUUAAAGAAAUAAGGAAAGCAACUAUUAUACCCACUUUCUCAAGCACUAUGUACACCUCCUUUCCUAUGACUCUAUUAUAACACAAUU_\
) } def
/len { sequence length } bind def

/coor [
[92.57742310 221.52706909]
[77.69961548 219.69383240]
[63.15985107 216.04621887]
[49.17852783 210.63951111]
[35.96759033 203.55564880]
[23.72729683 194.90203857]
[12.64318752 184.80984497]
[2.88328528 173.43205261]
[-5.40446377 160.94113159]
[-12.09442902 147.52642822]
[-17.08519936 133.39129639]
[-20.30112267 118.74999237]
[-21.69345093 103.82447052]
[-21.24107552 88.84096527]
[-18.95085716 74.02662659]
[-14.85750866 59.60600281]
[-9.02308273 45.79769516]
[-1.53601980 32.81101990]
[7.49018669 20.84283447]
[17.91871262 10.07456017]
[29.59147453 0.66943026]
[42.33153152 -7.22998762]
[55.94576263 -13.50395012]
[70.22779083 -18.05735207]
[84.96112823 -20.82116890]
[99.92243195 -21.75350761]
[100.83689117 -36.72560501]
[101.75135040 -51.69770432]
[102.66580963 -66.66980743]
[103.58026886 -81.64190674]
[104.49472809 -96.61400604]
[105.40918732 -111.58610535]
[90.71225739 -114.72579956]
[76.64745331 -120.02099609]
[63.52900314 -127.35337830]
[51.64997101 -136.55915833]
[41.27574158 -147.43266296]
[32.63808060 -159.73097229]
[25.92995262 -173.17933655]
[21.30122185 -187.47732544]
[18.85529518 -202.30551147]
[18.64681625 -217.33262634]
[20.68044281 -232.22296143]
[24.91073990 -246.64385986]
[31.24320602 -260.27313232]
[39.53636932 -272.80633545]
[49.60495377 -283.96347046]
[61.22402954 -293.49523926]
[74.13401794 -301.18872070]
[88.04650879 -306.87207031]
[102.65068817 -310.41827393]
[117.62029266 -311.74813843]
[132.62091064 -310.83193970]
[147.31739807 -307.69015503]
[161.38143921 -302.39294434]
[174.49884033 -295.05868530]
[186.37657166 -285.85122681]
[196.74925232 -274.97625732]
[205.38516235 -262.67669678]
[212.09136963 -249.22738647]
[216.71806335 -234.92872620]
[219.16188049 -220.10018921]
[219.36820984 -205.07305908]
[217.33247375 -190.18301392]
[213.10011292 -175.76271057]
[206.76571655 -162.13432312]
[198.47076416 -149.60231018]
[188.40058899 -138.44662476]
[176.78015137 -128.91650391]
[163.86906433 -121.22485352]
[149.95576477 -115.54349518]
[135.35108948 -111.99937439]
[120.38128662 -110.67164612]
[119.46682739 -95.69954681]
[118.55236816 -80.72744751]
[117.63790894 -65.75534821]
[116.72344971 -50.78324509]
[115.80899048 -35.81114578]
[114.89453125 -20.83904648]
[129.63116455 -18.09283066]
[143.91862488 -13.55649376]
[157.54032898 -7.29879951]
[170.28982544 0.58539444]
[181.97380066 9.97657394]
[192.41519165 20.73238373]
[201.45568848 32.68977737]
[208.95825195 45.66749954]
[214.80917358 59.46882629]
[218.91973877 73.88455200]
[221.22766113 88.69614410]
[221.69793701 103.67909241]
[220.32344055 118.60626984]
[217.12500000 133.25140381]
[212.15112305 147.39248657]
[205.47718811 160.81517029]
[197.20436096 173.31599426]
[187.45805359 184.70542908]
[176.38601685 194.81086731]
[164.15606689 203.47909546]
[150.95359802 210.57872009]
[136.97874451 216.00213623]
[122.44335175 219.66711426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
] def

init

% Start Annotations
26 79 0.0 1 colorpair
27 78 0.0 1 colorpair
28 77 0.0 0.2 colorpair
29 76 0.0 0.6 colorpair
30 75 0.0 0.6 colorpair
31 74 0.0 1 colorpair
32 73 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
28 77 2 gmark
29 76 1 gmark
30 75 1 gmark

% End Annotations
showpage
end
%%EOF
