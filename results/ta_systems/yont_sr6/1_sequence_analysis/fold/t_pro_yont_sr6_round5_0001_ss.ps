%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 25 13:04:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUUGAGAAAGUGGGUAUAACAAUUGCUUUCCUUAUUCCUAUAACGGUUCUAACCAUCAACUGUCUAACAAUAGCUGAGAAGAUAAAAAACCU___AAAGAAUAAGAAAAGC_______________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[158.28050232 469.09304810]
[149.90461731 464.54760742]
[141.76412964 459.59307861]
[133.87901306 454.24160767]
[126.26858521 448.50634766]
[118.95152283 442.40136719]
[108.62940216 453.28500366]
[98.30728149 464.16867065]
[87.98516846 475.05230713]
[77.75949097 486.02664185]
[67.63106537 497.09075928]
[57.50263596 508.15487671]
[47.37420654 519.21899414]
[37.24577332 530.28314209]
[27.11734390 541.34729004]
[16.98891449 552.41137695]
[21.02931023 567.30029297]
[16.35698891 582.00311279]
[4.46287060 591.82824707]
[-10.85767460 593.64056396]
[-24.71591568 586.86169434]
[-32.68973923 573.65484619]
[-32.23472595 558.23419189]
[-23.49607277 545.52044678]
[-9.26224613 539.57049561]
[5.92478752 542.28295898]
[16.05321693 531.21881104]
[26.18164825 520.15472412]
[36.31007767 509.09057617]
[46.43850708 498.02645874]
[56.56693649 486.96234131]
[66.69536591 475.89819336]
[68.89928436 468.81997681]
[77.10151672 464.73019409]
[87.42362976 453.84655762]
[97.74575043 442.96289062]
[108.06786346 432.07922363]
[89.33145142 409.71945190]
[74.18960571 384.78240967]
[62.99090958 357.84103394]
[55.99333572 329.51434326]
[53.35832977 300.45336914]
[55.14706421 271.32601929]
[61.31903076 242.80191040]
[71.73295593 215.53678894]
[86.15002441 190.15762329]
[104.23937225 167.24807739]
[125.58567810 147.33514404]
[116.68344116 135.26243591]
[107.78121185 123.18972778]
[98.87898254 111.11701965]
[89.87055969 99.12334442]
[75.34033203 92.86372375]
[73.75264740 78.05397797]
[64.63874054 66.14025879]
[55.52483368 54.22654343]
[36.68536377 52.46630478]
[25.28527832 37.76572037]
[28.16975975 19.71033478]
[18.64107513 8.12568188]
[9.11239147 -3.45897126]
[-5.17367220 1.60898685]
[-20.33149910 1.48208451]
[-34.53070831 -3.82435441]
[-46.05667496 -13.66955090]
[-53.51758194 -26.86465073]
[-56.01248932 -41.81628036]
[-53.24012756 -56.71895981]
[-45.53527069 -69.77311707]
[-33.82831573 -79.40239716]
[-19.53293800 -84.44401550]
[-4.37537050 -84.28917694]
[9.81403446 -78.95658112]
[21.32183838 -69.09016418]
[28.75841713 -55.88133621]
[31.22576714 -40.92513275]
[28.42594528 -26.02758980]
[20.69704437 -12.98765469]
[30.22572899 -1.40300226]
[39.75441360 10.18165016]
[51.11495972 8.80042744]
[61.83722687 13.13230419]
[69.20150757 22.20373154]
[71.27960205 33.82375717]
[67.43855286 45.11263275]
[76.55245972 57.02635193]
[85.66636658 68.94007111]
[99.54471588 74.34754181]
[101.78427887 90.00942993]
[108.81537628 94.00445557]
[110.95169067 102.21479034]
[119.85391998 114.28749847]
[128.75614929 126.36020660]
[137.65838623 138.43292236]
[145.67962646 133.27478027]
[153.94635010 128.52014160]
[162.43827820 124.18069458]
[171.13458252 120.26705933]
[180.01391602 116.78882599]
[189.05448914 113.75451660]
[198.23414612 111.17157745]
[207.53033447 109.04632568]
[216.92028809 107.38397980]
[226.38095093 106.18859863]
[235.88909912 105.46310425]
[245.42144775 105.20928192]
[254.95457458 105.42773438]
[264.46511841 106.11792755]
[273.92974854 107.27815247]
[283.32525635 108.90555573]
[292.62857056 110.99613953]
[301.81686401 113.54476929]
[310.86767578 116.54518127]
[319.75869751 119.99001312]
[328.46823120 123.87081146]
[336.97482300 128.17803955]
[345.25765991 132.90112305]
[353.29644775 138.02847290]
[361.07141113 143.54751587]
[368.56350708 149.44468689]
[375.75439453 155.70553589]
[382.62640381 162.31468201]
[389.16268921 169.25592041]
[395.34725952 176.51220703]
[401.16488647 184.06573486]
[406.60134888 191.89797974]
[411.64328003 199.98973083]
[416.27838135 208.32112122]
[420.49523926 216.87171936]
[424.28353882 225.62054443]
[427.63397217 234.54612732]
[430.53836060 243.62658691]
[432.98956299 252.83963013]
[434.98159790 262.16265869]
[436.50955200 271.57278442]
[437.56970215 281.04696655]
[438.15948486 290.56192017]
[438.27740479 300.09432983]
[437.92321777 309.62081909]
[437.09780884 319.11801147]
[435.80316162 328.56259155]
[434.04251099 337.93139648]
[431.82015991 347.20147705]
[429.14157104 356.35009766]
[426.01333618 365.35476685]
[422.44311523 374.19342041]
[418.43969727 382.84442139]
[414.01287842 391.28649902]
[409.17355347 399.49899292]
[403.93356323 407.46173096]
[398.30581665 415.15518188]
[392.30410767 422.56048584]
[385.94314575 429.65951538]
[379.23855591 436.43481445]
[372.20675659 442.86978149]
[364.86508179 448.94866943]
[357.23147583 454.65652466]
[349.32467651 459.97937012]
[341.16409302 464.90417480]
[332.76977539 469.41885376]
[324.16226196 473.51232910]
[315.36273193 477.17459106]
[306.39273071 480.39663696]
[297.27426147 483.17059326]
[288.02972412 485.48962402]
[278.68179321 487.34808350]
[269.25338745 488.74142456]
[259.76760864 489.66619873]
[250.24778748 490.12020874]
[240.71722412 490.10229492]
[231.19932556 489.61251831]
[221.71743774 488.65209961]
[212.29479980 487.22338867]
[202.95454407 485.32992554]
[193.71957397 482.97634888]
[184.61253357 480.16842651]
[175.65576172 476.91305542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[48 94]
[49 93]
[50 92]
[51 91]
[52 89]
[54 87]
[55 86]
[56 85]
[59 80]
[60 79]
[61 78]
] def

init

% Start Annotations
6 37 0.0 1 colorpair
7 36 0.16 1 colorpair
8 35 0.0 1 colorpair
9 34 0.0 0.6 colorpair
10 32 0.0 0.6 colorpair
11 31 0.0 0.6 colorpair
12 30 0.16 1 colorpair
13 29 0.0 0.2 colorpair
14 28 0.0 1 colorpair
15 27 0.0 1 colorpair
16 26 0.0 1 colorpair
48 94 0.16 1 colorpair
49 93 0.16 1 colorpair
50 92 0.0 1 colorpair
51 91 0.0 1 colorpair
52 89 0.16 1 colorpair
54 87 0.16 1 colorpair
55 86 0.16 1 colorpair
59 80 0.0 1 colorpair
60 79 0.16 1 colorpair
61 78 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
36 cmark
9 34 1 gmark
10 32 1 gmark
11 31 1 gmark
12 cmark
13 29 2 gmark
48 cmark
94 cmark
93 cmark
52 cmark
89 cmark
54 cmark
87 cmark
55 cmark
56 85 3 gmark
56 cmark
85 cmark
60 cmark

% End Annotations
showpage
end
%%EOF
