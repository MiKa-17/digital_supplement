%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 25 12:57:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGUAAGAACCGUUAAAGAUAUGAGGAAAGCAACUAUGAUACCCACUUUCUCAAGCACUAUGUACACCUCCUUUCCUAUGACUCUAUUAUAACACAAUU\
) } def
/len { sequence length } bind def

/coor [
[69.68917847 508.49942017]
[54.73315430 507.11352539]
[40.06877136 503.86404419]
[25.92731094 498.80221558]
[12.53179932 492.00784302]
[0.09350339 483.58810425]
[-11.19140530 473.67578125]
[-21.14494896 462.42721558]
[-29.61014557 450.01980591]
[-36.45348358 436.64923096]
[-41.56703949 422.52639771]
[-44.87016296 407.87399292]
[-46.31075668 392.92315674]
[-45.86610031 377.90963745]
[-43.54320908 363.07025146]
[-39.37871933 348.63903809]
[-33.43830872 334.84356689]
[-25.81566429 321.90145874]
[-16.63101006 310.01678467]
[-6.02920103 299.37698364]
[5.82255936 290.14990234]
[18.73735046 282.48104858]
[32.51148987 276.49136353]
[46.92773438 272.27532959]
[61.75872421 269.89938354]
[76.77054596 269.40106201]
[78.15457153 254.46505737]
[79.53859711 239.52905273]
[80.92262268 224.59303284]
[82.30664825 209.65701294]
[83.69067383 194.72100830]
[85.07469940 179.78498840]
[70.66962433 175.68446350]
[57.26318359 169.00706482]
[45.31183624 159.98011780]
[35.22249603 148.91099548]
[27.33868217 136.17654419]
[21.92882156 122.21038055]
[19.17710876 107.48799896]
[19.17723083 92.51066589]
[21.92918777 77.78833008]
[27.33927917 63.82225037]
[35.22330093 51.08794403]
[45.31282425 40.01897812]
[57.26432419 30.99223328]
[70.67087555 24.31504440]
[85.07601929 20.21475983]
[99.98928833 18.83098030]
[101.37331390 3.89496708]
[102.75733948 -11.04104519]
[95.41532135 -25.70483780]
[104.66818237 -39.24428177]
[120.99737549 -37.73115921]
[127.60482025 -22.72204208]
[117.69335175 -9.65702057]
[116.30932617 5.27899265]
[114.92530060 20.21500587]
[129.33036804 24.31552887]
[142.73681641 30.99293709]
[154.68817139 40.01988220]
[164.77751160 51.08901215]
[172.66131592 63.82345200]
[178.07118225 77.78961945]
[180.82289124 92.51200104]
[180.82276917 107.48933411]
[178.07081604 122.21166992]
[172.66072083 136.17774963]
[164.77670288 148.91206360]
[154.68717957 159.98101807]
[142.73567200 169.00776672]
[129.32913208 175.68495178]
[114.92398071 179.78524780]
[100.01071167 181.16902161]
[98.62668610 196.10502625]
[97.24266052 211.04104614]
[95.85863495 225.97705078]
[94.47460938 240.91307068]
[93.09058380 255.84909058]
[91.70655823 270.78509521]
[106.37121582 274.03335571]
[120.51310730 279.09399414]
[133.90919495 285.88723755]
[146.34819031 294.30593872]
[157.63394165 304.21731567]
[167.58842468 315.46502686]
[176.05467224 327.87173462]
[182.89912415 341.24172974]
[188.01387024 355.36413574]
[191.31822205 370.01623535]
[192.76008606 384.96697998]
[192.31669617 399.98052979]
[189.99505615 414.82009888]
[185.83177185 429.25167847]
[179.89251709 443.04763794]
[172.27096558 455.99041748]
[163.08731079 467.87585449]
[152.48640442 478.51651001]
[140.63542175 487.74459839]
[127.72127533 495.41455078]
[113.94763947 501.40539551]
[99.53174591 505.62265015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[48 57]
[49 56]
[50 55]
] def

init

% Start Annotations
26 79 0.0 1 colorpair
27 78 0.0 1 colorpair
28 77 0.0 0.2 colorpair
29 76 0.0 0.6 colorpair
30 75 0.0 0.6 colorpair
31 74 0.0 1 colorpair
32 73 0.0 1 colorpair
48 57 0.16 1 colorpair
49 56 0.0 0.2 colorpair
50 55 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
28 77 2 gmark
29 76 1 gmark
30 75 1 gmark
48 cmark
49 56 2 gmark

% End Annotations
showpage
end
%%EOF
