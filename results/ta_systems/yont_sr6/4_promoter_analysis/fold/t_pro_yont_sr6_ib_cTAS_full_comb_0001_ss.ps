%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 25 14:25:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUUGAGAAAGUGGGUAUCAUAGUUGCUUUCCUCAUAUCUUUAACGGUUCUUACAAUCAACAGUCUAACAAUAGUUGAGAAGAUAAGAAACC___UAAAGAAUGGGACAAGC_______________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[199.51338196 602.59698486]
[194.08023071 616.57843018]
[188.64709473 630.55987549]
[183.21394348 644.54132080]
[177.78080750 658.52276611]
[172.34765625 672.50421143]
[180.85812378 685.47924805]
[180.08306885 700.97698975]
[170.32052612 713.03814697]
[155.32438660 717.02508545]
[140.86097717 711.40466309]
[132.49176025 698.33801270]
[133.43489075 682.84967041]
[143.32769775 670.89508057]
[158.36621094 667.07110596]
[163.79934692 653.08966064]
[169.23249817 639.10821533]
[174.66563416 625.12670898]
[180.09878540 611.14526367]
[185.53192139 597.16381836]
[167.82821655 588.91424561]
[150.78486633 579.37426758]
[134.49577332 568.59625244]
[119.05067444 556.63970947]
[104.53469849 543.57037354]
[91.02780914 529.46026611]
[78.60444641 514.38696289]
[67.33307648 498.43359375]
[57.27581787 481.68795776]
[48.48810196 464.24224854]
[41.01837540 446.19256592]
[34.90781784 427.63833618]
[30.19013405 408.68173218]
[26.89134789 389.42715454]
[25.02967262 369.98065186]
[24.61540413 350.44937134]
[25.65086746 330.94085693]
[28.13039970 311.56262207]
[32.04038620 292.42135620]
[37.35932541 273.62252808]
[44.05796432 255.26968384]
[52.09944534 237.46395874]
[61.43951035 220.30343628]
[72.02674103 203.88265991]
[83.80287170 188.29211426]
[96.70304871 173.61767578]
[110.65626526 159.94023132]
[125.58567810 147.33514404]
[116.68344116 135.26243591]
[107.78121185 123.18972778]
[98.87898254 111.11701965]
[89.87055969 99.12334442]
[75.34033203 92.86372375]
[73.75264740 78.05397797]
[64.63874054 66.14025879]
[55.52483368 54.22654343]
[36.68536377 52.46630478]
[25.28527832 37.76572037]
[28.16975975 19.71033478]
[18.64107513 8.12568188]
[9.11239147 -3.45897126]
[-5.17367220 1.60898685]
[-20.33149910 1.48208451]
[-34.53070831 -3.82435441]
[-46.05667496 -13.66955090]
[-53.51758194 -26.86465073]
[-56.01248932 -41.81628036]
[-53.24012756 -56.71895981]
[-45.53527069 -69.77311707]
[-33.82831573 -79.40239716]
[-19.53293800 -84.44401550]
[-4.37537050 -84.28917694]
[9.81403446 -78.95658112]
[21.32183838 -69.09016418]
[28.75841713 -55.88133621]
[31.22576714 -40.92513275]
[28.42594528 -26.02758980]
[20.69704437 -12.98765469]
[30.22572899 -1.40300226]
[39.75441360 10.18165016]
[51.11495972 8.80042744]
[61.83722687 13.13230419]
[69.20150757 22.20373154]
[71.27960205 33.82375717]
[67.43855286 45.11263275]
[76.55245972 57.02635193]
[85.66636658 68.94007111]
[99.54471588 74.34754181]
[101.78427887 90.00942993]
[108.81537628 94.00445557]
[110.95169067 102.21479034]
[119.85391998 114.28749847]
[128.75614929 126.36020660]
[137.65838623 138.43292236]
[148.23612976 131.46144104]
[159.13696289 125.00692749]
[170.33561707 119.08430481]
[181.80616760 113.70729828]
[193.52204895 108.88833618]
[205.45613098 104.63858795]
[217.58078003 100.96788025]
[229.86790466 97.88471222]
[242.28907776 95.39620972]
[254.81552124 93.50814056]
[267.41821289 92.22485352]
[280.06802368 91.54933167]
[292.73559570 91.48312378]
[305.39163208 92.02638245]
[318.00680542 93.17784119]
[330.55194092 94.93482971]
[342.99798584 97.29326630]
[355.31607056 100.24769592]
[367.47772217 103.79126740]
[379.45477295 107.91576385]
[391.21948242 112.61163330]
[402.74462891 117.86800385]
[414.00350952 123.67268372]
[424.97006226 130.01223755]
[435.61886597 136.87197876]
[445.92532349 144.23602295]
[455.86553955 152.08731079]
[465.41650391 160.40765381]
[474.55609131 169.17778015]
[483.26318359 178.37738037]
[491.51757812 187.98515320]
[499.30020142 197.97883606]
[506.59298706 208.33529663]
[513.37915039 219.03053284]
[519.64282227 230.03981018]
[525.36968994 241.33760071]
[530.54638672 252.89775085]
[535.16088867 264.69348145]
[539.20263672 276.69750977]
[542.66223145 288.88201904]
[545.53161621 301.21875000]
[547.80419922 313.67919922]
[549.47473145 326.23449707]
[550.53936768 338.85556030]
[550.99560547 351.51315308]
[550.84234619 364.17797852]
[550.08007812 376.82070923]
[548.71044922 389.41207886]
[546.73675537 401.92291260]
[544.16345215 414.32427979]
[540.99658203 426.58740234]
[537.24346924 438.68395996]
[532.91278076 450.58587646]
[528.01458740 462.26562500]
[522.56018066 473.69619751]
[516.56231689 484.85104370]
[510.03475952 495.70443726]
[502.99267578 506.23117065]
[495.45239258 516.40692139]
[487.43133545 526.20806885]
[478.94815063 535.61199951]
[470.02239990 544.59686279]
[460.67483521 553.14190674]
[450.92706299 561.22735596]
[440.80163574 568.83447266]
[430.32205200 575.94567871]
[419.51254272 582.54449463]
[408.39819336 588.61560059]
[397.00466919 594.14495850]
[385.35842896 599.11981201]
[373.48638916 603.52868652]
[361.41604614 607.36126709]
[349.17538452 610.60870361]
[336.79272461 613.26354980]
[324.29675293 615.31964111]
[311.71640015 616.77221680]
[299.08078003 617.61785889]
[286.41915894 617.85473633]
[273.76089478 617.48217773]
[261.13525391 616.50115967]
[248.57147217 614.91387939]
[236.09866333 612.72406006]
[223.74571228 609.93676758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[48 94]
[49 93]
[50 92]
[51 91]
[52 89]
[54 87]
[55 86]
[56 85]
[59 80]
[60 79]
[61 78]
] def

init

% Start Annotations
1 20 0.0 1 colorpair
2 19 0.0 1 colorpair
3 18 0.0 1 colorpair
4 17 0.0 1 colorpair
5 16 0.0 1 colorpair
6 15 0.0 1 colorpair
48 94 0.16 1 colorpair
49 93 0.16 1 colorpair
50 92 0.0 1 colorpair
51 91 0.0 1 colorpair
52 89 0.16 1 colorpair
54 87 0.16 1 colorpair
55 86 0.16 1 colorpair
59 80 0.0 1 colorpair
60 79 0.16 1 colorpair
61 78 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
48 cmark
94 cmark
93 cmark
52 cmark
89 cmark
54 cmark
87 cmark
55 cmark
56 85 22 gmark
56 cmark
85 cmark
60 cmark

% End Annotations
showpage
end
%%EOF
