%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Dec 25 14:25:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUUGAGAAAGUGGGUAUAACAAUUGCUUUCCUUAUUCCUAUCACGGUUUUAAUCAUCAACUGUUUAACGAUAGCUGAGAAGAUUCAAAACCUGAUGAAGAAUAAAGAAAGC\
) } def
/len { sequence length } bind def

/coor [
[61.21467209 178.66699219]
[51.62153244 173.15956116]
[42.79788971 166.48846436]
[34.88409042 158.75981140]
[28.00601578 150.09654236]
[22.27306366 140.63644409]
[8.43455219 146.42398071]
[-5.40395784 152.21151733]
[-19.24246788 157.99905396]
[-33.00063705 163.97508240]
[-46.67589951 170.13845825]
[-60.35116196 176.30183411]
[-74.02642059 182.46520996]
[-87.70168304 188.62858582]
[-101.37694550 194.79196167]
[-115.05220795 200.95533752]
[-117.22180939 216.22938538]
[-127.32205200 227.89080811]
[-142.12998962 232.21847534]
[-156.92044067 227.83146667]
[-166.97384644 216.12965393]
[-169.08219910 200.84703064]
[-162.57272339 186.86024475]
[-149.52258301 178.63241577]
[-134.09600830 178.78901672]
[-121.21558380 187.28007507]
[-107.54032135 181.11669922]
[-93.86505890 174.95332336]
[-80.18979645 168.78994751]
[-66.51454163 162.62657166]
[-52.83927536 156.46319580]
[-39.16401672 150.29981995]
[-34.29303360 144.60546875]
[-25.03000832 144.16055298]
[-11.19149876 138.37301636]
[2.64701200 132.58546448]
[16.48552322 126.79792786]
[12.57334042 107.02681732]
[13.27754021 86.88467407]
[18.56093788 67.43505096]
[28.14455223 49.70495224]
[41.52234650 34.63058090]
[57.98792648 23.00790596]
[76.67186737 15.45063496]
[96.58760071 12.35781574]
[116.68351746 13.89275837]
[135.89849854 19.97441292]
[153.21794128 30.28165245]
[163.30554199 19.18029404]
[173.39315796 8.07893467]
[183.48075867 -3.02242351]
[175.19027710 -17.98205185]
[172.44377136 -34.83877945]
[175.54788208 -51.60864258]
[184.12162781 -66.32350922]
[197.14306641 -77.26205444]
[213.07113647 -83.15112305]
[230.02796936 -83.31391144]
[246.02029419 -77.74768066]
[255.16526794 -89.63758087]
[264.31021118 -101.52748108]
[256.15924072 -114.30783844]
[252.87402344 -129.10591125]
[254.85122681 -144.13476562]
[261.85211182 -157.57958984]
[273.03128052 -167.81686401]
[287.03881836 -173.61038208]
[302.18322754 -174.26054382]
[316.63574219 -169.68884277]
[328.65118408 -160.44732666]
[336.77859497 -147.65197754]
[340.03652954 -132.84786987]
[338.03164673 -117.82268524]
[331.00598145 -104.39078522]
[319.80795288 -94.17413330]
[305.78976440 -88.40644836]
[290.64419556 -87.78419495]
[276.20013428 -92.38252258]
[267.05514526 -80.49262238]
[257.91018677 -68.60272217]
[265.65093994 -58.07001877]
[270.36193848 -45.86265564]
[271.70645142 -32.83335876]
[269.58319092 -19.89429474]
[264.13385010 -7.95319319]
[255.73370361 2.15032482]
[244.96582031 9.70378399]
[232.58055115 14.17209530]
[219.44323730 15.23545837]
[206.47375488 12.81223774]
[194.58212280 7.06518459]
[184.49450684 18.16654396]
[174.40690613 29.26790237]
[164.31929016 40.36925888]
[171.31332397 48.93918991]
[177.17306519 58.32128525]
[181.80529785 68.36631775]
[185.13635254 78.91450500]
[187.11325073 89.79807281]
[187.70452881 100.84391785]
[186.90080261 111.87633514]
[184.71484375 122.71984863]
[181.18142700 133.20198059]
[176.35676575 143.15602112]
[170.31758118 152.42361450]
[163.15992737 160.85737610]
[154.99768066 168.32315063]
[145.96063232 174.70219421]
[136.19255066 179.89302063]
[125.84880066 183.81311035]
[115.09390259 186.40007019]
[104.09892273 187.61276245]
[93.03874969 187.43190002]
[82.08929443 185.86036682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[48 94]
[49 93]
[50 92]
[51 91]
[59 80]
[60 79]
[61 78]
] def

init

% Start Annotations
6 37 0.0 1 colorpair
7 36 0.16 1 colorpair
8 35 0.0 1 colorpair
9 34 0.0 1 colorpair
10 32 0.0 1 colorpair
11 31 0.0 1 colorpair
12 30 0.0 1 colorpair
13 29 0.0 1 colorpair
14 28 0.0 1 colorpair
15 27 0.0 1 colorpair
16 26 0.0 1 colorpair
48 94 0.0 1 colorpair
49 93 0.0 1 colorpair
50 92 0.0 1 colorpair
51 91 0.0 1 colorpair
59 80 0.0 1 colorpair
60 79 0.16 1 colorpair
61 78 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
36 cmark
60 cmark

% End Annotations
showpage
end
%%EOF
