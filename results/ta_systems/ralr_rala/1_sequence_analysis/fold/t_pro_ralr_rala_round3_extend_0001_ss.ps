%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 17:56:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUGAGAUAUGACAAUGUUAAACCAUGUCCGUUUUGUGGUUGUCCAUCAGUAACGGUGAAAGCCAUUUCAGGAUAUUAC_____CGAGCGAAGUGUAACGGAUGCGAAUCCCGAACCGGCUAUGGUGGAAGUGAAAAAGAAGCACUCGAAAGAUGGAAUAAACGAA_______CCACUGGAAAUAAUA___AUGGAGGUGUUCAUGUAU_______\
) } def
/len { sequence length } bind def

/coor [
[83.63307953 598.68225098]
[68.65081024 597.96490479]
[53.69686890 596.79760742]
[38.78477478 595.18133545]
[23.92800140 593.11755371]
[9.13997555 590.60809326]
[-5.56593895 587.65527344]
[-20.17645073 584.26177979]
[-34.67835617 580.43060303]
[-49.05855179 576.16528320]
[-63.30403519 571.46966553]
[-77.40193939 566.34796143]
[-91.33952332 560.80474854]
[-105.10419464 554.84515381]
[-118.68350220 548.47448730]
[-132.06518555 541.69854736]
[-145.23713684 534.52343750]
[-158.18746948 526.95556641]
[-170.90447998 519.00195312]
[-183.37666321 510.66958618]
[-195.59274292 501.96612549]
[-207.54170227 492.89941406]
[-219.21272278 483.47763062]
[-230.59526062 473.70925903]
[-241.67904663 463.60317993]
[-252.45404053 453.16851807]
[-262.91052246 442.41467285]
[-273.03900146 431.35137939]
[-282.83038330 419.98864746]
[-292.27581787 408.33673096]
[-301.36669922 396.40615845]
[-310.09487915 384.20773315]
[-318.45245361 371.75244141]
[-326.43185425 359.05157471]
[-334.02587891 346.11657715]
[-341.22769165 332.95919800]
[-348.03073120 319.59124756]
[-354.42886353 306.02487183]
[-360.41635132 292.27230835]
[-365.98773193 278.34597778]
[-371.13796997 264.25848389]
[-375.86245728 250.02252197]
[-380.15689087 235.65100098]
[-384.01742554 221.15687561]
[-387.44052124 206.55326843]
[-390.42309570 191.85336304]
[-392.96246338 177.07044983]
[-395.05633545 162.21789551]
[-396.70281982 147.30909729]
[-397.90042114 132.35755920]
[-398.64807129 117.37677002]
[-398.94506836 102.38027191]
[-398.79116821 87.38162994]
[-398.18649292 72.39439392]
[-397.13159180 57.43210220]
[-395.62744141 42.50827789]
[-393.67535400 27.63641357]
[-391.27713013 12.82994461]
[-388.43493652 -1.89774752]
[-385.15133667 -16.53335190]
[-381.42929077 -31.06364250]
[-377.27218628 -45.47549057]
[-372.68374634 -59.75586700]
[-367.66812134 -73.89186859]
[-362.22985840 -87.87071991]
[-356.37387085 -101.67978668]
[-350.10543823 -115.30659485]
[-343.43026733 -128.73883057]
[-336.35433960 -141.96434021]
[-328.88406372 -154.97119141]
[-321.02621460 -167.74760437]
[-312.78784180 -180.28205872]
[-304.17645264 -192.56321716]
[-295.19979858 -204.57998657]
[-285.86599731 -216.32148743]
[-276.18347168 -227.77713013]
[-266.16098022 -238.93655396]
[-255.80757141 -249.78967285]
[-245.13262939 -260.32669067]
[-234.14578247 -270.53805542]
[-222.85694885 -280.41455078]
[-211.27635193 -289.94726562]
[-199.41445923 -299.12759399]
[-187.28196716 -307.94720459]
[-174.88984680 -316.39816284]
[-162.24931335 -324.47277832]
[-149.37176514 -332.16381836]
[-136.26887512 -339.46429443]
[-122.95244598 -346.36761475]
[-109.43453979 -352.86755371]
[-95.72736359 -358.95822144]
[-81.84329987 -364.63412476]
[-67.79489899 -369.89010620]
[-53.59486389 -374.72146606]
[-39.25601959 -379.12377930]
[-24.79132843 -383.09313965]
[-10.21385860 -386.62588501]
[4.46321297 -389.71887207]
[19.22662354 -392.36929321]
[34.06303024 -394.57473755]
[48.95902634 -396.33322144]
[63.90114975 -397.64315796]
[63.04090881 -412.61846924]
[62.18067169 -427.59378052]
[61.32043457 -442.56909180]
[51.87247086 -455.97314453]
[59.00136566 -470.74169922]
[75.37352753 -471.68218994]
[84.14666748 -457.82708740]
[76.29574585 -443.42935181]
[77.15598297 -428.45404053]
[78.01622009 -413.47872925]
[78.87645721 -398.50341797]
[93.87030029 -398.91308594]
[108.86967468 -398.87191772]
[123.86103058 -398.37988281]
[138.83082581 -397.43743896]
[153.76553345 -396.04547119]
[168.65164185 -394.20523071]
[183.47572327 -391.91833496]
[198.22434998 -389.18688965]
[212.88421631 -386.01336670]
[227.44207764 -382.40063477]
[241.88475037 -378.35192871]
[256.19921875 -373.87094116]
[270.37249756 -368.96166992]
[284.39181519 -363.62863159]
[298.24450684 -357.87658691]
[311.91802979 -351.71072388]
[325.40005493 -345.13668823]
[338.67837524 -338.16033936]
[351.74099731 -330.78802490]
[364.57611084 -323.02639771]
[377.17211914 -314.88247681]
[389.51763916 -306.36361694]
[401.60153198 -297.47750854]
[413.41284180 -288.23220825]
[424.94091797 -278.63604736]
[436.17535400 -268.69769287]
[447.10595703 -258.42614746]
[457.72286987 -247.83068848]
[468.01654053 -236.92088318]
[477.97760010 -225.70658875]
[487.59707642 -214.19796753]
[496.86627197 -202.40538025]
[505.77679443 -190.33950806]
[514.32061768 -178.01126099]
[522.49005127 -165.43174744]
[530.27764893 -152.61238098]
[537.67639160 -139.56471252]
[544.67956543 -126.30053711]
[551.28088379 -112.83185577]
[557.47442627 -99.17083740]
[563.25445557 -85.32981873]
[568.61590576 -71.32131958]
[573.55383301 -57.15798569]
[578.06378174 -42.85263062]
[582.14172363 -28.41817474]
[585.78387451 -13.86766529]
[588.98712158 0.78574848]
[591.74835205 15.52882481]
[594.06524658 30.34823799]
[595.93566895 45.23059845]
[597.35784912 60.16245651]
[598.33056641 75.13031006]
[598.85290527 90.12064362]
[598.92449951 105.11991119]
[598.54516602 120.11454010]
[597.71527100 135.09100342]
[596.43554688 150.03575134]
[594.70721436 164.93527222]
[592.53186035 179.77610779]
[589.91131592 194.54486084]
[586.84808350 209.22816467]
[583.34484863 223.81275940]
[579.40484619 238.28546143]
[575.03155518 252.63319397]
[570.22894287 266.84298706]
[565.00140381 280.90200806]
[559.35363770 294.79751587]
[553.29077148 308.51699829]
[546.81823730 322.04806519]
[539.94189453 335.37841797]
[532.66790771 348.49609375]
[525.00299072 361.38916016]
[516.95397949 374.04602051]
[508.52813721 386.45523071]
[499.73312378 398.60556030]
[490.57684326 410.48602295]
[481.06759644 422.08590698]
[471.21395874 433.39471436]
[461.02487183 444.40222168]
[450.50949097 455.09848022]
[439.67736816 465.47384644]
[428.53826904 475.51892090]
[417.10226440 485.22460938]
[405.37966919 494.58218384]
[393.38113403 503.58316040]
[381.11743164 512.21942139]
[368.59967041 520.48315430]
[355.83920288 528.36682129]
[342.84750366 535.86346436]
[329.63635254 542.96612549]
[316.21765137 549.66851807]
[302.60357666 555.96453857]
[288.80639648 561.84844971]
[274.83859253 567.31500244]
[260.71276855 572.35925293]
[246.44171143 576.97662354]
[232.03831482 581.16290283]
[217.51559448 584.91436768]
[202.88667297 588.22760010]
[188.16476440 591.09960938]
[173.36317444 593.52783203]
[158.49530029 595.51000977]
[143.57455444 597.04437256]
[128.61442566 598.12957764]
[113.62844086 598.76458740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
102 113 8 gmark
102 cmark
113 cmark
103 112 6 gmark
103 cmark
112 cmark
104 111 7 gmark
104 cmark
111 cmark
105 110 5 gmark
105 cmark
110 cmark

% End Annotations
showpage
end
%%EOF
