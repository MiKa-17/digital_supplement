%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 18:06:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AUGAGAUAUGACAAUGUUAAACCAUGUCCGUUUUGUGGUUGUC__CAUCAGUAACGGUGAAAGC_CAUUUCAGGAUAUUAC__CGAGCGAAGU___GUAACGGAUGCGAAUCCCGAACCGGCUAUGGUGGAAGUGAAAAAGAAGCACUCGAAAGAUGGAAUAAACGAACCACUGGAAAUAAUAAUGGAGGUG_UUCAU______GUA\
) } def
/len { sequence length } bind def

/coor [
[56.27340317 555.78967285]
[41.71317673 554.15734863]
[27.21262741 552.05999756]
[12.78660393 549.49981689]
[-1.55012155 546.47937012]
[-15.78287125 543.00177002]
[-29.89707184 539.07061768]
[-43.87827301 534.68988037]
[-57.71215820 529.86407471]
[-71.38455963 524.59814453]
[-84.88149261 518.89746094]
[-98.18911743 512.76788330]
[-111.29382324 506.21566772]
[-124.18218994 499.24755859]
[-136.84101868 491.87063599]
[-149.25733948 484.09246826]
[-161.41845703 475.92108154]
[-173.31190491 467.36474609]
[-184.92552185 458.43228149]
[-196.24739075 449.13284302]
[-207.26594543 439.47592163]
[-217.96989441 429.47140503]
[-228.34828186 419.12954712]
[-238.39047241 408.46093750]
[-248.08618164 397.47650146]
[-257.42550659 386.18746948]
[-266.39883423 374.60543823]
[-274.99703979 362.74221802]
[-283.21127319 350.60998535]
[-291.03317261 338.22116089]
[-298.45465088 325.58843994]
[-311.62713623 332.76379395]
[-324.79962158 339.93914795]
[-330.69604492 354.85934448]
[-346.07901001 359.41390991]
[-359.14797974 350.10900879]
[-359.87759399 334.08258057]
[-347.70812988 323.62869263]
[-331.97497559 326.76669312]
[-318.80249023 319.59130859]
[-305.63003540 312.41595459]
[-312.64645386 298.44183350]
[-319.18164062 284.23626709]
[-325.22796631 269.81585693]
[-330.77841187 255.19738770]
[-335.82644653 240.39791870]
[-340.36618042 225.43472290]
[-344.39239502 210.32525635]
[-347.90032959 195.08711243]
[-350.88589478 179.73806763]
[-353.34564209 164.29603577]
[-355.27670288 148.77902222]
[-356.67678833 133.20512390]
[-357.54428101 117.59249878]
[-357.87817383 101.95935822]
[-357.67807007 86.32393646]
[-356.94421387 70.70445251]
[-355.67749023 55.11914444]
[-353.87930298 39.58617401]
[-351.55181885 24.12365723]
[-348.69769287 8.74963093]
[-345.32031250 -6.51797628]
[-341.42358398 -21.66135979]
[-337.01202393 -36.66285706]
[-332.09085083 -51.50497818]
[-326.66574097 -66.17041016]
[-320.74304199 -80.64204407]
[-314.32965088 -94.90301514]
[-307.43307495 -108.93668365]
[-300.06134033 -122.72667694]
[-292.22305298 -136.25692749]
[-283.92733765 -149.51165771]
[-275.18386841 -162.47538757]
[-266.00283813 -175.13301086]
[-256.39498901 -187.46977234]
[-246.37149048 -199.47128296]
[-235.94404602 -211.12353516]
[-225.12481689 -222.41294861]
[-213.92642212 -233.32635498]
[-202.36190796 -243.85102844]
[-190.44477844 -253.97470093]
[-178.18891907 -263.68554688]
[-165.60864258 -272.97225952]
[-152.71859741 -281.82400513]
[-139.53381348 -290.23043823]
[-126.06969452 -298.18179321]
[-112.34192657 -305.66879272]
[-98.36651611 -312.68267822]
[-84.15975952 -319.21527100]
[-69.73824310 -325.25897217]
[-55.11876297 -330.80670166]
[-40.31838608 -335.85205078]
[-25.35436249 -340.38906860]
[-10.24414825 -344.41250610]
[4.99463558 -347.91766357]
[20.34421730 -350.90045166]
[35.78669357 -353.35736084]
[51.30406189 -355.28558350]
[66.87821960 -356.68283081]
[82.49099731 -357.54748535]
[98.12419891 -357.87850952]
[113.75959015 -357.67556763]
[129.37893677 -356.93887329]
[144.96401978 -355.66928101]
[160.49665833 -353.86828613]
[162.72177124 -368.70233154]
[164.94689941 -383.53637695]
[155.35260010 -396.09521484]
[157.53164673 -411.74856567]
[170.19125366 -421.20956421]
[185.82069397 -418.86511230]
[195.14729309 -406.10620117]
[192.63775635 -390.50244141]
[179.78094482 -381.31124878]
[177.55581665 -366.47720337]
[175.33070374 -351.64315796]
[189.74208069 -349.00180054]
[204.06158447 -345.90069580]
[218.27453613 -342.34307861]
[232.36637878 -338.33251953]
[246.32270813 -333.87316895]
[260.12921143 -328.96957397]
[273.77175903 -323.62677002]
[287.23638916 -317.85018921]
[300.50930786 -311.64581299]
[313.57690430 -305.01995850]
[326.42584229 -297.97937012]
[339.04296875 -290.53134155]
[351.41531372 -282.68341064]
[363.53024292 -274.44369507]
[375.37533569 -265.82055664]
[386.93847656 -256.82287598]
[398.20785522 -247.45983887]
[409.17187500 -237.74104309]
[419.81933594 -227.67643738]
[430.13934326 -217.27633667]
[440.12130737 -206.55137634]
[449.75506592 -195.51252747]
[459.03067017 -184.17112732]
[467.93869019 -172.53875732]
[476.46997070 -160.62733459]
[484.61581421 -148.44906616]
[492.36782837 -136.01640320]
[499.71810913 -123.34210205]
[506.65911865 -110.43910980]
[513.18377686 -97.32065582]
[519.28533936 -84.00016785]
[524.95764160 -70.49127960]
[530.19476318 -56.80783081]
[534.99151611 -42.96382904]
[539.34283447 -28.97344780]
[543.24426270 -14.85101128]
[546.69195557 -0.61097974]
[549.68225098 13.73206615]
[552.21209717 28.16344070]
[554.27893066 42.66836929]
[555.88061523 57.23199463]
[557.01556396 71.83941650]
[557.68255615 86.47566223]
[557.88098145 101.12576294]
[557.61053467 115.77471161]
[556.87158203 130.40750122]
[555.66479492 145.00917053]
[553.99151611 159.56474304]
[551.85339355 174.05932617]
[549.25256348 188.47808838]
[546.19183350 202.80625916]
[542.67419434 217.02915955]
[538.70330811 231.13224792]
[534.28326416 245.10105896]
[529.41851807 258.92132568]
[524.11413574 272.57885742]
[518.37548828 286.05966187]
[512.20849609 299.35000610]
[505.61941528 312.43621826]
[498.61505127 325.30490112]
[491.20254517 337.94293213]
[483.38946533 350.33731079]
[475.18386841 362.47537231]
[466.59411621 374.34469604]
[457.62899780 385.93313599]
[448.29772949 397.22879028]
[438.60983276 408.22012329]
[428.57522583 418.89587402]
[418.20419312 429.24511719]
[407.50738525 439.25723267]
[396.49569702 448.92199707]
[385.18041992 458.22949219]
[373.57318115 467.17022705]
[361.68582153 475.73498535]
[349.53051758 483.91506958]
[337.11972046 491.70205688]
[324.46615601 499.08795166]
[311.58276367 506.06524658]
[298.48269653 512.62677002]
[285.17944336 518.76586914]
[271.68658447 524.47613525]
[258.01791382 529.75177002]
[244.18746948 534.58740234]
[230.20939636 538.97808838]
[216.09799194 542.91931152]
[201.86772156 546.40704346]
[187.53314209 549.43768311]
[173.10894775 552.00811768]
[158.60989380 554.11578369]
[144.05082703 555.75848389]
[129.44667053 556.93450928]
[114.81234741 557.64270020]
[100.16286469 557.88232422]
[85.51322174 557.65313721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 41]
[32 40]
[33 39]
[105 116]
[106 115]
[107 114]
] def

init

% Start Annotations
31 41 0.0 1 colorpair
32 40 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
32 40 1 gmark
33 39 13 gmark
33 cmark
39 cmark
105 116 8 gmark
105 cmark
116 cmark
106 115 6 gmark
106 cmark
115 cmark
107 114 7 gmark
107 cmark
114 cmark

% End Annotations
showpage
end
%%EOF
