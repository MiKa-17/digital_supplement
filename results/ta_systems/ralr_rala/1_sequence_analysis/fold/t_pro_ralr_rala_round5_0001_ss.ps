%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 18:17:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_ACUAUGAGAUAUGACAAAGUUAAACCAUGUCCGUUUUGUGGUUGUC__CAUCAGUAACGGUGAAAGC_CAUUUCAGGAUAUUAC__CGAGCGAAGU___GUAACGGAUGCGAAUCCCGAACCGGCUAUGGUGGAAGUGAAAAAGAAGCACUCGAAAGAUGGAAUAAACGAACCACUGGAAAUAAUAAUGGAGGUG_UUCAU______GUA\
) } def
/len { sequence length } bind def

/coor [
[57.01714325 558.24853516]
[42.45468903 556.64843750]
[27.95053864 554.58563232]
[13.51938438 552.06231689]
[-0.82415217 549.08099365]
[-15.06553841 545.64465332]
[-29.19034576 541.75683594]
[-43.18426514 537.42144775]
[-57.03311539 532.64288330]
[-70.72286224 527.42596436]
[-84.23964691 521.77600098]
[-97.56977081 515.69873047]
[-110.69972229 509.20028687]
[-123.61620331 502.28726196]
[-136.30612183 494.96664429]
[-148.75663757 487.24588013]
[-160.95512390 479.13278198]
[-172.88922119 470.63555908]
[-184.54682922 461.76281738]
[-195.91615295 452.52355957]
[-206.98567200 442.92715454]
[-217.74417114 432.98330688]
[-228.18074036 422.70208740]
[-238.28482056 412.09393311]
[-248.04615784 401.16958618]
[-257.45489502 389.94009399]
[-266.50143433 378.41683960]
[-275.17666626 366.61151123]
[-283.47180176 354.53607178]
[-291.37841797 342.20275879]
[-298.88851929 329.62405396]
[-305.99447632 316.81268311]
[-319.33932495 323.66210938]
[-332.68417358 330.51156616]
[-338.94555664 345.28228760]
[-354.43579102 349.45742798]
[-367.27212524 339.83410645]
[-367.60763550 323.79455566]
[-355.18490601 313.64294434]
[-339.53359985 317.16671753]
[-326.18875122 310.31726074]
[-312.84390259 303.46783447]
[-319.52014160 289.32009888]
[-325.71173096 274.95361328]
[-331.41149902 260.38504028]
[-336.61288452 245.63117981]
[-341.30984497 230.70907593]
[-345.49697876 215.63597107]
[-349.16946411 200.42926025]
[-352.32302856 185.10653687]
[-354.95404053 169.68550110]
[-357.05944824 154.18394470]
[-358.63684082 138.61979675]
[-359.68438721 123.01103973]
[-360.20086670 107.37569427]
[-360.18569946 91.73182678]
[-359.63888550 76.09751129]
[-358.56109619 60.49081039]
[-356.95352173 44.92975235]
[-354.81802368 29.43231392]
[-352.15713501 14.01640129]
[-348.97384644 -1.30017781]
[-345.27188110 -16.49972725]
[-341.05551147 -31.56468964]
[-336.32962036 -46.47766113]
[-331.09963989 -61.22140884]
[-325.37161255 -75.77890015]
[-319.15219116 -90.13332367]
[-312.44851685 -104.26809692]
[-305.26837158 -118.16687775]
[-297.62002563 -131.81362915]
[-289.51232910 -145.19256592]
[-280.95462036 -158.28823853]
[-271.95681763 -171.08552551]
[-262.52932739 -183.56962585]
[-252.68299866 -195.72613525]
[-242.42922974 -207.54100037]
[-231.77986145 -219.00057983]
[-220.74720764 -230.09161377]
[-209.34399414 -240.80131531]
[-197.58340454 -251.11729431]
[-185.47903442 -261.02764893]
[-173.04486084 -270.52090454]
[-160.29524231 -279.58612061]
[-147.24491882 -288.21282959]
[-133.90896606 -296.39102173]
[-120.30277252 -304.11129761]
[-106.44207764 -311.36468506]
[-92.34288788 -318.14285278]
[-78.02149200 -324.43795776]
[-63.49442673 -330.24273682]
[-48.77848816 -335.55047607]
[-33.89066696 -340.35501099]
[-18.84816933 -344.65081787]
[-3.66836953 -348.43295288]
[11.63119507 -351.69702148]
[27.03285027 -354.43927002]
[42.51879883 -356.65649414]
[58.07115555 -358.34616089]
[73.67195129 -359.50634766]
[89.30316162 -360.13565063]
[104.94673157 -360.23339844]
[120.58458710 -359.79943848]
[136.19866943 -358.83428955]
[151.77091980 -357.33905029]
[167.28337097 -355.31549072]
[169.71765137 -370.11663818]
[172.15194702 -384.91778564]
[162.73590088 -397.61083984]
[165.13569641 -413.23187256]
[177.92758179 -422.51321411]
[193.52236938 -419.94839478]
[202.66793823 -407.05908203]
[199.93838501 -391.49227905]
[186.95310974 -382.48348999]
[184.51881409 -367.68234253]
[182.08451843 -352.88119507]
[196.45634460 -350.03933716]
[210.73043823 -346.74154663]
[224.89236450 -342.99111938]
[238.92773438 -338.79190063]
[252.82235718 -334.14810181]
[266.56216431 -329.06445312]
[280.13317871 -323.54608154]
[293.52172852 -317.59860229]
[306.71420288 -311.22802734]
[319.69723511 -304.44082642]
[332.45767212 -297.24383545]
[344.98260498 -289.64440918]
[357.25933838 -281.65020752]
[369.27542114 -273.26931763]
[381.01870728 -264.51028442]
[392.47723389 -255.38191223]
[403.63946533 -245.89349365]
[414.49407959 -236.05464172]
[425.03002930 -225.87530518]
[435.23669434 -215.36581421]
[445.10372925 -204.53680420]
[454.62109375 -193.39924622]
[463.77917480 -181.96444702]
[472.56869507 -170.24395752]
[480.98077393 -158.24967957]
[489.00683594 -145.99375916]
[496.63876343 -133.48860168]
[503.86886597 -120.74689484]
[510.68975830 -107.78152466]
[517.09460449 -94.60565186]
[523.07678223 -81.23260498]
[528.63037109 -67.67594910]
[533.74969482 -53.94940567]
[538.42956543 -40.06689072]
[542.66528320 -26.04246521]
[546.45245361 -11.89034081]
[549.78729248 2.37514591]
[552.66650391 16.73954201]
[555.08703613 31.18829155]
[557.04650879 45.70676041]
[558.54290771 60.28023529]
[559.57470703 74.89395142]
[560.14093018 89.53310394]
[560.24096680 104.18286133]
[559.87469482 118.82838440]
[559.04248047 133.45483398]
[557.74523926 148.04737854]
[555.98419189 162.59124756]
[553.76116943 177.07170105]
[551.07843018 191.47407532]
[547.93865967 205.78376770]
[544.34509277 219.98628235]
[540.30126953 234.06723022]
[535.81140137 248.01235962]
[530.88000488 261.80752563]
[525.51202393 275.43875122]
[519.71295166 288.89224243]
[513.48864746 302.15432739]
[506.84542847 315.21163940]
[499.78997803 328.05087280]
[492.32952881 340.65908813]
[484.47155762 353.02346802]
[476.22406006 365.13146973]
[467.59539795 376.97088623]
[458.59429932 388.52969360]
[449.22988892 399.79614258]
[439.51165771 410.75888062]
[429.44946289 421.40676880]
[419.05346680 431.72900391]
[408.33422852 441.71514893]
[397.30258179 451.35510254]
[385.96975708 460.63906860]
[374.34716797 469.55767822]
[362.44665527 478.10183716]
[350.28021240 486.26293945]
[337.86022949 494.03268433]
[325.19924927 501.40322876]
[312.31008911 508.36706543]
[299.20584106 514.91717529]
[285.89974976 521.04693604]
[272.40533447 526.75012207]
[258.73623657 532.02087402]
[244.90632629 536.85400391]
[230.92959595 541.24444580]
[216.82020569 545.18792725]
[202.59246826 548.68029785]
[188.26078796 551.71813965]
[173.83969116 554.29827881]
[159.34378052 556.41821289]
[144.78773499 558.07562256]
[130.18632507 559.26904297]
[115.55432892 559.99707031]
[100.90657043 560.25909424]
[86.25789642 560.05474854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[32 42]
[33 41]
[34 40]
[106 117]
[107 116]
[108 115]
] def

init

% Start Annotations
32 42 0.0 1 colorpair
33 41 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
33 41 1 gmark
34 40 13 gmark
34 cmark
40 cmark
106 117 8 gmark
106 cmark
117 cmark
107 116 6 gmark
107 cmark
116 cmark
108 115 7 gmark
108 cmark
115 cmark

% End Annotations
showpage
end
%%EOF
