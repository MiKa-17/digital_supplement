%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 01:28:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGA_ACUACAAUCUAUU__UUGCGGUAGAGUGAAGU_UC_AUAAUUUAA________A_A__U______UUAUUUAUU__UUUAUGGAACUUGAUUUUAAAAUCAAAUUCCCAGCCACUCU_U_A____UCCUGCU___GA__________\
) } def
/len { sequence length } bind def

/coor [
[224.49311829 115.28082275]
[213.26293945 105.33162689]
[202.56883240 94.80832672]
[192.44013977 83.73976135]
[182.90460205 72.15626526]
[173.98838806 60.08959579]
[161.47453308 68.36025238]
[155.12290955 81.83267212]
[139.34385681 82.98687744]
[126.83001709 91.25753784]
[114.31616974 99.52819061]
[107.89789581 111.94983673]
[93.95448303 112.98564911]
[81.44064331 121.25630951]
[80.62705994 136.63955688]
[71.02359009 148.45593262]
[56.47573471 152.30612183]
[42.61620712 146.91618347]
[30.10236549 155.18682861]
[31.10979080 170.51264954]
[24.30494690 184.28181458]
[11.51830482 192.79046631]
[-3.81059480 193.74984741]
[-17.55835533 186.90188599]
[-26.02689552 174.08863831]
[-26.93822289 158.75680542]
[-20.04719543 145.03057861]
[-7.20746374 136.60223389]
[8.12714863 135.73896790]
[21.83170891 142.67298889]
[34.34555054 134.40232849]
[34.81938934 119.53917694]
[44.06375504 107.66459656]
[58.69881821 103.46122742]
[73.16998291 108.74246216]
[85.68383026 100.47180939]
[92.10210419 88.05016327]
[106.04551697 87.01435089]
[118.55935669 78.74369049]
[131.07319641 70.47303772]
[138.31991577 56.40904617]
[153.20388794 55.84641266]
[165.71772766 47.57575607]
[158.11149597 34.64327621]
[151.19253540 21.33044434]
[144.97979736 7.67374372]
[139.49029541 -6.28939104]
[134.73910522 -20.52068901]
[130.73924255 -34.98114014]
[127.50164795 -49.63111115]
[125.03522491 -64.43045044]
[123.34671021 -79.33858490]
[122.44075012 -94.31466675]
[122.31982422 -109.31763458]
[122.98425293 -124.30636597]
[124.43222046 -139.23979187]
[126.65976715 -154.07696533]
[129.66078186 -168.77722168]
[133.42703247 -183.30026245]
[137.94819641 -197.60630798]
[143.21188354 -211.65611267]
[149.20367432 -225.41119385]
[155.90715027 -238.83383179]
[163.30390930 -251.88723755]
[171.37370300 -264.53564453]
[180.09440613 -276.74435425]
[189.44212341 -288.47994995]
[199.39120483 -299.71023560]
[209.91441345 -310.40441895]
[220.98289490 -320.53323364]
[232.56629944 -330.06884766]
[244.63288879 -338.98519897]
[257.14959717 -347.25778198]
[270.08209229 -354.86398315]
[283.39492798 -361.78289795]
[297.05166626 -367.99560547]
[311.01480103 -373.48504639]
[325.24612427 -378.23620605]
[339.70657349 -382.23602295]
[354.35656738 -385.47357178]
[369.15591431 -387.93994141]
[384.06405640 -389.62841797]
[399.04013062 -390.53433228]
[414.04309082 -390.65521240]
[429.03182983 -389.99075317]
[443.96524048 -388.54272461]
[458.80242920 -386.31515503]
[473.50265503 -383.31408691]
[488.02569580 -379.54779053]
[502.33172607 -375.02658081]
[516.38153076 -369.76284790]
[530.13659668 -363.77099609]
[543.55920410 -357.06750488]
[556.61260986 -349.67068481]
[569.26098633 -341.60086060]
[581.46966553 -332.88012695]
[593.20520020 -323.53237915]
[604.43548584 -313.58325195]
[615.12963867 -303.06002808]
[625.25842285 -291.99151611]
[634.79400635 -280.40808105]
[643.71026611 -268.34146118]
[651.98284912 -255.82473755]
[659.58898926 -242.89221191]
[666.50787354 -229.57934570]
[672.72052002 -215.92260742]
[678.20996094 -201.95944214]
[682.96105957 -187.72810364]
[686.96087646 -173.26763916]
[690.19836426 -158.61764526]
[692.66467285 -143.81828308]
[694.35308838 -128.91014099]
[695.25897217 -113.93405914]
[695.37982178 -98.93109131]
[694.71527100 -83.94235992]
[693.26721191 -69.00894928]
[691.03961182 -54.17179108]
[688.03851318 -39.47154999]
[684.27215576 -24.94852257]
[679.75091553 -10.64251328]
[674.48712158 3.40726495]
[668.49523926 17.16230392]
[661.79168701 30.58489990]
[654.39483643 43.63826370]
[646.32501221 56.28661728]
[637.60418701 68.49529266]
[628.25640869 80.23081970]
[618.30725098 91.46104431]
[607.78399658 102.15517426]
[596.71545410 112.28390503]
[585.13201904 121.81946564]
[573.06536865 130.73573303]
[560.54858398 139.00825500]
[547.61608887 146.61436462]
[534.30316162 153.53320312]
[520.64642334 159.74583435]
[506.68322754 165.23519897]
[492.45190430 169.98625183]
[477.99139404 173.98599243]
[463.34140015 177.22344971]
[448.54205322 179.68974304]
[433.63388062 181.37811279]
[418.65780640 182.28395081]
[403.65484619 182.40473938]
[388.66610718 181.74017334]
[373.73269653 180.29206848]
[358.89553833 178.06439209]
[344.19531250 175.06324768]
[329.67230225 171.29685974]
[315.36630249 166.77557373]
[301.31652832 161.51174927]
[287.56152344 155.51983643]
[274.13894653 148.81623840]
[261.08560181 141.41935730]
[248.43727112 133.34944153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[18 31]
[19 30]
] def

init

% Start Annotations
6 43 0.0 0.2 colorpair
7 42 0.0 1 colorpair
9 40 0.16 0.2 colorpair
10 39 0.0 0.2 colorpair
11 38 0.0 0.2 colorpair
13 36 0.0 0.2 colorpair
14 35 0.0 1 colorpair
18 31 0.0 1 colorpair
19 30 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 43 2 gmark
9 40 2 gmark
9 cmark
10 39 2 gmark
11 38 2 gmark
13 36 2 gmark
19 cmark

% End Annotations
showpage
end
%%EOF
