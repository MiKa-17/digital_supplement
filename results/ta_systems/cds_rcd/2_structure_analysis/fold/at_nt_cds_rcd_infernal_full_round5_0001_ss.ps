%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 00:55:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGA_ACUACAAUCUAUUUAGCGGUAGAGUGAAGUU________C_AUAAAUU____AA________AA_________UUAUUUUUU__UUUUUUGAACUUGAUUUUUAAAUCAAAUUCCAAGUCACUCU_U______U___GC___CCGA_G____UGG__\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50904846 91.92890167]
[62.55071259 90.78750610]
[47.64667130 89.07746124]
[32.81853867 86.80124664]
[18.08781052 83.96216583]
[3.47584796 80.56433105]
[-10.99616337 76.61267090]
[-25.30723953 72.11292267]
[-39.43663406 67.07159424]
[-53.36385727 61.49600983]
[-67.06871796 55.39424515]
[-80.53134155 48.77515030]
[-93.73221588 41.64832306]
[-106.65219116 34.02409363]
[-119.27254486 25.91352081]
[-131.57496643 17.32835960]
[-143.54164124 8.28106117]
[-155.15519714 -1.21525848]
[-166.39878845 -11.14683056]
[-177.25613403 -21.49925423]
[-187.71148682 -32.25752258]
[-197.74969482 -43.40603256]
[-207.35618591 -54.92862320]
[-216.51702881 -66.80858612]
[-225.21896362 -79.02869415]
[-233.44935608 -91.57123566]
[-241.19627380 -104.41802216]
[-248.44850159 -117.55042267]
[-255.19549561 -130.94940186]
[-261.42749023 -144.59553528]
[-267.13546753 -158.46902466]
[-272.31112671 -172.54975891]
[-276.94696045 -186.81733704]
[-281.03625488 -201.25106812]
[-284.57308960 -215.83000183]
[-287.55233765 -230.53302002]
[-289.96966553 -245.33880615]
[-291.82156372 -260.22589111]
[-293.10537720 -275.17266846]
[-293.81918335 -290.15750122]
[-293.96203613 -305.15866089]
[-293.53366089 -320.15435791]
[-292.53469849 -335.12289429]
[-290.96658325 -350.04254150]
[-288.83163452 -364.89166260]
[-286.13287354 -379.64874268]
[-282.87429810 -394.29238892]
[-279.06057739 -408.80136108]
[-274.69723511 -423.15460205]
[-269.79064941 -437.33135986]
[-264.34786987 -451.31100464]
[-258.37683105 -465.07333374]
[-251.88618469 -478.59835815]
[-244.88534546 -491.86648560]
[-237.38444519 -504.85842896]
[-229.39436340 -517.55541992]
[-220.92669678 -529.93902588]
[-211.99371338 -541.99127197]
[-202.60836792 -553.69464111]
[-192.78427124 -565.03228760]
[-182.53565979 -575.98767090]
[-171.87741089 -586.54498291]
[-160.82495117 -596.68884277]
[-149.39431763 -606.40460205]
[-137.60209656 -615.67810059]
[-125.46537018 -624.49597168]
[-113.00173950 -632.84533691]
[-100.22927856 -640.71423340]
[-87.16650391 -648.09112549]
[-73.83235168 -654.96533203]
[-60.24616241 -661.32696533]
[-46.42763138 -667.16674805]
[-32.39679337 -672.47619629]
[-18.17399025 -677.24761963]
[-3.77984738 -681.47412109]
[10.76476669 -685.14953613]
[25.43876457 -688.26861572]
[40.22086716 -690.82678223]
[55.08964539 -692.82031250]
[70.02353668 -694.24633789]
[85.00089264 -695.10272217]
[100.00000000 -695.38836670]
[114.99910736 -695.10272217]
[129.97645569 -694.24633789]
[144.91035461 -692.82031250]
[159.77912903 -690.82678223]
[174.56123352 -688.26861572]
[189.23522949 -685.14953613]
[203.77984619 -681.47412109]
[218.17399597 -677.24761963]
[232.39678955 -672.47619629]
[246.42762756 -667.16674805]
[260.24615479 -661.32696533]
[273.83236694 -654.96533203]
[287.16650391 -648.09112549]
[300.22927856 -640.71423340]
[313.00173950 -632.84533691]
[325.46536255 -624.49597168]
[337.60211182 -615.67810059]
[349.39431763 -606.40460205]
[360.82495117 -596.68884277]
[371.87741089 -586.54498291]
[382.53567505 -575.98767090]
[392.78427124 -565.03228760]
[402.60836792 -553.69464111]
[411.99371338 -541.99127197]
[420.92669678 -529.93902588]
[429.39434814 -517.55541992]
[437.38442993 -504.85842896]
[444.88534546 -491.86648560]
[451.88619995 -478.59835815]
[458.37683105 -465.07333374]
[464.34786987 -451.31100464]
[469.79064941 -437.33135986]
[474.69723511 -423.15460205]
[479.06057739 -408.80136108]
[482.87429810 -394.29238892]
[486.13287354 -379.64874268]
[488.83163452 -364.89166260]
[490.96658325 -350.04254150]
[492.53469849 -335.12289429]
[493.53366089 -320.15435791]
[493.96203613 -305.15866089]
[493.81918335 -290.15750122]
[493.10537720 -275.17266846]
[491.82156372 -260.22589111]
[489.96966553 -245.33880615]
[487.55233765 -230.53302002]
[484.57308960 -215.83000183]
[481.03625488 -201.25106812]
[476.94696045 -186.81733704]
[472.31112671 -172.54975891]
[467.13546753 -158.46902466]
[461.42749023 -144.59553528]
[455.19549561 -130.94940186]
[448.44848633 -117.55042267]
[441.19628906 -104.41802216]
[433.44934082 -91.57123566]
[425.21896362 -79.02869415]
[416.51702881 -66.80858612]
[407.35617065 -54.92862320]
[397.74969482 -43.40603256]
[387.71148682 -32.25752258]
[377.25613403 -21.49925423]
[366.39880371 -11.14683056]
[355.15518188 -1.21525848]
[343.54162598 8.28106117]
[331.57498169 17.32835960]
[319.27255249 25.91352081]
[306.65219116 34.02409363]
[293.73220825 41.64832306]
[280.53134155 48.77515030]
[267.06872559 55.39424515]
[253.36386108 61.49600983]
[239.43663025 67.07159424]
[225.30723572 72.11292267]
[210.99617004 76.61267090]
[196.52415466 80.56433105]
[181.91218567 83.96216583]
[167.18145752 86.80124664]
[152.35333252 89.07746124]
[137.44929504 90.78750610]
[122.49095154 91.92890167]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
