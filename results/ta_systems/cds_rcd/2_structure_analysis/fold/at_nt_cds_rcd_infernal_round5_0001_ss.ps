%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 24 00:55:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGA_ACUACAAUCUAUUUAGCGGUAGAGUGAAGUU________C_A_UAAAUUAA_A__________GUUAUUUAUU___UUAUUGAACUUGAUUUUAAAAUCAAAUUCCAAGUCACUCU_U_______U___GCCUGG___G__UGG__\
) } def
/len { sequence length } bind def

/coor [
[167.46665955 153.90209961]
[157.21887207 142.94319153]
[147.59034729 131.43638611]
[138.61033630 119.41664886]
[130.30609131 106.92047119]
[122.70285034 93.98580170]
[109.97319031 101.92026520]
[105.86134338 108.91265869]
[97.59197235 110.91574097]
[85.36799622 119.60908508]
[73.14401245 128.30242920]
[74.48632050 143.53875732]
[68.06443024 157.31031799]
[55.69376755 165.96093750]
[40.75403214 167.24942017]
[27.26610374 160.92950439]
[15.04212189 169.62284851]
[2.81814122 178.31619263]
[4.34856510 193.59864807]
[-1.98190033 207.59223938]
[-14.47039127 216.53277588]
[-29.75756645 218.01528931]
[-43.73125458 211.64099121]
[-52.63259888 199.12454224]
[-54.06718826 183.83279419]
[-47.64912033 169.87915039]
[-35.10482788 161.01708984]
[-19.80865669 159.63043213]
[-5.87520647 166.09220886]
[6.34877491 157.39886475]
[18.57275581 148.70552063]
[17.03009224 133.89047241]
[23.15083885 120.20133209]
[35.38259888 111.35540009]
[50.49904633 109.80951691]
[64.45066833 116.07845306]
[76.67464447 107.38510895]
[88.89862823 98.69175720]
[101.03388214 89.87497711]
[86.12898254 88.18855286]
[74.95697784 78.17924500]
[71.64924622 63.54849243]
[77.42899323 49.70672607]
[90.15887451 41.77261353]
[105.13139343 42.68017578]
[116.80973053 52.09380341]
[120.87525940 66.53234863]
[115.82536316 80.65538025]
[109.69099426 66.96288300]
[104.32023621 52.95325470]
[99.72939301 38.66902924]
[95.93240356 24.15359688]
[92.94081116 9.45103741]
[90.76369476 -5.39399672]
[89.40766144 -20.33642197]
[88.87683105 -35.33085632]
[89.17282867 -50.33176804]
[90.29473877 -65.29359436]
[92.23915863 -80.17089081]
[95.00019073 -94.91848755]
[98.56944275 -109.49159241]
[102.93607330 -123.84594727]
[108.08682251 -137.93795776]
[114.00605011 -151.72480774]
[120.67578125 -165.16467285]
[128.07575989 -178.21669006]
[136.18350220 -190.84123230]
[144.97439575 -202.99998474]
[154.42173767 -214.65599060]
[164.49685669 -225.77386475]
[175.16911316 -236.31983948]
[186.40612793 -246.26188660]
[198.17376709 -255.56982422]
[210.43629456 -264.21536255]
[223.15646362 -272.17227173]
[236.29563904 -279.41635132]
[249.81393433 -285.92562866]
[263.67028809 -291.68032837]
[277.82260132 -296.66296387]
[292.22790527 -300.85842896]
[306.84246826 -304.25396729]
[321.62188721 -306.83923340]
[336.52127075 -308.60644531]
[351.49539185 -309.55017090]
[366.49877930 -309.66757202]
[381.48580933 -308.95831299]
[396.41104126 -307.42449951]
[411.22912598 -305.07083130]
[425.89501953 -301.90444946]
[440.36422729 -297.93493652]
[454.59280396 -293.17437744]
[468.53750610 -287.63723755]
[482.15600586 -281.34033203]
[495.40695190 -274.30276489]
[508.25009155 -266.54589844]
[520.64642334 -258.09332275]
[532.55828857 -248.97070312]
[543.94952393 -239.20573425]
[554.78552246 -228.82806396]
[565.03338623 -217.86923218]
[574.66198730 -206.36250305]
[583.64208984 -194.34281921]
[591.94641113 -181.84671021]
[599.54974365 -168.91209412]
[606.42901611 -155.57826233]
[612.56329346 -141.88572693]
[617.93395996 -127.87606049]
[622.52465820 -113.59180450]
[626.32153320 -99.07633972]
[629.31304932 -84.37376404]
[631.49005127 -69.52871704]
[632.84600830 -54.58628082]
[633.37670898 -39.59183884]
[633.08062744 -24.59093285]
[631.95861816 -9.62911510]
[630.01409912 5.24817276]
[627.25292969 19.99575043]
[623.68359375 34.56882858]
[619.31683350 48.92314911]
[614.16601562 63.01511765]
[608.24670410 76.80194092]
[601.57684326 90.24174500]
[594.17675781 103.29371643]
[586.06896973 115.91821289]
[577.27795410 128.07688904]
[567.83056641 139.73283386]
[557.75537109 150.85063171]
[547.08300781 161.39654541]
[535.84594727 171.33851624]
[524.07824707 180.64636230]
[511.81564331 189.29180908]
[499.09542847 197.24862671]
[485.95617676 204.49261475]
[472.43783569 211.00180054]
[458.58145142 216.75639343]
[444.42910767 221.73893738]
[430.02377319 225.93429565]
[415.40917969 229.32972717]
[400.62976074 231.91490173]
[385.73034668 233.68199158]
[370.75622559 234.62562561]
[355.75283813 234.74291992]
[340.76580811 234.03355408]
[325.84057617 232.49964905]
[311.02252197 230.14587402]
[296.35665894 226.97937012]
[281.88748169 223.00976562]
[267.65893555 218.24911499]
[253.71426392 212.71188354]
[240.09580994 206.41487122]
[226.84490967 199.37719727]
[214.00183105 191.62025452]
[201.60556030 183.16760254]
[189.69375610 174.04489136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 48]
[7 39]
[9 38]
[10 37]
[11 36]
[16 31]
[17 30]
[18 29]
] def

init

% Start Annotations
7 39 0.16 1 colorpair
9 38 0.16 1 colorpair
10 37 0.0 0.2 colorpair
11 36 0.16 0.6 colorpair
16 31 0.0 0.2 colorpair
17 30 0.16 0.2 colorpair
18 29 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 48 5 gmark
48 cmark
7 cmark
9 cmark
10 37 2 gmark
11 36 1 gmark
11 cmark
36 cmark
16 31 2 gmark
17 30 2 gmark
17 cmark
18 29 2 gmark

% End Annotations
showpage
end
%%EOF
