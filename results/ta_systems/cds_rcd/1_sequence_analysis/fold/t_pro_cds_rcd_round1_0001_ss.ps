%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 22:45:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAUUUUUUACAAGGUAUACUAGCAAGUCUAUUUGCUAGUUUAAUAGUUUACUUAACUAGCAAAUUAUUUAGAAAACGUAAAAAACCACUCAAAGCGGCA__ACUAAGAGUGGUUGGGAAUUUGAUUUAAAAAUCAAAUUCCAUAAAA_U\
) } def
/len { sequence length } bind def

/coor [
[136.24079895 234.91998291]
[143.21052551 221.63755798]
[151.80558777 209.34426880]
[161.88769531 198.23791504]
[173.29461670 188.49717712]
[185.84286499 180.27879333]
[199.33050537 173.71499634]
[213.54054260 168.91137695]
[228.24867249 165.94462585]
[214.57017517 159.78843689]
[200.89167786 153.63224792]
[187.21318054 147.47605896]
[173.53468323 141.31987000]
[159.85618591 135.16366577]
[146.17768860 129.00747681]
[132.49919128 122.85128784]
[125.65605164 131.04902649]
[116.76593781 137.22467041]
[106.41986084 140.87368774]
[95.33106995 141.66265869]
[84.28599548 139.45820618]
[74.08841705 134.34205627]
[65.50102997 126.61045074]
[59.18852997 116.75798035]
[55.66652679 105.44625092]
[40.91222763 108.15007782]
[28.73279190 118.24819183]
[14.81930637 112.93178558]
[0.06500749 115.63561249]
[-14.68929100 118.33943176]
[-21.27607346 132.38912964]
[-34.87932587 139.85446167]
[-50.26831818 137.86485291]
[-61.52566910 127.18536377]
[-64.32270050 111.92245483]
[-57.58389282 97.94504547]
[-43.90045929 90.62772369]
[-28.53395462 92.78414917]
[-17.39311600 103.58513641]
[-2.63881803 100.88130951]
[12.11548042 98.17748260]
[23.23959160 88.27276611]
[38.20840454 93.39578247]
[52.96269989 90.69195557]
[58.14028549 76.61386108]
[48.65360260 64.99478912]
[33.93239594 59.19852829]
[31.87644386 44.44649887]
[22.38976288 32.82742310]
[12.90308285 21.20834923]
[3.41640234 9.58927536]
[-6.07027817 -2.02979875]
[-15.55695915 -13.64887333]
[-25.04364014 -25.26794815]
[-34.53031921 -36.88702393]
[-49.51362610 -33.76306152]
[-64.22927856 -37.97117233]
[-75.29572296 -48.54436111]
[-80.16998291 -63.05298615]
[-77.73197937 -78.16307068]
[-68.54194641 -90.40243530]
[-54.71169281 -96.95854950]
[-39.41930771 -96.32488251]
[-26.17886925 -88.64703369]
[-18.03293037 -75.68932343]
[-16.85337257 -60.42933273]
[-22.91124535 -46.37370300]
[-13.42456532 -34.75462723]
[-3.93788457 -23.13555336]
[5.54879618 -11.51647949]
[15.03547668 0.10259505]
[24.52215767 11.72166920]
[34.00883865 23.34074402]
[43.49551773 34.95981979]
[57.53817368 39.92500687]
[60.27267838 55.50811005]
[69.75936127 67.12718201]
[86.24428558 58.37001419]
[104.52813721 57.21819687]
[121.33360291 63.59216690]
[133.76565552 76.08861542]
[139.80976868 92.27787781]
[138.65538025 109.17279053]
[152.33387756 115.32897949]
[166.01237488 121.48517609]
[179.69087219 127.64136505]
[193.36936951 133.79756165]
[207.04786682 139.95375061]
[220.72636414 146.10993958]
[234.40486145 152.26612854]
[239.05308533 151.22790527]
[243.49353027 151.89987183]
[256.63232422 144.66297913]
[269.77108765 137.42608643]
[282.90985107 130.18919373]
[296.04864502 122.95230865]
[293.69302368 107.97809601]
[296.60400391 93.10187531]
[304.43005371 80.12001038]
[316.22613525 70.60013580]
[330.56784058 65.69181061]
[345.72329712 65.98773956]
[359.86245728 71.45220184]
[371.27789307 81.42532349]
[378.59118652 94.70280457]
[380.91921997 109.68132782]
[377.98083496 124.55216217]
[370.13085938 137.51957703]
[358.31726074 147.01771545]
[343.96652222 151.89959717]
[328.81164551 151.57572937]
[314.68258667 146.08522034]
[303.28552246 136.09107971]
[290.14675903 143.32797241]
[277.00796509 150.56486511]
[263.86920166 157.80175781]
[250.73042297 165.03865051]
[265.62530518 166.81146240]
[280.17593384 170.45553589]
[294.14819336 175.91223145]
[307.31732178 183.09376526]
[319.47137451 191.88458252]
[330.41485596 202.14324951]
[339.97167969 213.70471191]
[347.98806763 226.38293457]
[354.33505249 239.97395325]
[358.91049194 254.25909424]
[361.64080811 269.00851440]
[362.48205566 283.98492432]
[361.42068481 298.94732666]
[358.47378540 313.65499878]
[353.68878174 327.87130737]
[347.14263916 341.36752319]
[338.94070435 353.92651367]
[329.21490479 365.34619141]
[318.12176514 375.44284058]
[305.83975220 384.05398560]
[292.56643677 391.04110718]
[278.51544189 396.29174805]
[263.91281128 399.72146606]
[248.99348450 401.27508545]
[233.99751282 400.92758179]
[219.16616821 398.68453979]
[204.73808289 394.58209229]
[190.94537354 388.68618774]
[178.00999451 381.09173584]
[166.14002991 371.92089844]
[155.52648926 361.32125854]
[146.34013367 349.46331787]
[138.72874451 336.53787231]
[132.81480408 322.75292969]
[128.69345093 308.33020020]
[126.43099976 293.50180054]
[126.06386566 278.50631714]
[127.59793091 263.58496094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[25 44]
[26 43]
[28 41]
[29 40]
[30 39]
[45 77]
[46 76]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
] def

init

% Start Annotations
9 90 0.16 1 colorpair
10 89 0.0 1 colorpair
11 88 0.0 1 colorpair
12 87 0.0 1 colorpair
13 86 0.0 1 colorpair
14 85 0.0 1 colorpair
15 84 0.0 1 colorpair
16 83 0.0 1 colorpair
25 44 0.16 1 colorpair
26 43 0.0 1 colorpair
28 41 0.16 1 colorpair
29 40 0.16 0.6 colorpair
30 39 0.48 0.6 colorpair
45 77 0.32 1 colorpair
46 76 0.16 1 colorpair
48 74 0.0 0.2 colorpair
49 73 0.0 0.6 colorpair
50 72 0.16 1 colorpair
51 71 0.0 1 colorpair
52 70 0.16 0.6 colorpair
53 69 0.16 0.6 colorpair
54 68 0.0 0.2 colorpair
55 67 0.0 1 colorpair
92 117 0.0 1 colorpair
93 116 0.0 0.6 colorpair
94 115 0.0 1 colorpair
95 114 0.0 1 colorpair
96 113 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
90 cmark
25 cmark
41 cmark
29 40 1 gmark
29 cmark
30 39 1 gmark
30 cmark
39 cmark
45 cmark
77 cmark
76 cmark
48 74 2 gmark
49 73 1 gmark
72 cmark
52 70 1 gmark
70 cmark
53 69 1 gmark
69 cmark
54 68 2 gmark
93 116 1 gmark

% End Annotations
showpage
end
%%EOF
