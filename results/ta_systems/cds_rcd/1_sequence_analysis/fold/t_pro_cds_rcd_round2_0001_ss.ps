%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 22:48:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAUUUUUUACUAAGUGUAUUAGCUAGUUUAAUUGCUAGUUUAAUAGUUUAUUUAAUUAGUAAAUUAUUUAAAAAA_GUAAAAAGCCACUC____CUGGCA_CUA__AGAGUGACUGUGAAUUUGAAUUAAAA______AUCAAAUUCCAUAAA___\
) } def
/len { sequence length } bind def

/coor [
[114.53025055 219.48722839]
[121.58262634 206.24850464]
[130.06060791 193.87419128]
[139.85948181 182.51715088]
[150.85818481 172.31771851]
[162.92083740 163.40185547]
[175.89842224 155.87974548]
[189.63061523 149.84428406]
[203.94876099 145.36979675]
[189.79393005 140.40586853]
[175.63908386 135.44194031]
[161.48425293 130.47801208]
[147.32942200 125.51407623]
[133.17457581 120.55014801]
[119.01974487 115.58621979]
[104.86490631 110.62229156]
[109.15092468 122.74431610]
[112.29907990 135.26589966]
[114.28255463 148.10646057]
[102.84367371 157.80964661]
[97.82985687 173.42355347]
[81.74594116 176.62345886]
[71.13766479 164.11759949]
[76.91792297 148.77091980]
[93.14048004 146.37077332]
[104.57936096 136.66757202]
[97.75631714 123.30845642]
[90.93389130 109.95051575]
[76.36710358 113.52945709]
[61.80032349 117.10839081]
[56.06316757 131.52590942]
[42.92935181 139.78923035]
[27.44909286 138.72094727]
[15.57486916 128.73182678]
[11.87255955 113.66290283]
[17.76577759 99.30847168]
[30.98846245 91.18811798]
[46.45622253 92.42427063]
[58.22138596 102.54161072]
[72.78816986 98.96266937]
[87.35494995 95.38373566]
[72.74601746 91.98095703]
[58.77895737 86.51091766]
[45.74464035 79.08753967]
[33.91450119 69.86540222]
[23.53490257 59.03655243]
[14.82199574 46.82650757]
[7.95722246 33.48953247]
[3.08354259 19.30336761]
[0.30244821 4.56343842]
[-0.32814464 -10.42330074]
[1.20489585 -25.34475517]
[4.86964464 -39.89018631]
[10.58978367 -53.75669479]
[18.24619293 -66.65550995]
[27.67943001 -78.31801605]
[38.69305038 -88.50134277]
[51.05769348 -96.99343109]
[64.51587677 -103.61743164]
[78.78733063 -108.23539734]
[93.57485199 -110.75116730]
[108.57050323 -111.11235046]
[123.46199799 -109.31141663]
[137.93922424 -105.38587952]
[151.70069885 -99.41748810]
[164.45985413 -91.53052521]
[175.95095825 -81.88923645]
[185.93473816 -70.69439697]
[194.20326233 -58.17914963]
[200.58433533 -44.60411072]
[204.94511414 -30.25197601]
[207.19474792 -15.42163086]
[207.28639221 -0.42191085]
[205.21815491 14.43481827]
[201.03309631 28.83916664]
[194.81837463 42.49117279]
[186.70339966 55.10652924]
[176.85717773 66.42253113]
[165.48474121 76.20351410]
[152.82292175 84.24581146]
[139.13540649 90.38191986]
[124.70722961 94.48407745]
[109.82884216 96.46745300]
[123.98367310 101.43138123]
[138.13851929 106.39530945]
[152.29335022 111.35924530]
[166.44818115 116.32317352]
[180.60302734 121.28710175]
[194.75785828 126.25103760]
[208.91268921 131.21496582]
[211.55172729 130.17530823]
[214.25588989 129.74230957]
[216.89234924 129.89587402]
[228.69667053 120.64071655]
[240.50099182 111.38555908]
[252.30531311 102.13039398]
[247.31788635 87.83339691]
[247.24542236 72.69161224]
[252.09576416 58.34752655]
[261.34280396 46.35707092]
[273.98348999 38.02088165]
[288.64663696 34.24320602]
[303.74169922 35.43381882]
[317.63128662 41.46356964]
[328.80877686 51.67839813]
[336.06167603 64.97027588]
[338.60330200 79.89739227]
[336.15789795 94.84057617]
[328.99075317 108.17890167]
[317.87930298 118.46552277]
[304.02883911 124.58461761]
[288.94177246 125.87244415]
[274.25457764 122.18930817]
[261.56045532 113.93472290]
[249.75614929 123.18988037]
[237.95182800 132.44503784]
[226.14750671 141.70019531]
[241.14289856 141.32875061]
[256.08691406 142.62373352]
[270.79489136 145.56912231]
[285.08514404 150.12855530]
[298.78115845 156.24569702]
[311.71371460 163.84497070]
[323.72302246 172.83251953]
[334.66079712 183.09729004]
[344.39184570 194.51248169]
[352.79598999 206.93707275]
[359.76937866 220.21755981]
[365.22589111 234.18991089]
[369.09811401 248.68150330]
[371.33819580 263.51327515]
[371.91848755 278.50204468]
[370.83178711 293.46264648]
[368.09152222 308.21023560]
[363.73159790 322.56259155]
[357.80581665 336.34249878]
[350.38742065 349.37963867]
[341.56802368 361.51300049]
[331.45660400 372.59265137]
[320.17807007 382.48178101]
[307.87173462 391.05816650]
[294.68966675 398.21588135]
[280.79467773 403.86648560]
[266.35842896 407.94015503]
[251.55928040 410.38662720]
[236.58004761 411.17562866]
[221.60577393 410.29742432]
[206.82145691 407.76284790]
[192.40974426 403.60327148]
[178.54864502 397.86999512]
[165.40943909 390.63391113]
[153.15441895 381.98437500]
[141.93496704 372.02825928]
[131.88972473 360.88854980]
[123.14275360 348.70288086]
[115.80213165 335.62179565]
[109.95853424 321.80685425]
[105.68415070 307.42877197]
[103.03179169 292.66513062]
[102.03422546 277.69833374]
[102.70376587 262.71328735]
[105.03215027 247.89509583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[19 26]
[20 25]
[28 41]
[29 40]
[30 39]
[93 117]
[94 116]
[95 115]
[96 114]
] def

init

% Start Annotations
9 90 0.32 0.6 colorpair
10 89 0.0 1 colorpair
11 88 0.0 1 colorpair
12 87 0.0 1 colorpair
13 86 0.0 1 colorpair
14 85 0.0 1 colorpair
15 84 0.32 1 colorpair
16 83 0.16 0.6 colorpair
19 26 0.16 1 colorpair
28 41 0.16 1 colorpair
29 40 0.16 0.6 colorpair
93 117 0.0 0.6 colorpair
94 116 0.0 1 colorpair
95 115 0.0 1 colorpair
96 114 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 90 1 gmark
9 cmark
90 cmark
15 cmark
84 cmark
16 83 1 gmark
16 cmark
19 cmark
20 25 3 gmark
20 cmark
25 cmark
41 cmark
29 40 1 gmark
29 cmark
30 39 3 gmark
30 cmark
39 cmark
93 117 1 gmark

% End Annotations
showpage
end
%%EOF
