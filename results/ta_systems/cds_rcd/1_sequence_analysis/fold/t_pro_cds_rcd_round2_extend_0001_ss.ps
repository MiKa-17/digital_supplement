%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 22:48:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAUUUUUUACUAAGUGUAUUAGCUAGUUUAAUUGCUAGUUUAAUAGUUUAUUUAAUUAGUAAAUUAUUUAAAAAA_GUAAAAAGCCACUCU___C_____GGCA_CUA__AGAGUGGCUGGGAAUUUGAUUUAAAAAUCAAGUUCCAUAAAAAU______\
) } def
/len { sequence length } bind def

/coor [
[1.02539122 165.06036377]
[4.40580654 150.44622803]
[10.79864883 136.87672424]
[19.91507530 124.96492767]
[31.34318924 115.24905396]
[44.56664658 108.16808319]
[58.98798370 104.04193878]
[73.95561218 103.05705261]
[88.79471588 105.25830078]
[74.42787170 100.94624329]
[60.06102753 96.63418579]
[45.69418716 92.32212067]
[31.32734489 88.01006317]
[16.96050262 83.69800568]
[2.59366179 79.38594818]
[-11.77318001 75.07388306]
[-5.65053844 86.21798706]
[-2.18639135 98.86590576]
[-1.63668168 112.52446747]
[-12.87153721 122.46318054]
[-17.55992699 138.17785645]
[-33.57390976 141.71118164]
[-44.43967056 129.42839050]
[-38.97945023 113.96494293]
[-22.81025124 111.22832489]
[-11.57539558 101.28961182]
[-15.16131687 94.70241547]
[-25.91908073 74.94082642]
[-40.36449432 78.98187256]
[-54.80990601 83.02291107]
[-60.08498383 97.61582947]
[-72.94896698 106.29324341]
[-88.45539856 105.71852112]
[-100.64173126 96.11264038]
[-104.82207489 81.16926575]
[-99.38900757 66.63443756]
[-86.43164062 58.09708023]
[-70.93236542 58.83998871]
[-58.85095215 68.57749939]
[-44.40553665 64.53645325]
[-29.96012497 60.49541092]
[-44.69000244 57.66155624]
[-58.85862350 52.73711395]
[-72.17092896 45.82462692]
[-84.34970093 37.06805420]
[-95.14131165 26.64974785]
[-104.32103729 14.78666592]
[-111.69770050 1.72585249]
[-117.11768341 -12.26070213]
[-120.46813202 -26.88173294]
[-121.67926025 -41.83275986]
[-120.72585297 -56.80242920]
[-117.62775421 -71.47900391]
[-112.44950104 -85.55684662]
[-105.29891205 -98.74278259]
[-96.32489777 -110.76223755]
[-85.71434784 -121.36489105]
[-73.68822479 -130.32994080]
[-60.49695969 -137.47071838]
[-46.41526794 -142.63848877]
[-31.73639107 -145.72566223]
[-16.76601601 -146.66792297]
[-1.81589663 -145.44566345]
[12.80263519 -142.08433533]
[26.78515053 -136.65393066]
[39.84046936 -129.26754761]
[51.69671249 -120.07900238]
[62.10698318 -109.27963257]
[70.85448456 -97.09434509]
[77.75705719 -83.77689362]
[82.67095184 -69.60461426]
[85.49384308 -54.87263107]
[86.16693878 -39.88774109]
[84.67622375 -24.96199799]
[81.05274200 -10.40622997]
[75.37195587 3.47644472]
[67.75215912 16.39692116]
[58.35203552 28.08613586]
[47.36734390 38.30065918]
[35.02683258 46.82778168]
[21.58749390 53.48992538]
[7.32919550 58.14834976]
[-7.46112061 60.70704269]
[6.90572119 65.01910400]
[21.27256203 69.33116150]
[35.63940430 73.64321899]
[50.00624466 77.95528412]
[64.37308502 82.26734161]
[78.73992920 86.57939911]
[93.10677338 90.89145660]
[93.37448120 74.92289734]
[105.29307556 59.89548874]
[116.89382172 50.38640976]
[128.49456787 40.87732697]
[140.09532166 31.36824608]
[133.72703552 17.69726562]
[130.95945740 2.87190461]
[131.96656799 -12.17590427]
[136.68505859 -26.50024033]
[144.81832886 -39.20066833]
[155.85510254 -49.47882080]
[169.10160828 -56.68861389]
[183.72514343 -60.37682724]
[198.80647278 -60.31161880]
[213.39756775 -56.49708939]
[226.58122253 -49.17301941]
[237.52870178 -38.79980850]
[245.55184937 -26.02952576]
[250.14630127 -11.66492176]
[251.02323914 3.39103270]
[248.12757874 18.19190788]
[241.64131165 31.80730820]
[231.97216797 43.38135910]
[219.72798157 52.18650436]
[205.67840576 57.66924286]
[190.70663452 59.48493195]
[175.75378418 57.51943207]
[161.75982666 51.89629364]
[149.60440063 42.96899414]
[138.00364685 52.47807693]
[126.40290070 61.98715973]
[114.80215454 71.49623871]
[115.36598206 78.97501373]
[130.10549927 76.19170380]
[143.16551208 68.81364441]
[156.39590454 75.88165283]
[157.52368164 90.83919525]
[145.50268555 99.81111908]
[131.48384094 94.47455597]
[116.49362946 93.93257141]
[117.05745697 101.41134644]
[129.95275879 109.07366943]
[142.84806824 116.73599243]
[155.74336243 124.39831543]
[168.63867188 132.06063843]
[182.83848572 125.80406952]
[197.99674988 129.12174988]
[208.28475952 140.73796082]
[209.74659729 156.18601990]
[201.82014465 169.52584839]
[187.55328369 175.62800598]
[172.43191528 172.14607239]
[162.27050781 160.41894531]
[160.97634888 144.95593262]
[148.08103943 137.29360962]
[135.18574524 129.63128662]
[122.29043579 121.96897125]
[109.39513397 114.30664825]
[121.05450439 123.74375916]
[130.45588684 135.43196106]
[137.17448425 148.84317017]
[140.90676880 163.37141418]
[141.48410034 178.36030579]
[138.88038635 193.13259888]
[133.21327209 207.02085876]
[124.73879242 219.39758301]
[113.83986664 229.70356750]
[101.00891876 237.47317505]
[86.82567596 242.35534668]
[71.93096924 244.12951660]
[56.99776840 242.71549988]
[42.70078278 238.17720032]
[29.68597794 230.71965027]
[18.54139519 220.67982483]
[9.77056313 208.51132202]
[3.76976776 194.76393127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[19 26]
[20 25]
[28 41]
[29 40]
[30 39]
[92 122]
[93 121]
[94 120]
[95 119]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
] def

init

% Start Annotations
9 90 0.32 0.6 colorpair
10 89 0.0 1 colorpair
11 88 0.0 1 colorpair
12 87 0.0 1 colorpair
13 86 0.0 1 colorpair
14 85 0.0 1 colorpair
15 84 0.32 1 colorpair
16 83 0.16 0.6 colorpair
19 26 0.16 1 colorpair
28 41 0.16 1 colorpair
29 40 0.16 0.6 colorpair
92 122 0.0 1 colorpair
93 121 0.0 0.6 colorpair
94 120 0.0 1 colorpair
95 119 0.0 1 colorpair
132 147 0.16 0.2 colorpair
133 146 0.0 1 colorpair
135 144 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 90 1 gmark
9 cmark
90 cmark
15 cmark
84 cmark
16 83 1 gmark
16 cmark
19 cmark
20 25 3 gmark
20 cmark
25 cmark
41 cmark
29 40 1 gmark
29 cmark
30 39 3 gmark
30 cmark
39 cmark
93 121 1 gmark
131 148 5 gmark
131 cmark
148 cmark
132 147 2 gmark
147 cmark
134 145 5 gmark
145 cmark
135 cmark

% End Annotations
showpage
end
%%EOF
