%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 22:55:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAUUUUUUACUUAGUGUAUUAGCUAGUUUAACAGCUAGUUUAAUAGUUUACUUAAUUAGUAAAUUAUUUAAAAAA_GUAAAAAGCCACUCUAGCC_GA_____A__AGAGUGACUUUGA_AUUUGAAUUAAAAAUCAAAUUCAAUAAAAA_AAA\
) } def
/len { sequence length } bind def

/coor [
[112.35496521 220.17489624]
[119.45161438 206.95983887]
[128.02130127 194.64884949]
[137.95024109 183.40534973]
[149.10661316 173.37863159]
[161.34231567 164.70178223]
[174.49490356 157.49003601]
[188.38975525 151.83909607]
[202.83912659 147.82473755]
[188.80590820 142.52671814]
[174.77268982 137.22869873]
[160.73948669 131.93067932]
[146.70626831 126.63266754]
[132.67306519 121.33465576]
[118.63984680 116.03663635]
[104.60663605 110.73862457]
[108.67925262 122.91207123]
[111.70218658 135.43441772]
[113.65390778 148.23742676]
[102.11115265 157.81681824]
[96.92940521 173.37577820]
[80.81194305 176.40223694]
[70.33901978 163.78280640]
[76.28428650 148.49928284]
[92.53176117 146.27404785]
[104.07451630 136.69465637]
[97.43441772 123.24367523]
[90.79492188 109.79387665]
[76.17100525 113.13169098]
[61.54708481 116.46950531]
[55.57254410 130.79026794]
[42.30401230 138.83551025]
[26.84351349 137.51164246]
[15.13592434 127.32773590]
[11.68305016 112.19970703]
[17.81259346 97.94458771]
[31.16761780 90.04376984]
[46.61284256 91.53527069]
[58.20927048 101.84558868]
[72.83319092 98.50777435]
[87.45710754 95.16996002]
[72.91955566 91.47408295]
[59.06532288 85.72427368]
[46.18292618 78.04026794]
[34.54064178 68.58208466]
[24.38091278 57.54669189]
[15.91531277 45.16389847]
[9.32013702 31.69156837]
[4.73272943 17.41026306]
[2.24862051 2.61738563]
[1.91954160 -12.37900448]
[3.75234556 -27.26661110]
[7.70886469 -41.73540497]
[13.70670509 -55.48407364]
[21.62096405 -68.22630310]
[31.28682899 -79.69674683]
[42.50300980 -89.65653229]
[55.03593063 -97.89824677]
[68.62460327 -104.25025940]
[82.98603821 -108.58029175]
[97.82115936 -110.79817200]
[112.82104492 -110.85771942]
[127.67330933 -108.75768280]
[142.06866455 -104.54179382]
[155.70733643 -98.29785919]
[168.30529785 -90.15590668]
[179.60018921 -80.28547668]
[189.35681152 -68.89212799]
[197.37197876 -56.21313095]
[203.47877502 -42.51250839]
[207.55004883 -28.07558441]
[209.50097656 -13.20299625]
[209.29096985 1.79553330]
[206.92437744 16.60766411]
[202.45048523 30.92494011]
[195.96247864 44.44920349]
[187.59544373 56.89881516]
[177.52365112 68.01451874]
[165.95681763 77.56482697]
[153.13581848 85.35086060]
[139.32768250 91.21047211]
[124.81992340 95.02164459]
[109.90465546 96.70541382]
[123.93786621 102.00342560]
[137.97108459 107.30144501]
[152.00428772 112.59945679]
[166.03750610 117.89747620]
[180.07070923 123.19548798]
[194.10392761 128.49349976]
[208.13713074 133.79151917]
[210.93022156 132.78079224]
[213.77069092 132.43476868]
[216.50817871 132.72404480]
[228.76272583 124.07384491]
[241.01727295 115.42364502]
[253.27182007 106.77343750]
[249.00923157 92.24384308]
[249.69786072 77.11756134]
[255.26296997 63.03536606]
[265.10095215 51.52479935]
[278.14459229 43.83443451]
[292.97906494 40.79846954]
[307.99523926 42.74621964]
[321.56423950 49.46640778]
[332.21420288 60.23008347]
[338.78994751 73.86967468]
[340.57812500 88.90567017]
[337.38482666 103.70706940]
[329.55636597 116.66833496]
[317.94198608 126.38351440]
[303.80151367 131.79879761]
[288.66876221 132.32675171]
[274.18524170 127.91011810]
[261.92202759 119.02798462]
[249.66748047 127.67819214]
[237.41293335 136.32839966]
[225.15838623 144.97860718]
[240.15612793 145.23858643]
[255.02441406 147.22204590]
[269.56585693 150.90264893]
[283.58737183 156.23153687]
[296.90280151 163.13796997]
[309.33541870 171.53022766]
[320.72015381 181.29692078]
[330.90582275 192.30838013]
[339.75723267 204.41839600]
[347.15682983 217.46621704]
[353.00643921 231.27861023]
[357.22836304 245.67221069]
[359.76654053 260.45590210]
[360.58728027 275.43344116]
[359.67971802 290.40594482]
[357.05584717 305.17468262]
[352.75057983 319.54354858]
[346.82098389 333.32180786]
[339.34585571 346.32650757]
[330.42437744 358.38500977]
[320.17504883 369.33721924]
[308.73388672 379.03775024]
[296.25283813 387.35778809]
[282.89755249 394.18688965]
[268.84539795 399.43438721]
[254.28286743 403.03063965]
[239.40333557 404.92785645]
[224.40432739 405.10089111]
[209.48498535 403.54742432]
[194.84338379 400.28808594]
[180.67388916 395.36614990]
[167.16462708 388.84695435]
[154.49496460 380.81704712]
[142.83306885 371.38302612]
[132.33380127 360.67016602]
[123.13654327 348.82067871]
[115.36338806 335.99188232]
[109.11753845 322.35409546]
[104.48191071 308.08837891]
[101.51806641 293.38409424]
[100.26533508 278.43649292]
[100.74034882 263.44403076]
[102.93681335 248.60571289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[19 26]
[20 25]
[28 41]
[29 40]
[30 39]
[93 117]
[94 116]
[95 115]
[96 114]
] def

init

% Start Annotations
9 90 0.32 0.2 colorpair
10 89 0.0 1 colorpair
11 88 0.0 1 colorpair
12 87 0.0 1 colorpair
13 86 0.0 1 colorpair
14 85 0.0 1 colorpair
15 84 0.32 1 colorpair
16 83 0.16 0.2 colorpair
19 26 0.16 1 colorpair
28 41 0.16 1 colorpair
29 40 0.16 0.6 colorpair
93 117 0.0 0.6 colorpair
94 116 0.0 0.6 colorpair
95 115 0.0 0.6 colorpair
96 114 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 90 2 gmark
9 cmark
90 cmark
15 cmark
84 cmark
16 83 2 gmark
16 cmark
19 cmark
20 25 3 gmark
20 cmark
25 cmark
41 cmark
29 40 1 gmark
29 cmark
30 39 3 gmark
30 cmark
39 cmark
93 117 1 gmark
94 116 1 gmark
95 115 1 gmark
96 114 1 gmark

% End Annotations
showpage
end
%%EOF
