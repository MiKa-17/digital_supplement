%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 23 22:59:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAUUUUUUACUUAGUGUAUUAGCUAGUUUAACAGCUAGUUUAAUAGUUUACUUAAUUAGUAAAUUAUUUAAAAAA_GUAAAAAGCCACUCUAGCC_GA_____A__AGAGUGACUUUG___AAUUUGAAUUAAAA______AUCAAAUUCAAUAAAAAAAAA___\
) } def
/len { sequence length } bind def

/coor [
[127.85739899 220.31311035]
[134.00456238 206.63053894]
[141.41400146 193.58830261]
[150.01974487 181.30249023]
[159.74517822 169.88250732]
[170.50370789 159.43003845]
[182.19952393 150.03814697]
[194.72851562 141.79046631]
[207.97831726 134.76078796]
[193.39918518 131.23246765]
[178.82005310 127.70415497]
[164.24092102 124.17584229]
[149.66178894 120.64752960]
[135.08267212 117.11920929]
[120.50354004 113.59089661]
[105.92440796 110.06258392]
[111.10825348 121.92821503]
[114.79320526 134.44305420]
[116.92089844 147.46374512]
[105.93399811 157.67588806]
[101.63370514 173.50117493]
[85.71151733 177.42747498]
[74.54680634 165.41575623]
[79.62488556 149.82264709]
[95.72184753 146.68899536]
[106.70874786 136.47683716]
[102.91927338 130.00459290]
[91.55084991 110.58788300]
[77.26815796 115.17099762]
[62.98547745 119.75410461]
[58.26466370 134.53562927]
[45.73718262 143.69215393]
[30.22011375 143.70280457]
[17.68007851 134.56349182]
[12.93898010 119.78845215]
[17.81986618 105.05900574]
[30.44593811 96.03891754]
[45.96221161 96.19660187]
[58.40236664 105.47142029]
[72.68505096 100.88830566]
[86.96773529 96.30519867]
[72.12326813 94.15072632]
[57.74346161 89.88210297]
[44.12777328 83.58821106]
[31.55974960 75.40012360]
[20.30111313 65.48835754]
[10.58632469 54.05931854]
[2.61769128 41.35102081]
[-3.43884230 27.62810326]
[-7.45714998 13.17634964]
[-9.35355186 -1.70328975]
[-9.08855438 -16.70094872]
[-6.66767788 -31.50430489]
[-2.14133525 -45.80508041]
[4.39621305 -59.30546951]
[12.80882359 -71.72432709]
[22.92130661 -82.80303192]
[34.52307129 -92.31086731]
[47.37251663 -100.04985046]
[61.20204926 -105.85880280]
[75.72367859 -109.61676788]
[90.63499451 -111.24547577]
[105.62547302 -110.71101379]
[120.38293457 -108.02451324]
[134.60006714 -103.24192047]
[147.98078918 -96.46282959]
[160.24645996 -87.82840729]
[171.14166260 -77.51847076]
[180.43948364 -65.74772644]
[187.94630432 -52.76129150]
[193.50581360 -38.82960129]
[197.00221252 -24.24278641]
[198.36270142 -9.30461216]
[197.55895996 5.67383862]
[194.60769653 20.38064194]
[189.57038879 34.50953293]
[182.55194092 47.76628113]
[173.69850159 59.87481689]
[163.19445801 70.58298492]
[151.25852966 79.66778564]
[138.13928223 86.94003296]
[124.10994720 92.24829102]
[109.45272827 95.48345184]
[124.03185272 99.01176453]
[138.61097717 102.54008484]
[153.19010925 106.06839752]
[167.76924133 109.59671021]
[182.34837341 113.12503052]
[196.92749023 116.65334320]
[211.50662231 120.18165588]
[210.50297546 105.21527100]
[224.74320984 100.50189209]
[232.86697388 113.11162567]
[242.46206665 101.58191681]
[252.05717468 90.05221558]
[261.65225220 78.52250671]
[253.77096558 65.59332275]
[250.51722717 50.80508423]
[252.24400330 35.76191330]
[258.76397705 22.09557915]
[269.36990356 11.28850365]
[282.91134644 4.51295710]
[297.91943359 2.50389957]
[312.76617432 5.47925901]
[325.84112549 13.11629105]
[335.72601318 24.58658791]
[341.34860229 38.64593506]
[342.09899902 53.76928329]
[337.89578247 68.31616211]
[329.19488525 80.70864105]
[316.94015503 89.60246277]
[302.46087646 94.03290558]
[287.32763672 93.51938629]
[273.18197632 88.11759949]
[263.58688354 99.64730835]
[253.99177551 111.17701721]
[244.39668274 122.70671844]
[259.22491455 120.44309998]
[274.20046997 119.58718109]
[289.19003296 120.14659882]
[304.06011963 122.11636353]
[318.67837524 125.47893524]
[332.91461182 130.20437622]
[346.64205933 136.25062561]
[359.73849487 143.56384277]
[372.08734131 152.07888794]
[383.57861328 161.71997070]
[394.11001587 172.40124512]
[403.58776855 184.02760315]
[411.92749023 196.49552917]
[419.05493164 209.69400024]
[424.90658569 223.50552368]
[429.43041992 237.80709839]
[432.58609009 252.47138977]
[434.34555054 267.36785889]
[434.69311523 282.36383057]
[433.62570190 297.32577515]
[431.15277100 312.12054443]
[427.29638672 326.61633301]
[422.09085083 340.68411255]
[415.58255005 354.19863892]
[407.82940674 367.03955078]
[398.90048218 379.09249878]
[388.87524414 390.25021362]
[377.84295654 400.41333008]
[365.90185547 409.49136353]
[353.15829468 417.40344238]
[339.72570801 424.07916260]
[325.72366333 429.45910645]
[311.27691650 433.49530029]
[296.51403809 436.15188599]
[281.56646729 437.40512085]
[266.56735229 437.24392700]
[251.65017700 435.66970825]
[236.94779968 432.69647217]
[222.59112549 428.35070801]
[208.70796204 422.67111206]
[195.42193604 415.70825195]
[182.85134888 407.52407837]
[171.10812378 398.19152832]
[160.29681396 387.79367065]
[150.51368713 376.42306519]
[141.84584045 364.18099976]
[134.37046814 351.17642212]
[128.15411377 337.52517700]
[123.25214386 323.34875488]
[119.70818329 308.77340698]
[117.55380249 293.92892456]
[116.80817413 278.94747925]
[117.47794342 263.96243286]
[119.55714417 249.10723877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[19 26]
[20 25]
[28 41]
[29 40]
[30 39]
[93 117]
[94 116]
[95 115]
[96 114]
] def

init

% Start Annotations
9 90 0.32 0.2 colorpair
10 89 0.0 1 colorpair
11 88 0.0 1 colorpair
12 87 0.0 1 colorpair
13 86 0.0 1 colorpair
14 85 0.0 1 colorpair
15 84 0.32 1 colorpair
16 83 0.16 0.2 colorpair
19 26 0.16 1 colorpair
28 41 0.16 1 colorpair
29 40 0.16 0.6 colorpair
93 117 0.0 0.6 colorpair
94 116 0.0 0.6 colorpair
95 115 0.0 0.6 colorpair
96 114 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 90 2 gmark
9 cmark
90 cmark
15 cmark
84 cmark
16 83 2 gmark
16 cmark
19 cmark
20 25 3 gmark
20 cmark
25 cmark
41 cmark
29 40 1 gmark
29 cmark
30 39 3 gmark
30 cmark
39 cmark
93 117 1 gmark
94 116 1 gmark
95 115 1 gmark
96 114 1 gmark

% End Annotations
showpage
end
%%EOF
