%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan  8 17:07:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGA_ACUACAAUCUAUU__UUGCGGUAGAGUGAAGU_UC_AUAAUUUAA________GA__AU_______UAUUUAUU__UUUAUGGAACUUGAUUUUAAAAUCAAAUUCCCAGCCACUCU_U_A____UC_UGC_UU___GA__________\
) } def
/len { sequence length } bind def

/coor [
[224.53781128 113.86073303]
[213.22650146 104.00402832]
[202.43760681 93.57809448]
[192.19973755 82.61059570]
[182.54002380 71.13059998]
[173.48410034 59.16855240]
[161.07453918 67.59487152]
[154.89167786 81.14556885]
[139.12828064 82.49678040]
[126.71871948 90.92309570]
[114.30916595 99.34941101]
[108.04653931 111.85025787]
[94.11715698 113.06015015]
[81.70759583 121.48646545]
[81.08621979 136.87867737]
[71.63109589 148.81408691]
[57.13246536 152.84568787]
[43.20669556 147.62927246]
[30.79713440 156.05558777]
[31.99590874 171.36763000]
[25.36358261 185.22070312]
[12.68421459 193.88842773]
[-2.63150549 195.03919983]
[-16.46372795 188.36347961]
[-25.09165382 175.65699768]
[-26.19441414 160.33775330]
[-19.47537231 146.52651978]
[-6.74191713 137.93846130]
[8.58071709 136.88372803]
[22.37081718 143.64602661]
[34.78037643 135.21971130]
[35.06852722 120.35179901]
[44.16385269 108.36267090]
[58.74527359 103.97682953]
[73.28128052 109.07690430]
[85.69083405 100.65058899]
[91.95346069 88.14974213]
[105.88284302 86.93984985]
[118.29240417 78.51353455]
[130.70196533 70.08721924]
[137.77244568 55.93381119]
[152.64822388 55.18530655]
[165.05778503 46.75899124]
[157.27966309 33.92929459]
[150.17231750 20.71620178]
[143.75459290 7.15474844]
[138.04350281 -6.71910048]
[133.05418396 -20.86855316]
[128.79989624 -35.25609207]
[125.29188538 -49.84355545]
[122.53948212 -64.59226990]
[120.54997253 -79.46311951]
[119.32863617 -94.41666412]
[118.87870789 -109.41326141]
[119.20138550 -124.41313171]
[120.29580688 -139.37649536]
[122.15908051 -154.26368713]
[124.78625488 -169.03523254]
[128.17037964 -183.65193176]
[132.30244446 -198.07504272]
[137.17153931 -212.26631165]
[142.76470947 -226.18812561]
[149.06715393 -239.80352783]
[156.06214905 -253.07644653]
[163.73114014 -265.97167969]
[172.05378723 -278.45501709]
[181.00804138 -290.49334717]
[190.57012939 -302.05477905]
[200.71472168 -313.10864258]
[211.41488647 -323.62561035]
[222.64227295 -333.57778931]
[234.36711121 -342.93881226]
[246.55828857 -351.68383789]
[259.18347168 -359.78967285]
[272.20919800 -367.23483276]
[285.60095215 -373.99960327]
[299.32315063 -380.06597900]
[313.33947754 -385.41790771]
[327.61273193 -390.04119873]
[342.10504150 -393.92361450]
[356.77798462 -397.05480957]
[371.59268188 -399.42651367]
[386.50985718 -401.03240967]
[401.48986816 -401.86828613]
[416.49310303 -401.93188477]
[431.47967529 -401.22305298]
[446.40991211 -399.74368286]
[461.24417114 -397.49765015]
[475.94317627 -394.49096680]
[490.46786499 -390.73159790]
[504.77981567 -386.22949219]
[518.84100342 -380.99658203]
[532.61413574 -375.04675293]
[546.06274414 -368.39578247]
[559.15112305 -361.06134033]
[571.84460449 -353.06280518]
[584.10949707 -344.42147827]
[595.91326904 -335.16018677]
[607.22460938 -325.30355835]
[618.01354980 -314.87768555]
[628.25152588 -303.91024780]
[637.91131592 -292.43029785]
[646.96728516 -280.46829224]
[655.39544678 -268.05596924]
[663.17352295 -255.22624207]
[670.28082275 -242.01310730]
[676.69842529 -228.45161438]
[682.40948486 -214.57772827]
[687.39868164 -200.42825317]
[691.65289307 -186.04069519]
[695.16082764 -171.45320129]
[697.91314697 -156.70446777]
[699.90258789 -141.83361816]
[701.12384033 -126.88005829]
[701.57366943 -111.88346863]
[701.25091553 -96.88359833]
[700.15637207 -81.92022705]
[698.29302979 -67.03305054]
[695.66577148 -52.26153183]
[692.28155518 -37.64484787]
[688.14941406 -23.22175789]
[683.28021240 -9.03051090]
[677.68701172 4.89126015]
[671.38446045 18.50663757]
[664.38940430 31.77951622]
[656.72033691 44.67469788]
[648.39758301 57.15798569]
[639.44329834 69.19628143]
[629.88110352 80.75765228]
[619.73645020 91.81144714]
[609.03625488 102.32834625]
[597.80877686 112.28047180]
[586.08392334 121.64142609]
[573.89270020 130.38638306]
[561.26745605 138.49215698]
[548.24169922 145.93724060]
[534.84991455 152.70190430]
[521.12762451 158.76821899]
[507.11129761 164.12007141]
[492.83804321 168.74328613]
[478.34570312 172.62559509]
[463.67272949 175.75671387]
[448.85800171 178.12832642]
[433.94085693 179.73416138]
[418.96081543 180.56993103]
[403.95761108 180.63345337]
[388.97100830 179.92454529]
[374.04080200 178.44506836]
[359.20654297 176.19897461]
[344.50756836 173.19219971]
[329.98287964 169.43273926]
[315.67098999 164.93054199]
[301.60983276 159.69755554]
[287.83670044 153.74765015]
[274.38812256 147.09661865]
[261.29977417 139.76208496]
[248.60636902 131.76348877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[18 31]
[19 30]
] def

init

% Start Annotations
6 43 0.0 0.2 colorpair
7 42 0.0 1 colorpair
9 40 0.16 0.2 colorpair
10 39 0.0 0.2 colorpair
11 38 0.0 0.2 colorpair
13 36 0.0 0.2 colorpair
14 35 0.0 1 colorpair
18 31 0.0 1 colorpair
19 30 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 43 2 gmark
9 40 2 gmark
9 cmark
10 39 2 gmark
11 38 2 gmark
13 36 2 gmark
19 cmark

% End Annotations
showpage
end
%%EOF
