%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan  8 17:27:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUAACUUUUUACUAAAUGUAUUAGCUAGUUUAACAGCUAGUUUAAUAGUUUACUUAAUUAGUAAA_UAUUCAAAAAA_GUAAAAAGCCACUC______UGGCA___G__AAGAGUGACUUGGAAUUUGAUUUAAAAAUCAAGUUCAAUAAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[132.34548950 282.63497925]
[119.89790344 291.00503540]
[106.18529510 297.08486938]
[91.62485504 300.68948364]
[76.65955353 301.70925903]
[61.74471664 300.11315918]
[47.33410645 295.94970703]
[33.86614990 289.34561157]
[21.75060272 280.50177002]
[11.35606575 269.68725586]
[2.99878550 257.23110962]
[-3.06697607 243.51226807]
[-6.65667391 228.94812012]
[-7.66109371 213.98179626]
[-6.04967833 199.06860352]
[-1.87145233 184.66226196]
[4.74646473 171.20109558]
[13.60272884 159.09461975]
[24.42789650 148.71119690]
[36.89262009 140.36669922]
[50.61767578 134.31500244]
[65.18421173 130.74044800]
[76.33467865 120.70714569]
[87.48513794 110.67384338]
[72.88946533 114.13307953]
[58.29378891 117.59231567]
[43.69811630 121.05155182]
[29.10244370 124.51079559]
[14.50677109 127.97003174]
[-0.08890180 131.42927551]
[-5.94421625 145.79919434]
[-19.14542389 153.95442200]
[-34.61639023 152.75909424]
[-46.40821457 142.67285156]
[-49.98669815 127.57403564]
[-43.97584152 113.26847076]
[-30.68694305 105.25692749]
[-15.22985363 106.62001801]
[-3.54813981 116.83359528]
[11.04753304 113.37435913]
[25.64320564 109.91512299]
[40.23888016 106.45587921]
[54.83455276 102.99664307]
[69.43022919 99.53740692]
[84.02590179 96.07817078]
[69.55854034 92.11639404]
[54.69140244 94.10839844]
[39.69169235 94.01519012]
[24.85045242 91.83857727]
[10.45565128 87.62079620]
[-3.21340990 81.44367981]
[-15.89150906 73.42708588]
[-27.33265305 63.72655487]
[-37.31484604 52.53031540]
[-45.64440918 40.05560684]
[-52.15971756 26.54447174]
[-56.73435974 12.25907040]
[-59.27956772 -2.52341604]
[-59.74596024 -17.51616287]
[-58.12448883 -32.42826843]
[-54.44660950 -46.97038651]
[-48.78369141 -60.86035919]
[-41.24560928 -73.82868195]
[-31.97862434 -85.62371826]
[-21.16254616 -96.01662445]
[-9.00723648 -104.80573273]
[4.25145245 -111.82051849]
[18.35626221 -116.92485809]
[33.03351593 -120.01972961]
[47.99842834 -121.04507446]
[62.96063995 -119.98100281]
[77.62983704 -116.84815216]
[91.72138214 -111.70731354]
[104.96187592 -104.65824127]
[117.09439087 -95.83769226]
[127.88353729 -85.41683197]
[137.11996460 -73.59784698]
[144.62445068 -60.61005783]
[150.25140381 -46.70547104]
[153.89161682 -32.15388489]
[155.47448730 -17.23763275]
[154.96929932 -2.24614263]
[152.38583374 12.52970695]
[147.77423096 26.80321884]
[141.22396851 40.29744339]
[132.86215210 52.75055313]
[122.85101318 63.92091751]
[111.38668823 73.59041595]
[104.59838104 86.96646881]
[116.96850586 78.48236847]
[123.97289276 64.29613495]
[138.84503174 63.47826385]
[151.21514893 54.99415970]
[163.58528137 46.51005554]
[175.95539856 38.02595520]
[171.08081055 23.73816681]
[170.24291992 8.66499329]
[173.50392151 -6.07503414]
[180.62184143 -19.38810921]
[191.06845093 -30.28631210]
[204.06855774 -37.96092606]
[218.65747070 -41.84243774]
[233.75259399 -41.64282227]
[248.23376465 -37.37688446]
[261.02639771 -29.36119270]
[271.18118286 -18.19055748]
[277.94454956 -4.69391727]
[280.81463623 10.12718773]
[279.57846069 25.17293358]
[274.32775879 39.32682419]
[265.45214844 51.53855133]
[253.61029053 60.90191650]
[239.68089294 66.72210693]
[224.69763184 68.56721497]
[209.77235413 66.30032349]
[196.01263428 60.08965302]
[184.43949890 50.39608002]
[172.06938171 58.88018417]
[159.69924927 67.36428833]
[147.32913208 75.84838867]
[141.20953369 89.42778015]
[125.45260620 90.85249329]
[113.08248138 99.33659363]
[115.77919769 100.80251312]
[118.28575897 102.80658722]
[130.48904419 111.52896881]
[142.69232178 120.25135040]
[154.89559937 128.97372437]
[167.09889221 137.69610596]
[179.30216980 146.41848755]
[191.50544739 155.14086914]
[203.70872498 163.86325073]
[215.91201782 172.58563232]
[228.11529541 181.30801392]
[243.66226196 178.46775818]
[256.61633301 187.52137756]
[259.29205322 203.09751892]
[250.10197449 215.95512390]
[234.49842834 218.46601868]
[221.73869324 209.14053345]
[219.39291382 193.51129150]
[207.18963623 184.78890991]
[194.98634338 176.06652832]
[182.78306580 167.34414673]
[170.57978821 158.62176514]
[158.37651062 149.89938354]
[146.17321777 141.17701721]
[133.96994019 132.45463562]
[121.76666260 123.73224640]
[109.56337738 115.00986481]
[116.09103394 128.51504517]
[122.61869049 142.02021790]
[134.75236511 150.83917236]
[145.16906738 161.63233948]
[153.55187988 174.07131958]
[159.64578247 187.77767944]
[163.26535034 202.33442688]
[164.30047607 217.29866028]
[162.71966553 232.21513367]
[158.57101440 246.63000488]
[151.98072815 260.10473633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[89 123]
[90 122]
[92 120]
[93 119]
[94 118]
[95 117]
[125 150]
[126 149]
[127 148]
[128 147]
[129 146]
[130 145]
[131 144]
[132 143]
[133 142]
[134 141]
] def

init

% Start Annotations
26 43 0.0 1 colorpair
27 42 0.0 0.2 colorpair
28 41 0.0 1 colorpair
29 40 0.0 1 colorpair
89 123 0.0 1 colorpair
90 122 0.16 1 colorpair
92 120 0.0 1 colorpair
93 119 0.0 1 colorpair
94 118 0.0 1 colorpair
95 117 0.0 1 colorpair
127 148 0.16 0.2 colorpair
128 147 0.32 0.2 colorpair
130 145 0.16 0.2 colorpair
131 144 0.0 1 colorpair
132 143 0.16 1 colorpair
133 142 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
24 45 4 gmark
24 cmark
45 cmark
25 44 4 gmark
25 cmark
27 42 2 gmark
30 39 4 gmark
30 cmark
39 cmark
90 cmark
122 cmark
125 150 4 gmark
125 cmark
150 cmark
126 149 4 gmark
126 cmark
149 cmark
127 148 2 gmark
127 cmark
128 147 2 gmark
128 cmark
147 cmark
129 146 4 gmark
129 cmark
146 cmark
130 145 2 gmark
145 cmark
143 cmark
134 141 4 gmark
134 cmark
141 cmark

% End Annotations
showpage
end
%%EOF
