%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jan  8 17:26:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAACUUUUUACUUAAUGUAUUAGCUAGUUUAAUUGCUAGUUUAAUAGUUUACUUAAUUAGUAAACUAUUUAAAAAA_GUAAAAAGCCACUCAAG_C_______CACUAAGAGUGGCUGGGAAUUUGAUUUUAAAAUCAAGUUCCAAAAAAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[164.83091736 239.40036011]
[171.57553101 226.00222778]
[179.87155151 213.50518799]
[189.60028076 202.08801270]
[200.62255859 191.91404724]
[212.78068542 183.12884521]
[225.90074158 175.85806274]
[239.79502869 170.20573425]
[254.25762939 166.25421143]
[240.22441101 160.95619202]
[226.19120789 155.65817261]
[212.15798950 150.36015320]
[198.12478638 145.06214905]
[184.09156799 139.76412964]
[170.05834961 134.46611023]
[156.02514648 129.16809082]
[147.82527161 141.25939941]
[137.06683350 151.14337158]
[124.32536316 158.29125977]
[110.28252411 162.32066345]
[95.68959045 163.01599121]
[81.32725525 160.34005737]
[67.96388245 154.43603516]
[56.31439209 145.61975098]
[47.00201797 134.36289978]
[40.52495193 121.26766968]
[25.90103531 124.60548401]
[11.27711678 127.94329834]
[-3.34680223 131.28111267]
[-17.97072029 134.61892700]
[-23.94526100 148.93969727]
[-37.21379089 156.98492432]
[-52.67428970 155.66105652]
[-64.38188171 145.47715759]
[-67.83475494 130.34912109]
[-61.70521164 116.09400940]
[-48.35018539 108.19319153]
[-32.90496063 109.68469238]
[-21.30853462 119.99500275]
[-6.68461609 116.65718842]
[7.93930244 113.31937408]
[22.56322098 109.98155975]
[37.18714142 106.64374542]
[36.92832184 96.60025787]
[38.26525116 86.64277649]
[41.16409683 77.02324677]
[45.55152130 67.98503113]
[51.31652069 59.75681686]
[40.97175598 48.89468765]
[30.62699318 38.03255844]
[20.28222847 27.17042923]
[9.93746567 16.30830002]
[-0.40729892 5.44617033]
[-10.75206280 -5.41595888]
[-21.09682655 -16.27808762]
[-31.44159126 -27.14021683]
[-41.78635406 -38.00234604]
[-57.38062668 -36.83927155]
[-70.04387665 -46.01401901]
[-73.79691315 -61.19455719]
[-66.86766815 -75.21309662]
[-52.52790833 -81.45051575]
[-37.54844284 -76.96169281]
[-29.00210762 -63.86611557]
[-30.92422676 -48.34711075]
[-20.57946205 -37.48498154]
[-10.23469830 -26.62285233]
[0.11006626 -15.76072311]
[10.45483017 -4.89859390]
[20.79959488 5.96353531]
[31.14435959 16.82566452]
[41.48912430 27.68779373]
[51.83388901 38.54992294]
[62.17864990 49.41205215]
[77.20420074 41.09375000]
[93.91510773 37.13054276]
[111.07588196 37.81543732]
[127.41778564 43.09780502]
[141.73262024 52.58710098]
[152.96205139 65.58175659]
[160.27586365 81.12104797]
[163.13331604 98.05610657]
[161.32316589 115.13488770]
[175.35636902 120.43289948]
[189.38958740 125.73091888]
[203.42279053 131.02893066]
[217.45600891 136.32695007]
[231.48921204 141.62496948]
[245.52243042 146.92297363]
[259.55563354 152.22099304]
[263.90734863 150.92807007]
[268.19415283 151.20497131]
[280.61514282 142.79551697]
[293.03613281 134.38606262]
[305.45712280 125.97661591]
[300.84243774 111.59324646]
[300.46832275 96.49236298]
[304.36511230 81.89812469]
[312.21688843 68.99362183]
[323.38714600 58.82496262]
[336.97039795 52.21647644]
[351.86547852 49.70388794]
[366.86492920 51.49087143]
[380.75280762 57.43257523]
[392.40325928 67.04732513]
[400.87188721 79.55569458]
[405.47210693 93.94369507]
[405.83105469 109.04494476]
[401.91961670 123.63526154]
[394.05487061 136.53187561]
[382.87438965 146.68930054]
[369.28451538 153.28413391]
[354.38693237 155.78176880]
[339.38928223 153.97970581]
[325.50738525 148.02406311]
[313.86657715 138.39761353]
[301.44558716 146.80706787]
[289.02459717 155.21650696]
[276.60360718 163.62596130]
[291.59564209 164.11468506]
[306.42208862 166.38984680]
[320.87084961 170.41891479]
[334.73519897 176.14422607]
[347.81683350 183.48390198]
[359.92861938 192.33293152]
[370.89721680 202.56471252]
[380.56579590 214.03288269]
[388.79595947 226.57337952]
[395.47003174 240.00680542]
[400.49252319 254.14097595]
[403.79153442 268.77368164]
[405.31994629 283.69561768]
[405.05581665 298.69329834]
[403.00299072 313.55215454]
[399.19079590 328.05966187]
[393.67379761 342.00820923]
[386.53088379 355.19833374]
[377.86425781 367.44125366]
[367.79791260 378.56192017]
[356.47583008 388.40115356]
[344.06002808 396.81823730]
[330.72808838 403.69277954]
[316.67071533 408.92639160]
[302.08905029 412.44424438]
[287.19168091 414.19595337]
[272.19174194 414.15652466]
[257.30380249 412.32647705]
[242.74084473 408.73199463]
[228.71119690 403.42453003]
[215.41558838 396.47998047]
[203.04420471 387.99771118]
[191.77403259 378.09906006]
[181.76631165 366.92565918]
[173.16418457 354.63729858]
[166.09074402 341.40982056]
[160.64715576 327.43243408]
[156.91131592 312.90509033]
[154.93664551 298.03564453]
[154.75140381 283.03677368]
[156.35824585 268.12310791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[92 119]
[93 118]
[94 117]
[95 116]
] def

init

% Start Annotations
9 90 0.32 1 colorpair
10 89 0.0 1 colorpair
11 88 0.0 1 colorpair
12 87 0.0 1 colorpair
13 86 0.0 1 colorpair
14 85 0.0 1 colorpair
15 84 0.16 1 colorpair
16 83 0.16 1 colorpair
26 43 0.0 1 colorpair
27 42 0.0 0.2 colorpair
28 41 0.0 1 colorpair
29 40 0.0 1 colorpair
48 74 0.16 0.2 colorpair
49 73 0.16 1 colorpair
50 72 0.0 1 colorpair
51 71 0.0 1 colorpair
52 70 0.32 1 colorpair
53 69 0.16 1 colorpair
54 68 0.0 1 colorpair
55 67 0.0 1 colorpair
56 66 0.16 0.2 colorpair
57 65 0.16 1 colorpair
92 119 0.0 1 colorpair
93 118 0.0 1 colorpair
94 117 0.0 1 colorpair
95 116 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 cmark
90 cmark
15 cmark
84 cmark
16 cmark
27 42 2 gmark
30 39 4 gmark
30 cmark
39 cmark
48 74 2 gmark
48 cmark
49 cmark
52 cmark
70 cmark
69 cmark
56 66 2 gmark
56 cmark
57 cmark

% End Annotations
showpage
end
%%EOF
