%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Dec 20 07:09:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GC_A__A__A___A_A_UC_U_A__U_GU___UU_G__U_GGC__CCUG_AUCGUCA___UCUGU______UUCACGGUCCUGGUAUU_CACACUGAUGACGAGAG_AAUCGCUGUGUGA_GUUGCGGAUCAGAGACG_GU_AAUAC______GGAGGUUGC_GGC___UUUCAUAG__CUUA______C___GA_A___U_CC_A_A__G____\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50523376 92.06571960]
[62.52932739 91.19751740]
[47.58483124 89.89611816]
[32.68427658 88.16260529]
[17.84015656 85.99843597]
[3.06490993 83.40542603]
[-11.62907314 80.38574982]
[-26.22947502 76.94194031]
[-40.72405624 73.07688141]
[-55.10066605 68.79380798]
[-69.34725189 64.09632111]
[-83.45186615 58.98835754]
[-97.40269470 53.47418976]
[-111.18803406 47.55845261]
[-124.79633331 41.24609375]
[-138.21617126 34.54241180]
[-151.43632507 27.45302773]
[-164.44567871 19.98388100]
[-177.23335266 12.14123344]
[-189.78860474 3.93166208]
[-202.10093689 -4.63795233]
[-214.15998840 -13.56042576]
[-225.95568848 -22.82827759]
[-237.47813416 -32.43373871]
[-248.71766663 -42.36875916]
[-259.66485596 -52.62500381]
[-270.31054688 -63.19388199]
[-280.64578247 -74.06652832]
[-290.66189575 -85.23383331]
[-300.35052490 -96.68642426]
[-309.70355225 -108.41471863]
[-318.71310425 -120.40886688]
[-327.37164307 -132.65881348]
[-335.67187500 -145.15431213]
[-343.60690308 -157.88485718]
[-351.17004395 -170.83979797]
[-358.35498047 -184.00827026]
[-365.15563965 -197.37922668]
[-371.56634521 -210.94146729]
[-377.58175659 -224.68360901]
[-383.19677734 -238.59414673]
[-388.40673828 -252.66142273]
[-393.20724487 -266.87362671]
[-397.59429932 -281.21884155]
[-401.56417847 -295.68505859]
[-405.11361694 -310.26013184]
[-408.23959351 -324.93188477]
[-410.93951416 -339.68795776]
[-413.21109009 -354.51602173]
[-415.05245972 -369.40365601]
[-416.46203613 -384.33831787]
[-417.43862915 -399.30755615]
[-417.98144531 -414.29876709]
[-418.09005737 -429.29943848]
[-417.76431274 -444.29696655]
[-417.00454712 -459.27874756]
[-415.81134033 -474.23226929]
[-414.18572998 -489.14498901]
[-412.12905884 -504.00439453]
[-409.64306641 -518.79803467]
[-406.72982788 -533.51348877]
[-403.39178467 -548.13842773]
[-399.63174438 -562.66058350]
[-395.45285034 -577.06781006]
[-390.85858154 -591.34802246]
[-385.85284424 -605.48925781]
[-380.43981934 -619.47961426]
[-374.62399292 -633.30743408]
[-368.41030884 -646.96105957]
[-361.80392456 -660.42907715]
[-354.81042480 -673.70019531]
[-347.43563843 -686.76324463]
[-339.68576050 -699.60736084]
[-331.56729126 -712.22174072]
[-323.08700562 -724.59576416]
[-314.25204468 -736.71905518]
[-305.06982422 -748.58154297]
[-295.54800415 -760.17321777]
[-285.69461060 -771.48437500]
[-275.51785278 -782.50549316]
[-265.02630615 -793.22741699]
[-254.22875977 -803.64105225]
[-243.13424683 -813.73779297]
[-231.75209045 -823.50903320]
[-220.09179688 -832.94671631]
[-208.16317749 -842.04284668]
[-195.97621155 -850.78979492]
[-183.54113770 -859.18029785]
[-170.86834717 -867.20727539]
[-157.96849060 -874.86395264]
[-144.85237122 -882.14398193]
[-131.53099060 -889.04125977]
[-118.01551056 -895.54998779]
[-104.31726074 -901.66467285]
[-90.44773102 -907.38024902]
[-76.41854095 -912.69189453]
[-62.24146271 -917.59515381]
[-47.92836761 -922.08593750]
[-33.49126434 -926.16040039]
[-18.94225121 -929.81524658]
[-4.29352665 -933.04736328]
[10.44262886 -935.85400391]
[25.25386238 -938.23284912]
[40.12775803 -940.18188477]
[55.05184555 -941.69952393]
[70.01361084 -942.78448486]
[85.00051880 -943.43579102]
[100.00000000 -943.65295410]
[114.99948120 -943.43579102]
[129.98638916 -942.78448486]
[144.94815063 -941.69952393]
[159.87223816 -940.18188477]
[174.74613953 -938.23284912]
[189.55737305 -935.85400391]
[204.29353333 -933.04736328]
[218.94224548 -929.81524658]
[233.49125671 -926.16040039]
[247.92837524 -922.08593750]
[262.24145508 -917.59515381]
[276.41854858 -912.69189453]
[290.44772339 -907.38024902]
[304.31726074 -901.66467285]
[318.01550293 -895.54998779]
[331.53097534 -889.04125977]
[344.85238647 -882.14398193]
[357.96850586 -874.86395264]
[370.86834717 -867.20727539]
[383.54113770 -859.18029785]
[395.97622681 -850.78979492]
[408.16317749 -842.04284668]
[420.09179688 -832.94671631]
[431.75207520 -823.50903320]
[443.13424683 -813.73779297]
[454.22875977 -803.64105225]
[465.02630615 -793.22741699]
[475.51785278 -782.50549316]
[485.69461060 -771.48437500]
[495.54800415 -760.17321777]
[505.06982422 -748.58154297]
[514.25207520 -736.71905518]
[523.08703613 -724.59576416]
[531.56726074 -712.22174072]
[539.68572998 -699.60736084]
[547.43566895 -686.76324463]
[554.81042480 -673.70019531]
[561.80395508 -660.42907715]
[568.41033936 -646.96105957]
[574.62402344 -633.30743408]
[580.43981934 -619.47961426]
[585.85284424 -605.48925781]
[590.85858154 -591.34802246]
[595.45281982 -577.06781006]
[599.63171387 -562.66058350]
[603.39178467 -548.13842773]
[606.72979736 -533.51348877]
[609.64306641 -518.79803467]
[612.12908936 -504.00439453]
[614.18572998 -489.14498901]
[615.81134033 -474.23226929]
[617.00451660 -459.27874756]
[617.76434326 -444.29696655]
[618.09002686 -429.29943848]
[617.98144531 -414.29876709]
[617.43865967 -399.30755615]
[616.46203613 -384.33831787]
[615.05242920 -369.40365601]
[613.21112061 -354.51602173]
[610.93951416 -339.68795776]
[608.23962402 -324.93188477]
[605.11364746 -310.26013184]
[601.56420898 -295.68505859]
[597.59429932 -281.21884155]
[593.20721436 -266.87362671]
[588.40673828 -252.66142273]
[583.19677734 -238.59414673]
[577.58172607 -224.68360901]
[571.56634521 -210.94146729]
[565.15563965 -197.37922668]
[558.35498047 -184.00827026]
[551.17004395 -170.83979797]
[543.60693359 -157.88485718]
[535.67187500 -145.15431213]
[527.37164307 -132.65881348]
[518.71307373 -120.40886688]
[509.70355225 -108.41471863]
[500.35052490 -96.68642426]
[490.66189575 -85.23383331]
[480.64578247 -74.06652832]
[470.31054688 -63.19388199]
[459.66485596 -52.62500381]
[448.71765137 -42.36875916]
[437.47814941 -32.43373871]
[425.95568848 -22.82827759]
[414.16000366 -13.56042576]
[402.10092163 -4.63795233]
[389.78860474 3.93166208]
[377.23333740 12.14123344]
[364.44567871 19.98388100]
[351.43630981 27.45302773]
[338.21618652 34.54241180]
[324.79632568 41.24609375]
[311.18804932 47.55845261]
[297.40270996 53.47418976]
[283.45187378 58.98835754]
[269.34725952 64.09632111]
[255.10066223 68.79380798]
[240.72406006 73.07688141]
[226.22947693 76.94194031]
[211.62907410 80.38574982]
[196.93508911 83.40542603]
[182.15985107 85.99843597]
[167.31571960 88.16260529]
[152.41516113 89.89611816]
[137.47067261 91.19751740]
[122.49476624 92.06571960]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
