%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:30:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GACGAAAUAUGCCCUUAUCGGGCUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAGCUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUACGAAGCACGGAA_\
) } def
/len { sequence length } bind def

/coor [
[82.35221100 146.29325867]
[88.61763763 132.66455078]
[81.16869354 131.79092407]
[70.78961182 142.62026978]
[60.41053009 153.44961548]
[50.03144455 164.27894592]
[39.65236282 175.10829163]
[43.48812485 187.08891296]
[41.84776688 199.48812866]
[35.10705566 209.93739319]
[24.61004257 216.46736145]
[12.40146255 217.87893677]
[0.82855517 213.96301270]
[-10.00078583 224.34210205]
[-20.83012772 234.72117615]
[-31.65946960 245.10026550]
[-33.43616486 261.04461670]
[-47.08598709 269.47445679]
[-62.13796234 263.92309570]
[-67.04550171 248.64906311]
[-58.04396057 235.36932373]
[-42.03855133 234.27091980]
[-31.20921135 223.89183044]
[-20.37986946 213.51275635]
[-9.55052757 203.13366699]
[-12.77636337 185.82667542]
[-4.94570160 169.88462830]
[11.00181293 161.71620178]
[28.82302094 164.72920227]
[39.20210648 153.89987183]
[49.58118820 143.07052612]
[59.96026993 132.24118042]
[70.33935547 121.41184235]
[71.81076050 87.96364594]
[96.58884430 75.51541901]
[91.29508209 60.60614014]
[101.07200623 49.36954880]
[103.60701752 34.58530807]
[106.14202881 19.80107117]
[108.67704773 5.01683187]
[111.21205902 -9.76740646]
[113.74707031 -24.55164528]
[116.28208160 -39.33588409]
[118.81709290 -54.12012100]
[105.08464050 -48.08524704]
[91.70452881 -54.86555481]
[88.45036316 -69.50831604]
[97.69918060 -81.31760406]
[112.69510651 -81.66723633]
[122.48447418 -70.30100250]
[126.57139587 -84.73349762]
[130.65832520 -99.16600037]
[134.74525452 -113.59849548]
[138.83218384 -128.03099060]
[142.91911316 -142.46350098]
[147.00602722 -156.89599609]
[151.09295654 -171.32849121]
[155.17988586 -185.76098633]
[159.26681519 -200.19349670]
[158.59605408 -209.37438965]
[163.59667969 -214.88722229]
[167.98902893 -229.22972107]
[172.38136292 -243.57221985]
[176.31489563 -258.04727173]
[179.78559875 -272.64022827]
[183.25631714 -287.23318481]
[186.72702026 -301.82614136]
[190.19773865 -316.41906738]
[193.66844177 -331.01202393]
[197.13916016 -345.60498047]
[200.60987854 -360.19793701]
[190.68058777 -371.97567749]
[189.60293579 -387.16424561]
[197.58111572 -399.92404175]
[211.37782288 -405.47283936]
[214.84852600 -420.06576538]
[218.31924438 -434.65872192]
[213.11235046 -450.20928955]
[224.17730713 -462.31295776]
[240.13142395 -458.51852417]
[244.56250000 -442.72937012]
[232.91220093 -431.18801880]
[229.44148254 -416.59506226]
[225.97076416 -402.00210571]
[235.79211426 -390.83612061]
[237.17152405 -375.85076904]
[229.37132263 -362.77368164]
[215.20281982 -356.72720337]
[211.73210144 -342.13424683]
[208.26139832 -327.54132080]
[204.79067993 -312.94836426]
[201.31997681 -298.35540771]
[197.84925842 -283.76245117]
[194.37855530 -269.16952515]
[190.90783691 -254.57656860]
[192.49092102 -251.35278320]
[192.54919434 -247.18766785]
[190.65124512 -242.82615662]
[186.72386169 -239.17987061]
[182.33152771 -224.83737183]
[177.93917847 -210.49487305]
[173.69931030 -196.10656738]
[169.61238098 -181.67407227]
[165.52545166 -167.24156189]
[161.43853760 -152.80906677]
[157.35160828 -138.37657166]
[153.26467896 -123.94406891]
[149.17774963 -109.51157379]
[145.09082031 -95.07907104]
[141.00389099 -80.64657593]
[136.91697693 -66.21407318]
[133.60133362 -51.58510971]
[131.06631470 -36.80087280]
[128.53131104 -22.01663399]
[125.99629211 -7.23239470]
[123.46128082 7.55184412]
[120.92626953 22.33608246]
[118.39125824 37.12032318]
[115.85624695 51.90456009]
[121.33133698 65.75637054]
[111.37308502 78.05043030]
[120.67942047 82.49565125]
[128.04154968 90.95143127]
[131.74023438 102.48603058]
[130.52391052 115.44622040]
[123.90146637 127.69370270]
[131.49319458 140.63069153]
[139.08491516 153.56767273]
[146.67665100 166.50466919]
[154.40524292 179.36035156]
[162.26985168 192.13328552]
[177.76586914 194.23268127]
[188.24874878 205.83628845]
[188.76878357 221.46520996]
[179.08042908 233.73999023]
[163.75823975 236.86480713]
[150.03688049 229.36425781]
[144.39515686 214.77984619]
[149.49691772 199.99789429]
[141.63230896 187.22496033]
[135.40393066 183.15007019]
[133.73965454 174.09638977]
[126.14792633 161.15940857]
[118.55619812 148.22241211]
[110.96447754 135.28543091]
[103.51553345 134.41180420]
[106.45747375 149.12046814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[13 25]
[14 24]
[15 23]
[16 22]
[35 121]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
[126 145]
[127 144]
[128 143]
[129 142]
[130 140]
[131 139]
] def

init

% Start Annotations
3 33 0.0 1 colorpair
4 32 0.0 0.2 colorpair
5 31 0.0 1 colorpair
6 30 0.0 1 colorpair
7 29 0.0 1 colorpair
13 25 0.16 1 colorpair
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
35 121 0.0 1 colorpair
37 119 0.0 1 colorpair
38 118 0.0 1 colorpair
39 117 0.0 1 colorpair
40 116 0.0 1 colorpair
41 115 0.0 1 colorpair
42 114 0.0 1 colorpair
43 113 0.0 1 colorpair
44 112 0.0 1 colorpair
50 111 0.0 1 colorpair
51 110 0.0 1 colorpair
52 109 0.0 1 colorpair
53 108 0.0 1 colorpair
54 107 0.0 1 colorpair
55 106 0.0 1 colorpair
56 105 0.0 1 colorpair
57 104 0.0 1 colorpair
58 103 0.0 1 colorpair
59 102 0.0 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.0 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair
77 82 0.0 1 colorpair
126 145 0.0 1 colorpair
127 144 0.0 1 colorpair
128 143 0.0 1 colorpair
129 142 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 32 2 gmark
25 cmark

% End Annotations
showpage
end
%%EOF
