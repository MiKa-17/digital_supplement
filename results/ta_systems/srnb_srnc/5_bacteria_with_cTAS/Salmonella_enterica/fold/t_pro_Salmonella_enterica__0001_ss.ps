%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:30:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGAAAUAUGCCCUUAUCGGGCUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAGCUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUACGAAGCACGGAAG\
) } def
/len { sequence length } bind def

/coor [
[87.22148132 124.17197418]
[76.84239960 135.00131226]
[66.46331787 145.83065796]
[56.08423615 156.66000366]
[45.70515060 167.48933411]
[35.32606888 178.31867981]
[24.94698524 189.14802551]
[28.78274727 201.12864685]
[27.14238930 213.52784729]
[20.40167999 223.97711182]
[9.90466595 230.50708008]
[-2.30391479 231.91865540]
[-13.87682152 228.00274658]
[-24.70616341 238.38182068]
[-35.53550339 248.76091003]
[-46.36484528 259.13998413]
[-48.14154053 275.08435059]
[-61.79136658 283.51419067]
[-76.84333801 277.96282959]
[-81.75087738 262.68881226]
[-72.74933624 249.40904236]
[-56.74393082 248.31065369]
[-45.91458893 237.93156433]
[-35.08524704 227.55249023]
[-24.25590515 217.17340088]
[-27.48174095 199.86639404]
[-19.65107918 183.92436218]
[-3.70356369 175.75593567]
[14.11764431 178.76893616]
[24.49672699 167.93959045]
[34.87581253 157.11026001]
[45.25489426 146.28091431]
[55.63397598 135.45156860]
[66.01306152 124.62223053]
[76.39214325 113.79289246]
[75.58578491 87.69061279]
[97.05142975 72.81764221]
[99.58644104 58.03340149]
[102.12145233 43.24916458]
[104.65646362 28.46492577]
[107.19147491 13.68068600]
[109.72648621 -1.10355222]
[112.26150513 -15.88779068]
[114.79651642 -30.67202950]
[101.06406403 -24.63715363]
[87.68394470 -31.41745949]
[84.42978668 -46.06021881]
[93.67860413 -57.86951065]
[108.67452240 -58.21914291]
[118.46389008 -46.85290527]
[122.55081940 -61.28540421]
[126.63774872 -75.71790314]
[130.72467041 -90.15040588]
[134.81159973 -104.58290100]
[138.89852905 -119.01540375]
[142.98545837 -133.44790649]
[147.07238770 -147.88040161]
[151.15930176 -162.31289673]
[155.24623108 -176.74539185]
[154.57546997 -185.92630005]
[159.57611084 -191.43911743]
[163.96844482 -205.78163147]
[168.36079407 -220.12413025]
[172.29431152 -234.59918213]
[175.76501465 -249.19213867]
[179.23573303 -263.78509521]
[182.70645142 -278.37802124]
[186.17715454 -292.97097778]
[189.64787292 -307.56393433]
[193.11857605 -322.15689087]
[196.58929443 -336.74981689]
[186.66001892 -348.52758789]
[185.58235168 -363.71612549]
[193.56054688 -376.47595215]
[207.35723877 -382.02471924]
[210.82795715 -396.61767578]
[214.29866028 -411.21063232]
[209.09176636 -426.76119995]
[220.15672302 -438.86486816]
[236.11085510 -435.07043457]
[240.54191589 -419.28125000]
[228.89161682 -407.73992920]
[225.42089844 -393.14697266]
[221.95019531 -378.55401611]
[231.77153015 -367.38803101]
[233.15095520 -352.40267944]
[225.35073853 -339.32559204]
[211.18223572 -333.27911377]
[207.71153259 -318.68615723]
[204.24081421 -304.09323120]
[200.77011108 -289.50027466]
[197.29939270 -274.90731812]
[193.82867432 -260.31436157]
[190.35797119 -245.72142029]
[186.88725281 -231.12847900]
[188.47033691 -227.90469360]
[188.52861023 -223.73957825]
[186.63066101 -219.37806702]
[182.70329285 -215.73178101]
[178.31094360 -201.38928223]
[173.91860962 -187.04678345]
[169.67872620 -172.65847778]
[165.59181213 -158.22596741]
[161.50488281 -143.79347229]
[157.41795349 -129.36097717]
[153.33102417 -114.92847443]
[149.24409485 -100.49597931]
[145.15716553 -86.06347656]
[141.07025146 -71.63098145]
[136.98332214 -57.19847870]
[132.89639282 -42.76597977]
[129.58074951 -28.13701630]
[127.04573822 -13.35277843]
[124.51072693 1.43146014]
[121.97571564 16.21569824]
[119.44070435 30.99993706]
[116.90569305 45.78417587]
[114.37068176 60.56841660]
[111.83567047 75.35265350]
[117.96746063 79.39065552]
[122.80369568 84.91471100]
[125.99565887 91.52649689]
[127.31319427 98.74926758]
[126.66128540 106.06223297]
[124.08694458 112.93807220]
[119.77581024 118.88099670]
[127.36753082 131.81799316]
[134.95925903 144.75497437]
[142.55099487 157.69197083]
[150.27958679 170.54765320]
[158.14419556 183.32058716]
[173.64021301 185.41998291]
[184.12309265 197.02357483]
[184.64312744 212.65251160]
[174.95477295 224.92727661]
[159.63258362 228.05210876]
[145.91122437 220.55155945]
[140.26950073 205.96714783]
[145.37126160 191.18519592]
[137.50665283 178.41226196]
[131.27827454 174.33737183]
[129.61399841 165.28369141]
[122.02227020 152.34671021]
[114.43054199 139.40971375]
[106.83882141 126.47272491]
[101.85861206 127.27856445]
[96.81513214 127.15568542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[13 25]
[14 24]
[15 23]
[16 22]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
[126 145]
[127 144]
[128 143]
[129 142]
[130 140]
[131 139]
] def

init

% Start Annotations
1 35 0.0 1 colorpair
2 34 0.0 1 colorpair
3 33 0.0 1 colorpair
4 32 0.0 0.6 colorpair
5 31 0.0 1 colorpair
6 30 0.0 1 colorpair
7 29 0.0 1 colorpair
13 25 0.16 1 colorpair
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
37 119 0.0 1 colorpair
38 118 0.0 1 colorpair
39 117 0.0 1 colorpair
40 116 0.0 1 colorpair
41 115 0.0 1 colorpair
42 114 0.0 1 colorpair
43 113 0.0 1 colorpair
44 112 0.0 1 colorpair
50 111 0.0 1 colorpair
51 110 0.0 1 colorpair
52 109 0.0 1 colorpair
53 108 0.0 1 colorpair
54 107 0.0 1 colorpair
55 106 0.0 1 colorpair
56 105 0.0 1 colorpair
57 104 0.0 1 colorpair
58 103 0.0 1 colorpair
59 102 0.0 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.0 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair
77 82 0.0 1 colorpair
126 145 0.0 1 colorpair
127 144 0.0 1 colorpair
128 143 0.0 1 colorpair
129 142 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 32 1 gmark
25 cmark

% End Annotations
showpage
end
%%EOF
