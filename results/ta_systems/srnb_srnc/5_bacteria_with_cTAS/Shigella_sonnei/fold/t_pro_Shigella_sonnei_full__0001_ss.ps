%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GACGAAGUAUGCCCUUAUCGGGUUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAGCUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUACGAAGCACGGAA_\
) } def
/len { sequence length } bind def

/coor [
[59.44725418 222.15386963]
[45.00748444 226.21504211]
[30.88238716 221.16709900]
[22.28725433 208.87385559]
[22.39601707 193.87294006]
[12.01693344 204.70228577]
[1.63785064 215.53161621]
[-2.07610178 223.95452881]
[-9.07832241 226.47770691]
[-19.68492508 237.08432007]
[-30.29152679 247.69091797]
[-34.18342209 256.03311157]
[-41.23762131 258.40710449]
[-52.06695938 268.78616333]
[-62.89630127 279.16525269]
[-73.72564697 289.54434204]
[-75.50234222 305.48870850]
[-89.15216064 313.91851807]
[-104.20413971 308.36715698]
[-109.11167908 293.09313965]
[-100.11013794 279.81338501]
[-84.10472870 278.71499634]
[-73.27538300 268.33590698]
[-62.44604492 257.95681763]
[-51.61670303 247.57774353]
[-40.89812851 237.08432007]
[-30.29152679 226.47770691]
[-19.68492508 215.87110901]
[-9.19149113 205.15254211]
[1.18759227 194.32319641]
[11.56667519 183.49385071]
[20.98997498 171.82331848]
[29.38959694 159.39567566]
[37.78921890 146.96803284]
[46.18883896 134.54039001]
[54.58846283 122.11273956]
[62.98808289 109.68509674]
[93.52661896 84.50138855]
[96.06163025 69.71714783]
[98.59664154 54.93291092]
[101.13165283 40.14867020]
[103.66666412 25.36443138]
[106.20168304 10.58019352]
[108.73669434 -4.20404530]
[95.00424194 1.83083093]
[81.62412262 -4.94947577]
[78.36996460 -19.59223557]
[87.61878204 -31.40152740]
[102.61470032 -31.75115967]
[112.40406799 -20.38492203]
[116.49099731 -34.81742096]
[120.57791901 -49.24991989]
[124.66484833 -63.68241882]
[128.75177002 -78.11492157]
[132.83869934 -92.54741669]
[136.92562866 -106.97991943]
[141.01255798 -121.41241455]
[145.09948730 -135.84490967]
[149.18641663 -150.27742004]
[148.51565552 -159.45831299]
[153.51628113 -164.97114563]
[157.90863037 -179.31364441]
[162.30096436 -193.65614319]
[166.23448181 -208.13121033]
[169.70520020 -222.72415161]
[173.17590332 -237.31710815]
[176.64662170 -251.91004944]
[180.11734009 -266.50299072]
[183.58804321 -281.09594727]
[187.05876160 -295.68890381]
[190.52946472 -310.28186035]
[180.60018921 -322.05960083]
[179.52253723 -337.24816895]
[187.50071716 -350.00796509]
[201.29742432 -355.55676270]
[204.76812744 -370.14968872]
[208.23884583 -384.74264526]
[203.03195190 -400.29321289]
[214.09689331 -412.39688110]
[230.05102539 -408.60244751]
[234.48208618 -392.81326294]
[222.83178711 -381.27194214]
[219.36108398 -366.67898560]
[215.89036560 -352.08602905]
[225.71171570 -340.92004395]
[227.09112549 -325.93469238]
[219.29092407 -312.85760498]
[205.12242126 -306.81112671]
[201.65170288 -292.21817017]
[198.18099976 -277.62524414]
[194.71028137 -263.03228760]
[191.23957825 -248.43933105]
[187.76885986 -233.84638977]
[184.29814148 -219.25343323]
[180.82743835 -204.66049194]
[182.41052246 -201.43670654]
[182.46879578 -197.27159119]
[180.57084656 -192.91007996]
[176.64346313 -189.26379395]
[172.25112915 -174.92129517]
[167.85877991 -160.57879639]
[163.61891174 -146.19049072]
[159.53198242 -131.75798035]
[155.44505310 -117.32548523]
[151.35812378 -102.89299011]
[147.27120972 -88.46048737]
[143.18428040 -74.02799225]
[139.09735107 -59.59549332]
[135.01042175 -45.16299438]
[130.92349243 -30.73049545]
[126.83657074 -16.29799652]
[123.52092743 -1.66903305]
[120.98591614 13.11520576]
[118.45090485 27.89944458]
[115.91589355 42.68368149]
[113.38088226 57.46792221]
[110.84587097 72.25215912]
[108.31085968 87.03639984]
[113.90370178 100.95473480]
[125.96366119 109.87422943]
[138.02362061 118.79373169]
[150.08357239 127.71322632]
[165.24493408 123.88344574]
[179.29835510 130.74168396]
[185.60823059 145.04969788]
[181.19525146 160.05169678]
[168.14306641 168.66416931]
[152.61453247 166.82057190]
[141.94175720 155.39141846]
[141.16407776 139.77317810]
[129.10412598 130.85368347]
[117.04416656 121.93418884]
[104.98420715 113.01469421]
[97.59208679 114.28219604]
[104.57158661 127.55949402]
[94.10089111 138.30027771]
[80.65018463 131.66113281]
[82.80784607 116.81720734]
[75.41572571 118.08471680]
[67.01610565 130.51235962]
[58.61648560 142.94000244]
[50.21686172 155.36764526]
[41.81724167 167.79528809]
[33.41762161 180.22294617]
[48.05755997 176.95611572]
[61.88602066 182.76762390]
[69.79724121 195.51174927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[7 29]
[9 28]
[10 27]
[11 26]
[13 25]
[14 24]
[15 23]
[16 22]
[32 144]
[33 143]
[34 142]
[35 141]
[36 140]
[37 139]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
[119 133]
[120 132]
[121 131]
[122 130]
] def

init

% Start Annotations
5 31 0.0 1 colorpair
6 30 0.0 1 colorpair
7 29 0.0 1 colorpair
9 28 0.0 1 colorpair
10 27 0.0 1 colorpair
11 26 0.0 1 colorpair
13 25 0.0 1 colorpair
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
32 144 0.0 1 colorpair
33 143 0.0 1 colorpair
34 142 0.0 1 colorpair
35 141 0.0 1 colorpair
36 140 0.0 1 colorpair
37 139 0.0 1 colorpair
38 118 0.0 1 colorpair
39 117 0.0 1 colorpair
40 116 0.0 1 colorpair
41 115 0.0 1 colorpair
42 114 0.0 1 colorpair
43 113 0.0 1 colorpair
44 112 0.0 1 colorpair
50 111 0.0 1 colorpair
51 110 0.0 1 colorpair
52 109 0.0 1 colorpair
53 108 0.0 1 colorpair
54 107 0.0 1 colorpair
55 106 0.0 1 colorpair
56 105 0.0 1 colorpair
57 104 0.0 1 colorpair
58 103 0.0 1 colorpair
59 102 0.0 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.0 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair
77 82 0.0 1 colorpair
119 133 0.0 1 colorpair
120 132 0.0 1 colorpair
121 131 0.0 1 colorpair
122 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
