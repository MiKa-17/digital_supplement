%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:22:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGAAAUAUGCCCUUAUCGGGUUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAACUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUACGAAGCACGGAAGUAA__\
) } def
/len { sequence length } bind def

/coor [
[210.11857605 282.06332397]
[196.25360107 276.33947754]
[183.02281189 269.27221680]
[170.55601501 260.93081665]
[158.97547913 251.39710999]
[148.39482117 240.76463318]
[138.91781616 229.13766479]
[130.63742065 216.63026428]
[123.63488007 203.36511230]
[117.97885895 189.47233582]
[113.72484589 175.08819580]
[110.91456604 160.35380554]
[109.57598877 145.42353821]
[99.02397919 156.08444214]
[88.47196198 166.74534607]
[77.91994476 177.40626526]
[76.56411743 193.39192200]
[63.14122391 202.17858887]
[47.94815826 197.02587891]
[42.63974380 181.88652039]
[51.28813934 168.37411499]
[67.25904083 166.85424805]
[77.81105042 156.19332886]
[88.36306763 145.53242493]
[98.91508484 134.87152100]
[96.20577240 127.87797546]
[88.07783508 106.89735413]
[73.09758759 106.12769318]
[56.93553543 114.89231110]
[42.57276535 104.85461426]
[27.57987785 104.39268494]
[12.58699226 103.93076324]
[-2.40589333 103.46883392]
[-17.39877892 103.00691223]
[-32.39166641 102.54498291]
[-47.38455200 102.08306122]
[-60.01056290 111.98070526]
[-75.58718109 108.14031982]
[-82.16535187 93.50791168]
[-74.69887543 79.30822754]
[-58.91538239 76.43402863]
[-46.92262650 87.09017181]
[-31.92973900 87.55210114]
[-16.93685341 88.01402283]
[-1.94396746 88.47595215]
[13.04891872 88.93787384]
[28.04180336 89.39980316]
[43.03469086 89.86172485]
[52.09545898 81.78926849]
[64.62866974 82.08917999]
[73.86724854 91.14745331]
[88.84749603 91.91710663]
[82.80441284 78.18826294]
[94.58653259 68.90486145]
[106.52069855 77.99203491]
[109.27693939 63.24743652]
[112.03318024 48.50283813]
[114.78942871 33.75824356]
[117.54566956 19.01364517]
[112.47588348 4.02672243]
[122.42007446 -7.06211805]
[125.17631531 -21.80671501]
[127.93255615 -36.55131149]
[130.23342896 -51.37379456]
[132.07675171 -66.26010132]
[133.92008972 -81.14640808]
[135.76341248 -96.03271484]
[137.60673523 -110.91902161]
[139.45005798 -125.80532837]
[141.29338074 -140.69163513]
[143.13670349 -155.57794189]
[131.97134399 -166.19119263]
[129.22837830 -181.16882324]
[135.75357056 -194.72927856]
[148.85565186 -201.76300049]
[150.69897461 -216.64930725]
[152.54229736 -231.53561401]
[145.65533447 -246.41854858]
[155.32075500 -259.66662598]
[171.59561157 -257.65136719]
[177.73771667 -242.44589233]
[167.42860413 -229.69229126]
[165.58528137 -214.80598450]
[163.74195862 -199.91967773]
[174.73269653 -189.90261841]
[177.75323486 -175.16014099]
[171.43986511 -161.30392456]
[158.02301025 -153.73461914]
[156.17968750 -138.84831238]
[154.33636475 -123.96200562]
[152.49304199 -109.07569885]
[150.64971924 -94.18939209]
[148.80639648 -79.30308533]
[146.96307373 -64.41677856]
[145.11973572 -49.53046799]
[147.04136658 -46.50481415]
[147.55728149 -42.38129425]
[146.16021729 -37.84766006]
[142.67715454 -33.79506683]
[139.92091370 -19.05047226]
[137.16467285 -4.30587530]
[142.43159485 9.62641525]
[132.29026794 21.76988792]
[129.53402710 36.51448441]
[126.77777863 51.25908279]
[124.02153778 66.00367737]
[121.26529694 80.74827576]
[127.75010681 67.22247314]
[135.54107666 54.40449142]
[144.56179810 42.42005539]
[154.72375488 31.38672066]
[165.92729187 21.41271973]
[178.06251526 12.59588623]
[191.01037598 5.02270699]
[204.64385986 -1.23253238]
[218.82923889 -6.10847282]
[233.42738342 -9.55728626]
[248.29507446 -11.54514122]
[263.28649902 -12.05253983]
[278.25457764 -11.07450485]
[293.05249023 -8.62062931]
[307.53509521 -4.71498442]
[321.56033325 0.60411942]
[334.99063110 7.28450584]
[347.69421387 15.26064682]
[359.54650879 24.45430183]
[370.43121338 34.77529144]
[380.24160767 46.12237167]
[388.88143921 58.38423920]
[396.26596069 71.44062042]
[402.32272339 85.16342926]
[406.99230957 99.41807556]
[410.22894287 114.06472015]
[412.00085449 128.95970154]
[412.29067993 143.95689392]
[411.09558105 158.90921021]
[408.42724609 173.66996765]
[404.31185913 188.09437561]
[398.78982544 202.04095459]
[391.91525269 215.37289429]
[383.75561523 227.95941162]
[374.39096069 239.67704773]
[363.91311646 250.41087341]
[352.42489624 260.05560303]
[340.03897095 268.51657104]
[326.87680054 275.71087646]
[313.06756592 281.56787109]
[298.74664307 286.03015137]
[284.05459595 289.05392456]
[269.13546753 290.60952759]
[254.13565063 290.68173218]
[239.20225525 289.26977539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 25]
[14 24]
[15 23]
[16 22]
[27 52]
[28 51]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
] def

init

% Start Annotations
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
27 52 0.0 1 colorpair
28 51 0.0 0.2 colorpair
31 47 0.0 1 colorpair
32 46 0.0 0.2 colorpair
34 44 0.16 0.2 colorpair
35 43 0.0 1 colorpair
36 42 0.16 1 colorpair
55 107 0.0 1 colorpair
56 106 0.0 1 colorpair
57 105 0.0 1 colorpair
58 104 0.0 1 colorpair
59 103 0.16 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.16 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 25 32 gmark
13 cmark
25 cmark
28 51 2 gmark
30 48 20 gmark
30 cmark
32 46 2 gmark
33 45 8 gmark
33 cmark
34 44 2 gmark
44 cmark
42 cmark
59 cmark
92 cmark
77 82 4 gmark
77 cmark

% End Annotations
showpage
end
%%EOF
