%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:22:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GACGAAAUAUGCCCUUAUCGGGUUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAACUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUACGAAGCACGGAA_\
) } def
/len { sequence length } bind def

/coor [
[208.41963196 279.30203247]
[194.23484802 274.42431641]
[180.65713501 268.04888916]
[167.84410095 260.24981689]
[155.94442749 251.11755371]
[145.09626770 240.75814819]
[135.42553711 229.29180908]
[127.04446411 216.85165405]
[120.05033875 203.58204651]
[114.52434540 189.63703918]
[110.53061676 175.17846680]
[108.11552429 160.37417603]
[107.30708313 145.40261841]
[96.47773743 155.78170776]
[85.64839935 166.16078186]
[74.81905365 176.53987122]
[73.04235840 192.48423767]
[59.39253616 200.91406250]
[44.34056091 195.36268616]
[39.43302536 180.08866882]
[48.43456650 166.80892944]
[64.43997192 165.71052551]
[75.26931763 155.33143616]
[86.09865570 144.95236206]
[96.92799377 134.57327271]
[94.50463867 127.47557831]
[87.23457336 106.18247223]
[72.31898499 104.59343719]
[55.70568466 112.46105957]
[41.91154099 101.66048431]
[26.96557999 100.38838959]
[12.01961708 99.11630249]
[-2.92634559 97.84421539]
[-17.87230873 96.57212830]
[-32.81827164 95.30003357]
[-47.76423264 94.02794647]
[-60.90704727 103.22827148]
[-76.25317383 98.55110168]
[-82.03038025 83.58435059]
[-73.80688477 69.80924225]
[-57.89104843 67.79285431]
[-46.49214554 79.08198547]
[-31.54618073 80.35407257]
[-16.60021973 81.62616730]
[-1.65425670 82.89825439]
[13.29170609 84.17034149]
[28.23766708 85.44242859]
[43.18363190 86.71451569]
[52.67224884 79.14197540]
[65.17537689 80.12417603]
[73.90802002 89.67784119]
[88.82361603 91.26687622]
[83.94789124 77.08142090]
[96.46396637 68.81414795]
[107.59775543 78.86600494]
[111.99009705 64.52350616]
[116.38243866 50.18100357]
[120.77477264 35.83850098]
[125.16711426 21.49600029]
[121.80997467 6.03507662]
[132.93495178 -3.86865973]
[137.32730103 -18.21116066]
[141.71963501 -32.55366135]
[145.65316772 -47.02872467]
[149.12387085 -61.62167358]
[152.59458923 -76.21462250]
[156.06529236 -90.80757141]
[159.53601074 -105.40052032]
[163.00671387 -119.99346924]
[166.47743225 -134.58641052]
[169.94815063 -149.17936707]
[160.01885986 -160.95712280]
[158.94120789 -176.14567566]
[166.91940308 -188.90547180]
[180.71609497 -194.45426941]
[184.18681335 -209.04722595]
[187.65751648 -223.64016724]
[182.45062256 -239.19073486]
[193.51557922 -251.29440308]
[209.46969604 -247.49996948]
[213.90077209 -231.71080017]
[202.25047302 -220.16946411]
[198.77975464 -205.57650757]
[195.30903625 -190.98355103]
[205.13038635 -179.81756592]
[206.50979614 -164.83221436]
[198.70959473 -151.75512695]
[184.54109192 -145.70864868]
[181.07038879 -131.11570740]
[177.59967041 -116.52275848]
[174.12895203 -101.92980957]
[170.65824890 -87.33686066]
[167.18753052 -72.74391174]
[163.71682739 -58.15095901]
[160.24610901 -43.55801010]
[161.82919312 -40.33422470]
[161.88746643 -36.16911697]
[159.98951721 -31.80759811]
[156.06214905 -28.16131973]
[151.66979980 -13.81881905]
[147.27746582 0.52368170]
[150.94877625 14.95873356]
[139.50961304 25.88834190]
[135.11727905 40.23084259]
[130.72492981 54.57334518]
[126.33259583 68.91584778]
[121.94025421 83.25834656]
[129.34767151 70.21495056]
[138.11531067 58.04413986]
[148.14138794 46.88718414]
[159.30953979 36.87358093]
[171.49014282 28.11955643]
[184.54180908 20.72672081]
[198.31304932 14.78088284]
[212.64401245 10.35105705]
[227.36837769 7.48866081]
[242.31521606 6.22691774]
[257.31103516 6.58047199]
[272.18182373 8.54522133]
[286.75491333 12.09836006]
[300.86120605 17.19864655]
[314.33691406 23.78688240]
[327.02566528 31.78659630]
[338.78018188 41.10493469]
[349.46401978 51.63373947]
[358.95315552 63.25080490]
[367.13748169 75.82128906]
[373.92196655 89.19928741]
[379.22787476 103.22951508]
[382.99362183 117.74912262]
[385.17550659 132.58958435]
[385.74819946 147.57864380]
[384.70504761 162.54232788]
[382.05813599 177.30696106]
[377.83825684 191.70114136]
[372.09432983 205.55780029]
[364.89303589 218.71612549]
[356.31796265 231.02337646]
[346.46865845 242.33668518]
[335.45944214 252.52476501]
[323.41806030 261.46932983]
[310.48431396 269.06661987]
[296.80834961 275.22836304]
[282.54882812 279.88311768]
[267.87133789 282.97680664]
[252.94619751 284.47357178]
[237.94667053 284.35598755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 25]
[14 24]
[15 23]
[16 22]
[27 52]
[28 51]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
] def

init

% Start Annotations
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
27 52 0.0 1 colorpair
28 51 0.0 0.2 colorpair
31 47 0.0 1 colorpair
32 46 0.0 0.2 colorpair
34 44 0.16 0.2 colorpair
35 43 0.0 1 colorpair
36 42 0.16 1 colorpair
55 107 0.0 1 colorpair
56 106 0.0 1 colorpair
57 105 0.0 1 colorpair
58 104 0.0 1 colorpair
59 103 0.16 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.16 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 25 32 gmark
13 cmark
25 cmark
28 51 2 gmark
30 48 20 gmark
30 cmark
32 46 2 gmark
33 45 8 gmark
33 cmark
34 44 2 gmark
44 cmark
42 cmark
59 cmark
92 cmark
77 82 4 gmark
77 cmark

% End Annotations
showpage
end
%%EOF
