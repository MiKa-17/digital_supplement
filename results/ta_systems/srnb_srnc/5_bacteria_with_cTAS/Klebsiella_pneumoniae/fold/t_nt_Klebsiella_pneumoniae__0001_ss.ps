%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:29:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGAAAUAUGCCCUUAUCGGGUUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAACUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUACGAAGCACGGAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[46.25068665 247.23132324]
[57.97561264 256.58685303]
[65.32118988 269.66519165]
[67.20883179 284.54592896]
[63.36136627 299.04409790]
[54.34373474 311.03085327]
[41.48004150 318.74612427]
[26.65911865 321.05703735]
[12.05719852 317.62426758]
[-0.18165205 308.95187378]
[-8.26034355 296.31323242]
[-10.99264336 281.56420898]
[-7.97761059 266.87100220]
[-18.63923645 277.42230225]
[-29.30086327 287.97357178]
[-39.96249008 298.52487183]
[-41.48344803 314.49566650]
[-54.99643326 323.14312744]
[-70.13542938 317.83370972]
[-75.28710938 302.64028931]
[-66.49952698 289.21798706]
[-50.51377869 287.86325073]
[-39.85215378 277.31195068]
[-29.19052696 266.76065063]
[-18.52890015 256.20938110]
[-9.51137066 244.22253418]
[-2.32886195 231.05395508]
[4.85364676 217.88537598]
[12.03615570 204.71679688]
[8.92524052 192.98522949]
[14.85494232 181.93725586]
[27.11176682 177.78706360]
[34.56667709 164.77076721]
[42.02158737 151.75445557]
[49.47649765 138.73814392]
[56.93140793 125.72183228]
[64.38632202 112.70552063]
[92.29669952 84.56419373]
[93.85428619 69.64527893]
[95.41186523 54.72636795]
[96.96944427 39.80745697]
[98.52702332 24.88854408]
[100.08460999 9.96963120]
[101.64218903 -4.94928122]
[88.34837341 1.99871004]
[74.54288483 -3.86715746]
[70.31641388 -18.25940895]
[78.75816345 -30.65847397]
[93.69790649 -32.00163651]
[104.21567535 -21.30777931]
[107.31400299 -35.98430634]
[110.41232300 -50.66083145]
[113.51064301 -65.33735657]
[116.60896301 -80.01388550]
[119.70729065 -94.69040680]
[122.80561066 -109.36693573]
[125.90393066 -124.04345703]
[129.00225830 -138.71998596]
[132.10057068 -153.39651489]
[130.80865479 -162.50599670]
[135.41903687 -168.34466553]
[138.82200623 -182.95356750]
[142.22499084 -197.56245422]
[145.17047119 -212.27041626]
[147.65559387 -227.06312561]
[150.14070129 -241.85583496]
[152.62582397 -256.64852905]
[155.11094666 -271.44125366]
[157.59606934 -286.23394775]
[160.08117676 -301.02667236]
[162.56629944 -315.81936646]
[151.87017822 -326.90533447]
[149.77723694 -341.98754883]
[156.88253784 -355.25326538]
[170.27642822 -361.71401978]
[172.76155090 -376.50674438]
[175.24667358 -391.29943848]
[169.00950623 -406.46618652]
[179.23860168 -419.28405762]
[195.41111755 -416.56713867]
[200.89016724 -401.11035156]
[190.03936768 -388.81433105]
[187.55426025 -374.02160645]
[185.06913757 -359.22891235]
[195.61657715 -348.74609375]
[197.99697876 -333.88681030]
[191.09053040 -320.31646729]
[177.35900879 -313.33425903]
[174.87388611 -298.54153442]
[172.38877869 -283.74884033]
[169.90365601 -268.95611572]
[167.41853333 -254.16342163]
[164.93341064 -239.37071228]
[162.44830322 -224.57800293]
[159.96318054 -209.78529358]
[161.75476074 -206.67761230]
[162.09194946 -202.53176880]
[160.49641418 -198.05888367]
[156.83387756 -194.15946960]
[153.43090820 -179.55058289]
[150.02792358 -164.94169617]
[146.77709961 -150.29818726]
[143.67877197 -135.62165833]
[140.58045959 -120.94513702]
[137.48213196 -106.26860809]
[134.38381958 -91.59208679]
[131.28549194 -76.91555786]
[128.18716431 -62.23903656]
[125.08884430 -47.56250763]
[121.99052429 -32.88598251]
[118.89220428 -18.20945930]
[116.56110382 -3.39170027]
[115.00351715 11.52721214]
[113.44593811 26.44612503]
[111.88835907 41.36503601]
[110.33078003 56.28394699]
[108.77319336 71.20285797]
[107.21561432 86.12177277]
[113.98372650 99.50805664]
[126.92178345 107.09796906]
[139.85984802 114.68787384]
[152.79789734 122.27778625]
[167.46746826 116.86135864]
[182.16908264 122.19018555]
[189.96110535 135.74815369]
[187.16435242 151.13360596]
[175.09939575 161.08200073]
[159.46292114 160.89602661]
[147.63798523 150.66346741]
[145.20799255 135.21583557]
[132.26992798 127.62593079]
[119.33187866 120.03601837]
[106.39382172 112.44611359]
[99.14602661 114.37469482]
[107.29362488 126.96900177]
[97.83333588 138.60957336]
[83.83917236 133.20925903]
[84.65042877 118.23184967]
[77.40262604 120.16043091]
[69.94771576 133.17674255]
[62.49280930 146.19305420]
[55.03789520 159.20936584]
[47.58298492 172.22567749]
[40.12807465 185.24197388]
[40.64608002 203.61891174]
[25.20473862 211.89930725]
[18.02223015 225.06788635]
[10.83972073 238.23646545]
[3.65721178 251.40504456]
[16.93953896 244.43513489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 25]
[14 24]
[15 23]
[16 22]
[26 149]
[27 148]
[28 147]
[29 146]
[32 144]
[33 143]
[34 142]
[35 141]
[36 140]
[37 139]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
[119 133]
[120 132]
[121 131]
[122 130]
] def

init

% Start Annotations
13 25 0.0 1 colorpair
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
26 149 0.0 1 colorpair
27 148 0.0 1 colorpair
28 147 0.0 1 colorpair
29 146 0.0 1 colorpair
32 144 0.0 1 colorpair
33 143 0.0 1 colorpair
34 142 0.0 1 colorpair
35 141 0.0 1 colorpair
36 140 0.0 1 colorpair
37 139 0.0 1 colorpair
38 118 0.0 1 colorpair
39 117 0.16 1 colorpair
40 116 0.0 1 colorpair
41 115 0.0 1 colorpair
42 114 0.0 1 colorpair
43 113 0.0 1 colorpair
44 112 0.0 1 colorpair
50 111 0.0 1 colorpair
51 110 0.0 1 colorpair
52 109 0.0 1 colorpair
53 108 0.0 1 colorpair
54 107 0.0 1 colorpair
55 106 0.0 1 colorpair
56 105 0.0 1 colorpair
57 104 0.0 1 colorpair
58 103 0.0 1 colorpair
59 102 0.0 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.0 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair
77 82 0.0 1 colorpair
119 133 0.0 1 colorpair
120 132 0.0 1 colorpair
121 131 0.0 1 colorpair
122 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
39 cmark

% End Annotations
showpage
end
%%EOF
