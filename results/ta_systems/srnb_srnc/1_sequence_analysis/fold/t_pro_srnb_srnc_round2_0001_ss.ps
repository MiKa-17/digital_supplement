%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 20:39:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_UGAC_____AAAUAUGCCCUUGUGGCAUUCAUAGUGCUGU______GUUUGACGGUGCUGGGAUUUACGUUGAUGGUCCGCGACUCGCUGUGUGAGUUGAAUAUCAAAGAGGGUAAUAC______UGAGUUUAAGGCAGUUCUCGCUUACGAAGCG_AAGAAG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50916290 91.92542267]
[62.55133057 90.77707672]
[47.64846420 89.05664825]
[32.82242584 86.76666260]
[18.09498405 83.91047668]
[3.48774886 80.49228668]
[-10.97784233 76.51710510]
[-25.28055763 71.99076843]
[-39.39940643 66.91992188]
[-53.31366730 61.31200409]
[-67.00291443 55.17524719]
[-80.44706726 48.51865768]
[-93.62638855 41.35200500]
[-106.52153015 33.68580627]
[-119.11357880 25.53131294]
[-131.38404846 16.90049553]
[-143.31492615 7.80601740]
[-154.88870239 -1.73877203]
[-166.08839417 -11.71986485]
[-176.89756775 -22.12261391]
[-187.30035400 -32.93174744]
[-197.28149414 -44.13140869]
[-206.82632446 -55.70515442]
[-215.92083740 -67.63600159]
[-224.55169678 -79.90643311]
[-232.70623779 -92.49845123]
[-240.37248230 -105.39356995]
[-247.53918457 -118.57286072]
[-254.19581604 -132.01699829]
[-260.33261108 -145.70622253]
[-265.94058228 -159.62046814]
[-271.01147461 -173.73928833]
[-275.53787231 -188.04199219]
[-279.51309204 -202.50756836]
[-282.93133545 -217.11479187]
[-285.78759766 -231.84222412]
[-288.07763672 -246.66825867]
[-289.79809570 -261.57110596]
[-290.94650269 -276.52893066]
[-291.52114868 -291.51977539]
[-291.52114868 -306.52163696]
[-290.94656372 -321.51245117]
[-289.79818726 -336.47027588]
[-288.07775879 -351.37316895]
[-285.78775024 -366.19918823]
[-282.93154907 -380.92663574]
[-279.51333618 -395.53384399]
[-275.53814697 -409.99945068]
[-271.01177979 -424.30215454]
[-265.94091797 -438.42098999]
[-260.33297729 -452.33523560]
[-254.19621277 -466.02450562]
[-247.53961182 -479.46862793]
[-240.37294006 -492.64794922]
[-232.70672607 -505.54309082]
[-224.55221558 -518.13513184]
[-215.92138672 -530.40557861]
[-206.82688904 -542.33642578]
[-197.28208923 -553.91021729]
[-187.30097961 -565.10992432]
[-176.89822388 -575.91906738]
[-166.08906555 -586.32183838]
[-154.88940430 -596.30297852]
[-143.31564331 -605.84777832]
[-131.38479614 -614.94226074]
[-119.11434174 -623.57312012]
[-106.52231598 -631.72766113]
[-93.62718964 -639.39385986]
[-80.44788361 -646.56054688]
[-67.00375366 -653.21716309]
[-53.31451416 -659.35394287]
[-39.40026855 -664.96191406]
[-25.28143120 -670.03277588]
[-10.97872734 -674.55914307]
[3.48685431 -678.53436279]
[18.09408188 -681.95257568]
[32.82151794 -684.80883789]
[47.64754868 -687.09881592]
[62.55041122 -688.81933594]
[77.50823975 -689.96771240]
[92.49907684 -690.54229736]
[107.50092316 -690.54229736]
[122.49176025 -689.96771240]
[137.44958496 -688.81933594]
[152.35244751 -687.09881592]
[167.17848206 -684.80883789]
[181.90591431 -681.95257568]
[196.51315308 -678.53436279]
[210.97872925 -674.55914307]
[225.28143311 -670.03277588]
[239.40026855 -664.96191406]
[253.31451416 -659.35394287]
[267.00375366 -653.21716309]
[280.44787598 -646.56054688]
[293.62719727 -639.39385986]
[306.52230835 -631.72766113]
[319.11434937 -623.57312012]
[331.38479614 -614.94226074]
[343.31564331 -605.84777832]
[354.88940430 -596.30297852]
[366.08908081 -586.32183838]
[376.89822388 -575.91906738]
[387.30099487 -565.10992432]
[397.28207397 -553.91021729]
[406.82690430 -542.33642578]
[415.92138672 -530.40557861]
[424.55221558 -518.13513184]
[432.70672607 -505.54309082]
[440.37292480 -492.64794922]
[447.53961182 -479.46862793]
[454.19619751 -466.02450562]
[460.33297729 -452.33523560]
[465.94091797 -438.42098999]
[471.01177979 -424.30215454]
[475.53814697 -409.99945068]
[479.51333618 -395.53384399]
[482.93154907 -380.92663574]
[485.78775024 -366.19918823]
[488.07775879 -351.37316895]
[489.79818726 -336.47027588]
[490.94656372 -321.51245117]
[491.52114868 -306.52163696]
[491.52114868 -291.51977539]
[490.94650269 -276.52893066]
[489.79809570 -261.57110596]
[488.07763672 -246.66825867]
[485.78759766 -231.84222412]
[482.93133545 -217.11479187]
[479.51309204 -202.50756836]
[475.53787231 -188.04199219]
[471.01147461 -173.73928833]
[465.94058228 -159.62046814]
[460.33261108 -145.70622253]
[454.19583130 -132.01699829]
[447.53918457 -118.57286072]
[440.37246704 -105.39356995]
[432.70623779 -92.49845123]
[424.55169678 -79.90643311]
[415.92083740 -67.63600159]
[406.82632446 -55.70515442]
[397.28149414 -44.13140869]
[387.30035400 -32.93174744]
[376.89758301 -22.12261391]
[366.08840942 -11.71986485]
[354.88870239 -1.73877203]
[343.31491089 7.80601740]
[331.38403320 16.90049553]
[319.11358643 25.53131294]
[306.52154541 33.68580627]
[293.62637329 41.35200500]
[280.44705200 48.51865768]
[267.00292969 55.17524719]
[253.31365967 61.31200409]
[239.39939880 66.91992188]
[225.28056335 71.99076843]
[210.97784424 76.51710510]
[196.51225281 80.49228668]
[181.90501404 83.91047668]
[167.17756653 86.76666260]
[152.35153198 89.05664825]
[137.44866943 90.77707672]
[122.49083710 91.92542267]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
