%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 20:21:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGAAAUAUGCCCUUAUCGGGUUGCUCGCCGUGUGUGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAGCUGAAUAUUCACAGGGGAAAUAC______AGUGGUGCAGGUAACUCUGGCC_UACGAAGCACGGAAG___\
) } def
/len { sequence length } bind def

/coor [
[77.80678558 368.34194946]
[65.46803284 367.03463745]
[53.20261383 365.16024780]
[41.03656769 362.72277832]
[28.99573326 359.72744751]
[17.10567474 356.18057251]
[5.39164162 352.08969116]
[-6.12148952 347.46350098]
[-17.40927124 342.31179810]
[-28.44773483 336.64556885]
[-39.21343994 330.47683716]
[-49.68352127 323.81866455]
[-59.83575439 316.68521118]
[-69.64857483 309.09164429]
[-79.10114288 301.05404663]
[-89.38672638 311.97222900]
[-90.34746552 327.98648071]
[-103.54933167 337.10186768]
[-118.86498260 332.32583618]
[-124.54556274 317.32217407]
[-116.23341370 303.60037231]
[-100.30490875 301.68664551]
[-90.01932526 290.76846313]
[-106.81980133 272.41088867]
[-121.85373688 252.58068848]
[-134.99272156 231.44721985]
[-146.12451172 209.19099426]
[-155.15403748 186.00212097]
[-162.00418091 162.07865906]
[-166.61640930 137.62495422]
[-168.95135498 112.84988403]
[-183.94837952 113.14811707]
[-198.94541931 113.44635010]
[-212.58903503 121.45649719]
[-225.46762085 113.97377014]
[-240.46466064 114.27200317]
[-252.57302856 124.79659271]
[-268.32418823 121.75027466]
[-275.63522339 107.46992493]
[-268.89770508 92.91020203]
[-253.28010559 89.24008179]
[-240.76289368 99.27497101]
[-225.76585388 98.97673798]
[-213.19493103 90.98791504]
[-199.24365234 98.44931030]
[-184.24661255 98.15107727]
[-169.24958801 97.85284424]
[-168.68138123 82.38562012]
[-167.22538757 66.97660065]
[-164.88639832 51.67669678]
[-161.67218018 36.53646469]
[-157.59332275 21.60593224]
[-152.66331482 6.93443394]
[-146.89843750 -7.42955303]
[-140.31774902 -21.43856621]
[-132.94299316 -35.04631424]
[-124.79854584 -48.20783997]
[-115.91129303 -60.87964630]
[-106.31062317 -73.01986694]
[-96.02825165 -84.58838654]
[-85.09815216 -95.54698181]
[-73.55644226 -105.85944366]
[-61.44125748 -115.49169159]
[-48.79263306 -124.41190338]
[-35.65235901 -132.59059143]
[-22.06385803 -140.00076294]
[-8.07202530 -146.61788940]
[6.27690315 -152.42015076]
[20.93551636 -157.38833618]
[35.85537720 -161.50605774]
[50.98719025 -164.75968933]
[66.28095245 -167.13848877]
[81.68612671 -168.63459778]
[97.15182495 -169.24308777]
[112.62692261 -168.96191406]
[128.06030273 -167.79202271]
[143.40097046 -165.73728943]
[158.59822083 -162.80448914]
[173.60185242 -159.00331116]
[188.36228943 -154.34632874]
[202.83074951 -148.84892273]
[216.95942688 -142.52925110]
[223.84889221 -155.85350037]
[230.73835754 -169.17773438]
[237.62780762 -182.50196838]
[228.80419922 -195.00807190]
[226.81465149 -210.18371582]
[232.11634827 -224.54165649]
[243.49099731 -234.78256226]
[258.32479858 -238.55311584]
[273.20904541 -234.98689270]
[284.72341919 -224.90338135]
[290.22204590 -210.61968994]
[288.44137573 -195.41812134]
[279.79055786 -182.79187012]
[266.25753784 -175.64236450]
[250.95204163 -175.61251831]
[244.06259155 -162.28826904]
[237.17312622 -148.96403503]
[230.28367615 -135.63980103]
[241.00108337 -129.38752747]
[251.41909790 -122.64817047]
[261.51556396 -115.43600464]
[271.26904297 -107.76636505]
[280.65884399 -99.65553284]
[289.66500854 -91.12073517]
[298.26840210 -82.18009186]
[306.45080566 -72.85258484]
[314.19479370 -63.15802383]
[321.48394775 -53.11699677]
[328.30276489 -42.75082397]
[334.63677979 -32.08152390]
[340.47256470 -21.13174629]
[345.79766846 -9.92474461]
[350.60086060 1.51568246]
[354.87188721 13.16524124]
[358.60168457 24.99919319]
[361.78234863 36.99240875]
[364.40710449 49.11942291]
[366.47039795 61.35448074]
[367.96783447 73.67160797]
[368.89627075 86.04463959]
[369.25366211 98.44730377]
[369.03930664 110.85326385]
[368.25366211 123.23617554]
[366.89837646 135.56974792]
[364.97631836 147.82778931]
[362.49157715 159.98426819]
[359.44946289 172.01336670]
[355.85638428 183.88955688]
[351.72000122 195.58760071]
[347.04910278 207.08265686]
[341.85357666 218.35032654]
[336.14447021 229.36668396]
[329.93392944 240.10832214]
[323.23510742 250.55244446]
[316.06225586 260.67687988]
[308.43057251 270.46008301]
[300.35629272 279.88134766]
[291.85656738 288.92062378]
[282.94943237 297.55871582]
[273.65380859 305.77731323]
[263.98944092 313.55892944]
[253.97682190 320.88705444]
[243.63723755 327.74612427]
[232.99263000 334.12158203]
[222.06562805 339.99984741]
[210.87940979 345.36849976]
[199.45773315 350.21612549]
[187.82487488 354.53240967]
[176.00550842 358.30816650]
[164.02474976 361.53543091]
[151.90802002 364.20730591]
[139.68107605 366.31814575]
[127.36987305 367.86346436]
[115.00054169 368.83996582]
[102.59935760 369.24560547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 23]
[16 22]
[31 47]
[32 46]
[33 45]
[35 43]
[36 42]
[82 100]
[83 99]
[84 98]
[85 97]
] def

init

% Start Annotations
15 23 0.32 0.6 colorpair
16 22 0.32 0.2 colorpair
31 47 0.32 0.6 colorpair
32 46 0.32 0.6 colorpair
35 43 0.0 0.6 colorpair
82 100 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 23 1 gmark
15 cmark
23 cmark
16 22 2 gmark
16 cmark
22 cmark
31 47 1 gmark
31 cmark
47 cmark
32 46 1 gmark
32 cmark
46 cmark
33 45 6 gmark
33 cmark
45 cmark
35 43 1 gmark
36 42 3 gmark
36 cmark
42 cmark
100 cmark
83 99 10 gmark
99 cmark
84 98 5 gmark
84 cmark
98 cmark
85 97 9 gmark
85 cmark
97 cmark

% End Annotations
showpage
end
%%EOF
