%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 20:21:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGAAAUAUGCCCUUAUCGGGUUGCUCGCCGUGUGUGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAGCUGAAUAUUCACAGGGGAAAUAC______AGUGGUGCAGGUAACUCUGGCCUACGAA_GCACGGAAG\
) } def
/len { sequence length } bind def

/coor [
[78.97196198 361.79119873]
[66.63068390 360.50585938]
[54.36389160 358.63903809]
[42.19895935 356.19494629]
[30.16303825 353.17901611]
[18.28299904 349.59796143]
[6.58535576 345.45980835]
[-4.90378284 340.77377319]
[-16.15877151 335.55032349]
[-27.15448761 329.80111694]
[-37.86639023 323.53897095]
[-48.27056885 316.77789307]
[-58.34380341 309.53292847]
[-68.06360626 301.82031250]
[-77.40827942 293.65719604]
[-87.85243225 304.42379761]
[-89.04725647 320.42230225]
[-102.38100433 329.34365845]
[-117.62517548 324.34417725]
[-123.08573914 309.25903320]
[-114.57382202 295.66024780]
[-98.61903381 293.97967529]
[-88.17488861 283.21304321]
[-104.57401276 264.70059204]
[-119.15911102 244.72766113]
[-131.80084229 223.47138977]
[-142.38710022 201.12023926]
[-150.82403564 177.87243652]
[-157.03681946 153.93409729]
[-160.97036743 129.51750183]
[-162.58978271 104.83916473]
[-177.58901978 104.68715668]
[-192.58824158 104.53514099]
[-206.46611023 112.13219452]
[-219.11431885 104.26631927]
[-234.11355591 104.11430359]
[-246.53234863 114.27074432]
[-262.18499756 110.75305939]
[-269.06411743 96.25971222]
[-261.89266968 81.90876770]
[-246.17193604 78.70903015]
[-233.96154785 89.11507416]
[-218.96231079 89.26708221]
[-206.15728760 81.65916443]
[-192.43623352 89.53591156]
[-177.43699646 89.68792725]
[-162.43777466 89.83993530]
[-161.39242554 74.48892212]
[-159.44990540 59.22546387]
[-156.61688232 44.10195923]
[-152.90307617 29.17031097]
[-148.32125854 14.48176861]
[-142.88711548 0.08674623]
[-136.61933899 -13.96534729]
[-129.53941345 -27.62628174]
[-121.67165375 -40.84917068]
[-113.04306030 -53.58862686]
[-103.68324280 -65.80092621]
[-93.62433624 -77.44415283]
[-82.90085602 -88.47834778]
[-71.54961395 -98.86563873]
[-59.60956955 -108.57036591]
[-47.12170410 -117.55922699]
[-34.12887573 -125.80136871]
[-20.67568398 -133.26849365]
[-6.80830097 -139.93498230]
[7.42567539 -145.77796936]
[21.97739220 -150.77735901]
[36.79690170 -154.91603088]
[51.83333969 -158.17974854]
[67.03510284 -160.55734253]
[82.35000610 -162.04061890]
[97.72548676 -162.62452698]
[113.10877991 -162.30702209]
[128.44708252 -161.08921814]
[143.68774414 -158.97528076]
[158.77844238 -155.97247314]
[173.66741943 -152.09109497]
[188.30354309 -147.34449768]
[202.63658142 -141.74893188]
[216.61735535 -135.32362366]
[230.19786072 -128.09062195]
[238.00291443 -140.90003967]
[245.80795288 -153.70945740]
[253.61300659 -166.51887512]
[245.68624878 -179.61181641]
[244.76364136 -194.88949585]
[251.05715942 -208.84120178]
[263.12060547 -218.26094055]
[278.18191528 -220.98413086]
[292.78009033 -216.38499451]
[303.56057739 -205.52037048]
[308.04608154 -190.88690186]
[305.20590210 -175.84721375]
[295.69268799 -163.85734558]
[281.69247437 -157.67247009]
[266.42242432 -158.71382141]
[258.61737061 -145.90440369]
[250.81233215 -133.09498596]
[243.00727844 -120.28556824]
[253.25205994 -113.28530121]
[263.15475464 -105.80897522]
[272.69332886 -97.87326813]
[281.84640503 -89.49591064]
[290.59359741 -80.69557953]
[298.91537476 -71.49193573]
[306.79318237 -61.90550613]
[314.20941162 -51.95770264]
[321.14749146 -41.67071915]
[327.59201050 -31.06752396]
[333.52850342 -20.17177963]
[338.94372559 -9.00780487]
[343.82565308 2.39947844]
[348.16333008 14.02461052]
[351.94711304 25.84164429]
[355.16854858 37.82419968]
[357.82040405 49.94553757]
[359.89682007 62.17860031]
[361.39312744 74.49607849]
[362.30596924 86.87048340]
[362.63336182 99.27419281]
[362.37454224 111.67952728]
[361.53009033 124.05878448]
[360.10189819 136.38435364]
[358.09313965 148.62869263]
[355.50830078 160.76451111]
[352.35314941 172.76469421]
[348.63473511 184.60244751]
[344.36138916 196.25138855]
[339.54257202 207.68547058]
[334.18911743 218.87921143]
[328.31292725 229.80760193]
[321.92715454 240.44625854]
[315.04602051 250.77142334]
[307.68487549 260.76007080]
[299.86019897 270.38989258]
[291.58941650 279.63940430]
[282.89099121 288.48794556]
[273.78433228 296.91577148]
[264.28979492 304.90405273]
[254.42855835 312.43499756]
[244.22262573 319.49179077]
[233.69477844 326.05865479]
[222.86853027 332.12094116]
[211.76802063 337.66513062]
[200.41806030 342.67886353]
[188.84394836 347.15090942]
[177.07153320 351.07128906]
[165.12709045 354.43127441]
[153.03727722 357.22335815]
[140.82908630 359.44131470]
[128.52975464 361.08020020]
[116.16675568 362.13632202]
[103.76766968 362.60733032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 23]
[16 22]
[31 47]
[32 46]
[33 45]
[35 43]
[36 42]
[82 100]
[83 99]
[84 98]
[85 97]
] def

init

% Start Annotations
15 23 0.32 0.2 colorpair
31 47 0.32 0.2 colorpair
32 46 0.32 0.2 colorpair
35 43 0.0 0.6 colorpair
82 100 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 23 2 gmark
15 cmark
23 cmark
16 22 3 gmark
16 cmark
22 cmark
31 47 2 gmark
31 cmark
47 cmark
32 46 2 gmark
32 cmark
46 cmark
33 45 7 gmark
33 cmark
45 cmark
35 43 1 gmark
36 42 4 gmark
36 cmark
42 cmark
100 cmark
83 99 10 gmark
99 cmark
84 98 5 gmark
84 cmark
98 cmark
85 97 9 gmark
85 cmark
97 cmark

% End Annotations
showpage
end
%%EOF
