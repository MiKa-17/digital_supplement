%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Dec 19 21:22:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______CA_AAA_______UAUGCCCUUGUGGCAUUGAUCGUGCUGUGU______UUCACGGUGCUGGGAUUUACGUUGAUGGUGCGGGACUCGCUGUGUGAGUUGAGUAUCAAAGAGGGUAAUAC______GGAGGUUGAGGCAGUUCUCGCUUACGAAUCG_AAGAAG_______________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50712585 91.99336243]
[62.53991318 90.98064423]
[47.61544418 89.46299744]
[32.75074768 87.44215393]
[17.96278191 84.92042542]
[3.26842427 81.90068054]
[-11.31556129 78.38636780]
[-25.77253342 74.38150024]
[-40.08599854 69.89064789]
[-54.23962021 64.91893005]
[-68.21725464 59.47201920]
[-82.00294495 53.55613327]
[-95.58097076 47.17802429]
[-108.93582916 40.34496689]
[-122.05229187 33.06476212]
[-134.91539001 25.34570885]
[-147.51045227 17.19662094]
[-159.82308960 8.62679482]
[-171.83926392 -0.35399166]
[-183.54525757 -9.73549080]
[-194.92773438 -19.50699806]
[-205.97369385 -29.65736389]
[-216.67051697 -40.17500687]
[-227.00602722 -51.04792404]
[-236.96841431 -62.26371384]
[-246.54631042 -73.80957031]
[-255.72879028 -85.67233276]
[-264.50537109 -97.83845520]
[-272.86605835 -110.29405975]
[-280.80130005 -123.02493286]
[-288.30203247 -136.01654053]
[-295.35968018 -149.25407410]
[-301.96624756 -162.72242737]
[-308.11416626 -176.40621948]
[-313.79638672 -190.28985596]
[-319.00650024 -204.35746765]
[-323.73849487 -218.59303284]
[-327.98699951 -232.98030090]
[-331.74713135 -247.50283813]
[-335.01467896 -262.14410400]
[-337.78585815 -276.88735962]
[-340.05749512 -291.71578979]
[-341.82702637 -306.61248779]
[-343.09243774 -321.56045532]
[-343.85223389 -336.54263306]
[-344.10562134 -351.54193115]
[-343.85226440 -366.54122925]
[-343.09246826 -381.52340698]
[-341.82708740 -396.47137451]
[-340.05758667 -411.36807251]
[-337.78598022 -426.19653320]
[-335.01483154 -440.93978882]
[-331.74731445 -455.58105469]
[-327.98718262 -470.10360718]
[-323.73870850 -484.49087524]
[-319.00671387 -498.72644043]
[-313.79666138 -512.79406738]
[-308.11444092 -526.67767334]
[-301.96655273 -540.36151123]
[-295.36001587 -553.82989502]
[-288.30236816 -567.06738281]
[-280.80166626 -580.05902100]
[-272.86645508 -592.78991699]
[-264.50579834 -605.24554443]
[-255.72921753 -617.41168213]
[-246.54675293 -629.27447510]
[-236.96887207 -640.82031250]
[-227.00651550 -652.03613281]
[-216.67102051 -662.90905762]
[-205.97421265 -673.42669678]
[-194.92826843 -683.57708740]
[-183.54582214 -693.34863281]
[-171.83982849 -702.73016357]
[-159.82366943 -711.71093750]
[-147.51104736 -720.28082275]
[-134.91600037 -728.42993164]
[-122.05291748 -736.14898682]
[-108.93646240 -743.42919922]
[-95.58161163 -750.26226807]
[-82.00360107 -756.64044189]
[-68.21791840 -762.55633545]
[-54.24029160 -768.00323486]
[-40.08667755 -772.97497559]
[-25.77322197 -777.46588135]
[-11.31625557 -781.47076416]
[3.26772428 -784.98510742]
[17.96207809 -788.00488281]
[32.75003815 -790.52661133]
[47.61473083 -792.54748535]
[62.53919601 -794.06518555]
[77.50640869 -795.07788086]
[92.49928284 -795.58459473]
[107.50071716 -795.58459473]
[122.49359131 -795.07788086]
[137.46080017 -794.06518555]
[152.38526917 -792.54748535]
[167.24996948 -790.52661133]
[182.03791809 -788.00488281]
[196.73226929 -784.98510742]
[211.31625366 -781.47076416]
[225.77322388 -777.46588135]
[240.08668518 -772.97497559]
[254.24029541 -768.00323486]
[268.21792603 -762.55633545]
[282.00360107 -756.64044189]
[295.58160400 -750.26226807]
[308.93646240 -743.42919922]
[322.05291748 -736.14898682]
[334.91601562 -728.42993164]
[347.51104736 -720.28082275]
[359.82366943 -711.71093750]
[371.83984375 -702.73016357]
[383.54580688 -693.34863281]
[394.92828369 -683.57708740]
[405.97421265 -673.42669678]
[416.67102051 -662.90905762]
[427.00650024 -652.03613281]
[436.96887207 -640.82031250]
[446.54675293 -629.27447510]
[455.72921753 -617.41168213]
[464.50579834 -605.24554443]
[472.86645508 -592.78991699]
[480.80166626 -580.05902100]
[488.30236816 -567.06738281]
[495.36001587 -553.82989502]
[501.96655273 -540.36151123]
[508.11444092 -526.67767334]
[513.79663086 -512.79406738]
[519.00671387 -498.72644043]
[523.73870850 -484.49087524]
[527.98718262 -470.10360718]
[531.74731445 -455.58105469]
[535.01483154 -440.93978882]
[537.78594971 -426.19653320]
[540.05761719 -411.36807251]
[541.82708740 -396.47137451]
[543.09246826 -381.52340698]
[543.85229492 -366.54122925]
[544.10565186 -351.54193115]
[543.85223389 -336.54263306]
[543.09240723 -321.56045532]
[541.82702637 -306.61248779]
[540.05749512 -291.71578979]
[537.78582764 -276.88735962]
[535.01464844 -262.14410400]
[531.74713135 -247.50283813]
[527.98699951 -232.98030090]
[523.73846436 -218.59303284]
[519.00646973 -204.35746765]
[513.79638672 -190.28985596]
[508.11416626 -176.40621948]
[501.96624756 -162.72242737]
[495.35968018 -149.25407410]
[488.30203247 -136.01654053]
[480.80130005 -123.02493286]
[472.86605835 -110.29405975]
[464.50537109 -97.83845520]
[455.72879028 -85.67233276]
[446.54629517 -73.80957031]
[436.96841431 -62.26371384]
[427.00601196 -51.04792404]
[416.67053223 -40.17500687]
[405.97369385 -29.65736389]
[394.92773438 -19.50699806]
[383.54525757 -9.73549080]
[371.83926392 -0.35399166]
[359.82308960 8.62679482]
[347.51043701 17.19662094]
[334.91540527 25.34570885]
[322.05230713 33.06476212]
[308.93582153 40.34496689]
[295.58096313 47.17802429]
[282.00296021 53.55613327]
[268.21725464 59.47201920]
[254.23962402 64.91893005]
[240.08599854 69.89064789]
[225.77253723 74.38150024]
[211.31556702 78.38636780]
[196.73158264 81.90068054]
[182.03721619 84.92042542]
[167.24925232 87.44215393]
[152.38455200 89.46299744]
[137.46008301 90.98064423]
[122.49287415 91.99336243]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
