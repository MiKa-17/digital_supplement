%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:21:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__GACGAAAUAUGCCCUUAUCGGGUUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAACUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUA_CGAAGCACGGAA_\
) } def
/len { sequence length } bind def

/coor [
[104.12665558 233.21968079]
[95.51052856 233.20794678]
[86.91315460 232.63952637]
[78.37047577 231.51681519]
[69.91818237 229.84449768]
[61.59160614 227.62956238]
[53.42553329 224.88127136]
[45.45409775 221.61108398]
[37.71060944 217.83268738]
[30.22742844 213.56187439]
[23.03582764 208.81648254]
[16.16585922 203.61634827]
[9.64623260 197.98320007]
[-1.12676179 208.42076111]
[-11.89975643 218.85830688]
[-22.67275238 229.29586792]
[-24.36310577 245.24961853]
[-37.96709442 253.75321960]
[-53.04890060 248.28341675]
[-58.03905106 233.03619385]
[-49.10953522 219.70790100]
[-33.11030960 218.52287292]
[-22.33731270 208.08531189]
[-11.56431770 197.64776611]
[-0.79132324 187.21020508]
[-10.64031506 174.31845093]
[-18.85005379 160.32557678]
[-25.29890251 145.43893433]
[-29.89131355 129.87904358]
[-32.55924988 113.87648010]
[-33.26317596 97.66831207]
[-48.22235107 96.56238556]
[-63.18152618 95.45645142]
[-78.14070129 94.35051727]
[-93.09987640 93.24458313]
[-108.05905151 92.13864899]
[-121.09882355 101.48445129]
[-136.49597168 96.97808838]
[-142.43913269 82.07646179]
[-134.36920166 68.21082306]
[-118.47676086 66.01770782]
[-106.95311737 77.17947388]
[-91.99394226 78.28540802]
[-77.03476715 79.39134216]
[-62.07559204 80.49727631]
[-47.11642075 81.60321045]
[-32.15724564 82.70913696]
[-25.76846504 55.87739563]
[-13.99369621 30.93518829]
[2.66281223 8.95065689]
[23.48775101 -9.13471889]
[47.58930206 -22.54643822]
[73.93531799 -30.71014977]
[101.39755249 -33.27624512]
[128.79992676 -30.13483429]
[132.86012268 -44.57487869]
[136.92031860 -59.01491928]
[140.98049927 -73.45496368]
[145.04069519 -87.89500427]
[141.32765198 -103.27433777]
[152.22113037 -113.43216705]
[156.28131104 -127.87221527]
[160.34150696 -142.31225586]
[163.94305420 -156.87347412]
[167.08235168 -171.54129028]
[170.22164917 -186.20910645]
[173.36094666 -200.87692261]
[176.50022888 -215.54473877]
[179.63952637 -230.21253967]
[182.77882385 -244.88035583]
[185.91812134 -259.54818726]
[175.72462463 -271.09802246]
[174.30323792 -286.25827026]
[181.99037170 -299.19549561]
[195.65785217 -305.05535889]
[198.79714966 -319.72317505]
[201.93644714 -334.39099121]
[196.37866211 -349.81964111]
[207.16664124 -362.17080688]
[223.20260620 -358.73870850]
[227.99015808 -343.05395508]
[216.60426331 -331.25170898]
[213.46496582 -316.58389282]
[210.32566833 -301.91607666]
[220.39739990 -290.97540283]
[222.11587524 -276.02511597]
[214.61386108 -262.77471924]
[200.58593750 -256.40887451]
[197.44664001 -241.74107361]
[194.30734253 -227.07325745]
[191.16804504 -212.40544128]
[188.02876282 -197.73762512]
[184.88946533 -183.06980896]
[181.75016785 -168.40199280]
[178.61087036 -153.73417664]
[180.26527405 -150.54806519]
[180.41795349 -146.38737488]
[178.62135315 -141.98593140]
[174.78155518 -138.25205994]
[170.72135925 -123.81201935]
[166.66116333 -109.37197876]
[170.66462708 -95.02549744]
[159.48074341 -83.83481598]
[155.42054749 -69.39477539]
[151.36035156 -54.95473099]
[147.30017090 -40.51468658]
[143.23997498 -26.07464409]
[151.29548645 -23.01741600]
[159.13662720 -19.44609833]
[166.73063660 -15.37561512]
[174.04579163 -10.82297707]
[181.05149841 -5.80721092]
[187.71849060 -0.34927657]
[194.01890564 5.52801752]
[199.92642212 11.80010986]
[205.41635132 18.44079018]
[210.46572876 25.42230415]
[215.05348206 32.71548080]
[219.16043091 40.28983688]
[222.76939392 48.11372375]
[225.86531067 56.15444183]
[228.43524170 64.37839508]
[230.46844482 72.75120544]
[231.95640564 81.23789215]
[232.89292908 89.80297852]
[233.27409363 98.41068268]
[233.09831238 107.02503204]
[232.36630249 115.61002350]
[231.08114624 124.12977600]
[229.24818420 132.54869080]
[226.87510681 140.83158875]
[223.97181702 148.94384766]
[220.55044556 156.85157776]
[216.62528992 164.52171326]
[212.21276855 171.92221069]
[207.33129883 179.02215576]
[202.00129700 185.79187012]
[196.24504089 192.20304871]
[190.08656311 198.22892761]
[183.55162048 203.84429932]
[176.66751099 209.02569580]
[169.46301270 213.75148010]
[161.96823120 218.00190735]
[154.21447754 221.75918579]
[146.23417664 225.00764465]
[138.06063843 227.73370361]
[129.72805786 229.92594910]
[121.27124786 231.57524109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 25]
[14 24]
[15 23]
[16 22]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
] def

init

% Start Annotations
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
31 47 0.0 1 colorpair
32 46 0.16 0.2 colorpair
34 44 0.16 0.2 colorpair
35 43 0.0 1 colorpair
36 42 0.16 1 colorpair
55 107 0.0 1 colorpair
56 106 0.0 1 colorpair
57 105 0.0 1 colorpair
58 104 0.0 1 colorpair
59 103 0.16 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.16 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 25 32 gmark
13 cmark
25 cmark
32 46 2 gmark
32 cmark
33 45 8 gmark
33 cmark
34 44 2 gmark
44 cmark
42 cmark
59 cmark
92 cmark
77 82 4 gmark
77 cmark

% End Annotations
showpage
end
%%EOF
