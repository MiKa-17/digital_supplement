%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sat Jan 11 16:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGAAAUAUGCCCUUAUCGGGUUGCUCGCCGUGUGCGCCACGGUGUUGUGUUUUUCACUGAUAUUCAGGGAACGGUUAUGUGAACUGAAUAUUCACAGGGGAAAUACAGUGGUGCAGGUAACUCUGGCCUACGAAGCACGGAAGUAA__\
) } def
/len { sequence length } bind def

/coor [
[95.60681915 314.82354736]
[85.87310028 303.41061401]
[78.45558929 290.37295532]
[73.61817169 276.17437744]
[71.53294373 261.32003784]
[72.27408600 246.33834839]
[75.81736755 231.75616455]
[79.96652222 217.34143066]
[84.11567688 202.92669678]
[88.26482391 188.51196289]
[92.41397858 174.09722900]
[96.56313324 159.68249512]
[100.71228790 145.26777649]
[90.16027069 155.92868042]
[79.60825348 166.58958435]
[69.05623627 177.25050354]
[67.70040894 193.23616028]
[54.27751541 202.02281189]
[39.08445358 196.87011719]
[33.77603912 181.73074341]
[42.42443466 168.21835327]
[58.39532852 166.69848633]
[68.94734192 156.03756714]
[79.49935913 145.37666321]
[90.05137634 134.71575928]
[87.27040863 127.75039673]
[75.74011993 137.34480286]
[63.05234909 129.34352112]
[66.74146271 114.80424500]
[81.70847321 113.81967926]
[78.92749786 106.85432434]
[63.93461609 106.39239502]
[48.94173050 105.93047333]
[33.94884491 105.46854401]
[18.95595741 105.00662231]
[3.96307206 104.54469299]
[-8.66294003 114.44233704]
[-24.23955727 110.60195160]
[-30.81772995 95.96955109]
[-23.35124969 81.76985931]
[-7.56775904 78.89566803]
[4.42499781 89.55180359]
[19.41788292 90.01373291]
[34.41077042 90.47566223]
[49.40365601 90.93758392]
[64.39653778 91.39951324]
[79.38942719 91.86143494]
[64.57707977 89.49620819]
[54.31191254 78.55882263]
[52.88974380 63.62639618]
[60.90571594 50.94790268]
[75.00527954 45.82909393]
[89.28800201 50.41210175]
[97.77678680 62.77901459]
[96.91873932 77.75565338]
[99.67498016 63.01105499]
[102.43122864 48.26645660]
[105.18746948 33.52186203]
[107.94371033 18.77726555]
[102.87392426 3.79034138]
[112.81811523 -7.29849958]
[115.57435608 -22.04309654]
[118.33060455 -36.78769302]
[120.63147736 -51.61017609]
[122.47480011 -66.49648285]
[124.31812286 -81.38278961]
[126.16145325 -96.26909637]
[128.00477600 -111.15540314]
[129.84809875 -126.04170990]
[131.69142151 -140.92802429]
[133.53474426 -155.81433105]
[122.36938477 -166.42756653]
[119.62641907 -181.40519714]
[126.15161133 -194.96565247]
[139.25369263 -201.99938965]
[141.09701538 -216.88569641]
[142.94033813 -231.77200317]
[136.05337524 -246.65493774]
[145.71879578 -259.90301514]
[161.99365234 -257.88775635]
[168.13575745 -242.68228149]
[157.82664490 -229.92868042]
[155.98332214 -215.04237366]
[154.13999939 -200.15605164]
[165.13075256 -190.13899231]
[168.15127563 -175.39653015]
[161.83790588 -161.54031372]
[148.42105103 -153.97100830]
[146.57772827 -139.08470154]
[144.73440552 -124.19838715]
[142.89108276 -109.31208038]
[141.04776001 -94.42577362]
[139.20443726 -79.53946686]
[137.36111450 -64.65316010]
[135.51777649 -49.76684952]
[137.43940735 -46.74119568]
[137.95532227 -42.61767578]
[136.55827332 -38.08403778]
[133.07519531 -34.03144836]
[130.31895447 -19.28685379]
[127.56271362 -4.54225683]
[132.82963562 9.39003468]
[122.68830872 21.53350830]
[119.93206787 36.27810287]
[117.17581940 51.02270126]
[114.41957855 65.76729584]
[111.66333771 80.51189423]
[121.15110016 68.89370728]
[127.22364807 55.17786789]
[139.59405518 46.69418716]
[154.57658386 45.97037888]
[167.70718384 53.22210312]
[175.07357788 66.28870392]
[174.48097229 81.27699280]
[166.10592651 93.72121429]
[152.44378662 99.91360474]
[137.56452942 98.00887299]
[122.71269226 100.11193848]
[136.75466919 105.38668060]
[150.79664612 110.66141510]
[164.83862305 115.93615723]
[180.91972351 112.72209167]
[191.53900146 125.21861267]
[185.77224731 140.57037354]
[169.55181885 142.98480225]
[159.56388855 129.97813416]
[145.52191162 124.70339203]
[131.47993469 119.42864990]
[117.43795776 114.15391541]
[127.23210144 125.51501465]
[137.02624512 136.87611389]
[146.82040405 148.23722839]
[156.61454773 159.59832764]
[166.40869141 170.95942688]
[176.20283508 182.32052612]
[189.91627502 188.39851379]
[202.24447632 196.94342041]
[212.74885559 207.65126038]
[221.05572510 220.14109802]
[226.86953735 233.96858215]
[229.98348999 248.64181519]
[230.28677368 263.63873291]
[227.76860046 278.42587280]
[222.51858521 292.47708130]
[214.72346497 305.29257202]
[204.66058350 316.41635132]
[192.68794250 325.45269775]
[179.23144531 332.08013916]
[164.76985168 336.06289673]
[149.81764221 337.25927734]
[134.90675354 335.62670898]
[120.56764221 331.22329712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 25]
[14 24]
[15 23]
[16 22]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% Start Annotations
14 24 0.0 1 colorpair
15 23 0.0 1 colorpair
16 22 0.0 1 colorpair
31 47 0.0 1 colorpair
32 46 0.16 0.2 colorpair
34 44 0.16 0.2 colorpair
35 43 0.0 1 colorpair
36 42 0.16 1 colorpair
55 107 0.0 1 colorpair
56 106 0.0 1 colorpair
57 105 0.0 1 colorpair
58 104 0.0 1 colorpair
59 103 0.16 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 95 0.0 1 colorpair
65 94 0.0 1 colorpair
66 93 0.0 1 colorpair
67 92 0.16 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
13 25 32 gmark
13 cmark
25 cmark
32 46 2 gmark
32 cmark
33 45 8 gmark
33 cmark
34 44 2 gmark
44 cmark
42 cmark
59 cmark
92 cmark
77 82 4 gmark
77 cmark
118 129 3 gmark
119 128 4 gmark
119 cmark
120 127 3 gmark
120 cmark
127 cmark
121 126 6 gmark
121 cmark
126 cmark

% End Annotations
showpage
end
%%EOF
