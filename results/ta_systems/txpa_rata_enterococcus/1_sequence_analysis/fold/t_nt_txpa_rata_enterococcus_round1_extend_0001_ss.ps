%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 21:39:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GU_GACUGUCUUUGAAGCAUUGAUGCUUGCGAUUGCUUUCGCAACAUUAAUUGUCAAAAUCAGUAAUAAAAACGACAAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[165.71801758 289.72039795]
[166.50903320 274.67639160]
[170.62832642 260.18572998]
[177.86927795 246.97526550]
[187.86866760 235.70762634]
[179.14079285 223.50828552]
[170.41290283 211.30892944]
[161.68502808 199.10958862]
[146.99494934 196.93309021]
[137.96984863 184.68554688]
[140.35237122 169.29199219]
[131.62448120 157.09265137]
[122.89659882 144.89329529]
[114.16871643 132.69395447]
[105.44082642 120.49460602]
[92.64384460 119.88764954]
[82.53211212 112.02101135]
[78.79676819 99.76628113]
[82.80133820 87.59687042]
[74.52481842 75.08689880]
[66.24830627 62.57693481]
[57.97179031 50.06696701]
[49.69527435 37.55699921]
[41.41875839 25.04703331]
[33.14223862 12.53706551]
[25.61706352 6.94189930]
[24.80165863 -0.58438849]
[16.98755264 -13.38828468]
[9.17344856 -26.19218063]
[1.35934329 -38.99607849]
[-6.45476198 -51.79997253]
[-14.26886654 -64.60386658]
[-29.68674088 -68.07730103]
[-38.06200027 -81.47993469]
[-34.42575455 -96.86022186]
[-20.93532372 -105.09331512]
[-5.59433889 -101.29466248]
[2.49566340 -87.71794128]
[-1.46497059 -72.41797638]
[6.34913445 -59.61407852]
[14.16323948 -46.81018448]
[21.97734451 -34.00628662]
[29.79145050 -21.20239067]
[37.60555649 -8.39849377]
[45.65220642 4.26054955]
[53.92872238 16.77051735]
[62.20523834 29.28048515]
[70.48175812 41.79045105]
[78.75827026 54.30041885]
[87.03479004 66.81038666]
[95.31130219 79.32035065]
[111.46130371 82.15987396]
[120.75730133 95.66800690]
[117.64017487 111.76672363]
[126.36805725 123.96607208]
[135.09594727 136.16542053]
[143.82382202 148.36476135]
[152.55171204 160.56411743]
[167.89004517 163.27947998]
[176.56758118 175.77568054]
[173.88436890 190.38169861]
[182.61225891 202.58105469]
[191.34013367 214.78039551]
[200.06802368 226.97973633]
[213.96076965 221.15402222]
[228.80165100 218.56629944]
[243.84622192 219.34637451]
[258.33987427 223.45513916]
[271.55560303 230.68647766]
[282.83050537 240.67768860]
[291.59906006 252.92759705]
[297.42141724 266.82177734]
[300.00552368 281.66326904]
[299.22180176 296.70764160]
[295.10952759 311.20028687]
[287.87500000 324.41427612]
[277.88104248 335.68676758]
[265.62902832 344.45233154]
[251.73344421 350.27133179]
[236.89131165 352.85186768]
[221.84712219 352.06448364]
[207.35546875 347.94869995]
[194.14324951 340.71096802]
[182.87318420 330.71429443]
[174.11056519 318.46014404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 64]
[6 63]
[7 62]
[8 61]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
] def

init

% Start Annotations
5 64 0.0 1 colorpair
6 63 0.0 0.6 colorpair
7 62 0.0 1 colorpair
8 61 0.0 1 colorpair
11 58 0.0 0.6 colorpair
12 57 0.0 0.6 colorpair
13 56 0.0 0.6 colorpair
14 55 0.16 0.6 colorpair
15 54 0.0 0.6 colorpair
19 51 0.0 1 colorpair
20 50 0.0 0.6 colorpair
21 49 0.0 1 colorpair
22 48 0.16 1 colorpair
23 47 0.16 1 colorpair
24 46 0.16 1 colorpair
25 45 0.0 0.6 colorpair
27 44 0.0 0.6 colorpair
28 43 0.0 0.6 colorpair
29 42 0.0 1 colorpair
30 41 0.16 1 colorpair
31 40 0.16 1 colorpair
32 39 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 63 1 gmark
11 58 1 gmark
12 57 1 gmark
13 56 1 gmark
14 55 1 gmark
55 cmark
15 54 1 gmark
20 50 1 gmark
22 cmark
23 cmark
46 cmark
25 45 1 gmark
27 44 1 gmark
28 43 1 gmark
30 cmark
41 cmark
31 cmark
40 cmark
32 cmark

% End Annotations
showpage
end
%%EOF
