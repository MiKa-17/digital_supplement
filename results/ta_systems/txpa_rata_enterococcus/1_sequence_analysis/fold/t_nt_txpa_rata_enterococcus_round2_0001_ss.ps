%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 21:40:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACUGUCUUUGAAGCAUUGAUGCUUGCGAUUGCUUUCGCAACAUUAAUUGUCAAAAUCAGUAAUAAAAACGACAAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[174.85569763 271.84417725]
[177.96479797 257.09866333]
[184.39118958 243.46789551]
[193.78829956 231.68693542]
[184.52912903 219.88575745]
[175.26995850 208.08457947]
[166.01078796 196.28341675]
[151.23878479 194.75909424]
[141.68055725 182.92292786]
[143.37954712 167.43902588]
[134.12037659 155.63784790]
[124.86120605 143.83668518]
[115.60203552 132.03550720]
[106.34285736 120.23432922]
[93.52885437 120.19367218]
[83.07789612 112.77898407]
[78.80629730 100.69785309]
[82.27390289 88.36188507]
[73.45713043 76.22663116]
[64.64035034 64.09137726]
[55.82357025 51.95612335]
[47.00679016 39.82086945]
[38.19001389 27.68561363]
[29.37323380 15.55035782]
[21.60636520 10.28720379]
[20.46470070 2.79981351]
[12.10235977 -9.65294647]
[3.74001789 -22.10570717]
[-4.62232351 -34.55846786]
[-12.98466492 -47.01122665]
[-21.34700775 -59.46398926]
[-36.90108109 -62.26512527]
[-45.85002899 -75.29170990]
[-42.88460159 -90.81529999]
[-29.76413345 -99.62602234]
[-14.27276516 -96.49663544]
[-5.60125113 -83.28374481]
[-8.89424610 -67.82633209]
[-0.53190482 -55.37356949]
[7.83043671 -42.92081070]
[16.19277763 -30.46804810]
[24.55512047 -18.01528931]
[32.91746140 -5.56252813]
[41.50848770 6.73357916]
[50.32526779 18.86883354]
[59.14204788 31.00408936]
[67.95882416 43.13934326]
[76.77560425 55.27459717]
[85.59238434 67.40985107]
[94.40916443 79.54510498]
[110.66613770 81.67259979]
[120.54669189 94.75656891]
[118.14403534 110.97515869]
[127.40320587 122.77632904]
[136.66238403 134.57749939]
[145.92155457 146.37867737]
[155.18072510 158.17985535]
[170.62419128 160.21382141]
[179.84620667 172.31378174]
[177.81196594 187.02423096]
[187.07113647 198.82540894]
[196.33030701 210.62658691]
[205.58947754 222.42776489]
[219.26800537 216.10362244]
[234.03639221 213.10502625]
[249.09819031 213.59370422]
[263.64114380 217.54325867]
[276.88098145 224.74073792]
[288.10366821 234.79795837]
[296.70401001 247.17257690]
[302.21817017 261.19723511]
[304.34881592 276.11557007]
[302.98098755 291.12310791]
[298.18850708 305.41046143]
[290.22979736 318.20715332]
[279.53405762 328.82308960]
[266.67810059 336.68576050]
[252.35525513 341.37112427]
[237.33792114 342.62649536]
[222.43594360 340.38421631]
[208.45298767 334.76516724]
[196.14312744 326.07241821]
[186.17022705 314.77471924]
[179.07209778 301.48135376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
] def

init

% Start Annotations
4 63 0.0 0.6 colorpair
5 62 0.0 0.6 colorpair
6 61 0.0 0.6 colorpair
7 60 0.0 0.6 colorpair
10 57 0.0 0.6 colorpair
11 56 0.0 0.6 colorpair
12 55 0.0 0.6 colorpair
13 54 0.16 0.6 colorpair
14 53 0.0 0.6 colorpair
18 50 0.0 0.6 colorpair
19 49 0.0 0.6 colorpair
20 48 0.0 0.6 colorpair
21 47 0.0 0.6 colorpair
22 46 0.0 0.6 colorpair
23 45 0.16 0.6 colorpair
24 44 0.0 0.6 colorpair
26 43 0.0 0.6 colorpair
27 42 0.0 0.6 colorpair
28 41 0.0 0.6 colorpair
29 40 0.0 0.6 colorpair
30 39 0.0 0.6 colorpair
31 38 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 63 1 gmark
5 62 1 gmark
6 61 1 gmark
7 60 1 gmark
10 57 1 gmark
11 56 1 gmark
12 55 1 gmark
13 54 1 gmark
54 cmark
14 53 1 gmark
18 50 1 gmark
19 49 1 gmark
20 48 1 gmark
21 47 1 gmark
22 46 1 gmark
23 45 1 gmark
45 cmark
24 44 1 gmark
26 43 1 gmark
27 42 1 gmark
28 41 1 gmark
29 40 1 gmark
30 39 1 gmark
31 38 1 gmark

% End Annotations
showpage
end
%%EOF
