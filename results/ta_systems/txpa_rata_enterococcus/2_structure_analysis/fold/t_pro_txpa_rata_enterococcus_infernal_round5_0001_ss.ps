%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 23:31:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCUGUUUUUGAAGCAUUGAUGUUUGCGAUUGCUUUCGCAACGUUAAUUCUCAAAA_UCAGUAAUA___AAAACAACAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[125.85846710 227.77593994]
[126.56488800 212.73216248]
[130.48919678 198.19209290]
[137.44784546 184.83576965]
[147.11535645 173.28790283]
[137.94775391 161.41545105]
[128.78015137 149.54301453]
[114.98059845 155.30268860]
[100.16068268 157.29554749]
[85.32981873 155.38584900]
[71.49818420 149.70365906]
[59.60789490 140.63600159]
[50.46882629 128.80050659]
[44.70346832 115.00332642]
[42.70451736 100.18422699]
[44.60812759 85.35258484]
[50.28463745 71.51861572]
[59.34740829 59.62459946]
[50.17980194 47.75215149]
[41.01219559 35.87970352]
[31.84459114 24.00725555]
[22.67698479 12.13480854]
[13.50937843 0.26236159]
[4.34177303 -11.61008549]
[-3.57175040 -16.64102364]
[-4.93436289 -24.08771324]
[-13.66224670 -36.28705978]
[-22.39013100 -48.48640442]
[-31.11801338 -60.68574905]
[-39.84589767 -72.88509369]
[-48.57378006 -85.08444214]
[-64.20407104 -87.42317963]
[-73.53531647 -100.17870331]
[-71.03145599 -115.78338623]
[-58.17799377 -124.97925568]
[-42.60065079 -122.31055450]
[-33.54119492 -109.36058044]
[-36.37443542 -93.81232452]
[-27.64655113 -81.61298370]
[-18.91866875 -69.41363525]
[-10.19078445 -57.21428680]
[-1.46290076 -45.01494217]
[7.26498318 -32.81559753]
[16.21422005 -20.77769089]
[25.38182640 -8.90524387]
[34.54943085 2.96720314]
[43.71703720 14.83965015]
[52.88464355 26.71209717]
[62.05224991 38.58454514]
[71.21985626 50.45699310]
[85.01940155 44.69730759]
[99.83931732 42.70444489]
[114.67018127 44.61415100]
[128.50181580 50.29634857]
[140.39210510 59.36400604]
[149.53117371 71.19949341]
[155.29653931 84.99667358]
[157.29548645 99.81577301]
[155.39187622 114.64741516]
[149.71536255 128.48138428]
[140.65258789 140.37539673]
[149.82020569 152.24784851]
[158.98780823 164.12030029]
[172.60540771 157.68797302]
[187.28750610 154.33384705]
[202.34738159 154.21482849]
[217.08067322 157.33644104]
[230.79824829 163.55271912]
[242.85853577 172.57290649]
[252.69743347 183.97509766]
[259.85479736 197.22599792]
[263.99581909 211.70584106]
[264.92681885 226.73738098]
[262.60430908 241.61756897]
[257.13684082 255.65042114]
[248.78018188 268.17959595]
[237.92518616 278.61911011]
[225.07955933 286.48065186]
[210.84410095 291.39651489]
[195.88464355 293.13681030]
[180.90084839 291.62011719]
[166.59356689 286.91741943]
[153.63195801 279.24859619]
[142.62225342 268.97238159]
[134.07940674 256.56939697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
] def

init

% Start Annotations
5 63 0.0 1 colorpair
6 62 0.16 1 colorpair
7 61 0.16 1 colorpair
18 50 0.16 0.6 colorpair
19 49 0.16 1 colorpair
20 48 0.16 1 colorpair
21 47 0.16 1 colorpair
22 46 0.0 1 colorpair
23 45 0.16 1 colorpair
24 44 0.16 1 colorpair
26 43 0.0 1 colorpair
27 42 0.32 1 colorpair
28 41 0.16 0.6 colorpair
29 40 0.16 1 colorpair
30 39 0.32 1 colorpair
31 38 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 cmark
62 cmark
7 cmark
61 cmark
18 50 1 gmark
18 cmark
19 cmark
49 cmark
48 cmark
21 cmark
45 cmark
44 cmark
27 cmark
42 cmark
28 41 1 gmark
41 cmark
29 cmark
30 cmark
39 cmark
31 38 2 gmark

% End Annotations
showpage
end
%%EOF
