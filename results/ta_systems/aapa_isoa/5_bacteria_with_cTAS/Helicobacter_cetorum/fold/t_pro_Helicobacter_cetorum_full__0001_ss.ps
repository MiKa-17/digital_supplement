%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 00:00:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGACAAAACAUGGCAAAAACUCUUGGAAAGCAUUAUACCUUGAAAUUUCUUUUUUGGGGUUUAAAGUUAUUGUUUCUUUAGAAAGA\
) } def
/len { sequence length } bind def

/coor [
[6.45842361 276.64587402]
[-6.78086853 279.41900635]
[-20.20100594 277.92025757]
[-32.46043396 272.31393433]
[-42.78888321 283.19158936]
[-37.79832458 297.66061401]
[-40.11496735 312.78976440]
[-49.20645905 325.10250854]
[-62.98364258 331.76943970]
[-78.28061676 331.25851440]
[-91.58226013 323.68719482]
[-99.83194733 310.79528809]
[-101.13395691 295.54525757]
[-95.18909454 281.44146729]
[-83.36345673 271.72485352]
[-68.37448120 268.62820435]
[-53.66652679 272.86312866]
[-43.33807755 261.98547363]
[-50.43167114 247.12744141]
[-51.36650848 230.65325928]
[-45.97570801 215.01971436]
[-35.03779602 202.56871033]
[-20.16437721 195.17630005]
[-3.56273675 193.97021484]
[12.29173088 199.15774536]
[21.84510803 187.59346008]
[31.39848518 176.02915955]
[33.26613617 158.67272949]
[50.38624191 152.16864014]
[59.53477097 140.28147888]
[68.68330383 128.39433289]
[77.83183289 116.50717163]
[86.98036194 104.62002563]
[95.07015991 91.98851013]
[102.04100800 78.70666504]
[101.60323334 62.89152145]
[114.36892700 55.21778488]
[121.33977509 41.93594360]
[128.31062317 28.65410233]
[127.87284851 12.83895397]
[140.63854980 5.16521740]
[147.60939026 -8.11662292]
[154.58023071 -21.39846420]
[161.55108643 -34.68030548]
[168.52192688 -47.96214294]
[175.49278259 -61.24398422]
[182.46362305 -74.52582550]
[189.43447876 -87.80766296]
[196.40531921 -101.08950806]
[191.46479797 -116.10173035]
[198.66105652 -130.17260742]
[213.72468567 -134.95411682]
[227.71868896 -127.60950470]
[232.34068298 -112.49617767]
[224.84851074 -98.58060455]
[209.68716431 -94.11865997]
[202.71630859 -80.83681488]
[195.74546814 -67.55497742]
[188.77462769 -54.27313614]
[181.80377197 -40.99129486]
[174.83293152 -27.70945549]
[167.86207581 -14.42761612]
[160.89123535 -1.14577556]
[153.92037964 12.13606453]
[154.85676575 27.00120735]
[141.59246826 35.62495041]
[134.62161255 48.90679169]
[127.65077209 62.18862915]
[128.58714294 77.05377197]
[115.32285309 85.67751312]
[108.35200500 98.95935822]
[109.17858124 101.59615326]
[109.11611176 104.61136627]
[108.02297211 107.69371796]
[105.86789703 110.48529816]
[102.74371338 112.62050629]
[98.86751556 113.76855469]
[89.71898651 125.65570831]
[80.57045746 137.54286194]
[71.42192841 149.43000793]
[62.27339554 161.31716919]
[63.14196396 174.32620239]
[55.09946060 184.07006836]
[42.96278381 185.58253479]
[33.40940475 197.14683533]
[23.85602760 208.71113586]
[30.90341187 220.41851807]
[33.93586349 233.71902466]
[32.66391754 247.27827454]
[27.22920990 259.74053955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[25 86]
[26 85]
[27 84]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[34 71]
[35 70]
[37 68]
[38 67]
[39 66]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% Start Annotations
4 18 0.0 1 colorpair
5 17 0.0 1 colorpair
25 86 0.0 1 colorpair
26 85 0.0 1 colorpair
27 84 0.0 1 colorpair
29 81 0.0 1 colorpair
30 80 0.0 1 colorpair
31 79 0.0 1 colorpair
32 78 0.0 1 colorpair
33 77 0.0 1 colorpair
34 71 0.0 1 colorpair
35 70 0.0 1 colorpair
37 68 0.0 1 colorpair
38 67 0.0 1 colorpair
39 66 0.0 1 colorpair
41 64 0.0 1 colorpair
42 63 0.0 1 colorpair
43 62 0.0 1 colorpair
44 61 0.0 1 colorpair
45 60 0.0 1 colorpair
46 59 0.0 1 colorpair
47 58 0.0 1 colorpair
48 57 0.0 1 colorpair
49 56 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
