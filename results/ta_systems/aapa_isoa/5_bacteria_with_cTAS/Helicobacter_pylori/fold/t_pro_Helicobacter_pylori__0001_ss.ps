%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Dec 17 00:00:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAACC_AAAAAUGGCAAAAACUCUUGGAAAACAUUAUACCUUGAAAUUUC_G_UUU_UUGGGGUGUAAAGUUGUUGUUUUAUUGAAGCGA\
) } def
/len { sequence length } bind def

/coor [
[68.52766418 341.95925903]
[54.32141495 346.91696167]
[39.43359756 349.09628296]
[24.40239716 348.41839600]
[9.77118301 344.90783691]
[-3.93113494 338.69146729]
[-16.20922852 329.99407959]
[-26.61924934 319.13000488]
[-34.78488541 306.49200439]
[-40.41094971 292.53695679]
[-43.29406738 277.76925659]
[-43.33001328 262.72283936]
[-40.51749039 247.94155884]
[-34.95816803 233.95976257]
[-26.85301208 221.28289795]
[-16.49501801 210.36921692]
[-4.25862265 201.61323547]
[9.41383743 195.33149719]
[24.02811050 191.75105286]
[39.05590057 191.00135803]
[53.95396042 193.10951233]
[58.82445145 178.92225647]
[63.69494629 164.73500061]
[68.56543732 150.54772949]
[73.43592834 136.36047363]
[72.20407867 134.15470886]
[71.73757935 131.34020996]
[72.26164246 128.19104004]
[73.90431976 125.05364227]
[76.67539978 122.31334686]
[80.45651245 120.35515594]
[87.59572601 107.16305542]
[87.40246582 93.18255615]
[99.21217346 85.69773865]
[106.35137939 72.50563049]
[113.49059296 59.31352615]
[113.25399780 43.49408722]
[126.11625671 35.98333359]
[133.25547791 22.79122734]
[140.39468384 9.59912109]
[147.53388977 -3.59298515]
[154.67311096 -16.78509140]
[161.81231689 -29.97719765]
[168.95152283 -43.16930389]
[176.09074402 -56.36140823]
[183.22994995 -69.55352020]
[190.36915588 -82.74562073]
[197.50836182 -95.93772888]
[204.42848206 -109.24607086]
[211.12762451 -122.66700745]
[203.84974670 -136.37147522]
[206.05043030 -151.73170471]
[216.88346863 -162.84136963]
[232.18333435 -165.42860413]
[246.06690979 -158.49853516]
[253.19569397 -144.71594238]
[250.82850647 -129.38049316]
[239.87559509 -118.38897705]
[224.54855347 -115.96788025]
[217.84942627 -102.54693604]
[217.67562866 -95.00755310]
[210.70046997 -88.79851532]
[203.56126404 -75.60641479]
[196.42205811 -62.41430664]
[189.28283691 -49.22219849]
[182.14363098 -36.03009415]
[175.00442505 -22.83798599]
[167.86520386 -9.64588070]
[160.72599792 3.54622579]
[153.58679199 16.73833275]
[146.44757080 29.93043900]
[139.30836487 43.12254333]
[140.05560303 57.99839401]
[126.68270111 66.45273590]
[119.54348755 79.64484406]
[112.40427399 92.83694458]
[112.59753418 106.81744385]
[100.78782654 114.30226135]
[93.64862061 127.49436951]
[87.62318420 141.23097229]
[82.75269318 155.41822815]
[77.88220215 169.60548401]
[73.01171112 183.79273987]
[68.14122009 197.98001099]
[81.19273376 205.46696472]
[92.59130096 215.28883362]
[101.92486572 227.09057617]
[108.85602570 240.44555664]
[113.13423157 254.87100220]
[114.60482025 269.84542847]
[113.21463776 284.82754517]
[109.01393127 299.27575684]
[102.15455627 312.66775513]
[92.88447571 324.51940918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[31 79]
[32 78]
[34 76]
[35 75]
[36 74]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 60]
[50 59]
] def

init

% Start Annotations
21 84 0.0 1 colorpair
22 83 0.16 1 colorpair
23 82 0.0 0.6 colorpair
24 81 0.16 1 colorpair
25 80 0.0 0.2 colorpair
31 79 0.16 0.6 colorpair
32 78 0.0 0.6 colorpair
36 74 0.16 0.6 colorpair
38 72 0.0 1 colorpair
39 71 0.0 1 colorpair
40 70 0.0 1 colorpair
41 69 0.0 0.6 colorpair
42 68 0.0 0.6 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
45 65 0.16 1 colorpair
46 64 0.32 0.2 colorpair
47 63 0.16 1 colorpair
48 62 0.0 1 colorpair
49 60 0.0 1 colorpair
50 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 cmark
23 82 1 gmark
24 cmark
25 80 2 gmark
31 79 1 gmark
31 cmark
32 78 1 gmark
34 76 7 gmark
34 cmark
76 cmark
35 75 4 gmark
35 cmark
75 cmark
36 74 1 gmark
36 cmark
41 69 1 gmark
42 68 1 gmark
65 cmark
46 64 2 gmark
46 cmark
64 cmark
47 cmark

% End Annotations
showpage
end
%%EOF
