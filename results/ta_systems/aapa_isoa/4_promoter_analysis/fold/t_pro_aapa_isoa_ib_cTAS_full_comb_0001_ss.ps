%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 23:59:53 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUACCAA_ACAUGGCAAAAACUCUUGGAAAACAUUAUACCUUGAAAUUUC_GUUUUUG_GGGUGUAAAGUUGUUGUUUUAUUGAAGCGA\
) } def
/len { sequence length } bind def

/coor [
[25.77609444 421.10266113]
[10.98139858 423.67111206]
[-4.00784969 424.56692505]
[-19.00314331 423.77877808]
[-33.81590271 421.31661987]
[-48.25984192 417.21142578]
[-62.15330887 411.51480103]
[-75.32157898 404.29837036]
[-87.59905243 395.65295410]
[-98.83132935 385.68719482]
[-108.87713623 374.52648926]
[-117.61015320 362.31112671]
[-124.92054749 349.19479370]
[-130.71638489 335.34243774]
[-134.92475891 320.92822266]
[-137.49278259 306.13345337]
[-138.38812256 291.14416504]
[-137.59954834 276.14889526]
[-135.13694763 261.33621216]
[-131.03131104 246.89239502]
[-125.33426666 232.99909973]
[-118.11746216 219.83105469]
[-109.47165680 207.55383301]
[-99.50557709 196.32185364]
[-88.34455109 186.27638245]
[-76.12895203 177.54373169]
[-63.01240540 170.23373413]
[-49.15985489 164.43830872]
[-34.74551773 160.23036194]
[-19.95066833 157.66278076]
[-4.96136570 156.76788330]
[10.03388214 157.55691528]
[24.84649277 160.01995850]
[39.29018402 164.12602234]
[53.18331146 169.82348633]
[60.39203644 156.66923523]
[59.72330856 141.78964233]
[73.14064026 133.40599060]
[80.34937286 120.25174713]
[87.55809784 107.09749603]
[87.43861389 93.11617279]
[99.28765106 85.69377899]
[106.49638367 72.53952789]
[113.70510864 59.38528061]
[120.91383362 46.23103333]
[127.90174866 32.95816422]
[134.66690063 19.57038116]
[141.43205261 6.18259811]
[148.19720459 -7.20518446]
[154.96235657 -20.59296608]
[148.63829041 -34.89472198]
[153.03640747 -49.90107727]
[166.08003235 -58.52648544]
[181.61038208 -56.69829559]
[192.29449463 -45.27972031]
[193.08766174 -29.66226578]
[183.61535645 -17.22001266]
[168.35014343 -13.82781506]
[161.58499146 -0.44003254]
[154.81983948 12.94775009]
[148.05468750 26.33553314]
[141.28953552 39.72331619]
[141.07859802 47.26469040]
[134.06808472 53.43975830]
[126.85935974 66.59400940]
[119.65062714 79.74825287]
[112.44190216 92.90250397]
[112.56138611 106.88382721]
[100.71234894 114.30622101]
[93.50361633 127.46047211]
[86.29489136 140.61471558]
[86.44800568 156.43518066]
[73.54628754 163.87796021]
[66.33756256 177.03221130]
[78.61555481 185.67691040]
[89.84841919 195.64198303]
[99.89489746 206.80210876]
[108.62864685 219.01692200]
[115.93981934 232.13281250]
[121.73648071 245.98484802]
[125.94573212 260.39880371]
[128.51463318 275.19342041]
[129.41087341 290.18264771]
[128.62318420 305.17797852]
[126.16147614 319.99078369]
[122.05670929 334.43484497]
[116.36049652 348.32849121]
[109.14447784 361.49697876]
[100.49940491 373.77471924]
[90.53398895 385.00729370]
[79.37357330 395.05343628]
[67.15850067 403.78680420]
[54.04238510 411.09759521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[35 74]
[36 73]
[38 71]
[39 70]
[40 69]
[42 67]
[43 66]
[44 65]
[45 64]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% Start Annotations
38 71 0.0 1 colorpair
39 70 0.0 1 colorpair
40 69 0.0 1 colorpair
42 67 0.16 0.2 colorpair
43 66 0.0 1 colorpair
44 65 0.0 1 colorpair
45 64 0.16 1 colorpair
47 61 0.16 1 colorpair
48 60 0.0 1 colorpair
49 59 0.0 1 colorpair
50 58 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
35 74 11 gmark
35 cmark
74 cmark
36 73 8 gmark
36 cmark
42 67 2 gmark
42 cmark
64 cmark
46 62 3 gmark
46 cmark
62 cmark
47 cmark

% End Annotations
showpage
end
%%EOF
