%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Dec 16 21:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUACCAAACAUGGCAAAAACUCUUGGAAAACAUUAUACCUUGAAAUUUCGUUUUUGGGGUGUAAAGUUGUUGUUUUAUUGAAGCGA_\
) } def
/len { sequence length } bind def

/coor [
[86.37006378 170.37506104]
[77.16323090 182.21711731]
[66.15833282 192.40986633]
[53.64654541 200.68363953]
[39.95891571 206.81950378]
[25.45760345 210.65510559]
[10.52629471 212.08898926]
[-4.43994617 211.08319092]
[-19.04512978 207.66433716]
[-32.90282059 201.92286682]
[-45.64635849 194.01071167]
[-56.93856812 184.13720703]
[-66.48066711 172.56359863]
[-74.02018738 159.59611511]
[-79.35764313 145.57786560]
[-82.35179901 130.87973022]
[-82.92344666 115.89062500]
[-81.05745697 101.00714874]
[-76.80319977 86.62307739]
[-70.27324677 73.11901855]
[-61.64035416 60.85226822]
[-51.13295746 50.14738083]
[-39.02905655 41.28760529]
[-25.64891434 34.50735855]
[-11.34654999 29.98603439]
[3.49961281 27.84326363]
[18.49676132 28.13574219]
[33.24808884 30.85573006]
[47.36329269 35.93126297]
[60.46890259 43.22804260]
[72.21815491 52.55300903]
[82.30018616 63.65943527]
[90.44823456 76.25345612]
[96.44806671 90.00581360]
[102.89031982 76.45969391]
[101.82990265 60.67406464]
[114.28341675 52.50342941]
[120.72566986 38.95730591]
[127.16791534 25.41118622]
[133.61016846 11.86506462]
[140.05242920 -1.68105626]
[146.49467468 -15.22717762]
[152.93692017 -28.77329826]
[159.37918091 -42.31941986]
[165.82142639 -55.86553955]
[172.26368713 -69.41165924]
[178.70593262 -82.95777893]
[185.14817810 -96.50390625]
[191.59043884 -110.05002594]
[186.06240845 -124.85597992]
[192.69880676 -139.19940186]
[207.56239319 -144.57058716]
[221.83483887 -137.78291321]
[227.04858398 -122.86337280]
[220.11038208 -108.66348267]
[205.13655090 -103.60777283]
[198.69430542 -90.06165314]
[192.25205994 -76.51553345]
[185.80979919 -62.96940994]
[179.36755371 -49.42329025]
[172.92529297 -35.87716675]
[166.48304749 -22.33104706]
[160.04080200 -8.78492546]
[153.59854126 4.76119566]
[147.15629578 18.30731583]
[140.71403503 31.85343742]
[134.27178955 45.39955902]
[127.82953644 58.94567871]
[129.35073853 73.76239777]
[116.43643951 82.90194702]
[109.99418640 96.44806671]
[124.86138916 98.43959808]
[126.64990997 113.33258820]
[112.67692566 118.78755951]
[122.14324188 130.42323303]
[131.60955811 142.05889893]
[141.07588196 153.69456482]
[150.54220581 165.33023071]
[160.00851440 176.96589661]
[169.47483826 188.60157776]
[184.16093445 197.07238770]
[180.08666992 213.52951050]
[163.14483643 214.17025757]
[157.83917236 198.06788635]
[148.37284851 186.43222046]
[138.90652466 174.79655457]
[129.44021606 163.16088867]
[119.97389221 151.52522278]
[110.50757599 139.88954163]
[101.04125214 128.25387573]
[98.46913910 143.03170776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 71]
[35 70]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% Start Annotations
34 71 0.0 1 colorpair
35 70 0.0 1 colorpair
37 68 0.0 1 colorpair
38 67 0.0 1 colorpair
39 66 0.0 1 colorpair
40 65 0.0 1 colorpair
41 64 0.0 0.6 colorpair
42 63 0.0 1 colorpair
43 62 0.0 1 colorpair
44 61 0.16 1 colorpair
45 60 0.32 0.6 colorpair
46 59 0.16 1 colorpair
47 58 0.0 1 colorpair
48 57 0.0 1 colorpair
49 56 0.0 1 colorpair
74 90 0.16 1 colorpair
75 89 0.0 1 colorpair
76 88 0.0 0.2 colorpair
77 87 0.16 1 colorpair
78 86 0.0 1 colorpair
79 85 0.0 1 colorpair
80 84 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
41 64 1 gmark
61 cmark
45 60 1 gmark
45 cmark
60 cmark
46 cmark
90 cmark
76 88 2 gmark
87 cmark
80 84 1 gmark

% End Annotations
showpage
end
%%EOF
