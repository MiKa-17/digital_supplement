%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 18:21:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______GGAAAACAA_CC_UUAAAAGGAGUA_UGU______C____AUGA_AAAGA_AAAAAUGGCAAACGCUCUU_G_G_AAAACAUUAUACCUUG___________AAAUUU_C_UUUUUU_G_GGGUUUAA__AGUGGUCGUUUCUAUGAAACGCUAAUUU_____\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50852966 91.94569397]
[62.54777527 90.83781433]
[47.63817596 89.17786407]
[32.80009842 86.96810913]
[18.05381012 84.21158600]
[3.41944861 80.91204071]
[-11.08299541 77.07398987]
[-25.43371201 72.70266724]
[-39.61310196 67.80405426]
[-53.60179901 62.38483429]
[-67.38069153 56.45241165]
[-80.93096161 50.01488876]
[-94.23410034 43.08106232]
[-107.27194214 35.66039658]
[-120.02667236 27.76303482]
[-132.48086548 19.39975548]
[-144.61753845 10.58198833]
[-156.42007446 1.32177508]
[-167.87237549 -8.36823654]
[-178.95878601 -18.47480965]
[-189.66418457 -28.98414230]
[-199.97393799 -39.88187790]
[-209.87394714 -51.15312958]
[-219.35072327 -62.78250504]
[-228.39129639 -74.75411987]
[-236.98332214 -87.05162048]
[-245.11506653 -99.65821838]
[-252.77543640 -112.55667877]
[-259.95394897 -125.72939301]
[-266.64080811 -139.15837097]
[-272.82687378 -152.82527161]
[-278.50372314 -166.71141052]
[-283.66354370 -180.79785156]
[-288.29934692 -195.06532288]
[-292.40478516 -209.49435425]
[-295.97424316 -224.06523132]
[-299.00283813 -238.75805664]
[-301.48645020 -253.55276489]
[-303.42169189 -268.42913818]
[-304.80587769 -283.36685181]
[-305.63717651 -298.34552002]
[-305.91439819 -313.34466553]
[-305.63720703 -328.34384155]
[-304.80593872 -343.32250977]
[-303.42178345 -358.26022339]
[-301.48657227 -373.13659668]
[-299.00299072 -387.93130493]
[-295.97442627 -402.62414551]
[-292.40499878 -417.19503784]
[-288.29962158 -431.62405396]
[-283.66384888 -445.89154053]
[-278.50402832 -459.97799683]
[-272.82720947 -473.86416626]
[-266.64117432 -487.53106689]
[-259.95434570 -500.96005249]
[-252.77586365 -514.13281250]
[-245.11552429 -527.03125000]
[-236.98379517 -539.63787842]
[-228.39179993 -551.93536377]
[-219.35125732 -563.90704346]
[-209.87451172 -575.53643799]
[-199.97451782 -586.80767822]
[-189.66479492 -597.70544434]
[-178.95941162 -608.21478271]
[-167.87301636 -618.32141113]
[-156.42073059 -628.01141357]
[-144.61820984 -637.27166748]
[-132.48158264 -646.08947754]
[-120.02739716 -654.45275879]
[-107.27268219 -662.35015869]
[-94.23485565 -669.77087402]
[-80.93173218 -676.70471191]
[-67.38146973 -683.14227295]
[-53.60259247 -689.07470703]
[-39.61390686 -694.49395752]
[-25.43452835 -699.39263916]
[-11.08382130 -703.76397705]
[3.41861463 -707.60205078]
[18.05296898 -710.90161133]
[32.79925156 -713.65820312]
[47.63732529 -715.86798096]
[62.54692078 -717.52795410]
[77.50766754 -718.63586426]
[92.49913788 -719.19018555]
[107.50086212 -719.19018555]
[122.49233246 -718.63586426]
[137.45307922 -717.52795410]
[152.36267090 -715.86798096]
[167.20074463 -713.65820312]
[181.94703674 -710.90161133]
[196.58139038 -707.60205078]
[211.08381653 -703.76397705]
[225.43452454 -699.39263916]
[239.61390686 -694.49395752]
[253.60258484 -689.07470703]
[267.38146973 -683.14227295]
[280.93173218 -676.70471191]
[294.23486328 -669.77087402]
[307.27267456 -662.35015869]
[320.02740479 -654.45275879]
[332.48156738 -646.08947754]
[344.61822510 -637.27166748]
[356.42074585 -628.01141357]
[367.87301636 -618.32141113]
[378.95941162 -608.21478271]
[389.66479492 -597.70544434]
[399.97451782 -586.80767822]
[409.87451172 -575.53643799]
[419.35125732 -563.90704346]
[428.39178467 -551.93536377]
[436.98379517 -539.63787842]
[445.11550903 -527.03125000]
[452.77584839 -514.13281250]
[459.95434570 -500.96005249]
[466.64117432 -487.53106689]
[472.82720947 -473.86416626]
[478.50402832 -459.97799683]
[483.66384888 -445.89154053]
[488.29962158 -431.62405396]
[492.40499878 -417.19503784]
[495.97442627 -402.62414551]
[499.00299072 -387.93130493]
[501.48657227 -373.13659668]
[503.42178345 -358.26022339]
[504.80593872 -343.32250977]
[505.63720703 -328.34384155]
[505.91439819 -313.34466553]
[505.63717651 -298.34552002]
[504.80587769 -283.36685181]
[503.42169189 -268.42913818]
[501.48645020 -253.55276489]
[499.00283813 -238.75805664]
[495.97424316 -224.06523132]
[492.40478516 -209.49435425]
[488.29934692 -195.06532288]
[483.66354370 -180.79785156]
[478.50372314 -166.71141052]
[472.82687378 -152.82527161]
[466.64080811 -139.15837097]
[459.95394897 -125.72939301]
[452.77542114 -112.55667877]
[445.11508179 -99.65821838]
[436.98333740 -87.05162048]
[428.39129639 -74.75411987]
[419.35070801 -62.78250504]
[409.87396240 -51.15312958]
[399.97393799 -39.88187790]
[389.66418457 -28.98414230]
[378.95880127 -18.47480965]
[367.87237549 -8.36823654]
[356.42007446 1.32177508]
[344.61752319 10.58198833]
[332.48086548 19.39975548]
[320.02667236 27.76303482]
[307.27194214 35.66039658]
[294.23410034 43.08106232]
[280.93096924 50.01488876]
[267.38067627 56.45241165]
[253.60179138 62.38483429]
[239.61309814 67.80405426]
[225.43371582 72.70266724]
[211.08299255 77.07398987]
[196.58055115 80.91204071]
[181.94619751 84.21158600]
[167.19990540 86.96810913]
[152.36181641 89.17786407]
[137.45222473 90.83781433]
[122.49147034 91.94569397]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
