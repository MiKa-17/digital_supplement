%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 17:43:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACACCCCCAUAAGUCGGAUUAUGGGGAUAAAUCCAUAAAAGGAGUUUGUCAUGGCUACCA_AACAUGGCAAAAACUCUUG\
) } def
/len { sequence length } bind def

/coor [
[132.96592712 148.13562012]
[117.30241394 155.71730042]
[100.09955597 158.34193420]
[82.88783264 155.77601624]
[67.19853973 148.24784851]
[54.42752075 136.42718506]
[45.71097183 121.36567688]
[31.16266251 125.01898193]
[16.61435127 128.67228699]
[2.06604052 132.32559204]
[-12.48227024 135.97891235]
[-27.03058052 139.63221741]
[-41.57889175 143.28552246]
[-56.12720108 146.93882751]
[-64.02813721 160.62643433]
[-79.31496429 164.63748169]
[-92.91828156 156.59226990]
[-96.76747894 141.26388550]
[-88.57889557 127.74639893]
[-73.21067047 124.05947876]
[-59.78050995 132.39051819]
[-45.23220062 128.73721313]
[-30.68388748 125.08390045]
[-16.13557816 121.43059540]
[-1.58726680 117.77729034]
[12.96104431 114.12397766]
[27.50935555 110.47067261]
[42.05766678 106.81736755]
[41.96349335 94.03722382]
[44.65437698 81.54322052]
[50.00118637 69.93492126]
[57.74733353 59.76937866]
[67.52110291 51.53442764]
[78.85346222 45.62524033]
[91.20060730 42.32538605]
[103.97001648 41.79321671]
[116.54891205 44.05427551]
[128.33364868 49.00005341]
[138.75872803 56.39321518]
[147.32385254 65.87897491]
[153.61799622 77.00213623]
[157.33911133 89.22891998]
[172.31494141 88.37773895]
[187.29077148 87.52656555]
[202.26660156 86.67538452]
[217.24244690 85.82420349]
[232.21827698 84.97302246]
[247.19410706 84.12184906]
[262.12698364 82.70456696]
[276.99557495 80.72322083]
[291.86413574 78.74188232]
[306.73269653 76.76053619]
[321.60125732 74.77919006]
[336.46981812 72.79784393]
[351.33837891 70.81649780]
[357.11935425 56.58708954]
[369.25033569 47.16719818]
[384.46823120 45.09073639]
[398.67944336 50.91625977]
[408.06127930 63.07673264]
[410.09002686 78.30104828]
[404.21997070 92.49394226]
[392.03015137 101.83759308]
[376.79956055 103.81861115]
[362.62515259 97.90411377]
[353.31973267 85.68506622]
[338.45117188 87.66641235]
[323.58261108 89.64775848]
[308.71405029 91.62910461]
[293.84545898 93.61044312]
[278.97689819 95.59178925]
[264.10833740 97.57313538]
[260.41888428 100.95908356]
[254.48808289 101.89253998]
[248.04527283 99.09767914]
[233.06944275 99.94885254]
[218.09361267 100.80003357]
[203.11778259 101.65121460]
[188.14195251 102.50239563]
[173.16612244 103.35356903]
[158.19029236 104.20475006]
[154.36163330 121.18027496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
] def

init

% Start Annotations
7 28 0.0 1 colorpair
8 27 0.0 1 colorpair
9 26 0.0 1 colorpair
10 25 0.0 1 colorpair
11 24 0.0 1 colorpair
12 23 0.0 1 colorpair
13 22 0.0 1 colorpair
14 21 0.0 1 colorpair
42 81 0.16 0.6 colorpair
43 80 0.0 0.6 colorpair
44 79 0.0 0.6 colorpair
45 78 0.0 0.6 colorpair
46 77 0.0 0.6 colorpair
47 76 0.0 0.6 colorpair
48 75 0.0 0.6 colorpair
49 72 0.0 0.6 colorpair
50 71 0.16 0.6 colorpair
51 70 0.16 0.6 colorpair
52 69 0.0 0.6 colorpair
53 68 0.0 0.6 colorpair
54 67 0.0 0.6 colorpair
55 66 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
42 81 1 gmark
42 cmark
43 80 1 gmark
44 79 1 gmark
45 78 1 gmark
46 77 1 gmark
47 76 1 gmark
48 75 1 gmark
49 72 1 gmark
50 71 1 gmark
71 cmark
51 70 1 gmark
51 cmark
52 69 1 gmark
53 68 1 gmark
54 67 1 gmark
55 66 2 gmark

% End Annotations
showpage
end
%%EOF
