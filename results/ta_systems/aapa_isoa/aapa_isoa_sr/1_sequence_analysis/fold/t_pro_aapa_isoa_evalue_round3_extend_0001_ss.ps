%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 18:02:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________AAAGGAGU_AUGUCAUG_AAAAAA_AAAAAUGGCAAACGCUCUU_G_G_AAAACAUUAUACCUUG____________AAAUUU_CU_UU_UUUGGG_GUUUAA__AGUGGUCGUUUCUAUGAAACGCUAAUUU_\
) } def
/len { sequence length } bind def

/coor [
[13.05485153 402.89508057]
[-1.25898778 398.41500854]
[-15.34344292 393.25891113]
[-29.16660881 387.43847656]
[-42.69717026 380.96691895]
[-55.90447617 373.85888672]
[-68.75861359 366.13046265]
[-81.23045349 357.79916382]
[-93.29174805 348.88388062]
[-104.91518402 339.40481567]
[-116.07441711 329.38339233]
[-126.74417114 318.84234619]
[-136.90026855 307.80557251]
[-146.51972961 296.29803467]
[-155.58073425 284.34582520]
[-164.06277466 271.97601318]
[-171.94662476 259.21661377]
[-179.21441650 246.09654236]
[-185.84971619 232.64552307]
[-191.83746338 218.89401245]
[-197.16410828 204.87316895]
[-201.81759644 190.61474609]
[-205.78735352 176.15106201]
[-209.06440735 161.51487732]
[-211.64134216 146.73933411]
[-213.51229858 131.85791016]
[-214.67306519 116.90431976]
[-215.12098694 101.91243744]
[-214.85505676 86.91622162]
[-213.87588501 71.94964600]
[-228.78033447 70.25924683]
[-243.68478394 68.56885529]
[-258.58923340 66.87845612]
[-265.60607910 80.33684540]
[-277.01339722 90.34870911]
[-291.26846313 95.56002045]
[-306.44335938 95.26599121]
[-320.48583984 89.50638580]
[-331.49676514 79.06015015]
[-337.98699951 65.34004211]
[-339.07879639 50.20159531]
[-334.62448120 35.69216919]
[-325.22647095 23.77403641]
[-312.15576172 16.05902863]
[-297.18008423 13.59053898]
[-282.32476807 16.70240784]
[-269.59884644 24.97378159]
[-260.72341919 37.28602600]
[-256.89883423 51.97400665]
[-241.99438477 53.66440582]
[-227.08993530 55.35480118]
[-212.18548584 57.04520035]
[-209.78800964 42.23947906]
[-206.68878174 27.56460762]
[-202.89479065 13.05382252]
[-198.41465759 -1.26000142]
[-193.25851440 -15.34443855]
[-187.43803406 -29.16758537]
[-180.96643066 -42.69812393]
[-173.85835266 -55.90540695]
[-166.12988281 -68.75951385]
[-157.79855347 -81.23133087]
[-148.88323975 -93.29259491]
[-139.40411377 -104.91599274]
[-129.38265991 -116.07519531]
[-118.84158325 -126.74491119]
[-107.80475616 -136.90098572]
[-96.29718781 -146.52040100]
[-84.34494781 -155.58135986]
[-71.97510529 -164.06335449]
[-59.21568680 -171.94715881]
[-46.09559250 -179.21492004]
[-32.64454651 -185.85015869]
[-18.89301491 -191.83787537]
[-4.87215471 -197.16447449]
[9.38627434 -201.81790161]
[23.84997177 -205.78761292]
[38.48617554 -209.06462097]
[53.26172638 -211.64149475]
[68.14315033 -213.51242065]
[83.09674835 -214.67312622]
[98.08863068 -215.12098694]
[113.08484650 -214.85501099]
[128.05142212 -213.87579346]
[142.95445251 -212.18553162]
[157.76016235 -209.78808594]
[172.43504333 -206.68885803]
[186.94583130 -202.89488220]
[201.25965881 -198.41476440]
[215.34410095 -193.25863647]
[229.16725159 -187.43818665]
[242.69779968 -180.96659851]
[255.90509033 -173.85852051]
[268.75921631 -166.13008118]
[281.23104858 -157.79876709]
[293.29232788 -148.88345337]
[304.91571045 -139.40434265]
[316.07492065 -129.38290405]
[326.74465942 -118.84183502]
[336.90075684 -107.80502319]
[346.52017212 -96.29747009]
[355.58114624 -84.34523773]
[364.06317139 -71.97540283]
[371.94699097 -59.21599579]
[379.21475220 -46.09590912]
[385.85000610 -32.64486694]
[391.83773804 -18.89334488]
[397.16436768 -4.87249088]
[401.81781006 9.38593292]
[405.78753662 23.84962654]
[409.06454468 38.48582458]
[411.64144897 53.26137161]
[413.51239014 68.14279938]
[414.67309570 83.09638977]
[415.12100220 98.08827209]
[414.85504150 113.08448792]
[413.87582397 128.05105591]
[412.18557739 142.95408630]
[409.78814697 157.75981140]
[406.68893433 172.43469238]
[402.89498901 186.94549561]
[398.41488647 201.25932312]
[393.25875854 215.34378052]
[387.43832397 229.16693115]
[380.96676636 242.69749451]
[373.85870361 255.90478516]
[366.13027954 268.75891113]
[357.79898071 281.23074341]
[348.88366699 293.29202271]
[339.40457153 304.91546631]
[329.38314819 316.07467651]
[318.84210205 326.74441528]
[307.80529785 336.90051270]
[296.29776001 346.51995850]
[284.34552002 355.58093262]
[271.97570801 364.06295776]
[259.21630859 371.94680786]
[246.09622192 379.21459961]
[232.64518738 385.84985352]
[218.89367676 391.83761597]
[204.87283325 397.16424561]
[190.61441040 401.81768799]
[176.15072632 405.78744507]
[161.51452637 409.06448364]
[146.73898315 411.64138794]
[131.85755920 413.51232910]
[116.90396881 414.67309570]
[101.91208649 415.12097168]
[86.91587067 414.85504150]
[71.94929504 413.87585449]
[57.04626083 412.18563843]
[42.24053192 409.78820801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 52]
[31 51]
[32 50]
[33 49]
] def

init

% Start Annotations
32 50 0.32 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
30 52 32 gmark
30 cmark
52 cmark
31 51 33 gmark
31 cmark
51 cmark
32 50 1 gmark
32 cmark
50 cmark
33 49 7 gmark
33 cmark
49 cmark

% End Annotations
showpage
end
%%EOF
