%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 18:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________________________________GUCAUGAAAAGAAAA_AAUGGCAAACGCUCUU_GG_AAAACAUUAUACCUUGAAAUUU_CU_UU_UUUGGG_GUUU__AAAGUGGUCGUUUC__________UAUGAAACGC______________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50823212 91.95530701]
[62.54613113 90.86660004]
[47.63343048 89.23532867]
[32.78979492 87.06363678]
[18.03480530 84.35438538]
[3.38792276 81.11115265]
[-11.13153648 77.33821869]
[-25.50442123 73.04055023]
[-39.71177673 68.22382355]
[-53.73485947 62.89439392]
[-67.55518341 57.05928421]
[-81.15450287 50.72619247]
[-94.51490784 43.90347290]
[-107.61875153 36.60012054]
[-120.44876099 28.82576942]
[-132.98802185 20.59067535]
[-145.21998596 11.90569973]
[-157.12852478 2.78229618]
[-168.69792175 -6.76750231]
[-179.91293335 -16.73110008]
[-190.75875854 -27.09535599]
[-201.22109985 -37.84659958]
[-211.28614807 -48.97065353]
[-220.94062805 -60.45284271]
[-230.17182922 -72.27802277]
[-238.96754456 -84.43059540]
[-247.31617737 -96.89453888]
[-255.20674133 -109.65341187]
[-262.62881470 -122.69038391]
[-269.57260132 -135.98826599]
[-276.02893066 -149.52951050]
[-281.98934937 -163.29626465]
[-287.44592285 -177.27035522]
[-292.39147949 -191.43338013]
[-296.81951904 -205.76664734]
[-300.72418213 -220.25123596]
[-304.10031128 -234.86805725]
[-306.94345093 -249.59782410]
[-309.24987793 -264.42111206]
[-311.01654053 -279.31838989]
[-312.24108887 -294.26998901]
[-312.92193604 -309.25619507]
[-313.05813599 -324.25723267]
[-312.64956665 -339.25332642]
[-311.69674683 -354.22470093]
[-310.20092773 -369.15158081]
[-308.16409302 -384.01434326]
[-305.58889771 -398.79330444]
[-302.47879028 -413.46902466]
[-298.83782959 -428.02215576]
[-294.67080688 -442.43344116]
[-289.98327637 -456.68395996]
[-284.78137207 -470.75485229]
[-279.07196045 -484.62756348]
[-272.86260986 -498.28384399]
[-266.16146851 -511.70562744]
[-258.97738647 -524.87524414]
[-251.31982422 -537.77526855]
[-243.19891357 -550.38879395]
[-234.62533569 -562.69909668]
[-225.61042786 -574.69000244]
[-216.16604614 -586.34558105]
[-206.30468750 -597.65063477]
[-196.03932190 -608.59008789]
[-185.38349915 -619.14959717]
[-174.35128784 -629.31524658]
[-162.95721436 -639.07354736]
[-151.21633911 -648.41174316]
[-139.14410400 -657.31738281]
[-126.75646973 -665.77886963]
[-114.06976318 -673.78491211]
[-101.10070801 -681.32501221]
[-87.86641693 -688.38928223]
[-74.38434601 -694.96826172]
[-60.67227554 -701.05340576]
[-46.74828720 -706.63665771]
[-32.63075256 -711.71057129]
[-18.33828545 -716.26855469]
[-3.88973856 -720.30456543]
[10.69583035 -723.81323242]
[25.39918518 -726.78997803]
[40.20093155 -729.23089600]
[55.08155060 -731.13275146]
[70.02141571 -732.49298096]
[85.00081635 -733.30981445]
[100.00000000 -733.58227539]
[114.99918365 -733.30981445]
[129.97859192 -732.49298096]
[144.91844177 -731.13275146]
[159.79907227 -729.23089600]
[174.60081482 -726.78997803]
[189.30416870 -723.81323242]
[203.88973999 -720.30456543]
[218.33828735 -716.26855469]
[232.63075256 -711.71057129]
[246.74829102 -706.63665771]
[260.67227173 -701.05340576]
[274.38433838 -694.96826172]
[287.86642456 -688.38928223]
[301.10070801 -681.32501221]
[314.06976318 -673.78491211]
[326.75646973 -665.77886963]
[339.14410400 -657.31738281]
[351.21633911 -648.41174316]
[362.95721436 -639.07354736]
[374.35128784 -629.31524658]
[385.38351440 -619.14959717]
[396.03930664 -608.59008789]
[406.30468750 -597.65063477]
[416.16604614 -586.34558105]
[425.61041260 -574.69000244]
[434.62533569 -562.69909668]
[443.19891357 -550.38879395]
[451.31982422 -537.77526855]
[458.97738647 -524.87524414]
[466.16146851 -511.70562744]
[472.86260986 -498.28384399]
[479.07196045 -484.62756348]
[484.78137207 -470.75485229]
[489.98327637 -456.68395996]
[494.67080688 -442.43344116]
[498.83782959 -428.02215576]
[502.47879028 -413.46902466]
[505.58889771 -398.79330444]
[508.16409302 -384.01434326]
[510.20092773 -369.15158081]
[511.69674683 -354.22470093]
[512.64959717 -339.25332642]
[513.05816650 -324.25723267]
[512.92193604 -309.25619507]
[512.24108887 -294.26998901]
[511.01654053 -279.31838989]
[509.24987793 -264.42111206]
[506.94345093 -249.59782410]
[504.10031128 -234.86805725]
[500.72418213 -220.25123596]
[496.81951904 -205.76664734]
[492.39147949 -191.43338013]
[487.44592285 -177.27035522]
[481.98934937 -163.29626465]
[476.02893066 -149.52951050]
[469.57260132 -135.98826599]
[462.62881470 -122.69038391]
[455.20672607 -109.65341187]
[447.31619263 -96.89453888]
[438.96752930 -84.43059540]
[430.17181396 -72.27802277]
[420.94064331 -60.45284271]
[411.28613281 -48.97065353]
[401.22109985 -37.84659958]
[390.75875854 -27.09535599]
[379.91293335 -16.73110008]
[368.69793701 -6.76750231]
[357.12850952 2.78229618]
[345.21997070 11.90569973]
[332.98800659 20.59067535]
[320.44876099 28.82576942]
[307.61874390 36.60012054]
[294.51489258 43.90347290]
[281.15451050 50.72619247]
[267.55517578 57.05928421]
[253.73486328 62.89439392]
[239.71177673 68.22382355]
[225.50442505 73.04055023]
[211.13153076 77.33821869]
[196.61207581 81.11115265]
[181.96519470 84.35438538]
[167.21020508 87.06363678]
[152.36657715 89.23532867]
[137.45387268 90.86660004]
[122.49176788 91.95530701]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
