%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 20:05:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_CAUGAAAAAAAAACAUGGCAAAC___ACUCUU_G_G_AAAACAUUAUACCUU___________GAAAU_UU_C_U_UUUU_UGGGGUUUA_A__AGUGGUCUUUUU_UA_U__GAA_ACG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51682281 91.72135162]
[62.59425354 90.16606903]
[47.77252579 87.83834076]
[33.09159470 84.74444580]
[18.59103775 80.89273071]
[4.30994463 76.29356384]
[-9.71318340 70.95935059]
[-23.44054222 64.90447235]
[-36.83512878 58.14525604]
[-49.86082840 50.69991684]
[-62.48252869 42.58852768]
[-74.66619873 33.83295822]
[-86.37900543 24.45680809]
[-97.58936310 14.48535728]
[-108.26705170 3.94548535]
[-118.38328552 -7.13439369]
[-127.91079712 -18.72440910]
[-136.82389832 -30.79331779]
[-145.09855652 -43.30858612]
[-152.71247864 -56.23646927]
[-159.64512634 -69.54212189]
[-165.87780762 -83.18966675]
[-171.39373779 -97.14231873]
[-176.17802429 -111.36245728]
[-180.21778870 -125.81175995]
[-183.50213623 -140.45126343]
[-186.02220154 -155.24150085]
[-187.77120972 -170.14260864]
[-188.74441528 -185.11441040]
[-188.93922424 -200.11653137]
[-188.35510254 -215.10856628]
[-186.99363708 -230.05004883]
[-184.85845947 -244.90074158]
[-181.95536804 -259.62060547]
[-178.29216003 -274.16992188]
[-173.87873840 -288.50949097]
[-168.72697449 -302.60067749]
[-162.85076904 -316.40545654]
[-156.26596069 -329.88665771]
[-148.99029541 -343.00787354]
[-141.04341125 -355.73379517]
[-132.44670105 -368.03005981]
[-123.22335052 -379.86358643]
[-113.39823914 -391.20239258]
[-102.99783325 -402.01599121]
[-92.05017853 -412.27517700]
[-80.58479309 -421.95230103]
[-68.63257599 -431.02127075]
[-56.22576141 -439.45767212]
[-43.39778137 -447.23873901]
[-30.18322754 -454.34350586]
[-16.61772156 -460.75277710]
[-2.73783350 -466.44931030]
[11.41901875 -471.41775513]
[25.81467056 -475.64471436]
[40.41031265 -479.11877441]
[55.16660309 -481.83059692]
[70.04375458 -483.77285767]
[85.00166321 -484.94027710]
[100.00000000 -485.32980347]
[114.99833679 -484.94027710]
[129.95625305 -483.77285767]
[144.83340454 -481.83059692]
[159.58969116 -479.11877441]
[174.18533325 -475.64471436]
[188.58097839 -471.41775513]
[202.73783875 -466.44931030]
[216.61772156 -460.75277710]
[230.18322754 -454.34350586]
[243.39778137 -447.23873901]
[256.22576904 -439.45767212]
[268.63256836 -431.02127075]
[280.58477783 -421.95230103]
[292.05017090 -412.27517700]
[302.99783325 -402.01599121]
[313.39822388 -391.20239258]
[323.22335815 -379.86358643]
[332.44668579 -368.03005981]
[341.04339600 -355.73379517]
[348.99029541 -343.00787354]
[356.26596069 -329.88665771]
[362.85076904 -316.40545654]
[368.72695923 -302.60067749]
[373.87872314 -288.50949097]
[378.29217529 -274.16992188]
[381.95535278 -259.62060547]
[384.85845947 -244.90074158]
[386.99362183 -230.05004883]
[388.35510254 -215.10856628]
[388.93923950 -200.11653137]
[388.74441528 -185.11441040]
[387.77120972 -170.14260864]
[386.02221680 -155.24150085]
[383.50213623 -140.45126343]
[380.21780396 -125.81175995]
[376.17803955 -111.36245728]
[371.39373779 -97.14231873]
[365.87780762 -83.18966675]
[359.64511108 -69.54212189]
[352.71246338 -56.23646927]
[345.09857178 -43.30858612]
[336.82388306 -30.79331779]
[327.91079712 -18.72440910]
[318.38327026 -7.13439369]
[308.26705933 3.94548535]
[297.58935547 14.48535728]
[286.37899780 24.45680809]
[274.66619873 33.83295822]
[262.48251343 42.58852768]
[249.86082458 50.69991684]
[236.83512878 58.14525604]
[223.44053650 64.90447235]
[209.71318054 70.95935059]
[195.69004822 76.29356384]
[181.40896606 80.89273071]
[166.90840149 84.74444580]
[152.22747803 87.83834076]
[137.40574646 90.16606903]
[122.48317719 91.72135162]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
