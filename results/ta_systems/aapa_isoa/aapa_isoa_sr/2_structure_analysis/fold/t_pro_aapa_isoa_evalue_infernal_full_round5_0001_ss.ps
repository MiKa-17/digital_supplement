%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Jan 23 20:05:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_CAUGAAAAAAAAACAUGGCAAAC___GCUCUU_G_G_AAAACAUUAUACCUUG___________AAAU_UU_C_U_UUUUUGGGGUUUA_A__AGUGGUCGUUUU_UA_U__G___AA_ACG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51628113 91.73400879]
[62.59121704 90.20393372]
[47.76374817 87.91377258]
[33.07255936 84.86949158]
[18.55597878 81.07904816]
[4.25187635 76.55232239]
[-9.80242920 71.30111694]
[-23.57027245 65.33914185]
[-37.01573563 58.68195343]
[-50.10373688 51.34690857]
[-62.80013275 43.35315323]
[-75.07180023 34.72153854]
[-86.88672638 25.47458076]
[-98.21408081 15.63640976]
[-109.02431488 5.23268795]
[-119.28923035 -5.70944023]
[-128.98204041 -17.16142845]
[-138.07746887 -29.09339905]
[-146.55175781 -41.47422409]
[-154.38284302 -54.27160263]
[-161.55026245 -67.45214844]
[-168.03530884 -80.98147583]
[-173.82109070 -94.82427979]
[-178.89251709 -108.94445801]
[-183.23632812 -123.30516815]
[-186.84120178 -137.86894226]
[-189.69773865 -152.59777832]
[-191.79849243 -167.45327759]
[-193.13795471 -182.39665222]
[-193.71267700 -197.38891602]
[-193.52111816 -212.39099121]
[-192.56379700 -227.36369324]
[-190.84320068 -242.26800537]
[-188.36383057 -257.06500244]
[-185.13215637 -271.71612549]
[-181.15660095 -286.18310547]
[-176.44752502 -300.42819214]
[-171.01724243 -314.41430664]
[-164.87988281 -328.10485840]
[-158.05149841 -341.46420288]
[-150.54988098 -354.45742798]
[-142.39460754 -367.05068970]
[-133.60694885 -379.21109009]
[-124.20983124 -390.90695190]
[-114.22776794 -402.10772705]
[-103.68682098 -412.78417969]
[-92.61446381 -422.90847778]
[-81.03960419 -432.45422363]
[-68.99243164 -441.39651489]
[-56.50437164 -449.71197510]
[-43.60800934 -457.37893677]
[-30.33698845 -464.37741089]
[-16.72593117 -470.68914795]
[-2.81034946 -476.29763794]
[11.37345409 -481.18826294]
[25.78847504 -485.34829712]
[40.39710617 -488.76684570]
[55.16123199 -491.43502808]
[70.04234314 -493.34585571]
[85.00160980 -494.49435425]
[100.00000000 -494.87750244]
[114.99839020 -494.49435425]
[129.95765686 -493.34585571]
[144.83876038 -491.43502808]
[159.60289001 -488.76684570]
[174.21153259 -485.34829712]
[188.62654114 -481.18826294]
[202.81034851 -476.29763794]
[216.72593689 -470.68914795]
[230.33699036 -464.37741089]
[243.60800171 -457.37893677]
[256.50436401 -449.71197510]
[268.99243164 -441.39651489]
[281.03961182 -432.45422363]
[292.61447144 -422.90847778]
[303.68682861 -412.78417969]
[314.22778320 -402.10772705]
[324.20983887 -390.90695190]
[333.60693359 -379.21109009]
[342.39459229 -367.05068970]
[350.54986572 -354.45742798]
[358.05151367 -341.46420288]
[364.87988281 -328.10485840]
[371.01724243 -314.41430664]
[376.44754028 -300.42819214]
[381.15658569 -286.18310547]
[385.13214111 -271.71612549]
[388.36383057 -257.06500244]
[390.84320068 -242.26800537]
[392.56378174 -227.36369324]
[393.52111816 -212.39099121]
[393.71267700 -197.38891602]
[393.13796997 -182.39665222]
[391.79849243 -167.45327759]
[389.69772339 -152.59777832]
[386.84118652 -137.86894226]
[383.23632812 -123.30516815]
[378.89251709 -108.94445801]
[373.82110596 -94.82427979]
[368.03530884 -80.98147583]
[361.55026245 -67.45214844]
[354.38284302 -54.27160263]
[346.55175781 -41.47422409]
[338.07745361 -29.09339905]
[328.98205566 -17.16142845]
[319.28924561 -5.70944023]
[309.02432251 5.23268795]
[298.21408081 15.63640976]
[286.88671875 25.47458076]
[275.07180786 34.72153854]
[262.80014038 43.35315323]
[250.10372925 51.34690857]
[237.01573181 58.68195343]
[223.57026672 65.33914185]
[209.80242920 71.30111694]
[195.74812317 76.55232239]
[181.44401550 81.07904816]
[166.92744446 84.86949158]
[152.23625183 87.91377258]
[137.40878296 90.20393372]
[122.48371887 91.73400879]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
