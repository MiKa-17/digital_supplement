%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:29:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUGGUGACU_ACCUCGUAUAGUUGCUGUGGUUAGCGGGUAAAGCAGGUUGCAACCUGUUUUAUCCGCGUU\
) } def
/len { sequence length } bind def

/coor [
[82.75367737 107.86290741]
[67.75696564 108.17704010]
[52.76025391 108.49118042]
[37.76354599 108.80531311]
[22.76683426 109.11944580]
[7.77012491 109.43358612]
[-7.22658539 109.74771881]
[-22.22329521 110.06185913]
[-37.22000504 110.37599182]
[-52.21671677 110.69013214]
[-67.21342468 111.00426483]
[-82.21013641 111.31840515]
[-97.20684814 111.63253784]
[-104.53563690 125.13011169]
[-117.63971710 133.14126587]
[-132.99415588 133.51104736]
[-146.46868896 126.13999176]
[-154.43873596 113.01086426]
[-154.76039124 97.65534210]
[-147.34712219 84.20397949]
[-134.19308472 76.27512360]
[-118.83662415 76.00160980]
[-105.40856171 83.45699310]
[-97.52098083 96.63582611]
[-82.52427673 96.32169342]
[-67.52756500 96.00756073]
[-52.53085327 95.69342041]
[-37.53414154 95.37928772]
[-22.53743172 95.06514740]
[-7.54072189 94.75101471]
[7.45598841 94.43687439]
[22.45269966 94.12274170]
[37.44940948 93.80860138]
[52.44611740 93.49446869]
[67.44283295 93.18032837]
[82.43953705 92.86619568]
[98.41395569 81.11229706]
[116.12484741 90.03755951]
[130.96392822 87.84631348]
[145.80302429 85.65506744]
[160.64210510 83.46382141]
[175.48118591 81.27257538]
[190.32026672 79.08132935]
[205.15936279 76.89008331]
[219.99844360 74.69884491]
[234.83752441 72.50759888]
[249.67662048 70.31635284]
[264.51568604 68.12510681]
[279.35479736 65.93386078]
[294.19387817 63.74261475]
[309.03295898 61.55136871]
[323.87203979 59.36012268]
[336.38085938 48.75532913]
[351.72592163 54.53985977]
[354.12155151 70.76308441]
[341.10333252 80.73593903]
[326.06329346 74.19921112]
[311.22421265 76.39045715]
[296.38510132 78.58170319]
[281.54602051 80.77294159]
[266.70693970 82.96418762]
[251.86785889 85.15543365]
[237.02877808 87.34667969]
[222.18968201 89.53792572]
[207.35060120 91.72917175]
[192.51152039 93.92041779]
[177.67243958 96.11166382]
[162.83334351 98.30290985]
[147.99426270 100.49415588]
[133.15518188 102.68540192]
[118.31609344 104.87664795]
[113.85646820 112.93287659]
[106.12650299 117.93675232]
[96.95058441 118.70727539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% Start Annotations
1 36 0.0 0.6 colorpair
2 35 0.0 0.6 colorpair
3 34 0.0 0.6 colorpair
4 33 0.0 0.6 colorpair
5 32 0.0 0.6 colorpair
6 31 0.0 0.6 colorpair
7 30 0.0 0.6 colorpair
8 29 0.0 0.6 colorpair
9 28 0.0 0.6 colorpair
10 27 0.0 1 colorpair
11 26 0.0 0.6 colorpair
12 25 0.16 1 colorpair
13 24 0.16 1 colorpair
38 71 0.0 1 colorpair
39 70 0.0 0.6 colorpair
40 69 0.0 1 colorpair
41 68 0.0 0.6 colorpair
42 67 0.0 0.6 colorpair
43 66 0.0 0.6 colorpair
44 65 0.0 0.6 colorpair
45 64 0.0 0.6 colorpair
46 63 0.0 0.6 colorpair
47 62 0.0 0.6 colorpair
48 61 0.0 1 colorpair
49 60 0.0 0.6 colorpair
50 59 0.0 0.6 colorpair
51 58 0.0 0.6 colorpair
52 57 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 36 1 gmark
2 35 1 gmark
3 34 1 gmark
4 33 1 gmark
5 32 1 gmark
6 31 1 gmark
7 30 1 gmark
8 29 1 gmark
9 28 1 gmark
11 26 1 gmark
12 cmark
24 cmark
39 70 1 gmark
41 68 1 gmark
42 67 1 gmark
43 66 1 gmark
44 65 1 gmark
45 64 1 gmark
46 63 1 gmark
47 62 1 gmark
49 60 1 gmark
50 59 1 gmark
51 58 1 gmark
57 cmark

% End Annotations
showpage
end
%%EOF
