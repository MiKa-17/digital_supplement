%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 22:51:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCUGACGCAGUUGAGCAUGGCUUUCUGGAA____________CGAUCUGGCGGCACCGAUAAUUGCCGGGAUUAUCACAAAUUUGCUUUUCGACU___GGCUACAUGACAGGAAG________________________________________\
) } def
/len { sequence length } bind def

/coor [
[61.23071671 443.98413086]
[46.36615372 441.98178101]
[31.60228539 439.33743286]
[16.96682358 436.05596924]
[2.48724866 432.14364624]
[-11.80925655 427.60772705]
[-25.89585114 422.45675659]
[-39.74608994 416.70043945]
[-53.33397293 410.34951782]
[-66.63398743 403.41595459]
[-79.62116241 395.91278076]
[-92.27111816 387.85403442]
[-104.56010437 379.25488281]
[-116.46504974 370.13146973]
[-127.96360779 360.50091553]
[-139.03417969 350.38128662]
[-149.65600586 339.79159546]
[-159.80912781 328.75170898]
[-169.47447205 317.28240967]
[-178.63391113 305.40515137]
[-187.27024841 293.14227295]
[-195.36726379 280.51678467]
[-202.90977478 267.55239868]
[-209.88359070 254.27343750]
[-216.27563477 240.70486450]
[-222.07389832 226.87213135]
[-227.26750183 212.80119324]
[-231.84671021 198.51850891]
[-235.80290222 184.05084229]
[-239.12866211 169.42538452]
[-241.81773376 154.66960144]
[-243.86509705 139.81117249]
[-245.26687622 124.87799835]
[-246.02046204 109.89812469]
[-246.12442017 94.89966583]
[-245.57858276 79.91078949]
[-244.38394165 64.95961761]
[-242.54277039 50.07423401]
[-240.05850220 35.28258514]
[-236.93582153 20.61243057]
[-233.18057251 6.09132051]
[-228.79980469 -8.25348663]
[-223.80175781 -22.39505959]
[-218.19581604 -36.30684662]
[-211.99247742 -49.96273422]
[-205.20341492 -63.33708572]
[-197.84136963 -76.40478516]
[-189.92016602 -89.14130402]
[-181.45465088 -101.52272797]
[-172.46073914 -113.52581787]
[-162.95532227 -125.12803650]
[-152.95622253 -136.30760193]
[-142.48222351 -147.04351807]
[-131.55299377 -157.31564331]
[-120.18904877 -167.10469055]
[-108.41172791 -176.39225769]
[-117.18107605 -188.56182861]
[-125.95043182 -200.73139954]
[-134.71978760 -212.90097046]
[-149.99240112 -211.27534485]
[-164.02517700 -217.51849365]
[-173.04336548 -229.95101929]
[-174.62110901 -245.22866821]
[-168.33401489 -259.24179077]
[-155.87327576 -268.22097778]
[-140.59075928 -269.75082397]
[-126.59739685 -263.41983032]
[-117.65733337 -250.93099976]
[-116.17539215 -235.64378357]
[-122.55021667 -221.67033386]
[-113.78086090 -209.50076294]
[-105.01150513 -197.33119202]
[-96.24215698 -185.16162109]
[-83.70510101 -193.39489746]
[-70.82316589 -201.07736206]
[-57.62052536 -208.19458008]
[-44.12197113 -214.73320007]
[-30.35284233 -220.68093872]
[-16.33898926 -226.02664185]
[-2.10672259 -230.76025391]
[12.31723881 -234.87290955]
[26.90581512 -238.35687256]
[41.63161850 -241.20559692]
[56.46700287 -243.41375732]
[71.38411713 -244.97718811]
[86.35494995 -245.89295959]
[101.35140228 -246.15936279]
[116.34531403 -245.77587891]
[131.30854797 -244.74324036]
[146.21299744 -243.06338501]
[161.03068542 -240.73947144]
[175.73379517 -237.77584839]
[190.29472351 -234.17808533]
[204.68614197 -229.95294189]
[218.88101196 -225.10835266]
[232.85269165 -219.65339661]
[246.57496643 -213.59832764]
[260.02206421 -206.95451355]
[273.16873169 -199.73442078]
[285.99029541 -191.95161438]
[298.46267700 -183.62069702]
[310.56246948 -174.75730896]
[322.26693726 -165.37809753]
[333.55413818 -155.50067139]
[344.40286255 -145.14355469]
[354.79275513 -134.32621765]
[364.70431519 -123.06896210]
[374.11889648 -111.39291382]
[383.01885986 -99.31999969]
[391.38748169 -86.87287903]
[399.20904541 -74.07492828]
[406.46887207 -60.95016861]
[413.15335083 -47.52324295]
[419.24990845 -33.81935883]
[424.74713135 -19.86424065]
[429.63464355 -5.68409252]
[433.90332031 8.69446754]
[437.54513550 23.24444389]
[440.55322266 37.93851852]
[442.92196655 52.74911118]
[444.64694214 67.64840698]
[445.72485352 82.60844421]
[446.15368652 97.60112762]
[445.93267822 112.59832001]
[445.06219482 127.57186127]
[443.54391479 142.49363708]
[441.38067627 157.33563232]
[438.57650757 172.06999207]
[435.13668823 186.66903687]
[431.06771851 201.10537720]
[426.37719727 215.35189819]
[421.07391357 229.38186646]
[415.16787720 243.16893005]
[408.67013550 256.68722534]
[401.59289551 269.91131592]
[393.94943237 282.81646729]
[385.75415039 295.37835693]
[377.02236938 307.57345581]
[367.77050781 319.37887573]
[358.01593018 330.77243042]
[347.77697754 341.73272705]
[337.07281494 352.23919678]
[325.92361450 362.27209473]
[314.35021973 371.81262207]
[302.37445068 380.84286499]
[290.01870728 389.34585571]
[277.30624390 397.30560303]
[264.26092529 404.70721436]
[250.90719604 411.53674316]
[237.27017212 417.78143311]
[223.37542725 423.42950439]
[209.24905396 428.47036743]
[194.91758728 432.89456177]
[180.40791321 436.69378662]
[165.74729919 439.86090088]
[150.96324158 442.38995361]
[136.08349609 444.27621460]
[121.13601685 445.51614380]
[106.14885712 446.10739136]
[91.15015411 446.04885864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[56 73]
[57 72]
[58 71]
[59 70]
] def

init

% Start Annotations
56 73 0.0 0.2 colorpair
57 72 0.32 1 colorpair
58 71 0.32 0.6 colorpair
59 70 0.32 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
56 73 2 gmark
57 cmark
72 cmark
58 71 1 gmark
58 cmark
71 cmark
59 70 1 gmark
59 cmark
70 cmark

% End Annotations
showpage
end
%%EOF
