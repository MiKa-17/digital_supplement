%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 22:51:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGA_GC________AC____UUGAGCGUGG___UCUGGCACGAUCUGGCGGCUCCGAAUAUUGAUGGUAUUAUCACUG_AUCUGCUUGUCGGCUUGCUAC_U_ACCGGAAGUAA__________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50999451 91.89981842]
[62.55600739 90.70036316]
[47.66198349 88.90357208]
[32.85177231 86.51231384]
[18.14909554 83.53041840]
[3.57749462 79.96266174]
[-10.83969402 75.81475830]
[-25.07938194 71.09335327]
[-39.11876678 65.80599976]
[-52.93536758 59.96116638]
[-66.50704956 53.56822205]
[-79.81208801 46.63739395]
[-92.82917786 39.17978668]
[-105.53746796 31.20734215]
[-117.91660309 22.73282623]
[-129.94676208 13.76981163]
[-141.60868835 4.33265114]
[-152.88369751 -5.56354189]
[-163.75372314 -15.90292072]
[-174.20138550 -26.66892624]
[-184.20993042 -37.84431839]
[-193.76335144 -49.41120148]
[-202.84632874 -61.35105133]
[-211.44432068 -73.64474487]
[-219.54356384 -86.27259827]
[-227.13107300 -99.21439362]
[-234.19473267 -112.44939423]
[-240.72319031 -125.95641327]
[-246.70602417 -139.71382141]
[-252.13362122 -153.69958496]
[-256.99731445 -167.89129639]
[-261.28933716 -182.26625061]
[-265.00274658 -196.80140686]
[-268.13165283 -211.47351074]
[-270.67102051 -226.25904846]
[-272.61679077 -241.13433838]
[-273.96585083 -256.07556152]
[-274.71606445 -271.05880737]
[-274.86614990 -286.06008911]
[-274.41595459 -301.05532837]
[-273.36618042 -316.02056885]
[-271.71844482 -330.93182373]
[-269.47546387 -345.76522827]
[-266.64080811 -360.49697876]
[-263.21899414 -375.10354614]
[-259.21551514 -389.56152344]
[-254.63679504 -403.84771729]
[-249.49015808 -417.93930054]
[-243.78382874 -431.81365967]
[-237.52697754 -445.44863892]
[-230.72958374 -458.82232666]
[-223.40257263 -471.91336060]
[-215.55764771 -484.70077515]
[-207.20739746 -497.16406250]
[-198.36517334 -509.28329468]
[-189.04515076 -521.03906250]
[-179.26223755 -532.41247559]
[-169.03211975 -543.38537598]
[-158.37117004 -553.94024658]
[-147.29644775 -564.06005859]
[-135.82571411 -573.72869873]
[-123.97733307 -582.93066406]
[-111.77025604 -591.65124512]
[-99.22406006 -599.87640381]
[-86.35881805 -607.59301758]
[-73.19513702 -614.78869629]
[-59.75410080 -621.45196533]
[-46.05723572 -627.57208252]
[-32.12646866 -633.13934326]
[-17.98411369 -638.14477539]
[-3.65281868 -642.58032227]
[10.84446812 -646.43896484]
[25.48452950 -649.71447754]
[40.24391937 -652.40167236]
[55.09900665 -654.49615479]
[70.02600098 -655.99462891]
[85.00099182 -656.89465332]
[100.00000000 -657.19482422]
[114.99900818 -656.89465332]
[129.97399902 -655.99462891]
[144.90098572 -654.49615479]
[159.75607300 -652.40167236]
[174.51547241 -649.71447754]
[189.15553284 -646.43896484]
[203.65281677 -642.58032227]
[217.98411560 -638.14477539]
[232.12646484 -633.13934326]
[246.05723572 -627.57208252]
[259.75408936 -621.45196533]
[273.19512939 -614.78869629]
[286.35882568 -607.59301758]
[299.22406006 -599.87640381]
[311.77026367 -591.65124512]
[323.97732544 -582.93066406]
[335.82571411 -573.72869873]
[347.29644775 -564.06005859]
[358.37115479 -553.94024658]
[369.03213501 -543.38537598]
[379.26223755 -532.41247559]
[389.04513550 -521.03906250]
[398.36517334 -509.28329468]
[407.20739746 -497.16406250]
[415.55764771 -484.70077515]
[423.40255737 -471.91336060]
[430.72958374 -458.82232666]
[437.52697754 -445.44863892]
[443.78384399 -431.81365967]
[449.49014282 -417.93930054]
[454.63681030 -403.84771729]
[459.21551514 -389.56152344]
[463.21899414 -375.10354614]
[466.64080811 -360.49697876]
[469.47546387 -345.76522827]
[471.71844482 -330.93182373]
[473.36618042 -316.02056885]
[474.41595459 -301.05532837]
[474.86614990 -286.06008911]
[474.71606445 -271.05880737]
[473.96585083 -256.07556152]
[472.61679077 -241.13433838]
[470.67102051 -226.25904846]
[468.13165283 -211.47351074]
[465.00274658 -196.80140686]
[461.28933716 -182.26625061]
[456.99731445 -167.89129639]
[452.13363647 -153.69958496]
[446.70602417 -139.71382141]
[440.72320557 -125.95641327]
[434.19473267 -112.44939423]
[427.13107300 -99.21439362]
[419.54354858 -86.27259827]
[411.44430542 -73.64474487]
[402.84631348 -61.35105133]
[393.76333618 -49.41120148]
[384.20993042 -37.84431839]
[374.20138550 -26.66892624]
[363.75372314 -15.90292072]
[352.88369751 -5.56354189]
[341.60867310 4.33265114]
[329.94677734 13.76981163]
[317.91659546 22.73282623]
[305.53747559 31.20734215]
[292.82916260 39.17978668]
[279.81210327 46.63739395]
[266.50704956 53.56822205]
[252.93536377 59.96116638]
[239.11877441 65.80599976]
[225.07937622 71.09335327]
[210.83969116 75.81475830]
[196.42250061 79.96266174]
[181.85090637 83.53041840]
[167.14822388 86.51231384]
[152.33801270 88.90357208]
[137.44398499 90.70036316]
[122.49000549 91.89981842]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
