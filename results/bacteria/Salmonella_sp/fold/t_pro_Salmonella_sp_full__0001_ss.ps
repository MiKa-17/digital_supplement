%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 22:51:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________AUGACGCUCACACAGUUGGGCGUGGCCUUCUGGCACG___AUCUGACGGCGCCGAUCAUUGCCGGCAUUACCGCAAGUGCGAUUUGCGACU___GGCUGCAUGACAGGAAG________________________________________\
) } def
/len { sequence length } bind def

/coor [
[86.30782318 450.66943359]
[71.33631897 449.76409912]
[56.41717911 448.21984863]
[41.57764816 446.03955078]
[26.84483337 443.22711182]
[12.24564934 439.78775024]
[-2.19323754 435.72769165]
[-16.44545174 431.05435181]
[-30.48495865 425.77630615]
[-44.28611374 419.90319824]
[-57.82370758 413.44570923]
[-71.07300568 406.41564941]
[-84.00981903 398.82589722]
[-96.61050415 390.69027710]
[-108.85205078 382.02368164]
[-120.71208954 372.84191895]
[-132.16896057 363.16174316]
[-143.20175171 353.00088501]
[-153.79028320 342.37786865]
[-163.91522217 331.31210327]
[-173.55807495 319.82382202]
[-182.70124817 307.93399048]
[-191.32800293 295.66430664]
[-199.42260742 283.03726196]
[-206.97026062 270.07583618]
[-213.95719910 256.80374146]
[-220.37062073 243.24522400]
[-226.19885254 229.42504883]
[-231.43121338 215.36845398]
[-236.05816650 201.10112000]
[-240.07125854 186.64910889]
[-243.46315002 172.03881836]
[-246.22766113 157.29693604]
[-248.35972595 142.45039368]
[-249.85545349 127.52631378]
[-250.71211243 112.55194092]
[-250.92813110 97.55464935]
[-250.50312805 82.56182098]
[-249.43786621 67.60084534]
[-247.73431396 52.69905472]
[-245.39555359 37.88366699]
[-242.42588806 23.18174362]
[-238.83071899 8.62014103]
[-234.61660767 -5.77454042]
[-229.79127502 -19.97600746]
[-224.36352539 -33.95832062]
[-218.34327698 -47.69593430]
[-211.74151611 -61.16375732]
[-204.57031250 -74.33718872]
[-196.84275818 -87.19216919]
[-188.57296753 -99.70520782]
[-179.77606201 -111.85345459]
[-170.46809387 -123.61471558]
[-160.66607666 -134.96751404]
[-150.38790894 -145.89109802]
[-139.65235901 -156.36552429]
[-128.47904968 -166.37164307]
[-116.88838959 -175.89120483]
[-104.90154266 -184.90681458]
[-92.54041290 -193.40197754]
[-79.82756805 -201.36120605]
[-66.78624725 -208.76994324]
[-53.44026566 -215.61466980]
[-39.81399536 -221.88285828]
[-25.93233490 -227.56309509]
[-11.82063675 -232.64497375]
[2.49531984 -237.11921692]
[16.98938370 -240.97766113]
[31.63508224 -244.21325684]
[46.40565872 -246.82009888]
[61.27413177 -248.79341125]
[76.21334839 -250.12959290]
[91.19601440 -250.82620239]
[106.19476318 -250.88197327]
[106.77999878 -265.87054443]
[107.36524200 -280.85913086]
[107.95048523 -295.84771729]
[95.67943573 -305.34512329]
[91.36671448 -320.25082397]
[96.67066193 -334.83328247]
[109.55179596 -343.48522949]
[125.05705261 -342.87979126]
[137.22434998 -333.24981689]
[141.37512207 -318.29821777]
[135.91329956 -303.77416992]
[122.93906403 -295.26245117]
[122.35382080 -280.27389526]
[121.76857758 -265.28530884]
[121.18333435 -250.29672241]
[136.13206482 -249.07164001]
[151.01480103 -247.20890808]
[165.80435181 -244.71192932]
[180.47369385 -241.58529663]
[194.99604797 -237.83470154]
[209.34486389 -233.46699524]
[223.49394226 -228.49014282]
[237.41744995 -222.91326904]
[251.08993530 -216.74653625]
[264.48641968 -210.00120544]
[277.58245850 -202.68960571]
[290.35412598 -194.82510376]
[302.77804565 -186.42205811]
[314.83157349 -177.49580383]
[326.49267578 -168.06266785]
[337.74008179 -158.13986206]
[348.55319214 -147.74552917]
[358.91226196 -136.89865112]
[368.79840088 -125.61903381]
[378.19354248 -113.92729187]
[387.08050537 -101.84477234]
[395.44308472 -89.39354706]
[403.26599121 -76.59636688]
[410.53491211 -63.47660828]
[417.23660278 -50.05823135]
[423.35879517 -36.36574554]
[428.89035034 -22.42416763]
[433.82110596 -8.25896072]
[438.14208984 6.10399818]
[441.84539795 20.63847351]
[444.92428589 35.31791687]
[447.37310791 50.11550903]
[449.18737793 65.00422668]
[450.36383057 79.95687103]
[450.90026855 94.94612122]
[450.79571533 109.94461060]
[450.05038452 124.92493439]
[448.66564941 139.85972595]
[446.64401245 154.72171021]
[443.98916626 169.48371887]
[440.70596313 184.11882019]
[436.80041504 198.60026550]
[432.27963257 212.90159607]
[427.15191650 226.99670410]
[421.42657471 240.85981750]
[415.11410522 254.46563721]
[408.22601318 267.78930664]
[400.77493286 280.80645752]
[392.77441406 293.49334717]
[384.23910522 305.82681274]
[375.18457031 317.78427124]
[365.62738037 329.34393311]
[355.58496094 340.48464966]
[345.07568359 351.18606567]
[334.11874390 361.42868042]
[322.73413086 371.19372559]
[310.94268799 380.46340942]
[298.76589966 389.22076416]
[286.22604370 397.44982910]
[273.34600830 405.13552856]
[260.14932251 412.26388550]
[246.66009521 418.82180786]
[232.90298462 424.79736328]
[218.90309143 430.17962646]
[204.68601990 434.95877075]
[190.27770996 439.12603760]
[175.70449829 442.67382812]
[160.99299622 445.59570312]
[146.17007446 447.88626099]
[131.26283264 449.54138184]
[116.29846954 450.55798340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[74 89]
[75 88]
[76 87]
[77 86]
] def

init

% Start Annotations
74 89 0.16 1 colorpair
75 88 0.32 1 colorpair
76 87 0.0 0.2 colorpair
77 86 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
89 cmark
75 cmark
88 cmark
76 87 2 gmark
77 cmark
86 cmark

% End Annotations
showpage
end
%%EOF
