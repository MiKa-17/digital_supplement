%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 22:51:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________AUGAGCGUAGUG_U_____AUGAUCAUGCUUGUCCUGAUACUGAUUGUUGUAUCACU_______G_AUCUGCUUGACGGCUUACUGAA__ACC______A___________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50987244 91.90361023]
[62.55530167 90.71173859]
[47.65994263 88.92626953]
[32.84734344 86.55001831]
[18.14092445 83.58675385]
[3.56394291 80.04115295]
[-10.86055279 75.91882324]
[-25.10975456 71.22628784]
[-39.16113281 65.97095490]
[-52.99246597 60.16115189]
[-66.58188629 53.80605316]
[-79.90791321 46.91571045]
[-92.94946289 39.50101852]
[-105.68591309 31.57370186]
[-118.09713745 23.14629364]
[-130.16351318 14.23212242]
[-141.86593628 4.84528112]
[-153.18592834 -4.99938726]
[-164.10557556 -15.28631592]
[-174.60762024 -25.99923897]
[-184.67546082 -37.12121964]
[-194.29315186 -48.63466644]
[-203.44552612 -60.52137756]
[-212.11807251 -72.76255798]
[-220.29710388 -85.33885193]
[-227.96966553 -98.23037720]
[-235.12365723 -111.41674042]
[-241.74774170 -124.87709045]
[-247.83145142 -138.59016418]
[-253.36515808 -152.53425598]
[-258.34014893 -166.68731689]
[-262.74850464 -181.02697754]
[-266.58328247 -195.53057861]
[-269.83840942 -210.17515564]
[-272.50875854 -224.93757629]
[-274.59008789 -239.79447937]
[-276.07910156 -254.72239685]
[-276.97348022 -269.69769287]
[-277.27175903 -284.69671631]
[-276.97351074 -299.69573975]
[-276.07919312 -314.67105103]
[-274.59020996 -329.59896851]
[-272.50891113 -344.45587158]
[-269.83862305 -359.21829224]
[-266.58352661 -373.86288452]
[-262.74877930 -388.36648560]
[-258.34045410 -402.70617676]
[-253.36550903 -416.85925293]
[-247.83183289 -430.80334473]
[-241.74816895 -444.51644897]
[-235.12411499 -457.97680664]
[-227.97016907 -471.16317749]
[-220.29762268 -484.05471802]
[-212.11863708 -496.63104248]
[-203.44610596 -508.87225342]
[-194.29377747 -520.75897217]
[-184.67610168 -532.27246094]
[-174.60830688 -543.39447021]
[-164.10629272 -554.10742188]
[-153.18666077 -564.39434814]
[-141.86669922 -574.23907471]
[-130.16429138 -583.62597656]
[-118.09795380 -592.54016113]
[-105.68675232 -600.96759033]
[-92.95031738 -608.89495850]
[-79.90878296 -616.30969238]
[-66.58277893 -623.20007324]
[-52.99337769 -629.55517578]
[-39.16205597 -635.36505127]
[-25.11069298 -640.62036133]
[-10.86150360 -645.31298828]
[3.56298137 -649.43530273]
[18.13995361 -652.98095703]
[32.84636307 -655.94427490]
[47.65895462 -658.32055664]
[62.55431366 -660.10607910]
[77.50888062 -661.29797363]
[92.49900818 -661.89440918]
[107.50099182 -661.89440918]
[122.49111938 -661.29797363]
[137.44569397 -660.10607910]
[152.34104919 -658.32055664]
[167.15364075 -655.94427490]
[181.86004639 -652.98095703]
[196.43701172 -649.43530273]
[210.86151123 -645.31298828]
[225.11068726 -640.62036133]
[239.16206360 -635.36505127]
[252.99337769 -629.55517578]
[266.58279419 -623.20007324]
[279.90878296 -616.30969238]
[292.95031738 -608.89495850]
[305.68673706 -600.96759033]
[318.09796143 -592.54016113]
[330.16430664 -583.62597656]
[341.86669922 -574.23907471]
[353.18667603 -564.39434814]
[364.10629272 -554.10742188]
[374.60830688 -543.39447021]
[384.67611694 -532.27246094]
[394.29379272 -520.75897217]
[403.44610596 -508.87225342]
[412.11862183 -496.63104248]
[420.29763794 -484.05471802]
[427.97015381 -471.16317749]
[435.12411499 -457.97680664]
[441.74816895 -444.51644897]
[447.83184814 -430.80334473]
[453.36550903 -416.85925293]
[458.34045410 -402.70617676]
[462.74877930 -388.36648560]
[466.58352661 -373.86288452]
[469.83862305 -359.21829224]
[472.50891113 -344.45587158]
[474.59020996 -329.59896851]
[476.07919312 -314.67105103]
[476.97351074 -299.69573975]
[477.27175903 -284.69671631]
[476.97348022 -269.69769287]
[476.07910156 -254.72239685]
[474.59008789 -239.79447937]
[472.50875854 -224.93757629]
[469.83840942 -210.17515564]
[466.58328247 -195.53057861]
[462.74850464 -181.02697754]
[458.34014893 -166.68731689]
[453.36517334 -152.53425598]
[447.83145142 -138.59016418]
[441.74774170 -124.87709045]
[435.12365723 -111.41674042]
[427.96966553 -98.23037720]
[420.29708862 -85.33885193]
[412.11807251 -72.76255798]
[403.44552612 -60.52137756]
[394.29315186 -48.63466644]
[384.67544556 -37.12121964]
[374.60763550 -25.99923897]
[364.10559082 -15.28631592]
[353.18591309 -4.99938726]
[341.86593628 4.84528112]
[330.16351318 14.23212242]
[318.09713745 23.14629364]
[305.68591309 31.57370186]
[292.94946289 39.50101852]
[279.90789795 46.91571045]
[266.58187866 53.80605316]
[252.99246216 60.16115189]
[239.16113281 65.97095490]
[225.10975647 71.22628784]
[210.86054993 75.91882324]
[196.43605042 80.04115295]
[181.85906982 83.58675385]
[167.15266418 86.55001831]
[152.34005737 88.92626953]
[137.44470215 90.71173859]
[122.49012756 91.90361023]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
