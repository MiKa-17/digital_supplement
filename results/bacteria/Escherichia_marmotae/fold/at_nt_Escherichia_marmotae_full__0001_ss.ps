%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:23:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____________GGGUGAUAG_AGGCUGUCUCCCUCUGGUA_UGAGCGUCAACGGCAACGAGAGAAAAUCCCCACU_________________C__________________________________________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50527954 92.06371307]
[62.52959824 91.19149780]
[47.58562088 89.88407898]
[32.68598557 88.14257812]
[17.84330940 85.96846008]
[3.07014346 83.36357117]
[-11.62100887 80.33010101]
[-26.21772003 76.87063599]
[-40.70763779 72.98809052]
[-55.07850266 68.68574524]
[-69.31815338 63.96725464]
[-83.41454315 58.83660126]
[-97.35575104 53.29813004]
[-111.12997437 47.35652542]
[-124.72556305 41.01681519]
[-138.13101196 34.28436279]
[-151.33496094 27.16486359]
[-164.32627869 19.66434479]
[-177.09393311 11.78914833]
[-189.62715149 3.54594016]
[-201.91529846 -5.05830574]
[-213.94801331 -14.01630878]
[-225.71508789 -23.32048988]
[-237.20657349 -32.96297836]
[-248.41275024 -42.93561554]
[-259.32412720 -53.22995758]
[-269.93148804 -63.83730316]
[-280.22586060 -74.74867249]
[-290.19851685 -85.95483398]
[-299.84103394 -97.44631195]
[-309.14523315 -109.21337128]
[-318.10324097 -121.24606323]
[-326.70751953 -133.53421021]
[-334.95074463 -146.06741333]
[-342.82595825 -158.83505249]
[-350.32647705 -171.82635498]
[-357.44601440 -185.03030396]
[-364.17849731 -198.43574524]
[-370.51821899 -212.03131104]
[-376.45983887 -225.80552673]
[-381.99832153 -239.74671936]
[-387.12899780 -253.84310913]
[-391.84753418 -268.08276367]
[-396.14987183 -282.45361328]
[-400.03247070 -296.94351196]
[-403.49194336 -311.54022217]
[-406.52542114 -326.23138428]
[-409.13034058 -341.00454712]
[-411.30450439 -355.84719849]
[-413.04602051 -370.74685669]
[-414.35345459 -385.69082642]
[-415.22570801 -400.66650391]
[-415.66201782 -415.66122437]
[-415.66201782 -430.66229248]
[-415.22570801 -445.65701294]
[-414.35348511 -460.63269043]
[-413.04608154 -475.57666016]
[-411.30456543 -490.47628784]
[-409.13043213 -505.31896973]
[-406.52554321 -520.09216309]
[-403.49206543 -534.78326416]
[-400.03259277 -549.38000488]
[-396.15002441 -563.86993408]
[-391.84768677 -578.24078369]
[-387.12918091 -592.48040771]
[-381.99853516 -606.57678223]
[-376.46005249 -620.51800537]
[-370.51843262 -634.29223633]
[-364.17871094 -647.88781738]
[-357.44625854 -661.29327393]
[-350.32675171 -674.49719238]
[-342.82623291 -687.48852539]
[-334.95101929 -700.25616455]
[-326.70779419 -712.78936768]
[-318.10354614 -725.07751465]
[-309.14553833 -737.11022949]
[-299.84136963 -748.87731934]
[-290.19885254 -760.36877441]
[-280.22622681 -771.57495117]
[-269.93188477 -782.48632812]
[-259.32452393 -793.09368896]
[-248.41314697 -803.38806152]
[-237.20698547 -813.36071777]
[-225.71549988 -823.00323486]
[-213.94844055 -832.30737305]
[-201.91574097 -841.26544189]
[-189.62759399 -849.86968994]
[-177.09439087 -858.11291504]
[-164.32673645 -865.98809814]
[-151.33543396 -873.48864746]
[-138.13146973 -880.60815430]
[-124.72603607 -887.34063721]
[-111.13046265 -893.68035889]
[-97.35623932 -899.62194824]
[-83.41504669 -905.16046143]
[-69.31865692 -910.29113770]
[-55.07900620 -915.00964355]
[-40.70814896 -919.31195068]
[-26.21823502 -923.19451904]
[-11.62152767 -926.65399170]
[3.06962180 -929.68750000]
[17.84278488 -932.29241943]
[32.68545914 -934.46655273]
[47.58509064 -936.20806885]
[62.52906799 -937.51550293]
[77.50475311 -938.38769531]
[92.49946594 -938.82403564]
[107.50053406 -938.82403564]
[122.49524689 -938.38769531]
[137.47093201 -937.51550293]
[152.41491699 -936.20806885]
[167.31454468 -934.46655273]
[182.15721130 -932.29241943]
[196.93037415 -929.68750000]
[211.62152100 -926.65399170]
[226.21823120 -923.19451904]
[240.70814514 -919.31195068]
[255.07901001 -915.00964355]
[269.31866455 -910.29113770]
[283.41503906 -905.16046143]
[297.35623169 -899.62194824]
[311.13046265 -893.68035889]
[324.72604370 -887.34063721]
[338.13146973 -880.60815430]
[351.33541870 -873.48864746]
[364.32672119 -865.98809814]
[377.09439087 -858.11291504]
[389.62759399 -849.86968994]
[401.91574097 -841.26544189]
[413.94842529 -832.30737305]
[425.71551514 -823.00323486]
[437.20697021 -813.36071777]
[448.41314697 -803.38806152]
[459.32452393 -793.09368896]
[469.93188477 -782.48632812]
[480.22622681 -771.57495117]
[490.19885254 -760.36877441]
[499.84136963 -748.87731934]
[509.14553833 -737.11022949]
[518.10357666 -725.07751465]
[526.70782471 -712.78936768]
[534.95104980 -700.25616455]
[542.82623291 -687.48852539]
[550.32672119 -674.49719238]
[557.44622803 -661.29327393]
[564.17871094 -647.88781738]
[570.51843262 -634.29223633]
[576.46002197 -620.51800537]
[581.99853516 -606.57678223]
[587.12921143 -592.48040771]
[591.84765625 -578.24078369]
[596.15002441 -563.86993408]
[600.03259277 -549.38000488]
[603.49206543 -534.78326416]
[606.52551270 -520.09216309]
[609.13043213 -505.31896973]
[611.30456543 -490.47628784]
[613.04608154 -475.57666016]
[614.35351562 -460.63269043]
[615.22570801 -445.65701294]
[615.66198730 -430.66229248]
[615.66198730 -415.66122437]
[615.22570801 -400.66650391]
[614.35345459 -385.69082642]
[613.04602051 -370.74685669]
[611.30450439 -355.84719849]
[609.13037109 -341.00454712]
[606.52545166 -326.23138428]
[603.49194336 -311.54022217]
[600.03247070 -296.94351196]
[596.14990234 -282.45361328]
[591.84753418 -268.08276367]
[587.12902832 -253.84310913]
[581.99835205 -239.74671936]
[576.45983887 -225.80552673]
[570.51818848 -212.03131104]
[564.17846680 -198.43574524]
[557.44598389 -185.03030396]
[550.32647705 -171.82635498]
[542.82592773 -158.83505249]
[534.95074463 -146.06741333]
[526.70751953 -133.53421021]
[518.10327148 -121.24606323]
[509.14523315 -109.21337128]
[499.84103394 -97.44631195]
[490.19851685 -85.95483398]
[480.22586060 -74.74867249]
[469.93148804 -63.83730316]
[459.32412720 -53.22995758]
[448.41275024 -42.93561554]
[437.20657349 -32.96297836]
[425.71508789 -23.32048988]
[413.94799805 -14.01630878]
[401.91531372 -5.05830574]
[389.62713623 3.54594016]
[377.09393311 11.78914833]
[364.32626343 19.66434479]
[351.33496094 27.16486359]
[338.13101196 34.28436279]
[324.72555542 41.01681519]
[311.12997437 47.35652542]
[297.35574341 53.29813004]
[283.41455078 58.83660126]
[269.31814575 63.96725464]
[255.07850647 68.68574524]
[240.70764160 72.98809052]
[226.21771240 76.87063599]
[211.62100220 80.33010101]
[196.92985535 83.36357117]
[182.15669250 85.96846008]
[167.31401062 88.14257812]
[152.41438293 89.88407898]
[137.47039795 91.19149780]
[122.49472046 92.06371307]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
