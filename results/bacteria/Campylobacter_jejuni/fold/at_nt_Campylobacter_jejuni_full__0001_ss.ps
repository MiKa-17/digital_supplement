%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:09:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACUUCCUAAAUGAAAGUUUAGCGAAGAAUUGGCUUAUCUUUUAGAUAGGUUGCCCCGUCAUAGAGCGGGGAUAAU\
) } def
/len { sequence length } bind def

/coor [
[84.28333282 138.10968018]
[77.21427155 134.35362244]
[71.00441742 129.30216980]
[65.88792419 123.14579010]
[62.05773163 116.11662292]
[47.41508865 119.37130737]
[32.77244568 122.62599182]
[18.12979889 125.88066864]
[3.55475926 129.42584229]
[-10.94691372 133.26008606]
[-25.44858742 137.09432983]
[-39.95026016 140.92858887]
[-54.45193481 144.76283264]
[-68.95360565 148.59709167]
[-80.20024872 160.53211975]
[-96.09519958 156.49694824]
[-100.28709412 140.64260864]
[-88.46367645 129.27868652]
[-72.78785706 134.09541321]
[-58.28618240 130.26116943]
[-43.78451157 126.42691040]
[-29.28283691 122.59266663]
[-14.78116322 118.75841522]
[-0.27949020 114.92416382]
[5.53813553 110.03776550]
[14.87511730 111.23802948]
[29.51776123 107.98334503]
[44.16040802 104.72866058]
[58.80305099 101.47398376]
[60.87635803 87.01147461]
[67.86412048 74.18050385]
[78.88858032 64.59281158]
[92.56491852 59.45273209]
[107.17520905 59.40594101]
[112.42987061 45.35643768]
[117.68453217 31.30693626]
[122.93919373 17.25743484]
[128.19386292 3.20793152]
[133.44851685 -10.84157085]
[138.70318604 -24.89107323]
[143.95783997 -38.94057465]
[149.21250916 -52.99007797]
[149.09793091 -69.94364166]
[165.35720825 -74.74695587]
[174.47383118 -60.45277786]
[163.26200867 -47.73541641]
[158.00735474 -33.68591309]
[152.75268555 -19.63641167]
[147.49801636 -5.58690834]
[142.24336243 8.46259403]
[136.98869324 22.51209641]
[131.73403931 36.56159973]
[126.47937012 50.61110306]
[121.22470856 64.66060638]
[138.00648499 84.03540039]
[140.09411621 109.58246613]
[153.80535889 115.66534424]
[167.51661682 121.74822235]
[181.22787476 127.83110809]
[194.93913269 133.91398621]
[208.65039062 139.99685669]
[223.30546570 134.08041382]
[237.81886292 140.33634949]
[243.58004761 155.05316162]
[237.17100525 169.49960327]
[222.39411926 175.10487366]
[208.01623535 168.54345703]
[202.56752014 153.70811462]
[188.85626221 147.62524414]
[175.14500427 141.54235840]
[161.43374634 135.45948792]
[147.72248840 129.37660217]
[134.01123047 123.29372406]
[128.86804199 129.42782593]
[122.63631439 134.45227051]
[115.55100250 138.17758179]
[107.87930298 140.46328735]
[99.91048431 141.22320557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[8 26]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% Start Annotations
5 29 0.0 1 colorpair
6 28 0.16 1 colorpair
7 27 0.0 1 colorpair
8 26 0.16 1 colorpair
9 24 0.0 0.6 colorpair
10 23 0.0 0.6 colorpair
11 22 0.0 0.6 colorpair
12 21 0.0 0.6 colorpair
13 20 0.0 0.6 colorpair
14 19 0.0 0.6 colorpair
34 54 0.0 1 colorpair
35 53 0.0 1 colorpair
36 52 0.0 1 colorpair
37 51 0.16 1 colorpair
38 50 0.16 1 colorpair
39 49 0.0 1 colorpair
40 48 0.0 0.6 colorpair
41 47 0.0 0.6 colorpair
42 46 0.0 0.6 colorpair
56 73 0.0 1 colorpair
57 72 0.0 1 colorpair
58 71 0.0 1 colorpair
59 70 0.16 1 colorpair
60 69 0.0 1 colorpair
61 68 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
28 cmark
8 cmark
26 cmark
9 24 1 gmark
10 23 1 gmark
11 22 1 gmark
12 21 1 gmark
13 20 1 gmark
14 19 1 gmark
51 cmark
38 cmark
50 cmark
40 48 1 gmark
41 47 1 gmark
42 46 1 gmark
59 cmark
70 cmark

% End Annotations
showpage
end
%%EOF
