%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:13:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________________________________________AC_______AC______AACCCUCUGCGAAUUCUGUGUA____GUGGAUAGCGUGAAGUGACAGCGAAGAUGGAAUGCAGCGCCGGCAAACCGCGAC___C___G__________________CU______A_G__G_G____________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.39940643 579.79193115]
[77.40744781 579.32000732]
[62.43756485 578.37969971]
[47.50438309 576.97198486]
[32.62248993 575.09826660]
[17.80643463 572.76031494]
[3.07068777 569.96044922]
[-11.57035065 566.70135498]
[-26.10237503 562.98626709]
[-40.51118851 558.81878662]
[-54.78271103 554.20306396]
[-68.90299225 549.14349365]
[-82.85824585 543.64508057]
[-96.63483429 537.71319580]
[-110.21929169 531.35363770]
[-123.59834290 524.57257080]
[-136.75892639 517.37670898]
[-149.68817139 509.77301025]
[-162.37344360 501.76892090]
[-174.80236816 493.37228394]
[-186.96278381 484.59127808]
[-198.84280396 475.43450928]
[-210.43083191 465.91088867]
[-221.71556091 456.02975464]
[-232.68592834 445.80075073]
[-243.33123779 435.23388672]
[-253.64108276 424.33944702]
[-263.60537720 413.12811279]
[-273.21441650 401.61080933]
[-282.45880127 389.79882812]
[-291.32946777 377.70367432]
[-299.81781006 365.33718872]
[-307.91546631 352.71142578]
[-315.61456299 339.83877563]
[-322.90756226 326.73175049]
[-329.78735352 313.40322876]
[-336.24719238 299.86614990]
[-342.28079224 286.13381958]
[-347.88223267 272.21960449]
[-353.04608154 258.13711548]
[-357.76724243 243.90011597]
[-362.04113770 229.52250671]
[-365.86358643 215.01835632]
[-369.23083496 200.40180969]
[-372.13958740 185.68717957]
[-374.58703613 170.88880920]
[-376.57080078 156.02117920]
[-378.08886719 141.09881592]
[-379.13983154 126.13629913]
[-379.72262573 111.14823914]
[-379.83670044 96.14928436]
[-379.48193359 81.15409851]
[-378.65866089 66.17732239]
[-377.36770630 51.23358917]
[-375.61032104 36.33751297]
[-373.38821411 21.50363541]
[-370.70358276 6.74645710]
[-367.55902100 -7.91960478]
[-363.95764160 -22.48021889]
[-359.90289307 -36.92116165]
[-355.39883423 -51.22832108]
[-350.44976807 -65.38771820]
[-345.06057739 -79.38551331]
[-339.23654175 -93.20803833]
[-332.98333740 -106.84177399]
[-326.30706787 -120.27341461]
[-319.21426392 -133.48983765]
[-311.71182251 -146.47810364]
[-303.80712891 -159.22555542]
[-295.50787354 -171.71971130]
[-286.82220459 -183.94837952]
[-277.75854492 -195.89961243]
[-268.32577515 -207.56170654]
[-258.53314209 -218.92330933]
[-248.39018250 -229.97328186]
[-237.90682983 -240.70085144]
[-227.09329224 -251.09552002]
[-215.96017456 -261.14715576]
[-204.51832581 -270.84588623]
[-192.77894592 -280.18231201]
[-180.75349426 -289.14724731]
[-168.45372009 -297.73193359]
[-155.89163208 -305.92800903]
[-143.07952881 -313.72747803]
[-130.02992249 -321.12271118]
[-116.75554657 -328.10644531]
[-103.26938629 -334.67187500]
[-89.58461761 -340.81262207]
[-75.71460724 -346.52264404]
[-61.67290497 -351.79635620]
[-47.47323608 -356.62866211]
[-33.12947464 -361.01477051]
[-18.65563393 -364.95046997]
[-4.06585741 -368.43182373]
[10.62560081 -371.45550537]
[25.40438461 -374.01855469]
[40.25605392 -376.11840820]
[55.16609955 -377.75308228]
[70.11995697 -378.92095947]
[85.10300446 -379.62084961]
[100.10060120 -379.85214233]
[115.09810638 -379.61456299]
[130.08085632 -378.90838623]
[145.03422546 -377.73425293]
[159.94358826 -376.09332275]
[162.04977417 -390.94473267]
[164.15597534 -405.79611206]
[166.26216125 -420.64752197]
[168.36836243 -435.49890137]
[170.47456360 -450.35031128]
[157.76049805 -458.79513550]
[149.97698975 -471.92449951]
[148.66946411 -487.13150024]
[154.09751892 -501.39682007]
[165.18341064 -511.88803101]
[179.72604370 -516.52209473]
[194.83795166 -514.37896729]
[207.51866150 -505.88412476]
[215.25039673 -492.72424316]
[216.49803162 -477.51220703]
[211.01383972 -463.26837158]
[199.88671875 -452.82089233]
[185.32595825 -448.24411011]
[183.21975708 -433.39270020]
[181.11355591 -418.54132080]
[179.00737000 -403.68991089]
[176.90116882 -388.83853149]
[174.79498291 -373.98712158]
[189.57267761 -371.41787720]
[204.26286316 -368.38803101]
[218.85118103 -364.90051270]
[233.32336426 -360.95874023]
[247.66528320 -356.56658936]
[261.86291504 -351.72833252]
[275.90240479 -346.44869995]
[289.76998901 -340.73284912]
[303.45217896 -334.58636475]
[316.93557739 -328.01522827]
[330.20703125 -321.02590942]
[343.25350952 -313.62521362]
[356.06234741 -305.82037354]
[368.62097168 -297.61898804]
[380.91714478 -289.02911377]
[392.93881226 -280.05911255]
[404.67428589 -270.71777344]
[416.11203003 -261.01422119]
[427.24093628 -250.95791626]
[438.05007935 -240.55870056]
[448.52893066 -229.82672119]
[458.66723633 -218.77247620]
[468.45510864 -207.40676880]
[477.88296509 -195.74069214]
[486.94158936 -183.78565979]
[495.62213135 -171.55334473]
[503.91613770 -159.05569458]
[511.81546021 -146.30491638]
[519.31243896 -133.31349182]
[526.39965820 -120.09409332]
[533.07031250 -106.65965271]
[539.31774902 -93.02327728]
[545.13598633 -79.19831085]
[550.51928711 -65.19824219]
[555.46240234 -51.03676987]
[559.96044922 -36.72771835]
[564.00909424 -22.28507233]
[567.60437012 -7.72294426]
[570.74273682 6.94443893]
[573.42120361 21.70274544]
[575.63702393 36.53755569]
[577.38818359 51.43437195]
[578.67285156 66.37863922]
[579.48980713 81.35575867]
[579.83825684 96.35109711]
[579.71789551 111.35000610]
[579.12878418 126.33781433]
[578.07153320 141.29989624]
[576.54718018 156.22161865]
[574.55718994 171.08840942]
[572.10351562 185.88574219]
[569.18853760 200.59916687]
[565.81512451 215.21427917]
[561.98663330 229.71682739]
[557.70666504 244.09263611]
[552.97949219 258.32763672]
[547.80975342 272.40795898]
[542.20245361 286.31982422]
[536.16308594 300.04962158]
[529.69757080 313.58395386]
[522.81213379 326.90960693]
[515.51361084 340.01354980]
[507.80914307 352.88296509]
[499.70614624 365.50531006]
[491.21264648 377.86822510]
[482.33688354 389.95965576]
[473.08752441 401.76776123]
[463.47366333 413.28100586]
[453.50463867 424.48815918]
[443.19021606 435.37823486]
[432.54046631 445.94064331]
[421.56579590 456.16503906]
[410.27691650 466.04141235]
[398.68487549 475.56015015]
[386.80099487 484.71194458]
[374.63690186 493.48782349]
[362.20443726 501.87924194]
[349.51580811 509.87799072]
[336.58334351 517.47625732]
[323.41973877 524.66656494]
[310.03784180 531.44201660]
[296.45071411 537.79583740]
[282.67163086 543.72192383]
[268.71408081 549.21447754]
[254.59165955 554.26812744]
[240.31820679 558.87786865]
[225.90763855 563.03924561]
[211.37405396 566.74822998]
[196.73164368 570.00115967]
[181.99472046 572.79486084]
[167.17767334 575.12658691]
[152.29499817 576.99401855]
[137.36123657 578.39544678]
[122.39095306 579.32946777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[105 128]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
] def

init

% Start Annotations
105 128 0.0 0.6 colorpair
106 127 0.48 1 colorpair
107 126 0.16 0.2 colorpair
108 125 0.32 0.2 colorpair
109 124 0.32 1 colorpair
110 123 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
105 128 1 gmark
106 cmark
127 cmark
107 126 2 gmark
107 cmark
126 cmark
108 125 2 gmark
108 cmark
125 cmark
109 cmark
124 cmark
110 123 2 gmark
110 cmark

% End Annotations
showpage
end
%%EOF
