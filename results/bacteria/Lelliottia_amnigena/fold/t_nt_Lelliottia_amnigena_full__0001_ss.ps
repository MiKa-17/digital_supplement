%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________________________AUGAGCG_CGUGGAUAUGGUGAUACUUAUCCUCAGACUCAUUGUUGCGGUACUGCAAC__UGCUUGAUGCCG___UCCUGAAAUACC_\
) } def
/len { sequence length } bind def

/coor [
[150.82565308 239.67079163]
[140.04765320 243.13406372]
[129.03732300 245.76696777]
[117.85853577 247.55422974]
[106.57614136 248.48545837]
[95.25559998 248.55526733]
[83.96257782 247.76324463]
[72.76259613 246.11399841]
[61.72063065 243.61708069]
[50.90073776 240.28698730]
[40.36568832 236.14303589]
[30.17660332 231.20925903]
[20.39258957 225.51429749]
[11.07041073 219.09115601]
[2.26414704 211.97714233]
[-5.97511292 204.21350098]
[-13.59956932 195.84526062]
[-20.56498909 186.92100525]
[-26.83096504 177.49247742]
[-32.36114502 167.61437988]
[-37.12344742 157.34402466]
[-41.09024048 146.74099731]
[-44.23851395 135.86682129]
[-46.55000305 124.78454590]
[-48.01129532 113.55849457]
[-48.61392212 102.25378418]
[-48.35437775 90.93600464]
[-47.23416901 79.67080688]
[-45.25979996 68.52354431]
[-42.44272232 57.55888367]
[-38.79927444 46.84044647]
[-34.35060120 36.43040848]
[-29.12250710 26.38916397]
[-23.14532089 16.77496338]
[-16.45372009 7.64358330]
[-9.08652782 -0.95200056]
[-1.08647990 -8.96192169]
[7.50001001 -16.33971214]
[16.62312889 -23.04257011]
[26.22994995 -29.03161049]
[36.26473999 -34.27208710]
[23.83530807 -44.06084824]
[26.11312485 -58.78025055]
[20.37287331 -72.63844299]
[14.63262272 -86.49663544]
[8.89237118 -100.35482788]
[-2.76854300 -106.05302429]
[-7.22930622 -117.81152344]
[-2.58791113 -129.06571960]
[-7.96343040 -143.06942749]
[-21.97567177 -150.88201904]
[-24.46177864 -166.73127747]
[-13.51462555 -178.45899963]
[2.46807051 -177.06867981]
[11.22575188 -163.62686157]
[6.04027605 -148.44494629]
[11.41579533 -134.44123840]
[25.62034607 -124.22621155]
[22.75056458 -106.09507751]
[28.49081612 -92.23688507]
[34.23106766 -78.37869263]
[39.97131729 -64.52050018]
[51.99016953 -55.72297287]
[50.12293243 -40.01233673]
[71.79980469 -45.93123627]
[94.12123108 -48.51470184]
[116.57702637 -47.70368576]
[138.65393066 -43.51672745]
[159.84735107 -36.04951859]
[179.67289734 -25.47273445]
[197.67741394 -12.02812290]
[213.44940186 3.97702694]
[226.62835693 22.17689705]
[236.91308594 42.15550613]
[244.06848145 63.45622253]
[247.93103027 85.59218597]
[248.41244507 108.05746460]
[263.38034058 109.03851318]
[278.37518311 109.43116760]
[293.37005615 109.82382202]
[308.36489868 110.21647644]
[323.35977173 110.60913086]
[330.91937256 102.57409668]
[341.45401001 100.14495087]
[351.35516357 103.90178680]
[357.36996460 112.34774017]
[372.32373047 113.52462769]
[387.27749634 114.70151520]
[399.13088989 104.24815369]
[414.89868164 105.32150269]
[425.22613525 117.28475189]
[423.98614502 133.04031372]
[411.91436768 143.24070740]
[396.17279053 141.83421326]
[386.10061646 129.65527344]
[371.14685059 128.47839355]
[356.19308472 127.30149841]
[339.52474976 136.95771790]
[322.96710205 125.60398865]
[307.97225952 125.21133423]
[292.97738647 124.81867981]
[277.98254395 124.42602539]
[262.98767090 124.03337097]
[260.13317871 126.29729462]
[255.99903870 127.22200012]
[251.26039124 126.20272827]
[246.84451294 122.97529602]
[244.66987610 134.08522034]
[241.65596008 144.99740601]
[237.82023621 155.64855957]
[233.18495178 165.97685242]
[227.77702332 175.92239380]
[221.62779236 185.42749023]
[214.77296448 194.43698120]
[207.25228882 202.89860535]
[199.10940552 210.76327515]
[190.39155579 217.98535156]
[181.14929199 224.52296448]
[171.43626404 230.33816528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[41 64]
[43 62]
[44 61]
[45 60]
[46 59]
[49 57]
[50 56]
[77 107]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[86 97]
[87 96]
[88 95]
] def

init

% Start Annotations
41 64 0.16 0.6 colorpair
43 62 0.0 0.2 colorpair
44 61 0.0 0.6 colorpair
45 60 0.16 0.6 colorpair
46 59 0.32 1 colorpair
49 57 0.32 1 colorpair
50 56 0.32 0.6 colorpair
77 107 0.32 1 colorpair
78 103 0.0 0.6 colorpair
79 102 0.16 0.6 colorpair
80 101 0.0 0.6 colorpair
81 100 0.32 1 colorpair
82 99 0.16 1 colorpair
86 97 0.16 0.6 colorpair
87 96 0.0 1 colorpair
88 95 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
41 64 1 gmark
41 cmark
64 cmark
43 62 2 gmark
44 61 1 gmark
45 60 1 gmark
45 cmark
60 cmark
46 cmark
59 cmark
49 cmark
57 cmark
50 56 1 gmark
50 cmark
56 cmark
77 cmark
107 cmark
78 103 1 gmark
79 102 1 gmark
79 cmark
102 cmark
80 101 1 gmark
81 cmark
100 cmark
82 cmark
99 cmark
86 97 1 gmark
86 cmark
88 cmark
95 cmark

% End Annotations
showpage
end
%%EOF
