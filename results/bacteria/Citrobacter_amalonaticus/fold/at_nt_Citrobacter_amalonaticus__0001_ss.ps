%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:10:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________________UGCGUUACAGAGU_AGAACCCGUGCCGCUGGUGCGUGAUUAACCCAGAAAGCGUA____GACUUAGACUGUUAACAGAAUAAAGACUGCUUUC________AUCACAACCGUAUCC_UUAUGA_AGGAACCUCCCUCCGGAGGGGCUUU___________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50533295 92.06168365]
[62.52987671 91.18540955]
[47.58641815 89.87193298]
[32.68772125 88.12236786]
[17.84650612 85.93820953]
[3.07545018 83.32131958]
[-11.61283302 80.27394104]
[-26.20579910 76.79867554]
[-40.69098663 72.89848328]
[-55.05603027 68.57670593]
[-69.28865051 63.83702087]
[-83.37670898 58.68348312]
[-97.30815887 53.12049866]
[-111.07111359 47.15280914]
[-124.65380859 40.78551483]
[-138.04466248 34.02405548]
[-151.23222351 26.87420082]
[-164.20523071 19.34206009]
[-176.95262146 11.43406391]
[-189.46348572 3.15696645]
[-201.72715759 -5.48216343]
[-213.73315430 -14.47594929]
[-225.47122192 -23.81670952]
[-236.93135071 -33.49646759]
[-248.10374451 -43.50695419]
[-258.97885132 -53.83962631]
[-269.54739380 -64.48565674]
[-279.80035400 -75.43595123]
[-289.72897339 -86.68116760]
[-299.32476807 -98.21169281]
[-308.57952881 -110.01767731]
[-317.48538208 -122.08905029]
[-326.03469849 -134.41549683]
[-334.22018433 -146.98649597]
[-342.03488159 -159.79129028]
[-349.47204590 -172.81898499]
[-356.52539062 -186.05841064]
[-363.18884277 -199.49829102]
[-369.45675659 -213.12713623]
[-375.32376099 -226.93331909]
[-380.78485107 -240.90502930]
[-385.83532715 -255.03034973]
[-390.47091675 -269.29721069]
[-394.68768311 -283.69345093]
[-398.48196411 -298.20672607]
[-401.85052490 -312.82470703]
[-404.79052734 -327.53485107]
[-407.29946899 -342.32461548]
[-409.37515259 -357.18139648]
[-411.01583862 -372.09246826]
[-412.22015381 -387.04513550]
[-412.98699951 -402.02658081]
[-413.31579590 -417.02404785]
[-413.20620728 -432.02471924]
[-412.65832520 -447.01577759]
[-411.67266846 -461.98443604]
[-410.25003052 -476.91790771]
[-408.39166260 -491.80343628]
[-406.09912109 -506.62829590]
[-403.37438965 -521.37982178]
[-400.21975708 -536.04547119]
[-396.63796997 -550.61260986]
[-392.63204956 -565.06896973]
[-388.20541382 -579.40203857]
[-383.36187744 -593.59960938]
[-378.10552979 -607.64965820]
[-372.44091797 -621.54010010]
[-366.37283325 -635.25909424]
[-359.90646362 -648.79486084]
[-353.04733276 -662.13598633]
[-345.80133057 -675.27093506]
[-338.17459106 -688.18859863]
[-330.17367554 -700.87786865]
[-321.80538940 -713.32788086]
[-313.07687378 -725.52813721]
[-303.99560547 -737.46807861]
[-294.56933594 -749.13757324]
[-284.80609131 -760.52667236]
[-274.71426392 -771.62567139]
[-264.30239868 -782.42498779]
[-253.57943726 -792.91546631]
[-242.55451965 -803.08813477]
[-231.23706055 -812.93432617]
[-219.63673401 -822.44561768]
[-207.76344299 -831.61389160]
[-195.62731934 -840.43127441]
[-183.23873901 -848.89031982]
[-170.60826111 -856.98370361]
[-157.74670410 -864.70465088]
[-144.66502380 -872.04644775]
[-131.37442017 -879.00286865]
[-117.88620758 -885.56793213]
[-104.21192932 -891.73608398]
[-90.36325073 -897.50207520]
[-76.35201263 -902.86090088]
[-62.19016266 -907.80804443]
[-47.88980865 -912.33929443]
[-33.46316147 -916.45074463]
[-18.92253304 -920.13885498]
[-4.28034878 -923.40057373]
[10.45089054 -926.23303223]
[25.25860214 -928.63378906]
[40.13014603 -930.60089111]
[55.05281448 -932.13262939]
[70.01387024 -933.22760010]
[85.00052643 -933.88500977]
[100.00000000 -934.10418701]
[114.99947357 -933.88500977]
[129.98612976 -933.22760010]
[144.94718933 -932.13262939]
[159.86985779 -930.60089111]
[174.74139404 -928.63378906]
[189.54910278 -926.23303223]
[204.28034973 -923.40057373]
[218.92253113 -920.13885498]
[233.46316528 -916.45074463]
[247.88981628 -912.33929443]
[262.19015503 -907.80804443]
[276.35202026 -902.86090088]
[290.36325073 -897.50207520]
[304.21191406 -891.73608398]
[317.88619995 -885.56793213]
[331.37442017 -879.00286865]
[344.66503906 -872.04644775]
[357.74670410 -864.70465088]
[370.60827637 -856.98370361]
[383.23873901 -848.89031982]
[395.62731934 -840.43127441]
[407.76342773 -831.61389160]
[419.63671875 -822.44561768]
[431.23706055 -812.93432617]
[442.55450439 -803.08813477]
[453.57943726 -792.91546631]
[464.30239868 -782.42498779]
[474.71426392 -771.62567139]
[484.80609131 -760.52667236]
[494.56933594 -749.13757324]
[503.99560547 -737.46807861]
[513.07690430 -725.52813721]
[521.80535889 -713.32788086]
[530.17364502 -700.87786865]
[538.17456055 -688.18859863]
[545.80133057 -675.27093506]
[553.04736328 -662.13598633]
[559.90643311 -648.79486084]
[566.37280273 -635.25909424]
[572.44091797 -621.54010010]
[578.10552979 -607.64965820]
[583.36187744 -593.59960938]
[588.20544434 -579.40203857]
[592.63201904 -565.06896973]
[596.63793945 -550.61260986]
[600.21978760 -536.04547119]
[603.37438965 -521.37982178]
[606.09912109 -506.62829590]
[608.39166260 -491.80343628]
[610.25006104 -476.91790771]
[611.67266846 -461.98443604]
[612.65832520 -447.01577759]
[613.20617676 -432.02471924]
[613.31579590 -417.02404785]
[612.98699951 -402.02658081]
[612.22015381 -387.04513550]
[611.01586914 -372.09246826]
[609.37518311 -357.18139648]
[607.29943848 -342.32461548]
[604.79052734 -327.53485107]
[601.85052490 -312.82470703]
[598.48193359 -298.20672607]
[594.68768311 -283.69345093]
[590.47094727 -269.29721069]
[585.83532715 -255.03034973]
[580.78485107 -240.90502930]
[575.32379150 -226.93331909]
[569.45678711 -213.12713623]
[563.18884277 -199.49829102]
[556.52539062 -186.05841064]
[549.47204590 -172.81898499]
[542.03485107 -159.79129028]
[534.22021484 -146.98649597]
[526.03472900 -134.41549683]
[517.48541260 -122.08905029]
[508.57952881 -110.01767731]
[499.32476807 -98.21169281]
[489.72897339 -86.68116760]
[479.80035400 -75.43595123]
[469.54739380 -64.48565674]
[458.97885132 -53.83962631]
[448.10372925 -43.50695419]
[436.93133545 -33.49646759]
[425.47122192 -23.81670952]
[413.73315430 -14.47594929]
[401.72714233 -5.48216343]
[389.46347046 3.15696645]
[376.95260620 11.43406391]
[364.20523071 19.34206009]
[351.23220825 26.87420082]
[338.04464722 34.02405548]
[324.65380859 40.78551483]
[311.07110596 47.15280914]
[297.30816650 53.12049866]
[283.37670898 58.68348312]
[269.28866577 63.83702087]
[255.05603027 68.57670593]
[240.69099426 72.89848328]
[226.20579529 76.79867554]
[211.61283875 80.27394104]
[196.92454529 83.32131958]
[182.15348816 85.93820953]
[167.31228638 88.12236786]
[152.41358948 89.87193298]
[137.47012329 91.18540955]
[122.49466705 92.06168365]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
