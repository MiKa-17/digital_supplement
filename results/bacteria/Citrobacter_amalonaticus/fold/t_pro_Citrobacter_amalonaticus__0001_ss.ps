%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:10:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGG__GA_______CUCA__G_UAGACAUCGCUAUCUG____ACGAUCCUGAGACUC___C_ACCGUUGCAGG__U_ACUAUGCGACU_____GCUUGAGACCGUGCUAAAAAACCUGAAG________________________\
) } def
/len { sequence length } bind def

/coor [
[-131.78135681 652.84918213]
[-146.75315857 653.81744385]
[-161.75453186 654.04412842]
[-176.74874878 653.52868652]
[-191.69914246 652.27227783]
[-206.56910706 650.27813721]
[-221.32225037 647.55096436]
[-235.92247009 644.09759521]
[-250.33406067 639.92639160]
[-264.52172852 635.04760742]
[-278.45074463 629.47314453]
[-292.08706665 623.21667480]
[-305.39727783 616.29345703]
[-318.34881592 608.72052002]
[-330.91000366 600.51629639]
[-343.05010986 591.70092773]
[-354.73941040 582.29602051]
[-365.94927979 572.32446289]
[-376.65228271 561.81079102]
[-386.82229614 550.78063965]
[-396.43435669 539.26104736]
[-405.46496582 527.28021240]
[-413.89202881 514.86743164]
[-421.69491577 502.05310059]
[-428.85455322 488.86856079]
[-435.35339355 475.34606934]
[-441.17556763 461.51876831]
[-446.30676270 447.42041016]
[-450.73449707 433.08557129]
[-454.44787598 418.54931641]
[-457.43786621 403.84716797]
[-459.69708252 389.01516724]
[-461.22006226 374.08959961]
[-462.00305176 359.10696411]
[-462.04412842 344.10391235]
[-461.34320068 329.11721802]
[-459.90200806 314.18353271]
[-457.72399902 299.33938599]
[-454.81460571 284.62109375]
[-451.18084717 270.06469727]
[-446.83169556 255.70582581]
[-441.77777100 241.57960510]
[-436.03143311 227.72059631]
[-429.60671997 214.16273499]
[-422.51940918 200.93917847]
[-414.78680420 188.08230591]
[-406.42782593 175.62356567]
[-397.46295166 163.59344482]
[-387.91412354 152.02140808]
[-377.80468750 140.93574524]
[-367.15939331 130.36360168]
[-356.00430298 120.33084106]
[-344.36669922 110.86201477]
[-332.27505493 101.98030853]
[-319.75897217 93.70743561]
[-306.84909058 86.06365967]
[-293.57699585 79.06768036]
[-279.97515869 72.73661804]
[-266.07684326 67.08596039]
[-251.91612244 62.12954330]
[-237.52758789 57.87949371]
[-222.94650269 54.34621048]
[-208.20851135 51.53834152]
[-193.34968567 49.46275711]
[-178.40640259 48.12453461]
[-163.41523743 47.52695465]
[-148.41284180 47.67147827]
[-133.43595886 48.55774689]
[-118.52123260 50.18359756]
[-103.70516205 52.54504776]
[-89.02399445 55.63631821]
[-74.51367188 59.44984818]
[-60.20969772 63.97629929]
[-46.14707565 69.20459747]
[-32.36021805 75.12195587]
[-18.88286591 81.71387482]
[-5.74800062 88.96424103]
[7.01223516 96.85530853]
[19.36661339 105.36775970]
[31.28490448 114.48075867]
[42.73793793 124.17201996]
[53.69768906 134.41781616]
[64.47068024 123.98026276]
[75.24367523 113.54270935]
[86.01667023 103.10514832]
[90.03286743 89.71254730]
[103.54576874 86.12185669]
[114.31876373 75.68429565]
[110.50090790 60.80748749]
[114.64840698 46.01918793]
[125.64560699 35.29737473]
[140.53431702 31.52616882]
[155.30953979 35.72000122]
[165.99682617 46.75075150]
[169.72134399 61.65120697]
[165.48121643 76.41321564]
[154.41702271 87.06587219]
[139.50497437 90.74366760]
[124.75632477 86.45729065]
[113.98332977 96.89485168]
[109.96713257 110.28745270]
[96.45423126 113.87814331]
[85.68123627 124.31570435]
[74.90824127 134.75325012]
[64.13524628 145.19081116]
[74.02935791 156.46907043]
[83.35360718 168.22282410]
[92.08518219 180.42332458]
[100.20270538 193.04071045]
[107.68632507 206.04408264]
[114.51772308 219.40164185]
[120.68017578 233.08070374]
[126.15860748 247.04779053]
[130.93962097 261.26870728]
[135.01148987 275.70864868]
[138.36427307 290.33230591]
[140.98976135 305.10388184]
[142.88151550 319.98721313]
[144.03492737 334.94589233]
[144.44717407 349.94332886]
[144.11721802 364.94277954]
[143.04589844 379.90756226]
[141.23580933 394.80105591]
[138.69140625 409.58679199]
[135.41891479 424.22863770]
[131.42631531 438.69070435]
[126.72340393 452.93765259]
[121.32167816 466.93457031]
[115.23436737 480.64724731]
[108.47635651 494.04208374]
[101.06419373 507.08633423]
[93.01600647 519.74804688]
[84.35150146 531.99627686]
[75.09187317 543.80102539]
[65.25978851 555.13336182]
[54.87930679 565.96563721]
[43.97582626 576.27130127]
[32.57603455 586.02514648]
[20.70782852 595.20324707]
[8.40025043 603.78326416]
[-4.31658125 611.74407959]
[-17.41154480 619.06622314]
[-30.85259628 625.73187256]
[-44.60684204 631.72467041]
[-58.64062500 637.02984619]
[-72.91960144 641.63458252]
[-87.40882111 645.52752686]
[-102.07283783 648.69915771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[82 105]
[83 104]
[84 103]
[85 102]
[87 100]
[88 99]
] def

init

% Start Annotations
83 104 0.16 1 colorpair
84 103 0.16 0.2 colorpair
85 102 0.16 0.2 colorpair
88 99 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
82 105 3 gmark
82 cmark
105 cmark
83 cmark
104 cmark
84 103 2 gmark
84 cmark
103 cmark
85 102 2 gmark
102 cmark
87 100 3 gmark
87 cmark
100 cmark
88 cmark
99 cmark

% End Annotations
showpage
end
%%EOF
