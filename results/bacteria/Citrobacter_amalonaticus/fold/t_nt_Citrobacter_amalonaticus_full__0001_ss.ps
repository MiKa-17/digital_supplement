%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:10:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGCUCGUGGAGAUAGCCAU__CCUUCUGGUGAAACUCAUCGUCGCAAGCAUUUACCGGC_UUAAUGC______UGUUCUGAAAUACCU________________\
) } def
/len { sequence length } bind def

/coor [
[28.47190094 249.28408813]
[17.75026512 243.65580750]
[7.46875715 237.25880432]
[-2.31760645 230.12731934]
[-11.55645752 222.29949951]
[-20.19835854 213.81724548]
[-28.19706535 204.72593689]
[-35.50977325 195.07423401]
[-42.09735870 184.91378784]
[-47.92456436 174.29895020]
[-52.96020889 163.28652954]
[-57.17734528 151.93545532]
[-71.61856842 155.99145508]
[-86.05978394 160.04745483]
[-100.50100708 164.10345459]
[-102.26924896 179.20120239]
[-109.68491364 192.47058105]
[-121.61715698 201.88810730]
[-136.24641418 206.01770020]
[-151.34181213 204.22959900]
[-164.60142517 196.79647827]
[-174.00325012 184.85185242]
[-178.11358643 170.21717834]
[-176.30563354 155.12414551]
[-168.85508728 141.87432861]
[-156.89810181 132.48822021]
[-142.25802612 128.39714050]
[-127.16738892 130.22494507]
[-113.92737579 137.69291687]
[-104.55700684 149.66224670]
[-90.11579132 145.60624695]
[-75.67456818 141.55023193]
[-61.23334503 137.49423218]
[-64.83654022 115.19618988]
[-65.37071991 92.61521149]
[-62.82593155 70.17173004]
[-57.24956131 48.28359985]
[-48.74542618 27.35836029]
[-37.47187042 7.78560257]
[-23.63878250 -10.07025623]
[-7.50372076 -25.87676430]
[10.63290596 -39.33963013]
[30.43342018 -50.20819092]
[51.52916336 -58.28009415]
[73.52735901 -63.40504837]
[71.80187225 -78.30547333]
[70.07638550 -93.20590210]
[68.35089874 -108.10632324]
[54.76588440 -115.60479736]
[48.21337891 -129.67051697]
[51.21294785 -144.89491272]
[62.61119461 -155.42388916]
[78.02526093 -157.20886230]
[91.52812958 -149.56346130]
[97.92766571 -135.42749023]
[94.76311493 -120.23653412]
[83.25131989 -109.83181000]
[84.97680664 -94.93138885]
[86.70230103 -80.03096008]
[88.42778778 -65.13053894]
[100.53017426 -65.53467560]
[112.62972260 -65.05302429]
[124.66168976 -63.68815231]
[136.56169128 -61.44736862]
[148.26603699 -58.34266281]
[159.71211243 -54.39065170]
[170.83866882 -49.61247635]
[181.58615112 -44.03371048]
[191.89706421 -37.68420410]
[201.71621704 -30.59793472]
[210.99108887 -22.81282234]
[219.67202759 -14.37052536]
[227.71258545 -5.31621981]
[235.06973267 4.30164433]
[241.70411682 14.43160057]
[247.58023071 25.01944160]
[252.66662598 36.00851440]
[256.93609619 47.34000778]
[260.36575317 58.95329285]
[262.93731689 70.78622437]
[264.63696289 82.77548218]
[265.45559692 94.85691071]
[265.38888550 106.96585846]
[264.43716431 119.03752899]
[262.60552979 131.00732422]
[259.90374756 142.81120300]
[256.34631348 154.38600159]
[251.95227051 165.66976929]
[246.74510193 176.60212708]
[240.75268555 187.12457275]
[234.00708008 197.18081665]
[226.54440308 206.71702576]
[218.40455627 215.68218994]
[209.63113403 224.02832031]
[200.27104187 231.71076965]
[190.37440491 238.68841553]
[179.99415588 244.92391968]
[169.18585205 250.38392639]
[158.00733948 255.03921509]
[146.51840210 258.86486816]
[134.78054810 261.84042358]
[122.85659027 263.94995117]
[110.81031799 265.18215942]
[98.70619202 265.53045654]
[86.60899353 264.99301147]
[74.58345032 263.57263184]
[62.69392014 261.27697754]
[51.00401306 258.11831665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 33]
[13 32]
[14 31]
[15 30]
[45 60]
[46 59]
[47 58]
[48 57]
] def

init

% Start Annotations
14 31 0.16 1 colorpair
15 30 0.16 1 colorpair
45 60 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 33 3 gmark
12 cmark
33 cmark
13 32 3 gmark
13 cmark
32 cmark
14 cmark
15 cmark
30 cmark
46 59 3 gmark
46 cmark
59 cmark
47 58 3 gmark
47 cmark
58 cmark
48 57 4 gmark
48 cmark
57 cmark

% End Annotations
showpage
end
%%EOF
