%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:10:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGCU____AAGAUAGCCAU__CCUUCUGGUGAAACUCAUCGUCACAAGC__UUACCGGC_UUAAUGC_______GU__UGAA_U__CU________________\
) } def
/len { sequence length } bind def

/coor [
[81.16857910 326.01263428]
[66.27247620 324.27389526]
[51.52385330 321.55450439]
[36.98720169 317.86630249]
[22.72608757 313.22540283]
[8.80287170 307.65216064]
[-4.72156334 301.17089844]
[-17.78808022 293.80996704]
[-30.33954048 285.60156250]
[-42.32106400 276.58157349]
[-53.68025208 266.78942871]
[-64.36743927 256.26797485]
[-74.33589172 245.06318665]
[-83.54202271 233.22409058]
[-91.94557953 220.80242920]
[-99.50980377 207.85253906]
[-106.20162201 194.43104553]
[-111.99178314 180.59661865]
[-116.85495758 166.40977478]
[-120.76988983 151.93254089]
[-123.71945190 137.22821045]
[-125.69075012 122.36109924]
[-126.67516327 107.39620209]
[-126.66838074 92.39897156]
[-125.67044830 77.43497467]
[-123.68571472 62.56964493]
[-120.72286987 47.86798859]
[-116.79486084 33.39429474]
[-111.91886902 19.21184540]
[-106.11621094 5.38266373]
[-99.41226196 -8.03278255]
[-91.83633423 -20.97583199]
[-83.42156219 -33.38988495]
[-74.20474243 -45.22066116]
[-64.22616577 -56.41642761]
[-53.52947617 -66.92822266]
[-42.16144180 -76.71009064]
[-30.17177391 -85.71925354]
[-17.61289978 -93.91631317]
[-4.53973770 -101.26543427]
[8.99054813 -107.73447418]
[22.91879463 -113.29515076]
[37.18409729 -117.92314148]
[51.72407532 -121.59821320]
[66.47515106 -124.30429077]
[64.74966431 -139.20472717]
[63.02417374 -154.10514832]
[61.29868317 -169.00556946]
[47.71367264 -176.50404358]
[41.16116714 -190.56976318]
[44.16073227 -205.79415894]
[55.55898285 -216.32315063]
[70.97305298 -218.10810852]
[84.47591400 -210.46270752]
[90.87545013 -196.32673645]
[87.71090698 -181.13577271]
[76.19911194 -170.73106384]
[77.92459869 -155.83062744]
[79.65008545 -140.93020630]
[81.37557220 -126.02978516]
[96.35470581 -126.76649475]
[111.34977722 -126.51161957]
[126.29521942 -125.26627350]
[141.12568665 -123.03589630]
[155.77630615 -119.83024597]
[170.18304443 -115.66333008]
[184.28288269 -110.55338287]
[198.01417542 -104.52274323]
[211.31687927 -97.59777832]
[224.13282776 -89.80877686]
[236.40599060 -81.18978882]
[248.08267212 -71.77851105]
[259.11181641 -61.61608887]
[269.44522095 -50.74696350]
[279.03768921 -39.21866226]
[287.84729004 -27.08159637]
[295.83544922 -14.38883781]
[302.96728516 -1.19588733]
[309.21160889 12.43956566]
[314.54110718 26.45789528]
[318.93249512 40.79780579]
[322.36651611 55.39659119]
[324.82821655 70.19041443]
[326.30676270 85.11458588]
[326.79577637 100.10385132]
[326.29306030 115.09265900]
[324.80081177 130.01547241]
[322.32556152 144.80703735]
[318.87817383 159.40266418]
[314.47366333 173.73855591]
[309.13134766 187.75199890]
[302.87454224 201.38172913]
[295.73062134 214.56814575]
[287.73080444 227.25357056]
[278.91012573 239.38256836]
[269.30709839 250.90208435]
[258.96374512 261.76174927]
[247.92529297 271.91406250]
[236.23999023 281.31463623]
[223.95895386 289.92239380]
[211.13587952 297.69964600]
[197.82682800 304.61242676]
[184.09002686 310.63049316]
[169.98550415 315.72750854]
[155.57496643 319.88122559]
[140.92140198 323.07345581]
[126.08890533 325.29025269]
[111.14233398 326.52191162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[45 60]
[46 59]
[47 58]
[48 57]
] def

init

% Start Annotations
45 60 0.0 1 colorpair
48 57 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
46 59 3 gmark
46 cmark
59 cmark
47 58 3 gmark
47 cmark
58 cmark
48 57 2 gmark
48 cmark
57 cmark

% End Annotations
showpage
end
%%EOF
