%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:48:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____GCUACCACAAGGAACCCUUAUCUGGUGCGUGUUUAUCAUGUGUUUCACACUGCUGAUAUUCACUUAUCUGACACGGAAAUCGCUGUGCGAAAUUCGUUACAAAGAUGGGUUCCGCGAGGUCGCGGCUUUCAUGGCUUACGAAUCCGGUAA_\
) } def
/len { sequence length } bind def

/coor [
[193.20864868 419.69427490]
[199.07810974 405.89031982]
[211.32553101 397.23004150]
[226.29652405 396.29751587]
[239.52397156 403.37100220]
[247.06068420 416.33843994]
[240.39833069 402.89920044]
[227.81320190 394.93280029]
[228.61598206 379.13198853]
[221.95361328 365.69274902]
[215.29125977 352.25350952]
[200.41798401 351.44662476]
[187.86201477 343.24884033]
[181.05020142 329.77792358]
[181.90130615 314.60650635]
[190.28672791 301.81463623]
[183.62435913 288.37539673]
[176.96200562 274.93615723]
[170.29965210 261.49691772]
[163.63729858 248.05769348]
[156.97492981 234.61845398]
[150.31257629 221.17922974]
[146.10211182 218.81900024]
[143.35882568 213.76144409]
[143.66465759 207.06634521]
[137.54533386 193.37130737]
[131.42601013 179.67628479]
[125.30668640 165.98124695]
[110.56712341 156.50097656]
[112.54711914 138.21961975]
[106.15499878 124.64977264]
[99.76287842 111.07992554]
[84.67967224 117.68196106]
[64.77156067 105.83972168]
[51.39965439 99.04323578]
[38.02774811 92.24675751]
[23.16670036 96.91441345]
[9.70250702 89.83132172]
[5.34419346 75.63481903]
[-8.02771091 68.83834076]
[-21.39961624 62.04185486]
[-34.77151871 55.24537277]
[-48.14342499 48.44889069]
[-68.16191864 50.48369980]
[-78.09782410 33.93362045]
[-91.73094940 27.67758369]
[-105.36406708 21.42154884]
[-118.99719238 15.16551304]
[-135.91471863 14.05486774]
[-139.53071594 -2.50897598]
[-124.61520386 -10.56898594]
[-112.74115753 1.53239119]
[-99.10803223 7.78842688]
[-85.47491455 14.04446220]
[-71.84178925 20.30049706]
[-62.55401993 15.87884808]
[-52.15212250 17.36020470]
[-44.13864136 24.49150658]
[-41.34694290 35.07698822]
[-27.97503662 41.87347031]
[-14.60313320 48.66995239]
[-1.23122859 55.46643448]
[12.14067554 62.26291656]
[26.17797089 57.41627121]
[39.83580017 64.11838531]
[44.82423019 78.87484741]
[58.19613647 85.67133331]
[71.56803894 92.46781158]
[78.68692017 90.10740662]
[70.21038055 77.73210144]
[59.36442566 67.37038422]
[59.59397888 52.37213898]
[70.75196075 42.34719467]
[85.68910980 43.71882629]
[94.83476257 55.60819244]
[92.32834625 70.39846039]
[92.92469025 85.38659668]
[100.04357147 83.02619934]
[106.70592499 69.58695984]
[113.36828613 56.14772797]
[120.03063965 42.70849609]
[126.69300079 29.26926231]
[121.87689209 14.45565796]
[128.82492065 0.92127156]
[142.97711182 -3.57885790]
[149.63946533 -17.01809120]
[156.30181885 -30.45732498]
[162.96417236 -43.89655685]
[164.58203125 -60.77313614]
[181.24693298 -63.89041138]
[188.85568237 -48.73972702]
[176.40341187 -37.23419952]
[169.74105835 -23.79496765]
[163.07870483 -10.35573387]
[156.41633606 3.08349943]
[161.40318298 17.07159996]
[154.83805847 30.79580307]
[140.13223267 35.93161774]
[133.46987915 49.37085342]
[126.80751801 62.81008530]
[120.14516449 76.24932098]
[113.48280334 89.68855286]
[113.33273315 104.68780518]
[119.72485352 118.25765228]
[126.11697388 131.82749939]
[137.99865723 136.93949890]
[143.02969360 148.41854858]
[139.00170898 159.86192322]
[145.12104797 173.55696106]
[151.24037170 187.25198364]
[157.35969543 200.94702148]
[163.75181580 214.51686096]
[170.41416931 227.95610046]
[177.07652283 241.39533997]
[183.73887634 254.83456421]
[190.40124512 268.27380371]
[197.06359863 281.71304321]
[203.72595215 295.15228271]
[218.98374939 296.22326660]
[231.57374573 304.73141479]
[238.17083740 318.30877686]
[237.09332275 333.26522827]
[228.73049927 345.59115601]
[235.39285278 359.03039551]
[242.05520630 372.46960449]
[255.11688232 381.39727783]
[253.83757019 396.23684692]
[260.49990845 409.67608643]
[269.81869507 421.43023682]
[281.38406372 430.98236084]
[292.94940186 440.53445435]
[304.51473999 450.08654785]
[320.55758667 450.00149536]
[330.51403809 462.58117676]
[326.74639893 478.17556763]
[312.14483643 484.82196045]
[297.91046143 477.42181396]
[294.96264648 461.65191650]
[283.39730835 452.09979248]
[271.83193970 442.54769897]
[260.26660156 432.99560547]
[248.06117249 441.71496582]
[253.34783936 455.75244141]
[258.63452148 469.78994751]
[273.44659424 474.80358887]
[281.52636719 488.19204712]
[279.05883789 503.63372803]
[267.20907593 513.83752441]
[251.57220459 513.98547363]
[239.53144836 504.00781250]
[236.77209473 488.61560059]
[244.59703064 475.07659912]
[239.31034851 461.03912354]
[234.02368164 447.00164795]
[219.45452881 450.57095337]
[205.18339539 445.95202637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[9 125]
[10 124]
[11 123]
[16 118]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[22 112]
[25 111]
[26 110]
[27 109]
[28 108]
[30 105]
[31 104]
[32 103]
[34 68]
[35 67]
[36 66]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[45 55]
[46 54]
[47 53]
[48 52]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[85 95]
[86 94]
[87 93]
[88 92]
[129 141]
[130 140]
[131 139]
[132 138]
[142 154]
[143 153]
[144 152]
] def

init

% Start Annotations
6 128 0.0 1 colorpair
7 127 0.0 1 colorpair
9 125 0.0 1 colorpair
10 124 0.0 1 colorpair
11 123 0.0 1 colorpair
16 118 0.0 1 colorpair
17 117 0.0 1 colorpair
18 116 0.0 1 colorpair
19 115 0.0 1 colorpair
20 114 0.0 1 colorpair
21 113 0.0 1 colorpair
22 112 0.0 1 colorpair
25 111 0.0 1 colorpair
26 110 0.0 1 colorpair
27 109 0.0 1 colorpair
28 108 0.0 1 colorpair
30 105 0.0 1 colorpair
31 104 0.0 1 colorpair
32 103 0.0 1 colorpair
34 68 0.0 1 colorpair
35 67 0.0 1 colorpair
36 66 0.0 1 colorpair
39 63 0.0 1 colorpair
40 62 0.0 1 colorpair
41 61 0.0 1 colorpair
42 60 0.0 1 colorpair
43 59 0.16 1 colorpair
45 55 0.0 1 colorpair
46 54 0.0 1 colorpair
47 53 0.0 1 colorpair
48 52 0.0 1 colorpair
78 102 0.0 1 colorpair
79 101 0.0 1 colorpair
80 100 0.0 1 colorpair
81 99 0.0 1 colorpair
82 98 0.0 1 colorpair
85 95 0.0 1 colorpair
86 94 0.0 1 colorpair
87 93 0.0 1 colorpair
88 92 0.0 1 colorpair
129 141 0.0 1 colorpair
130 140 0.0 1 colorpair
131 139 0.0 1 colorpair
132 138 0.0 1 colorpair
142 154 0.0 1 colorpair
143 153 0.0 1 colorpair
144 152 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
43 cmark

% End Annotations
showpage
end
%%EOF
