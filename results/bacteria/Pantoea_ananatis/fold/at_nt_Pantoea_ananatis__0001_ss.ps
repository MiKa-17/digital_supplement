%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:56:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGAUGACUAUUCCU_CGUAAAUAGUGAUUGUGAUCAGCGAUGCGGAUGUGUUG___CAACACAUUCGUAUCGCGCU___\
) } def
/len { sequence length } bind def

/coor [
[77.61298370 116.69049072]
[73.55894470 108.97893524]
[58.58198547 109.81010437]
[43.60503387 110.64128113]
[28.62807846 111.47245026]
[13.65112495 112.30361938]
[-1.32582903 113.13479614]
[-16.30278397 113.96596527]
[-31.27973747 114.79713440]
[-44.62997055 123.28723907]
[-57.76642609 116.26705933]
[-72.74337769 117.09823608]
[-87.72032928 117.92940521]
[-102.69728851 118.76058197]
[-117.67424011 119.59175110]
[-132.65119934 120.42292023]
[-140.94879150 133.53511047]
[-155.38124084 139.23458862]
[-170.39897156 135.32978821]
[-180.22735596 123.32218170]
[-181.08717346 107.82894897]
[-172.64782715 94.80754089]
[-158.15440369 89.26496887]
[-143.17991638 93.33245087]
[-133.48236084 105.44596863]
[-118.50541687 104.61479950]
[-103.52845764 103.78362274]
[-88.55150604 102.95245361]
[-73.57455444 102.12128448]
[-58.59759521 101.29010773]
[-46.31861496 92.85945892]
[-32.11090851 99.82018280]
[-17.13395500 98.98901367]
[-2.15700102 98.15783691]
[12.81995296 97.32666779]
[27.79690742 96.49549866]
[42.77386093 95.66432190]
[57.75081635 94.83315277]
[72.72776794 94.00197601]
[85.11237335 76.37566376]
[106.35728455 72.80927277]
[123.81868744 85.42533112]
[138.24606323 81.32038116]
[152.67346191 77.21543884]
[167.10084534 73.11049652]
[181.52822876 69.00554657]
[195.95561218 64.90060425]
[210.38299561 60.79565811]
[224.81037903 56.69071579]
[239.23776245 52.58576965]
[253.66514587 48.48082352]
[268.09252930 44.37588120]
[282.51992798 40.27093506]
[296.94729614 36.16598892]
[311.37469482 32.06104660]
[315.74673462 17.26616096]
[327.43838501 7.20093155]
[342.71887207 5.07713747]
[356.71224976 11.57247353]
[364.95324707 24.61429977]
[364.81222534 40.04101944]
[356.33419800 52.93001938]
[342.22442627 59.16846848]
[326.98532104 56.76570129]
[315.47964478 46.48843002]
[301.05224609 50.59337616]
[286.62484741 54.69831848]
[272.19747925 58.80326462]
[257.77008057 62.90821075]
[243.34271240 67.01315308]
[228.91532898 71.11810303]
[214.48794556 75.22304535]
[200.06054688 79.32798767]
[185.63316345 83.43293762]
[171.20578003 87.53787994]
[156.77839661 91.64282227]
[142.35101318 95.74776459]
[127.92362976 99.85271454]
[126.60993195 108.46535492]
[122.70594788 116.25395203]
[116.59169006 122.46033478]
[108.86235046 126.48036194]
[100.27031708 127.92271423]
[91.65196991 126.64697266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
] def

init

% Start Annotations
2 39 0.16 1 colorpair
3 38 0.16 1 colorpair
4 37 0.0 1 colorpair
5 36 0.0 1 colorpair
6 35 0.0 1 colorpair
7 34 0.16 1 colorpair
8 33 0.0 1 colorpair
9 32 0.16 1 colorpair
11 30 0.0 1 colorpair
12 29 0.0 0.6 colorpair
13 28 0.0 0.6 colorpair
14 27 0.0 1 colorpair
15 26 0.16 1 colorpair
16 25 0.0 1 colorpair
42 78 0.0 0.6 colorpair
43 77 0.0 1 colorpair
44 76 0.16 1 colorpair
45 75 0.16 0.6 colorpair
46 74 0.0 1 colorpair
47 73 0.16 1 colorpair
48 72 0.32 1 colorpair
49 71 0.16 0.6 colorpair
50 70 0.32 1 colorpair
51 69 0.16 0.6 colorpair
52 68 0.16 1 colorpair
53 67 0.0 1 colorpair
54 66 0.0 0.6 colorpair
55 65 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 cmark
3 cmark
38 cmark
7 cmark
32 cmark
12 29 1 gmark
13 28 1 gmark
15 cmark
26 cmark
42 78 1 gmark
76 cmark
45 75 1 gmark
45 cmark
47 cmark
73 cmark
48 cmark
72 cmark
49 71 1 gmark
49 cmark
71 cmark
50 cmark
70 cmark
51 69 1 gmark
51 cmark
69 cmark
52 cmark
68 cmark
54 66 1 gmark

% End Annotations
showpage
end
%%EOF
