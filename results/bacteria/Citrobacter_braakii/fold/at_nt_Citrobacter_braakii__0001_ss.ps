%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:11:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________________________________UCGUGUUCUAGUUAGCCCGCG_UAUAGUUACUAAGAUUAUAAAAAACAAGGUG__CGGCGGCAUCCUAACAC___GCU________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51221466 91.83644104]
[62.56845474 90.51057434]
[47.69796753 88.52499390]
[32.92986679 85.88358307]
[18.29305649 82.59151459]
[3.81619143 78.65523529]
[-10.47238827 74.08244324]
[-24.54471207 68.88209534]
[-38.37323380 63.06436920]
[-51.93088150 56.64065933]
[-65.19111633 49.62353134]
[-78.12798309 42.02672958]
[-90.71615601 33.86511993]
[-102.93099213 25.15468216]
[-114.74858093 15.91246510]
[-126.14578247 6.15656328]
[-137.10029602 -4.09392738]
[-147.59068298 -14.81894016]
[-157.59637451 -25.99748039]
[-167.09782410 -37.60766602]
[-176.07641602 -49.62677002]
[-184.51457214 -62.03126144]
[-192.39578247 -74.79685974]
[-199.70460510 -87.89858246]
[-206.42674255 -101.31076813]
[-212.54902649 -115.00717163]
[-218.05949402 -128.96098328]
[-222.94734192 -143.14488220]
[-227.20298767 -157.53109741]
[-230.81813049 -172.09147644]
[-233.78567505 -186.79751587]
[-236.09982300 -201.62042236]
[-237.75602722 -216.53118896]
[-238.75106812 -231.50062561]
[-239.08297729 -246.49942017]
[-238.75112915 -261.49819946]
[-237.75614929 -276.46765137]
[-236.09999084 -291.37841797]
[-233.78588867 -306.20132446]
[-230.81840515 -320.90737915]
[-227.20332336 -335.46777344]
[-222.94770813 -349.85400391]
[-218.05992126 -364.03793335]
[-212.54951477 -377.99176025]
[-206.42727661 -391.68817139]
[-199.70518494 -405.10040283]
[-192.39640808 -418.20211792]
[-184.51524353 -430.96777344]
[-176.07713318 -443.37228394]
[-167.09858704 -455.39141846]
[-157.59718323 -467.00164795]
[-147.59152222 -478.18020630]
[-137.10118103 -488.90527344]
[-126.14670563 -499.15579224]
[-114.74953461 -508.91174316]
[-102.93197632 -518.15399170]
[-90.71717834 -526.86450195]
[-78.12903595 -535.02612305]
[-65.19219208 -542.62298584]
[-51.93198395 -549.64013672]
[-38.37435913 -556.06390381]
[-24.54585838 -561.88171387]
[-10.47355366 -567.08209229]
[3.81500983 -571.65496826]
[18.29186058 -575.59124756]
[32.92865753 -578.88342285]
[47.69675064 -581.52484131]
[62.56723022 -583.51049805]
[77.51098633 -584.83642578]
[92.49877167 -585.50006104]
[107.50122833 -585.50006104]
[122.48901367 -584.83642578]
[137.43276978 -583.51049805]
[152.30325317 -581.52484131]
[167.07133484 -578.88342285]
[181.70814514 -575.59124756]
[196.18499756 -571.65496826]
[210.47355652 -567.08209229]
[224.54585266 -561.88171387]
[238.37435913 -556.06390381]
[251.93199158 -549.64013672]
[265.19219971 -542.62298584]
[278.12902832 -535.02612305]
[290.71716309 -526.86450195]
[302.93197632 -518.15399170]
[314.74954224 -508.91174316]
[326.14669800 -499.15579224]
[337.10116577 -488.90527344]
[347.59152222 -478.18020630]
[357.59716797 -467.00164795]
[367.09860229 -455.39141846]
[376.07714844 -443.37228394]
[384.51525879 -430.96777344]
[392.39639282 -418.20211792]
[399.70516968 -405.10040283]
[406.42727661 -391.68817139]
[412.54949951 -377.99176025]
[418.05990601 -364.03793335]
[422.94772339 -349.85400391]
[427.20330811 -335.46777344]
[430.81838989 -320.90737915]
[433.78588867 -306.20132446]
[436.09997559 -291.37841797]
[437.75613403 -276.46765137]
[438.75112915 -261.49819946]
[439.08297729 -246.49942017]
[438.75106812 -231.50062561]
[437.75604248 -216.53118896]
[436.09982300 -201.62042236]
[433.78567505 -186.79751587]
[430.81814575 -172.09147644]
[427.20300293 -157.53109741]
[422.94732666 -143.14488220]
[418.05947876 -128.96098328]
[412.54904175 -115.00717163]
[406.42672729 -101.31076813]
[399.70458984 -87.89858246]
[392.39578247 -74.79685974]
[384.51458740 -62.03126144]
[376.07641602 -49.62677002]
[367.09783936 -37.60766602]
[357.59637451 -25.99748039]
[347.59066772 -14.81894016]
[337.10031128 -4.09392738]
[326.14578247 6.15656328]
[314.74856567 15.91246510]
[302.93099976 25.15468216]
[290.71615601 33.86511993]
[278.12799072 42.02672958]
[265.19113159 49.62353134]
[251.93087769 56.64065933]
[238.37322998 63.06436920]
[224.54470825 68.88209534]
[210.47238159 74.08244324]
[196.18380737 78.65523529]
[181.70693970 82.59151459]
[167.07012939 85.88358307]
[152.30203247 88.52499390]
[137.43154907 90.51057434]
[122.48778534 91.83644104]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
