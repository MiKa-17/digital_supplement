%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________AGUCAGGGUGGGUAUCCCCUCCGAAUAGUGACU_UGGUUAGCGAGGAAG_UAAUGUCGGAGAGUUUUCCCAUU__G_U________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51187897 91.84565735]
[62.56657028 90.53816223]
[47.69251633 88.58000183]
[32.91802979 85.97491455]
[18.27124023 82.72785187]
[3.78002667 78.84499359]
[-10.52802658 74.33372498]
[-24.62568283 69.20265198]
[-38.48610687 63.46152496]
[-52.08291245 57.12128067]
[-65.39022064 50.19398117]
[-78.38269806 42.69282150]
[-91.03561401 34.63207626]
[-103.32488251 26.02709007]
[-115.22711182 16.89424324]
[-126.71963501 7.25092077]
[-137.78059387 -2.88452125]
[-148.38891602 -13.49278927]
[-158.52441406 -24.55368996]
[-168.16780090 -36.04616928]
[-177.30070496 -47.94834518]
[-185.90576172 -60.23756790]
[-193.96656799 -72.89044189]
[-201.46778870 -85.88288116]
[-208.39515686 -99.19015503]
[-214.73547363 -112.78692627]
[-220.47666931 -126.64731598]
[-225.60783386 -140.74494934]
[-230.11917114 -155.05297852]
[-234.00210571 -169.54417419]
[-237.24923706 -184.19094849]
[-239.85441589 -198.96540833]
[-241.81263733 -213.83946228]
[-243.12020874 -228.78475952]
[-243.77464294 -243.77288818]
[-243.77465820 -258.77526855]
[-243.12030029 -273.76339722]
[-241.81277466 -288.70870972]
[-239.85459900 -303.58276367]
[-237.24948120 -318.35723877]
[-234.00238037 -333.00402832]
[-230.11950684 -347.49523926]
[-225.60821533 -361.80328369]
[-220.47711182 -375.90090942]
[-214.73596191 -389.76132202]
[-208.39569092 -403.35812378]
[-201.46836853 -416.66543579]
[-193.96719360 -429.65789795]
[-185.90641785 -442.31079102]
[-177.30140686 -454.60003662]
[-168.16854858 -466.50225830]
[-158.52520752 -477.99475098]
[-148.38973999 -489.05569458]
[-137.78144836 -499.66400146]
[-126.72053528 -509.79949951]
[-115.22804260 -519.44287109]
[-103.32585144 -528.57574463]
[-91.03661346 -537.18078613]
[-78.38372040 -545.24157715]
[-65.39127350 -552.74273682]
[-52.08398819 -559.67010498]
[-38.48720551 -566.01037598]
[-24.62680054 -571.75158691]
[-10.52916145 -576.88269043]
[3.77887654 -581.39398193]
[18.27007675 -585.27691650]
[32.91685486 -588.52404785]
[47.69132996 -591.12915039]
[62.56538010 -593.08740234]
[77.51068878 -594.39495850]
[92.49880219 -595.04931641]
[107.50119781 -595.04931641]
[122.48931122 -594.39495850]
[137.43461609 -593.08740234]
[152.30867004 -591.12915039]
[167.08314514 -588.52404785]
[181.72991943 -585.27691650]
[196.22113037 -581.39398193]
[210.52915955 -576.88269043]
[224.62680054 -571.75158691]
[238.48719788 -566.01037598]
[252.08398438 -559.67010498]
[265.39126587 -552.74273682]
[278.38372803 -545.24157715]
[291.03662109 -537.18078613]
[303.32583618 -528.57574463]
[315.22805786 -519.44287109]
[326.72055054 -509.79949951]
[337.78146362 -499.66400146]
[348.38973999 -489.05569458]
[358.52520752 -477.99475098]
[368.16854858 -466.50225830]
[377.30142212 -454.60003662]
[385.90643311 -442.31079102]
[393.96719360 -429.65789795]
[401.46838379 -416.66543579]
[408.39569092 -403.35812378]
[414.73596191 -389.76132202]
[420.47711182 -375.90090942]
[425.60821533 -361.80328369]
[430.11950684 -347.49523926]
[434.00238037 -333.00402832]
[437.24948120 -318.35723877]
[439.85458374 -303.58276367]
[441.81277466 -288.70870972]
[443.12030029 -273.76339722]
[443.77465820 -258.77526855]
[443.77462769 -243.77288818]
[443.12020874 -228.78475952]
[441.81265259 -213.83946228]
[439.85440063 -198.96540833]
[437.24923706 -184.19094849]
[434.00210571 -169.54417419]
[430.11917114 -155.05297852]
[425.60781860 -140.74494934]
[420.47668457 -126.64731598]
[414.73547363 -112.78692627]
[408.39517212 -99.19015503]
[401.46780396 -85.88288116]
[393.96655273 -72.89044189]
[385.90576172 -60.23756790]
[377.30072021 -47.94834518]
[368.16778564 -36.04616928]
[358.52441406 -24.55368996]
[348.38891602 -13.49278927]
[337.78057861 -2.88452125]
[326.71963501 7.25092077]
[315.22711182 16.89424324]
[303.32489014 26.02709007]
[291.03561401 34.63207626]
[278.38269043 42.69282150]
[265.39022827 50.19398117]
[252.08291626 57.12128067]
[238.48611450 63.46152496]
[224.62568665 69.20265198]
[210.52803040 74.33372498]
[196.21997070 78.84499359]
[181.72875977 82.72785187]
[167.08197021 85.97491455]
[152.30747986 88.58000183]
[137.43342590 90.53816223]
[122.48812103 91.84565735]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
