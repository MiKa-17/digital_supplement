%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:07:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____________AAGACCGCAGUGGACAUGGUGAUACUUAUCCGCAAACCCAUUGU____UGCAG__________CACGGCAACUGCUUCAUGCUGUCCUGAAAUACUG_______________________________________\
) } def
/len { sequence length } bind def

/coor [
[35.38603973 345.79479980]
[22.30493927 341.97836304]
[9.44719315 337.46630859]
[-3.15023565 332.27157593]
[-15.45113277 326.40911865]
[-27.42013741 319.89581299]
[-39.02283859 312.75033569]
[-50.22588730 304.99325562]
[-60.99707031 296.64688110]
[-71.30542755 287.73519897]
[-81.12132263 278.28381348]
[-90.41654205 268.31991577]
[-99.16436005 257.87213135]
[-107.33963013 246.97052002]
[-114.91884613 235.64639282]
[-121.88023376 223.93231201]
[-128.20376587 211.86196899]
[-133.87126160 199.47003174]
[-138.86643982 186.79216003]
[-143.17494202 173.86477661]
[-146.78436279 160.72505188]
[-149.68435669 147.41075134]
[-164.49719238 149.77288818]
[-179.31004333 152.13502502]
[-194.12287903 154.49714661]
[-208.93572998 156.85928345]
[-223.74856567 159.22142029]
[-238.56141663 161.58355713]
[-243.97541809 175.95658875]
[-255.86076355 185.68458557]
[-271.02035522 188.15077209]
[-285.37637329 182.69174194]
[-295.06704712 170.77595520]
[-297.48571777 155.60870361]
[-291.98171997 141.26988220]
[-280.03561401 131.61659241]
[-264.86083984 129.24549866]
[-250.53935242 134.79440308]
[-240.92353821 146.77070618]
[-226.11070251 144.40858459]
[-211.29785156 142.04644775]
[-196.48501587 139.68431091]
[-181.67218018 137.32217407]
[-166.85932922 134.96003723]
[-152.04649353 132.59790039]
[-153.68898010 115.23002625]
[-154.13612366 97.79039001]
[-153.38581848 80.36116028]
[-151.44157410 63.02446747]
[-148.31257629 45.86199951]
[-144.01354980 28.95462227]
[-138.56475830 12.38200474]
[-131.99186707 -3.77776742]
[-124.32587433 -19.44855118]
[-115.60288239 -34.55650711]
[-105.86398315 -49.03044510]
[-95.15508270 -62.80217361]
[-83.52663422 -75.80679321]
[-71.03343201 -87.98303223]
[-57.73433685 -99.27351379]
[-43.69201279 -109.62504578]
[-28.97263145 -118.98884583]
[-13.64554596 -127.32080078]
[2.21702600 -134.58163452]
[18.54034042 -140.73715210]
[35.24748230 -145.75834656]
[52.25973129 -149.62155151]
[69.49692535 -152.30857849]
[86.87784576 -153.80674744]
[104.32060242 -154.10900879]
[121.74299622 -153.21392822]
[139.06294250 -151.12574768]
[156.19882202 -147.85427856]
[173.06990051 -143.41496277]
[189.59669495 -137.82868958]
[205.70130920 -131.12181091]
[221.30786133 -123.32589722]
[228.85346985 -136.28984070]
[236.39907837 -149.25378418]
[243.94467163 -162.21772766]
[251.49028015 -175.18167114]
[259.03588867 -188.14562988]
[251.92347717 -201.83566284]
[253.36428833 -217.19560242]
[262.89855957 -229.32412720]
[277.48394775 -234.35107422]
[292.46627808 -230.67237854]
[303.06478882 -219.46186829]
[305.89749146 -204.29679871]
[300.06051636 -190.01628113]
[287.41638184 -181.17718506]
[271.99981689 -180.60002136]
[264.45422363 -167.63607788]
[256.90863037 -154.67213440]
[249.36302185 -141.70819092]
[241.81741333 -128.74423218]
[234.27180481 -115.78029633]
[245.64408875 -108.27351379]
[256.59765625 -100.16799164]
[267.10107422 -91.48703766]
[277.12411499 -82.25560760]
[286.63793945 -72.50024414]
[295.61523438 -62.24897766]
[304.03021240 -51.53128433]
[311.85861206 -40.37797928]
[319.07800293 -28.82112312]
[325.66760254 -16.89393806]
[331.60842896 -4.63071012]
[336.88348389 7.93330431]
[341.47750854 20.76198769]
[345.37738037 33.81846237]
[348.57183838 47.06518936]
[351.05172729 60.46409225]
[352.80987549 73.97665405]
[353.84127808 87.56402588]
[354.14297485 101.18714142]
[353.71405029 114.80684662]
[352.55575562 128.38398743]
[350.67141724 141.87953186]
[348.06646729 155.25468445]
[344.74838257 168.47099304]
[340.72674561 181.49046326]
[336.01303101 194.27566528]
[330.62084961 206.78985596]
[324.56570435 218.99705505]
[317.86499023 230.86215210]
[310.53796387 242.35105896]
[302.60568237 253.43074036]
[294.09097290 264.06936646]
[285.01828003 274.23629761]
[275.41372681 283.90237427]
[265.30487061 293.03976440]
[254.72084045 301.62222290]
[243.69201660 309.62506104]
[232.25010681 317.02526855]
[220.42800903 323.80157471]
[208.25971985 329.93453979]
[195.78021240 335.40646362]
[183.02534485 340.20169067]
[170.03181458 344.30636597]
[156.83695984 347.70874023]
[143.47869873 350.39898682]
[129.99546814 352.36941528]
[116.42598724 353.61434937]
[102.80929565 354.13021851]
[89.18453217 353.91549683]
[75.59085083 352.97085571]
[62.06734848 351.29895020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
] def

init

% Start Annotations
22 45 0.16 0.6 colorpair
23 44 0.0 0.2 colorpair
24 43 0.32 1 colorpair
25 42 0.0 0.6 colorpair
26 41 0.16 0.6 colorpair
27 40 0.16 0.6 colorpair
28 39 0.0 0.6 colorpair
77 97 0.16 0.6 colorpair
78 96 0.0 0.6 colorpair
79 95 0.0 0.2 colorpair
80 94 0.16 1 colorpair
81 93 0.32 1 colorpair
82 92 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 45 1 gmark
22 cmark
45 cmark
23 44 2 gmark
24 cmark
43 cmark
25 42 1 gmark
26 41 1 gmark
26 cmark
27 40 1 gmark
27 cmark
40 cmark
28 39 1 gmark
77 97 1 gmark
77 cmark
78 96 1 gmark
79 95 2 gmark
94 cmark
81 cmark
93 cmark
82 92 1 gmark
82 cmark

% End Annotations
showpage
end
%%EOF
