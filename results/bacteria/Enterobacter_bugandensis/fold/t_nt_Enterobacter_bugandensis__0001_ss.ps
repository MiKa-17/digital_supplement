%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:07:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________U_AAAGACUGCACUAGACAUGGUGAUAAUUAUCCGCAAGCCCAUAGUGA_AUGAAA_UUU______CACGGCAAAUUCUACAUGCUGUCCAUAAACAAUG____UCA_GA______G_C__AA__A_C___________\
) } def
/len { sequence length } bind def

/coor [
[-3.67038679 384.91531372]
[-17.63364792 379.43978882]
[-31.30904007 373.28045654]
[-44.66309738 366.45236206]
[-57.66313934 358.97222900]
[-70.27735901 350.85833740]
[-82.47487640 342.13052368]
[-94.22584534 332.81021118]
[-105.50151825 322.92016602]
[-116.27429199 312.48461914]
[-126.51780701 301.52905273]
[-136.20700073 290.08032227]
[-145.31814575 278.16644287]
[-153.82897949 265.81655884]
[-161.71862793 253.06088257]
[-168.96781921 239.93064880]
[-175.55880737 226.45799255]
[-181.47544861 212.67585754]
[-186.70327759 198.61799622]
[-191.22949219 184.31880188]
[-195.04302979 169.81326294]
[-198.13453674 155.13687134]
[-212.94738770 157.49900818]
[-227.76022339 159.86114502]
[-242.57307434 162.22328186]
[-257.38589478 164.58540344]
[-272.19876099 166.94754028]
[-287.01159668 169.30967712]
[-292.42559814 183.68270874]
[-304.31094360 193.41072083]
[-319.47055054 195.87689209]
[-333.82653809 190.41786194]
[-343.51724243 178.50207520]
[-345.93588257 163.33482361]
[-340.43188477 148.99601746]
[-328.48577881 139.34271240]
[-313.31103516 136.97161865]
[-298.98953247 142.52053833]
[-289.37371826 154.49684143]
[-274.56088257 152.13470459]
[-259.74804688 149.77256775]
[-244.93519592 147.41043091]
[-230.12236023 145.04829407]
[-215.30950928 142.68615723]
[-200.49667358 140.32403564]
[-202.12315369 125.41402435]
[-203.01029968 110.44182587]
[-203.15592957 95.44407654]
[-202.55969238 80.45747375]
[-201.22303772 65.51869202]
[-199.14923096 50.66429520]
[-196.34336853 35.93063354]
[-192.81230164 21.35375595]
[-188.56468201 6.96934032]
[-183.61088562 -7.18741417]
[-177.96305847 -21.08186340]
[-171.63499451 -34.68000793]
[-164.64221191 -47.94856262]
[-157.00180054 -60.85506821]
[-148.73246765 -73.36793518]
[-139.85443115 -85.45654297]
[-130.38945007 -97.09130096]
[-120.36064911 -108.24375153]
[-109.79260254 -118.88658905]
[-98.71115875 -128.99378967]
[-87.14343262 -138.54058838]
[-75.11773682 -147.50364685]
[-62.66350174 -155.86102295]
[-49.81119919 -163.59226990]
[-36.59228516 -170.67845154]
[-23.03910828 -177.10224915]
[-9.18483448 -182.84793091]
[4.93663263 -187.90142822]
[19.29073524 -192.25039673]
[33.84234619 -195.88417053]
[48.55585861 -198.79386902]
[63.39525986 -200.97238159]
[78.32424164 -202.41435242]
[93.30626678 -203.11627197]
[108.30467224 -203.07641602]
[123.28275299 -202.29487610]
[138.20385742 -200.77357483]
[153.03147888 -198.51623535]
[167.72930908 -195.52836609]
[182.26139832 -191.81730652]
[196.59219360 -187.39210510]
[210.68659973 -182.26362610]
[224.51013184 -176.44439697]
[238.02897644 -169.94865417]
[251.21005249 -162.79231262]
[264.02108765 -154.99287415]
[276.43072510 -146.56941223]
[288.40859985 -137.54257202]
[299.92541504 -127.93441772]
[310.95300293 -117.76847839]
[321.46432495 -107.06961823]
[331.43371582 -95.86402130]
[340.83673096 -84.17912292]
[349.65039062 -72.04349518]
[357.85308838 -59.48685837]
[365.42480469 -46.53992844]
[372.34698486 -33.23439407]
[378.60266113 -19.60280991]
[384.17657471 -5.67853928]
[389.05505371 8.50434399]
[393.22616577 22.91113281]
[396.67971802 37.50656891]
[399.40722656 52.25494003]
[401.40203857 67.12014771]
[402.65927124 82.06581879]
[403.17587280 97.05538177]
[402.95053101 112.05214691]
[401.98382568 127.01941681]
[400.27810669 141.92056274]
[397.83755493 156.71913147]
[394.66818237 171.37889099]
[390.77767944 185.86398315]
[386.17559814 200.13894653]
[380.87319946 214.16885376]
[374.88345337 227.91937256]
[368.22103882 241.35685730]
[360.90222168 254.44841003]
[352.94494629 267.16198730]
[344.36865234 279.46652222]
[335.19436646 291.33184814]
[325.44454956 302.72897339]
[315.14300537 313.62997437]
[304.31497192 324.00820923]
[292.98693848 333.83822632]
[281.18664551 343.09603882]
[268.94293213 351.75894165]
[256.28582764 359.80572510]
[243.24624634 367.21673584]
[229.85612488 373.97384644]
[216.14822388 380.06048584]
[202.15608215 385.46176147]
[187.91395569 390.16445923]
[173.45668030 394.15710449]
[158.81965637 397.42987061]
[144.03868103 399.97479248]
[129.14993286 401.78561401]
[114.18985748 402.85794067]
[99.19505310 403.18908691]
[84.20222473 402.77832031]
[69.24805450 401.62658691]
[54.36913681 399.73672485]
[39.60188675 397.11334229]
[24.98243904 393.76290894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
] def

init

% Start Annotations
22 45 0.16 0.6 colorpair
23 44 0.0 0.6 colorpair
24 43 0.32 1 colorpair
25 42 0.0 0.6 colorpair
26 41 0.16 0.6 colorpair
27 40 0.16 0.6 colorpair
28 39 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
22 45 1 gmark
22 cmark
45 cmark
23 44 1 gmark
24 cmark
43 cmark
25 42 1 gmark
26 41 1 gmark
26 cmark
27 40 1 gmark
27 cmark
40 cmark
28 39 1 gmark

% End Annotations
showpage
end
%%EOF
