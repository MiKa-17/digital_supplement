%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:47:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGA_ACUACAAUCUAUU__UAGCCGUAGAGUGAAGUU_CAU____A_AUAUACA_________AA_UUAUUUAUU__CUUUUUGAACUUGAUUUUAAAAUCAAAUUCCAAGUCACUCU_U_AGU__GCCA___GA_U_G____________\
) } def
/len { sequence length } bind def

/coor [
[215.27943420 137.98902893]
[203.42835999 128.78845215]
[192.06251526 118.99475861]
[181.21157837 108.63349152]
[170.90385437 97.73168182]
[161.16622925 86.31777954]
[152.02410889 74.42155457]
[148.28436279 80.84635162]
[139.34385681 82.98687744]
[126.83001709 91.25753784]
[114.31616974 99.52819061]
[107.89789581 111.94983673]
[93.95448303 112.98564911]
[81.44064331 121.25630951]
[74.19393158 135.32029724]
[59.30995941 135.88293457]
[46.79611588 144.15359497]
[34.28227615 152.42424011]
[21.76843262 160.69490051]
[22.77585793 176.02072144]
[15.97101498 189.78987122]
[3.18437243 198.29853821]
[-12.14452744 199.25791931]
[-25.89228630 192.40995789]
[-34.36082840 179.59669495]
[-35.27215576 164.26486206]
[-28.38112831 150.53863525]
[-15.54139614 142.11030579]
[-0.20678347 141.24703979]
[13.49777603 148.18106079]
[26.01161766 139.91040039]
[38.52545929 131.63973999]
[51.03930283 123.36908722]
[57.39093781 109.89667511]
[73.16998291 108.74246216]
[85.68383026 100.47180939]
[92.10210419 88.05016327]
[106.04551697 87.01435089]
[118.55935669 78.74369049]
[131.07319641 70.47303772]
[143.50312805 62.07679749]
[135.62181091 49.31030273]
[128.40263367 36.15803528]
[121.86444092 22.65430832]
[116.02427673 8.83435154]
[110.89739990 -5.26577950]
[106.49716949 -19.60930061]
[102.83506775 -34.15879059]
[99.92064667 -48.87628937]
[97.76151276 -63.72340393]
[96.36330414 -78.66139221]
[95.72966003 -93.65129852]
[95.86224365 -108.65399933]
[96.76069641 -123.63036346]
[98.42267609 -138.54130554]
[100.84385681 -153.34794617]
[104.01792145 -168.01164246]
[107.93657684 -182.49414062]
[112.58960724 -196.75765991]
[117.96487427 -210.76498413]
[124.04835510 -224.47956848]
[130.82417297 -237.86564636]
[138.27465820 -250.88827515]
[146.38037109 -263.51348877]
[155.12014771 -275.70834351]
[164.47122192 -287.44104004]
[174.40916443 -298.68096924]
[184.90806580 -309.39880371]
[195.94053650 -319.56655884]
[207.47778320 -329.15771484]
[219.48970032 -338.14727783]
[231.94497681 -346.51177979]
[244.81109619 -354.22940063]
[258.05450439 -361.27999878]
[271.64065552 -367.64517212]
[285.53405762 -373.30831909]
[299.69854736 -378.25466919]
[314.09710693 -382.47134399]
[328.69216919 -385.94729614]
[343.44570923 -388.67349243]
[358.31918335 -390.64279175]
[373.27380371 -391.85009766]
[388.27059937 -392.29220581]
[403.27038574 -391.96801758]
[418.23403931 -390.87832642]
[433.12252808 -389.02603149]
[447.89703369 -386.41592407]
[462.51901245 -383.05480957]
[476.95025635 -378.95147705]
[491.15316772 -374.11663818]
[505.09069824 -368.56289673]
[518.72644043 -362.30474854]
[532.02490234 -355.35848999]
[544.95129395 -347.74227905]
[557.47192383 -339.47595215]
[569.55419922 -330.58111572]
[581.16650391 -321.08096313]
[592.27856445 -311.00024414]
[602.86138916 -300.36529541]
[612.88739014 -289.20385742]
[622.33044434 -277.54504395]
[631.16583252 -265.41928101]
[639.37054443 -252.85818481]
[646.92315674 -239.89453125]
[653.80401611 -226.56214905]
[659.99517822 -212.89581299]
[665.48040771 -198.93118286]
[670.24542236 -184.70468140]
[674.27783203 -170.25344849]
[677.56707764 -155.61515808]
[680.10461426 -140.82801819]
[681.88378906 -125.93059540]
[682.89996338 -110.96176147]
[683.15045166 -95.96056366]
[682.63470459 -80.96614075]
[681.35400391 -66.01761627]
[679.31164551 -51.15398788]
[676.51300049 -36.41403198]
[672.96545410 -21.83619881]
[668.67810059 -7.45852518]
[663.66223145 6.68147945]
[657.93090820 20.54692650]
[651.49908447 34.10163879]
[644.38354492 47.31026077]
[636.60284424 60.13832474]
[628.17730713 72.55236816]
[619.12884521 84.52000427]
[609.48114014 96.01000977]
[599.25927734 106.99240112]
[588.49005127 117.43854523]
[577.20147705 127.32116699]
[565.42297363 136.61450195]
[553.18536377 145.29429626]
[540.52044678 153.33789062]
[527.46142578 160.72433472]
[514.04223633 167.43432617]
[500.29791260 173.45037842]
[486.26434326 178.75679016]
[471.97814941 183.33972168]
[457.47659302 187.18719482]
[442.79748535 190.28919983]
[427.97912598 192.63763428]
[413.06021118 194.22637939]
[398.07962036 195.05126953]
[383.07644653 195.11016846]
[368.08981323 194.40290833]
[353.15887451 192.93135071]
[338.32254028 190.69932556]
[323.61953735 187.71267700]
[309.08822632 183.97915649]
[294.76647949 179.50852966]
[280.69168091 174.31246948]
[266.90057373 168.40451050]
[253.42913818 161.80007935]
[240.31248474 154.51638794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 41]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[16 33]
[17 32]
[18 31]
[19 30]
] def

init

% Start Annotations
7 41 0.0 1 colorpair
9 40 0.16 0.6 colorpair
10 39 0.0 0.6 colorpair
11 38 0.0 0.6 colorpair
13 36 0.0 0.6 colorpair
14 35 0.0 1 colorpair
16 33 0.0 0.6 colorpair
17 32 0.0 0.6 colorpair
18 31 0.0 1 colorpair
19 30 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 40 1 gmark
9 cmark
10 39 1 gmark
11 38 1 gmark
13 36 1 gmark
16 33 1 gmark
17 32 1 gmark
19 cmark

% End Annotations
showpage
end
%%EOF
