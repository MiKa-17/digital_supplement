%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:47:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGA_ACUACAAUCUAUU__UUGCGGUAGAGUGAAGU_UC_AUAAUUUA_A________A_AUU______UAUUUAUU__UUUAUGGAACUUGAUUUUAAAAUCAAAUUCCCAGCCACUCU_U_A____UCCUGCU___GA__________\
) } def
/len { sequence length } bind def

/coor [
[224.46441650 116.00447845]
[213.27572632 106.00854492]
[202.63017273 95.43605042]
[192.55743408 84.31646729]
[183.08555603 72.68078613]
[174.24096680 60.56143951]
[161.67472839 68.75225830]
[155.23744202 82.18396759]
[139.45137024 83.23770142]
[126.88512421 91.42852020]
[114.31888580 99.61933899]
[107.82165527 111.99987793]
[93.87193298 112.94689941]
[81.30569458 121.13772583]
[80.39419556 136.51547241]
[70.71569061 148.27047729]
[56.14361954 152.02796936]
[42.31868744 146.54991150]
[29.75244522 154.74072266]
[30.66228104 170.07264709]
[23.76991844 183.79820251]
[10.92936611 192.22529602]
[-4.40533018 193.08706665]
[-18.10921478 186.15171814]
[-26.49601173 173.28480530]
[-27.30971527 157.94747925]
[-20.33144188 144.26541138]
[-7.43831205 135.91897583]
[7.90148592 135.15336609]
[21.56162262 142.17448425]
[34.12786484 133.98365784]
[34.69631577 119.12382507]
[44.01609421 107.30833435]
[58.67761993 103.19821930]
[73.11487579 108.57147980]
[85.68111420 100.38066101]
[92.17834473 88.00012207]
[106.12806702 87.05310059]
[118.69430542 78.86227417]
[131.26054382 70.67145538]
[138.59664917 56.65388489]
[153.48390198 56.18601608]
[166.05014038 47.99519730]
[158.53208923 35.01119995]
[151.70973206 21.64852524]
[145.60212708 7.94442415]
[140.22625732 -6.06291246]
[135.59712219 -20.33444214]
[131.72763062 -34.83038712]
[128.62857056 -49.51034546]
[126.30855560 -64.33339691]
[124.77407074 -79.25823975]
[124.02939606 -94.24325562]
[124.07659149 -109.24669647]
[124.91554260 -124.22673798]
[126.54389954 -139.14161682]
[128.95712280 -153.94978333]
[132.14849854 -168.60995483]
[136.10911560 -183.08126831]
[140.82794189 -197.32339478]
[146.29183960 -211.29663086]
[152.48556519 -224.96202087]
[159.39184570 -238.28150940]
[166.99143982 -251.21795654]
[175.26318359 -263.73529053]
[184.18400574 -275.79864502]
[193.72903442 -287.37435913]
[203.87168884 -298.43023682]
[214.58367920 -308.93539429]
[225.83515930 -318.86059570]
[237.59475708 -328.17816162]
[249.82971191 -336.86215210]
[262.50592041 -344.88830566]
[275.58804321 -352.23428345]
[289.03964233 -358.87960815]
[302.82318115 -364.80575562]
[316.90026855 -369.99621582]
[331.23165894 -374.43652344]
[345.77743530 -378.11428833]
[360.49703979 -381.01928711]
[375.34942627 -383.14337158]
[390.29321289 -384.48068237]
[405.28677368 -385.02746582]
[420.28826904 -384.78216553]
[435.25592041 -383.74551392]
[450.14801025 -381.92037964]
[464.92303467 -379.31185913]
[479.53979492 -375.92721558]
[493.95755005 -371.77587891]
[508.13613892 -366.86941528]
[522.03601074 -361.22152710]
[535.61846924 -354.84793091]
[548.84558105 -347.76638794]
[561.68054199 -339.99664307]
[574.08758545 -331.56036377]
[586.03210449 -322.48104858]
[597.48083496 -312.78402710]
[608.40179443 -302.49630737]
[618.76464844 -291.64654541]
[628.54040527 -280.26501465]
[637.70190430 -268.38339233]
[646.22357178 -256.03485107]
[654.08172607 -243.25379944]
[661.25433350 -230.07582092]
[667.72149658 -216.53768921]
[673.46514893 -202.67709351]
[678.46929932 -188.53269958]
[682.71997070 -174.14392090]
[686.20538330 -159.55087280]
[688.91577148 -144.79420471]
[690.84362793 -129.91505432]
[691.98352051 -114.95491028]
[692.33227539 -99.95545197]
[691.88891602 -84.95848846]
[690.65478516 -70.00582886]
[688.63317871 -55.13913345]
[685.82983398 -40.39984512]
[682.25250244 -25.82905006]
[677.91113281 -11.46735668]
[672.81793213 2.64520836]
[666.98699951 16.46930885]
[660.43463135 29.96641350]
[653.17907715 43.09890747]
[645.24053955 55.83018112]
[636.64123535 68.12475586]
[627.40496826 79.94836426]
[617.55767822 91.26804352]
[607.12664795 102.05225372]
[596.14099121 112.27093506]
[584.63140869 121.89559937]
[572.62988281 130.89942932]
[560.16992188 139.25732422]
[547.28619385 146.94599915]
[534.01464844 153.94400024]
[520.39233398 160.23185730]
[506.45712280 165.79200745]
[492.24789429 170.60897827]
[477.80426025 174.66934204]
[463.16644287 177.96177673]
[448.37527466 180.47711182]
[433.47198486 182.20832825]
[418.49807739 183.15058899]
[403.49533081 183.30130005]
[388.50552368 182.66001892]
[373.57046509 181.22853088]
[358.73175049 179.01083374]
[344.03076172 176.01312256]
[329.50848389 172.24372864]
[315.20535278 167.71316528]
[301.16125488 162.43406677]
[287.41534424 156.42112732]
[274.00592041 149.69113159]
[260.97036743 142.26283264]
[248.34501648 134.15692139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[18 31]
[19 30]
] def

init

% Start Annotations
6 43 0.0 0.2 colorpair
7 42 0.0 1 colorpair
9 40 0.16 0.2 colorpair
10 39 0.0 0.2 colorpair
11 38 0.0 0.2 colorpair
13 36 0.0 0.2 colorpair
14 35 0.0 1 colorpair
18 31 0.0 1 colorpair
19 30 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 43 2 gmark
9 40 2 gmark
9 cmark
10 39 2 gmark
11 38 2 gmark
13 36 2 gmark
19 cmark

% End Annotations
showpage
end
%%EOF
