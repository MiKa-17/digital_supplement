%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:08:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________________G__AUGCAGCCAAAGGAGAUCGUCGUCGCAAUCAUCGCGCUCUGUAUUACCGCGCUGAGAGUCGCGCUAAUUAUACGAAAAGCCCUCUGUGAGGUGAGCAUUCGAAAGCGCCAGAUGGAAGUCAAAGCCGUCACAGCUUACGAAUCUGUUA______________\
) } def
/len { sequence length } bind def

/coor [
[-22.83123589 431.28585815]
[-36.78072357 425.77426147]
[-50.48372650 419.67559814]
[-63.91554260 413.00082397]
[-77.05197906 405.76205444]
[-89.86934662 397.97225952]
[-102.34456635 389.64547729]
[-114.45513916 380.79675293]
[-126.17926025 371.44201660]
[-137.49578857 361.59814453]
[-148.38432312 351.28283691]
[-158.82525635 340.51467896]
[-168.79977417 329.31311035]
[-178.28990173 317.69833374]
[-187.27853394 305.69122314]
[-195.74946594 293.31344604]
[-203.68742371 280.58731079]
[-211.07814026 267.53573608]
[-217.90826416 254.18226624]
[-224.16549683 240.55093384]
[-229.83856201 226.66632080]
[-234.91722107 212.55345154]
[-239.39236450 198.23776245]
[-243.25587463 183.74502563]
[-246.50083923 169.10139465]
[-249.12136841 154.33322144]
[-251.11276245 139.46714783]
[-252.47143555 124.52993774]
[-253.19493103 109.54853821]
[-253.28193665 94.54991913]
[-252.73231506 79.56112671]
[-251.54704285 64.60916901]
[-249.72825623 49.72098541]
[-247.27923584 34.92340851]
[-244.20439148 20.24310303]
[-258.74206543 16.54768562]
[-273.27975464 12.85226536]
[-287.81741333 9.15684700]
[-302.35507202 5.46142769]
[-316.89276123 1.76600838]
[-323.86679077 15.12488270]
[-333.73406982 26.51494789]
[-345.96246338 35.32195282]
[-359.89248657 41.07094574]
[-374.77291870 43.45189285]
[-389.80133057 42.33638763]
[-404.16717529 37.78459167]
[-417.09576416 30.04197884]
[-427.88989258 19.52609634]
[-435.96740723 6.80405188]
[-440.89273071 -7.43806934]
[-442.40020752 -22.43220711]
[-440.40856934 -37.36974716]
[-435.02523804 -51.44512939]
[-426.54049683 -63.89928436]
[-415.41192627 -74.06056976]
[-402.23968506 -81.38101196]
[-387.73413086 -85.46581268]
[-372.67755127 -86.09470367]
[-357.88186646 -83.23374939]
[-344.14505005 -77.03725433]
[-332.20791626 -67.83937836]
[-322.71417236 -56.13615036]
[-316.17581177 -42.55871582]
[-312.94546509 -27.83928680]
[-313.19732666 -12.77166271]
[-298.65966797 -9.07624340]
[-284.12197876 -5.38082457]
[-269.58432007 -1.68540525]
[-255.04664612 2.01001382]
[-240.50897217 5.70543289]
[-236.20019531 -8.66120815]
[-231.28555298 -22.83203506]
[-225.77392578 -36.78150940]
[-219.67521667 -50.48449326]
[-213.00044250 -63.91629791]
[-205.76161194 -77.05271149]
[-197.97178650 -89.87006378]
[-189.64500427 -102.34526062]
[-180.79624939 -114.45581818]
[-171.44148254 -126.17990875]
[-161.59756470 -137.49641418]
[-151.28222656 -148.38493347]
[-140.51406860 -158.82583618]
[-129.31246948 -168.80033875]
[-117.69765472 -178.29042053]
[-105.69052887 -187.27902222]
[-93.31272888 -195.74992371]
[-80.58657837 -203.68786621]
[-67.53498840 -211.07853699]
[-54.18149185 -217.90863037]
[-40.55015182 -224.16583252]
[-26.66553116 -229.83886719]
[-12.55265141 -234.91749573]
[1.76305664 -239.39259338]
[16.25579453 -243.25608826]
[30.89944458 -246.50100708]
[45.66761780 -249.12150574]
[60.53370285 -251.11286926]
[75.47090912 -252.47149658]
[90.45231628 -253.19494629]
[105.45092773 -253.28192139]
[120.43972015 -252.73225403]
[135.39167786 -251.54695129]
[150.27986145 -249.72813416]
[165.07742310 -247.27908325]
[179.75772095 -244.20420837]
[194.29429626 -240.50904846]
[208.66093445 -236.20028687]
[222.83177185 -231.28565979]
[236.78125000 -225.77403259]
[250.48423767 -219.67533875]
[263.91604614 -213.00057983]
[277.05245972 -205.76176453]
[289.86981201 -197.97193909]
[302.34503174 -189.64515686]
[314.45559692 -180.79641724]
[326.17968750 -171.44166565]
[337.49621582 -161.59774780]
[348.38473511 -151.28242493]
[358.82565308 -140.51426697]
[368.80014038 -129.31269836]
[378.29025269 -117.69787598]
[387.27886963 -105.69075775]
[395.74975586 -93.31297302]
[403.68771362 -80.58682251]
[411.07839966 -67.53524017]
[417.90850830 -54.18174744]
[424.16571045 -40.55041504]
[429.83874512 -26.66579628]
[434.91741943 -12.55292034]
[439.39251709 1.76278424]
[443.25601196 16.25551796]
[446.50094604 30.89916611]
[449.12145996 45.66733932]
[451.11282349 60.53342056]
[452.47146606 75.47062683]
[453.19494629 90.45203400]
[453.28192139 105.45064545]
[452.73226929 120.43943787]
[451.54696655 135.39138794]
[449.72817993 150.27957153]
[447.27914429 165.07714844]
[444.20428467 179.75744629]
[440.50912476 194.29402161]
[436.20037842 208.66067505]
[431.28576660 222.83149719]
[425.77413940 236.78099060]
[419.67547607 250.48397827]
[413.00070190 263.91580200]
[405.76190186 277.05221558]
[397.97210693 289.86959839]
[389.64532471 302.34478760]
[380.79660034 314.45535278]
[371.44183350 326.17947388]
[361.59793091 337.49600220]
[351.28262329 348.38452148]
[340.51446533 358.82546997]
[329.31289673 368.79995728]
[317.69808960 378.29006958]
[305.69097900 387.27868652]
[293.31320190 395.74960327]
[280.58706665 403.68756104]
[267.53549194 411.07827759]
[254.18200684 417.90838623]
[240.55067444 424.16558838]
[226.66606140 429.83865356]
[212.55319214 434.91732788]
[198.23748779 439.39242554]
[183.74475098 443.25595093]
[169.10110474 446.50088501]
[154.33294678 449.12139893]
[139.46685791 451.11279297]
[124.52965546 452.47146606]
[109.54824829 453.19494629]
[94.54963684 453.28192139]
[79.56084442 452.73229980]
[64.60888672 451.54699707]
[49.72070694 449.72821045]
[34.92313004 447.27917480]
[20.24282837 444.20434570]
[5.70625305 440.50921631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
] def

init

% Start Annotations
35 71 0.16 0.2 colorpair
36 70 0.16 0.2 colorpair
37 69 0.16 1 colorpair
38 68 0.16 0.2 colorpair
39 67 0.0 1 colorpair
40 66 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
35 71 2 gmark
35 cmark
71 cmark
36 70 2 gmark
36 cmark
70 cmark
37 cmark
38 68 2 gmark
38 cmark
68 cmark
40 66 2 gmark

% End Annotations
showpage
end
%%EOF
