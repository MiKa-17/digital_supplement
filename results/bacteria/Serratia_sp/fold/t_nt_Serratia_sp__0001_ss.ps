%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 23:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACUUAACGUUGUC_AGGCGU_UAGAGU_GGCCUCGGGUUGAUGGAUAUCGACUCGGGGCUUUUCUCUUUCUAUCUU_____\
) } def
/len { sequence length } bind def

/coor [
[105.62572479 244.49781799]
[109.30691528 229.81015015]
[117.55982208 217.11494446]
[129.48922729 207.78929138]
[124.56885529 193.61924744]
[119.64848328 179.44921875]
[114.72811127 165.27917480]
[109.80773926 151.10914612]
[104.88736725 136.93910217]
[94.77532959 136.89289856]
[85.04809570 134.12951660]
[76.42207336 128.85247803]
[69.53258514 121.45041656]
[64.88704681 112.46852875]
[62.82759857 102.56832123]
[47.96143723 100.56901550]
[33.09527588 98.56970978]
[18.19777870 96.81909943]
[3.27311206 95.31766510]
[-11.65155506 93.81622314]
[-26.57622147 92.31478882]
[-37.64942551 103.35644531]
[-53.23377991 104.64561462]
[-65.97082520 95.57358551]
[-69.84651947 80.42390442]
[-63.03088379 66.34977722]
[-48.74204636 59.99657822]
[-33.72676086 64.36409760]
[-25.07478714 77.39012146]
[-10.15011978 78.89155579]
[4.77454758 80.39299774]
[19.69921494 81.89443207]
[26.81248856 79.38083649]
[35.09457779 83.70355225]
[49.96073914 85.70285034]
[64.82690430 87.70215607]
[70.78724670 76.86995697]
[79.96394348 68.58439636]
[91.34663391 63.75772095]
[103.68206024 62.92135239]
[115.61209106 66.16738129]
[124.50978851 54.09132767]
[133.40748596 42.01527786]
[142.30517578 29.93922615]
[151.20288086 17.86317444]
[160.10057068 5.78712368]
[168.99826050 -6.28892708]
[177.89596558 -18.36497688]
[186.79365540 -30.44102859]
[195.69136047 -42.51707840]
[204.58905029 -54.59313202]
[213.48675537 -66.66918182]
[222.38444519 -78.74523163]
[231.28213501 -90.82128143]
[232.56657410 -107.17005157]
[247.48173523 -113.98692322]
[260.68420410 -104.25927734]
[258.59240723 -87.99408722]
[243.35818481 -81.92358398]
[234.46049500 -69.84753418]
[225.56280518 -57.77148438]
[216.66510010 -45.69543457]
[207.76741028 -33.61938477]
[198.86970520 -21.54333305]
[189.97201538 -9.46728134]
[181.07431030 2.60876918]
[172.17662048 14.68482018]
[163.27893066 26.76086998]
[154.38122559 38.83692169]
[145.48353577 50.91297150]
[136.58583069 62.98902130]
[127.68814087 75.06507111]
[136.87477112 94.64881134]
[133.63375854 116.03602600]
[119.05740356 132.01872253]
[123.97777557 146.18876648]
[128.89814758 160.35881042]
[133.81852722 174.52883911]
[138.73889160 188.69888306]
[143.65927124 202.86891174]
[158.80104065 202.79443359]
[173.14576721 207.64289856]
[185.13745117 216.88833618]
[193.47531128 229.52790833]
[197.25492859 244.19056702]
[196.06631470 259.28579712]
[190.03839111 273.17617798]
[179.82504272 284.35501099]
[166.53413391 291.60968018]
[151.60734558 294.15325928]
[136.66383362 291.70983887]
[123.32456970 284.54446411]
[113.03647614 273.43438721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% Start Annotations
4 80 0.0 1 colorpair
5 79 0.0 1 colorpair
6 78 0.0 1 colorpair
7 77 0.0 1 colorpair
8 76 0.0 0.2 colorpair
9 75 0.0 1 colorpair
15 36 0.16 1 colorpair
16 35 0.0 1 colorpair
17 34 0.32 1 colorpair
18 32 0.0 0.6 colorpair
19 31 0.16 0.6 colorpair
20 30 0.0 0.6 colorpair
21 29 0.16 0.2 colorpair
41 72 0.16 1 colorpair
42 71 0.0 1 colorpair
43 70 0.0 1 colorpair
44 69 0.0 1 colorpair
45 68 0.0 0.6 colorpair
46 67 0.0 1 colorpair
47 66 0.0 1 colorpair
48 65 0.0 0.6 colorpair
49 64 0.16 1 colorpair
50 63 0.0 1 colorpair
51 62 0.0 0.6 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 76 2 gmark
15 cmark
17 cmark
34 cmark
18 32 1 gmark
19 31 1 gmark
19 cmark
31 cmark
20 30 1 gmark
21 29 2 gmark
29 cmark
72 cmark
45 68 1 gmark
48 65 1 gmark
64 cmark
51 62 1 gmark

% End Annotations
showpage
end
%%EOF
