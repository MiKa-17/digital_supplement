%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 23:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUAACUUAACGUUGUC_AGGCGU_UAGAGU_GGCCUCGGGUUGAUG_AUAUCGACUCGGGGCUUUUCUCUUUCUAUCUU_____\
) } def
/len { sequence length } bind def

/coor [
[130.54763794 260.53601074]
[127.07034302 245.94464111]
[123.59304047 231.35327148]
[120.11573792 216.76188660]
[109.63877106 206.17498779]
[113.96614075 190.95707703]
[110.48883820 176.36570740]
[107.01153564 161.77432251]
[103.53423309 147.18293762]
[90.82052612 146.41613770]
[78.77200317 142.28584290]
[68.26173401 135.09135437]
[60.05134964 125.35401917]
[54.73579407 113.77942657]
[52.70025635 101.20632172]
[37.83409500 99.20702362]
[22.96793175 97.20771790]
[8.07043648 95.45709991]
[-6.85423088 93.95566559]
[-21.77889824 92.45423126]
[-36.70356369 90.95279694]
[-47.77677155 101.99445343]
[-63.36112213 103.28361511]
[-76.09816742 94.21159363]
[-79.97386932 79.06190491]
[-73.15822601 64.98777771]
[-58.86938858 58.63458252]
[-43.85410309 63.00210190]
[-35.20212936 76.02812958]
[-20.27746201 77.52956390]
[-5.35279560 79.03099823]
[9.57187176 80.53243256]
[16.68514633 78.01884460]
[24.96723557 82.34155273]
[39.83339691 84.34085846]
[54.69955826 86.34016418]
[62.15120697 71.60652161]
[74.21166992 60.33032608]
[89.41235352 53.88467789]
[105.90229034 53.05445862]
[121.67350769 57.94075394]
[130.57119751 45.86470413]
[139.46890259 33.78865433]
[148.36659241 21.71260262]
[157.26429749 9.63655186]
[166.16198730 -2.43949890]
[175.05969238 -14.51554966]
[183.95738220 -26.59160042]
[192.85507202 -38.66765213]
[201.75277710 -50.74370193]
[210.65046692 -62.81975174]
[219.54817200 -74.89580536]
[228.44586182 -86.97185516]
[237.34355164 -99.04790497]
[238.62799072 -115.39667511]
[253.54316711 -122.21354675]
[266.74563599 -112.48590088]
[264.65380859 -96.22071075]
[249.41960144 -90.15020752]
[240.52191162 -78.07415771]
[231.62422180 -65.99810791]
[222.72651672 -53.92205811]
[213.82882690 -41.84600449]
[204.93112183 -29.76995468]
[196.03343201 -17.69390488]
[187.13574219 -5.61785364]
[178.23803711 6.45819712]
[169.34034729 18.53424835]
[160.44264221 30.61029816]
[151.54495239 42.68634796]
[142.64724731 54.76240158]
[133.74955750 66.83844757]
[142.58627319 79.38130188]
[146.94485474 94.09230042]
[146.36700439 109.42450714]
[140.91348267 123.76569366]
[131.15773010 135.60781860]
[118.12561798 143.70564270]
[121.60291290 158.29702759]
[125.08021545 172.88839722]
[128.55752563 187.47978210]
[139.28320312 199.11035156]
[134.70712280 213.28457642]
[138.18441772 227.87596130]
[141.66172791 242.46734619]
[145.13902283 257.05871582]
[159.51618958 262.89624023]
[167.68775940 276.08734131]
[166.51158142 291.55978394]
[156.43992615 303.36407471]
[141.34556580 306.96124268]
[127.03256226 300.96810913]
[119.00457764 287.68914795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 83]
[6 81]
[7 80]
[8 79]
[9 78]
[15 36]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% Start Annotations
1 86 0.0 0.2 colorpair
2 85 0.16 1 colorpair
4 83 0.0 1 colorpair
6 81 0.0 1 colorpair
7 80 0.0 1 colorpair
8 79 0.16 1 colorpair
9 78 0.0 1 colorpair
15 36 0.16 1 colorpair
16 35 0.0 1 colorpair
17 34 0.32 1 colorpair
18 32 0.0 0.6 colorpair
19 31 0.16 0.6 colorpair
20 30 0.0 0.6 colorpair
21 29 0.16 0.2 colorpair
41 72 0.16 1 colorpair
42 71 0.0 1 colorpair
43 70 0.0 1 colorpair
44 69 0.0 1 colorpair
45 68 0.0 0.2 colorpair
46 67 0.0 1 colorpair
47 66 0.0 1 colorpair
48 65 0.0 0.6 colorpair
49 64 0.16 1 colorpair
50 63 0.0 1 colorpair
51 62 0.0 0.6 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 86 2 gmark
85 cmark
3 84 4 gmark
84 cmark
8 cmark
15 cmark
17 cmark
34 cmark
18 32 1 gmark
19 31 1 gmark
19 cmark
31 cmark
20 30 1 gmark
21 29 2 gmark
29 cmark
72 cmark
45 68 2 gmark
48 65 1 gmark
64 cmark
51 62 1 gmark

% End Annotations
showpage
end
%%EOF
