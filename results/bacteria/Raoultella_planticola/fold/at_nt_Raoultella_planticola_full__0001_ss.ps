%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 07:32:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________________________________________AGUCAUAAUUGCUAUUCCCUACAAAUAGUGAUUGUGAUGAGCGA___UGUGGAGGUGGUGGCACACCUCCAUAUCGCGCU_______________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[117.43573761 1105.03869629]
[102.45616150 1104.23364258]
[87.50849152 1102.96765137]
[72.60689545 1101.24182129]
[57.76551056 1099.05810547]
[42.99841309 1096.41821289]
[28.31961632 1093.32495117]
[13.74304104 1089.78100586]
[-0.71748817 1085.78991699]
[-15.04825211 1081.35534668]
[-29.23565865 1076.48168945]
[-43.26625061 1071.17333984]
[-57.12671661 1065.43542480]
[-70.80390930 1059.27343750]
[-84.28485870 1052.69323730]
[-97.55677032 1045.70092773]
[-110.60706329 1038.30322266]
[-123.42335510 1030.50720215]
[-135.99348450 1022.32019043]
[-148.30554199 1013.74993896]
[-160.34782410 1004.80456543]
[-172.10893250 995.49267578]
[-183.57769775 985.82293701]
[-194.74325562 975.80468750]
[-205.59498596 965.44726562]
[-216.12261963 954.76062012]
[-226.31616211 943.75482178]
[-236.16595459 932.44036865]
[-245.66264343 920.82788086]
[-254.79721069 908.92852783]
[-263.56100464 896.75347900]
[-271.94573975 884.31433105]
[-279.94338989 871.62286377]
[-287.54644775 858.69116211]
[-294.74765015 845.53143311]
[-301.54019165 832.15618896]
[-307.91760254 818.57812500]
[-313.87387085 804.81005859]
[-319.40332031 790.86517334]
[-324.50070190 776.75659180]
[-329.16119385 762.49768066]
[-333.38037109 748.10205078]
[-337.15423584 733.58331299]
[-340.47921753 718.95526123]
[-343.35214233 704.23175049]
[-345.77029419 689.42669678]
[-347.73135376 674.55426025]
[-349.23352051 659.62847900]
[-350.27532959 644.66351318]
[-350.85577393 629.67352295]
[-350.97433472 614.67285156]
[-350.63088989 599.67553711]
[-349.82577515 584.69598389]
[-348.55975342 569.74829102]
[-346.83398438 554.84674072]
[-344.65017700 540.00537109]
[-342.01034546 525.23822021]
[-338.91702271 510.55944824]
[-335.37310791 495.98287964]
[-331.38201904 481.52233887]
[-326.94747925 467.19158936]
[-322.07373047 453.00418091]
[-316.76541138 438.97360229]
[-311.02752686 425.11312866]
[-304.86553955 411.43594360]
[-298.28524780 397.95501709]
[-291.29296875 384.68310547]
[-283.89529419 371.63281250]
[-276.09921265 358.81652832]
[-267.91220093 346.24639893]
[-259.34191895 333.93435669]
[-250.39659119 321.89205933]
[-241.08464050 310.13095093]
[-231.41493225 298.66220093]
[-221.39663696 287.49667358]
[-211.03923035 276.64492798]
[-200.35256958 266.11730957]
[-189.34677124 255.92376709]
[-178.03228760 246.07397461]
[-166.41984558 236.57730103]
[-154.52046204 227.44273376]
[-142.34541321 218.67893982]
[-129.90626526 210.29423523]
[-117.21480560 202.29656982]
[-104.28308105 194.69354248]
[-91.12335205 187.49234009]
[-77.74810028 180.69981384]
[-64.17001343 174.32240295]
[-50.40197754 168.36614990]
[-36.45705032 162.83671570]
[-22.34845352 157.73933411]
[-8.08957577 153.07884216]
[6.30605936 148.85966492]
[20.82479668 145.08581543]
[35.45286560 141.76084900]
[50.17638779 138.88793945]
[64.98139954 136.46980286]
[79.85385132 134.50872803]
[94.77964783 133.00657654]
[93.73792267 118.04280090]
[82.87464905 108.45449829]
[81.86837769 93.99996185]
[91.29829407 82.99892426]
[90.25656891 68.03514099]
[89.21484375 53.07135773]
[88.17311859 38.10757446]
[87.13139343 23.14379120]
[75.04396057 12.96196938]
[73.77975464 -2.79167533]
[84.08879852 -14.77078533]
[99.85493469 -15.86836624]
[111.72438049 -5.43324375]
[112.65521240 10.34360981]
[102.09517670 22.10206604]
[103.13690186 37.06584930]
[104.17862701 52.02963257]
[105.22035217 66.99341583]
[106.26207733 81.95719910]
[117.12535095 91.54550171]
[118.13162231 106.00003815]
[108.70170593 117.00107574]
[109.74343109 131.96485901]
[124.73338318 131.38436890]
[139.73411560 131.26577759]
[154.73136902 131.60919189]
[169.71093750 132.41429138]
[184.65861511 133.68029785]
[199.56021118 135.40600586]
[214.40159607 137.58981323]
[229.16870117 140.22961426]
[243.84750366 143.32292175]
[258.42407227 146.86679077]
[272.88461304 150.85786438]
[287.21539307 155.29237366]
[301.40280151 160.16607666]
[315.43338013 165.47439575]
[329.29385376 171.21224976]
[342.97106934 177.37422180]
[356.45202637 183.95446777]
[369.72393799 190.94673157]
[382.77426147 198.34439087]
[395.59054565 206.14042664]
[408.16070557 214.32743835]
[420.47274780 222.89767456]
[432.51504517 231.84298706]
[444.27618408 241.15492249]
[455.74496460 250.82460022]
[466.91052246 260.84289551]
[477.76226807 271.20025635]
[488.28991699 281.88690186]
[498.48345947 292.89266968]
[508.33328247 304.20715332]
[517.82995605 315.81958008]
[526.96453857 327.71896362]
[535.72839355 339.89398193]
[544.11309814 352.33309937]
[552.11077881 365.02456665]
[559.71386719 377.95626831]
[566.91503906 391.11599731]
[573.70764160 404.49121094]
[580.08508301 418.06930542]
[586.04132080 431.83731079]
[591.57080078 445.78225708]
[596.66821289 459.89083862]
[601.32873535 474.14968872]
[605.54791260 488.54531860]
[609.32177734 503.06405640]
[612.64678955 517.69213867]
[615.51971436 532.41564941]
[617.93792725 547.22064209]
[619.89898682 562.09307861]
[621.40118408 577.01885986]
[622.44299316 591.98382568]
[623.02343750 606.97381592]
[623.14202881 621.97454834]
[622.79864502 636.97180176]
[621.99353027 651.95135498]
[620.72747803 666.89904785]
[619.00177002 681.80065918]
[616.81799316 696.64202881]
[614.17816162 711.40911865]
[611.08483887 726.08789062]
[607.54095459 740.66448975]
[603.54986572 755.12500000]
[599.11535645 769.45581055]
[594.24163818 783.64318848]
[588.93334961 797.67382812]
[583.19543457 811.53424072]
[577.03350830 825.21148682]
[570.45324707 838.69244385]
[563.46093750 851.96435547]
[556.06329346 865.01464844]
[548.26727295 877.83093262]
[540.08020020 890.40106201]
[531.50994873 902.71313477]
[522.56463623 914.75543213]
[513.25274658 926.51654053]
[503.58303833 937.98529053]
[493.56472778 949.15087891]
[483.20736694 960.00262451]
[472.52069092 970.53021240]
[461.51492310 980.72381592]
[450.20043945 990.57360840]
[438.58801270 1000.07025146]
[426.68862915 1009.20483398]
[414.51361084 1017.96868896]
[402.07446289 1026.35339355]
[389.38302612 1034.35107422]
[376.45129395 1041.95410156]
[363.29156494 1049.15527344]
[349.91632080 1055.94787598]
[336.33825684 1062.32531738]
[322.57022095 1068.28161621]
[308.62530518 1073.81103516]
[294.51672363 1078.90844727]
[280.25784302 1083.56896973]
[265.86221313 1087.78808594]
[251.34347534 1091.56201172]
[236.71542358 1094.88696289]
[221.99189758 1097.75988770]
[207.18688965 1100.17810059]
[192.31443787 1102.13916016]
[177.38864136 1103.64135742]
[162.42367554 1104.68310547]
[147.43371582 1105.26354980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[99 122]
[100 121]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
99 122 3 gmark
99 cmark
122 cmark
100 121 3 gmark
100 cmark
121 cmark
103 118 3 gmark
103 cmark
118 cmark
104 117 3 gmark
104 cmark
117 cmark
105 116 3 gmark
116 cmark
106 115 5 gmark
115 cmark
107 114 5 gmark
114 cmark

% End Annotations
showpage
end
%%EOF
