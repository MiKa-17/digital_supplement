%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:29:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________________AAAUGCCGCAAAAAACGGUGAUUUAGUGUCUAUUGAUCGUCUGUAUAACGCUACUGGCGUUUAUCAGAAUCACACAUGGAUACCUGUGUGAGAUACACAUCAAAAACGGUAAUAAAGAGGUUGCCGCCGUUUUAGCCUACGCAUCUAAA___\
) } def
/len { sequence length } bind def

/coor [
[9.66684437 303.04660034]
[-1.41925406 297.74258423]
[-12.19520092 291.83386230]
[-22.62804222 285.33850098]
[-32.68587112 278.27633667]
[-42.33793640 270.66900635]
[-51.55471420 262.53973389]
[-60.30802155 253.91340637]
[-68.57108307 244.81639099]
[-76.31864166 235.27650452]
[-83.52700043 225.32293701]
[-90.17411041 214.98611450]
[-96.23964691 204.29763794]
[-101.70505524 193.29022217]
[-106.55363464 181.99751282]
[-110.77054596 170.45405579]
[-114.34290314 158.69512939]
[-117.25977325 146.75671387]
[-119.51222992 134.67529297]
[-121.09340668 122.48785400]
[-121.99845123 110.23163605]
[-122.22459412 97.94412231]
[-121.77115631 85.66290283]
[-120.63951111 73.42552948]
[-118.83312988 61.26942062]
[-116.35753632 49.23175430]
[-113.22029114 37.34934235]
[-109.43099976 25.65852356]
[-123.38944244 20.16654205]
[-137.34788513 14.67456055]
[-151.30632019 9.18257809]
[-158.58264160 22.32450867]
[-167.51211548 34.40422058]
[-177.94195557 45.21501923]
[-189.69369507 54.57191849]
[-202.56625366 62.31480408]
[-216.33935547 68.31118774]
[-230.77734375 72.45845795]
[-245.63313293 74.68566132]
[-260.65252686 74.95468140]
[-275.57855225 73.26091003]
[-290.15579224 69.63333893]
[-304.13479614 64.13403320]
[-317.27639771 56.85709763]
[-329.35568237 47.92704773]
[-340.16598511 37.49668884]
[-349.52230835 25.74449921]
[-357.26458740 12.87157345]
[-363.26031494 -0.90181631]
[-367.40689087 -15.33998871]
[-369.63339233 -30.19588852]
[-369.90170288 -45.21530914]
[-368.20721436 -60.14125061]
[-364.57894897 -74.71831512]
[-359.07897949 -88.69705963]
[-351.80142212 -101.83829498]
[-342.87078857 -113.91716003]
[-332.43991089 -124.72696686]
[-320.68728638 -134.08274841]
[-307.81399536 -141.82440186]
[-294.04031372 -147.81947327]
[-279.60195923 -151.96537781]
[-264.74594116 -154.19116211]
[-249.72651672 -154.45875549]
[-234.80064392 -152.76356506]
[-220.22375488 -149.13459778]
[-206.24526978 -143.63397217]
[-193.10438538 -136.35577393]
[-181.02593994 -127.42457581]
[-170.21664429 -116.99319458]
[-160.86141968 -105.24011230]
[-153.12037659 -92.36644745]
[-147.12596130 -78.59248352]
[-142.98074341 -64.15391541]
[-140.75566101 -49.29780960]
[-140.48878479 -34.27836227]
[-142.18469238 -19.35257912]
[-145.81434631 -4.77586508]
[-131.85589600 0.71611708]
[-117.89746094 6.20809889]
[-103.93901062 11.70008087]
[-93.76535797 -8.82546520]
[-81.53273773 -28.19462204]
[-67.37113953 -46.20157242]
[-51.43103027 -62.65497208]
[-33.88180923 -77.37998199]
[-14.90994358 -90.22013855]
[5.28296471 -101.03900146]
[26.48234367 -109.72160339]
[48.46292877 -116.17568970]
[70.99114990 -120.33266449]
[93.82762146 -122.14836884]
[116.72968292 -121.60350800]
[139.45397949 -118.70386505]
[161.75901794 -113.48025513]
[183.40780640 -105.98818970]
[204.17030334 -96.30727386]
[223.82588196 -84.54037476]
[232.59927368 -96.70702362]
[241.37268066 -108.87368011]
[250.14607239 -121.04033661]
[245.17063904 -135.73811340]
[249.81669617 -150.54330444]
[262.29772949 -159.76301575]
[277.81457520 -159.85208130]
[290.40063477 -150.77624512]
[295.21630859 -136.02536011]
[290.40994263 -121.27143860]
[277.82958984 -112.18766022]
[262.31271362 -112.26693726]
[253.53932190 -100.10028076]
[244.76593018 -87.93362427]
[235.99252319 -75.76697540]
[244.29388428 -69.01856232]
[252.26083374 -61.87845993]
[259.87493896 -54.36321259]
[267.11853027 -46.49024200]
[273.97485352 -38.27779007]
[280.42800903 -29.74488449]
[286.46301270 -20.91130638]
[292.06588745 -11.79752445]
[297.22369385 -2.42465830]
[301.92443848 7.18557024]
[306.15722656 17.01089096]
[309.91226196 27.02853203]
[313.18084717 37.21527863]
[315.95541382 47.54752731]
[318.22949219 58.00133133]
[319.99783325 68.55245972]
[321.25634766 79.17647552]
[322.00213623 89.84873962]
[322.23342896 100.54453278]
[321.94973755 111.23905945]
[321.15167236 121.90754700]
[319.84109497 132.52525330]
[318.02105713 143.06759644]
[315.69577026 153.51013184]
[312.87060547 163.82865906]
[309.55215454 173.99926758]
[305.74807739 183.99838257]
[301.46716309 193.80284119]
[296.71939087 203.38992310]
[309.75418091 210.81250000]
[322.78894043 218.23507690]
[339.17565918 217.59648132]
[347.69198608 231.61091614]
[339.57705688 245.86152649]
[323.17880249 245.68850708]
[315.36636353 231.26985168]
[302.33160400 223.84727478]
[289.29681396 216.42469788]
[282.57153320 226.71083069]
[275.28790283 236.60946655]
[267.46823120 246.09033203]
[259.13644409 255.12443542]
[250.31797791 263.68414307]
[241.03984070 271.74331665]
[231.33036804 279.27725220]
[221.21928406 286.26293945]
[210.73748779 292.67901611]
[199.91705322 298.50585938]
[188.79106140 303.72564697]
[177.39353943 308.32244873]
[165.75933838 312.28213501]
[153.92402649 315.59265137]
[141.92381287 318.24386597]
[129.79539490 320.22769165]
[117.57586670 321.53799438]
[105.30258179 322.17083740]
[93.01307678 322.12423706]
[80.74494171 321.39837646]
[68.53569794 319.99545288]
[56.42266846 317.91973877]
[44.44290161 315.17761230]
[32.63303757 311.77746582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 81]
[29 80]
[30 79]
[31 78]
[98 113]
[99 112]
[100 111]
[101 110]
[142 151]
[143 150]
[144 149]
] def

init

% Start Annotations
28 81 0.16 1 colorpair
29 80 0.16 1 colorpair
30 79 0.0 1 colorpair
31 78 0.16 1 colorpair
98 113 0.0 1 colorpair
99 112 0.16 1 colorpair
100 111 0.16 1 colorpair
101 110 0.0 1 colorpair
143 150 0.0 1 colorpair
144 149 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
81 cmark
29 cmark
80 cmark
31 cmark
99 cmark
100 cmark
142 151 8 gmark
142 cmark
151 cmark

% End Annotations
showpage
end
%%EOF
