%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:29:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
C___A_AUGCC_CAAAAAACUGUCAUU_UAUUGUCUAUUGAUCGUCUGUAUAAC_CU_CUGGCGUUAAUGAGAAUCACACAGGGAUAUCUAUGUGAAAUACACAUCAAAAACGGU_A_AAAGAGGUUGCAGCCGUUUUGGCCUACGCAUC_AAACGGUAAG__G\
) } def
/len { sequence length } bind def

/coor [
[65.14614868 316.06152344]
[51.24203110 313.35424805]
[37.54217148 309.75317383]
[24.10396194 305.27337646]
[10.98370171 299.93365479]
[-1.76364744 293.75637817]
[-14.08468437 286.76739502]
[-25.92779160 278.99597168]
[-37.24335861 270.47473145]
[-47.98397446 261.23931885]
[-58.10465240 251.32841492]
[-67.56299591 240.78356934]
[-76.31936646 229.64895630]
[-84.33709717 217.97120667]
[-91.58259583 205.79924011]
[-98.02550507 193.18406677]
[-103.63883972 180.17851257]
[-108.39907837 166.83706665]
[-112.28628540 153.21563721]
[-115.28417206 139.37126160]
[-117.38018036 125.36196136]
[-118.56552887 111.24641418]
[-118.83525085 97.08374786]
[-118.18821716 82.93329620]
[-116.62714386 68.85433960]
[-114.15856171 54.90586472]
[-110.79281616 41.14630127]
[-106.54401398 27.63328743]
[-101.42994690 14.42343712]
[-95.47203827 1.57208753]
[-88.69524384 -10.86692333]
[-81.12796783 -22.84148598]
[-72.80189514 -34.30143356]
[-84.32310486 -43.90673447]
[-95.84430695 -53.51203918]
[-107.36550903 -63.11734009]
[-120.69659424 -54.64155960]
[-135.97378540 -50.69805908]
[-151.70294189 -51.66016388]
[-166.34950256 -57.42201233]
[-178.48826599 -67.41005707]
[-186.94197083 -80.64015961]
[-190.89559937 -95.81449890]
[-189.97482300 -111.44894409]
[-184.28147888 -126.01816559]
[-195.98345947 -135.40237427]
[-207.68545532 -144.78659058]
[-221.45445251 -138.29228210]
[-236.61595154 -138.41969299]
[-250.16317749 -145.08996582]
[-259.43280029 -156.93205261]
[-262.62841797 -171.56411743]
[-259.16851807 -186.07255554]
[-270.87051392 -195.45675659]
[-285.46374512 -190.45260620]
[-300.44030762 -194.15470886]
[-311.02127075 -205.38175964]
[-313.83029175 -220.55123901]
[-307.97100830 -234.82261658]
[-295.31307983 -243.64195251]
[-279.89566040 -244.19503784]
[-266.63830566 -236.30535889]
[-259.77148438 -222.49050903]
[-261.48629761 -207.15875244]
[-249.78431702 -197.77453613]
[-236.37382507 -204.30326843]
[-221.39697266 -204.36224365]
[-207.82414246 -197.88619995]
[-198.37046814 -186.11129761]
[-194.95281982 -171.33947754]
[-198.30123901 -156.48857117]
[-186.59925842 -147.10437012]
[-174.89726257 -137.72015381]
[-163.15644836 -145.84289551]
[-149.58518982 -150.32644653]
[-135.28431702 -150.79768372]
[-121.41648102 -147.20925903]
[-109.11169434 -139.84431458]
[-99.37521362 -129.29402161]
[-93.00541687 -116.41025543]
[-90.52838898 -102.23674011]
[-92.15441895 -87.92453766]
[-97.76020813 -74.63854218]
[-86.23900604 -65.03324127]
[-74.71779633 -55.42794037]
[-63.19659424 -45.82263947]
[-52.13618851 -57.32752609]
[-40.26679611 -67.99582672]
[-27.65153122 -77.77079773]
[-14.35747910 -86.60047913]
[-0.45532879 -94.43790436]
[13.98099422 -101.24140167]
[28.87472534 -106.97479248]
[44.14666367 -111.60759735]
[59.71560669 -115.11517334]
[75.49876404 -117.47887421]
[91.41220093 -118.68611908]
[107.37130737 -118.73050690]
[123.29121399 -117.61178589]
[139.08726501 -115.33591461]
[154.67547607 -111.91498566]
[169.97296143 -107.36720276]
[184.89834595 -101.71673584]
[199.37228394 -94.99363708]
[213.31781006 -87.23365784]
[226.66076660 -78.47806549]
[239.33021545 -68.77340698]
[251.25875854 -58.17129517]
[262.38299561 -46.72810364]
[272.64373779 -34.50468445]
[281.98645020 -21.56603432]
[290.36145020 -7.98095512]
[297.72421265 6.17831469]
[304.03555298 20.83648300]
[309.26193237 35.91560364]
[313.37557983 51.33549500]
[316.35458374 67.01416016]
[318.18310547 82.86823273]
[318.85147095 98.81339264]
[318.35604858 114.76486969]
[316.69955444 130.63783264]
[313.89071655 146.34788513]
[309.94454956 161.81147766]
[304.88198853 176.94638062]
[298.72994995 191.67211914]
[312.12731934 198.41828918]
[324.97131348 190.11293030]
[340.14776611 189.35659790]
[353.57586670 196.25241089]
[361.69506836 208.85932922]
[362.40902710 223.73736572]
[375.80639648 230.48352051]
[390.09918213 224.13919067]
[405.11175537 228.51602173]
[413.75564575 241.54740906]
[411.94946289 257.08032227]
[400.54605103 267.78060913]
[384.92974854 268.59591675]
[372.47409058 259.14129639]
[369.06024170 243.88088989]
[355.66287231 237.13471985]
[343.28494263 245.42041016]
[328.32208252 246.40447998]
[314.78619385 239.72273254]
[306.35684204 227.07983398]
[305.38113403 211.81564331]
[291.98379517 205.06948853]
[284.78466797 217.26893616]
[276.81143188 228.97711182]
[268.09747314 240.14495850]
[258.67932129 250.72572327]
[248.59643555 260.67504883]
[237.89103699 269.95126343]
[226.60797119 278.51553345]
[214.79452515 286.33193970]
[202.50016785 293.36773682]
[189.77641296 299.59350586]
[176.67657471 304.98309326]
[163.25550842 309.51397705]
[149.56944275 313.16717529]
[135.67573547 315.92733765]
[121.63256073 317.78292847]
[107.49876404 318.72616577]
[93.33355713 318.75311279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 86]
[34 85]
[35 84]
[36 83]
[45 73]
[46 72]
[47 71]
[53 65]
[54 64]
[125 147]
[126 146]
[131 141]
[132 140]
] def

init

% Start Annotations
33 86 0.16 1 colorpair
34 85 0.16 1 colorpair
35 84 0.16 0.2 colorpair
36 83 0.16 1 colorpair
45 73 0.16 1 colorpair
46 72 0.16 1 colorpair
47 71 0.32 0.2 colorpair
53 65 0.16 1 colorpair
54 64 0.0 1 colorpair
125 147 0.0 1 colorpair
126 146 0.16 1 colorpair
131 141 0.0 1 colorpair
132 140 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
86 cmark
85 cmark
35 84 2 gmark
35 cmark
36 cmark
73 cmark
46 cmark
72 cmark
47 71 2 gmark
47 cmark
71 cmark
53 cmark
126 cmark
132 cmark
140 cmark

% End Annotations
showpage
end
%%EOF
