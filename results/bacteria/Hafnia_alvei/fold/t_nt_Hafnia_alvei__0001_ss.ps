%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:29:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAGAUG_CCACAAAAAACUGUGAUUUGGUGUGUAUUGAUCGUCUGUAUAACGCUACUGGCGUUCAUCAGAAUCACUCACGGAUAUCUGUGUGA_AUACACAUCAAAAACGGUAAGAAAGAAGUCGCAGCCGUUUU_GCCUACGCAUC_AAACGGUAAG__G\
) } def
/len { sequence length } bind def

/coor [
[337.68981934 669.98992920]
[323.12936401 666.37451172]
[308.74853516 662.10015869]
[294.57717896 657.17565918]
[280.64462280 651.61120605]
[266.97979736 645.41845703]
[253.61096191 638.61016846]
[240.56587219 631.20043945]
[227.87155151 623.20465088]
[215.55432129 614.63940430]
[203.63969421 605.52239990]
[192.15237427 595.87249756]
[181.11616516 585.70983887]
[170.55393982 575.05535889]
[160.48760986 563.93121338]
[150.93801880 552.36035156]
[141.92495728 540.36694336]
[133.46711731 527.97564697]
[125.58203125 515.21228027]
[118.28603363 502.10324097]
[111.59425354 488.67572021]
[105.52055359 474.95755005]
[100.07752991 460.97714233]
[95.27645874 446.76348877]
[91.12728882 432.34603882]
[87.63863373 417.75469971]
[84.81770325 403.01968384]
[82.67036438 388.17153931]
[81.20104980 373.24105835]
[80.41281891 358.25915527]
[80.30730438 343.25692749]
[80.88471222 328.26544189]
[82.14385986 313.31576538]
[84.08213043 298.43887329]
[86.69551086 283.66564941]
[89.97858429 269.02667236]
[93.92453766 254.55227661]
[98.52519989 240.27250671]
[103.77103424 226.21691895]
[109.65116119 212.41465759]
[116.15340424 198.89433289]
[123.26428223 185.68397522]
[130.96905518 172.81094360]
[139.25175476 160.30194092]
[148.09521484 148.18289185]
[136.39323425 138.79867554]
[124.69123840 129.41445923]
[112.98925018 120.03025055]
[98.79954529 123.84304047]
[85.06456757 118.62429810]
[76.98699188 106.35083771]
[77.62654114 91.67173767]
[65.92455292 82.28752899]
[54.22256088 72.90331268]
[39.62934494 77.90747070]
[24.65276527 74.20536041]
[14.07179260 62.97831726]
[11.26277924 47.80884171]
[17.12206841 33.53746033]
[29.77998543 24.71812439]
[45.19742966 24.16504669]
[58.45475769 32.05471420]
[65.32160187 45.86956024]
[63.60676956 61.20132446]
[75.30876160 70.58553314]
[87.01074982 79.96974945]
[101.20045471 76.15695953]
[114.93543243 81.37570190]
[123.01300812 93.64916229]
[122.37345886 108.32826233]
[134.07545471 117.71247101]
[145.77743530 127.09668732]
[157.47943115 136.48089600]
[167.38821411 125.21615601]
[177.79942322 114.41407776]
[188.69151306 104.09706116]
[200.04188538 94.28649139]
[211.82701111 85.00268555]
[224.02247620 76.26490784]
[236.60301208 68.09124756]
[249.54251099 60.49866104]
[262.81417847 53.50288391]
[276.39053345 47.11840820]
[290.24337769 41.35847092]
[304.34402466 36.23501205]
[318.66326904 31.75864792]
[333.17138672 27.93865776]
[347.83834839 24.78296089]
[362.63375854 22.29809380]
[377.52691650 20.48921013]
[392.48696899 19.36005974]
[407.48291016 18.91297913]
[422.48367310 19.14889908]
[437.45812988 20.06732750]
[452.37530518 21.66636276]
[467.20419312 23.94268799]
[481.91415405 26.89158821]
[496.47460938 30.50695229]
[510.85543823 34.78128052]
[525.02685547 39.70572281]
[538.95941162 45.27006531]
[552.62426758 51.46277618]
[565.99310303 58.27101898]
[579.03820801 65.68068695]
[591.73260498 73.67642212]
[604.04986572 82.24164581]
[615.96453857 91.35861206]
[627.45190430 101.00842285]
[638.48815918 111.17108154]
[649.05041504 121.82550812]
[659.11676025 132.94964600]
[668.66644287 144.52040100]
[677.67950439 156.51383972]
[686.13739014 168.90505981]
[694.02252197 181.66839600]
[701.31860352 194.77740479]
[708.01043701 208.20489502]
[714.08416748 221.92304993]
[719.52728271 235.90344238]
[724.32836914 250.11708069]
[728.47760010 264.53451538]
[731.96630859 279.12585449]
[734.78729248 293.86083984]
[736.93469238 308.70898438]
[738.40405273 323.63946533]
[739.19238281 338.62133789]
[739.29797363 353.62356567]
[738.72058105 368.61508179]
[737.46148682 383.56475830]
[735.52331543 398.44165039]
[732.90997314 413.21487427]
[729.62695312 427.85388184]
[725.68109131 442.32827759]
[721.08044434 456.60806274]
[715.83465576 470.66369629]
[709.95458984 484.46597290]
[703.45239258 497.98632812]
[696.34161377 511.19671631]
[688.63684082 524.06976318]
[680.35418701 536.57879639]
[671.51080322 548.69787598]
[662.12493896 560.40191650]
[652.21612549 571.66662598]
[641.80487061 582.46862793]
[630.91278076 592.78564453]
[619.56231689 602.59613037]
[607.77716064 611.87988281]
[595.58166504 620.61761475]
[583.00109863 628.79125977]
[570.06158447 636.38378906]
[556.78985596 643.37951660]
[543.21350098 649.76391602]
[529.36065674 655.52380371]
[515.25994873 660.64721680]
[500.94073486 665.12353516]
[486.43255615 668.94348145]
[471.76559448 672.09912109]
[456.97018433 674.58392334]
[442.07702637 676.39270020]
[427.11697388 677.52185059]
[412.12100220 677.96881104]
[397.12026978 677.73284912]
[382.14578247 676.81439209]
[367.22863770 675.21527100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[45 73]
[46 72]
[47 71]
[48 70]
[52 66]
[53 65]
[54 64]
] def

init

% Start Annotations
45 73 0.16 1 colorpair
46 72 0.0 1 colorpair
47 71 0.32 1 colorpair
48 70 0.16 1 colorpair
52 66 0.0 1 colorpair
53 65 0.0 1 colorpair
54 64 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
73 cmark
47 cmark
71 cmark
70 cmark
54 cmark
64 cmark

% End Annotations
showpage
end
%%EOF
