%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:29:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________________AGAUGCCGCAAAAAACGGUGAUUUACUGUUUAUUGAUCGUCUGUUUAACGCUAUUGGCGUUUAUCAGGAUCACACAUGGAUAGCUGUGUGAGAUACAAAUUAAAAACGGUAAAAAAGAGGUUGCCGCGGUUUUAGCCUACGCAUCUAAACGG\
) } def
/len { sequence length } bind def

/coor [
[246.02973938 690.63043213]
[233.76589966 681.98358154]
[222.10700989 672.53692627]
[211.10511780 662.33264160]
[200.80937195 651.41625977]
[191.26576233 639.83660889]
[182.51689148 627.64532471]
[174.60185242 614.89697266]
[167.55598450 601.64837646]
[161.41076660 587.95874023]
[156.19364929 573.88928223]
[151.92791748 559.50268555]
[148.63262939 544.86334229]
[146.32249451 530.03662109]
[145.00785828 515.08868408]
[144.69456482 500.08630371]
[145.38403320 485.09649658]
[147.07316589 470.18624878]
[149.75442505 455.42208862]
[153.41583252 440.86999512]
[158.04104614 426.59497070]
[163.60940552 412.66073608]
[170.09603882 399.12954712]
[177.47196960 386.06185913]
[185.70425415 373.51599121]
[194.75613403 361.54800415]
[204.58717346 350.21133423]
[215.15347290 339.55664062]
[226.40783691 329.63146973]
[238.29998779 320.48019409]
[229.96643066 308.00814819]
[221.63287354 295.53610229]
[213.29933167 283.06405640]
[204.96577454 270.59201050]
[196.63221741 258.11996460]
[182.73112488 263.69268799]
[167.96936035 266.25424194]
[152.99177551 265.69021606]
[138.45314026 262.02285767]
[124.98952484 255.41014099]
[113.19052124 246.13890076]
[103.57336426 234.61247253]
[96.56031036 221.33314514]
[92.46003723 206.88021851]
[91.45412445 191.88476562]
[93.58895874 177.00212097]
[98.77363586 162.88311768]
[106.78381348 150.14578247]
[117.27141571 139.34814453]
[102.78160095 142.88171387]
[87.95670319 141.24969482]
[74.58255768 134.64869690]
[64.27022552 123.87387085]
[58.26194382 110.22317505]
[57.28147888 95.34098053]
[61.44693375 81.02001953]
[70.25653839 68.98540497]
[61.92298508 56.51336288]
[53.58943176 44.04131699]
[39.48913574 36.86550903]
[38.85157394 21.98455429]
[30.51801872 9.51251030]
[22.18446541 -2.95953417]
[7.46643639 0.66750813]
[-7.60417461 -0.96113521]
[-21.20751953 -7.64879751]
[-31.70092583 -18.58791161]
[-37.81726837 -32.45752335]
[-38.81796265 -47.58281708]
[-34.58217239 -62.13732910]
[-25.62139511 -74.36354065]
[-13.01768112 -82.78507233]
[1.70700729 -86.38498688]
[16.77459145 -84.72856903]
[30.36558914 -78.01585388]
[40.83881760 -67.05741882]
[46.92958832 -53.17655563]
[47.90240860 -38.04944992]
[43.63980484 -23.50276375]
[34.65650940 -11.29308796]
[42.99006271 1.17895651]
[51.32361603 13.65100098]
[64.82784271 19.93472672]
[66.06147766 35.70776367]
[74.39502716 48.17980957]
[82.72858429 60.65185165]
[97.21839905 57.11828613]
[112.04329681 58.75030136]
[125.41744232 65.35130310]
[135.72978210 76.12612915]
[141.73805237 89.77682495]
[142.71852112 104.65901947]
[138.55307007 118.97998047]
[129.74346924 131.01458740]
[143.73260498 125.45738983]
[158.56573486 122.93132019]
[173.59408569 123.54440308]
[188.16082764 127.26741791]
[201.62985229 133.93527222]
[213.41351318 143.25431824]
[222.99824524 154.81532288]
[229.96693420 168.11138916]
[234.01716614 182.56019592]
[234.97422791 197.52952576]
[232.79872131 212.36491394]
[227.58813477 226.41824341]
[219.57250977 239.07606506]
[209.10426331 249.78642273]
[217.43782043 262.25848389]
[225.77136230 274.73049927]
[234.10491943 287.20254517]
[242.43847656 299.67459106]
[250.77203369 312.14663696]
[263.77764893 304.66177368]
[277.25415039 298.06228638]
[291.14135742 292.37768555]
[305.37722778 287.63333130]
[319.89822388 283.85043335]
[334.63943481 281.04589844]
[349.53506470 279.23220825]
[364.51858521 278.41751099]
[379.52304077 278.60540771]
[394.48144531 279.79510498]
[409.32699585 281.98123169]
[423.99337769 285.15408325]
[438.41506958 289.29943848]
[452.52767944 294.39880371]
[466.26815796 300.42938232]
[479.57516479 307.36428833]
[492.38925171 315.17251587]
[504.65319824 323.81921387]
[516.31219482 333.26571655]
[527.31420898 343.46987915]
[537.61010742 354.38610840]
[547.15386963 365.96566772]
[555.90289307 378.15679932]
[563.81811523 390.90509033]
[570.86413574 404.15359497]
[577.00952148 417.84310913]
[582.22680664 431.91256714]
[586.49273682 446.29904175]
[589.78820801 460.93835449]
[592.09851074 475.76507568]
[593.41333008 490.71301270]
[593.72680664 505.71536255]
[593.03753662 520.70520020]
[591.34857178 535.61547852]
[588.66754150 550.37963867]
[585.00628662 564.93176270]
[580.38122559 579.20684814]
[574.81304932 593.14117432]
[568.32659912 606.67242432]
[560.95086670 619.74023438]
[552.71875000 632.28619385]
[543.66699219 644.25433350]
[533.83612061 655.59106445]
[523.26995850 666.24591064]
[512.01568604 676.17120361]
[500.12365723 685.32263184]
[487.64691162 693.65936279]
[474.64120483 701.14404297]
[461.16464233 707.74334717]
[447.27734375 713.42779541]
[433.04141235 718.17193604]
[418.52038574 721.95465088]
[403.77911377 724.75903320]
[388.88345337 726.57250977]
[373.89993286 727.38702393]
[358.89547729 727.19891357]
[343.93707275 726.00909424]
[329.09158325 723.82275391]
[314.42523193 720.64971924]
[300.00360107 716.50421143]
[285.89105225 711.40466309]
[272.15063477 705.37390137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 113]
[31 112]
[32 111]
[33 110]
[34 109]
[35 108]
[49 94]
[57 86]
[58 85]
[59 84]
[61 82]
[62 81]
[63 80]
] def

init

% Start Annotations
30 113 0.0 1 colorpair
31 112 0.16 1 colorpair
32 111 0.0 1 colorpair
33 110 0.16 1 colorpair
35 108 0.0 1 colorpair
57 86 0.0 1 colorpair
58 85 0.32 1 colorpair
59 84 0.16 1 colorpair
62 81 0.16 1 colorpair
63 80 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
31 cmark
33 cmark
34 109 3 gmark
34 cmark
109 cmark
49 94 4 gmark
49 cmark
94 cmark
58 cmark
85 cmark
59 cmark
61 82 4 gmark
61 cmark
82 cmark
62 cmark
81 cmark
80 cmark

% End Annotations
showpage
end
%%EOF
