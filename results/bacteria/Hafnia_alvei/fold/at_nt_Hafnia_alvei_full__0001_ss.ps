%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:29:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___UGAUUUA_UGU_UAUUGAUCGUCUGU_UAACGCUACUGGCGUUUAUCAGGAUCGCUCAUGGAUAUCUGUGUGAAAUACAAAUUAAAAACGGUAAAAAAGAAGUUGCCGCAGUUUUAGCCUACGCAUCUAAAC___AAG_UG_C_UAACGGCGAGG_____________A___C_______________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50495911 92.07740784]
[62.52777100 91.23253632]
[47.58032990 89.96607208]
[32.67450333 88.27900696]
[17.82211876 86.17268372]
[3.03496957 83.64877319]
[-11.67520714 80.70928192]
[-26.29673386 77.35654449]
[-40.81800461 73.59322357]
[-55.22748947 69.42229462]
[-69.51375580 64.84708405]
[-83.66545105 59.87121582]
[-97.67135620 54.49863815]
[-111.52034760 48.73361969]
[-125.20142365 42.58073807]
[-138.70373535 36.04487228]
[-152.01655579 29.13121414]
[-165.12931824 21.84525108]
[-178.03163147 14.19276714]
[-190.71322632 6.17983723]
[-203.16404724 -2.18717837]
[-215.37420654 -10.90163708]
[-227.33401489 -19.95662308]
[-239.03399658 -29.34494591]
[-250.46482849 -39.05915451]
[-261.61746216 -49.09153366]
[-272.48303223 -59.43412781]
[-283.05291748 -70.07872009]
[-293.31872559 -81.01686096]
[-303.27233887 -92.23986816]
[-312.90579224 -103.73883820]
[-322.21148682 -115.50463104]
[-331.18203735 -127.52791595]
[-339.81027222 -139.79914856]
[-348.08938599 -152.30859375]
[-356.01281738 -165.04629517]
[-363.57424927 -178.00218201]
[-370.76770020 -191.16592407]
[-377.58743286 -204.52711487]
[-384.02804565 -218.07511902]
[-390.08441162 -231.79917908]
[-395.75177002 -245.68843079]
[-401.02557373 -259.73181152]
[-405.90164185 -273.91821289]
[-410.37612915 -288.23632812]
[-414.44546509 -302.67483521]
[-418.10644531 -317.22225952]
[-421.35614014 -331.86703491]
[-424.19195557 -346.59753418]
[-426.61166382 -361.40209961]
[-428.61334229 -376.26895142]
[-430.19537354 -391.18627930]
[-431.35653687 -406.14227295]
[-432.09591675 -421.12506104]
[-432.41290283 -436.12268066]
[-432.30725098 -451.12332153]
[-431.77902222 -466.11502075]
[-430.82867432 -481.08587646]
[-429.45693970 -496.02401733]
[-427.66491699 -510.91760254]
[-425.45404053 -525.75476074]
[-422.82601929 -540.52380371]
[-419.78298950 -555.21289062]
[-416.32733154 -569.81042480]
[-412.46179199 -584.30480957]
[-408.18948364 -598.68457031]
[-403.51373291 -612.93823242]
[-398.43829346 -627.05456543]
[-392.96719360 -641.02227783]
[-387.10476685 -654.83032227]
[-380.85565186 -668.46771240]
[-374.22482300 -681.92364502]
[-367.21755981 -695.18743896]
[-359.83941650 -708.24853516]
[-352.09622192 -721.09661865]
[-343.99417114 -733.72143555]
[-335.53964233 -746.11303711]
[-326.73941040 -758.26147461]
[-317.60040283 -770.15722656]
[-308.12988281 -781.79077148]
[-298.33538818 -793.15289307]
[-288.22470093 -804.23455811]
[-277.80581665 -815.02703857]
[-267.08703613 -825.52166748]
[-256.07684326 -835.71014404]
[-244.78399658 -845.58447266]
[-233.21745300 -855.13665771]
[-221.38639832 -864.35925293]
[-209.30021667 -873.24487305]
[-196.96852112 -881.78649902]
[-184.40106201 -889.97729492]
[-171.60784912 -897.81079102]
[-158.59902954 -905.28076172]
[-145.38493347 -912.38128662]
[-131.97604370 -919.10668945]
[-118.38301086 -925.45172119]
[-104.61661530 -931.41125488]
[-90.68778992 -936.98065186]
[-76.60759735 -942.15539551]
[-62.38721085 -946.93139648]
[-48.03791809 -951.30493164]
[-33.57110596 -955.27246094]
[-18.99826431 -958.83087158]
[-4.33096075 -961.97729492]
[10.41916370 -964.70928955]
[25.24039841 -967.02465820]
[40.12097931 -968.92156982]
[55.04909515 -970.39849854]
[70.01289368 -971.45428467]
[85.00048828 -972.08807373]
[100.00000000 -972.29937744]
[114.99951172 -972.08807373]
[129.98710632 -971.45428467]
[144.95091248 -970.39849854]
[159.87901306 -968.92156982]
[174.75959778 -967.02465820]
[189.58084106 -964.70928955]
[204.33096313 -961.97729492]
[218.99826050 -958.83087158]
[233.57110596 -955.27246094]
[248.03791809 -951.30493164]
[262.38720703 -946.93139648]
[276.60760498 -942.15539551]
[290.68780518 -936.98065186]
[304.61660767 -931.41125488]
[318.38299561 -925.45172119]
[331.97604370 -919.10668945]
[345.38494873 -912.38128662]
[358.59902954 -905.28076172]
[371.60784912 -897.81079102]
[384.40106201 -889.97729492]
[396.96850586 -881.78649902]
[409.30023193 -873.24487305]
[421.38641357 -864.35925293]
[433.21746826 -855.13665771]
[444.78399658 -845.58447266]
[456.07684326 -835.71014404]
[467.08703613 -825.52166748]
[477.80581665 -815.02703857]
[488.22470093 -804.23455811]
[498.33538818 -793.15289307]
[508.12988281 -781.79077148]
[517.60040283 -770.15722656]
[526.73937988 -758.26147461]
[535.53967285 -746.11303711]
[543.99420166 -733.72143555]
[552.09625244 -721.09661865]
[559.83941650 -708.24853516]
[567.21759033 -695.18743896]
[574.22485352 -681.92364502]
[580.85565186 -668.46771240]
[587.10473633 -654.83032227]
[592.96716309 -641.02227783]
[598.43829346 -627.05456543]
[603.51373291 -612.93823242]
[608.18945312 -598.68457031]
[612.46179199 -584.30480957]
[616.32733154 -569.81042480]
[619.78295898 -555.21289062]
[622.82598877 -540.52380371]
[625.45404053 -525.75476074]
[627.66491699 -510.91760254]
[629.45697021 -496.02401733]
[630.82867432 -481.08587646]
[631.77905273 -466.11502075]
[632.30725098 -451.12332153]
[632.41290283 -436.12268066]
[632.09594727 -421.12506104]
[631.35656738 -406.14227295]
[630.19537354 -391.18627930]
[628.61334229 -376.26895142]
[626.61163330 -361.40209961]
[624.19195557 -346.59753418]
[621.35614014 -331.86703491]
[618.10644531 -317.22225952]
[614.44549561 -302.67483521]
[610.37615967 -288.23632812]
[605.90167236 -273.91821289]
[601.02557373 -259.73181152]
[595.75177002 -245.68843079]
[590.08441162 -231.79917908]
[584.02801514 -218.07511902]
[577.58740234 -204.52711487]
[570.76770020 -191.16592407]
[563.57427979 -178.00218201]
[556.01281738 -165.04629517]
[548.08941650 -152.30859375]
[539.81030273 -139.79914856]
[531.18200684 -127.52791595]
[522.21148682 -115.50463104]
[512.90582275 -103.73883820]
[503.27233887 -92.23986816]
[493.31872559 -81.01686096]
[483.05291748 -70.07872009]
[472.48303223 -59.43412781]
[461.61746216 -49.09153366]
[450.46481323 -39.05915451]
[439.03399658 -29.34494591]
[427.33401489 -19.95662308]
[415.37420654 -10.90163708]
[403.16403198 -2.18717837]
[390.71322632 6.17983723]
[378.03161621 14.19276714]
[365.12933350 21.84525108]
[352.01657104 29.13121414]
[338.70373535 36.04487228]
[325.20141602 42.58073807]
[311.52035522 48.73361969]
[297.67135620 54.49863815]
[283.66546631 59.87121582]
[269.51376343 64.84708405]
[255.22749329 69.42229462]
[240.81800842 73.59322357]
[226.29673767 77.35654449]
[211.67520142 80.70928192]
[196.96502686 83.64877319]
[182.17788696 86.17268372]
[167.32550049 88.27900696]
[152.41966248 89.96607208]
[137.47222900 91.23253632]
[122.49504089 92.07740784]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
