%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:19:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______________________________________________________________________________A______GGGUAUUUGAGGCUGCCCGA_AU_GAGGUGUUAACAUGAAU_GGCAGAU__AAAGA___GAAGCAGCACA_______UCACUA_GA_______G______C______________________G___________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50388336 92.12602997]
[62.52174759 91.37831116]
[47.56291199 90.25730896]
[32.63667297 88.76372528]
[17.75231171 86.89848328]
[2.91907597 84.66274261]
[-11.85381031 82.05789185]
[-26.55716324 79.08555603]
[-41.18184662 75.74757385]
[-55.71876144 72.04602814]
[-70.15888214 67.98322296]
[-84.49321747 63.56167221]
[-98.71287537 58.78413010]
[-112.80899811 53.65357208]
[-126.77283478 48.17317963]
[-140.59570312 42.34636307]
[-154.26899719 36.17674255]
[-167.78424072 29.66815376]
[-181.13301086 22.82464600]
[-194.30702209 15.65047073]
[-207.29809570 8.15008736]
[-220.09812927 0.32815969]
[-232.69917297 -7.81045103]
[-245.09339905 -16.26068497]
[-257.27310181 -25.01728821]
[-269.23071289 -34.07482147]
[-280.95880127 -43.42764664]
[-292.45007324 -53.06995773]
[-303.69738770 -62.99575424]
[-314.69375610 -73.19886780]
[-325.43231201 -83.67296600]
[-335.90640259 -94.41152191]
[-346.10952759 -105.40786743]
[-356.03533936 -116.65515900]
[-365.67767334 -128.14642334]
[-375.03051758 -139.87449646]
[-384.08804321 -151.83210754]
[-392.84466553 -164.01181030]
[-401.29492188 -176.40602112]
[-409.43353271 -189.00706482]
[-417.25546265 -201.80709839]
[-424.75585938 -214.79814148]
[-431.93005371 -227.97215271]
[-438.77359009 -241.32092285]
[-445.28216553 -254.83615112]
[-451.45181274 -268.50946045]
[-457.27865601 -282.33230591]
[-462.75906372 -296.29614258]
[-467.88961792 -310.39227295]
[-472.66717529 -324.61190796]
[-477.08874512 -338.94625854]
[-481.15155029 -353.38635254]
[-484.85311890 -367.92327881]
[-488.19113159 -382.54794312]
[-491.16348267 -397.25131226]
[-493.76834106 -412.02416992]
[-496.00408936 -426.85742188]
[-497.86935425 -441.74179077]
[-499.36294556 -456.66802979]
[-500.48394775 -471.62686157]
[-501.23168945 -486.60897827]
[-501.60568237 -501.60510254]
[-501.60568237 -516.60589600]
[-501.23171997 -531.60198975]
[-500.48397827 -546.58410645]
[-499.36297607 -561.54296875]
[-497.86938477 -576.46917725]
[-496.00415039 -591.35357666]
[-493.76840210 -606.18682861]
[-491.16354370 -620.95971680]
[-488.19119263 -635.66302490]
[-484.85321045 -650.28771973]
[-481.15167236 -664.82464600]
[-477.08883667 -679.26477051]
[-472.66729736 -693.59912109]
[-467.88973999 -707.81872559]
[-462.75918579 -721.91485596]
[-457.27877808 -735.87872314]
[-451.45196533 -749.70153809]
[-445.28234863 -763.37487793]
[-438.77374268 -776.89007568]
[-431.93023682 -790.23889160]
[-424.75607300 -803.41290283]
[-417.25567627 -816.40393066]
[-409.43374634 -829.20397949]
[-401.29513550 -841.80499268]
[-392.84487915 -854.19921875]
[-384.08828735 -866.37896729]
[-375.03073120 -878.33654785]
[-365.67791748 -890.06463623]
[-356.03561401 -901.55590820]
[-346.10980225 -912.80322266]
[-335.90667725 -923.79956055]
[-325.43258667 -934.53814697]
[-314.69403076 -945.01220703]
[-303.69766235 -955.21533203]
[-292.45037842 -965.14117432]
[-280.95910645 -974.78344727]
[-269.23101807 -984.13629150]
[-257.27343750 -993.19384766]
[-245.09371948 -1001.95043945]
[-232.69949341 -1010.40069580]
[-220.09844971 -1018.53930664]
[-207.29843140 -1026.36120605]
[-194.30737305 -1033.86169434]
[-181.13336182 -1041.03588867]
[-167.78459167 -1047.87939453]
[-154.26934814 -1054.38793945]
[-140.59605408 -1060.55761719]
[-126.77319336 -1066.38439941]
[-112.80936432 -1071.86474609]
[-98.71324158 -1076.99536133]
[-84.49359131 -1081.77294922]
[-70.15925598 -1086.19445801]
[-55.71913910 -1090.25732422]
[-41.18222427 -1093.95886230]
[-26.55754471 -1097.29687500]
[-11.85419369 -1100.26916504]
[2.91869092 -1102.87402344]
[17.75192451 -1105.10974121]
[32.63628769 -1106.97509766]
[47.56252289 -1108.46862793]
[62.52135849 -1109.58959961]
[77.50349426 -1110.33740234]
[92.49961090 -1110.71142578]
[107.50038910 -1110.71142578]
[122.49650574 -1110.33740234]
[137.47863770 -1109.58959961]
[152.43746948 -1108.46862793]
[167.36370850 -1106.97509766]
[182.24807739 -1105.10974121]
[197.08131409 -1102.87402344]
[211.85418701 -1100.26916504]
[226.55754089 -1097.29687500]
[241.18222046 -1093.95886230]
[255.71914673 -1090.25732422]
[270.15924072 -1086.19445801]
[284.49359131 -1081.77294922]
[298.71322632 -1076.99536133]
[312.80935669 -1071.86474609]
[326.77319336 -1066.38439941]
[340.59606934 -1060.55761719]
[354.26934814 -1054.38793945]
[367.78457642 -1047.87939453]
[381.13336182 -1041.03588867]
[394.30737305 -1033.86169434]
[407.29843140 -1026.36120605]
[420.09844971 -1018.53930664]
[432.69949341 -1010.40069580]
[445.09371948 -1001.95043945]
[457.27343750 -993.19384766]
[469.23101807 -984.13629150]
[480.95910645 -974.78344727]
[492.45037842 -965.14117432]
[503.69766235 -955.21533203]
[514.69403076 -945.01220703]
[525.43255615 -934.53814697]
[535.90667725 -923.79956055]
[546.10980225 -912.80322266]
[556.03558350 -901.55590820]
[565.67791748 -890.06463623]
[575.03076172 -878.33654785]
[584.08825684 -866.37896729]
[592.84490967 -854.19921875]
[601.29510498 -841.80499268]
[609.43371582 -829.20397949]
[617.25567627 -816.40393066]
[624.75604248 -803.41290283]
[631.93023682 -790.23889160]
[638.77374268 -776.89007568]
[645.28234863 -763.37487793]
[651.45196533 -749.70153809]
[657.27880859 -735.87872314]
[662.75921631 -721.91485596]
[667.88977051 -707.81872559]
[672.66729736 -693.59912109]
[677.08886719 -679.26477051]
[681.15167236 -664.82464600]
[684.85321045 -650.28771973]
[688.19122314 -635.66302490]
[691.16351318 -620.95971680]
[693.76837158 -606.18682861]
[696.00415039 -591.35357666]
[697.86938477 -576.46917725]
[699.36297607 -561.54296875]
[700.48400879 -546.58410645]
[701.23168945 -531.60198975]
[701.60571289 -516.60589600]
[701.60565186 -501.60510254]
[701.23168945 -486.60897827]
[700.48394775 -471.62686157]
[699.36297607 -456.66802979]
[697.86932373 -441.74179077]
[696.00408936 -426.85742188]
[693.76831055 -412.02416992]
[691.16345215 -397.25131226]
[688.19110107 -382.54794312]
[684.85314941 -367.92327881]
[681.15155029 -353.38635254]
[677.08874512 -338.94625854]
[672.66717529 -324.61190796]
[667.88964844 -310.39227295]
[662.75903320 -296.29614258]
[657.27862549 -282.33230591]
[651.45184326 -268.50946045]
[645.28216553 -254.83615112]
[638.77355957 -241.32092285]
[631.93005371 -227.97215271]
[624.75585938 -214.79814148]
[617.25549316 -201.80709839]
[609.43353271 -189.00706482]
[601.29492188 -176.40602112]
[592.84466553 -164.01181030]
[584.08807373 -151.83210754]
[575.03051758 -139.87449646]
[565.67767334 -128.14642334]
[556.03533936 -116.65515900]
[546.10955811 -105.40786743]
[535.90643311 -94.41152191]
[525.43231201 -83.67296600]
[514.69372559 -73.19886780]
[503.69738770 -62.99575424]
[492.45007324 -53.06995773]
[480.95880127 -43.42764664]
[469.23071289 -34.07482147]
[457.27310181 -25.01728821]
[445.09341431 -16.26068497]
[432.69915771 -7.81045103]
[420.09811401 0.32815969]
[407.29809570 8.15008736]
[394.30703735 15.65047073]
[381.13302612 22.82464600]
[367.78424072 29.66815376]
[354.26901245 36.17674255]
[340.59570312 42.34636307]
[326.77282715 48.17317963]
[312.80899048 53.65357208]
[298.71286011 58.78413010]
[284.49322510 63.56167221]
[270.15887451 67.98322296]
[255.71876526 72.04602814]
[241.18183899 75.74757385]
[226.55715942 79.08555603]
[211.85380554 82.05789185]
[197.08091736 84.66274261]
[182.24769592 86.89848328]
[167.36332703 88.76372528]
[152.43708801 90.25730896]
[137.47825623 91.37831116]
[122.49611664 92.12602997]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
