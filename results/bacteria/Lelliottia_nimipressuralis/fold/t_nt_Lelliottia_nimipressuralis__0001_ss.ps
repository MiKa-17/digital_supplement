%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:51:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AUGAGGCCAAUAAAAAC_CUGUUGGGAGUUGUGUUUAUGAUCAGCCUGACGUUAAUGA_________AAAUUGCCCGAGGCU_GUUCUGCGAUUUGUC__UCAA_AAUGA_CAA_A_GAGAUGGCGGCAG_AUU_____________________\
) } def
/len { sequence length } bind def

/coor [
[-62.71552658 239.83110046]
[-69.88156128 231.03179932]
[-76.57230377 221.86590576]
[-82.76902771 212.35905457]
[-88.45441437 202.53785706]
[-93.61253357 192.42977905]
[-98.22897339 182.06309509]
[-102.29080963 171.46681213]
[-105.78667450 160.67059326]
[-108.70680237 149.70462036]
[-123.41126251 152.66752625]
[-138.11572266 155.63044739]
[-152.82017517 158.59335327]
[-167.52464294 161.55625916]
[-169.86721802 175.63339233]
[-176.86734009 188.03492737]
[-187.66333008 197.27589417]
[-200.94036865 202.25781250]
[-215.09069824 202.39924622]
[-228.40824890 197.70361328]
[-239.29434204 188.75625610]
[-246.44961548 176.65164185]
[-261.21008301 179.32160950]
[-275.97055054 181.99157715]
[-290.73101807 184.66154480]
[-305.49148560 187.33151245]
[-307.75936890 202.30265808]
[-314.76773071 215.72509766]
[-325.75634766 226.14283752]
[-339.53323364 232.42585754]
[-354.60397339 233.89260864]
[-369.33383179 230.38400269]
[-382.12500000 222.28062439]
[-391.58999634 210.46145630]
[-396.70211792 196.20857239]
[-396.90686035 181.06800842]
[-392.18200684 166.68209839]
[-383.04006958 154.61131287]
[-370.47271729 146.16500854]
[-355.84310913 142.25938416]
[-340.73822021 143.31806946]
[-326.79647827 149.22625732]
[-315.53018188 159.34304810]
[-308.16143799 172.57104492]
[-293.40097046 169.90107727]
[-278.64050293 167.23110962]
[-263.88006592 164.56114197]
[-249.11958313 161.89117432]
[-246.00764465 146.37835693]
[-237.16873169 133.20930481]
[-223.92709351 124.40983582]
[-208.28686523 121.34716034]
[-192.62887573 124.51753235]
[-179.34812927 133.46606445]
[-170.48754883 146.85180664]
[-155.78309631 143.88890076]
[-141.07862854 140.92597961]
[-126.37416840 137.96307373]
[-111.66970825 135.00016785]
[-114.26976013 110.84197998]
[-114.12153625 86.54473114]
[-111.22695160 62.42007065]
[-105.62313080 38.77741241]
[-97.38194275 15.92000771]
[-86.60910034 -5.85896969]
[-73.44277191 -26.28017998]
[-58.05182648 -45.08169556]
[-40.63367844 -62.02236176]
[-21.41173744 -76.88490295]
[-0.63254398 -89.47867584]
[21.43738174 -99.64215851]
[44.51496887 -107.24499512]
[68.30421448 -112.18966675]
[92.50000000 -114.41275024]
[92.50000000 -129.41275024]
[92.50000000 -144.41275024]
[92.50000000 -159.41275024]
[86.45365906 -175.25187683]
[100.00000000 -185.44664001]
[113.54634094 -175.25187683]
[107.50000000 -159.41275024]
[107.50000000 -144.41275024]
[107.50000000 -129.41275024]
[107.50000000 -114.41275024]
[118.82671356 -113.71623993]
[130.10075378 -112.42179871]
[141.29058838 -110.53305054]
[152.36488342 -108.05527496]
[163.29267883 -104.99539948]
[174.04339600 -101.36199188]
[184.58695984 -97.16522217]
[194.89385986 -92.41681671]
[204.93527222 -87.13007355]
[214.68310547 -81.31978607]
[224.11006165 -75.00219727]
[233.18980408 -68.19499207]
[241.89689636 -60.91720963]
[250.20700073 -53.18922043]
[258.09683228 -45.03263474]
[265.54437256 -36.47028351]
[272.52874756 -27.52611542]
[279.03042603 -18.22515488]
[285.03118896 -8.59342766]
[290.51431274 1.34212184]
[295.46438599 11.55369473]
[299.86761475 22.01272202]
[303.71163940 32.68994141]
[306.98574829 43.55548096]
[309.68072510 54.57893753]
[311.78906250 65.72947693]
[313.30487061 76.97589111]
[314.22390747 88.28672791]
[314.54357910 99.63033295]
[314.26300049 110.97497559]
[313.38293457 122.28890991]
[311.90591431 133.54048157]
[309.83599854 144.69821167]
[307.17901611 155.73089600]
[303.94238281 166.60765076]
[300.13516235 177.29804993]
[295.76803589 187.77220154]
[290.85314941 198.00076294]
[285.40432739 207.95515442]
[279.43676758 217.60749817]
[272.96719360 226.93081665]
[266.01367188 235.89900208]
[258.59570312 244.48696899]
[250.73400879 252.67068481]
[242.45059204 260.42727661]
[233.76861572 267.73501587]
[224.71240234 274.57345581]
[215.30726624 280.92349243]
[205.57951355 286.76736450]
[195.55638123 292.08865356]
[185.26589966 296.87255859]
[174.73686218 301.10565186]
[163.99873352 304.77606201]
[153.08154297 307.87359619]
[142.01585388 310.38949585]
[130.83259583 312.31680298]
[119.56308746 313.65008545]
[108.23883820 314.38562012]
[96.89154053 314.52136230]
[85.55294037 314.05691528]
[74.25476074 312.99356079]
[63.02860641 311.33432007]
[51.90589142 309.08380127]
[40.91773605 306.24829102]
[30.09488106 302.83578491]
[19.46760368 298.85574341]
[9.06563950 294.31936646]
[-1.08190978 289.23931885]
[-10.94665337 283.62985229]
[-20.50099182 277.50659180]
[-29.71819305 270.88671875]
[-38.57247162 263.78872681]
[-47.03905487 256.23251343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% Start Annotations
10 59 0.16 1 colorpair
11 58 0.0 1 colorpair
12 57 0.32 0.6 colorpair
13 56 0.0 0.6 colorpair
14 55 0.16 0.6 colorpair
22 48 0.16 0.2 colorpair
23 47 0.16 1 colorpair
24 46 0.32 1 colorpair
25 45 0.0 0.2 colorpair
26 44 0.32 1 colorpair
74 84 0.32 0.6 colorpair
75 83 0.32 0.6 colorpair
76 82 0.16 1 colorpair
77 81 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 cmark
12 57 1 gmark
12 cmark
57 cmark
13 56 1 gmark
14 55 1 gmark
14 cmark
22 48 2 gmark
48 cmark
47 cmark
24 cmark
46 cmark
25 45 2 gmark
26 cmark
44 cmark
74 84 1 gmark
74 cmark
84 cmark
75 83 1 gmark
75 cmark
83 cmark
76 cmark
82 cmark
77 81 1 gmark
77 cmark

% End Annotations
showpage
end
%%EOF
