%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:51:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__AUGAGGCUAGUAGAUAC__UGGUGAUACUUAUCCUCAAAAUCAGUCUGGCGGUACUGA_________CAAUUGCUCGAGGCU_GUUCUGAAAUUUGU___U_A_____G___A_________G_C______________________________\
) } def
/len { sequence length } bind def

/coor [
[261.47579956 205.85240173]
[251.66258240 194.50233459]
[242.51332092 182.61054993]
[234.05787659 170.21585083]
[226.32382202 157.35864258]
[219.33638000 144.08087158]
[213.11834717 130.42585754]
[207.69001770 116.43812561]
[203.06907654 102.16330719]
[199.27061462 87.64796448]
[184.56614685 90.61087799]
[169.86167908 93.57379150]
[155.15722656 96.53669739]
[140.45275879 99.49961090]
[138.19096375 113.34643555]
[131.33575439 125.58802795]
[120.71165466 134.75202942]
[107.59647369 139.73625183]
[93.56763458 139.94122314]
[80.31243896 135.34228516]
[69.42515564 126.49256134]
[62.21525192 114.45646667]
[47.45478821 117.12643433]
[32.69432449 119.79640198]
[17.93386078 122.46636963]
[3.17339826 125.13633728]
[-11.58706474 127.80630493]
[-14.43436337 142.71459961]
[-22.47820663 155.58554077]
[-34.63072968 164.67843628]
[-49.24840164 168.76353455]
[-64.35430908 167.28837585]
[-77.90549469 160.45245361]
[-88.06927490 149.18026733]
[-93.47107697 134.99630737]
[-93.38036346 119.81881714]
[-87.80939484 105.70043182]
[-77.51159668 94.55055237]
[-63.87966537 87.87710571]
[-48.75720596 86.58261871]
[-34.18940735 90.84216309]
[-22.14644623 100.07967377]
[-14.25703335 113.04584503]
[0.50342977 110.37587738]
[15.26389313 107.70590210]
[30.02435493 105.03593445]
[44.78482056 102.36596680]
[59.54528046 99.69599915]
[62.74078751 84.23841095]
[71.60820007 71.18017578]
[84.79763794 62.50913620]
[100.30131531 59.54526138]
[115.75911713 62.73974228]
[128.81793213 71.60628510]
[137.48985291 84.79515076]
[152.19432068 81.83223724]
[166.89877319 78.86933136]
[181.60324097 75.90641785]
[196.30769348 72.94350433]
[194.18838501 58.08982468]
[192.92050171 43.13937378]
[192.50820923 28.14092636]
[192.95281982 13.14340115]
[194.25289917 -1.80428100]
[196.40420532 -16.65336418]
[199.39973450 -31.35541534]
[203.22969055 -45.86247635]
[207.88159180 -60.12723160]
[213.34027100 -74.10314941]
[219.58792114 -87.74464417]
[226.60415649 -101.00721741]
[234.36610413 -113.84761047]
[242.84843445 -126.22393799]
[252.02346802 -138.09584045]
[261.86129761 -149.42457581]
[272.32983398 -160.17321777]
[283.39492798 -170.30668640]
[295.02047729 -179.79193115]
[307.16857910 -188.59802246]
[319.79959106 -196.69622803]
[332.87234497 -204.06013489]
[346.34414673 -210.66571045]
[360.17108154 -216.49143982]
[374.30807495 -221.51829529]
[388.70895386 -225.72988892]
[403.32681274 -229.11247253]
[418.11392212 -231.65502930]
[433.02209473 -233.34925842]
[448.00265503 -234.18963623]
[463.00674438 -234.17340088]
[477.98547363 -233.30064392]
[492.88992310 -231.57418823]
[507.67150879 -228.99966431]
[522.28198242 -225.58546448]
[536.67376709 -221.34275818]
[550.79986572 -216.28533936]
[564.61413574 -210.42973328]
[578.07165527 -203.79504395]
[591.12841797 -196.40287781]
[603.74188232 -188.27738953]
[615.87091064 -179.44505310]
[627.47595215 -169.93469238]
[638.51910400 -159.77731323]
[648.96435547 -149.00607300]
[658.77770996 -137.65608215]
[667.92706299 -125.76437378]
[676.38256836 -113.36972809]
[684.11676025 -100.51258087]
[691.10430908 -87.23486328]
[697.32244873 -73.57989502]
[702.75085449 -59.59220886]
[707.37188721 -45.31742859]
[711.17047119 -30.80212021]
[714.13421631 -16.09362793]
[716.25341797 -1.23992693]
[717.52117920 13.71053219]
[717.93334961 28.70898247]
[717.48864746 43.70650482]
[716.18841553 58.65417480]
[714.03698730 73.50324249]
[711.04138184 88.20526886]
[707.21130371 102.71230316]
[702.55926514 116.97702026]
[697.10046387 130.95289612]
[690.85272217 144.59434509]
[683.83642578 157.85685730]
[676.07434082 170.69718933]
[667.59191895 183.07345581]
[658.41680908 194.94528198]
[648.57885742 206.27395630]
[638.11022949 217.02250671]
[627.04510498 227.15588379]
[615.41943359 236.64103699]
[603.27130127 245.44703674]
[590.64019775 253.54513550]
[577.56744385 260.90893555]
[564.09558105 267.51443481]
[550.26855469 273.34002686]
[536.13153076 278.36679077]
[521.73059082 282.57824707]
[507.11273193 285.96072388]
[492.32559204 288.50317383]
[477.41744995 290.19726562]
[462.43685913 291.03753662]
[447.43276978 291.02120972]
[432.45407104 290.14831543]
[417.54962158 288.42175293]
[402.76806641 285.84710693]
[388.15759277 282.43280029]
[373.76586914 278.18997192]
[359.63983154 273.13244629]
[345.82556152 267.27673340]
[332.36810303 260.64193726]
[319.31137085 253.24966431]
[306.69796753 245.12406921]
[294.56900024 236.29164124]
[282.96408081 226.78118896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
] def

init

% Start Annotations
10 59 0.16 1 colorpair
11 58 0.0 1 colorpair
12 57 0.32 0.6 colorpair
13 56 0.0 0.6 colorpair
14 55 0.16 0.6 colorpair
22 48 0.16 0.2 colorpair
23 47 0.16 1 colorpair
24 46 0.32 1 colorpair
25 45 0.0 0.2 colorpair
26 44 0.32 1 colorpair
27 43 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 cmark
12 57 1 gmark
12 cmark
57 cmark
13 56 1 gmark
14 55 1 gmark
14 cmark
22 48 2 gmark
48 cmark
47 cmark
24 cmark
46 cmark
25 45 2 gmark
26 cmark
44 cmark
27 43 2 gmark
27 cmark

% End Annotations
showpage
end
%%EOF
