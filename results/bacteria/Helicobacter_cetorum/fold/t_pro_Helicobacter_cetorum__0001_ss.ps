%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUGGAAACAAAACAUGGCAAAAACUCUUGGAAAGCAUUAUACCUUGAAAUUUCUUUUUUGGGGUUUAAAGUUAUUGUUUCUUUAGAAAGA\
) } def
/len { sequence length } bind def

/coor [
[86.53525543 117.07447815]
[76.47348022 128.19926453]
[66.41171265 139.32403564]
[56.34994125 150.44882202]
[46.28816986 161.57360840]
[36.22639847 172.69837952]
[40.35617828 187.56271362]
[35.77228165 202.29335022]
[23.93740845 212.18977356]
[8.62802887 214.09410095]
[-5.27069187 207.39865112]
[-13.32372189 194.23991394]
[-12.96136951 178.81680298]
[-4.29925919 166.05078125]
[9.89856052 160.01542664]
[25.10161781 162.63661194]
[35.16338730 151.51182556]
[45.22515869 140.38705444]
[55.28693008 129.26226807]
[65.34870148 118.13748932]
[75.41046906 107.01270294]
[61.86792755 113.46247101]
[47.16335297 116.42482758]
[32.17983627 115.72187042]
[17.81719780 111.39582825]
[4.93798828 103.70648956]
[-5.68433857 93.11563110]
[-13.41186142 80.25930023]
[-17.78050804 65.90956116]
[-18.52791786 50.92819595]
[-15.60920715 36.21489716]
[-9.19965839 22.65327072]
[0.31580549 11.05775738]
[12.36573601 2.12471914]
[26.22647858 -3.60937190]
[41.06563187 -5.80015707]
[55.99203491 -4.31606913]
[70.10928345 0.75376475]
[82.56958008 9.10487747]
[92.62461853 20.23574638]
[99.67053986 33.47790909]
[103.28421783 48.03611374]
[103.24863434 63.03607178]
[99.56654358 77.57534790]
[107.63777924 64.93196106]
[115.70901489 52.28857803]
[123.78025055 39.64519119]
[131.85148621 27.00180817]
[139.92271423 14.35842419]
[147.99395752 1.71504033]
[156.06518555 -10.92834377]
[164.13642883 -23.57172775]
[160.48576355 -38.94860077]
[168.84844971 -52.35907745]
[184.26306152 -55.84696198]
[197.58438110 -47.34295273]
[200.90908813 -31.89233017]
[192.26472473 -18.66167068]
[176.77980042 -15.50049210]
[168.70857239 -2.85710859]
[160.63734436 9.78627586]
[152.56610107 22.42965889]
[144.49487305 35.07304382]
[136.42362976 47.71642685]
[128.35240173 60.35981369]
[120.28115845 73.00319672]
[112.20992279 85.64658356]
[115.93056488 100.17781830]
[129.08480835 107.38654327]
[142.23905945 114.59526825]
[155.39331055 121.80399323]
[168.54756165 129.01272583]
[181.70181274 136.22145081]
[195.20385742 128.75831604]
[210.59584045 129.80249023]
[222.96623230 139.02076721]
[228.36770630 153.47164917]
[225.07664490 168.54388428]
[214.14323425 179.42799377]
[199.05627441 182.65090942]
[184.62995911 177.18418884]
[175.46768188 164.77224731]
[174.49307251 149.37570190]
[161.33883667 142.16697693]
[148.18458557 134.95825195]
[135.03033447 127.74951935]
[121.87608337 120.54079437]
[108.72183228 113.33206940]
[119.49552155 123.76891327]
[120.48936462 138.73594666]
[111.19023895 150.50567627]
[96.39930725 153.00134277]
[83.75315857 144.93443298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
] def

init

% Start Annotations
1 21 0.0 0.2 colorpair
2 20 0.32 0.6 colorpair
3 19 0.16 0.6 colorpair
4 18 0.0 1 colorpair
5 17 0.0 1 colorpair
6 16 0.0 0.6 colorpair
44 67 0.16 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 0.2 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 0.2 colorpair
50 61 0.0 0.2 colorpair
51 60 0.0 1 colorpair
52 59 0.0 0.2 colorpair
68 88 0.0 1 colorpair
69 87 0.0 1 colorpair
70 86 0.0 1 colorpair
71 85 0.0 0.2 colorpair
72 84 0.16 1 colorpair
73 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 21 2 gmark
2 20 1 gmark
2 cmark
20 cmark
3 19 1 gmark
3 cmark
6 16 1 gmark
44 cmark
67 cmark
46 65 2 gmark
63 cmark
49 62 2 gmark
50 61 2 gmark
52 59 2 gmark
71 85 2 gmark
72 cmark
84 cmark

% End Annotations
showpage
end
%%EOF
