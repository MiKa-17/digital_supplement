%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_UCAUGGAAACAAAACAUGGCAAAAACUCUUGGAAAACAUUAUACCUUGAAAUUUCUUUUUUGGGGUUUAAAGUUAUUGUUUCUUUAGAAAG_\
) } def
/len { sequence length } bind def

/coor [
[-24.35284805 266.28591919]
[-39.09967422 260.74517822]
[-49.16144562 271.86993408]
[-59.22321701 282.99472046]
[-69.28498840 294.11950684]
[-79.34675598 305.24429321]
[-75.21697998 320.10864258]
[-79.80088043 334.83926392]
[-91.63574982 344.73568726]
[-106.94512939 346.64001465]
[-120.84384918 339.94454956]
[-128.89688110 326.78582764]
[-128.53453064 311.36270142]
[-119.87241364 298.59667969]
[-105.67459869 292.56134033]
[-90.47154236 295.18252563]
[-80.40976715 284.05773926]
[-70.34799957 272.93295288]
[-60.28622818 261.80816650]
[-50.22445679 250.68339539]
[-56.74993134 238.14340210]
[-58.57405472 224.09506226]
[-55.45430756 210.24577332]
[-47.75030899 198.28590393]
[-36.38249588 189.68251038]
[-22.72218323 185.49931335]
[-8.42616844 186.26525879]
[4.76422548 191.90773010]
[15.19211197 181.12538147]
[25.61999893 170.34301758]
[28.84480858 153.18150330]
[46.43052673 148.04806519]
[56.49229813 136.92329407]
[66.55406952 125.79850769]
[76.61584473 114.67372894]
[86.67761230 103.54894257]
[95.77585602 91.62326050]
[103.84709167 78.97987366]
[104.75100708 63.18450928]
[118.12104034 56.62009430]
[126.19227600 43.97671127]
[134.26350403 31.33332825]
[135.16743469 15.53796482]
[148.53746033 8.97354984]
[156.60868835 -3.66983414]
[164.67993164 -16.31321907]
[172.75115967 -28.95660210]
[180.82240295 -41.59998703]
[188.89363098 -54.24337006]
[196.96487427 -66.88675690]
[205.03610229 -79.53013611]
[213.10734558 -92.17352295]
[209.45668030 -107.55039215]
[217.81936646 -120.96087646]
[233.23397827 -124.44876099]
[246.55529785 -115.94474792]
[249.88002014 -100.49412537]
[241.23564148 -87.26346588]
[225.75073242 -84.10228729]
[217.67948914 -71.45890045]
[209.60826111 -58.81551743]
[201.53701782 -46.17213440]
[193.46578979 -33.52875137]
[185.39454651 -20.88536644]
[177.32331848 -8.24198246]
[169.25207520 4.40140104]
[161.18084717 17.04478455]
[160.85423279 31.93581009]
[146.90689087 39.40456390]
[138.83566284 52.04794693]
[130.76441956 64.69132996]
[130.43782043 79.58235168]
[116.49047089 87.05110931]
[108.41923523 99.69449615]
[109.00945282 102.37986755]
[108.69127655 105.36194611]
[107.35217285 108.32382965]
[104.99102783 110.91236115]
[101.72821808 112.77693939]
[97.80239105 113.61071777]
[87.74062347 124.73549652]
[77.67884827 135.86027527]
[67.61708069 146.98506165]
[57.55530930 158.10984802]
[57.39198303 171.13899231]
[48.61272049 180.21400452]
[36.40235519 180.77090454]
[25.97446632 191.55326843]
[15.54658031 202.33561707]
[22.02338982 216.94744873]
[22.43781281 232.88673401]
[16.75638771 247.74391174]
[5.86498117 259.28408813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[28 89]
[29 88]
[30 87]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 74]
[38 73]
[40 71]
[41 70]
[42 69]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% Start Annotations
2 20 0.32 0.6 colorpair
3 19 0.16 0.6 colorpair
4 18 0.0 1 colorpair
5 17 0.0 1 colorpair
6 16 0.0 0.2 colorpair
28 89 0.0 1 colorpair
29 88 0.0 1 colorpair
30 87 0.0 0.2 colorpair
32 84 0.16 0.2 colorpair
33 83 0.0 1 colorpair
34 82 0.0 0.2 colorpair
35 81 0.0 0.2 colorpair
36 80 0.16 1 colorpair
37 74 0.16 1 colorpair
38 73 0.16 1 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.0 1 colorpair
44 67 0.16 1 colorpair
45 66 0.0 1 colorpair
46 65 0.0 0.2 colorpair
47 64 0.0 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 0.2 colorpair
50 61 0.0 0.2 colorpair
51 60 0.0 1 colorpair
52 59 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 20 1 gmark
2 cmark
20 cmark
3 19 1 gmark
3 cmark
6 16 2 gmark
30 87 2 gmark
32 84 2 gmark
32 cmark
34 82 2 gmark
35 81 2 gmark
36 cmark
37 cmark
38 cmark
44 cmark
67 cmark
46 65 2 gmark
63 cmark
49 62 2 gmark
50 61 2 gmark
52 59 2 gmark

% End Annotations
showpage
end
%%EOF
