%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:59:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAU_AGUAACUACUCCUUUUAG___UUGCUUGUGGUGAGCGGCGUUGACG_GGUUGCAACC_CGUUAGCGCCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[81.86370087 116.29724884]
[76.65815735 107.04869843]
[61.66098022 106.75782776]
[46.66380310 106.46695709]
[31.66662216 106.17608643]
[16.66944313 105.88521576]
[7.76584721 108.90804291]
[1.09942102 105.28102875]
[-14.99954605 113.96530914]
[-29.35172272 104.06391144]
[-44.34890366 103.77304077]
[-59.34608459 103.48217010]
[-74.33480072 104.06380463]
[-89.26434326 105.51596832]
[-96.21775055 119.28744507]
[-109.52433014 127.09375763]
[-124.93799591 126.44393921]
[-137.54031372 117.54533386]
[-143.30992126 103.23746490]
[-140.40576172 88.08591461]
[-129.75454712 76.92549133]
[-114.75502777 73.31744385]
[-100.19350433 78.41309357]
[-90.71650696 90.58642578]
[-75.78696442 89.13426208]
[-73.18591309 86.39497375]
[-69.01909637 84.91944122]
[-63.96760559 85.48165894]
[-59.05521393 88.48499298]
[-44.05803299 88.77586365]
[-29.06085396 89.06673431]
[-19.97692680 80.83396912]
[-7.31613207 81.11309814]
[1.97159338 90.30640411]
[16.96031189 90.88803864]
[31.95749283 91.17890930]
[46.95466995 91.46977997]
[61.95185089 91.76064301]
[76.94902802 92.05151367]
[89.64148712 77.92678070]
[108.61685181 77.19045258]
[122.36570740 90.28914642]
[137.29524231 88.83698273]
[152.22479248 87.38481903]
[167.15432739 85.93265533]
[180.14062500 76.89569092]
[193.55717468 83.36450958]
[206.54347229 74.32754517]
[219.96000671 80.79636383]
[234.88955688 79.34420013]
[249.81909180 77.89203644]
[264.74862671 76.43987274]
[279.67819214 74.98770905]
[284.88980103 60.64191818]
[295.81570435 49.98418045]
[310.28656006 45.13060760]
[325.42913818 47.04487610]
[338.23693848 55.34690475]
[346.16687012 68.38832855]
[347.64450073 83.57975006]
[342.37643433 97.90490723]
[331.40866089 108.51953125]
[316.91879272 113.31608582]
[301.78384399 111.34220123]
[289.00888062 102.98979950]
[281.13034058 89.91725159]
[266.20080566 91.36941528]
[251.27125549 92.82157898]
[236.34172058 94.27374268]
[221.41217041 95.72590637]
[209.49374390 104.65899658]
[195.00933838 98.29405212]
[183.09089661 107.22714233]
[168.60649109 100.86219788]
[153.67695618 102.31436157]
[138.74740601 103.76652527]
[123.81787109 105.21868134]
[119.34467316 114.84281158]
[111.20661926 121.65496063]
[100.94545746 124.36455536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[8 34]
[10 31]
[11 30]
[12 29]
[13 25]
[14 24]
[42 77]
[43 76]
[44 75]
[45 74]
[47 72]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
] def

init

% Start Annotations
2 39 0.0 1 colorpair
3 38 0.32 1 colorpair
4 37 0.0 1 colorpair
5 36 0.0 1 colorpair
6 35 0.16 1 colorpair
8 34 0.0 1 colorpair
10 31 0.16 1 colorpair
11 30 0.0 0.2 colorpair
12 29 0.0 0.2 colorpair
13 25 0.0 0.2 colorpair
14 24 0.0 1 colorpair
42 77 0.16 1 colorpair
43 76 0.0 1 colorpair
44 75 0.16 1 colorpair
45 74 0.32 1 colorpair
47 72 0.16 1 colorpair
49 70 0.32 0.2 colorpair
50 69 0.48 0.2 colorpair
51 68 0.32 1 colorpair
52 67 0.48 1 colorpair
53 66 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
38 cmark
35 cmark
10 cmark
11 30 2 gmark
12 29 2 gmark
13 25 2 gmark
77 cmark
44 cmark
75 cmark
45 cmark
74 cmark
72 cmark
49 70 2 gmark
49 cmark
70 cmark
50 69 2 gmark
50 cmark
69 cmark
51 cmark
68 cmark
52 cmark
67 cmark

% End Annotations
showpage
end
%%EOF
