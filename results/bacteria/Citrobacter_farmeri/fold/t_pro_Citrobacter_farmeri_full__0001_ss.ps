%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:12:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUGCUGACCCAAUAUAUCGUUAUG___GUCUUAACACUCUGCUUAACAGUGCUGGCAUUCACCUGUCUCAUGCGGGACACGCUCUGUGAGUUGCGCAUGAAGGAGGGAG__A__GAG_U____GC__U_CU_GC_UACGAA_________\
) } def
/len { sequence length } bind def

/coor [
[37.45714569 428.32147217]
[22.79004478 425.18490601]
[8.27843189 421.39346313]
[-6.04846478 416.95477295]
[-20.16179466 411.87777710]
[-34.03313446 406.17269897]
[-47.63455200 399.85104370]
[-60.93865204 392.92550659]
[-73.91864014 385.41006470]
[-86.54838562 377.31985474]
[-98.80244446 368.67117310]
[-110.65614319 359.48138428]
[-122.08560944 349.76907349]
[-133.06782532 339.55374146]
[-143.58067322 328.85598755]
[-153.60298157 317.69735718]
[-163.11456299 306.10028076]
[-172.09628296 294.08816528]
[-180.53002930 281.68521118]
[-188.39881897 268.91632080]
[-195.68681335 255.80728149]
[-202.37934875 242.38446045]
[-208.46292114 228.67491150]
[-213.92529297 214.70620728]
[-218.75546265 200.50651550]
[-222.94371033 186.10440063]
[-226.48158264 171.52890015]
[-229.36196899 156.80934143]
[-231.57905579 141.97538757]
[-233.12840271 127.05688477]
[-234.00686646 112.08390045]
[-234.21267700 97.08657837]
[-233.74543762 82.09513092]
[-232.60607910 67.13973236]
[-230.79690552 52.25051498]
[-228.32154846 37.45745850]
[-225.18498230 22.79035187]
[-221.39355469 8.27873707]
[-216.95487976 -6.04816437]
[-211.87788391 -20.16149902]
[-225.75039673 -25.86706924]
[-239.62290955 -31.57263947]
[-253.49540710 -37.27820969]
[-267.36791992 -42.98377991]
[-279.95910645 -34.06941605]
[-295.37194824 -33.40030289]
[-308.68826294 -41.18995667]
[-315.65890503 -54.95272827]
[-314.05953979 -70.29695892]
[-304.40051270 -82.32637024]
[-289.76397705 -87.20241547]
[-274.82043457 -83.36917114]
[-264.33828735 -72.04980469]
[-261.66235352 -56.85628891]
[-247.78984070 -51.15071869]
[-233.91734314 -45.44514847]
[-220.04483032 -39.73957825]
[-206.17231750 -34.03400803]
[-199.85061646 -47.63540268]
[-192.92504883 -60.93948364]
[-185.40957642 -73.91945648]
[-177.31933594 -86.54917145]
[-168.67059326 -98.80320740]
[-159.48078918 -110.65688324]
[-149.76843262 -122.08631897]
[-139.55308533 -133.06849670]
[-128.85528564 -143.58132935]
[-117.69662476 -153.60359192]
[-106.09954071 -163.11515808]
[-94.08740234 -172.09683228]
[-81.68440247 -180.53053284]
[-68.91550446 -188.39930725]
[-55.80644226 -195.68725586]
[-42.38360596 -202.37974548]
[-28.67402840 -208.46328735]
[-14.70531654 -213.92561340]
[-0.50560504 -218.75575256]
[13.89651108 -222.94395447]
[28.47202873 -226.48178101]
[43.19159317 -229.36212158]
[58.02556229 -231.57917786]
[72.94406128 -233.12847900]
[87.91705322 -234.00689697]
[102.91436768 -234.21267700]
[117.90582275 -233.74539185]
[132.86120605 -232.60598755]
[147.75042725 -230.79676819]
[162.54347229 -228.32136536]
[177.21057129 -225.18476868]
[191.72218323 -221.39329529]
[206.04907227 -216.95457458]
[220.16238403 -211.87754822]
[234.03372192 -206.17245483]
[247.63511658 -199.85075378]
[260.93920898 -192.92520142]
[273.91918945 -185.40974426]
[286.54891968 -177.31950378]
[298.80294800 -168.67079163]
[310.65664673 -159.48100281]
[322.08609009 -149.76864624]
[333.06826782 -139.55329895]
[343.58111572 -128.85552979]
[353.60339355 -117.69686127]
[363.11495972 -106.09979248]
[372.09664917 -94.08766174]
[380.53036499 -81.68466187]
[388.39913940 -68.91577911]
[395.68710327 -55.80672455]
[402.37960815 -42.38389206]
[408.46316528 -28.67432022]
[413.92550659 -14.70561409]
[418.75564575 -0.50590742]
[422.94387817 13.89620495]
[426.48171997 28.47171783]
[429.36206055 43.19128036]
[431.57913208 58.02524948]
[433.12844849 72.94374847]
[434.00689697 87.91673279]
[434.21267700 102.91405487]
[433.74542236 117.90550232]
[432.60601807 132.86090088]
[430.79681396 147.75010681]
[428.32141113 162.54316711]
[425.18484497 177.21026611]
[421.39337158 191.72187805]
[416.95468140 206.04876709]
[411.87765503 220.16209412]
[406.17257690 234.03343201]
[399.85089111 247.63484192]
[392.92535400 260.93893433]
[385.40991211 273.91891479]
[377.31967163 286.54864502]
[368.67095947 298.80270386]
[359.48120117 310.65640259]
[349.76885986 322.08584595]
[339.55352783 333.06805420]
[328.85574341 343.58090210]
[317.69711304 353.60317993]
[306.10003662 363.11477661]
[294.08792114 372.09646606]
[281.68493652 380.53018188]
[268.91604614 388.39898682]
[255.80700684 395.68698120]
[242.38418579 402.37948608]
[228.67460632 408.46304321]
[214.70591736 413.92541504]
[200.50621033 418.75555420]
[186.10409546 422.94378662]
[171.52859497 426.48165894]
[156.80903625 429.36203003]
[141.97506714 431.57910156]
[127.05657196 433.12841797]
[112.08358765 434.00686646]
[97.08626556 434.21267700]
[82.09481049 433.74542236]
[67.13941956 432.60604858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
] def

init

% Start Annotations
40 58 0.16 0.2 colorpair
41 57 0.32 1 colorpair
42 56 0.16 0.6 colorpair
43 55 0.16 0.6 colorpair
44 54 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
40 58 2 gmark
40 cmark
58 cmark
41 cmark
57 cmark
42 56 1 gmark
42 cmark
56 cmark
43 55 1 gmark
43 cmark
55 cmark
44 54 2 gmark
54 cmark

% End Annotations
showpage
end
%%EOF
