%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:12:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCUCACGCAGAUAGCCAUUCCCAUCCGGAA__ACUCAGC_GCUCCAGCCAU_____GCAAC_UGCCGGAUACGGCUCUGAAAUACCU________________\
) } def
/len { sequence length } bind def

/coor [
[42.50592804 158.89006042]
[31.09282303 168.62356567]
[19.67971611 178.35705566]
[8.26661015 188.09056091]
[-3.14649558 197.82406616]
[-14.55960178 207.55755615]
[-20.03905678 222.39959717]
[-34.74363708 224.77122498]
[-46.15674210 234.50471497]
[-57.56984711 244.23822021]
[-68.98295593 253.97171021]
[-80.39605713 263.70523071]
[-83.09455109 279.51968384]
[-97.21033478 287.14361572]
[-111.91498566 280.72857666]
[-115.92835236 265.19561768]
[-106.17173004 252.46032715]
[-90.12956238 252.29211426]
[-78.71645355 242.55860901]
[-67.30334473 232.82511902]
[-55.89024353 223.09161377]
[-44.47713470 213.35810852]
[-39.81402206 199.21228027]
[-24.29310036 196.14445496]
[-12.87999535 186.41094971]
[-1.46688914 176.67745972]
[9.94621658 166.94395447]
[21.35932350 157.21044922]
[32.77243042 147.47695923]
[21.92419052 126.03412628]
[17.73225212 102.37177277]
[20.55399323 78.50721741]
[30.14884758 56.47501373]
[18.19393349 47.41521454]
[3.38216662 52.04027557]
[-11.30854225 47.04400635]
[-20.22931480 34.34757233]
[-19.94993401 18.83301353]
[-10.57782745 6.46599102]
[4.28324080 2.00187993]
[18.91888428 7.15722132]
[27.70140076 19.94968033]
[27.25373459 35.46029663]
[39.20864868 44.52009964]
[53.71479416 31.94643593]
[70.73913574 23.07530022]
[89.35544586 18.38933182]
[108.55088043 18.14347839]
[127.28109741 22.35111237]
[144.52705383 30.78331757]
[153.75819397 18.96019936]
[162.98933411 7.13708115]
[172.22045898 -4.68603706]
[181.45159912 -16.50915527]
[166.47229004 -15.72163963]
[154.34739685 -24.55267525]
[150.50158691 -39.05128479]
[156.65542603 -52.73083496]
[170.05574036 -59.47114182]
[184.70724487 -56.25661469]
[194.05493164 -44.52542114]
[193.91607666 -29.52450752]
[205.32919312 -39.25800705]
[216.74229431 -48.99150848]
[228.15539551 -58.72500610]
[239.56851196 -68.45850372]
[240.56983948 -84.23104095]
[252.48580933 -94.61300659]
[268.24688721 -93.44496918]
[278.50228882 -81.41989899]
[277.16766357 -65.67206573]
[265.03485107 -55.54436874]
[249.30200195 -57.04539871]
[237.88890076 -47.31190109]
[226.47579956 -37.57839966]
[215.06268311 -27.84490204]
[203.64958191 -18.11140251]
[193.27471924 -7.27801895]
[184.04357910 4.54509926]
[174.81243896 16.36821747]
[165.58131409 28.19133568]
[156.35017395 40.01445389]
[162.74871826 46.74396133]
[168.34848022 54.15142059]
[173.07817078 62.14252853]
[176.87757874 70.61555481]
[179.69833374 79.46265411]
[181.50454712 88.57118225]
[182.27319336 97.82521057]
[181.99450684 107.10691071]
[180.67204285 116.29814911]
[178.32261658 125.28191376]
[174.97615051 133.94383240]
[170.67524719 142.17366028]
[165.47463989 149.86660767]
[159.44055176 156.92475891]
[152.64979553 163.25825500]
[145.18879700 168.78648376]
[137.15254211 173.43905640]
[128.64335632 177.15676880]
[119.76952362 179.89225769]
[110.64403534 181.61073303]
[101.38304138 182.29031372]
[92.10444641 181.92233276]
[82.92636108 180.51147461]
[73.96562195 178.07572937]
[65.33630371 174.64607239]
[57.14824677 170.26617432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[33 44]
[34 43]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% Start Annotations
1 29 0.0 1 colorpair
2 28 0.0 0.6 colorpair
3 27 0.16 1 colorpair
4 26 0.0 0.6 colorpair
5 25 0.16 1 colorpair
6 24 0.0 0.6 colorpair
8 22 0.0 1 colorpair
9 21 0.0 0.6 colorpair
10 20 0.0 0.6 colorpair
11 19 0.16 1 colorpair
12 18 0.16 1 colorpair
33 44 0.0 1 colorpair
34 43 0.16 1 colorpair
50 82 0.0 0.6 colorpair
51 81 0.0 1 colorpair
52 80 0.16 1 colorpair
53 79 0.0 1 colorpair
54 78 0.0 0.6 colorpair
62 77 0.16 1 colorpair
63 76 0.16 1 colorpair
64 75 0.0 1 colorpair
65 74 0.0 0.6 colorpair
66 73 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 28 1 gmark
27 cmark
4 26 1 gmark
5 cmark
25 cmark
6 24 1 gmark
9 21 1 gmark
10 20 1 gmark
11 cmark
12 cmark
18 cmark
34 cmark
43 cmark
50 82 1 gmark
80 cmark
54 78 1 gmark
77 cmark
63 cmark
76 cmark
65 74 1 gmark

% End Annotations
showpage
end
%%EOF
