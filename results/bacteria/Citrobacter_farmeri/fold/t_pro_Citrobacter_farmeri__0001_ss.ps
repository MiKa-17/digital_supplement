%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:12:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________________________________________________AUGACGCUGAUGGAAUUCACCAUUCUCAUCCGG__CACGCUUUG_GAGCUCCG_AUCAUUGACGGUAUAAUUGAGGUUAAGGCUGU_UCUGGCCUACGAAUC___GAAG\
) } def
/len { sequence length } bind def

/coor [
[311.75424194 768.50976562]
[297.10018921 765.29284668]
[282.62017822 761.36621094]
[268.34848022 756.73925781]
[254.31901550 751.42291260]
[240.56500244 745.42980957]
[227.11911011 738.77423096]
[214.01319885 731.47180176]
[201.27838135 723.53997803]
[188.94483948 714.99755859]
[177.04182434 705.86474609]
[165.59759521 696.16326904]
[154.63928223 685.91607666]
[144.19287109 675.14746094]
[134.28314209 663.88305664]
[124.93361664 652.14953613]
[116.16645050 639.97467041]
[108.00244904 627.38745117]
[100.46096802 614.41766357]
[93.55990601 601.09606934]
[87.31562042 587.45428467]
[81.74292755 573.52465820]
[76.85504913 559.34020996]
[72.66357422 544.93457031]
[69.17844391 530.34204102]
[66.40792847 515.59704590]
[64.35859680 500.73468018]
[63.03530884 485.79016113]
[62.44120407 470.79895020]
[62.57769012 455.79656982]
[63.44444656 440.81866455]
[65.03941345 425.90069580]
[67.35881042 411.07806396]
[70.39713287 396.38595581]
[74.14718628 381.85919189]
[78.60005951 367.53225708]
[83.74520111 353.43908691]
[89.57039642 339.61312866]
[96.06184387 326.08721924]
[103.20413971 312.89337158]
[110.98033905 300.06292725]
[119.37200165 287.62631226]
[128.35922241 275.61300659]
[137.92068481 264.05151367]
[148.03370667 252.96925354]
[158.67431641 242.39253235]
[169.81724548 232.34640503]
[181.43609619 222.85472107]
[172.52308655 210.78997803]
[163.61006165 198.72521973]
[154.69705200 186.66047668]
[145.78404236 174.59573364]
[136.87101746 162.53097534]
[127.95800018 150.46623230]
[119.04499054 138.40147400]
[110.13197327 126.33673096]
[101.21895599 114.27198792]
[88.47901154 108.51129913]
[86.71629333 94.64102936]
[77.80327606 82.57628632]
[68.89026642 70.51153564]
[54.61546326 61.36459732]
[59.45327377 45.11553955]
[76.40655518 45.26610184]
[80.95500946 61.59851837]
[89.86802673 73.66326904]
[98.78104401 85.72801208]
[111.52098846 91.48870087]
[113.28370667 105.35897064]
[122.19672394 117.42371368]
[131.10974121 129.48846436]
[140.02275085 141.55320740]
[148.93576050 153.61796570]
[157.84878540 165.68270874]
[166.76179504 177.74746704]
[175.67481995 189.81221008]
[184.58782959 201.87695312]
[193.50083923 213.94171143]
[205.98768616 205.62495422]
[218.86463928 197.92601013]
[232.10116577 190.86314392]
[245.66587830 184.45312500]
[259.52658081 178.71113586]
[273.65042114 173.65080261]
[288.00387573 169.28411865]
[302.55291748 165.62145996]
[317.26303101 162.67149353]
[332.09930420 160.44123840]
[347.02658081 158.93597412]
[362.00946045 158.15925598]
[377.01239014 158.11294556]
[391.99975586 158.79714966]
[406.93603516 160.21025085]
[421.78582764 162.34887695]
[436.51385498 165.20797729]
[451.08523560 168.78074646]
[465.46539307 173.05874634]
[479.62017822 178.03179932]
[493.51608276 183.68811035]
[507.12008667 190.01428223]
[520.39996338 196.99528503]
[533.32421875 204.61459351]
[545.86212158 212.85411072]
[557.98406982 221.69429016]
[569.66119385 231.11418152]
[580.86584473 241.09144592]
[591.57141113 251.60238647]
[601.75256348 262.62210083]
[611.38507080 274.12445068]
[620.44616699 286.08212280]
[628.91436768 298.46679688]
[636.76947021 311.24905396]
[643.99291992 324.39862061]
[650.56762695 337.88427734]
[656.47796631 351.67407227]
[661.70983887 365.73526001]
[666.25091553 380.03448486]
[670.09045410 394.53784180]
[673.21929932 409.21096802]
[675.63000488 424.01901245]
[677.31689453 438.92684937]
[678.27593994 453.89916992]
[678.50488281 468.90039062]
[678.00317383 483.89498901]
[676.77203369 498.84738159]
[674.81433105 513.72210693]
[672.13476562 528.48382568]
[668.73962402 543.09765625]
[664.63702393 557.52880859]
[659.83666992 571.74310303]
[654.34991455 585.70678711]
[648.18981934 599.38684082]
[641.37103271 612.75073242]
[633.90960693 625.76672363]
[625.82336426 638.40405273]
[617.13140869 650.63269043]
[607.85437012 662.42364502]
[598.01422119 673.74890137]
[587.63439941 684.58166504]
[576.73944092 694.89624023]
[565.35522461 704.66809082]
[553.50872803 713.87408447]
[541.22808838 722.49237061]
[528.54241943 730.50250244]
[515.48175049 737.88555908]
[502.07711792 744.62390137]
[488.36032104 750.70166016]
[474.36386108 756.10437012]
[460.12097168 760.81921387]
[445.66543579 764.83496094]
[431.03149414 768.14221191]
[416.25390625 770.73303223]
[401.36767578 772.60125732]
[386.40817261 773.74249268]
[371.41082764 774.15405273]
[356.41122437 773.83496094]
[341.44497681 772.78594971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[59 67]
[60 66]
[61 65]
] def

init

% Start Annotations
48 78 0.16 0.2 colorpair
49 77 0.0 0.6 colorpair
50 76 0.16 0.6 colorpair
51 75 0.32 0.6 colorpair
52 74 0.0 0.6 colorpair
53 73 0.16 0.2 colorpair
54 72 0.16 0.2 colorpair
55 71 0.16 0.2 colorpair
56 70 0.0 0.2 colorpair
57 69 0.0 0.2 colorpair
59 67 0.32 1 colorpair
60 66 0.16 1 colorpair
61 65 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
48 78 2 gmark
48 cmark
78 cmark
49 77 1 gmark
50 76 1 gmark
76 cmark
51 75 1 gmark
51 cmark
75 cmark
52 74 1 gmark
53 73 2 gmark
53 cmark
73 cmark
54 72 2 gmark
54 cmark
55 71 2 gmark
55 cmark
71 cmark
56 70 2 gmark
57 69 2 gmark
59 cmark
67 cmark
60 cmark
66 cmark
61 65 1 gmark
61 cmark

% End Annotations
showpage
end
%%EOF
