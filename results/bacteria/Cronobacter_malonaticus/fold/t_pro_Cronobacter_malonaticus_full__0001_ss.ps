%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 18:58:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________AAUGCCGCGAAAUACUCUUUUCGGGUGUGUAUUAAUGGUCUGUGUAACGAUAUUAAUUUUCACAUUACUGAACCGGGAUACGCUAUGCGAACUCAGCAUGAAGGACGGGAAUAAGGAGGUGGCGGCGUUGCUGGCUUGC_CAAUCCGGUA_____________\
) } def
/len { sequence length } bind def

/coor [
[135.75170898 477.89181519]
[121.47028351 478.97155762]
[107.15829468 479.51174927]
[92.83611298 479.51165771]
[78.52413177 478.97122192]
[64.24272156 477.89129639]
[50.01222229 476.27334595]
[35.85288620 474.11972046]
[21.78487778 471.43344116]
[7.82822275 468.21838379]
[-5.99720907 464.47909546]
[-19.67173386 460.22088623]
[-33.17588425 455.44985962]
[-46.49043655 450.17276001]
[-59.59642792 444.39715576]
[-72.47521210 438.13119507]
[-85.10843658 431.38388062]
[-97.47813416 424.16476440]
[-109.56668091 416.48416138]
[-121.35687256 408.35296631]
[-132.83192444 399.78277588]
[-143.97549438 390.78579712]
[-154.77171326 381.37481689]
[-165.20523071 371.56326294]
[-175.26116943 361.36508179]
[-184.92523193 350.79479980]
[-194.18363953 339.86746216]
[-203.02323914 328.59863281]
[-211.43141174 317.00433350]
[-219.39620972 305.10110474]
[-226.90629578 292.90588379]
[-233.95097351 280.43603516]
[-240.52020264 267.70928955]
[-246.60464478 254.74377441]
[-252.19561768 241.55795288]
[-257.28518677 228.17059326]
[-261.86608887 214.60076904]
[-265.93182373 200.86779785]
[-269.47656250 186.99121094]
[-272.49530029 172.99076843]
[-274.98373413 158.88642883]
[-276.93829346 144.69824219]
[-278.35623169 130.44642639]
[-279.23547363 116.15125275]
[-279.57482910 101.83309174]
[-279.37377930 87.51232147]
[-278.63262939 73.20932770]
[-277.35241699 58.94448090]
[-275.53500366 44.73807907]
[-273.18292236 30.61035538]
[-270.29953003 16.58141899]
[-266.88897705 2.67124367]
[-262.95608521 -11.10036564]
[-258.50646973 -24.71380234]
[-253.54643250 -38.14968872]
[-248.08305359 -51.38888931]
[-242.12413025 -64.41256714]
[-235.67813110 -77.20216370]
[-228.75422668 -89.73948669]
[-221.36227417 -102.00668335]
[-213.51281738 -113.98628235]
[-205.21701050 -125.66123199]
[-196.48666382 -137.01490784]
[-187.33422852 -148.03115845]
[-177.77270508 -158.69429016]
[-167.81573486 -168.98912048]
[-157.47747803 -178.90098572]
[-146.77264404 -188.41580200]
[-135.71649170 -197.51998901]
[-124.32475281 -206.20060730]
[-112.61364746 -214.44529724]
[-100.59984589 -222.24232483]
[-88.30045319 -229.58056641]
[-75.73298645 -236.44960022]
[-62.91532516 -242.83963013]
[-49.86572647 -248.74156189]
[-36.60276413 -254.14700317]
[-23.14532471 -259.04824829]
[-9.51256466 -263.43832397]
[4.27610683 -267.31097412]
[18.20105934 -270.66067505]
[32.24246597 -273.48269653]
[46.38033676 -275.77297974]
[60.59454727 -277.52832031]
[74.86486053 -278.74612427]
[89.17095184 -279.42474365]
[103.49246979 -279.56320190]
[117.80900574 -279.16125488]
[132.10018921 -278.21951294]
[146.34567261 -276.73928833]
[160.52517700 -274.72271729]
[174.61851501 -272.17266846]
[188.60562134 -269.09274292]
[202.46658325 -265.48736572]
[216.18165588 -261.36163330]
[229.73132324 -256.72146606]
[235.13549805 -270.71411133]
[240.53968811 -284.70678711]
[240.60589600 -301.66061401]
[256.91546631 -306.29028320]
[265.87915039 -291.89968872]
[254.53234863 -279.30261230]
[249.12817383 -265.30993652]
[243.72399902 -251.31727600]
[259.40747070 -244.48463440]
[274.76718140 -236.95228577]
[289.77191162 -228.73550415]
[304.39114380 -219.85101318]
[318.59524536 -210.31681824]
[332.35531616 -200.15231323]
[345.64343262 -189.37814331]
[358.43261719 -178.01618958]
[370.69683838 -166.08952332]
[382.41122437 -153.62237549]
[393.55200195 -140.64006042]
[404.09649658 -127.16896057]
[414.02328491 -113.23644257]
[423.31225586 -98.87078857]
[431.94451904 -84.10118866]
[439.90252686 -68.95764160]
[447.17010498 -53.47090912]
[453.73254395 -37.67244339]
[459.57644653 -21.59433937]
[464.69000244 -5.26924992]
[469.06277466 11.26966190]
[472.68591309 27.98880386]
[475.55206299 44.85421371]
[477.65539551 61.83163834]
[478.99160767 78.88658905]
[479.55801392 95.98442841]
[479.35345459 113.09042358]
[478.37838745 130.16983032]
[476.63470459 147.18794250]
[474.12603760 164.11021423]
[470.85742188 180.90226746]
[466.83554077 197.52999878]
[462.06851196 213.95962524]
[476.28475952 218.74484253]
[490.50100708 223.53005981]
[504.71725464 228.31527710]
[518.76055908 221.06535339]
[533.79150391 225.94851685]
[540.89257812 240.06767273]
[535.85076904 255.04617310]
[521.65734863 261.99755859]
[506.73297119 256.79766846]
[499.93203735 242.53152466]
[485.71578979 237.74630737]
[471.49954224 232.96109009]
[457.28329468 228.17587280]
[452.19354248 241.56314087]
[446.60235596 254.74888611]
[440.51773071 267.71429443]
[433.94830322 280.44094849]
[426.90344238 292.91070557]
[419.39318848 305.10583496]
[411.42822266 317.00894165]
[403.01986694 328.60308838]
[394.18011475 339.87179565]
[384.92153931 350.79898071]
[375.25732422 361.36914062]
[365.20123291 371.56716919]
[354.76757812 381.37857056]
[343.97119141 390.78936768]
[332.82748413 399.78619385]
[321.35232544 408.35623169]
[309.56201172 416.48724365]
[297.47335815 424.16769409]
[285.10354614 431.38659668]
[272.47021484 438.13375854]
[259.59133911 444.39950562]
[246.48527527 450.17492676]
[233.17063904 455.45181274]
[219.66642761 460.22265625]
[205.99183655 464.48065186]
[192.16635132 468.21972656]
[178.20964050 471.43460083]
[164.14160156 474.12066650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[96 104]
[97 103]
[98 102]
[137 150]
[138 149]
[139 148]
[140 147]
] def

init

% Start Annotations
96 104 0.0 1 colorpair
97 103 0.16 1 colorpair
98 102 0.16 1 colorpair
137 150 0.0 1 colorpair
139 148 0.32 1 colorpair
140 147 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
103 cmark
98 cmark
138 149 4 gmark
138 cmark
139 cmark
148 cmark

% End Annotations
showpage
end
%%EOF
