%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 18:58:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_GUAAGAGGCUAAUCUGAUGAUGUUCA_GCAUGCAGAGGGCCUCGUUGGUUAAUUGAA_AAAUUACCUUCGGGGCUU__UCUUCUUUCUGCCACACA_CAUUGCGACA_AC_CUGCCAACAGCAUGAGGCAAAAA__GCCUCAAGCGCC______\
) } def
/len { sequence length } bind def

/coor [
[199.51411438 264.02792358]
[189.10600281 249.53514099]
[181.04193115 233.61618042]
[175.51310730 216.64710999]
[172.65087891 199.02897644]
[172.52352905 181.17825317]
[175.13471985 163.51698303]
[180.42332458 146.46284485]
[166.87156677 140.03247070]
[153.31982422 133.60208130]
[148.30310059 140.48348999]
[142.40446472 146.62577820]
[135.73162842 151.91679382]
[128.40641785 156.25991821]
[120.56256866 159.57586670]
[112.34329224 161.80409241]
[103.89865875 162.90391541]
[95.38284302 162.85527039]
[86.95132446 161.65901184]
[78.75804901 159.33702087]
[70.95259857 155.93165588]
[63.67749023 151.50512695]
[57.06554413 146.13821411]
[51.23748398 139.92892456]
[46.29971695 132.99063110]
[42.34239578 125.45000458]
[39.43776703 117.44471741]
[37.63886642 109.12093353]
[36.97853851 100.63061523]
[37.46883774 92.12879181]
[39.10081100 83.77066803]
[41.84466553 75.70886230]
[45.65030289 68.09055328]
[50.44823837 61.05484009]
[39.84163666 50.44823837]
[29.23503685 39.84163666]
[18.62843513 29.23503685]
[-1.03420293 24.96609497]
[-5.35392189 6.15291929]
[-16.37900543 -4.01799583]
[-27.40409088 -14.18891048]
[-38.42917633 -24.35982513]
[-49.45426178 -34.53073883]
[-60.47934341 -44.70165634]
[-71.50443268 -54.87257004]
[-87.07450867 -54.41395187]
[-98.11062622 -64.88575745]
[-98.45189667 -79.73227692]
[-109.47698212 -89.90319824]
[-120.50206757 -100.07411194]
[-134.28555298 -93.66444397]
[-149.47293091 -93.02239990]
[-163.74821472 -98.24587250]
[-174.93453979 -108.53833008]
[-181.32606506 -122.33023834]
[-181.94813538 -137.51843262]
[-176.70588684 -151.78683472]
[-166.39872742 -162.95960999]
[-152.59841919 -169.33299255]
[-137.40940857 -169.93508911]
[-123.14791107 -164.67407227]
[-111.98870850 -154.35221863]
[-105.63349152 -140.54353333]
[-105.05138397 -125.35375214]
[-110.33115387 -111.09919739]
[-99.30606842 -100.92827606]
[-88.28098297 -90.75736237]
[-73.45514679 -91.61184692]
[-62.12925339 -81.45414734]
[-61.33351517 -65.89765167]
[-50.30842972 -55.72674179]
[-39.28334427 -45.55582428]
[-28.25826073 -35.38491058]
[-17.23317528 -25.21399498]
[-6.20809126 -15.04308033]
[4.81699324 -4.87216520]
[15.01926899 -6.19972038]
[24.45195961 -1.56781185]
[29.86195755 7.69721603]
[29.23503685 18.62843513]
[39.84163666 29.23503685]
[50.44823837 39.84163666]
[61.05484009 50.44823837]
[81.35664368 39.79595184]
[104.12554932 37.11055756]
[126.34851837 42.74742126]
[145.08474731 55.96060562]
[157.85484314 75.00159454]
[162.96890259 97.35066223]
[159.75019836 120.05031586]
[173.30195618 126.48070526]
[186.85371399 132.91110229]
[193.56779480 122.26234436]
[201.39457703 112.40365601]
[210.24197388 103.45076752]
[220.00582886 95.50875854]
[230.57130432 88.67083740]
[241.81410217 83.01718903]
[253.60202026 78.61409760]
[265.79644775 75.51313782]
[278.25402832 73.75055695]
[290.82833862 73.34689331]
[303.37158203 74.30669403]
[315.73635864 76.61849213]
[327.77737427 80.25493622]
[339.35321045 85.17309570]
[350.32785034 91.31501007]
[360.57241821 98.60832214]
[369.96667480 106.96717072]
[378.40026855 116.29316711]
[385.77426147 126.47657776]
[392.00213623 137.39762878]
[397.01086426 148.92785645]
[400.74179077 160.93170166]
[403.15118408 173.26800537]
[404.21093750 185.79176331]
[403.90881348 198.35577393]
[402.24853516 210.81237793]
[399.24981689 223.01521301]
[394.94805908 234.82090759]
[389.39398193 246.09077454]
[382.65307617 256.69244385]
[394.27215576 266.17913818]
[409.85525513 268.91363525]
[414.82043457 282.95629883]
[426.43951416 292.44296265]
[438.05859375 301.92965698]
[449.67767334 311.41635132]
[461.29672241 320.90301514]
[472.91580200 330.38970947]
[488.24313354 327.29022217]
[501.95208740 334.81344604]
[507.56967163 349.40716553]
[502.44348145 364.18066406]
[488.99392700 372.15832520]
[473.57147217 369.57336426]
[463.45812988 357.64633179]
[463.42913818 342.00878906]
[451.81005859 332.52209473]
[440.19097900 323.03540039]
[428.57189941 313.54873657]
[416.95281982 304.06204224]
[405.33377075 294.57537842]
[390.58172607 292.51940918]
[384.78546143 277.79821777]
[373.16638184 268.31152344]
[360.06848145 280.39462280]
[345.27120972 290.32797241]
[329.12411499 297.87615967]
[312.00866699 302.86016846]
[294.32943726 305.16149902]
[276.50430298 304.72515869]
[258.95474243 301.56079102]
[242.09585571 295.74261475]
[226.32643127 287.40756226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 92]
[9 91]
[10 90]
[34 83]
[35 82]
[36 81]
[37 80]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[48 67]
[49 66]
[50 65]
[122 146]
[123 145]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
] def

init

% Start Annotations
8 92 0.16 1 colorpair
9 91 0.16 0.6 colorpair
10 90 0.0 1 colorpair
34 83 0.16 0.2 colorpair
35 82 0.0 0.6 colorpair
36 81 0.16 1 colorpair
37 80 0.16 0.6 colorpair
39 76 0.16 1 colorpair
40 75 0.0 0.2 colorpair
41 74 0.16 0.6 colorpair
42 73 0.0 0.6 colorpair
43 72 0.16 0.6 colorpair
44 71 0.0 0.6 colorpair
45 70 0.0 0.2 colorpair
48 67 0.0 0.6 colorpair
49 66 0.0 0.6 colorpair
50 65 0.32 1 colorpair
122 146 0.0 0.6 colorpair
123 145 0.16 1 colorpair
125 143 0.16 0.6 colorpair
126 142 0.16 0.6 colorpair
127 141 0.0 0.6 colorpair
128 140 0.0 1 colorpair
129 139 0.0 0.2 colorpair
130 138 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 cmark
92 cmark
9 91 1 gmark
91 cmark
34 83 2 gmark
34 cmark
83 cmark
35 82 1 gmark
36 cmark
81 cmark
37 80 1 gmark
37 cmark
39 cmark
40 75 2 gmark
41 74 1 gmark
41 cmark
74 cmark
42 73 1 gmark
43 72 1 gmark
43 cmark
44 71 1 gmark
45 70 2 gmark
48 67 1 gmark
49 66 1 gmark
50 cmark
65 cmark
122 146 1 gmark
123 cmark
145 cmark
125 143 1 gmark
125 cmark
143 cmark
126 142 1 gmark
126 cmark
142 cmark
127 141 1 gmark
129 139 2 gmark

% End Annotations
showpage
end
%%EOF
