%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  9 06:27:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGUAUCAAUCAAAUCUUUAGAAAGGAGACGCCUCUUGGUUGGUAUAAGUACCAUGUUGCAAUUUGGAAUUUUCCUCAUUGCGUUCAUCGGUCUUAUCAUCGAGCUUAUUAAAUUAAGCCAAAAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[99.61732483 147.58822632]
[114.60797119 147.05847168]
[128.82778931 151.82569885]
[119.78827667 139.85543823]
[110.74875641 127.88517761]
[101.70923615 115.91492462]
[87.54283142 110.98410797]
[73.02448273 114.75471497]
[58.50613022 118.52532196]
[43.98777771 122.29592896]
[29.46942711 126.06653595]
[14.95107651 129.83714294]
[0.43272561 133.60774231]
[-14.08562565 137.37835693]
[-28.60397720 141.14897156]
[-43.12232590 144.91957092]
[-29.22966194 150.57588196]
[-19.06840897 161.60987854]
[-14.57340145 175.92053223]
[-16.60054398 190.78292847]
[-24.76384354 203.36706543]
[-37.50890732 211.27676392]
[-52.40890503 213.00592041]
[-66.62669373 208.22529602]
[-77.45502472 197.84515381]
[-82.83203888 183.84202576]
[-81.73389435 168.88226318]
[-74.36968231 155.81443787]
[-62.13946152 147.12586975]
[-77.13545990 146.77940369]
[-92.13146210 146.43292236]
[-107.12745667 146.08645630]
[-121.24765778 154.42623901]
[-135.39530945 146.13311768]
[-135.01652527 129.73834229]
[-120.50096130 122.10746002]
[-106.78099060 131.09046936]
[-91.78498840 131.43693542]
[-76.78899384 131.78340149]
[-61.79299545 132.12986755]
[-46.89293671 130.40121460]
[-32.37458420 126.63061523]
[-17.85623360 122.86000824]
[-3.33788180 119.08940125]
[11.18046951 115.31879425]
[25.69882011 111.54818726]
[40.21717072 107.77757263]
[54.73552322 104.00696564]
[69.25387573 100.23635864]
[83.77222443 96.46575165]
[94.73990631 86.23296356]
[99.50677490 72.01055145]
[104.27364349 57.78814316]
[104.04072571 48.56472015]
[109.31836700 43.29450226]
[114.41246796 29.18599129]
[119.50657654 15.07748127]
[124.43739319 0.91107625]
[129.20426941 -13.31133366]
[133.97114563 -27.53374290]
[129.86323547 -45.44117355]
[143.36183167 -56.59515762]
[147.79891968 -70.92387390]
[152.23600769 -85.25259399]
[156.67309570 -99.58131409]
[161.11019897 -113.91003418]
[165.54728699 -128.23875427]
[158.43353271 -142.09632874]
[163.13749695 -156.56448364]
[176.39241028 -163.26095581]
[180.82949829 -177.58967590]
[185.26658630 -191.91839600]
[181.10934448 -207.78186035]
[192.95758057 -219.11991882]
[208.62283325 -214.26895142]
[211.99003601 -198.21920776]
[199.59530640 -187.48130798]
[195.15821838 -173.15258789]
[190.72113037 -158.82386780]
[197.87197876 -145.80845642]
[193.57624817 -131.21388245]
[179.87600708 -123.80166626]
[175.43891907 -109.47294617]
[171.00181580 -95.14422607]
[166.56472778 -80.81550598]
[162.12763977 -66.48678589]
[157.69055176 -52.15806580]
[163.06251526 -41.25715256]
[159.41519165 -29.24391174]
[148.19354248 -22.76687241]
[143.42668152 -8.54446220]
[138.65980530 5.67794752]
[139.52455139 13.08610725]
[133.61508179 20.17158890]
[128.52098083 34.28009796]
[123.42687225 48.38861084]
[118.49605560 62.55501556]
[113.72918701 76.77742767]
[108.96231079 90.99983215]
[112.65377808 95.09555817]
[114.42392731 100.69266510]
[113.67949677 106.87540436]
[122.71901703 118.84566498]
[131.75852966 130.81591797]
[140.79804993 142.78617859]
[147.71928406 144.93243408]
[152.24285889 149.68055725]
[153.68101501 155.37492371]
[165.85687256 164.13554382]
[178.03273010 172.89616394]
[190.20858765 181.65678406]
[202.38444519 190.41740417]
[217.94026184 187.62593079]
[230.86584473 196.72015381]
[233.49269104 212.30459595]
[224.26234436 225.13331604]
[208.65098572 227.59524536]
[195.92056274 218.22978210]
[193.62382507 202.59326172]
[181.44796753 193.83264160]
[169.27210999 185.07202148]
[157.09625244 176.31140137]
[144.92039490 167.55078125]
[150.01519775 181.65904236]
[149.83097839 196.65791321]
[144.39122009 210.63679504]
[134.38885498 221.81500244]
[121.09799194 228.76864624]
[106.21167755 230.61193848]
[91.62617493 227.11006165]
[79.19942474 218.70912170]
[70.51438141 206.47924805]
[66.67737579 191.97830200]
[68.17716980 177.05346680]
[74.82272339 163.60591125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 105]
[4 104]
[5 103]
[6 102]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[29 40]
[30 39]
[31 38]
[32 37]
[51 99]
[52 98]
[53 97]
[55 96]
[56 95]
[57 94]
[58 92]
[59 91]
[60 90]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[70 79]
[71 78]
[72 77]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% Start Annotations
3 105 0.0 1 colorpair
4 104 0.0 1 colorpair
5 103 0.0 1 colorpair
6 102 0.0 1 colorpair
7 50 0.0 1 colorpair
8 49 0.0 1 colorpair
9 48 0.0 1 colorpair
10 47 0.0 1 colorpair
11 46 0.0 1 colorpair
12 45 0.0 1 colorpair
13 44 0.0 1 colorpair
14 43 0.0 1 colorpair
15 42 0.0 1 colorpair
16 41 0.0 1 colorpair
29 40 0.0 1 colorpair
30 39 0.0 1 colorpair
31 38 0.0 1 colorpair
32 37 0.0 1 colorpair
51 99 0.0 1 colorpair
52 98 0.0 1 colorpair
53 97 0.0 1 colorpair
55 96 0.0 1 colorpair
56 95 0.0 1 colorpair
57 94 0.0 1 colorpair
58 92 0.0 1 colorpair
59 91 0.0 1 colorpair
60 90 0.0 1 colorpair
62 87 0.0 1 colorpair
63 86 0.0 1 colorpair
64 85 0.0 1 colorpair
65 84 0.0 1 colorpair
66 83 0.0 1 colorpair
67 82 0.0 1 colorpair
70 79 0.0 1 colorpair
71 78 0.0 1 colorpair
72 77 0.0 1 colorpair
108 123 0.0 1 colorpair
109 122 0.0 1 colorpair
110 121 0.0 1 colorpair
111 120 0.0 1 colorpair
112 119 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
