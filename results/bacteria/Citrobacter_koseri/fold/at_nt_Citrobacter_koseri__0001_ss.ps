%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCAAAGGAGGCAAAACCCGCGCCCUGAUGGCGUAUUCAGUGUGAAACGUGAUUACUAAUAGUGUCAACA_UAAGACAACGUGCUUCACCACAACCAUCUCCAUAUCGCGGAC_____CCUCCCUCCGGAGGGGCUUU__\
) } def
/len { sequence length } bind def

/coor [
[115.41974640 280.60620117]
[103.48252869 289.79589844]
[89.79947662 296.09844971]
[75.05693817 299.19769287]
[59.99439240 298.93817139]
[45.36736298 295.33294678]
[31.90953827 288.56280518]
[20.29595757 278.96737671]
[11.10915565 267.02792358]
[4.80993605 253.34333801]
[1.71426558 238.60005188]
[1.97742176 223.53756714]
[5.58620453 208.91140747]
[12.35959911 195.45523071]
[21.95785522 183.84397888]
[33.89952850 174.66006470]
[47.58562851 168.36416626]
[62.32966614 165.27206421]
[77.39208984 165.53887939]
[80.98182678 150.97474670]
[84.57155609 136.41061401]
[88.16129303 121.84648895]
[91.75102997 107.28236389]
[87.97653198 107.79359436]
[83.93154907 107.31053925]
[79.83208466 105.77400970]
[75.90424347 103.16745758]
[61.87900162 97.84838867]
[47.85375977 92.52931213]
[33.82851410 87.21024323]
[19.80327034 81.89116669]
[5.77802753 76.57209015]
[-6.33350563 81.15242767]
[-17.93537903 76.37547302]
[-22.97601318 65.32592773]
[-36.88102722 59.70003891]
[-50.78604126 54.07415009]
[-64.69105530 48.44826126]
[-78.59606934 42.82237244]
[-90.65412140 52.33546448]
[-105.85554504 54.52913666]
[-120.11123657 48.81329727]
[-129.58648682 36.72548294]
[-131.73249817 21.51725578]
[-125.97200775 7.27954912]
[-113.85455322 -2.15776348]
[-98.63967133 -4.25609303]
[-84.42008972 1.54900098]
[-75.02080536 13.69597721]
[-72.97017670 28.91736031]
[-59.06516647 34.54324722]
[-45.16015244 40.16913605]
[-31.25513840 45.79502487]
[-17.35012627 51.42091370]
[-0.16656311 48.02471924]
[11.09710026 62.54684830]
[25.12234497 67.86592102]
[39.14758682 73.18499756]
[53.17283249 78.50406647]
[67.19807434 83.82314301]
[81.22332001 89.14221954]
[71.46511078 77.75022888]
[61.70689774 66.35824585]
[48.95367050 58.46171951]
[40.43565750 46.11491776]
[37.58169937 31.38892365]
[40.87052155 16.75390816]
[49.75044632 4.66478491]
[62.73194122 -2.85058832]
[77.63745117 -4.53156519]
[91.96669769 -0.09617490]
[103.31605530 9.71158028]
[109.78176117 23.24652290]
[110.27923584 38.23826981]
[104.72548676 52.17138672]
[103.65840912 67.13338470]
[102.59133148 82.09537506]
[110.70094299 69.47657776]
[118.81056213 56.85777283]
[126.92017365 44.23896790]
[135.02978516 31.62016678]
[131.42585754 16.23227310]
[139.82925415 2.84726548]
[155.25439453 -0.59376889]
[168.54980469 7.95067501]
[171.82756042 23.41132927]
[163.14303589 36.61566162]
[147.64859009 39.72977829]
[139.53897095 52.34858322]
[131.42936707 64.96738434]
[123.31974792 77.58618927]
[115.21013641 90.20499420]
[123.68588257 77.82913971]
[133.97207642 66.91152191]
[145.82164001 57.71435547]
[158.94996643 50.45854187]
[173.04174805 45.31835175]
[187.75852966 42.41724777]
[202.74684143 41.82490921]
[217.64666748 43.55555725]
[232.10014343 47.56763077]
[245.76014709 53.76476288]
[258.29855347 61.99811172]
[269.41424561 72.06992340]
[278.84024048 83.73829651]
[286.35012817 96.72296906]
[291.76351929 110.71207428]
[294.95040894 125.36962128]
[295.83425903 140.34356689]
[294.39385986 155.27424622]
[290.66375732 169.80305481]
[284.73358154 183.58103943]
[276.74575806 196.27728271]
[266.89212036 207.58683777]
[255.40936279 217.23806763]
[242.57325745 224.99916077]
[228.69213867 230.68371582]
[214.09936523 234.15521240]
[199.14546204 235.33024597]
[184.18957520 234.18060303]
[169.59094238 230.73390198]
[155.70018005 225.07292175]
[142.85092163 217.33363342]
[131.35179138 207.70191956]
[121.47896576 196.40911865]
[113.46958923 183.72645569]
[107.51602173 169.95855713]
[103.76126099 155.43611145]
[102.29549408 140.50788879]
[103.15391541 125.53247833]
[106.31515503 110.87210083]
[102.72541809 125.43622589]
[99.13568878 140.00035095]
[95.54595184 154.56448364]
[91.95621490 169.12860107]
[105.41732025 175.89221191]
[117.03554535 185.48202515]
[126.22813416 197.41702271]
[132.53398132 211.09854126]
[135.63679504 225.84033203]
[135.38093567 240.90293884]
[131.77925110 255.53085327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% Start Annotations
19 135 0.16 0.6 colorpair
20 134 0.16 0.6 colorpair
21 133 0.0 0.6 colorpair
22 132 0.16 0.6 colorpair
23 131 0.16 0.6 colorpair
27 61 0.16 0.2 colorpair
28 60 0.16 1 colorpair
29 59 0.16 0.6 colorpair
30 58 0.16 0.2 colorpair
31 57 0.16 1 colorpair
32 56 0.16 0.2 colorpair
35 54 0.16 0.6 colorpair
36 53 0.16 1 colorpair
37 52 0.16 1 colorpair
38 51 0.16 1 colorpair
39 50 0.16 0.2 colorpair
77 92 0.16 1 colorpair
78 91 0.16 0.2 colorpair
79 90 0.16 0.6 colorpair
80 89 0.16 0.6 colorpair
81 88 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 135 1 gmark
19 cmark
20 134 1 gmark
20 cmark
21 133 1 gmark
22 132 1 gmark
22 cmark
132 cmark
23 131 1 gmark
23 cmark
27 61 2 gmark
27 cmark
61 cmark
28 cmark
60 cmark
29 59 1 gmark
29 cmark
30 58 2 gmark
30 cmark
58 cmark
57 cmark
32 56 2 gmark
56 cmark
35 54 1 gmark
35 cmark
54 cmark
53 cmark
37 cmark
52 cmark
38 cmark
51 cmark
39 50 2 gmark
50 cmark
77 cmark
92 cmark
78 91 2 gmark
78 cmark
91 cmark
79 90 1 gmark
79 cmark
90 cmark
80 89 1 gmark
80 cmark
89 cmark
81 cmark
88 cmark

% End Annotations
showpage
end
%%EOF
