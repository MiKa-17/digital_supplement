%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:10:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAAGAGGCU____AUCCUUACGUUGAUUGGACAUAUUG______AUGGCCUCGGGUUAAUUGAAAAAUAACUCGG_GCUUUCGUCUUUCUGCCUAUCACG_ACUGCUCAAGACAGAAAGCCUCAAGCACC________________________\
) } def
/len { sequence length } bind def

/coor [
[4.13457394 210.18228149]
[-5.04024124 201.47346497]
[-13.42704105 192.00338745]
[-20.96290779 181.84309387]
[-27.59130478 171.06880188]
[-33.26250839 159.76136780]
[-47.24639893 165.18821716]
[-61.23028946 170.61506653]
[-75.21417999 176.04193115]
[-89.19807434 181.46878052]
[-103.18196869 186.89564514]
[-105.84805298 190.48356628]
[-109.19381714 192.77232361]
[-112.71557617 193.70857239]
[-115.94572449 193.41204834]
[-118.50724792 192.14779663]
[-132.14036560 198.40383911]
[-144.76654053 206.50196838]
[-157.39271545 214.60009766]
[-155.99978638 229.84208679]
[-161.86042786 243.98109436]
[-173.62791443 253.76806641]
[-188.59815979 256.95404053]
[-203.33111572 252.80690002]
[-214.44123840 242.27961731]
[-219.37551880 227.79129028]
[-217.00010681 212.67124939]
[-207.86082458 200.39393616]
[-194.05784607 193.78060913]
[-178.76296997 194.35096741]
[-165.49084473 201.97392273]
[-152.86466980 193.87579346]
[-140.23849487 185.77766418]
[-155.23767090 185.62023926]
[-169.07489014 179.82960510]
[-179.71554565 169.25717163]
[-185.59507751 155.45748901]
[-185.84896851 140.45964050]
[-180.43989563 126.46885681]
[-170.16317749 115.54232025]
[-156.52989197 109.28664398]
[-141.54464722 108.62163544]
[-127.41082001 113.64508057]
[-116.20662689 123.61834717]
[-109.57949829 137.07498169]
[-108.50386810 152.03636169]
[-113.13790894 166.30261230]
[-122.79864502 177.77476501]
[-108.60882568 172.91174316]
[-94.62493134 167.48489380]
[-80.64103699 162.05804443]
[-66.65715027 156.63117981]
[-52.67325592 151.20433044]
[-38.68936157 145.77746582]
[-43.24853516 128.46354675]
[-45.65492630 110.72185516]
[-45.87237549 92.81903839]
[-43.89761353 75.02413940]
[-39.76031494 57.60458755]
[-33.52265549 40.82216263]
[-25.27838326 24.92908096]
[-15.15139103 10.16418648]
[-3.29386973 -3.25063014]
[10.11598110 -15.11376667]
[24.87663460 -25.24694061]
[40.76626587 -33.49786758]
[57.54607391 -39.74254990]
[74.96389771 -43.88714218]
[92.75796509 -45.86935806]
[110.66087341 -45.65940475]
[128.40356445 -43.26044083]
[145.71939087 -38.70851898]
[162.34814453 -32.07204437]
[178.03991699 -23.45075226]
[192.55886841 -12.97420883]
[205.68682861 -0.79985601]
[217.05873108 -10.58145809]
[221.55717468 -18.59719658]
[228.75743103 -20.44223785]
[240.32278442 -29.99434471]
[251.88812256 -39.54645157]
[263.45346069 -49.09855652]
[275.01882935 -58.65066147]
[286.58416748 -68.20276642]
[298.05337524 -77.87010956]
[309.42526245 -87.65171051]
[320.79718018 -97.43331146]
[332.16909790 -107.21491241]
[330.02111816 -120.86225128]
[334.87225342 -133.68200684]
[345.34988403 -142.35020447]
[358.63787842 -144.67633057]
[371.23291016 -140.15608215]
[382.79827881 -149.70819092]
[379.09719849 -164.51577759]
[382.19583130 -179.46105957]
[391.47891235 -191.57662964]
[405.10330200 -198.45692444]
[420.36389160 -198.73587036]
[434.23062134 -192.35806274]
[443.95028687 -180.58984375]
[447.59301758 -165.76779175]
[444.43554688 -150.83483887]
[435.10482788 -138.75593567]
[421.45343018 -131.92933655]
[406.19189453 -131.71049500]
[392.35037231 -138.14283752]
[380.78503418 -128.59074402]
[382.33648682 -112.27420807]
[373.78851318 -98.09563446]
[358.32827759 -91.72383881]
[341.95068359 -95.84300995]
[330.57879639 -86.06140137]
[319.20687866 -76.27980042]
[307.83496094 -66.49819946]
[304.79779053 -59.71414566]
[296.13626099 -56.63742065]
[284.57092285 -47.08531570]
[273.00558472 -37.53320694]
[261.44024658 -27.98110199]
[249.87487793 -18.42899704]
[238.30953979 -8.87689018]
[226.84033203 0.79044783]
[215.46842957 10.57205009]
[222.77377319 20.89933014]
[229.15806580 31.82002831]
[234.57342529 43.25221252]
[238.97918701 55.11012268]
[242.34233093 67.30479431]
[244.63761902 79.74475098]
[245.84782410 92.33666229]
[245.96388245 104.98606873]
[244.98490906 117.59806061]
[242.91825867 130.07803345]
[239.77941895 142.33236694]
[235.59196472 154.26911926]
[230.38728333 165.79873657]
[224.20442200 176.83473206]
[217.08979797 187.29431152]
[209.09674072 197.09899902]
[200.28524780 206.17526245]
[190.72140503 214.45498657]
[180.47697449 221.87605286]
[169.62879944 228.38281250]
[158.25825500 233.92643738]
[146.45066833 238.46534729]
[134.29460144 241.96546936]
[121.88126373 244.40057373]
[109.30376434 245.75238037]
[96.65647125 246.01074219]
[84.03425598 245.17372131]
[71.53182220 243.24761963]
[59.24295044 240.24685669]
[47.25984573 236.19395447]
[35.67239761 231.11932373]
[24.56753731 225.06101990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[16 48]
[17 33]
[18 32]
[19 31]
[76 124]
[77 123]
[79 122]
[80 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 115]
[86 114]
[87 113]
[88 112]
[93 108]
[94 107]
] def

init

% Start Annotations
6 54 0.0 0.6 colorpair
7 53 0.0 0.6 colorpair
8 52 0.16 1 colorpair
9 51 0.0 1 colorpair
10 50 0.0 0.6 colorpair
11 49 0.0 0.6 colorpair
16 48 0.0 1 colorpair
17 33 0.16 1 colorpair
18 32 0.0 0.6 colorpair
19 31 0.16 1 colorpair
76 124 0.0 0.6 colorpair
77 123 0.16 1 colorpair
79 122 0.0 0.6 colorpair
80 121 0.0 1 colorpair
81 120 0.16 1 colorpair
82 119 0.0 1 colorpair
83 118 0.16 1 colorpair
84 117 0.0 0.6 colorpair
85 115 0.0 0.6 colorpair
86 114 0.16 1 colorpair
87 113 0.0 1 colorpair
88 112 0.0 0.6 colorpair
93 108 0.0 0.6 colorpair
94 107 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 54 1 gmark
7 53 1 gmark
8 cmark
52 cmark
10 50 1 gmark
11 49 1 gmark
17 cmark
33 cmark
18 32 1 gmark
19 cmark
31 cmark
76 124 1 gmark
77 cmark
123 cmark
79 122 1 gmark
81 cmark
120 cmark
83 cmark
118 cmark
84 117 1 gmark
85 115 1 gmark
114 cmark
88 112 1 gmark
93 108 1 gmark
94 cmark
107 cmark

% End Annotations
showpage
end
%%EOF
