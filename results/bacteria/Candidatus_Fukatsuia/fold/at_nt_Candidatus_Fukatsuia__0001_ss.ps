%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:10:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________________________________________________GGCUGAU_CGAGACUCACUGUCUGAAGCACGCAUCAAACAAAGAAACACGAAAGCACCGGU______________________________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[390.12161255 809.93194580]
[376.04742432 804.73858643]
[362.17984009 799.01629639]
[348.53872681 792.77337646]
[335.14361572 786.01873779]
[322.01373291 778.76202393]
[309.16784668 771.01367188]
[296.62435913 762.78472900]
[284.40124512 754.08703613]
[272.51605225 744.93304443]
[260.98574829 735.33581543]
[249.82688904 725.30920410]
[239.05543518 714.86743164]
[228.68682861 704.02557373]
[218.73593140 692.79913330]
[209.21697998 681.20410156]
[200.14361572 669.25720215]
[191.52883911 656.97552490]
[183.38499451 644.37664795]
[175.72373962 631.47863770]
[168.55606079 618.29992676]
[161.89221191 604.85943604]
[155.74174500 591.17639160]
[150.11346436 577.27038574]
[145.01544189 563.16137695]
[140.45498657 548.86956787]
[136.43861389 534.41540527]
[132.97207642 519.81958008]
[130.06036377 505.10308838]
[127.70762634 490.28692627]
[125.91723633 475.39233398]
[124.69176483 460.44067383]
[124.03296661 445.45333862]
[123.94178009 430.45181274]
[124.41834259 415.45758057]
[125.46196747 400.49212646]
[127.07115936 385.57687378]
[129.24362183 370.73321533]
[131.97622681 355.98239136]
[135.26506042 341.34552002]
[139.10542297 326.84359741]
[143.49182129 312.49740601]
[148.41795349 298.32745361]
[153.87677002 284.35409546]
[159.86044312 270.59729004]
[166.36041260 257.07675171]
[173.36737061 243.81188965]
[180.87126160 230.82168579]
[188.86134338 218.12474060]
[197.32618713 205.73924255]
[206.25364685 193.68293762]
[194.54519653 184.30679321]
[182.83673096 174.93064880]
[171.12828064 165.55450439]
[159.41983032 156.17835999]
[147.71136475 146.80221558]
[130.24333191 145.08631897]
[123.70110321 127.86988068]
[111.86054993 118.66111755]
[100.01999664 109.45235443]
[94.81091309 108.90802765]
[90.27542114 105.48748779]
[87.97866821 99.80965424]
[76.40467834 90.26802063]
[64.83068848 80.72639465]
[53.25669479 71.18476105]
[41.68270493 61.64313126]
[30.10871124 52.10150146]
[18.53471947 42.55987167]
[6.96072769 33.01824188]
[-4.61326408 23.47661018]
[-16.18725586 13.93498039]
[-31.70768929 15.25933456]
[-43.30944061 5.41788816]
[-44.47636032 -9.38663387]
[-56.05035400 -18.92826462]
[-67.62434387 -28.46989441]
[-83.87899780 -30.64203835]
[-89.87416077 -45.90605164]
[-79.44252014 -58.55962372]
[-63.31525803 -55.58584595]
[-58.08271408 -40.04388809]
[-46.50872421 -30.50225639]
[-34.93473053 -20.96062660]
[-20.17941666 -22.63881493]
[-8.30581951 -13.12712097]
[-6.64562607 2.36098838]
[4.92836618 11.90261841]
[16.50235748 21.44424820]
[28.07634926 30.98587990]
[39.65034103 40.52750778]
[51.22433472 50.06914139]
[62.79832458 59.61077118]
[74.37231445 69.15239716]
[85.94631195 78.69403076]
[97.52030182 88.23566437]
[109.22875977 97.61180115]
[121.06931305 106.82056427]
[132.90986633 116.02932739]
[145.77688599 115.20578766]
[155.44822693 123.11345673]
[157.08750916 135.09376526]
[168.79597473 144.46990967]
[180.50442505 153.84603882]
[192.21287537 163.22218323]
[203.92134094 172.59832764]
[215.62979126 181.97447205]
[225.44343567 170.62782288]
[235.67942810 159.66067505]
[246.32310486 149.08871460]
[257.35922241 138.92710876]
[268.77194214 129.19039917]
[280.54495239 119.89253235]
[292.66137695 111.04683685]
[305.10385132 102.66598511]
[317.85458374 94.76197815]
[330.89526367 87.34613800]
[344.20721436 80.42908478]
[357.77139282 74.02072906]
[371.56838989 68.13025665]
[385.57836914 62.76610184]
[399.78131104 57.93594742]
[414.15686035 53.64671326]
[428.68441772 49.90454483]
[443.34320068 46.71480179]
[458.11218262 44.08205032]
[472.97021484 42.01006699]
[487.89599609 40.50181961]
[502.86816406 39.55946350]
[517.86529541 39.18435287]
[532.86584473 39.37702560]
[547.84838867 40.13720322]
[562.79138184 41.46379471]
[577.67352295 43.35490799]
[592.47344971 45.80782700]
[607.16992188 48.81903839]
[621.74194336 52.38423157]
[636.16857910 56.49829865]
[650.42926025 61.15534210]
[664.50341797 66.34869385]
[678.37103271 72.07092285]
[692.01214600 78.31381989]
[705.40728760 85.06844330]
[718.53717041 92.32511902]
[731.38311768 100.07345581]
[743.92657471 108.30235291]
[756.14971924 117.00001526]
[768.03497314 126.15399170]
[779.56524658 135.75117493]
[790.72412109 145.77780151]
[801.49560547 156.21951294]
[811.86425781 167.06135559]
[821.81518555 178.28779602]
[831.33416748 189.88276672]
[840.40753174 201.82963562]
[849.02233887 214.11129761]
[857.16619873 226.71015930]
[864.82751465 239.60816956]
[871.99523926 252.78686523]
[878.65911865 266.22735596]
[884.80963135 279.91036987]
[890.43792725 293.81634521]
[895.53594971 307.92535400]
[900.09643555 322.21716309]
[904.11285400 336.67132568]
[907.57940674 351.26712036]
[910.49114990 365.98361206]
[912.84393311 380.79977417]
[914.63433838 395.69436646]
[915.85986328 410.64602661]
[916.51867676 425.63336182]
[916.60992432 440.63488770]
[916.13342285 455.62911987]
[915.08978271 470.59457397]
[913.48065186 485.50982666]
[911.30822754 500.35348511]
[908.57568359 515.10430908]
[905.28686523 529.74121094]
[901.44653320 544.24310303]
[897.06018066 558.58935547]
[892.13403320 572.75927734]
[886.67529297 586.73266602]
[880.69165039 600.48950195]
[874.19171143 614.01000977]
[867.18475342 627.27490234]
[859.68090820 640.26513672]
[851.69085693 652.96209717]
[843.22601318 665.34759521]
[834.29858398 677.40393066]
[824.92132568 689.11383057]
[815.10766602 700.46044922]
[804.87164307 711.42755127]
[794.22796631 721.99951172]
[783.19183350 732.16107178]
[771.77905273 741.89776611]
[760.00604248 751.19561768]
[747.88958740 760.04125977]
[735.44708252 768.42211914]
[722.69635010 776.32604980]
[709.65563965 783.74188232]
[696.34368896 790.65887451]
[682.77947998 797.06719971]
[668.98248291 802.95764160]
[654.97247314 808.32177734]
[640.76953125 813.15191650]
[626.39398193 817.44110107]
[611.86639404 821.18322754]
[597.20758057 824.37298584]
[582.43859863 827.00567627]
[567.58056641 829.07763672]
[552.65478516 830.58581543]
[537.68261719 831.52813721]
[522.68548584 831.90325928]
[507.68493652 831.71051025]
[492.70242310 830.95031738]
[477.75939941 829.62371826]
[462.87725830 827.73254395]
[448.07736206 825.27960205]
[433.38088989 822.26837158]
[418.80889893 818.70312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[51 107]
[52 106]
[53 105]
[54 104]
[55 103]
[56 102]
[58 99]
[59 98]
[60 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[75 84]
[76 83]
[77 82]
] def

init

% Start Annotations
51 107 0.0 0.6 colorpair
52 106 0.16 1 colorpair
53 105 0.0 0.2 colorpair
54 104 0.16 1 colorpair
55 103 0.0 0.2 colorpair
56 102 0.16 1 colorpair
58 99 0.16 1 colorpair
59 98 0.0 1 colorpair
60 97 0.0 0.2 colorpair
63 96 0.0 0.2 colorpair
64 95 0.0 1 colorpair
65 94 0.0 0.2 colorpair
66 93 0.16 1 colorpair
67 92 0.0 1 colorpair
68 91 0.16 1 colorpair
69 90 0.0 0.2 colorpair
70 89 0.16 1 colorpair
71 88 0.16 1 colorpair
72 87 0.0 1 colorpair
75 84 0.0 0.2 colorpair
76 83 0.0 0.2 colorpair
77 82 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
51 107 1 gmark
52 cmark
106 cmark
53 105 2 gmark
104 cmark
55 103 2 gmark
102 cmark
58 cmark
60 97 2 gmark
63 96 2 gmark
65 94 2 gmark
66 cmark
93 cmark
91 cmark
69 90 2 gmark
89 cmark
71 cmark
88 cmark
75 84 2 gmark
76 83 2 gmark
77 cmark
82 cmark

% End Annotations
showpage
end
%%EOF
