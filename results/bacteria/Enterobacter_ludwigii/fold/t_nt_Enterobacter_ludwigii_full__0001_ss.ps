%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:09:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AUGAGCGUAGUGGAUAU_GGUGAUACUUAUCCUCAAACUCAUUGUUGCUGUACUGCAACUACUUGAUGCUGUCCUGAAAUAC__\
) } def
/len { sequence length } bind def

/coor [
[150.46029663 171.50802612]
[157.20675659 158.11080933]
[166.40126038 146.25918579]
[177.70129395 136.39463806]
[190.68978882 128.88288879]
[176.08290100 125.47138214]
[161.47599792 122.05986786]
[146.86909485 118.64835358]
[132.26219177 115.23683167]
[123.95877838 126.43836212]
[111.99626160 133.60208130]
[98.20160675 135.63391113]
[84.68161011 132.22354126]
[73.50112152 123.89183044]
[66.36768341 111.91123199]
[64.37075043 98.11148071]
[49.89334488 94.18659210]
[35.41593933 90.26170349]
[20.93853378 86.33681488]
[6.46113014 82.41192627]
[-5.23939657 88.17653656]
[-17.31747818 84.45082855]
[-23.33898735 73.79920197]
[-37.19932175 81.39306641]
[-52.34609222 76.88186646]
[-59.79298782 62.94202042]
[-55.12190247 47.84379196]
[-41.10410309 40.54469299]
[-26.05610466 45.37514496]
[-18.90561485 59.46932983]
[-2.14915156 54.58820724]
[10.38601875 67.93452454]
[24.86342430 71.85941315]
[39.34082794 75.78430176]
[53.81823349 79.70919037]
[68.29563904 83.63407898]
[78.48845673 71.53487396]
[92.91061401 65.03215027]
[108.72660828 65.40438843]
[122.82688141 72.57840729]
[132.43919373 85.14373779]
[135.67370605 100.62993622]
[150.28060913 104.04145050]
[164.88751221 107.45296478]
[179.49441528 110.86447906]
[194.10130310 114.27599335]
[197.76789856 112.56411743]
[201.59883118 112.10063171]
[212.11141968 101.40084839]
[222.62400818 90.70105743]
[233.13659668 80.00126648]
[243.64918518 69.30148315]
[243.25912476 53.50200653]
[254.21557617 42.11203003]
[270.01828003 41.88902283]
[281.29177856 52.96529007]
[281.34771729 68.76947784]
[270.15286255 79.92524719]
[254.34898376 79.81407166]
[243.83638000 90.51386261]
[233.32379150 101.21364594]
[222.81120300 111.91343689]
[212.29861450 122.61322021]
[227.28633118 122.00635529]
[242.11148071 124.29005432]
[256.22177124 129.37924194]
[269.09155273 137.08433533]
[280.24142456 147.11830139]
[289.25601196 159.10734558]
[295.79949951 172.60485840]
[299.62811279 187.10801697]
[300.59927368 202.07653809]
[298.67675781 216.95283508]
[293.93218994 231.18269348]
[286.54235840 244.23605347]
[276.78250122 255.62663269]
[265.01620483 264.93008423]
[251.68180847 271.79986572]
[237.27603149 275.98004150]
[222.33554077 277.31491089]
[207.41691589 275.75469971]
[193.07586670 271.35757446]
[179.84667969 264.28735352]
[168.22213745 254.80735779]
[158.63529968 243.27078247]
[151.44329834 230.10739136]
[146.91404724 215.80752563]
[145.21626282 200.90391541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[23 30]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% Start Annotations
5 46 0.0 0.6 colorpair
6 45 0.16 1 colorpair
7 44 0.0 0.6 colorpair
8 43 0.0 0.6 colorpair
9 42 0.16 1 colorpair
16 36 0.16 1 colorpair
17 35 0.16 1 colorpair
18 34 0.16 1 colorpair
19 33 0.0 0.6 colorpair
20 32 0.0 0.6 colorpair
23 30 0.16 1 colorpair
48 63 0.16 1 colorpair
49 62 0.0 0.6 colorpair
50 61 0.0 0.6 colorpair
51 60 0.0 1 colorpair
52 59 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 46 1 gmark
6 cmark
45 cmark
7 44 1 gmark
8 43 1 gmark
42 cmark
36 cmark
17 cmark
35 cmark
18 cmark
34 cmark
19 33 1 gmark
20 32 1 gmark
23 cmark
30 cmark
63 cmark
49 62 1 gmark
50 61 1 gmark
52 59 1 gmark

% End Annotations
showpage
end
%%EOF
