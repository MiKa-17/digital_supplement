%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:09:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____ACAAGAGCAGGGGAUAU_AGCGAUACGCAGCCUAAAACCCA__GGUGAUGAAAGACAACAACGUGAUCACGCCCCAAAAUACA_\
) } def
/len { sequence length } bind def

/coor [
[152.61054993 320.81863403]
[151.30715942 305.80535889]
[153.50178528 290.89630127]
[159.07609558 276.89544678]
[167.72944641 264.55786133]
[178.99520874 254.54888916]
[171.88052368 241.34353638]
[164.76582336 228.13818359]
[157.65113831 214.93284607]
[150.53645325 201.72749329]
[143.18980408 188.64976501]
[135.61351013 175.70373535]
[128.03721619 162.75770569]
[120.46092987 149.81167603]
[112.88463593 136.86563110]
[105.30834198 123.91960144]
[97.73204803 110.97357178]
[89.92845917 98.16326904]
[81.89999390 85.49267578]
[73.87153625 72.82208252]
[65.84307861 60.15149689]
[57.81462097 47.48090744]
[49.78615952 34.81031418]
[41.09838104 22.58237648]
[31.77563477 10.83136082]
[22.45288658 -0.91965431]
[13.13013744 -12.67066956]
[-1.35616195 -8.14169979]
[-16.50002480 -9.15551949]
[-30.25337029 -15.57501698]
[-40.75616837 -26.53200722]
[-46.58800507 -40.54465103]
[-46.96017075 -55.71784592]
[-41.82233047 -69.99954987]
[-31.86933899 -81.45827484]
[-18.44725609 -88.54432678]
[-3.37130594 -90.29936981]
[11.31961155 -86.48605347]
[23.63866997 -77.62009430]
[31.91981888 -64.90054321]
[35.04309845 -50.04761124]
[32.58611679 -35.07003784]
[24.88115311 -21.99341774]
[34.20389938 -10.24240303]
[43.52664948 1.50861275]
[52.84939957 13.25962830]
[56.52154541 13.96867180]
[59.98359680 16.63346481]
[62.25099182 21.10853958]
[62.45675278 26.78185654]
[70.48520660 39.45244598]
[78.51367188 52.12303543]
[86.54212952 64.79362488]
[94.57058716 77.46421814]
[102.59904480 90.13480377]
[109.38005066 94.84415436]
[110.67807770 103.39727783]
[118.25437164 116.34330750]
[125.83066559 129.28933716]
[133.40696716 142.23538208]
[140.98326111 155.18141174]
[148.55955505 168.12744141]
[156.13584900 181.07347107]
[163.33232117 187.06388855]
[163.74179077 194.61280823]
[170.85647583 207.81816101]
[177.97117615 221.02349854]
[185.08586121 234.22885132]
[192.20054626 247.43418884]
[206.75611877 243.53132629]
[221.81941223 243.09101868]
[236.57809448 246.13699341]
[250.23625183 252.50500488]
[262.05731201 261.85162354]
[271.40377808 273.67279053]
[277.77160645 287.33102417]
[280.81741333 302.08975220]
[280.37689209 317.15304565]
[276.47384644 331.70855713]
[269.31875610 344.97131348]
[259.29745483 356.22610474]
[246.95039368 364.86596680]
[232.94345093 370.42495728]
[218.03199768 372.60327148]
[203.02017212 371.28344727]
[188.71755981 366.53665161]
[175.89547729 358.61889648]
[165.24539185 347.95715332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 46]
[25 45]
[26 44]
[27 43]
] def

init

% Start Annotations
6 69 0.16 1 colorpair
7 68 0.16 1 colorpair
8 67 0.16 1 colorpair
9 66 0.16 1 colorpair
10 65 0.0 0.6 colorpair
11 63 0.16 1 colorpair
12 62 0.16 1 colorpair
13 61 0.0 0.6 colorpair
14 60 0.0 1 colorpair
15 59 0.0 0.6 colorpair
16 58 0.0 0.6 colorpair
17 57 0.16 1 colorpair
18 55 0.16 1 colorpair
19 54 0.0 1 colorpair
20 53 0.0 1 colorpair
21 52 0.0 0.6 colorpair
22 51 0.0 0.6 colorpair
23 50 0.16 1 colorpair
24 46 0.0 0.6 colorpair
25 45 0.16 1 colorpair
26 44 0.0 1 colorpair
27 43 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
6 cmark
7 cmark
8 cmark
67 cmark
66 cmark
10 65 1 gmark
63 cmark
12 cmark
62 cmark
13 61 1 gmark
15 59 1 gmark
16 58 1 gmark
17 cmark
57 cmark
18 cmark
55 cmark
21 52 1 gmark
22 51 1 gmark
23 cmark
24 46 1 gmark
25 cmark
45 cmark
27 cmark
43 cmark

% End Annotations
showpage
end
%%EOF
