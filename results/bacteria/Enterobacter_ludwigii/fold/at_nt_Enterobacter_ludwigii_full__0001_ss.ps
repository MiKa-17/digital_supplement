%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:09:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AAAAACGUCAAAAUCCGUG__UAAAUU____GGUAGUCGUCAACCGCAUAGACGUGUUGCAGCAACGUAACACAGCGUC___________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[207.07440186 114.28344727]
[206.87078857 99.28482819]
[208.00598145 84.32784271]
[210.47093201 69.53176117]
[214.25065613 54.99937820]
[200.65603638 61.33864975]
[187.06143188 67.67792511]
[173.46681213 74.01719666]
[159.87219238 80.35647583]
[146.27757263 86.69574738]
[132.68295288 93.03501892]
[119.08834076 99.37429810]
[114.03413391 112.95373535]
[100.90216827 119.07727051]
[87.25093079 114.22032166]
[73.94577026 121.14655304]
[60.95539093 128.64654541]
[47.96500778 136.14654541]
[34.97462845 143.64654541]
[21.98424721 151.14654541]
[19.44717216 166.57695007]
[7.55157089 176.72724915]
[-8.08582020 176.80479431]
[-20.08150291 166.77296448]
[-22.77148247 151.36848450]
[-14.88563156 137.86488342]
[-0.14740954 132.63813782]
[14.48424625 138.15617371]
[27.47462654 130.65617371]
[40.46500778 123.15617371]
[53.45539093 115.65617371]
[66.44577026 108.15617371]
[67.28036499 105.40451050]
[69.29692078 102.83158112]
[72.42779541 100.90521240]
[76.43164825 100.05791473]
[80.91165924 100.62570190]
[85.96586609 87.04626465]
[99.09783173 80.92272949]
[112.74906921 85.77967834]
[126.34368134 79.44040680]
[139.93829346 73.10112762]
[153.53291321 66.76185608]
[167.12753296 60.42258072]
[180.72215271 54.08330917]
[194.31677246 47.74403381]
[207.91137695 41.40476227]
[213.80245972 27.61000824]
[208.98086548 13.40605545]
[204.15927124 -0.79789656]
[199.33769226 -15.00184822]
[194.51609802 -29.20580101]
[189.69450378 -43.40975189]
[184.87290955 -57.61370468]
[180.05131531 -71.81765747]
[175.22972107 -86.02160645]
[170.40812683 -100.22556305]
[165.58654785 -114.42951202]
[160.76495361 -128.63346863]
[155.94335938 -142.83741760]
[151.12176514 -157.04136658]
[136.83825684 -163.80575562]
[131.60018921 -178.71676636]
[138.51522827 -192.92796326]
[153.48078918 -198.00808716]
[167.61807251 -190.94319153]
[172.53968811 -175.92475891]
[165.32571411 -161.86296082]
[170.14730835 -147.65901184]
[174.96890259 -133.45506287]
[179.79049683 -119.25110626]
[184.61209106 -105.04714966]
[189.43367004 -90.84320068]
[194.25526428 -76.63925171]
[199.07685852 -62.43529510]
[203.89845276 -48.23134613]
[208.72004700 -34.02739334]
[213.54164124 -19.82344055]
[218.36323547 -5.61948872]
[223.18481445 8.58446312]
[228.00640869 22.78841591]
[235.88140869 10.02188206]
[244.86389160 -1.99124050]
[254.88221741 -13.15516090]
[265.85650635 -23.38085747]
[277.69924927 -32.58679581]
[290.31604004 -40.69956207]
[303.60623169 -47.65446854]
[317.46386719 -53.39606094]
[331.77844238 -57.87855148]
[346.43582153 -61.06620026]
[361.31915283 -62.93358612]
[376.30969238 -63.46582031]
[391.28796387 -62.65865707]
[406.13452148 -60.51853561]
[420.73095703 -57.06252289]
[434.96087646 -52.31817245]
[448.71084595 -46.32331467]
[461.87121582 -39.12575531]
[474.33703613 -30.78288651]
[486.00891113 -21.36123276]
[496.79373169 -10.93592262]
[506.60556030 0.40991494]
[515.36614990 12.58580780]
[523.00561523 25.49466705]
[529.46301270 39.03355789]
[534.68695068 53.09452438]
[538.63568115 67.56544495]
[541.27777100 82.33092499]
[542.59210205 97.27323151]
[542.56823730 112.27320862]
[541.20635986 127.21125793]
[538.51733398 141.96826172]
[534.52258301 156.42654419]
[529.25396729 170.47080994]
[522.75347900 183.98908997]
[515.07299805 196.87358093]
[506.27371216 209.02153015]
[496.42581177 220.33609009]
[485.60784912 230.72703552]
[473.90606689 240.11151123]
[461.41378784 248.41467285]
[448.23059082 255.57032776]
[434.46160889 261.52139282]
[420.21664429 266.22045898]
[405.60928345 269.63000488]
[390.75601196 271.72286987]
[375.77526855 272.48239136]
[360.78646851 271.90246582]
[345.90917969 269.98773193]
[331.26202393 266.75344849]
[316.96176147 262.22543335]
[303.12246704 256.43978882]
[289.85446167 249.44264221]
[277.26354980 241.28976440]
[265.45016479 232.04620361]
[254.50846863 221.78562927]
[244.52571106 210.58988953]
[235.58149719 198.54824829]
[227.74716187 185.75672913]
[221.08514404 172.31732178]
[215.64860535 158.33718872]
[211.48088074 143.92782593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[15 37]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% Start Annotations
5 47 0.0 0.6 colorpair
6 46 0.0 0.6 colorpair
7 45 0.16 1 colorpair
8 44 0.16 1 colorpair
9 43 0.0 0.6 colorpair
10 42 0.0 1 colorpair
11 41 0.16 1 colorpair
12 40 0.16 1 colorpair
15 37 0.0 0.6 colorpair
16 32 0.0 1 colorpair
17 31 0.0 1 colorpair
18 30 0.0 0.6 colorpair
19 29 0.0 1 colorpair
20 28 0.0 0.6 colorpair
48 81 0.16 1 colorpair
49 80 0.16 1 colorpair
50 79 0.0 0.6 colorpair
51 78 0.16 1 colorpair
52 77 0.0 0.6 colorpair
53 76 0.16 1 colorpair
54 75 0.0 1 colorpair
55 74 0.0 0.6 colorpair
56 73 0.0 0.6 colorpair
57 72 0.0 0.6 colorpair
58 71 0.0 0.6 colorpair
59 70 0.16 1 colorpair
60 69 0.16 1 colorpair
61 68 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 47 1 gmark
6 46 1 gmark
7 cmark
8 cmark
44 cmark
9 43 1 gmark
11 cmark
12 cmark
40 cmark
15 37 1 gmark
18 30 1 gmark
20 28 1 gmark
48 cmark
81 cmark
49 cmark
50 79 1 gmark
78 cmark
52 77 1 gmark
53 cmark
76 cmark
55 74 1 gmark
56 73 1 gmark
57 72 1 gmark
58 71 1 gmark
59 cmark
70 cmark
69 cmark
61 68 1 gmark

% End Annotations
showpage
end
%%EOF
