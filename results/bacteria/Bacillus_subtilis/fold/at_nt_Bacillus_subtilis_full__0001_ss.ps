%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:05:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGUAAGAACCGUUAAAGAUAUGAGGAAAGCAACUACGAUACCCAUUUUCUCAAGCACUAUGUACACCUCCUUUCCUAUGACUCUAUUAUAACAUAAUU_\
) } def
/len { sequence length } bind def

/coor [
[86.30490875 331.54336548]
[71.32884216 330.16918945]
[56.81896210 326.21511841]
[43.21622086 319.80133057]
[30.93398285 311.12277222]
[20.34549522 300.44311523]
[11.77253056 288.08691406]
[5.47560930 274.42968750]
[1.64608848 259.88644409]
[0.40034309 244.89913940]
[1.77622986 229.92323303]
[5.73193741 215.41380310]
[12.14725590 201.81178284]
[20.82723045 189.53053284]
[31.50808716 178.94325256]
[43.86524963 170.37168884]
[57.52318954 164.07632446]
[72.06686401 160.24844360]
[87.05431366 159.00439453]
[88.42493439 144.06715393]
[89.79556274 129.12989807]
[76.58887482 120.11470032]
[69.66550446 105.70089722]
[70.88362122 89.75703430]
[79.91629791 76.56227875]
[94.33924103 69.65798950]
[95.25370026 54.68589020]
[96.16815948 39.71378708]
[97.08261871 24.74168968]
[97.99707794 9.76958942]
[98.91153717 -5.20250988]
[99.82599640 -20.17461014]
[85.12905884 -23.31430817]
[71.06426239 -28.60949898]
[57.94580841 -35.94188690]
[46.06678009 -45.14765930]
[35.69255066 -56.02116013]
[27.05488777 -68.31947327]
[20.34675980 -81.76784515]
[15.71802902 -96.06583405]
[13.27210236 -110.89402008]
[13.06362343 -125.92113495]
[15.09724903 -140.81146240]
[19.32754707 -155.23236084]
[25.66001320 -168.86164856]
[33.95317459 -181.39485168]
[44.02176285 -192.55197144]
[55.64083862 -202.08374023]
[68.55082703 -209.77723694]
[82.46331787 -215.46057129]
[97.06749725 -219.00677490]
[112.03710175 -220.33663940]
[127.03771210 -219.42044067]
[141.73420715 -216.27864075]
[155.79824829 -210.98144531]
[168.91564941 -203.64720154]
[180.79336548 -194.43972778]
[191.16604614 -183.56475830]
[199.80195618 -171.26521301]
[206.50817871 -157.81588745]
[211.13487244 -143.51724243]
[213.57868958 -128.68870544]
[213.78501892 -113.66156006]
[211.74928284 -98.77151489]
[207.51692200 -84.35121918]
[201.18251038 -70.72283173]
[192.88757324 -58.19081497]
[182.81739807 -47.03513336]
[171.19696045 -37.50501251]
[158.28587341 -29.81335640]
[144.37257385 -24.13200378]
[129.76789856 -20.58787537]
[114.79809570 -19.26014900]
[113.88363647 -4.28805017]
[112.96917725 10.68404961]
[112.05471802 25.65614891]
[111.14025879 40.62825012]
[110.22579956 55.60034943]
[109.31134033 70.57244873]
[121.11389923 77.48589325]
[128.76992798 88.82086182]
[130.77586365 102.35128784]
[126.73774719 115.41994476]
[117.44863892 125.46029663]
[104.73281097 130.50053406]
[103.36218262 145.43777466]
[101.99156189 160.37503052]
[116.50233459 164.32580566]
[130.10653687 170.73648071]
[142.39073181 179.41227722]
[152.98164368 190.08953857]
[161.55740356 202.44378662]
[167.85743713 216.09957886]
[171.69024658 230.64195251]
[172.93939209 245.62898254]
[171.56690979 260.60519409]
[167.61448669 275.11553955]
[161.20225525 288.71899414]
[152.52507019 301.00222778]
[141.84660339 311.59191895]
[129.49139404 320.16629028]
[115.83487701 326.46475220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 87]
[20 86]
[21 85]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
] def

init

% Start Annotations
19 87 0.0 0.2 colorpair
20 86 0.0 1 colorpair
21 85 0.16 1 colorpair
26 79 0.0 1 colorpair
27 78 0.0 1 colorpair
28 77 0.0 0.2 colorpair
29 76 0.0 0.2 colorpair
30 75 0.0 0.2 colorpair
31 74 0.0 1 colorpair
32 73 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 87 2 gmark
21 cmark
28 77 2 gmark
29 76 2 gmark
30 75 2 gmark

% End Annotations
showpage
end
%%EOF
