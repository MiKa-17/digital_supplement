%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:47:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACA_AAAAAUCCAUAUGGUAUACAGGCAUAGAGAUA_GCCUCAC__UUCGAUUAAUCACCAGG_UGGGGCGUGACUCAGUAUGCCAAUUG___AUAAAGAAAGGAAACAAACAGGCCCAAGCACC_________________________\
) } def
/len { sequence length } bind def

/coor [
[231.88945007 159.53044128]
[240.73075867 147.41304016]
[251.22407532 136.69435120]
[263.15087891 127.59758759]
[276.27194214 120.30796814]
[261.32183838 119.08532715]
[246.37174988 117.86268616]
[231.42166138 116.64005280]
[216.47157288 115.41741180]
[201.52148438 114.19477081]
[186.57139587 112.97212982]
[171.60961914 111.90204620]
[156.63769531 110.98461914]
[141.66577148 110.06719208]
[126.69385529 109.14977264]
[111.72193909 108.23234558]
[99.12392426 114.29712677]
[87.36063385 106.73957062]
[72.38871765 105.82215118]
[57.41679764 104.90472412]
[42.44488144 103.98729706]
[24.89169121 113.81848907]
[9.18896389 102.59552765]
[-5.80791521 102.28955078]
[-20.80479431 101.98357391]
[-35.80167389 101.67758942]
[-40.47645569 104.26026154]
[-45.19716644 104.70476532]
[-49.12775803 103.36150360]
[-51.69882965 100.86613464]
[-66.64891815 99.64349365]
[-81.59900665 98.42086029]
[-96.54909515 97.19821930]
[-111.49918365 95.97557831]
[-126.44927216 94.75293732]
[-141.39936829 93.53029633]
[-156.34945679 92.30766296]
[-168.23477173 102.72470093]
[-183.99922180 101.60311127]
[-194.29000854 89.60831451]
[-193.00181580 73.85661316]
[-180.89889526 63.69321060]
[-165.16168213 65.14787292]
[-155.12681580 77.35757446]
[-140.17672729 78.58020782]
[-125.22663879 79.80284882]
[-110.27655029 81.02548981]
[-95.32646179 82.24813080]
[-80.37636566 83.47077179]
[-65.42627716 84.69340515]
[-50.47619247 85.91604614]
[-35.49569702 86.68070984]
[-20.49881554 86.98669434]
[-5.50193739 87.29267120]
[9.49494171 87.59864807]
[16.25581169 79.83905792]
[26.39247894 77.05477142]
[36.58711624 80.40956116]
[43.36230469 89.01538086]
[58.33422470 89.93280792]
[73.30614471 90.85022736]
[88.27806091 91.76765442]
[100.87607574 85.70287323]
[112.63936615 93.26042938]
[127.61128235 94.17784882]
[142.58320618 95.09527588]
[157.55511475 96.01270294]
[172.52703857 96.93013000]
[181.34495544 94.31999969]
[187.79403687 98.02204132]
[202.74412537 99.24468231]
[217.69421387 100.46732330]
[232.64430237 101.68996429]
[247.59439087 102.91259766]
[262.54446411 104.13523865]
[277.49456787 105.35787964]
[282.32885742 102.49093628]
[287.53189087 101.96018219]
[298.66540527 91.90807343]
[309.79891968 81.85596466]
[320.93243408 71.80384827]
[332.06591797 61.75173950]
[343.19943237 51.69963074]
[354.33294678 41.64752197]
[365.46646118 31.59541130]
[358.32785034 18.31747818]
[354.57495117 3.71681881]
[354.42599487 -11.35770416]
[357.88961792 -26.02967834]
[364.76443481 -39.44609070]
[374.65078735 -50.82693481]
[386.97387695 -59.51054001]
[401.01724243 -64.99205017]
[415.96444702 -66.95278168]
[430.94647217 -65.27873993]
[445.09228516 -60.06724930]
[457.57943726 -51.62129974]
[467.68197632 -40.43192673]
[474.81256104 -27.14966774]
[478.55661011 -12.54673672]
[478.69641113 2.52787423]
[475.22390747 17.19774437]
[468.34094238 30.60998917]
[458.44772339 41.98483658]
[446.11935425 50.66096878]
[432.07266235 56.13396454]
[417.12426758 58.08563232]
[402.14328003 56.40250778]
[388.00061035 51.18244171]
[375.51858521 42.72892380]
[364.38507080 52.78103256]
[353.25155640 62.83314514]
[342.11804199 72.88525391]
[330.98452759 82.93736267]
[319.85101318 92.98947144]
[308.71749878 103.04158020]
[297.58398438 113.09369659]
[312.42498779 110.91533661]
[327.42495728 110.89574432]
[342.27157593 113.03533936]
[356.65567017 117.28955078]
[370.27764893 123.56979370]
[382.85388184 131.74526978]
[394.12243652 141.64575195]
[403.84869385 153.06504822]
[411.83004761 165.76535034]
[417.90032959 179.48219299]
[421.93313599 193.92991638]
[423.84445190 208.80764771]
[423.59448242 223.80555725]
[421.18844604 238.61132812]
[416.67642212 252.91664124]
[410.15240479 266.42358398]
[401.75225830 278.85086060]
[391.65087891 289.93969727]
[380.05865479 299.45916748]
[367.21697998 307.21099854]
[353.39328003 313.03381348]
[338.87542725 316.80633545]
[323.96572876 318.44998169]
[308.97473145 317.93057251]
[294.21459961 315.25885010]
[279.99267578 310.49050903]
[266.60516357 303.72482300]
[254.33082581 295.10272217]
[243.42530823 284.80371094]
[234.11569214 273.04226685]
[226.59585571 260.06338501]
[221.02238464 246.13726807]
[217.51136780 231.55395508]
[216.13591003 216.61715698]
[216.92463684 201.63790894]
[219.86116028 186.92816162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[18 62]
[19 61]
[20 60]
[21 59]
[23 55]
[24 54]
[25 53]
[26 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
] def

init

% Start Annotations
5 76 0.16 1 colorpair
6 75 0.0 1 colorpair
7 74 0.0 0.6 colorpair
8 73 0.0 0.6 colorpair
9 72 0.0 0.6 colorpair
10 71 0.16 1 colorpair
11 70 0.0 0.6 colorpair
12 68 0.0 1 colorpair
13 67 0.0 0.6 colorpair
14 66 0.0 1 colorpair
15 65 0.16 1 colorpair
16 64 0.16 1 colorpair
18 62 0.16 1 colorpair
19 61 0.0 1 colorpair
20 60 0.0 0.6 colorpair
21 59 0.0 1 colorpair
23 55 0.16 1 colorpair
24 54 0.0 1 colorpair
25 53 0.16 1 colorpair
26 52 0.0 0.6 colorpair
30 51 0.0 0.6 colorpair
31 50 0.0 1 colorpair
32 49 0.0 0.6 colorpair
33 48 0.0 0.6 colorpair
34 47 0.0 1 colorpair
35 46 0.0 0.6 colorpair
36 45 0.0 1 colorpair
37 44 0.16 1 colorpair
78 117 0.16 1 colorpair
79 116 0.0 1 colorpair
80 115 0.0 0.6 colorpair
81 114 0.16 1 colorpair
82 113 0.0 0.6 colorpair
83 112 0.0 1 colorpair
84 111 0.0 0.6 colorpair
85 110 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
5 cmark
76 cmark
7 74 1 gmark
8 73 1 gmark
9 72 1 gmark
10 cmark
71 cmark
11 70 1 gmark
13 67 1 gmark
15 cmark
16 cmark
64 cmark
18 cmark
62 cmark
20 60 1 gmark
23 cmark
25 cmark
53 cmark
26 52 1 gmark
30 51 1 gmark
32 49 1 gmark
33 48 1 gmark
35 46 1 gmark
37 cmark
78 cmark
80 115 1 gmark
81 cmark
114 cmark
82 113 1 gmark
84 111 1 gmark

% End Annotations
showpage
end
%%EOF
