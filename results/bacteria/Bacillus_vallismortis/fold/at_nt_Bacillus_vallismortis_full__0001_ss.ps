%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:08:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAGUAAGAACUGUUAAUGAGAUAAGGAAAGCAACUAAGAUACCCACCUUCUCAAGCACUAUGUACACCUCCUUUCCUAUGACUUUAUUAUAACACAUUU\
) } def
/len { sequence length } bind def

/coor [
[47.22988510 385.31079102]
[39.72988510 398.30117798]
[32.22988510 411.29156494]
[24.72988701 424.28195190]
[17.22988701 437.27233887]
[9.72988701 450.26269531]
[10.27097225 466.65292358]
[-3.79388332 475.08572388]
[-17.99596214 466.88613892]
[-17.72538185 450.48922729]
[-3.26049423 442.76269531]
[4.23950577 429.77233887]
[11.73950577 416.78195190]
[19.23950577 403.79156494]
[26.73950577 390.80117798]
[34.23950577 377.81079102]
[19.52623367 364.30773926]
[8.64237595 347.55334473]
[2.28003860 328.60485840]
[0.84583551 308.65939331]
[4.43490124 288.97808838]
[12.82459736 270.80661011]
[25.48831749 255.29606628]
[41.62853622 243.43032837]
[60.22703934 235.96343994]
[80.10915375 233.37179565]
[81.49317932 218.43577576]
[82.87720490 203.49977112]
[84.26123047 188.56375122]
[85.64525604 173.62774658]
[87.02928162 158.69172668]
[88.41330719 143.75572205]
[75.40830994 138.00082397]
[64.83087921 128.49468994]
[57.72517014 116.17569733]
[54.79262161 102.25991821]
[56.32271957 88.12104797]
[62.16441727 75.15481567]
[71.74105835 64.64117432]
[84.10727692 57.61797714]
[98.04235077 54.77852249]
[99.88567352 39.89221573]
[101.72900391 25.00590706]
[88.97293091 16.69663239]
[81.12153625 3.72579646]
[79.68627167 -11.30617619]
[84.89849091 -25.41269112]
[95.67414093 -35.81436157]
[109.83872986 -40.48661041]
[111.68205261 -55.37291718]
[113.52538300 -70.25922394]
[109.47131348 -86.72132874]
[124.16779327 -95.17412567]
[136.35864258 -83.39196014]
[128.41168213 -68.41590118]
[126.56836700 -53.52959442]
[124.72503662 -38.64328766]
[137.32218933 -30.65721703]
[145.23527527 -17.94137764]
[146.84928894 -2.98959112]
[141.79087830 11.23828888]
[131.01284790 21.90230179]
[116.61531067 26.84923172]
[114.77198792 41.73553848]
[112.92865753 56.62184525]
[126.91853333 63.61034393]
[137.69528198 74.94246674]
[143.97256470 89.26557159]
[145.00108337 104.86998749]
[140.65808105 119.89309692]
[131.46194458 132.54167175]
[118.51036835 141.30593872]
[103.34931946 145.13973999]
[101.96529388 160.07575989]
[100.58126831 175.01176453]
[99.19724274 189.94778442]
[97.81321716 204.88378906]
[96.42919159 219.81980896]
[95.04516602 234.75581360]
[105.90562439 237.62632751]
[116.25299835 241.99378967]
[125.88213348 247.77098083]
[134.60220337 254.84275818]
[142.24050903 263.06826782]
[148.64587402 272.28390503]
[153.69163513 282.30639648]
[157.27816772 292.93655396]
[159.33483887 303.96319580]
[159.82141113 315.16735840]
[158.72879028 326.32666016]
[156.07925415 337.21963501]
[151.92594910 347.63024902]
[146.35188293 357.35208130]
[139.46815491 366.19244385]
[131.41186523 373.97622681]
[122.34333801 380.54937744]
[112.44289398 385.78192139]
[101.90730286 389.57046509]
[90.94589233 391.84042358]
[79.77632904 392.54724121]
[68.62033844 391.67755127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[41 65]
[42 64]
[43 63]
[49 57]
[50 56]
[51 55]
] def

init

% Start Annotations
1 16 0.0 1 colorpair
2 15 0.0 1 colorpair
3 14 0.0 1 colorpair
4 13 0.0 1 colorpair
5 12 0.0 1 colorpair
6 11 0.0 1 colorpair
26 79 0.0 1 colorpair
27 78 0.0 1 colorpair
28 77 0.0 1 colorpair
29 76 0.0 1 colorpair
30 75 0.0 1 colorpair
31 74 0.0 1 colorpair
32 73 0.0 1 colorpair
41 65 0.0 1 colorpair
42 64 0.0 1 colorpair
43 63 0.0 1 colorpair
49 57 0.0 1 colorpair
50 56 0.0 1 colorpair
51 55 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
