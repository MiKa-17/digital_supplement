%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAUUAAAACCGUGAUAGGAAUAAGGAAAGCAAUUGUUAUACCCACUUUCUCAAGCACUCUGUUCACCUCCUUUCCUAUAACUCUAUUAUAGCACAUUU_\
) } def
/len { sequence length } bind def

/coor [
[74.77892303 506.91970825]
[59.76672745 505.54220581]
[45.52064896 500.61141968]
[32.86893463 492.41400146]
[22.54713821 481.42654419]
[15.15535545 468.28787231]
[11.12333298 453.76181030]
[10.68548870 438.69293213]
[13.86727810 423.95727539]
[20.48371696 410.41156006]
[30.15013313 398.84332275]
[42.30453491 389.92514038]
[56.24028015 384.17550659]
[71.14716339 381.92864990]
[72.51779175 366.99142456]
[73.88841248 352.05416870]
[75.25904083 337.11691284]
[76.62966919 322.17965698]
[78.00028992 307.24243164]
[79.37091827 292.30517578]
[80.74154663 277.36791992]
[67.36999512 268.43643188]
[60.24220657 253.91838074]
[61.36577225 237.69052124]
[70.53086090 224.13873291]
[85.34161377 216.97265625]
[86.25607300 202.00056458]
[87.17053986 187.02845764]
[88.08499908 172.05636597]
[88.99945831 157.08425903]
[89.91391754 142.11216736]
[90.82837677 127.14006042]
[78.51048279 118.94471741]
[71.92418671 105.69651794]
[72.82615662 90.92897034]
[80.97581482 78.58080292]
[94.19952393 71.94548035]
[95.11398315 56.97338104]
[80.92915344 51.80902481]
[68.78653717 42.86591721]
[59.66514206 30.87570572]
[54.29737473 16.81528854]
[53.11027145 1.82720089]
[56.19151688 -12.87320805]
[63.28303528 -26.09633636]
[73.80258179 -36.77458572]
[86.89152527 -44.04856491]
[101.48496246 -47.33624268]
[102.39942169 -62.30834198]
[103.31388092 -77.28044128]
[95.51514435 -91.70652008]
[104.33840942 -105.52976990]
[120.70705414 -104.53000641]
[127.78242493 -89.73571777]
[118.28598022 -76.36598206]
[117.37152100 -61.39388275]
[116.45706177 -46.42178345]
[130.54191589 -41.38250351]
[142.64831543 -32.56965637]
[151.79011536 -20.69053841]
[157.21965027 -6.70265532]
[158.48893738 8.26347446]
[155.48658752 22.99567986]
[148.44754028 36.29832077]
[137.93472290 47.08932114]
[124.79398346 54.48818207]
[110.08608246 57.88784027]
[109.17162323 72.85993958]
[121.48951721 81.05528259]
[128.07580566 94.30348206]
[127.17384338 109.07102966]
[119.02418518 121.41919708]
[105.80047607 128.05451965]
[104.88601685 143.02662659]
[103.97155762 157.99871826]
[103.05709839 172.97082520]
[102.14263916 187.94291687]
[101.22817993 202.91502380]
[100.31371307 217.88711548]
[112.43550110 225.05084229]
[120.21992493 236.70378113]
[122.17784882 250.51301575]
[117.97972107 263.74380493]
[108.50940704 273.80108643]
[95.67879486 278.73855591]
[94.30816650 293.67581177]
[92.93753815 308.61303711]
[91.56691742 323.55029297]
[90.19628906 338.48754883]
[88.82566071 353.42480469]
[87.45503998 368.36203003]
[86.08441162 383.29928589]
[100.33347321 388.22143555]
[112.99015808 396.41119385]
[123.31861115 407.39236450]
[130.71835327 420.52658081]
[134.75918579 435.05017090]
[135.20616150 450.11880493]
[132.03330994 464.85638428]
[125.42508698 478.40609741]
[115.76568604 489.98019409]
[103.61669159 498.90573120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 92]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[37 68]
[38 67]
[48 57]
[49 56]
[50 55]
] def

init

% Start Annotations
14 92 0.0 1 colorpair
15 91 0.0 1 colorpair
16 90 0.0 1 colorpair
17 89 0.0 1 colorpair
18 88 0.0 1 colorpair
19 87 0.0 1 colorpair
20 86 0.0 1 colorpair
21 85 0.0 1 colorpair
26 79 0.0 1 colorpair
27 78 0.0 1 colorpair
28 77 0.0 1 colorpair
29 76 0.0 1 colorpair
30 75 0.0 1 colorpair
31 74 0.0 1 colorpair
32 73 0.0 1 colorpair
37 68 0.0 1 colorpair
38 67 0.0 1 colorpair
48 57 0.0 1 colorpair
49 56 0.0 0.2 colorpair
50 55 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
49 56 2 gmark

% End Annotations
showpage
end
%%EOF
