%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:09:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________UAAAAAACUACGCUAAGC_______CUGUUGUGUGUCUGGCGAUAGCCAUCGUUAAAUUCAUUAUUCCCGGCACGC_UCUGCUUGCUGUCAAUCAACAAUGC___UCAAGACAGAAAGGCUAAAGCACC________________\
) } def
/len { sequence length } bind def

/coor [
[267.25747681 288.77282715]
[255.28468323 279.73052979]
[243.81898499 270.05331421]
[232.89402771 259.76953125]
[222.54183960 248.90936279]
[212.79280090 237.50466919]
[203.67549133 225.58888245]
[195.21667480 213.19699097]
[187.44113159 200.36531067]
[180.37170410 187.13148499]
[174.02909851 173.53434753]
[168.43193054 159.61375427]
[163.59661865 145.41056824]
[159.53735352 130.96641541]
[156.26602173 116.32369995]
[153.79223633 101.52534485]
[138.88534546 103.19402313]
[123.97844696 104.86269379]
[109.07155609 106.53137207]
[94.18233490 108.35102844]
[79.31232452 110.32147980]
[64.44230652 112.29193115]
[49.57229233 114.26238251]
[34.70227814 116.23284149]
[19.83226585 118.20329285]
[4.96225071 120.17374420]
[-9.90776348 122.14419556]
[-13.15188217 136.95133972]
[-21.26731873 149.75428772]
[-33.27409744 159.00701904]
[-47.72233963 163.59222412]
[-62.86734772 162.95622253]
[-76.88029480 157.17581177]
[-88.06903839 146.94898987]
[-95.08249664 133.51071167]
[-97.07374573 118.48371887]
[-93.80234528 103.68257904]
[-85.66333008 90.89460754]
[-73.63951874 81.66401672]
[-59.18285370 77.10543823]
[-44.03904343 77.76935577]
[-30.03677368 83.57558441]
[-18.86689377 93.82299805]
[-11.87821484 107.27417755]
[2.99179935 105.30372620]
[17.86181259 103.33327484]
[32.73182678 101.36282349]
[47.60184097 99.39237213]
[62.47185516 97.42192078]
[77.34187317 95.45146942]
[92.21188354 93.48101807]
[99.20048523 89.36272430]
[107.40287781 91.62448120]
[122.30977631 89.95580292]
[137.21667480 88.28712463]
[152.12356567 86.61844635]
[151.26406860 71.63938904]
[151.21678162 56.63576508]
[151.98184204 41.65158844]
[153.55702209 26.73080444]
[155.93768311 11.91718197]
[159.11683655 -2.74582815]
[163.08518982 -17.21521759]
[167.83106995 -31.44854355]
[173.34056091 -45.40405655]
[179.59751892 -59.04082489]
[186.58358765 -72.31884766]
[194.27825928 -85.19918060]
[202.65896606 -97.64403534]
[211.70115662 -109.61692047]
[221.37826538 -121.08271027]
[231.66194153 -132.00776672]
[242.52200317 -142.36006165]
[253.92660522 -152.10922241]
[265.84228516 -161.22665405]
[278.23410034 -169.68559265]
[291.06570435 -177.46125793]
[304.29946899 -184.53083801]
[317.89654541 -190.87356567]
[331.81707764 -196.47087097]
[346.02020264 -201.30633545]
[360.46432495 -205.36573792]
[375.10699463 -208.63722229]
[389.90533447 -211.11114502]
[404.81588745 -212.78028870]
[419.79495239 -213.63973999]
[434.79858398 -213.68696594]
[449.78274536 -212.92185974]
[464.70355225 -211.34663391]
[479.51715088 -208.96592712]
[494.18014526 -205.78671265]
[508.64953613 -201.81831360]
[522.88281250 -197.07238770]
[536.83831787 -191.56285095]
[550.47509766 -185.30584717]
[563.75305176 -178.31973267]
[576.63336182 -170.62501526]
[589.07818604 -162.24426270]
[601.05108643 -153.20204163]
[612.51684570 -143.52488708]
[623.44183350 -133.24118042]
[633.79412842 -122.38108063]
[643.54321289 -110.97644806]
[652.66064453 -99.06073761]
[661.11950684 -86.66889191]
[668.89514160 -73.83726501]
[675.96466064 -60.60348892]
[682.30737305 -47.00638962]
[687.90460205 -33.08584213]
[692.74005127 -18.88267899]
[696.79937744 -4.43856335]
[700.07080078 10.20413876]
[702.54467773 25.00247765]
[704.21380615 39.91304779]
[705.07318115 54.89211273]
[705.12036133 69.89573669]
[704.35522461 84.87991333]
[702.77990723 99.80068207]
[700.39916992 114.61428833]
[697.21990967 129.27728271]
[693.25146484 143.74664307]
[688.50549316 157.97993469]
[682.99591064 171.93540955]
[676.73889160 185.57214355]
[669.75268555 198.85011292]
[662.05792236 211.73039246]
[653.67712402 224.17520142]
[644.63488770 236.14802551]
[634.95770264 247.61373901]
[624.67395020 258.53872681]
[613.81384277 268.89096069]
[602.40917969 278.64004517]
[590.49340820 287.75738525]
[578.10156250 296.21624756]
[565.26989746 303.99182129]
[552.03607178 311.06130981]
[538.43896484 317.40396118]
[524.51837158 323.00115967]
[510.31521606 327.83651733]
[495.87109375 331.89584351]
[481.22839355 335.16723633]
[466.43002319 337.64105225]
[451.51947021 339.31008911]
[436.54037476 340.16943359]
[421.53677368 340.21658325]
[406.55258179 339.45135498]
[391.63183594 337.87603760]
[376.81823730 335.49523926]
[362.15524292 332.31591797]
[347.68591309 328.34744263]
[333.45263672 323.60140991]
[319.49716187 318.09176636]
[305.86047363 311.83468628]
[292.58251953 304.84848022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 56]
[17 55]
[18 54]
[19 53]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
] def

init

% Start Annotations
16 56 0.16 0.2 colorpair
17 55 0.0 0.6 colorpair
18 54 0.0 0.6 colorpair
19 53 0.16 0.6 colorpair
20 51 0.0 0.2 colorpair
21 50 0.16 0.6 colorpair
22 49 0.16 0.6 colorpair
23 48 0.16 1 colorpair
24 47 0.32 0.6 colorpair
25 46 0.16 0.2 colorpair
26 45 0.32 1 colorpair
27 44 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
16 56 2 gmark
16 cmark
56 cmark
17 55 1 gmark
18 54 1 gmark
19 53 1 gmark
19 cmark
20 51 2 gmark
21 50 1 gmark
21 cmark
50 cmark
22 49 1 gmark
22 cmark
49 cmark
48 cmark
24 47 1 gmark
24 cmark
47 cmark
25 46 2 gmark
25 cmark
46 cmark
26 cmark
45 cmark
27 44 2 gmark

% End Annotations
showpage
end
%%EOF
