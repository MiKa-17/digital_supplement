%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:09:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___UGCUA_G_A_CGUC___AUAAU_UGUCUCACAAU_GCGA__________GAUUACUUGCGACUGGCUCUGCUAAUUUUGGUUAAGGAACACAGAGUGGGAGGCGGCGGC____________CAACC__________GCUAACCCCU__GGG_GGAA__CC_CGCUUC_GCGGGGCUU_UA_______________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50500488 92.07550049]
[62.52802277 91.22683716]
[47.58105469 89.95467377]
[32.67607880 88.26004028]
[17.82502365 86.14429474]
[3.03979182 83.60912323]
[-11.66777611 80.65656281]
[-26.28590012 77.28897858]
[-40.80287170 73.50907135]
[-55.20706177 69.31985474]
[-69.48693085 64.72470093]
[-83.63104248 59.72727966]
[-97.62807465 54.33160019]
[-111.46680450 48.54198074]
[-125.13615417 42.36305618]
[-138.62516785 35.79978180]
[-151.92304993 28.85741425]
[-165.01914978 21.54150963]
[-177.90296936 13.85793018]
[-190.56419373 5.81283140]
[-202.99267578 -2.58734393]
[-215.17846680 -11.33586693]
[-227.11180115 -20.42573166]
[-238.78312683 -29.84965324]
[-250.18309021 -39.60008621]
[-261.30258179 -49.66922379]
[-272.13262939 -60.04899597]
[-282.66464233 -70.73108673]
[-292.89013672 -81.70694733]
[-302.80093384 -92.96778107]
[-312.38909912 -104.50456238]
[-321.64691162 -116.30806732]
[-330.56701660 -128.36882019]
[-339.14224243 -140.67718506]
[-347.36572266 -153.22328186]
[-355.23086548 -165.99707031]
[-362.73138428 -178.98831177]
[-369.86126709 -192.18661499]
[-376.61477661 -205.58140564]
[-382.98654175 -219.16192627]
[-388.97140503 -232.91734314]
[-394.56463623 -246.83660889]
[-399.76174927 -260.90856934]
[-404.55853271 -275.12197876]
[-408.95117188 -289.46545410]
[-412.93615723 -303.92745972]
[-416.51028442 -318.49645996]
[-419.67068481 -333.16079712]
[-422.41485596 -347.90866089]
[-424.74057007 -362.72827148]
[-426.64596558 -377.60778809]
[-428.12951660 -392.53524780]
[-429.19006348 -407.49871826]
[-429.82675171 -422.48620605]
[-430.03903198 -437.48571777]
[-429.82675171 -452.48519897]
[-429.19009399 -467.47271729]
[-428.12957764 -482.43618774]
[-426.64602661 -497.36364746]
[-424.74063110 -512.24316406]
[-422.41494751 -527.06274414]
[-419.67077637 -541.81066895]
[-416.51040649 -556.47497559]
[-412.93627930 -571.04394531]
[-408.95132446 -585.50598145]
[-404.55868530 -599.84942627]
[-399.76190186 -614.06286621]
[-394.56481934 -628.13482666]
[-388.97161865 -642.05413818]
[-382.98672485 -655.80950928]
[-376.61499023 -669.39007568]
[-369.86148071 -682.78485107]
[-362.73162842 -695.98315430]
[-355.23114014 -708.97442627]
[-347.36599731 -721.74822998]
[-339.14254761 -734.29431152]
[-330.56732178 -746.60266113]
[-321.64721680 -758.66345215]
[-312.38940430 -770.46697998]
[-302.80126953 -782.00378418]
[-292.89047241 -793.26458740]
[-282.66500854 -804.24047852]
[-272.13299561 -814.92254639]
[-261.30294800 -825.30236816]
[-250.18347168 -835.37152100]
[-238.78352356 -845.12194824]
[-227.11219788 -854.54589844]
[-215.17886353 -863.63574219]
[-202.99308777 -872.38427734]
[-190.56460571 -880.78448486]
[-177.90339661 -888.82958984]
[-165.01959229 -896.51318359]
[-151.92349243 -903.82910156]
[-138.62562561 -910.77148438]
[-125.13661194 -917.33477783]
[-111.46726990 -923.51367188]
[-97.62854004 -929.30334473]
[-83.63151550 -934.69903564]
[-69.48741150 -939.69647217]
[-55.20754242 -944.29162598]
[-40.80335617 -948.48083496]
[-26.28638840 -952.26080322]
[-11.66826820 -955.62835693]
[3.03929734 -958.58093262]
[17.82452774 -961.11614990]
[32.67557907 -963.23187256]
[47.58055496 -964.92657471]
[62.52751923 -966.19873047]
[77.50450134 -967.04742432]
[92.49949646 -967.47192383]
[107.50050354 -967.47192383]
[122.49549866 -967.04742432]
[137.47247314 -966.19873047]
[152.41944885 -964.92657471]
[167.32441711 -963.23187256]
[182.17547607 -961.11614990]
[196.96070862 -958.58093262]
[211.66827393 -955.62835693]
[226.28639221 -952.26080322]
[240.80335999 -948.48083496]
[255.20753479 -944.29162598]
[269.48739624 -939.69647217]
[283.63153076 -934.69903564]
[297.62854004 -929.30334473]
[311.46725464 -923.51367188]
[325.13659668 -917.33477783]
[338.62561035 -910.77148438]
[351.92349243 -903.82910156]
[365.01959229 -896.51318359]
[377.90341187 -888.82958984]
[390.56460571 -880.78448486]
[402.99310303 -872.38427734]
[415.17886353 -863.63574219]
[427.11221313 -854.54589844]
[438.78350830 -845.12194824]
[450.18347168 -835.37152100]
[461.30294800 -825.30236816]
[472.13299561 -814.92254639]
[482.66500854 -804.24047852]
[492.89047241 -793.26458740]
[502.80126953 -782.00378418]
[512.38940430 -770.46697998]
[521.64721680 -758.66345215]
[530.56732178 -746.60266113]
[539.14251709 -734.29431152]
[547.36602783 -721.74822998]
[555.23114014 -708.97442627]
[562.73162842 -695.98315430]
[569.86151123 -682.78485107]
[576.61499023 -669.39007568]
[582.98675537 -655.80950928]
[588.97161865 -642.05413818]
[594.56481934 -628.13482666]
[599.76190186 -614.06286621]
[604.55865479 -599.84942627]
[608.95129395 -585.50598145]
[612.93627930 -571.04394531]
[616.51037598 -556.47497559]
[619.67077637 -541.81066895]
[622.41491699 -527.06274414]
[624.74066162 -512.24316406]
[626.64599609 -497.36364746]
[628.12957764 -482.43618774]
[629.19012451 -467.47271729]
[629.82678223 -452.48519897]
[630.03900146 -437.48571777]
[629.82672119 -422.48620605]
[629.19006348 -407.49871826]
[628.12951660 -392.53524780]
[626.64593506 -377.60778809]
[624.74053955 -362.72827148]
[622.41485596 -347.90866089]
[619.67071533 -333.16079712]
[616.51025391 -318.49645996]
[612.93615723 -303.92745972]
[608.95117188 -289.46545410]
[604.55853271 -275.12197876]
[599.76171875 -260.90856934]
[594.56463623 -246.83660889]
[588.97143555 -232.91734314]
[582.98651123 -219.16192627]
[576.61474609 -205.58140564]
[569.86126709 -192.18661499]
[562.73138428 -178.98831177]
[555.23089600 -165.99707031]
[547.36572266 -153.22328186]
[539.14227295 -140.67718506]
[530.56701660 -128.36882019]
[521.64691162 -116.30806732]
[512.38909912 -104.50456238]
[502.80093384 -92.96778107]
[492.89013672 -81.70694733]
[482.66464233 -70.73108673]
[472.13262939 -60.04899597]
[461.30258179 -49.66922379]
[450.18310547 -39.60008621]
[438.78314209 -29.84965324]
[427.11181641 -20.42573166]
[415.17846680 -11.33586693]
[402.99267578 -2.58734393]
[390.56417847 5.81283140]
[377.90295410 13.85793018]
[365.01913452 21.54150963]
[351.92306519 28.85741425]
[338.62518311 35.79978180]
[325.13613892 42.36305618]
[311.46679688 48.54198074]
[297.62808228 54.33160019]
[283.63104248 59.72727966]
[269.48693848 64.72470093]
[255.20706177 69.31985474]
[240.80287170 73.50907135]
[226.28590393 77.28897858]
[211.66777039 80.65656281]
[196.96020508 83.60912323]
[182.17497253 86.14429474]
[167.32392883 88.26004028]
[152.41894531 89.95467377]
[137.47198486 91.22683716]
[122.49499512 92.07550049]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
