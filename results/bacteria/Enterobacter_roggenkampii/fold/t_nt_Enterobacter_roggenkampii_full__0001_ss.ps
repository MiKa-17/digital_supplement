%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:09:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________________AUGAGC_________GUAGUGGAUAUGGUGAUACUUAUCCUCAAACUCAUUGUUGCAGUACUGCAACUGCUUGAUGCUGUCCUGAAAUGC___________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51039124 91.88813019]
[62.55820847 90.66535950]
[47.66835022 88.83373260]
[32.86558914 86.39628601]
[18.17456818 83.35708618]
[3.61973834 79.72119141]
[-10.77467632 75.49465179]
[-24.98471642 70.68450165]
[-38.98673248 65.29874420]
[-52.75741959 59.34634781]
[-66.27385712 52.83721542]
[-79.51354218 45.78218460]
[-92.45444489 38.19299316]
[-105.07502747 30.08227921]
[-117.35428619 21.46353722]
[-129.27177429 12.35111523]
[-140.80766296 2.76017761]
[-151.94274902 -7.29331112]
[-162.65850830 -17.79261780]
[-172.93708801 -28.72026825]
[-182.76139832 -40.05807495]
[-192.11506653 -51.78716660]
[-200.98254395 -63.88801956]
[-209.34907532 -76.34049225]
[-217.20071411 -89.12386322]
[-224.52439880 -102.21685028]
[-231.30795288 -115.59767151]
[-237.54006958 -129.24404907]
[-243.21038818 -143.13325500]
[-248.30946350 -157.24220276]
[-252.82881165 -171.54739380]
[-256.76092529 -186.02500916]
[-260.09921265 -200.65095520]
[-262.83816528 -215.40090942]
[-264.97320557 -230.25030518]
[-266.50079346 -245.17442322]
[-267.41836548 -260.14843750]
[-267.72439575 -275.14739990]
[-267.41839600 -290.14636230]
[-266.50088501 -305.12039185]
[-264.97332764 -320.04449463]
[-262.83834839 -334.89389038]
[-260.09942627 -349.64385986]
[-256.76116943 -364.26980591]
[-252.82910156 -378.74743652]
[-248.30979919 -393.05264282]
[-243.21076965 -407.16159058]
[-237.54048157 -421.05084229]
[-231.30841064 -434.69723511]
[-224.52490234 -448.07806396]
[-217.20124817 -461.17108154]
[-209.34963989 -473.95446777]
[-200.98315430 -486.40695190]
[-192.11570740 -498.50784302]
[-182.76206970 -510.23696899]
[-172.93778992 -521.57476807]
[-162.65924072 -532.50244141]
[-151.94351196 -543.00183105]
[-140.80845642 -553.05535889]
[-129.27259827 -562.64630127]
[-117.35513306 -571.75872803]
[-105.07589722 -580.37756348]
[-92.45533752 -588.48828125]
[-79.51445770 -596.07751465]
[-66.27478790 -603.13256836]
[-52.75836945 -609.64172363]
[-38.98770142 -615.59417725]
[-24.98570251 -620.97998047]
[-10.77567482 -625.79016113]
[3.61872792 -630.01678467]
[18.17354774 -633.65270996]
[32.86455917 -636.69195557]
[47.66731262 -639.12939453]
[62.55716705 -640.96112061]
[77.50934601 -642.18389893]
[92.49895477 -642.79583740]
[107.50104523 -642.79583740]
[122.49065399 -642.18389893]
[137.44282532 -640.96112061]
[152.33268738 -639.12939453]
[167.13543701 -636.69195557]
[181.82644653 -633.65270996]
[196.38127136 -630.01678467]
[210.77568054 -625.79016113]
[224.98570251 -620.97998047]
[238.98770142 -615.59417725]
[252.75837708 -609.64172363]
[266.27478027 -603.13256836]
[279.51446533 -596.07751465]
[292.45535278 -588.48828125]
[305.07589722 -580.37756348]
[317.35513306 -571.75872803]
[329.27258301 -562.64630127]
[340.80847168 -553.05535889]
[351.94351196 -543.00183105]
[362.65924072 -532.50244141]
[372.93780518 -521.57476807]
[382.76205444 -510.23696899]
[392.11572266 -498.50784302]
[400.98315430 -486.40695190]
[409.34963989 -473.95446777]
[417.20123291 -461.17108154]
[424.52490234 -448.07806396]
[431.30841064 -434.69723511]
[437.54049683 -421.05084229]
[443.21075439 -407.16159058]
[448.30981445 -393.05264282]
[452.82910156 -378.74743652]
[456.76116943 -364.26980591]
[460.09942627 -349.64385986]
[462.83834839 -334.89389038]
[464.97332764 -320.04449463]
[466.50088501 -305.12039185]
[467.41839600 -290.14636230]
[467.72439575 -275.14739990]
[467.41836548 -260.14843750]
[466.50079346 -245.17442322]
[464.97320557 -230.25030518]
[462.83816528 -215.40090942]
[460.09921265 -200.65095520]
[456.76092529 -186.02500916]
[452.82882690 -171.54739380]
[448.30947876 -157.24220276]
[443.21038818 -143.13325500]
[437.54006958 -129.24404907]
[431.30795288 -115.59767151]
[424.52441406 -102.21685028]
[417.20071411 -89.12386322]
[409.34906006 -76.34049225]
[400.98254395 -63.88801956]
[392.11508179 -51.78716660]
[382.76138306 -40.05807495]
[372.93710327 -28.72026825]
[362.65850830 -17.79261780]
[351.94274902 -7.29331112]
[340.80767822 2.76017761]
[329.27178955 12.35111523]
[317.35427856 21.46353722]
[305.07504272 30.08227921]
[292.45443726 38.19299316]
[279.51354980 45.78218460]
[266.27386475 52.83721542]
[252.75741577 59.34634781]
[238.98674011 65.29874420]
[224.98471069 70.68450165]
[210.77467346 75.49465179]
[196.38026428 79.72119141]
[181.82542419 83.35708618]
[167.13441467 86.39628601]
[152.33164978 88.83373260]
[137.44178772 90.66535950]
[122.48960876 91.88813019]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
