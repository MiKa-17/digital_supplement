%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 18:59:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUACGCUGAUUA_UGUUCAGUCUU_GAGAGGGCCUCGUUGGUUAAUUGAA__AUUGACCUUCGGGGCUU__UCUUCUUUCUGCCA_GCACAAUAACGGAAG___CUCUGCCGAUAGCUGGAGGCAAAAA__GCCUCAAGCGCC______\
) } def
/len { sequence length } bind def

/coor [
[325.69671631 237.93937683]
[309.49206543 235.44023132]
[293.44842529 232.05743408]
[277.61401367 227.80110168]
[262.03631592 222.68400574]
[246.76211548 216.72148132]
[231.83723450 209.93141174]
[217.30645752 202.33418274]
[203.21342468 193.95256042]
[189.60043335 184.81167603]
[176.50833130 174.93898010]
[163.97642517 164.36407471]
[152.04232788 153.11869812]
[140.74186707 141.23657227]
[130.10896301 128.75335693]
[120.17555237 115.70648956]
[110.97142792 102.13513947]
[98.20900726 110.01679230]
[85.52506256 118.02414703]
[72.84112549 126.03149414]
[60.15718460 134.03884888]
[54.53336334 141.30581665]
[47.14259720 142.07623291]
[41.91684341 157.24432373]
[26.75211143 162.47982788]
[13.28148842 153.76651001]
[11.83848286 137.78848267]
[23.53004456 126.80271912]
[39.38740921 129.23655701]
[52.14983368 121.35490417]
[64.83377075 113.34755707]
[77.51771545 105.34020233]
[90.20165253 97.33285522]
[94.82495117 90.67349243]
[103.21623993 89.29547119]
[96.49119568 76.82425690]
[90.36386871 64.04882050]
[84.84797668 50.99779129]
[79.95587158 37.70041656]
[75.69852448 24.18648911]
[72.08544922 10.48628902]
[69.12474823 -3.36948609]
[66.82305145 -17.34978867]
[65.18550110 -31.42329597]
[64.21576691 -45.55847549]
[63.91602325 -59.72365189]
[64.28692627 -73.88709259]
[65.32764435 -88.01705170]
[67.03584290 -102.08188629]
[69.40768433 -116.05007935]
[72.43785095 -129.89031982]
[76.11955261 -143.57162476]
[80.44452667 -157.06332397]
[85.40308380 -170.33518982]
[90.98411560 -183.35749817]
[97.17509460 -196.10105896]
[103.96216583 -208.53733826]
[111.33010101 -220.63845825]
[119.26239014 -232.37731934]
[127.74126434 -243.72761536]
[136.74772644 -254.66392517]
[146.26156616 -265.16174316]
[156.26148987 -275.19754028]
[166.72508240 -284.74887085]
[177.62889099 -293.79431152]
[188.94848633 -302.31359863]
[200.65849304 -310.28762817]
[212.73268127 -317.69857788]
[225.14399719 -324.52984619]
[237.86462402 -330.76611328]
[250.86605835 -336.39340210]
[264.11917114 -341.39910889]
[277.59423828 -345.77206421]
[291.26110840 -349.50244141]
[305.08914185 -352.58187866]
[319.04736328 -355.00350952]
[333.10449219 -356.76187134]
[347.22900391 -357.85308838]
[361.38928223 -358.27465820]
[375.55361938 -358.02569580]
[389.69021606 -357.10675049]
[403.76745605 -355.51983643]
[417.75378418 -353.26858521]
[431.61782837 -350.35800171]
[445.32858276 -346.79464722]
[458.85528564 -342.58645630]
[472.16766357 -337.74291992]
[485.23583984 -332.27484131]
[498.03060913 -326.19454956]
[510.52325439 -319.51559448]
[522.68579102 -312.25299072]
[534.49096680 -304.42300415]
[545.91241455 -296.04318237]
[556.92443848 -287.13229370]
[567.50238037 -277.71032715]
[577.62261963 -267.79840088]
[587.26239014 -257.41870117]
[596.40020752 -246.59451294]
[605.01550293 -235.35008240]
[613.08898926 -223.71060181]
[620.60260010 -211.70214844]
[627.53955078 -199.35165405]
[633.88427734 -186.68676758]
[639.62249756 -173.73588562]
[644.74145508 -160.52801514]
[649.22961426 -147.09275818]
[653.07702637 -133.46022034]
[656.27490234 -119.66093445]
[658.81628418 -105.72584534]
[660.69531250 -91.68614960]
[661.90789795 -77.57332611]
[662.45123291 -63.41898346]
[662.32421875 -49.25484085]
[661.52703857 -35.11262894]
[660.06152344 -21.02404022]
[657.93096924 -7.02063751]
[655.14019775 6.86620426]
[669.68499756 10.53336334]
[684.22979736 14.20052147]
[698.77465820 17.86768150]
[709.41516113 6.79182482]
[724.17254639 2.53553677]
[739.07708740 6.24373627]
[750.11950684 16.91893768]
[754.32952881 31.68956184]
[750.57464600 46.58238983]
[739.86486816 57.59132385]
[725.08111572 61.75501251]
[710.20013428 57.95344925]
[699.22479248 47.20923233]
[695.10748291 32.41250610]
[680.56268311 28.74534798]
[666.01782227 25.07818794]
[651.47302246 21.41102982]
[646.63940430 37.07528687]
[640.95526123 52.45146179]
[634.43750000 67.49340057]
[627.10583496 82.15596008]
[618.98211670 96.39513397]
[610.09075928 110.16817474]
[600.45843506 123.43374634]
[590.11407471 136.15202332]
[579.08868408 148.28483582]
[567.41534424 159.79577637]
[555.12902832 170.65025330]
[542.26666260 180.81571960]
[528.86682129 190.26164246]
[514.96972656 198.95965576]
[500.61706543 206.88365173]
[485.85189819 214.00984192]
[470.71853638 220.31681824]
[455.26239014 225.78565979]
[439.52981567 230.39991760]
[423.56805420 234.14573669]
[407.42501831 237.01188660]
[391.14910889 238.98971558]
[374.78918457 240.07330322]
[358.39434814 240.25936890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 35]
[18 33]
[19 32]
[20 31]
[21 30]
[23 29]
[117 134]
[118 133]
[119 132]
[120 131]
] def

init

% Start Annotations
18 33 0.32 1 colorpair
23 29 0.16 0.2 colorpair
117 134 0.16 0.6 colorpair
118 133 0.0 0.2 colorpair
119 132 0.32 0.2 colorpair
120 131 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
17 35 3 gmark
17 cmark
35 cmark
18 cmark
33 cmark
19 32 4 gmark
19 cmark
32 cmark
20 31 4 gmark
20 cmark
31 cmark
21 30 3 gmark
21 cmark
30 cmark
23 29 2 gmark
29 cmark
117 134 1 gmark
117 cmark
134 cmark
118 133 2 gmark
119 132 2 gmark
119 cmark
132 cmark
120 131 1 gmark
120 cmark

% End Annotations
showpage
end
%%EOF
