%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 18:59:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________A_AAUGCCGCUGAAUUCUCUUUUCUGGUGUUUAUUAAUGGUUUGUGUCACGAUAUUAAUUUUCACAUUACUGAAUCGGGAUACGCUAUGCGAGCUCAGCAUGAAGGACGGGAAUAAGGAGGUGGCGGCUUUGCUGGCUUGCGAAUCC_GGUAA____________\
) } def
/len { sequence length } bind def

/coor [
[91.15985107 510.52459717]
[76.17256927 509.92785645]
[61.21707535 508.78411865]
[46.31333160 507.09497070]
[31.48122215 504.86264038]
[16.74053574 502.09008789]
[2.11094356 498.78103638]
[-12.38803482 494.93988037]
[-26.73705482 490.57174683]
[-40.91696930 485.68249512]
[-54.90885544 480.27862549]
[-68.69404602 474.36734009]
[-82.25415039 467.95651245]
[-95.57107544 461.05474854]
[-108.62704468 453.67123413]
[-121.40464020 445.81579590]
[-133.88682556 437.49893188]
[-146.05691528 428.73175049]
[-157.89871216 419.52597046]
[-169.39637756 409.89379883]
[-180.53460693 399.84817505]
[-191.29849243 389.40243530]
[-201.67372131 378.57055664]
[-211.64640808 367.36697388]
[-221.20327759 355.80664062]
[-230.33155823 343.90499878]
[-239.01907349 331.67788696]
[-247.25424194 319.14166260]
[-255.02606201 306.31304932]
[-262.32418823 293.20913696]
[-269.13882446 279.84744263]
[-275.46096802 266.24575806]
[-281.28210449 252.42225647]
[-286.59448242 238.39537048]
[-291.39105225 224.18383789]
[-295.66537476 209.80659485]
[-299.41177368 195.28285217]
[-302.62521362 180.63195801]
[-305.30145264 165.87347412]
[-307.43688965 151.02711487]
[-309.02868652 136.11265564]
[-310.07470703 121.15000916]
[-310.57354736 106.15914917]
[-310.52459717 91.16006470]
[-309.92785645 76.17277527]
[-308.78414917 61.21728516]
[-307.09500122 46.31354141]
[-304.86267090 31.48142815]
[-302.09014893 16.74074173]
[-298.78109741 2.11114717]
[-294.93994141 -12.38783360]
[-290.57183838 -26.73685455]
[-285.68255615 -40.91677094]
[-280.27868652 -54.90866089]
[-274.36743164 -68.69385529]
[-267.95663452 -82.25395966]
[-261.05487061 -95.57088470]
[-253.67134094 -108.62686157]
[-245.81591797 -121.40446472]
[-237.49906921 -133.88664246]
[-228.73188782 -146.05674744]
[-219.52609253 -157.89854431]
[-209.89393616 -169.39622498]
[-199.84829712 -180.53445435]
[-189.40257263 -191.29835510]
[-178.57069397 -201.67356873]
[-167.36712646 -211.64627075]
[-155.80680847 -221.20314026]
[-143.90515137 -230.33143616]
[-131.67807007 -239.01896667]
[-119.14184570 -247.25413513]
[-106.31323242 -255.02595520]
[-93.20932770 -262.32406616]
[-79.84761810 -269.13873291]
[-66.24594879 -275.46087646]
[-52.42244720 -281.28201294]
[-38.39557266 -286.59442139]
[-24.18403625 -291.39099121]
[-9.80680084 -295.66531372]
[4.71695042 -299.41171265]
[19.36783791 -302.62518311]
[34.12631226 -305.30142212]
[48.97268295 -307.43685913]
[63.88713837 -309.02865601]
[78.84978485 -310.07467651]
[93.84064484 -310.57354736]
[108.83972931 -310.52459717]
[123.82701111 -309.92785645]
[138.78250122 -308.78417969]
[153.68624878 -307.09503174]
[168.51837158 -304.86270142]
[183.25904846 -302.09017944]
[197.88865662 -298.78112793]
[212.38763428 -294.94000244]
[226.73664856 -290.57189941]
[240.91658020 -285.68264771]
[246.32075500 -299.67532349]
[251.72492981 -313.66796875]
[251.79113770 -330.62179565]
[268.10073853 -335.25146484]
[277.06439209 -320.86087036]
[265.71762085 -308.26379395]
[260.31341553 -294.27111816]
[254.90924072 -280.27847290]
[268.69442749 -274.36715698]
[282.25451660 -267.95632935]
[295.57144165 -261.05456543]
[308.62741089 -253.67102051]
[321.40499878 -245.81556702]
[333.88717651 -237.49870300]
[346.05725098 -228.73150635]
[357.89904785 -219.52569580]
[369.39669800 -209.89352417]
[380.53491211 -199.84786987]
[391.29879761 -189.40213013]
[401.67401123 -178.57023621]
[411.64669800 -167.36665344]
[421.20355225 -155.80630493]
[430.33181763 -143.90464783]
[439.01931763 -131.67755127]
[447.25445557 -119.14131927]
[455.02627563 -106.31268311]
[462.32437134 -93.20877075]
[469.13903809 -79.84705353]
[475.46112061 -66.24536896]
[481.28225708 -52.42186356]
[486.59463501 -38.39498138]
[491.39117432 -24.18343735]
[495.66549683 -9.80619431]
[499.41186523 4.71756220]
[502.62530518 19.36845398]
[505.30151367 34.12693405]
[507.43695068 48.97330856]
[509.02871704 63.88776779]
[510.07470703 78.85041046]
[510.57357788 93.84127045]
[510.52456665 108.84035492]
[509.92782593 123.82764435]
[508.78411865 138.78312683]
[507.09494019 153.68687439]
[504.86260986 168.51898193]
[502.09005737 183.25967407]
[498.78097534 197.88926697]
[494.93981934 212.38822937]
[490.57168579 226.73725891]
[485.68243408 240.91716003]
[480.27853394 254.90904236]
[474.36724854 268.69424438]
[467.95642090 282.25433350]
[461.05465698 295.57125854]
[453.67111206 308.62722778]
[445.81567383 321.40481567]
[437.49880981 333.88699341]
[428.73162842 346.05709839]
[419.52581787 357.89886475]
[409.89367676 369.39654541]
[399.84802246 380.53475952]
[389.40228271 391.29864502]
[378.57040405 401.67385864]
[367.36682129 411.64654541]
[355.80648804 421.20339966]
[343.90481567 430.33169556]
[331.67773438 439.01919556]
[319.14147949 447.25436401]
[306.31286621 455.02618408]
[293.20895386 462.32427979]
[279.84722900 469.13894653]
[266.24557495 475.46102905]
[252.42205811 481.28216553]
[238.39517212 486.59457397]
[224.18363953 491.39111328]
[209.80639648 495.66543579]
[195.28263855 499.41180420]
[180.63174438 502.62527466]
[165.87327576 505.30148315]
[151.02690125 507.43692017]
[136.11244202 509.02868652]
[121.14979553 510.07470703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[96 104]
[97 103]
[98 102]
] def

init

% Start Annotations
96 104 0.0 1 colorpair
97 103 0.16 1 colorpair
98 102 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
103 cmark
98 cmark

% End Annotations
showpage
end
%%EOF
