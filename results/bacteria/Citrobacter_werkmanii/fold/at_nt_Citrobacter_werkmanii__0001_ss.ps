%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________________________________________________________________________________AGUCAUGAAGACUAUUCUCAUGAA_AUAAC_CAGUGUGAUGAGCGAUUUCCACAUAACACA_GCACUGACGUAUCCCCCU_________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50769043 91.97355652]
[62.54309464 90.92128754]
[47.62464142 89.34449768]
[32.77071762 87.24512482]
[17.99961853 84.62575531]
[3.32954383 81.48961639]
[-11.22143269 77.84057617]
[-25.63538551 73.68312073]
[-39.89455414 69.02237701]
[-53.98137665 63.86408615]
[-67.87849426 58.21460342]
[-81.56877899 52.08089066]
[-95.03537750 45.47050858]
[-108.26169586 38.39159012]
[-121.23143005 30.85286522]
[-133.92861938 22.86361885]
[-146.33760071 14.43369389]
[-158.44308472 5.57347584]
[-170.23017883 -3.70611930]
[-181.68435669 -13.39365959]
[-192.79148865 -23.47720909]
[-203.53790283 -33.94434738]
[-213.91036987 -44.78217316]
[-223.89608765 -55.97734070]
[-233.48277283 -67.51605988]
[-242.65861511 -79.38410187]
[-251.41229248 -91.56685638]
[-259.73303223 -104.04931641]
[-267.61059570 -116.81609344]
[-275.03524780 -129.85147095]
[-281.99786377 -143.13937378]
[-288.48983765 -156.66343689]
[-294.50323486 -170.40701294]
[-300.03057861 -184.35314941]
[-305.06509399 -198.48468018]
[-309.60055542 -212.78419495]
[-313.63140869 -227.23405457]
[-317.15267944 -241.81648254]
[-320.16000366 -256.51351929]
[-322.64968872 -271.30700684]
[-324.61868286 -286.17880249]
[-326.06451416 -301.11050415]
[-326.98547363 -316.08374023]
[-327.38037109 -331.08010864]
[-327.24874878 -346.08108521]
[-326.59075928 -361.06817627]
[-325.40719604 -376.02297974]
[-323.69952393 -390.92700195]
[-321.46987915 -405.76193237]
[-318.72097778 -420.50949097]
[-315.45620728 -435.15145874]
[-311.67959595 -449.66986084]
[-307.39581299 -464.04678345]
[-302.61010742 -478.26449585]
[-297.32836914 -492.30548096]
[-291.55715942 -506.15249634]
[-285.30352783 -519.78845215]
[-278.57522583 -533.19647217]
[-271.38049316 -546.36016846]
[-263.72824097 -559.26324463]
[-255.62786865 -571.88983154]
[-247.08935547 -584.22436523]
[-238.12324524 -596.25158691]
[-228.74055481 -607.95678711]
[-218.95286560 -619.32550049]
[-208.77223206 -630.34375000]
[-198.21118164 -640.99786377]
[-187.28274536 -651.27484131]
[-176.00036621 -661.16192627]
[-164.37796021 -670.64697266]
[-152.42984009 -679.71826172]
[-140.17073059 -688.36468506]
[-127.61573029 -696.57556152]
[-114.78031158 -704.34082031]
[-101.68028259 -711.65075684]
[-88.33177948 -718.49652100]
[-74.75125885 -724.86956787]
[-60.95544052 -730.76208496]
[-46.96132660 -736.16680908]
[-32.78615570 -741.07708740]
[-18.44739532 -745.48693848]
[-3.96270728 -749.39080811]
[10.65006256 -752.78393555]
[25.37291145 -755.66217041]
[40.18770218 -758.02191162]
[55.07617950 -759.86029053]
[70.02000427 -761.17504883]
[85.00076294 -761.96459961]
[100.00000000 -762.22784424]
[114.99923706 -761.96459961]
[129.97999573 -761.17504883]
[144.92382812 -759.86029053]
[159.81230164 -758.02191162]
[174.62709045 -755.66217041]
[189.34992981 -752.78393555]
[203.96270752 -749.39080811]
[218.44740295 -745.48693848]
[232.78616333 -741.07708740]
[246.96131897 -736.16680908]
[260.95544434 -730.76208496]
[274.75125122 -724.86956787]
[288.33178711 -718.49652100]
[301.68026733 -711.65075684]
[314.78030396 -704.34082031]
[327.61572266 -696.57556152]
[340.17074585 -688.36468506]
[352.42984009 -679.71826172]
[364.37796021 -670.64697266]
[376.00036621 -661.16192627]
[387.28274536 -651.27484131]
[398.21118164 -640.99786377]
[408.77221680 -630.34375000]
[418.95288086 -619.32550049]
[428.74057007 -607.95678711]
[438.12322998 -596.25158691]
[447.08935547 -584.22436523]
[455.62786865 -571.88983154]
[463.72824097 -559.26324463]
[471.38049316 -546.36016846]
[478.57522583 -533.19647217]
[485.30352783 -519.78845215]
[491.55715942 -506.15249634]
[497.32836914 -492.30548096]
[502.61010742 -478.26449585]
[507.39581299 -464.04678345]
[511.67959595 -449.66986084]
[515.45623779 -435.15145874]
[518.72094727 -420.50949097]
[521.46984863 -405.76193237]
[523.69952393 -390.92700195]
[525.40716553 -376.02297974]
[526.59075928 -361.06817627]
[527.24871826 -346.08108521]
[527.38037109 -331.08010864]
[526.98547363 -316.08374023]
[526.06451416 -301.11050415]
[524.61865234 -286.17880249]
[522.64965820 -271.30700684]
[520.15997314 -256.51351929]
[517.15264893 -241.81648254]
[513.63140869 -227.23405457]
[509.60055542 -212.78419495]
[505.06509399 -198.48468018]
[500.03057861 -184.35314941]
[494.50323486 -170.40701294]
[488.48983765 -156.66343689]
[481.99786377 -143.13937378]
[475.03524780 -129.85147095]
[467.61059570 -116.81609344]
[459.73303223 -104.04931641]
[451.41229248 -91.56685638]
[442.65859985 -79.38410187]
[433.48278809 -67.51605988]
[423.89608765 -55.97734070]
[413.91036987 -44.78217316]
[403.53790283 -33.94434738]
[392.79147339 -23.47720909]
[381.68435669 -13.39365959]
[370.23019409 -3.70611930]
[358.44308472 5.57347584]
[346.33758545 14.43369389]
[333.92861938 22.86361885]
[321.23144531 30.85286522]
[308.26168823 38.39159012]
[295.03536987 45.47050858]
[281.56878662 52.08089066]
[267.87847900 58.21460342]
[253.98136902 63.86408615]
[239.89456177 69.02237701]
[225.63539124 73.68312073]
[211.22143555 77.84057617]
[196.67045593 81.48961639]
[182.00038147 84.62575531]
[167.22927856 87.24512482]
[152.37535095 89.34449768]
[137.45690918 90.92128754]
[122.49230957 91.97355652]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
