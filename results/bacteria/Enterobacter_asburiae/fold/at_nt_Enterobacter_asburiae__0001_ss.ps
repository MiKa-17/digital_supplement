%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUG_UA_GC_UCGU_UU_AUUGU_U_G__UGACGAUAUUGAUCUCCACCUUGAUUACUUGAGGC_UAGCUGUACGAGAGUGUGUUAAGGGGUGAACAUCGGGAAGUCGCGGCUAAA_U_GCCU___________________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50491333 92.07929230]
[62.52752304 91.23818970]
[47.57961655 89.97736359]
[32.67295074 88.29779816]
[17.81925201 86.20082092]
[3.03021145 83.68807220]
[-11.68253899 80.76154327]
[-26.30742455 77.42352295]
[-40.83293533 73.67663574]
[-55.24765015 69.52384186]
[-69.54022217 64.96840668]
[-83.69940948 60.01390457]
[-97.71406555 54.66424179]
[-111.57318115 48.92362213]
[-125.26583099 42.79656601]
[-138.78126526 36.28789139]
[-152.10882568 29.40272141]
[-165.23805237 22.14646912]
[-178.15859985 14.52484798]
[-190.86030579 6.54385042]
[-203.33317566 -1.79024243]
[-215.56739807 -10.47087479]
[-227.55335999 -19.49121666]
[-239.28160095 -28.84416962]
[-250.74291992 -38.52238083]
[-261.92831421 -48.51822662]
[-272.82891846 -58.82385254]
[-283.43624878 -69.43114471]
[-293.74188232 -80.33176422]
[-303.73773193 -91.51712036]
[-313.41595459 -102.97843170]
[-322.76895142 -114.70667267]
[-331.78930664 -126.69261169]
[-340.46994019 -138.92681885]
[-348.80404663 -151.39968872]
[-356.78506470 -164.10137939]
[-364.40670776 -177.02191162]
[-371.66299438 -190.15112305]
[-378.54815674 -203.47868347]
[-385.05685425 -216.99411011]
[-391.18392944 -230.68675232]
[-396.92456055 -244.54585266]
[-402.27426147 -258.56051636]
[-407.22879028 -272.71969604]
[-411.78424072 -287.01223755]
[-415.93704224 -301.42697144]
[-419.68395996 -315.95245361]
[-423.02200317 -330.57733154]
[-425.94854736 -345.29010010]
[-428.46130371 -360.07913208]
[-430.55831909 -374.93283081]
[-432.23791504 -389.83947754]
[-433.49874878 -404.78738403]
[-434.33987427 -419.76477051]
[-434.76058960 -434.75985718]
[-434.76062012 -449.76086426]
[-434.33990479 -464.75595093]
[-433.49877930 -479.73333740]
[-432.23794556 -494.68124390]
[-430.55838013 -509.58789062]
[-428.46139526 -524.44158936]
[-425.94863892 -539.23065186]
[-423.02209473 -553.94335938]
[-419.68408203 -568.56829834]
[-415.93719482 -583.09381104]
[-411.78439331 -597.50848389]
[-407.22894287 -611.80108643]
[-402.27441406 -625.96026611]
[-396.92474365 -639.97491455]
[-391.18414307 -653.83398438]
[-385.05706787 -667.52667236]
[-378.54840088 -681.04211426]
[-371.66320801 -694.36962891]
[-364.40695190 -707.49890137]
[-356.78533936 -720.41943359]
[-348.80432129 -733.12109375]
[-340.47021484 -745.59399414]
[-331.78958130 -757.82818604]
[-322.76925659 -769.81414795]
[-313.41629028 -781.54241943]
[-303.73806763 -793.00372314]
[-293.74221802 -804.18908691]
[-283.43658447 -815.08972168]
[-272.82928467 -825.69702148]
[-261.92868042 -836.00268555]
[-250.74330139 -845.99853516]
[-239.28198242 -855.67675781]
[-227.55374146 -865.02972412]
[-215.56779480 -874.05004883]
[-203.33358765 -882.73071289]
[-190.86071777 -891.06481934]
[-178.15901184 -899.04583740]
[-165.23847961 -906.66741943]
[-152.10926819 -913.92370605]
[-138.78170776 -920.80889893]
[-125.26628113 -927.31756592]
[-111.57363129 -933.44464111]
[-97.71453094 -939.18530273]
[-83.69986725 -944.53497314]
[-69.54068756 -949.48944092]
[-55.24812317 -954.04492188]
[-40.83341217 -958.19775391]
[-26.30790329 -961.94464111]
[-11.68302250 -965.28265381]
[3.02972555 -968.20922852]
[17.81876373 -970.72198486]
[32.67245865 -972.81896973]
[47.57912445 -974.49853516]
[62.52703094 -975.75939941]
[77.50441742 -976.60046387]
[92.49950409 -977.02124023]
[107.50049591 -977.02124023]
[122.49558258 -976.60046387]
[137.47297668 -975.75939941]
[152.42088318 -974.49853516]
[167.32754517 -972.81896973]
[182.18122864 -970.72198486]
[196.97027588 -968.20922852]
[211.68302917 -965.28265381]
[226.30790710 -961.94464111]
[240.83341980 -958.19775391]
[255.24812317 -954.04492188]
[269.54067993 -949.48944092]
[283.69985962 -944.53497314]
[297.71453857 -939.18530273]
[311.57363892 -933.44464111]
[325.26629639 -927.31756592]
[338.78170776 -920.80889893]
[352.10925293 -913.92370605]
[365.23849487 -906.66741943]
[378.15902710 -899.04583740]
[390.86071777 -891.06481934]
[403.33358765 -882.73071289]
[415.56781006 -874.05004883]
[427.55374146 -865.02972412]
[439.28198242 -855.67675781]
[450.74328613 -845.99853516]
[461.92868042 -836.00268555]
[472.82928467 -825.69702148]
[483.43658447 -815.08972168]
[493.74221802 -804.18908691]
[503.73806763 -793.00372314]
[513.41625977 -781.54241943]
[522.76922607 -769.81414795]
[531.78961182 -757.82818604]
[540.47021484 -745.59399414]
[548.80432129 -733.12109375]
[556.78533936 -720.41943359]
[564.40698242 -707.49890137]
[571.66320801 -694.36962891]
[578.54840088 -681.04211426]
[585.05706787 -667.52667236]
[591.18414307 -653.83398438]
[596.92474365 -639.97491455]
[602.27441406 -625.96026611]
[607.22894287 -611.80108643]
[611.78436279 -597.50848389]
[615.93719482 -583.09381104]
[619.68408203 -568.56829834]
[623.02209473 -553.94335938]
[625.94866943 -539.23065186]
[628.46136475 -524.44158936]
[630.55834961 -509.58789062]
[632.23797607 -494.68124390]
[633.49877930 -479.73333740]
[634.33990479 -464.75595093]
[634.76062012 -449.76086426]
[634.76062012 -434.75985718]
[634.33984375 -419.76477051]
[633.49877930 -404.78738403]
[632.23791504 -389.83947754]
[630.55828857 -374.93283081]
[628.46130371 -360.07913208]
[625.94854736 -345.29010010]
[623.02197266 -330.57733154]
[619.68395996 -315.95245361]
[615.93707275 -301.42697144]
[611.78424072 -287.01223755]
[607.22875977 -272.71969604]
[602.27423096 -258.56051636]
[596.92456055 -244.54585266]
[591.18395996 -230.68675232]
[585.05688477 -216.99411011]
[578.54815674 -203.47868347]
[571.66296387 -190.15112305]
[564.40673828 -177.02191162]
[556.78509521 -164.10137939]
[548.80407715 -151.39968872]
[540.46997070 -138.92681885]
[531.78930664 -126.69261169]
[522.76892090 -114.70667267]
[513.41595459 -102.97843170]
[503.73773193 -91.51712036]
[493.74188232 -80.33176422]
[483.43624878 -69.43114471]
[472.82891846 -58.82385254]
[461.92831421 -48.51822662]
[450.74291992 -38.52238083]
[439.28161621 -28.84416962]
[427.55334473 -19.49121666]
[415.56741333 -10.47087479]
[403.33316040 -1.79024243]
[390.86029053 6.54385042]
[378.15859985 14.52484798]
[365.23803711 22.14646912]
[352.10882568 29.40272141]
[338.78125000 36.28789139]
[325.26583862 42.79656601]
[311.57318115 48.92362213]
[297.71408081 54.66424179]
[283.69940186 60.01390457]
[269.54022217 64.96840668]
[255.24765015 69.52384186]
[240.83293152 73.67663574]
[226.30741882 77.42352295]
[211.68254089 80.76154327]
[196.96978760 83.68807220]
[182.18074036 86.20082092]
[167.32705688 88.29779816]
[152.42037964 89.97736359]
[137.47247314 91.23818970]
[122.49508667 92.07929230]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
