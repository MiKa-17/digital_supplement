%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___AAGAGCCUAG___CUGGAUUUGGUAAGACUUAUCCU_U__UAGCCUCAGG_UUAAUGAAAUAUUGC__CAGUGCUUUAUGCUUUCUACAACACACU_____________A____CA_________G_C__AA__A__CU__A_C_C__\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51080322 91.87597656]
[62.56054306 90.62896729]
[47.67509842 88.76112366]
[32.88023376 86.27568817]
[18.20157051 83.17695618]
[3.66451311 79.47029877]
[-10.70576954 75.16212463]
[-24.88439941 70.25990295]
[-38.84683228 64.77210999]
[-52.56889343 58.70825195]
[-66.02683258 52.07882690]
[-79.19734192 44.89530945]
[-92.05763245 37.17013550]
[-104.58543396 28.91667747]
[-116.75905609 20.14922714]
[-128.55743408 10.88296032]
[-139.96012878 1.13391960]
[-150.94741821 -9.08101845]
[-161.50025940 -19.74416924]
[-171.60040283 -30.83707237]
[-181.23034668 -42.34052658]
[-190.37344360 -54.23461151]
[-199.01383972 -66.49874115]
[-207.13658142 -79.11168671]
[-214.72761536 -92.05160522]
[-221.77380371 -105.29609680]
[-228.26293945 -118.82224274]
[-234.18379211 -132.60661316]
[-239.52610779 -146.62535095]
[-244.28062439 -160.85418701]
[-248.43914795 -175.26849365]
[-251.99444580 -189.84330750]
[-254.94038391 -204.55339050]
[-257.27185059 -219.37330627]
[-258.98480225 -234.27735901]
[-260.07632446 -249.23977661]
[-260.54443359 -264.23464966]
[-260.38839722 -279.23602295]
[-259.60845947 -294.21792603]
[-258.20599365 -309.15438843]
[-256.18338013 -324.01959229]
[-253.54414368 -338.78781128]
[-250.29286194 -353.43344116]
[-246.43516541 -367.93115234]
[-241.97772217 -382.25582886]
[-236.92825317 -396.38269043]
[-231.29548645 -410.28726196]
[-225.08920288 -423.94549561]
[-218.32011414 -437.33374023]
[-210.99995422 -450.42880249]
[-203.14140320 -463.20800781]
[-194.75805664 -475.64926147]
[-185.86442566 -487.73101807]
[-176.47590637 -499.43234253]
[-166.60876465 -510.73300171]
[-156.28007507 -521.61340332]
[-145.50770569 -532.05474854]
[-134.31031799 -542.03894043]
[-122.70729828 -551.54870605]
[-110.71873474 -560.56750488]
[-98.36537170 -569.07983398]
[-85.66860199 -577.07092285]
[-72.65040588 -584.52691650]
[-59.33332062 -591.43493652]
[-45.74039841 -597.78302002]
[-31.89517403 -603.56011963]
[-17.82161331 -608.75628662]
[-3.54408050 -613.36254883]
[10.91270542 -617.37084961]
[25.52371979 -620.77435303]
[40.26366425 -623.56707764]
[55.10702515 -625.74420166]
[70.02810669 -627.30206299]
[85.00106812 -628.23779297]
[100.00000000 -628.54992676]
[114.99893188 -628.23779297]
[129.97189331 -627.30206299]
[144.89297485 -625.74420166]
[159.73632812 -623.56707764]
[174.47628784 -620.77435303]
[189.08729553 -617.37084961]
[203.54408264 -613.36254883]
[217.82160950 -608.75628662]
[231.89517212 -603.56011963]
[245.74040222 -597.78302002]
[259.33331299 -591.43493652]
[272.65042114 -584.52691650]
[285.66860962 -577.07092285]
[298.36538696 -569.07983398]
[310.71871948 -560.56750488]
[322.70730591 -551.54870605]
[334.31033325 -542.03894043]
[345.50769043 -532.05474854]
[356.28005981 -521.61340332]
[366.60876465 -510.73300171]
[376.47592163 -499.43234253]
[385.86444092 -487.73101807]
[394.75805664 -475.64926147]
[403.14141846 -463.20800781]
[410.99996948 -450.42880249]
[418.32012939 -437.33374023]
[425.08920288 -423.94549561]
[431.29550171 -410.28726196]
[436.92825317 -396.38269043]
[441.97772217 -382.25582886]
[446.43518066 -367.93115234]
[450.29287720 -353.43344116]
[453.54415894 -338.78781128]
[456.18338013 -324.01959229]
[458.20599365 -309.15438843]
[459.60845947 -294.21792603]
[460.38839722 -279.23602295]
[460.54443359 -264.23464966]
[460.07632446 -249.23977661]
[458.98480225 -234.27735901]
[457.27185059 -219.37330627]
[454.94039917 -204.55339050]
[451.99444580 -189.84330750]
[448.43914795 -175.26849365]
[444.28063965 -160.85418701]
[439.52609253 -146.62535095]
[434.18377686 -132.60661316]
[428.26293945 -118.82224274]
[421.77380371 -105.29609680]
[414.72763062 -92.05160522]
[407.13659668 -79.11168671]
[399.01382446 -66.49874115]
[390.37344360 -54.23461151]
[381.23034668 -42.34052658]
[371.60040283 -30.83707237]
[361.50027466 -19.74416924]
[350.94741821 -9.08101845]
[339.96014404 1.13391960]
[328.55743408 10.88296032]
[316.75906372 20.14922714]
[304.58541870 28.91667747]
[292.05761719 37.17013550]
[279.19735718 44.89530945]
[266.02682495 52.07882690]
[252.56889343 58.70825195]
[238.84683228 64.77210999]
[224.88439941 70.25990295]
[210.70576477 75.16212463]
[196.33547974 79.47029877]
[181.79843140 83.17695618]
[167.11976624 86.27568817]
[152.32490540 88.76112366]
[137.43945312 90.62896729]
[122.48919678 91.87597656]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
