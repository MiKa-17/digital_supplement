%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______________ACUAGCGUAGUGGAUAUGGUGAUACU__UAGCCUCAAACUCAUUGAUGAUGUAC__UGCAACUUCUUG_AUGCUGUCCCGAAAUUC__________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[32.27509689 429.72937012]
[17.65393066 426.38510132]
[3.19625497 422.39285278]
[-11.06922531 417.76049805]
[-25.11418915 412.49728394]
[-38.91074753 406.61361694]
[-52.43151474 400.12121582]
[-65.64964294 393.03295898]
[-78.53888702 385.36288452]
[-91.07366180 377.12625122]
[-103.22908020 368.33944702]
[-114.98100281 359.01983643]
[-126.30610657 349.18600464]
[-137.18190002 338.85742188]
[-147.58677673 328.05459595]
[-157.50010681 316.79901123]
[-166.90219116 305.11297607]
[-175.77436829 293.01971436]
[-184.09902954 280.54321289]
[-191.85963440 267.70828247]
[-199.04077148 254.54039001]
[-212.51663208 261.12832642]
[-225.99250793 267.71627808]
[-239.46836853 274.30422974]
[-246.01654053 288.95007324]
[-261.58523560 292.82238770]
[-274.23150635 282.95065308]
[-274.25421143 266.90759277]
[-261.63592529 257.00012207]
[-246.05632019 260.82836914]
[-232.58044434 254.24041748]
[-219.10458374 247.65246582]
[-205.62872314 241.06451416]
[-211.60929871 227.30969238]
[-216.97120667 213.30210876]
[-221.70379639 199.06958008]
[-225.79766846 184.64035034]
[-229.24472046 170.04307556]
[-232.03807068 155.30673218]
[-234.17219543 140.46058655]
[-235.64285278 125.53411102]
[-236.44711304 110.55693817]
[-236.58340454 95.55880737]
[-236.05143738 80.56949615]
[-234.85226440 65.61875916]
[-232.98828125 50.73628235]
[-230.46318054 35.95161438]
[-227.28198242 21.29411125]
[-223.45098877 6.79286957]
[-218.97781372 -7.52331829]
[-213.87135315 -21.62602806]
[-208.14170837 -35.48726273]
[-201.80029297 -49.07949829]
[-194.85968018 -62.37575150]
[-187.33364868 -75.34962463]
[-179.23713684 -87.97535706]
[-170.58622742 -100.22788239]
[-161.39810181 -112.08287048]
[-151.69099426 -123.51679230]
[-141.48417664 -134.50694275]
[-130.79791260 -145.03149414]
[-119.65342712 -155.06956482]
[-108.07283783 -164.60122681]
[-96.07913971 -173.60754395]
[-83.69614410 -182.07063293]
[-70.94843292 -189.97369385]
[-57.86132812 -197.30105591]
[-44.46080017 -204.03813171]
[-30.77346039 -210.17158508]
[-16.82648087 -215.68922424]
[-2.64755511 -220.58009338]
[11.73516846 -224.83447266]
[26.29313278 -228.44392395]
[40.99743652 -231.40127563]
[55.81888199 -233.70068359]
[70.72805023 -235.33753967]
[85.69532776 -236.30862427]
[100.69100952 -236.61199951]
[115.68531799 -236.24705505]
[130.64848328 -235.21453857]
[145.55081177 -233.51646423]
[160.36268616 -231.15625000]
[175.05471802 -228.13853455]
[189.59774780 -224.46934509]
[203.96289062 -220.15594482]
[218.12161255 -215.20690918]
[232.04582214 -209.63206482]
[245.70785522 -203.44247437]
[259.08062744 -196.65042114]
[272.13754272 -189.26939392]
[284.85269165 -181.31405640]
[297.20083618 -172.80020142]
[309.15744019 -163.74472046]
[320.69879150 -154.16558838]
[331.80200195 -144.08184814]
[342.44494629 -133.51350403]
[352.60656738 -122.48154449]
[362.26663208 -111.00787354]
[371.40600586 -99.11525726]
[380.00656128 -86.82731628]
[388.05114746 -74.16844940]
[395.52386475 -61.16378784]
[402.40982056 -47.83915329]
[408.69537354 -34.22099304]
[414.36804199 -20.33635330]
[419.41659546 -6.21279621]
[423.83093262 8.12163639]
[427.60235596 22.63848495]
[430.72335815 37.30892563]
[433.18774414 52.10383606]
[434.99060059 66.99383545]
[436.12838745 81.94937134]
[436.59881592 96.94074249]
[436.40093994 111.93818665]
[435.53518677 126.91193390]
[434.00326538 141.83224487]
[431.80819702 156.66949463]
[428.95437622 171.39424133]
[425.44741821 185.97724915]
[421.29434204 200.38954163]
[416.50335693 214.60252380]
[411.08398438 228.58798218]
[405.04696655 242.31814575]
[398.40432739 255.76573181]
[391.16925049 268.90408325]
[383.35604858 281.70706177]
[374.98028564 294.14929199]
[366.05859375 306.20605469]
[356.60864258 317.85342407]
[346.64923096 329.06826782]
[336.20010376 339.82830811]
[325.28204346 350.11218262]
[313.91671753 359.89950562]
[302.12664795 369.17080688]
[289.93530273 377.90771484]
[277.36685181 386.09283447]
[264.44625854 393.70996094]
[251.19915771 400.74395752]
[237.65187073 407.18084717]
[223.83128357 413.00787354]
[209.76484680 418.21343994]
[195.48048401 422.78723145]
[181.00656128 426.72015381]
[166.37179565 430.00439453]
[151.60527039 432.63345337]
[136.73626709 434.60208130]
[121.79434204 435.90640259]
[106.80914307 436.54382324]
[91.81042480 436.51306152]
[76.82796478 435.81417847]
[61.89151382 434.44857788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 33]
[22 32]
[23 31]
[24 30]
] def

init

% Start Annotations
21 33 0.65 0.6 colorpair
22 32 0.32 0.2 colorpair
23 31 0.16 0.2 colorpair
24 30 0.32 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
21 33 1 gmark
21 cmark
33 cmark
22 32 2 gmark
22 cmark
32 cmark
23 31 2 gmark
31 cmark
24 30 2 gmark
24 cmark
30 cmark

% End Annotations
showpage
end
%%EOF
