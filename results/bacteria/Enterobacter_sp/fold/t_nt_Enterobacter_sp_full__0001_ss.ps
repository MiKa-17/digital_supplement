%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:10:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
____AUGAG__CAUUGUGGAUAUGGU_GAUACUUAUCCUC___AAACUCAU______UGUUGCU__G___________AACUGCA_______ACUGCUUGAUGCUGUC_CUGAAAUACAA_________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50661469 92.01173401]
[62.53707123 91.03569794]
[47.60722733 89.57292175]
[32.73290634 87.62496948]
[17.92987251 85.19388580]
[3.21381426 82.28226471]
[-11.39967442 78.89318085]
[-25.89510727 75.03022766]
[-40.25711823 70.69750214]
[-54.47049332 65.89958954]
[-68.52016449 60.64158630]
[-82.39125061 54.92905426]
[-96.06903839 48.76805115]
[-109.53904724 42.16510391]
[-122.78699493 35.12721252]
[-135.79884338 27.66183662]
[-148.56079102 19.77688408]
[-161.05932617 11.48071384]
[-173.28120422 2.78211570]
[-185.21347046 -6.30969048]
[-196.84349060 -15.78506947]
[-208.15892029 -25.63398170]
[-219.14776611 -35.84598541]
[-229.79840088 -46.41026306]
[-240.09953308 -57.31561661]
[-250.04023743 -68.55049133]
[-259.60998535 -80.10297394]
[-268.79861450 -91.96083069]
[-277.59643555 -104.11149597]
[-285.99407959 -116.54208374]
[-293.98266602 -129.23942566]
[-301.55371094 -142.19006348]
[-308.69921875 -155.38026428]
[-315.41162109 -168.79608154]
[-321.68374634 -182.42326355]
[-327.50903320 -196.24737549]
[-332.88122559 -210.25378418]
[-337.79467773 -224.42762756]
[-342.24420166 -238.75389099]
[-346.22503662 -253.21739197]
[-349.73297119 -267.80279541]
[-352.76428223 -282.49465942]
[-355.31579590 -297.27743530]
[-357.38479614 -312.13540649]
[-358.96905518 -327.05282593]
[-360.06692505 -342.01394653]
[-360.67724609 -357.00283813]
[-360.79934692 -372.00369263]
[-360.43310547 -387.00054932]
[-359.57891846 -401.97753906]
[-358.23770142 -416.91879272]
[-356.41085815 -431.80847168]
[-354.10031128 -446.63079834]
[-351.30856323 -461.37005615]
[-348.03851318 -476.01065063]
[-344.29364014 -490.53704834]
[-340.07794189 -504.93383789]
[-335.39587402 -519.18579102]
[-330.25238037 -533.27777100]
[-324.65289307 -547.19488525]
[-318.60342407 -560.92236328]
[-312.11032104 -574.44567871]
[-305.18045044 -587.75042725]
[-297.82122803 -600.82263184]
[-290.04040527 -613.64831543]
[-281.84622192 -626.21392822]
[-273.24737549 -638.50622559]
[-264.25296021 -650.51208496]
[-254.87254333 -662.21881104]
[-245.11604309 -673.61401367]
[-234.99380493 -684.68560791]
[-224.51655579 -695.42187500]
[-213.69538879 -705.81140137]
[-202.54177856 -715.84320068]
[-191.06756592 -725.50665283]
[-179.28486633 -734.79150391]
[-167.20620728 -743.68786621]
[-154.84437561 -752.18640137]
[-142.21246338 -760.27807617]
[-129.32386780 -767.95428467]
[-116.19224548 -775.20690918]
[-102.83151245 -782.02819824]
[-89.25582886 -788.41107178]
[-75.47956848 -794.34863281]
[-61.51735306 -799.83465576]
[-47.38396454 -804.86328125]
[-33.09438324 -809.42926025]
[-18.66375351 -813.52764893]
[-4.10737085 -817.15417480]
[10.55934143 -820.30493164]
[25.32083893 -822.97668457]
[40.16147995 -825.16650391]
[55.06553268 -826.87213135]
[70.01720428 -828.09173584]
[85.00065613 -828.82397461]
[100.00000000 -829.06817627]
[114.99934387 -828.82397461]
[129.98278809 -828.09173584]
[144.93446350 -826.87213135]
[159.83851624 -825.16650391]
[174.67915344 -822.97668457]
[189.44065857 -820.30493164]
[204.10737610 -817.15417480]
[218.66375732 -813.52764893]
[233.09437561 -809.42926025]
[247.38395691 -804.86328125]
[261.51736450 -799.83465576]
[275.47958374 -794.34863281]
[289.25582886 -788.41107178]
[302.83151245 -782.02819824]
[316.19226074 -775.20690918]
[329.32388306 -767.95428467]
[342.21246338 -760.27807617]
[354.84439087 -752.18640137]
[367.20620728 -743.68786621]
[379.28488159 -734.79150391]
[391.06756592 -725.50665283]
[402.54177856 -715.84320068]
[413.69537354 -705.81140137]
[424.51654053 -695.42187500]
[434.99380493 -684.68560791]
[445.11602783 -673.61401367]
[454.87252808 -662.21881104]
[464.25296021 -650.51208496]
[473.24737549 -638.50622559]
[481.84622192 -626.21392822]
[490.04040527 -613.64831543]
[497.82122803 -600.82263184]
[505.18045044 -587.75042725]
[512.11029053 -574.44567871]
[518.60339355 -560.92236328]
[524.65289307 -547.19488525]
[530.25238037 -533.27777100]
[535.39587402 -519.18579102]
[540.07794189 -504.93383789]
[544.29364014 -490.53704834]
[548.03851318 -476.01065063]
[551.30853271 -461.37005615]
[554.10034180 -446.63079834]
[556.41082764 -431.80847168]
[558.23767090 -416.91879272]
[559.57891846 -401.97753906]
[560.43310547 -387.00054932]
[560.79931641 -372.00369263]
[560.67724609 -357.00283813]
[560.06695557 -342.01394653]
[558.96905518 -327.05282593]
[557.38476562 -312.13540649]
[555.31579590 -297.27743530]
[552.76428223 -282.49465942]
[549.73297119 -267.80279541]
[546.22503662 -253.21739197]
[542.24420166 -238.75389099]
[537.79467773 -224.42762756]
[532.88122559 -210.25378418]
[527.50903320 -196.24737549]
[521.68377686 -182.42326355]
[515.41162109 -168.79608154]
[508.69921875 -155.38026428]
[501.55371094 -142.19006348]
[493.98266602 -129.23942566]
[485.99407959 -116.54208374]
[477.59643555 -104.11149597]
[468.79861450 -91.96083069]
[459.60998535 -80.10297394]
[450.04022217 -68.55049133]
[440.09951782 -57.31561661]
[429.79840088 -46.41026306]
[419.14776611 -35.84598541]
[408.15890503 -25.63398170]
[396.84347534 -15.78506947]
[385.21347046 -6.30969048]
[373.28121948 2.78211570]
[361.05932617 11.48071384]
[348.56079102 19.77688408]
[335.79882812 27.66183662]
[322.78698730 35.12721252]
[309.53906250 42.16510391]
[296.06903076 48.76805115]
[282.39123535 54.92905426]
[268.52017212 60.64158630]
[254.47048950 65.89958954]
[240.25712585 70.69750214]
[225.89511108 75.03022766]
[211.39967346 78.89318085]
[196.78617859 82.28226471]
[182.07012939 85.19388580]
[167.26708984 87.62496948]
[152.39277649 89.57292175]
[137.46293640 91.03569794]
[122.49338531 92.01173401]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
