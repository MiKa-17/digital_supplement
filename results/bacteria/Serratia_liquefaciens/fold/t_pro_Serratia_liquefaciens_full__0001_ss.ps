%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 22:54:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_AAAUGCAGAACAAACGGAGCGUCCUAAAACUGAUCAUUAUCUGCACAACGCUAAUAGCACUGACAUGGAUAACACGCAGCAAACUGUGUGAACUGCGCAUCAAACCGGGCAACACGGAAGUUGCAGCCAUUCUGGCUUACGAACCCAAA___\
) } def
/len { sequence length } bind def

/coor [
[103.50288391 344.06958008]
[91.73657227 353.50381470]
[77.99338531 359.71475220]
[63.13722610 362.31192017]
[48.10197067 361.13214111]
[33.83274841 356.24951172]
[21.22653008 347.97097778]
[11.07575798 336.81692505]
[4.01851606 323.48852539]
[0.49842808 308.82360840]
[0.73677021 293.74401855]
[4.71856022 279.19766235]
[12.19349861 266.09896851]
[22.69170570 255.27130127]
[35.55325317 247.39529419]
[49.96965790 242.96606445]
[65.03469086 242.26200867]
[68.07350159 227.57305908]
[71.11231232 212.88409424]
[64.69191742 196.57933044]
[76.97792816 182.90054321]
[79.71647644 168.15264893]
[82.45502472 153.40475464]
[70.72874451 147.99049377]
[60.54778290 140.04267883]
[52.44961548 129.98091125]
[46.86176300 118.33634949]
[44.07923126 105.72377014]
[44.24891281 92.80901337]
[47.36185455 80.27388763]
[53.25371170 68.78015900]
[61.61343384 58.93461990]
[71.99969482 51.25703430]
[66.33019257 37.36974335]
[60.66069412 23.48245621]
[54.99119568 9.59516907]
[47.16875839 13.43194485]
[37.10416794 13.88368893]
[26.27523613 10.00639629]
[16.49488068 1.48270822]
[4.96062279 -8.10691643]
[-6.57363510 -17.69654083]
[-18.10789299 -27.28616524]
[-29.64215088 -36.87578964]
[-41.17641068 -46.46541214]
[-52.71066666 -56.05503845]
[-64.24492645 -65.64466095]
[-77.32542419 -57.98461151]
[-92.23751831 -55.26336670]
[-107.18050385 -57.80953217]
[-120.34994507 -65.31564331]
[-130.15556335 -76.87529755]
[-135.41328430 -91.09262085]
[-135.48820496 -106.25079346]
[-130.37129211 -120.51939392]
[-120.68042755 -132.17541504]
[-107.58583069 -139.81135559]
[-92.66874695 -142.50511169]
[-77.73047638 -139.93141174]
[-64.57489777 -132.40104675]
[-54.79059601 -120.82334137]
[-49.55908966 -106.59635162]
[-49.51210022 -91.43806458]
[-54.65530014 -77.17891693]
[-43.12104416 -67.58929443]
[-31.58678436 -57.99967194]
[-20.05252647 -48.41004562]
[-8.51826859 -38.82042313]
[3.01598907 -29.23079872]
[14.55024719 -19.64117432]
[26.08450508 -10.05154991]
[33.37906265 -11.79495049]
[29.89248466 -26.38411713]
[44.48170471 -29.87046814]
[47.96817398 -15.28175163]
[55.26272964 -17.02515221]
[61.21433258 -30.79390144]
[67.16593170 -44.56264877]
[73.11753082 -58.33139801]
[79.06913757 -72.10015106]
[85.02073669 -85.86889648]
[79.43777466 -100.41084290]
[85.66968536 -114.28952789]
[99.56761932 -119.52241516]
[105.51921844 -133.29116821]
[106.25373077 -150.22918701]
[122.73314667 -154.21229553]
[131.12254333 -139.47953796]
[119.28796387 -127.33956146]
[113.33636475 -113.57081604]
[119.04673004 -99.86215973]
[113.20710754 -85.81390381]
[98.78948212 -79.91729736]
[92.83788300 -66.14854431]
[86.88628387 -52.37979889]
[80.93468475 -38.61104965]
[74.98307800 -24.84230042]
[69.03147888 -11.07355118]
[68.87847900 3.92566848]
[74.54798126 17.81295586]
[80.21748352 31.70024490]
[85.88698578 45.58753204]
[98.58938599 43.29251862]
[111.59770966 43.95020294]
[124.22854614 47.57913208]
[135.80632019 54.04040527]
[145.69938660 63.04225159]
[153.35441589 74.15291595]
[158.32723999 86.82119751]
[160.30828857 100.40370941]
[174.69320679 93.81699371]
[186.74746704 102.56594086]
[201.69755554 103.78858185]
[216.64764404 105.01121521]
[228.53295898 94.59418488]
[244.29740906 95.71576691]
[254.58819580 107.71056366]
[253.30000305 123.46226501]
[241.19708252 133.62567139]
[225.45988464 132.17100525]
[215.42500305 119.96130371]
[200.47491455 118.73867035]
[185.52482605 117.51602936]
[172.20924377 124.19019318]
[159.08564758 115.35379791]
[153.55809021 129.29818726]
[165.28556824 138.65052795]
[177.01303101 148.00288391]
[188.74050903 157.35522461]
[200.46798706 166.70758057]
[216.62133789 171.85589600]
[216.14591980 188.80317688]
[199.72933960 193.03781128]
[191.11563110 178.43504333]
[179.38816833 169.08270264]
[167.66069031 159.73036194]
[155.93321228 150.37800598]
[144.20574951 141.02566528]
[121.95917511 153.96453857]
[97.20291901 156.14329529]
[94.46437073 170.89118958]
[91.72582245 185.63908386]
[98.38440704 196.73153687]
[95.75960541 208.98951721]
[85.80127716 215.92289734]
[82.76246643 230.61186218]
[79.72364807 245.30082703]
[93.27274323 251.92448425]
[104.74839783 261.71020508]
[113.42923737 274.04284668]
[118.76958466 288.14715576]
[120.43373871 303.13650513]
[118.31708527 318.06872559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 147]
[18 146]
[19 145]
[21 142]
[22 141]
[23 140]
[33 102]
[34 101]
[35 100]
[36 99]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[84 90]
[85 89]
[110 125]
[112 123]
[113 122]
[114 121]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% Start Annotations
17 147 0.0 1 colorpair
18 146 0.0 1 colorpair
19 145 0.16 1 colorpair
21 142 0.16 1 colorpair
22 141 0.0 1 colorpair
23 140 0.0 1 colorpair
33 102 0.0 1 colorpair
34 101 0.16 1 colorpair
35 100 0.0 1 colorpair
36 99 0.16 1 colorpair
40 71 0.0 1 colorpair
41 70 0.0 1 colorpair
42 69 0.16 1 colorpair
43 68 0.0 1 colorpair
44 67 0.0 1 colorpair
45 66 0.16 1 colorpair
46 65 0.16 1 colorpair
47 64 0.16 1 colorpair
76 98 0.0 1 colorpair
77 97 0.0 1 colorpair
78 96 0.0 1 colorpair
79 95 0.16 1 colorpair
80 94 0.16 1 colorpair
81 93 0.16 1 colorpair
84 90 0.0 1 colorpair
85 89 0.0 1 colorpair
110 125 0.0 1 colorpair
112 123 0.16 1 colorpair
113 122 0.0 1 colorpair
114 121 0.0 1 colorpair
126 138 0.16 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair
130 134 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
19 cmark
145 cmark
21 cmark
34 cmark
36 cmark
99 cmark
42 cmark
45 cmark
66 cmark
46 cmark
65 cmark
47 cmark
64 cmark
79 cmark
94 cmark
81 cmark
93 cmark
112 cmark
126 cmark

% End Annotations
showpage
end
%%EOF
