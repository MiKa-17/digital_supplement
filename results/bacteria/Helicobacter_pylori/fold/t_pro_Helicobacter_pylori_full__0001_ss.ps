%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 03:33:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__________UCAUGAAUACC_AAAAAUGGCAAAAACUCUUGGAAAACAUUAUACCUUGAAAUUUC_G_UU_UUUGGGGUGUAAAGUUGUUGUUUUAUUGAAGCG_______________________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51502991 91.76390839]
[62.58423615 90.29342651]
[47.74357605 88.09209442]
[33.02880859 85.16521454]
[18.47537804 81.51984406]
[4.11834908 77.16475677]
[-10.00769138 72.11045074]
[-23.86871338 66.36909485]
[-37.43132401 59.95452881]
[-50.66284943 52.88220215]
[-63.53141022 45.16915512]
[-76.00601196 36.83396530]
[-88.05659485 27.89671707]
[-99.65413666 18.37893677]
[-110.77069092 8.30355740]
[-121.37947845 -2.30515099]
[-131.45494080 -13.42162991]
[-140.97280884 -25.01909828]
[-149.91014099 -37.06961823]
[-158.24542236 -49.54415512]
[-165.95857239 -62.41266251]
[-173.03099060 -75.64413452]
[-179.44566345 -89.20669556]
[-185.18711853 -103.06767273]
[-190.24153137 -117.19367981]
[-194.59672546 -131.55067444]
[-198.24220276 -146.10408020]
[-201.16918945 -160.81881714]
[-203.37063599 -175.65946960]
[-204.84123230 -190.59025574]
[-205.57743835 -205.57521057]
[-205.57746887 -220.57824707]
[-204.84133911 -235.56321716]
[-203.37081909 -250.49400330]
[-201.16944885 -265.33465576]
[-198.24253845 -280.04943848]
[-194.59713745 -294.60284424]
[-190.24200439 -308.95986938]
[-185.18766785 -323.08587646]
[-179.44627380 -336.94689941]
[-173.03167725 -350.50949097]
[-165.95932007 -363.74099731]
[-158.24624634 -376.60955811]
[-149.91102600 -389.08413696]
[-140.97373962 -401.13467407]
[-131.45593262 -412.73220825]
[-121.38052368 -423.84872437]
[-110.77178955 -434.45748901]
[-99.65528870 -444.53292847]
[-88.05779266 -454.05075073]
[-76.00725555 -462.98806763]
[-63.53269196 -471.32333374]
[-50.66416931 -479.03643799]
[-37.43267822 -486.10882568]
[-23.87010002 -492.52346802]
[-10.00910759 -498.26489258]
[4.11690807 -503.31927490]
[18.47391510 -507.67440796]
[33.02732468 -511.31985474]
[47.74208069 -514.24682617]
[62.58272934 -516.44824219]
[77.51351929 -517.91876221]
[92.49848175 -518.65496826]
[107.50151825 -518.65496826]
[122.48648071 -517.91876221]
[137.41726685 -516.44824219]
[152.25791931 -514.24682617]
[166.97267151 -511.31985474]
[181.52609253 -507.67440796]
[195.88308716 -503.31927490]
[210.00910950 -498.26489258]
[223.87010193 -492.52346802]
[237.43267822 -486.10882568]
[250.66416931 -479.03643799]
[263.53268433 -471.32333374]
[276.00726318 -462.98806763]
[288.05780029 -454.05075073]
[299.65527344 -444.53292847]
[310.77178955 -434.45748901]
[321.38052368 -423.84872437]
[331.45593262 -412.73220825]
[340.97375488 -401.13467407]
[349.91101074 -389.08413696]
[358.24624634 -376.60955811]
[365.95932007 -363.74099731]
[373.03167725 -350.50949097]
[379.44628906 -336.94689941]
[385.18765259 -323.08587646]
[390.24200439 -308.95986938]
[394.59713745 -294.60284424]
[398.24255371 -280.04943848]
[401.16946411 -265.33465576]
[403.37081909 -250.49400330]
[404.84133911 -235.56321716]
[405.57748413 -220.57824707]
[405.57742310 -205.57521057]
[404.84124756 -190.59025574]
[403.37063599 -175.65946960]
[401.16918945 -160.81881714]
[398.24221802 -146.10408020]
[394.59674072 -131.55067444]
[390.24154663 -117.19367981]
[385.18713379 -103.06767273]
[379.44567871 -89.20669556]
[373.03100586 -75.64413452]
[365.95858765 -62.41266251]
[358.24542236 -49.54415512]
[349.91015625 -37.06961823]
[340.97280884 -25.01909828]
[331.45495605 -13.42162991]
[321.37948608 -2.30515099]
[310.77069092 8.30355740]
[299.65414429 18.37893677]
[288.05661011 27.89671707]
[276.00601196 36.83396530]
[263.53140259 45.16915512]
[250.66284180 52.88220215]
[237.43132019 59.95452881]
[223.86871338 66.36909485]
[210.00769043 72.11045074]
[195.88165283 77.16475677]
[181.52462769 81.51984406]
[166.97119141 85.16521454]
[152.25642395 88.09209442]
[137.41577148 90.29342651]
[122.48497009 91.76390839]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
