%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Sun Mar  8 06:59:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUGGUAACUACUCCUAU_AGUUGCUUGUGGUGAGCGGCGUGGGUGAGGUGCAAACUCAUCUUCGCCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[82.88108826 117.40772247]
[77.09541321 108.45375061]
[62.10823059 109.07363129]
[47.12104416 109.69350433]
[32.13385773 110.31337738]
[17.14666939 110.93325043]
[2.15948343 111.55312347]
[-12.81169128 112.48260498]
[-27.76045799 113.72129822]
[-42.70922470 114.95998383]
[-57.65799332 116.19867706]
[-72.60675812 117.43737030]
[-87.55552673 118.67605591]
[-94.70500183 132.34677124]
[-108.12176514 139.96215820]
[-123.52457428 139.09216309]
[-135.99845886 130.01438904]
[-141.56303406 115.62554169]
[-138.44267273 100.51703644]
[-127.63307190 89.50994873]
[-112.58353424 86.11659241]
[-98.09630585 91.41978455]
[-88.79421997 103.72728729]
[-73.84545135 102.48860168]
[-58.89668274 101.24990845]
[-43.94791412 100.01122284]
[-28.99914932 98.77252960]
[-14.05038071 97.53383636]
[-7.45652151 93.73340607]
[1.53960884 96.56594086]
[16.52679443 95.94606781]
[31.51398087 95.32618713]
[46.50116730 94.70631409]
[61.48835373 94.08644104]
[76.47554016 93.46656799]
[88.24793243 78.59965515]
[107.11026764 76.64341736]
[121.68302155 88.77803802]
[136.47843933 86.30912018]
[151.27386475 83.84020233]
[166.06927490 81.37128448]
[180.86470032 78.90236664]
[195.66012573 76.43344116]
[207.99856567 66.53023529]
[221.82575989 72.06716919]
[236.62118530 69.59825134]
[251.41661072 67.12933350]
[266.21203613 64.66041565]
[281.00744629 62.19149399]
[295.80285645 59.72257614]
[310.59829712 57.25365829]
[318.38476562 43.69250870]
[333.08419800 38.35767746]
[347.75598145 43.76811600]
[355.47253418 57.36917496]
[352.59033203 72.73885345]
[340.47027588 82.62005615]
[324.83508301 82.34718323]
[313.06719971 72.04907990]
[298.27178955 74.51799774]
[283.47634888 76.98691559]
[268.68093872 79.45583344]
[253.88552856 81.92475128]
[239.09010315 84.39366913]
[224.29467773 86.86258698]
[213.01451111 96.58920288]
[198.12904358 91.22886658]
[183.33361816 93.69778442]
[168.53820801 96.16670227]
[153.74278259 98.63562012]
[138.94735718 101.10453796]
[124.15193939 103.57345581]
[120.32689667 113.52416992]
[112.62639618 120.89641571]
[102.51859283 124.28461456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% Start Annotations
2 35 0.0 1 colorpair
3 34 0.0 1 colorpair
4 33 0.0 1 colorpair
5 32 0.0 1 colorpair
6 31 0.0 1 colorpair
7 30 0.16 1 colorpair
8 28 0.0 0.6 colorpair
9 27 0.0 1 colorpair
10 26 0.0 0.6 colorpair
11 25 0.0 1 colorpair
12 24 0.0 0.6 colorpair
13 23 0.0 0.6 colorpair
38 72 0.0 1 colorpair
39 71 0.0 1 colorpair
40 70 0.0 1 colorpair
41 69 0.32 1 colorpair
42 68 0.0 1 colorpair
43 67 0.16 1 colorpair
45 65 0.16 1 colorpair
46 64 0.16 1 colorpair
47 63 0.32 1 colorpair
48 62 0.32 1 colorpair
49 61 0.0 1 colorpair
50 60 0.32 1 colorpair
51 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 cmark
8 28 1 gmark
10 26 1 gmark
12 24 1 gmark
13 23 1 gmark
41 cmark
69 cmark
43 cmark
67 cmark
45 cmark
65 cmark
46 cmark
64 cmark
47 cmark
63 cmark
48 cmark
62 cmark
50 cmark
60 cmark

% End Annotations
showpage
end
%%EOF
