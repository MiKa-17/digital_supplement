%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:07:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________________________________AUGGGCAUCAUCGAUACGACGAUACUGAUCCUCAA_CUCAAUGGUGCAUGAUUCCAAAUGCGAAAUGCAGUCCAGAAAGAAGA___________________________________________\
) } def
/len { sequence length } bind def

/coor [
[110.74666595 620.39154053]
[96.28719330 616.37457275]
[82.16835022 611.28826904]
[68.46908569 605.16107178]
[55.26601410 598.02728271]
[42.63297653 589.92675781]
[30.64061737 580.90478516]
[19.35600662 571.01190186]
[8.84225464 560.30334473]
[-0.84184289 548.83898926]
[-9.64212799 536.68304443]
[-17.50938416 523.90344238]
[-24.39961433 510.57165527]
[-30.27428627 496.76220703]
[-35.10054398 482.55236816]
[-38.85140228 468.02160645]
[-41.50587463 453.25115967]
[-43.04912567 438.32366943]
[-43.47251892 423.32257080]
[-42.77368927 408.33175659]
[-40.95654297 393.43511963]
[-38.03124619 378.71591187]
[-34.01415253 364.25650024]
[-28.92773247 350.13769531]
[-22.80043030 336.43847656]
[-15.66651154 323.23547363]
[-7.56587410 310.60250854]
[1.45618021 298.61022949]
[11.34919643 287.32568359]
[22.05784798 276.81204224]
[33.52224350 267.12805176]
[45.67827606 258.32785034]
[58.45795822 250.46072388]
[71.78981781 243.57060242]
[85.59930420 237.69606018]
[99.80918121 232.86991882]
[114.33998871 229.11920166]
[111.68663025 214.35574341]
[109.03327942 199.59228516]
[106.37992859 184.82882690]
[103.72657013 170.06536865]
[99.42523956 164.00602722]
[101.16965485 154.98420715]
[98.80850220 140.17120361]
[96.44734955 125.35820770]
[77.28403473 118.85187531]
[66.60227203 98.45620728]
[73.58341980 73.59973145]
[65.20372009 61.15864944]
[56.82402039 48.71756363]
[49.39358902 43.31155777]
[48.40450287 35.94686508]
[40.27223969 23.34264946]
[32.13997269 10.73843384]
[24.00770760 -1.86578214]
[15.87544155 -14.46999836]
[7.74317646 -27.07421494]
[-0.38908866 -39.67842865]
[-15.43097019 -37.29900360]
[-30.13853073 -41.24964142]
[-41.96359634 -50.84587479]
[-48.85740280 -64.42510223]
[-49.62555695 -79.63462830]
[-44.13497162 -93.83932495]
[-33.33692169 -104.57813263]
[-19.10223770 -109.99049377]
[-3.89716268 -109.13867950]
[9.64393139 -102.17028046]
[19.17496872 -90.29260254]
[23.04463768 -75.56352997]
[20.58249855 -60.53496170]
[12.21512699 -47.81069565]
[20.34739304 -35.20647812]
[28.47965813 -22.60226440]
[36.61192322 -9.99804783]
[44.74419022 2.60616851]
[52.87645340 15.21038437]
[61.00872040 27.81459999]
[69.26510620 40.33786392]
[77.64480591 52.77894592]
[86.02450562 65.22003174]
[93.52121735 65.44228363]
[92.13191223 50.50675964]
[89.46140289 35.74639511]
[102.14212036 27.73394203]
[114.32630157 36.48299026]
[110.78628540 51.05979538]
[108.51462555 65.88677979]
[116.01133728 66.10903168]
[125.11333466 54.18621445]
[134.21533203 42.26340103]
[143.31733704 30.34058189]
[152.41934204 18.41776657]
[151.71971130 2.38997555]
[163.90870667 -8.04112816]
[179.63597107 -4.87369537]
[186.83689880 9.46249104]
[179.98754883 23.96993637]
[164.34216309 27.51976776]
[155.24015808 39.44258499]
[146.13815308 51.36540222]
[137.03614807 63.28821945]
[127.93415070 75.21103668]
[133.22370911 96.26152039]
[125.88169861 114.19667816]
[111.26035309 122.99705505]
[113.62149811 137.81005859]
[115.98265076 152.62306213]
[118.49002838 167.41200256]
[121.14338684 182.17546082]
[123.79673767 196.93891907]
[126.45008850 211.70237732]
[129.10343933 226.46583557]
[144.03091431 224.92219543]
[159.03199768 224.49841309]
[174.02281189 225.19683838]
[188.91950989 227.01359558]
[203.63879395 229.93850708]
[218.09832764 233.95521545]
[232.21726990 239.04125977]
[245.91664124 245.16819763]
[259.11984253 252.30177307]
[271.75302124 260.40206909]
[283.74554443 269.42379761]
[295.03030396 279.31652832]
[305.54425049 290.02490234]
[315.22854614 301.48904419]
[324.02905273 313.64483643]
[331.89654541 326.42431641]
[338.78701782 339.75598145]
[344.66192627 353.56530762]
[349.48843384 367.77508545]
[353.23953247 382.30578613]
[355.89428711 397.07617188]
[357.43777466 412.00366211]
[357.86145020 427.00476074]
[357.16287231 441.99554443]
[355.34600830 456.89224243]
[352.42095947 471.61148071]
[348.40411377 486.07098389]
[343.31796265 500.18988037]
[337.19088745 513.88922119]
[330.05722046 527.09234619]
[321.95678711 539.72546387]
[312.93493652 551.71789551]
[303.04214478 563.00256348]
[292.33367920 573.51641846]
[280.86944580 583.20062256]
[268.71356201 592.00103760]
[255.93402100 599.86840820]
[242.60227966 606.75872803]
[228.79289246 612.63354492]
[214.58309937 617.45989990]
[200.05236816 621.21087646]
[185.28195190 623.86547852]
[170.35444641 625.40887451]
[155.35334778 625.83239746]
[140.36254883 625.13372803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[37 113]
[38 112]
[39 111]
[40 110]
[41 109]
[43 108]
[44 107]
[45 106]
[48 81]
[49 80]
[50 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% Start Annotations
37 113 0.16 1 colorpair
38 112 0.0 0.2 colorpair
39 111 0.16 1 colorpair
40 110 0.0 1 colorpair
41 109 0.0 0.2 colorpair
43 108 0.0 1 colorpair
44 107 0.0 0.2 colorpair
45 106 0.16 1 colorpair
48 81 0.0 0.6 colorpair
49 80 0.16 1 colorpair
50 79 0.0 1 colorpair
52 78 0.16 1 colorpair
53 77 0.0 1 colorpair
54 76 0.16 1 colorpair
55 75 0.0 1 colorpair
56 74 0.16 1 colorpair
57 73 0.0 0.2 colorpair
58 72 0.16 1 colorpair
89 103 0.0 0.2 colorpair
90 102 0.16 1 colorpair
91 101 0.0 0.2 colorpair
92 100 0.0 1 colorpair
93 99 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
37 cmark
113 cmark
38 112 2 gmark
39 cmark
111 cmark
41 109 2 gmark
44 107 2 gmark
45 cmark
106 cmark
48 81 1 gmark
49 cmark
80 cmark
52 cmark
54 cmark
76 cmark
56 cmark
57 73 2 gmark
72 cmark
89 103 2 gmark
90 cmark
102 cmark
91 101 2 gmark
93 cmark

% End Annotations
showpage
end
%%EOF
