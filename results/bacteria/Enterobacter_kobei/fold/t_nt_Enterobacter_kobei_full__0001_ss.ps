%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:07:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________________________________AUGGGCAUCGUGGAUAUGGUGAUACUUAUCCUCAAACUCAUUGUUGCAUUAUUGCAACUGCUUGAUGCUGUCCUGAAAUACG____________________________________________\
) } def
/len { sequence length } bind def

/coor [
[94.41548157 322.20855713]
[83.80496216 321.68795776]
[73.23143005 320.66098022]
[62.71903992 319.13000488]
[52.29180908 317.09848022]
[41.97354889 314.57110596]
[31.78782654 311.55358887]
[21.75791359 308.05288696]
[11.90671444 304.07693481]
[2.25673223 299.63485718]
[-7.16999054 294.73678589]
[-16.35192299 289.39392090]
[-25.26809120 283.61843872]
[-33.89812851 277.42355347]
[-42.22232819 270.82339478]
[-50.22166824 263.83306885]
[-57.87788391 256.46850586]
[-65.17348480 248.74656677]
[-72.09180450 240.68487549]
[-78.61705017 232.30183411]
[-84.73430634 223.61659241]
[-90.42960358 214.64898682]
[-95.68992615 205.41952515]
[-100.50327301 195.94924927]
[-104.85865021 186.25982666]
[-108.74609375 176.37338257]
[-112.15673065 166.31246948]
[-115.08277893 156.10011292]
[-117.51754761 145.75959778]
[-119.45547485 135.31457520]
[-120.89213562 124.78887939]
[-121.82424927 114.20655823]
[-122.24968719 103.59179688]
[-122.16747284 92.96883392]
[-121.57779694 82.36192322]
[-120.48201752 71.79530334]
[-118.88261414 61.29310608]
[-116.78326416 50.87932205]
[-114.18874359 40.57773590]
[-111.10498810 30.41187668]
[-107.53903961 20.40496826]
[-103.49904633 10.57986450]
[-98.99423218 0.95900869]
[-94.03488922 -8.43562317]
[-106.87455750 -16.19081306]
[-119.71422577 -23.94600105]
[-132.55389404 -31.70119095]
[-145.39355469 -39.45637894]
[-161.20648193 -39.96828461]
[-168.10046387 -53.17140198]
[-183.38206482 -49.14050674]
[-196.99581909 -57.16804123]
[-200.86492920 -72.49140930]
[-192.69390869 -86.01953125]
[-177.33049011 -89.72640991]
[-163.88951111 -81.41281891]
[-160.34527588 -66.01107025]
[-145.45072937 -66.05386353]
[-137.63836670 -52.29604721]
[-124.79870605 -44.54085922]
[-111.95903778 -36.78566742]
[-99.11936951 -29.03047943]
[-86.27970123 -21.27528954]
[-66.48365784 -47.27870178]
[-43.08868790 -70.09835815]
[-16.60054016 -89.24095154]
[12.40819073 -104.29267883]
[43.31041718 -114.92816162]
[75.43811035 -120.91748810]
[108.09677124 -122.13118744]
[140.58039856 -118.54302979]
[143.81494141 -133.19013977]
[147.04946899 -147.83724976]
[150.28401184 -162.48434448]
[153.51853943 -177.13145447]
[147.23936462 -188.43777466]
[150.27140808 -200.59681702]
[160.45074463 -207.19338989]
[163.97402954 -221.77374268]
[167.49732971 -236.35408020]
[171.02061462 -250.93443298]
[174.54389954 -265.51477051]
[166.09330750 -278.87002563]
[169.64288330 -294.27053833]
[183.08674622 -302.57946777]
[198.44888306 -298.86727905]
[206.61520386 -285.33630371]
[202.74078369 -270.01428223]
[189.12425232 -261.99148560]
[185.60095215 -247.41113281]
[182.07766724 -232.83079529]
[178.55438232 -218.25044250]
[175.03108215 -203.67010498]
[180.90625000 -187.15786743]
[168.16564941 -173.89692688]
[164.93112183 -159.24981689]
[161.69657898 -144.60270691]
[158.46203613 -129.95559692]
[155.22750854 -115.30848694]
[165.45166016 -112.42388153]
[175.52630615 -109.05406189]
[185.42843628 -105.20674133]
[195.13545227 -100.89069366]
[204.62515259 -96.11578369]
[213.87586975 -90.89292145]
[222.86648560 -85.23403931]
[231.57646179 -79.15205383]
[239.98590088 -72.66085815]
[248.07559204 -65.77528381]
[255.82705688 -58.51105118]
[263.22259521 -50.88476181]
[270.24530029 -42.91382980]
[276.87915039 -34.61646271]
[283.10897827 -26.01161575]
[288.92056274 -17.11894035]
[294.30062866 -7.95874834]
[299.23687744 1.44803548]
[303.71804810 11.07992554]
[307.73388672 20.91492081]
[311.27526855 30.93055916]
[314.33404541 41.10395813]
[316.90325928 51.41188812]
[318.97702026 61.83079529]
[320.55062866 72.33689117]
[321.62045288 82.90616608]
[322.18408203 93.51449585]
[322.24020386 104.13763428]
[321.78869629 114.75131989]
[320.83059692 125.33131409]
[319.36807251 135.85343933]
[317.40451050 146.29368591]
[314.94433594 156.62817383]
[311.99322510 166.83332825]
[308.55789185 176.88581848]
[304.64617920 186.76269531]
[300.26702881 196.44140625]
[295.43041992 205.89981079]
[290.14746094 215.11633301]
[284.43014526 224.06991577]
[278.29156494 232.74011230]
[271.74575806 241.10710144]
[264.80767822 249.15179443]
[257.49313354 256.85580444]
[249.81884766 264.20150757]
[241.80235291 271.17218018]
[233.46197510 277.75186157]
[224.81674194 283.92553711]
[215.88642883 289.67910767]
[206.69139099 294.99942017]
[197.25267029 299.87432861]
[187.59181213 304.29266357]
[177.73088074 308.24441528]
[167.69239807 311.72048950]
[157.49929810 314.71295166]
[147.17485046 317.21499634]
[136.74266052 319.22088623]
[126.22654724 320.72604370]
[115.65052795 321.72705078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[50 57]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
] def

init

% Start Annotations
44 63 0.0 0.2 colorpair
45 62 0.0 0.2 colorpair
46 61 0.16 1 colorpair
47 60 0.0 1 colorpair
48 59 0.0 0.2 colorpair
50 57 0.16 1 colorpair
71 99 0.0 0.2 colorpair
72 98 0.16 1 colorpair
73 97 0.16 1 colorpair
74 96 0.16 1 colorpair
75 95 0.0 0.2 colorpair
78 93 0.16 1 colorpair
79 92 0.0 1 colorpair
80 91 0.16 1 colorpair
81 90 0.16 0.2 colorpair
82 89 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
44 63 2 gmark
45 62 2 gmark
46 cmark
48 59 2 gmark
57 cmark
71 99 2 gmark
72 cmark
73 cmark
97 cmark
96 cmark
75 95 2 gmark
93 cmark
80 cmark
81 90 2 gmark
81 cmark
90 cmark
82 cmark
89 cmark

% End Annotations
showpage
end
%%EOF
