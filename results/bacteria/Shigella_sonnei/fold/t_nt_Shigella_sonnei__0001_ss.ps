%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  9 04:16:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_________________________________AUGACGCUCGCGGAACUGGCC_AUGGU_CUUCUGGCAUGACUUAGCAGCUCCGCUCUUUGCUGGCAUUAUUGC__CAGUAUGAUAGUGAACUGGC_UGAGGAAGCGGAAGUAA____________________\
) } def
/len { sequence length } bind def

/coor [
[38.76386642 460.09088135]
[24.03195953 457.27322388]
[9.42815399 453.85314941]
[-5.02292824 449.83636475]
[-19.29691696 445.22970581]
[-33.36974716 440.04089355]
[-47.21768188 434.27871704]
[-60.81737900 427.95285034]
[-74.14589691 421.07400513]
[-87.18077087 413.65371704]
[-99.90000916 405.70458984]
[-112.28218079 397.23992920]
[-124.30638885 388.27407837]
[-135.95236206 378.82214355]
[-147.20048523 368.90002441]
[-158.03175354 358.52450562]
[-168.42793274 347.71304321]
[-178.37147522 336.48388672]
[-187.84562683 324.85595703]
[-196.83439636 312.84887695]
[-205.32264709 300.48287964]
[-213.29605103 287.77880859]
[-220.74116516 274.75811768]
[-227.64544678 261.44274902]
[-233.99723816 247.85514832]
[-239.78584290 234.01823425]
[-245.00148010 219.95532227]
[-249.63537598 205.69015503]
[-253.67970276 191.24676514]
[-257.12765503 176.64950562]
[-259.97338867 161.92300415]
[-262.21215820 147.09208679]
[-263.84011841 132.18176270]
[-264.85458374 117.21716309]
[-265.25381470 102.22354126]
[-265.03717041 87.22616577]
[-264.20495605 72.25032806]
[-262.75863647 57.32128906]
[-260.70062256 42.46421051]
[-275.46170044 39.79776001]
[-290.22280884 37.13130569]
[-304.98391724 34.46485138]
[-319.74499512 31.79839706]
[-332.58438110 41.01393890]
[-348.16580200 38.36909866]
[-357.24505615 25.43301773]
[-354.43563843 9.88044071]
[-341.40429688 0.93843603]
[-325.88229370 3.91213703]
[-317.07855225 17.03730011]
[-302.31744385 19.70375252]
[-287.55636597 22.37020683]
[-272.79525757 25.03665924]
[-258.03414917 27.70311356]
[-254.76414490 13.06497192]
[-250.89591980 -1.42657769]
[-246.43601990 -15.74709892]
[-241.39193726 -29.87244606]
[-235.77218628 -43.77879715]
[-229.58624268 -57.44270706]
[-222.84455872 -70.84113312]
[-215.55848694 -83.95147705]
[-207.74029541 -96.75164032]
[-199.40319824 -109.22003937]
[-190.56123352 -121.33564758]
[-181.22932434 -133.07803345]
[-171.42320251 -144.42739868]
[-161.15939331 -155.36459351]
[-150.45520020 -165.87120056]
[-139.32870483 -175.92947388]
[-127.79862976 -185.52247620]
[-115.88444519 -194.63403320]
[-103.60622406 -203.24874878]
[-90.98468018 -211.35214233]
[-78.04109192 -218.93051147]
[-64.79729462 -225.97109985]
[-51.27560043 -232.46202087]
[-37.49882889 -238.39233398]
[-23.49020004 -243.75204468]
[-9.27334023 -248.53211975]
[5.12777853 -252.72448730]
[19.68887329 -256.32208252]
[34.38539124 -259.31884766]
[49.19255066 -261.70968628]
[64.08538055 -263.49063110]
[79.03877258 -264.65866089]
[94.02751160 -265.21176147]
[109.02632141 -265.14904785]
[124.00990295 -264.47061157]
[138.95300293 -263.17758179]
[153.83042908 -261.27218628]
[168.61708069 -258.75756836]
[183.28800964 -255.63803101]
[197.81851196 -251.91879272]
[212.18408203 -247.60615540]
[226.36047363 -242.70736694]
[240.32379150 -237.23068237]
[254.05049133 -231.18536377]
[267.51742554 -224.58160400]
[280.70187378 -217.43051147]
[293.58163452 -209.74417114]
[306.13497925 -201.53552246]
[318.34072876 -192.81842041]
[330.17831421 -183.60755920]
[341.62774658 -173.91847229]
[352.66976929 -163.76750183]
[363.28570557 -153.17175293]
[373.45770264 -142.14910889]
[383.16857910 -130.71813965]
[392.40197754 -118.89812469]
[401.14230347 -106.70900726]
[409.37484741 -94.17132568]
[417.08572388 -81.30622864]
[424.26190186 -68.13540649]
[430.89132690 -54.68107605]
[436.96276855 -40.96591568]
[442.46603394 -27.01305771]
[447.39181519 -12.84602451]
[451.73181152 1.51129210]
[455.47872925 16.03468323]
[458.62622070 30.69965744]
[461.16897583 45.48148727]
[463.10272217 60.35525131]
[464.42422485 75.29586029]
[465.13119507 90.27812958]
[465.22247314 105.27678680]
[464.69790649 120.26655579]
[463.55838013 135.22213745]
[461.80581665 150.11834717]
[459.44317627 164.93002319]
[456.47442627 179.63223267]
[452.90457153 194.20014954]
[448.73965454 208.60922241]
[443.98666382 222.83515930]
[438.65365601 236.85397339]
[432.74957275 250.64202881]
[426.28442383 264.17605591]
[419.26907349 277.43325806]
[411.71536255 290.39123535]
[403.63604736 303.02819824]
[395.04473877 315.32281494]
[385.95590210 327.25433350]
[376.38485718 338.80264282]
[366.34780884 349.94830322]
[355.86160278 360.67248535]
[344.94396973 370.95709229]
[333.61331177 380.78482056]
[321.88873291 390.13909912]
[309.78997803 399.00411987]
[297.33749390 407.36495972]
[284.55224609 415.20748901]
[271.45581055 422.51855469]
[258.07025146 429.28573608]
[244.41815186 435.49768066]
[230.52252197 441.14392090]
[216.40681458 446.21490479]
[202.09481812 450.70208740]
[187.61065674 454.59790039]
[172.97877502 457.89578247]
[158.22383118 460.59017944]
[143.37069702 462.67654419]
[128.44444275 464.15136719]
[113.47023010 465.01211548]
[98.47329712 465.25741577]
[83.47893524 464.88677979]
[68.51243591 463.90084839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
] def

init

% Start Annotations
41 52 0.16 0.2 colorpair
43 50 0.48 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
39 54 4 gmark
39 cmark
54 cmark
40 53 6 gmark
40 cmark
53 cmark
41 52 2 gmark
52 cmark
42 51 5 gmark
42 cmark
51 cmark
43 50 1 gmark
43 cmark
50 cmark

% End Annotations
showpage
end
%%EOF
