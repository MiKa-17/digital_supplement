%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:38:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUG_CG__AUGAUGAA_GUUAGGCAUUAUACUAGUGAUAUGUCUUA____AUCAUUACAUACCCGGAUUAAUCG_G________UG_GAA_U___UA_____CAGG_____A_________________________________________\
) } def
/len { sequence length } bind def

/coor [
[20.85627365 358.16564941]
[9.63656807 354.45565796]
[-1.41007066 350.25833130]
[-12.26248550 345.58169556]
[-22.89989090 340.43472290]
[-33.30191422 334.82723999]
[-43.44863510 328.77001953]
[-53.32061768 322.27465820]
[-62.89895248 315.35357666]
[-72.16529846 308.02005005]
[-81.10191345 300.28811646]
[-89.69167328 292.17257690]
[-97.91812897 283.68899536]
[-105.76551819 274.85360718]
[-113.21882629 265.68331909]
[-120.26377106 256.19570923]
[-132.73580933 264.52926636]
[-145.20785522 272.86282349]
[-157.67990112 281.19638062]
[-170.15194702 289.52993774]
[-182.62399292 297.86349487]
[-184.14643860 313.42678833]
[-195.35270691 324.33337402]
[-210.95155334 325.43347168]
[-223.57765198 316.20767212]
[-227.26937866 301.01211548]
[-220.28359985 287.02166748]
[-205.91877747 280.84219360]
[-190.95755005 285.39144897]
[-178.48550415 277.05789185]
[-166.01345825 268.72433472]
[-153.54141235 260.39077759]
[-141.06936646 252.05723572]
[-128.59732056 243.72367859]
[-145.46415710 212.51924133]
[-158.09519958 179.37315369]
[-166.27250671 144.85737610]
[-169.85494995 109.56754303]
[-168.78071594 74.11260223]
[-163.06834412 39.10438538]
[-177.58233643 35.31700897]
[-192.09632874 31.52963638]
[-206.61030579 27.74226379]
[-220.11676025 35.94904327]
[-235.45031738 32.12049484]
[-243.51383972 18.52802849]
[-239.52339172 3.23581290]
[-225.84642029 -4.68355131]
[-210.59725952 -0.53164613]
[-202.82293701 13.22827721]
[-188.30894470 17.01564980]
[-173.79496765 20.80302429]
[-159.28097534 24.59039879]
[-155.73329163 13.31831837]
[-151.69583130 2.21225381]
[-147.17630005 -8.70652390]
[-142.18338013 -19.41710472]
[-136.72660828 -29.89897156]
[-130.81646729 -40.13205338]
[-124.46424866 -50.09674835]
[-117.68212891 -59.77397537]
[-110.48310089 -69.14519501]
[-102.88094330 -78.19246674]
[-94.89022827 -86.89845276]
[-86.52624512 -95.24649048]
[-77.80503082 -103.22058105]
[-68.74327087 -110.80545807]
[-59.35832977 -117.98659515]
[-49.66818237 -124.75023651]
[-39.69138336 -131.08341980]
[-29.44704247 -136.97404480]
[-18.95478249 -142.41079712]
[-8.23469543 -147.38327026]
[2.69268632 -151.88195801]
[13.80643463 -155.89822388]
[25.08526230 -159.42439270]
[36.50757217 -162.45370483]
[48.05147934 -164.98034668]
[59.69488525 -166.99949646]
[71.41548157 -168.50727844]
[83.19082642 -169.50080872]
[94.99836731 -169.97817993]
[106.81548309 -169.93847656]
[118.61954498 -169.38179016]
[130.38793945 -168.30915833]
[142.09814453 -166.72265625]
[153.72772217 -164.62532043]
[165.25439453 -162.02117920]
[176.65609741 -158.91519165]
[187.91098022 -155.31332397]
[198.99748230 -151.22247314]
[209.89439392 -146.65046692]
[220.58082581 -141.60607910]
[231.03633118 -136.09895325]
[241.24085999 -130.13963318]
[251.17488098 -123.73955536]
[260.81936646 -116.91095734]
[270.15585327 -109.66693115]
[279.16644287 -102.02133942]
[287.83389282 -93.98883057]
[296.14157104 -85.58478546]
[304.07363892 -76.82530212]
[311.61480713 -67.72716522]
[318.75073242 -58.30778122]
[325.46765137 -48.58520889]
[331.75277710 -38.57805634]
[337.59405518 -28.30549622]
[342.98025513 -17.78720093]
[347.90112305 -7.04331636]
[352.34716797 3.90558147]
[356.30993652 15.03852272]
[359.78179932 26.33418465]
[362.75610352 37.77093506]
[365.22720337 49.32686615]
[367.19030762 60.97985077]
[368.64169312 72.70756531]
[369.57855225 84.48754883]
[369.99911499 96.29724884]
[369.90255737 108.11403656]
[369.28909302 119.91528320]
[368.15985107 131.67839050]
[366.51705933 143.38082886]
[364.36380005 155.00018311]
[361.70422363 166.51419067]
[358.54342651 177.90081787]
[354.88745117 189.13822937]
[350.74328613 200.20494080]
[346.11892700 211.07972717]
[341.02319336 221.74177551]
[335.46582031 232.17065430]
[329.45748901 242.34638977]
[323.00967407 252.24951172]
[316.13476562 261.86102295]
[308.84591675 271.16256714]
[301.15704346 280.13626099]
[293.08294678 288.76495361]
[284.63903809 297.03213501]
[275.84149170 304.92193604]
[266.70718384 312.41928101]
[257.25357056 319.50979614]
[247.49879456 326.17987061]
[237.46151733 332.41677856]
[227.16098022 338.20855713]
[216.61689758 343.54409790]
[205.84945679 348.41320801]
[194.87930298 352.80654907]
[183.72741699 356.71569824]
[172.41519165 360.13317871]
[160.96426392 363.05245972]
[149.39657593 365.46789551]
[137.73428345 367.37493896]
[125.99971771 368.76986694]
[114.21536255 369.65005493]
[102.40377808 370.01379395]
[90.58759308 369.86041260]
[78.78942871 369.19015503]
[67.03189087 368.00436401]
[55.33749771 366.30526733]
[43.72864151 364.09613037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[40 53]
[41 52]
[42 51]
[43 50]
] def

init

% Start Annotations
16 34 0.32 1 colorpair
17 33 0.32 1 colorpair
18 32 0.0 0.6 colorpair
19 31 0.0 1 colorpair
20 30 0.0 0.6 colorpair
21 29 0.32 1 colorpair
40 53 0.16 0.6 colorpair
41 52 0.0 1 colorpair
42 51 0.16 1 colorpair
43 50 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
16 cmark
34 cmark
17 cmark
33 cmark
18 32 1 gmark
20 30 1 gmark
21 cmark
29 cmark
40 53 1 gmark
40 cmark
53 cmark
51 cmark
43 cmark

% End Annotations
showpage
end
%%EOF
