%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:38:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______AUGACG__AUGAUGCA_GUUAGGCAUUGC_CUUCUGACACGACUUAGCGGCUCAAGACAUCCCGGGUAUAAUCGCGGGAAUGGUUGUGAACUGG___________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[5.59720850 400.62609863]
[-7.40978289 396.22808838]
[-20.21282959 391.26760864]
[-32.78762054 385.75405884]
[-45.11027527 379.69796753]
[-57.15740204 373.11077881]
[-68.90612793 366.00500488]
[-80.33413696 358.39416504]
[-91.41973114 350.29266357]
[-102.14186859 341.71594238]
[-112.48018646 332.68026733]
[-122.41505432 323.20278931]
[-131.92761230 313.30148315]
[-140.99978638 302.99517822]
[-149.61436462 292.30343628]
[-157.75497437 281.24655151]
[-170.22702026 289.58010864]
[-182.69906616 297.91366577]
[-195.17111206 306.24719238]
[-207.64315796 314.58074951]
[-220.11520386 322.91430664]
[-221.63764954 338.47760010]
[-232.84391785 349.38418579]
[-248.44274902 350.48431396]
[-261.06887817 341.25851440]
[-264.76058960 326.06292725]
[-257.77481079 312.07247925]
[-243.40997314 305.89300537]
[-228.44876099 310.44226074]
[-215.97671509 302.10870361]
[-203.50466919 293.77514648]
[-191.03262329 285.44161987]
[-178.56057739 277.10806274]
[-166.08853149 268.77450562]
[-176.07223511 251.89489746]
[-184.98655701 234.42692566]
[-192.79698181 216.43824768]
[-199.47325134 197.99853516]
[-204.98948669 179.17922974]
[-209.32434082 160.05320740]
[-212.46101379 140.69458008]
[-214.38737488 121.17832184]
[-215.09593201 101.58002472]
[-214.58395386 81.97560883]
[-212.85342407 62.44100571]
[-209.91104126 43.05189133]
[-205.76820374 23.88336945]
[-200.44097900 5.00968599]
[-193.94996643 -13.49604797]
[-186.32034302 -31.56215096]
[-177.58164978 -49.11864471]
[-167.76771545 -66.09751892]
[-156.91659546 -82.43301392]
[-145.07028198 -98.06184387]
[-132.27468872 -112.92347717]
[-143.08749390 -123.31978607]
[-153.90029907 -133.71609497]
[-169.94203186 -137.12124634]
[-174.75593567 -152.79792786]
[-163.38989258 -164.61930847]
[-147.53631592 -160.42457581]
[-143.50398254 -144.52890015]
[-132.69119263 -134.13258362]
[-121.87837982 -123.73628235]
[-111.92078400 -133.18988037]
[-101.56079865 -142.20071411]
[-90.81809235 -150.75166321]
[-79.71307373 -158.82649231]
[-68.26681519 -166.40986633]
[-56.50106049 -173.48739624]
[-44.43814850 -180.04563904]
[-32.10098267 -186.07214355]
[-19.51298904 -191.55545044]
[-6.69806719 -196.48518372]
[6.31944895 -200.85194397]
[19.51484299 -204.64746094]
[32.86305618 -207.86453247]
[46.33875275 -210.49703979]
[59.91633224 -212.53997803]
[73.57003021 -213.98948669]
[87.27390289 -214.84278870]
[101.00194550 -215.09829712]
[114.72808075 -214.75549316]
[128.42625427 -213.81504822]
[142.07044983 -212.27874756]
[155.63476562 -210.14950562]
[169.09344482 -207.43135071]
[182.42092896 -204.12945557]
[195.59191895 -200.25010681]
[208.58140564 -195.80064392]
[221.36471558 -190.78952026]
[233.91758728 -185.22625732]
[246.21618652 -179.12141418]
[258.23715210 -172.48660278]
[269.95764160 -165.33438110]
[281.35543823 -157.67837524]
[292.40887451 -149.53308105]
[303.09698486 -140.91398621]
[313.39947510 -131.83746338]
[323.29675293 -122.32071686]
[332.77005005 -112.38185120]
[341.80136108 -102.03971100]
[350.37353516 -91.31395721]
[358.47033691 -80.22493744]
[366.07635498 -68.79370880]
[373.17715454 -57.04198456]
[379.75924683 -44.99207687]
[385.81015015 -32.66685867]
[391.31835938 -20.08974266]
[396.27343750 -7.28460121]
[400.66595459 5.72424746]
[404.48757935 18.91210365]
[407.73107910 32.25392532]
[410.39022827 45.72438431]
[412.46005249 59.29789734]
[413.93655396 72.94869232]
[414.81698608 86.65085602]
[415.09967041 100.37836456]
[414.78402710 114.10515594]
[413.87069702 127.80516052]
[412.36138916 141.45237732]
[410.25900269 155.02087402]
[407.56747437 168.48490906]
[404.29196167 181.81890869]
[400.43869019 194.99754333]
[396.01495361 207.99580383]
[391.02911377 220.78901672]
[385.49072266 233.35285950]
[379.41024780 245.66351318]
[372.79922485 257.69757080]
[365.67022705 269.43222046]
[358.03677368 280.84515381]
[349.91336060 291.91467285]
[341.31542969 302.61984253]
[332.25930786 312.94024658]
[322.76217651 322.85632324]
[312.84207153 332.34927368]
[302.51785278 341.40103149]
[291.80908203 349.99444580]
[280.73608398 358.11315918]
[269.31994629 365.74179077]
[257.58230591 372.86581421]
[245.54544067 379.47177124]
[233.23222351 385.54705811]
[220.66603088 391.08013916]
[207.87071228 396.06054688]
[194.87059021 400.47879028]
[181.69032288 404.32650757]
[168.35493469 407.59640503]
[154.88977051 410.28222656]
[141.32037354 412.37887573]
[127.67253113 413.88241577]
[113.97213745 414.78994751]
[100.24521637 415.09979248]
[86.51782990 414.81130981]
[72.81604004 413.92510986]
[59.16587067 412.44281006]
[45.59323120 410.36727905]
[32.12390137 407.70242310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[55 64]
[56 63]
[57 62]
] def

init

% Start Annotations
16 34 0.32 1 colorpair
17 33 0.32 1 colorpair
18 32 0.0 0.6 colorpair
19 31 0.0 1 colorpair
20 30 0.0 0.2 colorpair
21 29 0.32 1 colorpair
55 64 0.16 0.6 colorpair
56 63 0.16 0.6 colorpair
57 62 0.32 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
16 cmark
34 cmark
17 cmark
33 cmark
18 32 1 gmark
20 30 2 gmark
21 cmark
29 cmark
55 64 1 gmark
55 cmark
64 cmark
56 63 1 gmark
56 cmark
63 cmark
57 cmark
62 cmark

% End Annotations
showpage
end
%%EOF
