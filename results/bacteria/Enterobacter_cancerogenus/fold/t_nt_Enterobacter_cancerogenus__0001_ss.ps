%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:08:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________ACGAGCGCCGCGGAUAGGGUUGUACUCAACCUCAAACACACUGUUGAUCUU___CUGCA_ACUGCGCGAUGCGCUAC_UGAAAUACAU________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[224.55252075 338.64138794]
[215.98295593 326.32327271]
[208.26452637 313.45477295]
[201.43246460 300.09451294]
[195.51794434 286.30352783]
[190.54794312 272.14471436]
[186.54513550 257.68267822]
[183.52780151 242.98341370]
[181.50968933 228.11396790]
[180.50003052 213.14221191]
[180.50341797 198.13645935]
[181.51982117 183.16516113]
[183.54463196 168.29663086]
[186.56860352 153.59870911]
[190.57791138 139.13848877]
[176.42671204 134.16419983]
[162.27551270 129.18991089]
[148.12431335 124.21561432]
[133.97311401 119.24132538]
[119.77316284 114.40796661]
[105.52586365 109.71601868]
[91.23262024 105.16594696]
[76.89485168 100.75818634]
[62.55707550 96.35043335]
[48.21930695 91.94268036]
[33.88153458 87.53492737]
[17.54573441 97.04497528]
[-0.26555911 91.74028015]
[-8.45116425 75.41046906]
[-22.95283699 71.57621765]
[-37.45450974 67.74196625]
[-51.95618439 63.90771866]
[-66.45785522 60.07346725]
[-73.55930328 73.36505127]
[-83.53503418 84.66024780]
[-95.84706116 93.34993744]
[-109.83142853 98.96547699]
[-124.73396301 101.20403290]
[-139.75099182 99.94489288]
[-154.07267761 95.25594330]
[-166.92665100 87.39007568]
[-177.61973572 76.77146149]
[-185.57524109 63.97277069]
[-190.36415100 49.68420792]
[-191.72821045 34.67634201]
[-189.59385681 19.75852585]
[-184.07617188 5.73526001]
[-175.47274780 -6.63719845]
[-164.24754333 -16.69161797]
[-151.00590515 -23.88577843]
[-136.46195984 -27.83170509]
[-121.40003204 -28.31660080]
[-106.63240051 -25.31431580]
[-92.95545959 -18.98675919]
[-81.10678864 -9.67516804]
[-71.72537231 2.11829591]
[-65.31714630 15.75762463]
[-62.22768402 30.50726700]
[-62.62360764 45.57179260]
[-48.12193298 49.40604401]
[-33.62026215 53.24029160]
[-19.11858749 57.07454300]
[-4.61691475 60.90879059]
[3.81934404 53.13377380]
[15.08344555 50.39256287]
[26.38088989 53.48509598]
[34.85057449 61.74894333]
[38.28928757 73.19715881]
[52.62705994 77.60491180]
[66.96482849 82.01266479]
[81.30260468 86.42041779]
[95.64037323 90.82817078]
[103.70587921 89.99811554]
[110.21781158 95.46871948]
[124.46511841 100.16066742]
[133.65104675 99.87660217]
[138.94740295 105.09012604]
[153.09860229 110.06441498]
[167.24980164 115.03870392]
[181.40100098 120.01299286]
[195.55220032 124.98728180]
[201.47259521 111.19881439]
[208.31033325 97.84147644]
[216.03422546 84.97623444]
[224.60902405 72.66178894]
[233.99560547 60.95431519]
[244.15115356 49.90724182]
[255.02932739 39.57097244]
[266.58047485 29.99267006]
[278.75189209 21.21603775]
[291.48806763 13.28112221]
[304.73086548 6.22412825]
[318.41989136 0.07725627]
[332.49264526 -5.13144732]
[346.88491821 -9.37821579]
[361.53106689 -12.64367199]
[376.36425781 -14.91291618]
[391.31680298 -16.17559433]
[406.32046509 -16.42594528]
[421.30682373 -15.66282749]
[436.20745850 -13.88972092]
[450.95440674 -11.11471748]
[465.48034668 -7.35047865]
[479.71905518 -2.61417961]
[493.60552979 3.07256889]
[507.07638550 9.68381882]
[520.07019043 17.18940353]
[532.52764893 25.55508041]
[544.39196777 34.74267197]
[555.60888672 44.71026230]
[566.12731934 55.41236877]
[575.89929199 66.80016327]
[584.88018799 78.82167816]
[593.02899170 91.42207336]
[600.30853271 104.54383850]
[606.68566895 118.12712097]
[612.13122559 132.10992432]
[616.62036133 146.42846680]
[620.13262939 161.01739502]
[622.65197754 175.81015015]
[624.16693115 190.73925781]
[624.67053223 205.73655701]
[624.16052246 220.73365784]
[622.63928223 235.66210938]
[620.11364746 250.45379639]
[616.59515381 265.04122925]
[612.09991455 279.35787964]
[606.64843750 293.33834839]
[600.26556396 306.91891479]
[592.98040771 320.03759766]
[584.82629395 332.63452148]
[575.84027100 344.65222168]
[566.06347656 356.03585815]
[555.54046631 366.73352051]
[544.31933594 376.69631958]
[532.45111084 385.87887573]
[519.99011230 394.23925781]
[506.99310303 401.73931885]
[493.51943970 408.34484863]
[479.63055420 414.02569580]
[465.38986206 418.75595093]
[450.86230469 422.51403809]
[436.11416626 425.28277588]
[421.21279907 427.04953003]
[406.22610474 427.80630493]
[391.22256470 427.54956055]
[376.27053833 426.28054810]
[361.43832397 424.00500488]
[346.79354858 420.73330688]
[332.40307617 416.48043823]
[318.33255005 411.26574707]
[304.64614868 405.11306763]
[291.40634155 398.05044556]
[278.67355347 390.11010742]
[266.50585938 381.32830811]
[254.95877075 371.74511719]
[244.08499146 361.40420532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 75]
[21 74]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
] def

init

% Start Annotations
15 81 0.16 1 colorpair
16 80 0.16 1 colorpair
17 79 0.16 1 colorpair
18 78 0.0 1 colorpair
19 77 0.0 1 colorpair
20 75 0.16 1 colorpair
21 74 0.16 1 colorpair
22 72 0.0 0.6 colorpair
23 71 0.0 0.6 colorpair
24 70 0.16 1 colorpair
25 69 0.0 0.6 colorpair
26 68 0.0 1 colorpair
29 63 0.0 1 colorpair
30 62 0.16 1 colorpair
31 61 0.0 1 colorpair
32 60 0.16 1 colorpair
33 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 cmark
80 cmark
17 cmark
79 cmark
20 cmark
75 cmark
21 cmark
74 cmark
22 72 1 gmark
23 71 1 gmark
24 cmark
25 69 1 gmark
30 cmark
62 cmark
32 cmark
60 cmark

% End Annotations
showpage
end
%%EOF
