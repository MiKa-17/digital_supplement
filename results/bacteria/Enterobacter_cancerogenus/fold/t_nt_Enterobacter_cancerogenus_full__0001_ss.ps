%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:08:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____________AUGAGCGUCGUGGAUAUGGUUGUACUCAUCCUCAAACUCAUUGUUGCUGUU___CUGCA_ACUGCUUGAUGCUGUCC_UGAAAUAC_U________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[230.39259338 340.56463623]
[221.82302856 328.24655151]
[214.10459900 315.37802124]
[207.27253723 302.01779175]
[201.35801697 288.22680664]
[196.38801575 274.06799316]
[192.38520813 259.60595703]
[189.36787415 244.90667725]
[187.34976196 230.03723145]
[186.34010315 215.06547546]
[186.34347534 200.05972290]
[187.35989380 185.08840942]
[189.38470459 170.21989441]
[192.40866089 155.52197266]
[196.41798401 141.06175232]
[182.26678467 136.08746338]
[168.11558533 131.11317444]
[153.96438599 126.13887787]
[139.81318665 121.16458893]
[125.61323547 116.33123016]
[111.36593628 111.63928223]
[95.06520081 115.50177765]
[83.99714661 102.92676544]
[69.65937042 98.51901245]
[55.32159805 94.11125946]
[40.98382568 89.70350647]
[24.64802933 99.21355438]
[6.83673477 93.90885925]
[-1.34886992 77.57904816]
[-15.85054302 73.74479675]
[-30.35221672 69.91054535]
[-44.85388947 66.07629395]
[-59.35556412 62.24204636]
[-66.45700836 75.53363037]
[-76.43273926 86.82882690]
[-88.74477386 95.51851654]
[-102.72913361 101.13405609]
[-117.63166809 103.37261200]
[-132.64869690 102.11347198]
[-146.97038269 97.42452240]
[-159.82435608 89.55865479]
[-170.51744080 78.94004059]
[-178.47294617 66.14134979]
[-183.26185608 51.85278702]
[-184.62591553 36.84492111]
[-182.49156189 21.92710495]
[-176.97387695 7.90383863]
[-168.37045288 -4.46861935]
[-157.14524841 -14.52303982]
[-143.90361023 -21.71719933]
[-129.35966492 -25.66312599]
[-114.29774475 -26.14802170]
[-99.53010559 -23.14573669]
[-85.85316467 -16.81818008]
[-74.00449371 -7.50658846]
[-64.62308502 4.28687525]
[-58.21485138 17.92620468]
[-55.12539291 32.67584610]
[-55.52131271 47.74037170]
[-41.01964188 51.57462311]
[-26.51796722 55.40887070]
[-12.01629353 59.24312210]
[2.48537946 63.07736969]
[10.92163754 55.30235291]
[22.18573952 52.56114197]
[33.48318481 55.65367508]
[41.95286942 63.91752243]
[45.39158249 75.36573792]
[59.72935486 79.77349091]
[74.06712341 84.18124390]
[88.40489960 88.58899689]
[99.04066467 83.76001740]
[110.17099762 87.30322266]
[116.05788422 97.39198303]
[130.30519104 102.08393097]
[139.49111938 101.79986572]
[144.78747559 107.01338959]
[158.93867493 111.98767853]
[173.08987427 116.96196747]
[187.24107361 121.93625641]
[201.39227295 126.91054535]
[207.31266785 113.12207794]
[214.15039062 99.76473999]
[221.87428284 86.89949799]
[230.44909668 74.58505249]
[239.83567810 62.87757874]
[249.99122620 51.83050537]
[260.86938477 41.49423599]
[272.42053223 31.91593361]
[284.59197998 23.13930130]
[297.32815552 15.20438576]
[310.57095337 8.14739132]
[324.25994873 2.00051951]
[338.33270264 -3.20818400]
[352.72497559 -7.45495224]
[367.37112427 -10.72040844]
[382.20431519 -12.98965359]
[397.15686035 -14.25233173]
[412.16055298 -14.50268269]
[427.14688110 -13.73956394]
[442.04754639 -11.96645832]
[456.79446411 -9.19145393]
[471.32043457 -5.42721510]
[485.55911255 -0.69091624]
[499.44558716 4.99583197]
[512.91644287 11.60708237]
[525.91027832 19.11266708]
[538.36773682 27.47834206]
[550.23199463 36.66593552]
[561.44897461 46.63352585]
[571.96740723 57.33563232]
[581.73937988 68.72342682]
[590.72027588 80.74494171]
[598.86907959 93.34533691]
[606.14862061 106.46710205]
[612.52575684 120.05038452]
[617.97131348 134.03318787]
[622.46044922 148.35173035]
[625.97271729 162.94065857]
[628.49206543 177.73341370]
[630.00701904 192.66252136]
[630.51062012 207.65982056]
[630.00061035 222.65692139]
[628.47930908 237.58537292]
[625.95367432 252.37705994]
[622.43524170 266.96450806]
[617.94000244 281.28112793]
[612.48852539 295.26162720]
[606.10565186 308.84219360]
[598.82049561 321.96087646]
[590.66632080 334.55780029]
[581.68035889 346.57550049]
[571.90356445 357.95913696]
[561.38055420 368.65676880]
[550.15936279 378.61959839]
[538.29119873 387.80215454]
[525.83020020 396.16253662]
[512.83319092 403.66259766]
[499.35949707 410.26812744]
[485.47064209 415.94897461]
[471.22991943 420.67922974]
[456.70236206 424.43728638]
[441.95425415 427.20602417]
[427.05285645 428.97280884]
[412.06619263 429.72955322]
[397.06262207 429.47283936]
[382.11062622 428.20379639]
[367.27838135 425.92825317]
[352.63363647 422.65658569]
[338.24316406 418.40368652]
[324.17260742 413.18902588]
[310.48620605 407.03631592]
[297.24642944 399.97369385]
[284.51361084 392.03338623]
[272.34591675 383.25158691]
[260.79882812 373.66836548]
[249.92506409 363.32748413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 75]
[21 74]
[23 71]
[24 70]
[25 69]
[26 68]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
] def

init

% Start Annotations
15 81 0.16 1 colorpair
16 80 0.16 1 colorpair
17 79 0.16 1 colorpair
18 78 0.0 1 colorpair
19 77 0.0 1 colorpair
20 75 0.16 1 colorpair
21 74 0.16 1 colorpair
23 71 0.0 0.6 colorpair
24 70 0.16 1 colorpair
25 69 0.0 0.6 colorpair
26 68 0.0 1 colorpair
29 63 0.0 1 colorpair
30 62 0.16 1 colorpair
31 61 0.0 1 colorpair
32 60 0.16 1 colorpair
33 59 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 cmark
80 cmark
17 cmark
79 cmark
20 cmark
75 cmark
21 cmark
74 cmark
23 71 1 gmark
24 cmark
25 69 1 gmark
30 cmark
62 cmark
32 cmark
60 cmark

% End Annotations
showpage
end
%%EOF
