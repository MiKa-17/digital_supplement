%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:08:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______________________________________________________GGGUGCGUGAG__GCUAUAUGACUUAAACUUUAGCCAGGGACAAAAAGUGGAGAGUCCCGCG________________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[503.63137817 822.53253174]
[488.86273193 819.90045166]
[474.18917847 816.78143311]
[459.62677002 813.17901611]
[445.19140625 809.09710693]
[430.89892578 804.54010010]
[416.76492310 799.51306152]
[402.80487061 794.02142334]
[389.03402710 788.07128906]
[375.46740723 781.66900635]
[362.11993408 774.82171631]
[349.00610352 767.53686523]
[336.14035034 759.82238770]
[323.53668213 751.68670654]
[311.20889282 743.13879395]
[299.17044067 734.18798828]
[287.43453979 724.84399414]
[276.01400757 715.11712646]
[264.92132568 705.01794434]
[254.16860962 694.55749512]
[243.76763916 683.74731445]
[233.72976685 672.59906006]
[224.06597900 661.12512207]
[214.78684998 649.33782959]
[205.90252686 637.25024414]
[197.42269897 624.87554932]
[189.35667419 612.22717285]
[181.71325684 599.31909180]
[174.50079346 586.16534424]
[167.72718811 572.78027344]
[161.39984131 559.17858887]
[155.52566528 545.37512207]
[150.11109924 531.38500977]
[145.16204834 517.22351074]
[140.68392944 502.90612793]
[136.68164062 488.44848633]
[133.15956116 473.86642456]
[130.12153625 459.17590332]
[127.57089233 444.39297485]
[125.51042175 429.53378296]
[123.94236755 414.61456299]
[122.86845398 399.65170288]
[122.28984833 384.66146851]
[122.20718384 369.66033936]
[122.62055969 354.66464233]
[123.52951050 339.69085693]
[124.93305206 324.75527954]
[126.82965088 309.87426758]
[129.21722412 295.06411743]
[132.09317017 280.34100342]
[135.45433044 265.72100830]
[139.29704285 251.22016907]
[143.61711121 236.85429382]
[148.40979004 222.63911438]
[153.66986084 208.59016418]
[159.39155579 194.72280884]
[165.56861877 181.05221558]
[172.19430542 167.59333801]
[179.26136780 154.36088562]
[166.27098083 146.86088562]
[153.28060913 139.36088562]
[140.29022217 131.86088562]
[127.29984283 124.36088562]
[114.30946350 116.86088562]
[101.31908417 109.36088562]
[96.07827759 109.53601074]
[91.11206818 106.76313782]
[88.06085205 101.44325256]
[75.29732513 93.56336975]
[59.41701126 95.84264374]
[47.83300400 84.74353027]
[49.43156815 68.78031921]
[62.98641968 60.19861984]
[78.09943390 65.58157349]
[83.17720795 80.79985046]
[95.94072723 88.67972565]
[108.81908417 96.37050629]
[121.80946350 103.87050629]
[134.79985046 111.37050629]
[147.79022217 118.87050629]
[160.78060913 126.37050629]
[173.77098083 133.87049866]
[186.76136780 141.37049866]
[194.68748474 128.63401794]
[203.03036499 116.16656494]
[211.78091431 103.98177338]
[220.92955017 92.09296417]
[230.46626282 80.51313782]
[240.38063049 69.25496674]
[250.66180420 58.33074570]
[261.29855347 47.75242996]
[272.27923584 37.53158569]
[283.59185791 27.67938614]
[295.22406006 18.20660782]
[307.16308594 9.12360954]
[319.39590454 0.44032076]
[331.90911865 -7.83376217]
[344.68905640 -15.68959141]
[357.72177124 -23.11857796]
[370.99298096 -30.11259651]
[384.48818970 -36.66400146]
[398.19259644 -42.76562500]
[412.09127808 -48.41080093]
[426.16900635 -53.59334946]
[440.41040039 -58.30760956]
[454.79986572 -62.54842377]
[469.32168579 -66.31115723]
[483.95996094 -69.59169006]
[498.69869995 -72.38643646]
[513.52178955 -74.69234467]
[528.41302490 -76.50688934]
[543.35607910 -77.82808685]
[558.33471680 -78.65449524]
[573.33239746 -78.98520660]
[588.33288574 -78.81986237]
[603.31970215 -78.15864563]
[618.27642822 -77.00227356]
[633.18676758 -75.35201263]
[648.03436279 -73.20967102]
[662.80303955 -70.57758331]
[677.47656250 -67.45863342]
[692.03900146 -63.85623550]
[706.47436523 -59.77432251]
[720.76684570 -55.21736145]
[734.90081787 -50.19033051]
[748.86090088 -44.69873047]
[762.63177490 -38.74856949]
[776.19836426 -32.34634399]
[789.54589844 -25.49906540]
[802.65972900 -18.21421623]
[815.52551270 -10.49976254]
[828.12915039 -2.36413980]
[840.45697021 6.18375540]
[852.49542236 15.13457584]
[864.23132324 24.47853279]
[875.65185547 34.20541382]
[886.74456787 44.30457306]
[897.49731445 54.76497650]
[907.89831543 65.57518005]
[917.93621826 76.72337341]
[927.59997559 88.19734955]
[936.87915039 99.98457336]
[945.76348877 112.07215118]
[954.24334717 124.44686890]
[962.30938721 137.09518433]
[969.95281982 150.00329590]
[977.16528320 163.15704346]
[983.93890381 176.54208374]
[990.26629639 190.14376831]
[996.14050293 203.94720459]
[1001.55505371 217.93733215]
[1006.50415039 232.09881592]
[1010.98229980 246.41619873]
[1014.98461914 260.87380981]
[1018.50671387 275.45587158]
[1021.54473877 290.14639282]
[1024.09545898 304.92932129]
[1026.15588379 319.78851318]
[1027.72399902 334.70773315]
[1028.79797363 349.67059326]
[1029.37658691 364.66079712]
[1029.45922852 379.66195679]
[1029.04589844 394.65762329]
[1028.13696289 409.63143921]
[1026.73339844 424.56701660]
[1024.83691406 439.44802856]
[1022.44934082 454.25817871]
[1019.57336426 468.98129272]
[1016.21221924 483.60128784]
[1012.36956787 498.10214233]
[1008.04949951 512.46801758]
[1003.25683594 526.68322754]
[997.99682617 540.73217773]
[992.27514648 554.59954834]
[986.09808350 568.27014160]
[979.47241211 581.72900391]
[972.40539551 594.96148682]
[964.90466309 607.95306396]
[956.97857666 620.68951416]
[948.63568115 633.15698242]
[939.88507080 645.34173584]
[930.73645020 657.23052979]
[921.19970703 668.81036377]
[911.28533936 680.06854248]
[901.00415039 690.99273682]
[890.36737061 701.57104492]
[879.38665771 711.79187012]
[868.07403564 721.64404297]
[856.44183350 731.11682129]
[844.50280762 740.19976807]
[832.26995850 748.88305664]
[819.75671387 757.15710449]
[806.97674561 765.01293945]
[793.94403076 772.44189453]
[780.67285156 779.43585205]
[767.17761230 785.98724365]
[753.47320557 792.08886719]
[739.57446289 797.73400879]
[725.49676514 802.91656494]
[711.25537109 807.63079834]
[696.86590576 811.87158203]
[682.34405518 815.63427734]
[667.70581055 818.91479492]
[652.96704102 821.70953369]
[638.14392090 824.01544189]
[623.25268555 825.82995605]
[608.30963135 827.15112305]
[593.33105469 827.97747803]
[578.33331299 828.30816650]
[563.33282471 828.14282227]
[548.34606934 827.48156738]
[533.38934326 826.32519531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[68 76]
[69 75]
] def

init

% Start Annotations
59 83 0.16 1 colorpair
60 82 0.0 0.2 colorpair
61 81 0.48 1 colorpair
62 80 0.32 1 colorpair
63 79 0.32 0.6 colorpair
64 78 0.16 1 colorpair
65 77 0.16 1 colorpair
68 76 0.32 0.6 colorpair
69 75 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
83 cmark
60 82 2 gmark
61 cmark
81 cmark
62 cmark
80 cmark
63 79 1 gmark
63 cmark
79 cmark
64 cmark
78 cmark
65 cmark
77 cmark
68 76 1 gmark
68 cmark
76 cmark
69 75 1 gmark

% End Annotations
showpage
end
%%EOF
