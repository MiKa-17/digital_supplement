%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:08:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AUGACCGUAGUGGAUAUGG_U_GA_UACUUGUCC__UC___AAACUCAU_____UGUUGCUGUACUGCAACU_________GCUUGAUGCUGUCC_UGAAAUACCU_____________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[69.42472076 487.93078613]
[54.49751663 486.46432495]
[39.63791656 484.42367554]
[24.86799240 481.81188965]
[10.20969486 478.63287354]
[-4.31520224 474.89129639]
[-18.68511772 470.59274292]
[-32.87870407 465.74362183]
[-46.87487411 460.35110474]
[-60.65282822 454.42321777]
[-74.19210815 447.96875000]
[-87.47257996 440.99731445]
[-100.47453308 433.51925659]
[-113.17864227 425.54571533]
[-125.56602478 417.08850098]
[-137.61828613 408.16015625]
[-149.31752014 398.77401733]
[-160.64634705 388.94396973]
[-171.58793640 378.68466187]
[-182.12602234 368.01129150]
[-192.24494934 356.93972778]
[-201.92970276 345.48645020]
[-211.16586304 333.66845703]
[-219.93972778 321.50329590]
[-228.23826599 309.00903320]
[-236.04914856 296.20425415]
[-243.36074829 283.10800171]
[-250.16223145 269.73968506]
[-256.44345093 256.11917114]
[-262.19512939 242.26673889]
[-267.40869141 228.20292664]
[-272.07641602 213.94863892]
[-276.19131470 199.52507019]
[-279.74731445 184.95362854]
[-282.73913574 170.25598145]
[-285.16229248 155.45394897]
[-287.01324463 140.56951904]
[-288.28921509 125.62483215]
[-288.98828125 110.64206696]
[-289.10943604 95.64348602]
[-288.65249634 80.65138245]
[-287.61816406 65.68802643]
[-286.00790405 50.77564621]
[-283.82418823 35.93639755]
[-281.07019043 21.19232941]
[-277.75006104 6.56534433]
[-273.86871338 -7.92282438]
[-269.43188477 -22.25065231]
[-264.44619751 -36.39685440]
[-258.91906738 -50.34040833]
[-252.85870361 -64.06060791]
[-246.27407837 -77.53705597]
[-239.17500305 -90.74974060]
[-231.57200623 -103.67903137]
[-223.47639465 -116.30570984]
[-214.90020752 -128.61102295]
[-205.85617065 -140.57670593]
[-196.35771179 -152.18495178]
[-186.41896057 -163.41851807]
[-176.05468750 -174.26074219]
[-165.28027344 -184.69549561]
[-154.11172485 -194.70726013]
[-142.56565857 -204.28118896]
[-151.68806458 -216.18840027]
[-160.81048584 -228.09561157]
[-176.50892639 -229.92161560]
[-186.25257874 -242.36495972]
[-184.26071167 -258.04321289]
[-171.71504211 -267.65475464]
[-156.05871582 -265.49725342]
[-146.58033752 -252.85066223]
[-148.90327454 -237.21801758]
[-139.78086853 -225.31082153]
[-130.65844727 -213.40361023]
[-118.40928650 -222.05981445]
[-105.83563232 -230.23754883]
[-92.95616913 -237.92463684]
[-79.79003143 -245.10968018]
[-66.35677338 -251.78198242]
[-52.67636871 -257.93164062]
[-38.76913071 -263.54953003]
[-24.65572357 -268.62731934]
[-10.35711479 -273.15740967]
[4.10545015 -277.13311768]
[18.71048546 -280.54849243]
[33.43629456 -283.39849854]
[48.26099396 -285.67889404]
[63.16256332 -287.38629150]
[78.11885834 -288.51815796]
[93.10766602 -289.07278442]
[108.10671997 -289.04937744]
[123.09371948 -288.44796753]
[138.04641724 -287.26943970]
[152.94258118 -285.51553345]
[167.76008606 -283.18887329]
[182.47692871 -280.29290771]
[197.07122803 -276.83193970]
[211.52131653 -272.81112671]
[225.80572510 -268.23641968]
[239.90321350 -263.11462402]
[253.79284668 -257.45336914]
[267.45397949 -251.26101685]
[280.86636353 -244.54681396]
[294.01000977 -237.32070923]
[306.86541748 -229.59346008]
[319.41348267 -221.37652588]
[331.63555908 -212.68212891]
[343.51348877 -203.52317810]
[355.02966309 -193.91328430]
[366.16693115 -183.86671448]
[376.90872192 -173.39842224]
[387.23916626 -162.52392578]
[397.14282227 -151.25939941]
[406.60501099 -139.62159729]
[415.61169434 -127.62776947]
[424.14947510 -115.29576111]
[432.20565796 -102.64389038]
[439.76828003 -89.69095612]
[446.82611084 -76.45619202]
[453.36868286 -62.95927048]
[459.38623047 -49.22023773]
[464.86984253 -35.25951385]
[469.81137085 -21.09782982]
[474.20349121 -6.75623417]
[478.03964233 7.74396992]
[481.31414795 22.38123894]
[484.02212524 37.13382339]
[486.15954590 51.97981262]
[487.72326660 66.89714050]
[488.71096802 81.86365509]
[489.12115479 96.85710907]
[488.95321655 111.85523224]
[488.20739746 126.83574677]
[486.88482666 141.77638245]
[484.98748779 156.65496826]
[482.51815796 171.44937134]
[479.48049927 186.13761902]
[475.87905884 200.69789124]
[471.71920776 215.10856628]
[467.00704956 229.34822083]
[461.74966431 243.39569092]
[455.95480347 257.23013306]
[449.63110352 270.83096313]
[442.78799438 284.17800903]
[435.43557739 297.25143433]
[427.58477783 310.03176880]
[419.24731445 322.50009155]
[410.43554688 334.63781738]
[401.16256714 346.42694092]
[391.44216919 357.84997559]
[381.28875732 368.88992310]
[370.71740723 379.53036499]
[359.74389648 389.75549316]
[348.38446045 399.55017090]
[336.65600586 408.89978027]
[324.57595825 417.79046631]
[312.16226196 426.20901489]
[299.43334961 434.14291382]
[286.40814209 441.58038330]
[273.10595703 448.51034546]
[259.54663086 454.92254639]
[245.75025940 460.80743408]
[231.73733521 466.15628052]
[217.52868652 470.96112061]
[203.14544678 475.21481323]
[188.60894775 478.91107178]
[173.94079590 482.04437256]
[159.16281128 484.61007690]
[144.29690552 486.60433960]
[129.36520386 488.02426147]
[114.38987732 488.86767578]
[99.39315796 489.13336182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[63 74]
[64 73]
[65 72]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
63 74 13 gmark
63 cmark
74 cmark
64 73 8 gmark
64 cmark
73 cmark
65 72 42 gmark
65 cmark
72 cmark

% End Annotations
showpage
end
%%EOF
