%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 19:08:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__UAUGAGGCUACUCUAAACU_UGUUGAUAGUUGUGG__UU___UAACCUCU______GGUUAAUGAACUUUACCU______GGGGCUUGAUACUUUCUGUGACUUACCA__________________GAGCU_GGCGGCAGAA__AGCCU_AAGCGCC____________\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50843048 91.94893646]
[62.54721832 90.84751892]
[47.63656616 89.19724274]
[32.79660416 87.00032043]
[18.04736519 84.25973511]
[3.40875626 80.97917938]
[-11.09945774 77.16307068]
[-25.45769310 72.81658173]
[-39.64656448 67.94556427]
[-53.64692307 62.55659866]
[-67.43986511 56.65696335]
[-81.00676727 50.25461578]
[-94.32932281 43.35820389]
[-107.38953400 35.97703552]
[-120.16978455 28.12107277]
[-132.65281677 19.80092621]
[-144.82177734 11.02782345]
[-156.66024780 1.81360996]
[-168.15222168 -7.82927656]
[-179.28221130 -17.88781929]
[-190.03518677 -28.34843636]
[-200.39662170 -39.19701004]
[-210.35253906 -50.41889572]
[-219.88948059 -61.99893951]
[-228.99459839 -73.92151642]
[-237.65559387 -86.17052460]
[-245.86076355 -98.72943115]
[-253.59902954 -111.58128357]
[-260.85995483 -124.70872498]
[-267.63375854 -138.09403992]
[-273.91125488 -151.71916199]
[-279.68395996 -165.56570435]
[-284.94415283 -179.61494446]
[-289.68466187 -193.84796143]
[-293.89913940 -208.24549866]
[-297.58184814 -222.78814697]
[-300.72784424 -237.45625305]
[-303.33288574 -252.23004150]
[-305.39343262 -267.08953857]
[-306.90673828 -282.01473999]
[-307.87069702 -296.98541260]
[-308.28408813 -311.98141479]
[-308.14630127 -326.98248291]
[-307.45751953 -341.96835327]
[-306.21871948 -356.91882324]
[-304.43151855 -371.81369019]
[-302.09835815 -386.63284302]
[-299.22241211 -401.35629272]
[-295.80749512 -415.96414185]
[-291.85827637 -430.43667603]
[-287.38006592 -444.75436401]
[-282.37887573 -458.89788818]
[-276.86154175 -472.84814453]
[-270.83541870 -486.58630371]
[-264.30871582 -500.09384155]
[-257.29019165 -513.35247803]
[-249.78936768 -526.34429932]
[-241.81632996 -539.05187988]
[-233.38185120 -551.45794678]
[-224.49731445 -563.54577637]
[-215.17474365 -575.29907227]
[-205.42668152 -586.70202637]
[-195.26631165 -597.73913574]
[-184.70735168 -608.39550781]
[-173.76405334 -618.65686035]
[-162.45117188 -628.50927734]
[-150.78399658 -637.93945312]
[-138.77828979 -646.93463135]
[-126.45022583 -655.48272705]
[-113.81646729 -663.57214355]
[-100.89406586 -671.19201660]
[-87.70046997 -678.33209229]
[-74.25348663 -684.98260498]
[-60.57126999 -691.13464355]
[-46.67228699 -696.77996826]
[-32.57530594 -701.91082764]
[-18.29935265 -706.52038574]
[-3.86369967 -710.60241699]
[10.71216393 -714.15136719]
[25.40856171 -717.16247559]
[40.20565414 -719.63165283]
[55.08346939 -721.55560303]
[70.02191925 -722.93176270]
[85.00083160 -723.75817871]
[100.00000000 -724.03375244]
[114.99916840 -723.75817871]
[129.97808838 -722.93176270]
[144.91653442 -721.55560303]
[159.79434204 -719.63165283]
[174.59143066 -717.16247559]
[189.28784180 -714.15136719]
[203.86369324 -710.60241699]
[218.29934692 -706.52038574]
[232.57530212 -701.91082764]
[246.67228699 -696.77996826]
[260.57125854 -691.13464355]
[274.25347900 -684.98260498]
[287.70046997 -678.33209229]
[300.89407349 -671.19201660]
[313.81646729 -663.57214355]
[326.45022583 -655.48272705]
[338.77828979 -646.93463135]
[350.78399658 -637.93945312]
[362.45117188 -628.50927734]
[373.76403809 -618.65686035]
[384.70736694 -608.39550781]
[395.26632690 -597.73913574]
[405.42669678 -586.70202637]
[415.17474365 -575.29907227]
[424.49731445 -563.54577637]
[433.38183594 -551.45794678]
[441.81631470 -539.05187988]
[449.78936768 -526.34429932]
[457.29019165 -513.35247803]
[464.30871582 -500.09384155]
[470.83541870 -486.58630371]
[476.86154175 -472.84814453]
[482.37887573 -458.89788818]
[487.38006592 -444.75436401]
[491.85827637 -430.43667603]
[495.80749512 -415.96414185]
[499.22241211 -401.35629272]
[502.09835815 -386.63284302]
[504.43151855 -371.81369019]
[506.21871948 -356.91882324]
[507.45751953 -341.96835327]
[508.14630127 -326.98248291]
[508.28408813 -311.98141479]
[507.87069702 -296.98541260]
[506.90673828 -282.01473999]
[505.39343262 -267.08953857]
[503.33288574 -252.23004150]
[500.72784424 -237.45625305]
[497.58184814 -222.78814697]
[493.89913940 -208.24549866]
[489.68466187 -193.84796143]
[484.94415283 -179.61494446]
[479.68395996 -165.56570435]
[473.91125488 -151.71916199]
[467.63375854 -138.09403992]
[460.85995483 -124.70872498]
[453.59902954 -111.58128357]
[445.86074829 -98.72943115]
[437.65557861 -86.17052460]
[428.99459839 -73.92151642]
[419.88949585 -61.99893951]
[410.35253906 -50.41889572]
[400.39660645 -39.19701004]
[390.03518677 -28.34843636]
[379.28222656 -17.88781929]
[368.15222168 -7.82927656]
[356.66024780 1.81360996]
[344.82177734 11.02782345]
[332.65283203 19.80092621]
[320.16979980 28.12107277]
[307.38952637 35.97703552]
[294.32931519 43.35820389]
[281.00677490 50.25461578]
[267.43984985 56.65696335]
[253.64692688 62.55659866]
[239.64656067 67.94556427]
[225.45768738 72.81658173]
[211.09945679 77.16307068]
[196.59124756 80.97917938]
[181.95263672 84.25973511]
[167.20339966 87.00032043]
[152.36343384 89.19724274]
[137.45278931 90.84751892]
[122.49156952 91.94893646]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
