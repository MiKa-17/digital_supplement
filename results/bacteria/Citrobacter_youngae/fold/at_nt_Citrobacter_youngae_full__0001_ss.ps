%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:46:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____A_AGUUAGGGAGGGUUUUCCCU_CCCCCUAGUGU_CUUAGUAAACCGCGAAGCCAACGUGUGAGAGUAUCAC_CAGUAUGAUGA_____U_C_______C______CU_A______CC_C___C__G_G_GG___UUU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51204681 91.84107971]
[62.56750107 90.52446747]
[47.69521332 88.55268860]
[32.92388535 85.92956543]
[18.28203392 82.66015625]
[3.79792047 78.75076294]
[-10.50049686 74.20893860]
[-24.58561897 69.04345703]
[-38.43025589 63.26427460]
[-52.00768661 56.88255692]
[-65.29169464 49.91062164]
[-78.25665283 42.36192322]
[-90.87752533 34.25103378]
[-103.12994385 25.59361076]
[-114.99027252 16.40636444]
[-126.43561554 6.70702744]
[-137.44386292 -3.48567533]
[-147.99378967 -14.15207100]
[-158.06501770 -25.27156830]
[-167.63812256 -36.82270813]
[-176.69459534 -48.78318787]
[-185.21697998 -61.12992477]
[-193.18881226 -73.83908081]
[-200.59471130 -86.88613129]
[-207.42037964 -100.24589539]
[-213.65264893 -113.89257050]
[-219.27947998 -127.79981995]
[-224.29000854 -141.94081116]
[-228.67457581 -156.28822327]
[-232.42471313 -170.81439209]
[-235.53317261 -185.49125671]
[-237.99395752 -200.29048157]
[-239.80233765 -215.18353271]
[-240.95478821 -230.14163208]
[-241.44912720 -245.13591003]
[-241.28434753 -260.13745117]
[-240.46081543 -275.11724854]
[-238.98010254 -290.04641724]
[-236.84504700 -304.89614868]
[-234.05979919 -319.63775635]
[-230.62973022 -334.24282837]
[-226.56144714 -348.68310547]
[-221.86282349 -362.93075562]
[-216.54290771 -376.95828247]
[-210.61196899 -390.73861694]
[-204.08148193 -404.24508667]
[-196.96401978 -417.45172119]
[-189.27334595 -430.33294678]
[-181.02429199 -442.86395264]
[-172.23278809 -455.02053833]
[-162.91578674 -466.77920532]
[-153.09129333 -478.11730957]
[-142.77827454 -489.01290894]
[-131.99661255 -499.44500732]
[-120.76714325 -509.39349365]
[-109.11153412 -518.83911133]
[-97.05227661 -527.76361084]
[-84.61265564 -536.14984131]
[-71.81668854 -543.98156738]
[-58.68906021 -551.24371338]
[-45.25512314 -557.92218018]
[-31.54080009 -564.00415039]
[-17.57257080 -569.47784424]
[-3.37739253 -574.33270264]
[11.01733208 -578.55938721]
[25.58381653 -582.14971924]
[40.29394531 -585.09674072]
[55.11932373 -587.39483643]
[70.03133392 -589.03942871]
[85.00119019 -590.02752686]
[100.00000000 -590.35705566]
[114.99880981 -590.02752686]
[129.96867371 -589.03942871]
[144.88067627 -587.39483643]
[159.70605469 -585.09674072]
[174.41618347 -582.14971924]
[188.98266602 -578.55938721]
[203.37739563 -574.33270264]
[217.57257080 -569.47784424]
[231.54080200 -564.00415039]
[245.25512695 -557.92218018]
[258.68905640 -551.24371338]
[271.81668091 -543.98156738]
[284.61267090 -536.14984131]
[297.05227661 -527.76361084]
[309.11154175 -518.83911133]
[320.76715088 -509.39349365]
[331.99661255 -499.44500732]
[342.77825928 -489.01290894]
[353.09130859 -478.11730957]
[362.91580200 -466.77920532]
[372.23278809 -455.02053833]
[381.02429199 -442.86395264]
[389.27334595 -430.33294678]
[396.96401978 -417.45172119]
[404.08148193 -404.24508667]
[410.61196899 -390.73861694]
[416.54290771 -376.95828247]
[421.86282349 -362.93075562]
[426.56146240 -348.68310547]
[430.62973022 -334.24282837]
[434.05981445 -319.63775635]
[436.84506226 -304.89614868]
[438.98010254 -290.04641724]
[440.46081543 -275.11724854]
[441.28436279 -260.13745117]
[441.44912720 -245.13591003]
[440.95480347 -230.14163208]
[439.80233765 -215.18353271]
[437.99395752 -200.29048157]
[435.53317261 -185.49125671]
[432.42471313 -170.81439209]
[428.67456055 -156.28822327]
[424.29000854 -141.94081116]
[419.27947998 -127.79981995]
[413.65264893 -113.89257050]
[407.42037964 -100.24589539]
[400.59469604 -86.88613129]
[393.18881226 -73.83908081]
[385.21697998 -61.12992477]
[376.69458008 -48.78318787]
[367.63812256 -36.82270813]
[358.06503296 -25.27156830]
[347.99380493 -14.15207100]
[337.44387817 -3.48567533]
[326.43560791 6.70702744]
[314.99026489 16.40636444]
[303.12994385 25.59361076]
[290.87753296 34.25103378]
[278.25665283 42.36192322]
[265.29168701 49.91062164]
[252.00769043 56.88255692]
[238.43025208 63.26427460]
[224.58561707 69.04345703]
[210.50050354 74.20893860]
[196.20207214 78.75076294]
[181.71797180 82.66015625]
[167.07611084 85.92956543]
[152.30477905 88.55268860]
[137.43249512 90.52446747]
[122.48795319 91.84107971]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
