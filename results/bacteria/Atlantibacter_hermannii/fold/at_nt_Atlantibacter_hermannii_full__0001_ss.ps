%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:03:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________________________________________________CGGUACUUAAG_GCGGUCUGCCUUAAGAACAAA_GGACAAAGAACAGAAAGAAAAAAGCCCCGGC_____________________________________________________________________________________________________\
) } def
/len { sequence length } bind def

/coor [
[328.95498657 789.60943604]
[315.02050781 784.05133057]
[301.32431030 777.92950439]
[287.88922119 771.25408936]
[274.73757935 764.03625488]
[261.89129639 756.28796387]
[249.37173462 748.02215576]
[237.19975281 739.25256348]
[225.39559937 729.99383545]
[213.97892761 720.26129150]
[202.96873474 710.07116699]
[192.38333130 699.44042969]
[182.24035645 688.38677979]
[172.55668640 676.92864990]
[163.34843445 665.08502197]
[154.63093567 652.87567139]
[146.41868591 640.32092285]
[138.72537231 627.44165039]
[131.56378174 614.25933838]
[124.94583893 600.79583740]
[118.88256836 587.07360840]
[113.38404846 573.11547852]
[108.45944214 558.94470215]
[104.11693573 544.58483887]
[100.36376190 530.05981445]
[97.20616913 515.39379883]
[94.64941406 500.61117554]
[92.69774628 485.73657227]
[91.35441589 470.79473877]
[90.62166595 455.81054688]
[90.50070190 440.80892944]
[90.99173737 425.81488037]
[92.09394836 410.85333252]
[93.80551147 395.94918823]
[96.12356567 381.12725830]
[99.04425049 366.41223145]
[102.56271362 351.82855225]
[106.67310333 337.40054321]
[111.36856079 323.15219116]
[116.64128876 309.10723877]
[122.48249817 295.28900146]
[128.88247681 281.72055054]
[135.83056641 268.42443848]
[143.31520081 255.42277527]
[151.32394409 242.73722839]
[159.84342957 230.38891602]
[168.85949707 218.39836121]
[178.35714722 206.78553772]
[188.32055664 195.56977844]
[177.52200317 185.15867615]
[166.72344971 174.74755859]
[155.92489624 164.33644104]
[145.12634277 153.92533875]
[134.32780457 143.51422119]
[123.52924347 133.10310364]
[112.73069763 122.69199371]
[99.92151642 126.01905060]
[87.13264465 122.61478424]
[77.67265320 113.35990143]
[73.98891449 100.64870453]
[77.03444672 87.76969147]
[66.38916779 77.20190430]
[55.74389267 66.63411713]
[45.09861374 56.06633377]
[34.45333862 45.49855042]
[23.80805969 34.93076324]
[13.16278362 24.36297989]
[2.51750660 13.79519463]
[-8.12777042 3.22740936]
[-18.77304649 -7.34037542]
[-29.41832352 -17.90816116]
[-40.06360245 -28.47594452]
[-53.76765060 -21.99714661]
[-68.86141205 -20.59921837]
[-83.52223969 -24.45096779]
[-95.97976685 -33.08727646]
[-104.72968292 -45.46527100]
[-108.71540070 -60.09024429]
[-107.45561981 -75.19616699]
[-101.10247040 -88.95891571]
[-90.42311859 -99.71657562]
[-76.70715332 -106.17010498]
[-61.61083984 -107.54021454]
[-46.95713806 -103.66145325]
[-34.51554871 -95.00220490]
[-25.78845406 -82.60810852]
[-21.82969475 -67.97580719]
[-23.11731148 -52.87223816]
[-29.49581718 -39.12122345]
[-18.85054016 -28.55343819]
[-8.20526218 -17.98565292]
[2.44001460 -7.41786766]
[13.08529186 3.14991760]
[23.73056793 13.71770287]
[34.37584686 24.28548813]
[45.02112198 34.85327148]
[55.66640091 45.42105865]
[66.31167603 55.98884201]
[76.95695496 66.55662537]
[87.60222626 77.12441254]
[103.60226440 74.23139954]
[118.19560242 81.40114594]
[125.68346405 95.83384705]
[123.14180756 111.89344025]
[133.94035339 122.30455780]
[144.73890686 132.71566772]
[155.53746033 143.12678528]
[166.33601379 153.53788757]
[177.13456726 163.94900513]
[187.93312073 174.36012268]
[198.73167419 184.77124023]
[209.57606506 174.40484619]
[220.83425903 164.48941040]
[232.48751831 155.04144287]
[244.51646423 146.07664490]
[256.90106201 137.60995483]
[269.62066650 129.65545654]
[282.65417480 122.22640991]
[295.97982788 115.33515167]
[309.57550049 108.99316406]
[323.41851807 103.21100616]
[337.48587036 97.99829865]
[351.75415039 93.36371613]
[366.19958496 89.31497192]
[380.79812622 85.85881042]
[395.52551270 83.00097656]
[410.35720825 80.74623108]
[425.26852417 79.09832764]
[440.23461914 78.06000519]
[455.23065186 77.63299561]
[470.23159790 77.81800842]
[485.21252441 78.61473846]
[500.14846802 80.02185059]
[515.01458740 82.03701019]
[529.78619385 84.65686798]
[544.43859863 87.87705231]
[558.94744873 91.69220734]
[573.28863525 96.09598541]
[587.43829346 101.08105469]
[601.37280273 106.63912201]
[615.06903076 112.76093292]
[628.50415039 119.43629456]
[641.65576172 126.65410614]
[654.50207520 134.40234375]
[667.02166748 142.66812134]
[679.19366455 151.43768311]
[690.99786377 160.69641113]
[702.41455078 170.42892456]
[713.42480469 180.61900330]
[724.01019287 191.24969482]
[734.15319824 202.30329895]
[743.83691406 213.76142883]
[753.04516602 225.60501099]
[761.76275635 237.81431580]
[769.97503662 250.36904907]
[777.66839600 263.24829102]
[784.83001709 276.43063354]
[791.44799805 289.89410400]
[797.51129150 303.61633301]
[803.00982666 317.57443237]
[807.93450928 331.74517822]
[812.27703857 346.10504150]
[816.03027344 360.63006592]
[819.18786621 375.29608154]
[821.74468994 390.07867432]
[823.69641113 404.95327759]
[825.03979492 419.89511108]
[825.77258301 434.87930298]
[825.89355469 449.88088989]
[825.40258789 464.87496948]
[824.30041504 479.83651733]
[822.58886719 494.74066162]
[820.27087402 509.56259155]
[817.35021973 524.27764893]
[813.83178711 538.86132812]
[809.72143555 553.28930664]
[805.02606201 567.53771973]
[799.75335693 581.58270264]
[793.91217041 595.40093994]
[787.51226807 608.96942139]
[780.56420898 622.26556396]
[773.07958984 635.26721191]
[765.07092285 647.95275879]
[756.55145264 660.30114746]
[747.53540039 672.29168701]
[738.03778076 683.90454102]
[728.07440186 695.12036133]
[717.66186523 705.92041016]
[706.81744385 716.28674316]
[695.55920410 726.20214844]
[683.90588379 735.65008545]
[671.87695312 744.61486816]
[659.49230957 753.08148193]
[646.77270508 761.03594971]
[633.73919678 768.46496582]
[620.41345215 775.35620117]
[606.81781006 781.69812012]
[592.97473145 787.48028564]
[578.90740967 792.69293213]
[564.63909912 797.32745361]
[550.19366455 801.37615967]
[535.59509277 804.83227539]
[520.86773682 807.69006348]
[506.03601074 809.94476318]
[491.12469482 811.59265137]
[476.15856934 812.63092041]
[461.16256714 813.05792236]
[446.16162109 812.87286377]
[431.18069458 812.07604980]
[416.24475098 810.66888428]
[401.37860107 808.65368652]
[386.60705566 806.03381348]
[371.95465088 802.81359863]
[357.44577026 798.99841309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
] def

init

% Start Annotations
49 111 0.0 0.2 colorpair
50 110 0.0 0.2 colorpair
51 109 0.16 1 colorpair
52 108 0.0 0.2 colorpair
53 107 0.16 1 colorpair
54 106 0.16 1 colorpair
55 105 0.16 1 colorpair
56 104 0.0 1 colorpair
61 100 0.0 0.2 colorpair
62 99 0.0 0.2 colorpair
63 98 0.0 0.2 colorpair
64 97 0.0 0.2 colorpair
65 96 0.0 1 colorpair
66 95 0.0 1 colorpair
67 94 0.16 1 colorpair
68 93 0.0 1 colorpair
69 92 0.0 0.2 colorpair
70 91 0.16 1 colorpair
71 90 0.0 1 colorpair
72 89 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
49 111 2 gmark
50 110 2 gmark
51 cmark
109 cmark
52 108 2 gmark
53 cmark
107 cmark
54 cmark
105 cmark
61 100 2 gmark
62 99 2 gmark
63 98 2 gmark
64 97 2 gmark
94 cmark
69 92 2 gmark
70 cmark
91 cmark
89 cmark

% End Annotations
showpage
end
%%EOF
