%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 17:03:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AU_AAGCCACUACGCUAAACGUGUGCGGGGUUAAGAGAUAGCCGCGGAACAAUACAAAUAUUGCCCGGAGCUAAUCGCGGUCUGCCCCGCG_AAAUAAGUACAAAAAACAGAAAGCAGGAAGCACC____________________________\
) } def
/len { sequence length } bind def

/coor [
[73.61476898 258.13955688]
[77.07440948 243.50392151]
[83.02311707 229.69146729]
[91.28011322 217.12194824]
[101.59448242 206.17730713]
[113.65278625 197.19018555]
[106.91073608 183.79075623]
[100.16868591 170.39131165]
[93.42664337 156.99188232]
[86.68459320 143.59245300]
[79.94254303 130.19302368]
[85.54570007 144.10720825]
[87.85221863 158.92881775]
[86.74225616 173.88769531]
[82.27348328 188.20655823]
[74.67810822 201.14140320]
[64.35078430 212.02012634]
[51.82812881 220.27743530]
[37.76083755 225.48428345]
[22.87985802 227.37013245]
[7.95841646 225.83697510]
[-6.22815418 220.96447754]
[-18.94270706 213.00582886]
[-29.52458191 202.37455750]
[-37.42393494 189.62307739]
[-42.23030853 175.41397095]
[-43.69396210 160.48554993]
[-41.73883820 145.61351013]
[-36.46652985 131.57061768]
[-28.15098763 119.08655548]
[-17.22430038 108.81000519]
[-4.25422287 101.27494812]
[10.08530426 96.87290955]
[25.04918861 95.83261871]
[39.85988998 98.20814514]
[53.74783325 103.87603760]
[65.99055481 112.54105377]
[54.51075363 102.88630676]
[43.03095245 93.23155975]
[31.55115128 83.57681274]
[20.07134819 73.92206573]
[8.59154510 64.26731873]
[-2.88825727 54.61257172]
[-14.36806011 44.95782471]
[-25.84786224 35.30307770]
[-37.32766342 25.64833069]
[-48.80746841 15.99358273]
[-60.28726959 6.33883667]
[-71.76707458 -3.31591034]
[-85.44373322 3.38251448]
[-100.66271210 3.93254399]
[-114.78723145 -1.76111817]
[-125.37013245 -12.71201038]
[-130.57786560 -27.02282333]
[-129.50816345 -42.21412659]
[-122.34635162 -55.65392685]
[-110.33325195 -65.01370239]
[-95.55021667 -68.67182159]
[-80.55849457 -65.99448395]
[-67.95549011 -57.44555283]
[-59.92475128 -44.50619125]
[-57.85765076 -29.41821671]
[-62.11232376 -14.79571247]
[-50.63252258 -5.14096594]
[-39.15272141 4.51378059]
[-27.67291832 14.16852760]
[-16.19311523 23.82327461]
[-4.71331310 33.47801971]
[6.76648951 43.13276672]
[18.24629211 52.78751373]
[29.72609520 62.44226074]
[41.20589828 72.09700775]
[52.68569946 81.75175476]
[64.16550446 91.40650177]
[75.64530182 101.06124878]
[87.23545837 81.99401093]
[107.34941101 81.65209961]
[117.79356384 70.88549042]
[128.23771667 60.11888885]
[138.68185425 49.35228729]
[149.12600708 38.58568192]
[159.57015991 27.81907845]
[170.01431274 17.05247498]
[180.45845032 6.28587103]
[190.90260315 -4.48073292]
[201.34675598 -15.24733639]
[211.79090881 -26.01394081]
[222.23504639 -36.78054428]
[215.59843445 -50.40886307]
[214.02629089 -65.48547363]
[217.70848083 -80.18980408]
[226.20036316 -92.74623108]
[238.47648621 -101.63850403]
[253.05445862 -105.79284668]
[268.17391968 -104.70759583]
[282.00909424 -98.51379395]
[292.88937378 -87.95938873]
[299.50088501 -74.31886292]
[301.04522705 -59.23937988]
[297.33593750 -44.54186249]
[288.82095337 -32.00110245]
[276.52844238 -23.13146591]
[261.94284058 -19.00399780]
[246.82540894 -20.11711311]
[233.00164795 -26.33639526]
[222.55751038 -15.56979179]
[212.11335754 -4.80318785]
[201.66920471 5.96341610]
[191.22506714 16.73002052]
[180.78091431 27.49662399]
[170.33676147 38.26322556]
[159.89260864 49.02983093]
[149.44847107 59.79643631]
[139.00431824 70.56304169]
[128.56016541 81.32964325]
[118.11602020 92.09624481]
[120.67079163 100.83500671]
[119.04559326 110.21104431]
[113.21843719 118.24819183]
[104.08677673 123.09648895]
[93.34197998 123.45097351]
[100.08402252 136.85040283]
[106.82607269 150.24983215]
[113.56812286 163.64927673]
[120.31017303 177.04870605]
[127.05221558 190.44813538]
[141.45524597 186.12100220]
[156.39086914 184.36085510]
[171.40522766 185.22119141]
[186.04205322 188.67585754]
[199.85652161 194.61985779]
[212.42886353 202.87258911]
[223.37699890 213.18322754]
[232.36824036 225.23847961]
[239.12933350 238.67196655]
[243.45481873 253.07548523]
[245.21327209 268.01132202]
[244.35124207 283.02557373]
[240.89492798 297.66198730]
[234.94934082 311.47579956]
[226.69519043 324.04721069]
[216.38331604 334.99417114]
[204.32704163 343.98403931]
[190.89279175 350.74359131]
[176.48878479 355.06747437]
[161.55274963 356.82421875]
[146.53858948 355.96047974]
[131.90255737 352.50250244]
[118.08942413 346.55535889]
[105.51895905 338.29980469]
[94.57316589 327.98666382]
[85.58466339 315.92938232]
[78.82661438 302.49435425]
[74.50438690 288.08987427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 126]
[7 125]
[8 124]
[9 123]
[10 122]
[11 121]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[77 116]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
] def

init

% Start Annotations
6 126 0.0 1 colorpair
7 125 0.0 0.2 colorpair
8 124 0.0 0.2 colorpair
9 123 0.16 1 colorpair
10 122 0.0 1 colorpair
11 121 0.16 1 colorpair
37 75 0.0 1 colorpair
38 74 0.16 1 colorpair
39 73 0.0 0.2 colorpair
40 72 0.16 1 colorpair
41 71 0.0 0.2 colorpair
42 70 0.0 0.2 colorpair
43 69 0.16 1 colorpair
44 68 0.16 1 colorpair
45 67 0.0 0.2 colorpair
46 66 0.16 1 colorpair
47 65 0.0 0.2 colorpair
48 64 0.16 1 colorpair
49 63 0.16 1 colorpair
77 116 0.0 0.2 colorpair
78 115 0.0 0.2 colorpair
79 114 0.0 0.2 colorpair
80 113 0.0 0.2 colorpair
81 112 0.0 1 colorpair
82 111 0.0 1 colorpair
83 110 0.16 1 colorpair
84 109 0.0 1 colorpair
85 108 0.0 0.2 colorpair
86 107 0.16 1 colorpair
87 106 0.0 0.2 colorpair
88 105 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
7 125 2 gmark
8 124 2 gmark
9 cmark
123 cmark
121 cmark
38 cmark
74 cmark
39 73 2 gmark
40 cmark
41 71 2 gmark
42 70 2 gmark
43 cmark
69 cmark
44 cmark
68 cmark
45 67 2 gmark
66 cmark
47 65 2 gmark
48 cmark
64 cmark
49 cmark
63 cmark
77 116 2 gmark
78 115 2 gmark
79 114 2 gmark
80 113 2 gmark
110 cmark
85 108 2 gmark
86 cmark
107 cmark
87 106 2 gmark
88 105 2 gmark

% End Annotations
showpage
end
%%EOF
