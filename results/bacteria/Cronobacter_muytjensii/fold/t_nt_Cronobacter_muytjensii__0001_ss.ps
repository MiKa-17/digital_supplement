%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 18:59:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAGAGGCUGCGCUGAUGGGGUCCAGGCAUCAGUAGGCCUCGUGGGUUAAUUGAAAAAUUACCUUCGGGGCUUUCUUCUUUCUGCCUCACCACAUUUUGCAUUUCUGCCGACCGCAGGAGGCAAAAAGCCUCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[242.73500061 309.56509399]
[233.49427795 297.74948120]
[224.25354004 285.93386841]
[215.01280212 274.11825562]
[208.36190796 270.76062012]
[205.70181274 261.93746948]
[196.72473145 249.92033386]
[187.74763489 237.90318298]
[178.77055359 225.88603210]
[172.19555664 222.38209534]
[169.73129272 213.50225830]
[161.02226257 201.28945923]
[152.31321716 189.07666016]
[143.60417175 176.86386108]
[131.68365479 174.53417969]
[124.33668518 164.36206055]
[125.97283173 151.51603699]
[117.53608704 139.11357117]
[109.09934998 126.71109009]
[100.66261292 114.30860901]
[88.15650940 108.05649567]
[86.93491364 94.12812805]
[78.49817657 81.72565460]
[70.06143188 69.32317352]
[57.51236343 66.12659454]
[50.74981689 55.55693054]
[52.96140289 43.61394119]
[44.80109787 31.02786064]
[36.64079285 18.44178009]
[28.48048592 5.85570097]
[20.32017899 -6.73037910]
[-0.42753303 -9.63964462]
[-12.25959206 -26.57753181]
[-7.97346258 -46.49346542]
[-17.21419525 -58.30908585]
[-31.81050873 -64.41304016]
[-33.55639648 -79.20496368]
[-42.79712677 -91.02058411]
[-52.03786087 -102.83620453]
[-61.27859116 -114.65182495]
[-70.51932526 -126.46744537]
[-79.76005554 -138.28306580]
[-89.00078583 -150.09867859]
[-98.24152374 -161.91430664]
[-112.83783722 -168.01824951]
[-114.58372498 -182.81018066]
[-123.82445526 -194.62580872]
[-133.06518555 -206.44142151]
[-142.30592346 -218.25703430]
[-150.12199402 -223.13894653]
[-151.61691284 -230.43780518]
[-160.59400940 -242.45495605]
[-169.57109070 -254.47210693]
[-178.54817200 -266.48925781]
[-193.82205200 -272.45922852]
[-196.02099609 -288.71029663]
[-182.88293457 -298.52471924]
[-167.92315674 -291.80630493]
[-166.53102112 -275.46633911]
[-157.55393982 -263.44918823]
[-148.57684326 -251.43203735]
[-139.59976196 -239.41488647]
[-130.49029541 -227.49777222]
[-121.24956512 -215.68215942]
[-112.00883484 -203.86653137]
[-102.76810455 -192.05091858]
[-88.83274841 -186.79209900]
[-86.42590332 -171.15502930]
[-77.18517303 -159.33941650]
[-67.94443512 -147.52378845]
[-58.70370483 -135.70817566]
[-49.46297455 -123.89255524]
[-40.22224045 -112.07693481]
[-30.98150826 -100.26131439]
[-21.74077606 -88.44569397]
[-7.80542231 -83.18688202]
[-5.39857531 -67.54981995]
[3.84215689 -55.73419952]
[13.20029545 -57.53770828]
[22.62160492 -55.75442505]
[30.77169037 -50.59323502]
[36.48014832 -42.74449921]
[38.90858459 -33.28796387]
[37.67352295 -23.54430771]
[32.90625763 -14.89068508]
[41.06656647 -2.30460525]
[49.22687149 10.28147507]
[57.38717651 22.86755371]
[65.54748535 35.45363617]
[81.56930542 42.53069687]
[82.46391296 60.88643646]
[90.90065002 73.28890991]
[99.33738708 85.69139099]
[111.84349060 91.94350433]
[113.06508636 105.87187195]
[121.50182343 118.27434540]
[129.93856812 130.67681885]
[138.37530518 143.07929993]
[155.11943054 150.65347290]
[155.81697083 168.15481567]
[164.52601624 180.36761475]
[173.23506165 192.58041382]
[181.94410706 204.79322815]
[190.78770447 216.90893555]
[199.76478577 228.92608643]
[208.74188232 240.94325256]
[217.71896362 252.96040344]
[226.82843018 264.87750244]
[236.06915283 276.69314575]
[245.30989075 288.50875854]
[254.55062866 300.32437134]
[269.94979858 299.91058350]
[282.49328613 308.54275513]
[287.48953247 322.73788452]
[283.22018433 336.98254395]
[292.46090698 348.79818726]
[301.70162964 360.61380005]
[317.14190674 362.67187500]
[326.34500122 374.78622437]
[324.28781128 389.49349976]
[333.52853394 401.30911255]
[342.76925659 413.12472534]
[352.01000977 424.94033813]
[361.25073242 436.75595093]
[376.93655396 440.12268066]
[383.95498657 454.54910278]
[376.92211914 468.96847534]
[361.23294067 472.31948853]
[348.92285156 462.03155518]
[349.43511963 445.99670410]
[340.19436646 434.18109131]
[330.95364380 422.36544800]
[321.71292114 410.54983521]
[312.47216797 398.73422241]
[297.70257568 397.18682861]
[288.16284180 385.33575439]
[289.88601685 369.85452271]
[280.64529419 358.03890991]
[271.40454102 346.22329712]
[256.55084229 346.93432617]
[243.97795105 338.66476440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[6 107]
[7 106]
[8 105]
[9 104]
[11 103]
[12 102]
[13 101]
[14 100]
[17 98]
[18 97]
[19 96]
[20 95]
[22 93]
[23 92]
[24 91]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[34 78]
[35 77]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[46 66]
[47 65]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
[115 139]
[116 138]
[117 137]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
] def

init

% Start Annotations
1 111 0.0 1 colorpair
2 110 0.0 1 colorpair
3 109 0.0 1 colorpair
4 108 0.0 1 colorpair
6 107 0.0 1 colorpair
7 106 0.0 1 colorpair
8 105 0.0 1 colorpair
9 104 0.0 1 colorpair
11 103 0.0 1 colorpair
12 102 0.0 1 colorpair
13 101 0.0 1 colorpair
14 100 0.0 1 colorpair
17 98 0.0 1 colorpair
18 97 0.0 1 colorpair
19 96 0.0 1 colorpair
20 95 0.0 1 colorpair
22 93 0.0 1 colorpair
23 92 0.0 1 colorpair
24 91 0.0 1 colorpair
27 89 0.0 1 colorpair
28 88 0.0 1 colorpair
29 87 0.0 1 colorpair
30 86 0.0 1 colorpair
31 85 0.0 1 colorpair
34 78 0.0 1 colorpair
35 77 0.0 1 colorpair
37 75 0.0 1 colorpair
38 74 0.0 1 colorpair
39 73 0.0 1 colorpair
40 72 0.0 1 colorpair
41 71 0.0 1 colorpair
42 70 0.0 1 colorpair
43 69 0.0 1 colorpair
44 68 0.0 1 colorpair
46 66 0.0 1 colorpair
47 65 0.0 1 colorpair
48 64 0.0 1 colorpair
49 63 0.0 1 colorpair
51 62 0.0 1 colorpair
52 61 0.0 1 colorpair
53 60 0.0 1 colorpair
54 59 0.0 1 colorpair
115 139 0.0 1 colorpair
116 138 0.0 1 colorpair
117 137 0.0 1 colorpair
120 134 0.0 1 colorpair
121 133 0.0 1 colorpair
122 132 0.0 1 colorpair
123 131 0.0 1 colorpair
124 130 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
