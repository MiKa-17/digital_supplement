%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Fri Mar  6 20:14:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACUGUCUUUGAAGCAUUGAUGCUUGCGAUUGCUUUCGCAACAUUAAUUGUCAAAAUCAGU_______________AAUAAAAACGACAA___AAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[257.30694580 382.82046509]
[244.83938599 374.46286011]
[233.14768982 365.05044556]
[222.32083130 354.65484619]
[212.44122314 343.35516357]
[203.58404541 331.23742676]
[195.81672668 318.39382935]
[189.19836426 304.92211914]
[183.77932739 290.92486572]
[179.60086060 276.50854492]
[176.69477844 261.78292847]
[175.08319092 246.86006165]
[174.77835083 231.85351562]
[175.78260803 216.87750244]
[178.08828735 202.04600525]
[181.67785645 187.47190857]
[186.52398682 173.26612854]
[192.58981323 159.53677368]
[179.44961548 152.30244446]
[166.30943298 145.06813049]
[153.16923523 137.83380127]
[140.02905273 130.59948730]
[126.88885498 123.36516571]
[113.74867249 116.13084412]
[101.98228455 121.10214233]
[89.49592590 118.40908051]
[80.82467651 109.02978516]
[79.11797333 96.37084198]
[66.20451355 88.73915863]
[53.29105377 81.10747528]
[39.10612488 87.39773560]
[23.94003677 84.11605072]
[13.62446308 72.52430725]
[12.12595272 57.07975769]
[20.02071190 43.72114944]
[34.27304459 37.58514023]
[49.40264130 41.03115082]
[59.59185791 52.73411942]
[60.92273712 68.19401550]
[73.83619690 75.82569885]
[86.74965668 83.45738220]
[102.54916382 78.95880890]
[116.81733704 87.10012054]
[120.98299408 102.99065399]
[134.12318420 110.22497559]
[147.26336670 117.45929718]
[160.40356445 124.69361877]
[173.54374695 131.92793274]
[186.68394470 139.16226196]
[199.82412720 146.39659119]
[208.18119812 133.92866516]
[217.59312439 122.23657990]
[227.98826599 111.40928650]
[239.28752136 101.52920532]
[251.40490723 92.67152405]
[264.24816895 84.90365601]
[277.71960449 78.28472137]
[291.71664429 72.86509705]
[306.13275146 68.68603516]
[320.85827637 65.77932739]
[335.78106689 64.16710663]
[350.78759766 63.86164474]
[365.76364136 64.86525726]
[380.59524536 67.17031860]
[395.16949463 70.75926971]
[409.37548828 75.60480499]
[423.10510254 81.67005157]
[436.25384521 88.90883636]
[448.72161865 97.26608276]
[460.41357422 106.67816925]
[471.24072266 117.07347107]
[481.12066650 128.37286377]
[489.97817993 140.49037170]
[497.74584961 153.33375549]
[504.36459351 166.80526733]
[509.78402710 180.80236816]
[513.96289062 195.21856689]
[516.86938477 209.94410706]
[518.48138428 224.86692810]
[518.78668213 239.87347412]
[517.78283691 254.84950256]
[515.47753906 269.68106079]
[511.88839722 284.25527954]
[507.04266357 298.46118164]
[500.97723389 312.19070435]
[493.73825073 325.33935547]
[485.38082886 337.80703735]
[475.96859741 349.49884033]
[465.57315063 360.32586670]
[454.27359009 370.20562744]
[442.15597534 379.06295776]
[429.31250000 386.83047485]
[415.84088135 393.44903564]
[401.84368896 398.86825562]
[387.42745972 403.04690552]
[372.70187378 405.95321655]
[357.77902222 407.56500244]
[342.77246094 407.87005615]
[327.79644775 406.86602783]
[312.96493530 404.56054688]
[298.39077759 400.97119141]
[284.18490601 396.12524414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[28 41]
[29 40]
[30 39]
] def

init

% Start Annotations
18 50 0.16 0.6 colorpair
19 49 0.16 0.6 colorpair
20 48 0.16 0.6 colorpair
21 47 0.0 0.6 colorpair
22 46 0.16 0.6 colorpair
23 45 0.16 0.6 colorpair
24 44 0.16 0.6 colorpair
28 41 0.16 0.6 colorpair
29 40 0.0 0.6 colorpair
30 39 0.16 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
18 50 1 gmark
18 cmark
19 49 1 gmark
49 cmark
20 48 1 gmark
48 cmark
21 47 1 gmark
22 46 1 gmark
22 cmark
23 45 1 gmark
45 cmark
24 44 1 gmark
24 cmark
44 cmark
28 41 1 gmark
41 cmark
29 40 1 gmark
30 39 1 gmark
30 cmark
39 cmark

% End Annotations
showpage
end
%%EOF
