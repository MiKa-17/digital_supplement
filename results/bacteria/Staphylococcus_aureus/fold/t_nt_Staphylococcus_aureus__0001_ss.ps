%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Mon Mar  9 06:03:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGCAUUACUGAAAUCUUUAGAAAGGAGACGCCUA_____________AUGAUUACAAUUAGUACCAUGUUGCAGUUUGGUUUAUUCCUUAUUGCAUUGAUAGGUCUAGUAAUCAAGCUUAUUGAAUUAAGCAAUAAAA_AAUAA\
) } def
/len { sequence length } bind def

/coor [
[57.47700500 180.25355530]
[60.89896774 165.64909363]
[68.83618927 152.92115784]
[80.44201660 143.42407227]
[86.29144287 129.61160278]
[92.14086914 115.79914093]
[80.38546753 125.11635590]
[68.63005829 134.43357849]
[83.60606384 135.28169250]
[96.32772064 143.22898865]
[103.65812683 156.31581116]
[103.78975677 171.31523132]
[96.69014740 184.52870178]
[84.10992432 192.69802856]
[69.15111542 193.80883789]
[55.50224686 187.58723450]
[46.52886200 175.56730652]
[44.44361115 160.71296692]
[49.75997543 146.68795776]
[36.46691895 153.63739014]
[23.17386627 160.58683777]
[9.88081360 167.53627014]
[-3.41224051 174.48571777]
[-9.56253433 189.30305481]
[-25.02100372 193.59434509]
[-37.92923737 184.06770325]
[-38.38513565 168.03112793]
[-26.03898048 157.78651428]
[-10.36168098 161.19265747]
[2.93137264 154.24322510]
[16.22442627 147.29377747]
[29.51748085 140.34434509]
[42.81053543 133.39489746]
[48.05171204 124.69250488]
[59.31284714 122.67816925]
[71.06824493 113.36095428]
[82.82364655 104.04373932]
[69.34150696 110.61883545]
[54.43937302 112.32949066]
[39.81801987 108.98046112]
[27.14617920 100.95397186]
[17.87009048 89.16609192]
[13.04843140 74.96216583]
[13.23149681 59.96327972]
[18.39839363 45.88126373]
[27.95942497 34.32329178]
[40.82339096 26.60847664]
[55.52212906 23.61730766]
[70.37807465 25.69116592]
[83.69571686 32.59336090]
[93.95512390 43.53615189]
[99.98538208 57.27063370]
[101.09826660 72.22929382]
[97.16568756 86.70719147]
[104.11512756 73.41413879]
[111.06456757 60.12108612]
[118.01400757 46.82802963]
[124.96344757 33.53497696]
[131.91288757 20.24192238]
[138.86233521 6.94886971]
[138.62931824 1.60114563]
[140.33908081 -2.83202338]
[143.30136108 -5.75485039]
[146.68847656 -6.94030237]
[154.45887756 -19.77076530]
[162.22929382 -32.60123062]
[164.01802063 -41.62790680]
[170.29916382 -45.61661911]
[178.33657837 -58.28153610]
[186.37397766 -70.94645691]
[177.87574768 -86.26409912]
[178.26344299 -103.68833923]
[187.34182739 -118.46186829]
[202.55505371 -126.59620667]
[219.70559692 -125.94833374]
[227.20559692 -138.93872070]
[234.70559692 -151.92909241]
[242.20559692 -164.91947937]
[249.70559692 -177.90986633]
[257.20559692 -190.90023804]
[253.33720398 -205.98908997]
[261.12832642 -219.05633545]
[275.53707886 -222.65127563]
[283.03707886 -235.64166260]
[278.70504761 -250.84063721]
[286.46203613 -264.61035156]
[301.70596313 -268.78143311]
[315.39288330 -260.87930298]
[319.40258789 -245.59210205]
[311.35617065 -231.98950195]
[296.02746582 -228.14166260]
[288.52746582 -215.15127563]
[292.61853027 -200.87547302]
[285.19750977 -187.59452820]
[270.19598389 -183.40023804]
[262.69598389 -170.40986633]
[255.19598389 -157.41947937]
[247.69598389 -144.42909241]
[240.19598389 -131.43872070]
[232.69598389 -118.44833374]
[240.18902588 -108.18695831]
[243.23352051 -95.80285645]
[241.33848572 -83.14419556]
[234.75276184 -72.11406708]
[224.43315125 -64.38440704]
[211.90544128 -61.14257050]
[199.03889465 -62.90905380]
[191.00149536 -50.24413300]
[182.96409607 -37.57921600]
[175.05975342 -24.83082581]
[167.28935242 -12.00036144]
[159.51893616 0.83010286]
[152.15538025 13.89830971]
[145.20594788 27.19136429]
[138.25650024 40.48441696]
[131.30706787 53.77746964]
[124.35762024 67.07052612]
[117.40818024 80.36357880]
[110.45874023 93.65663147]
[117.93928528 96.56864166]
[123.95808411 104.04373932]
[135.71348572 113.36095428]
[147.46888733 122.67816925]
[159.22428894 131.99539185]
[170.97969055 141.31260681]
[186.64845276 139.24736023]
[199.13726807 148.93266296]
[201.03674316 164.62239075]
[191.21994019 177.00810242]
[175.51100159 178.74159241]
[163.22976685 168.79438782]
[161.66247559 153.06800842]
[149.90707397 143.75079346]
[138.15167236 134.43357849]
[126.39627075 125.11635590]
[114.64086914 115.79914093]
[120.49028778 129.61160278]
[126.33971405 143.42407227]
[137.94799805 152.92395020]
[145.88420105 165.65254211]
[149.30497742 180.25726318]
[147.84684753 195.18623352]
[141.66474915 208.85304260]
[131.41561890 219.80545044]
[118.18852234 226.87962341]
[103.38900757 229.32385254]
[88.58968353 226.87841797]
[75.36316681 219.80317688]
[65.11491394 208.84994507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 114]
[60 113]
[64 112]
[65 111]
[66 110]
[68 109]
[69 108]
[70 107]
[75 100]
[76 99]
[77 98]
[78 97]
[79 96]
[80 95]
[83 92]
[84 91]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
] def

init

% Start Annotations
6 37 0.0 1 colorpair
7 36 0.0 1 colorpair
8 35 0.0 1 colorpair
19 33 0.0 1 colorpair
20 32 0.0 1 colorpair
21 31 0.0 1 colorpair
22 30 0.0 1 colorpair
23 29 0.0 1 colorpair
54 119 0.16 1 colorpair
55 118 0.0 1 colorpair
56 117 0.16 1 colorpair
57 116 0.0 0.2 colorpair
58 115 0.0 0.2 colorpair
59 114 0.16 1 colorpair
60 113 0.0 1 colorpair
64 112 0.0 0.2 colorpair
65 111 0.0 1 colorpair
66 110 0.16 0.6 colorpair
68 109 0.0 0.2 colorpair
69 108 0.16 0.6 colorpair
70 107 0.0 0.2 colorpair
75 100 0.16 0.2 colorpair
76 99 0.0 0.2 colorpair
77 98 0.0 0.2 colorpair
78 97 0.16 1 colorpair
79 96 0.0 0.2 colorpair
80 95 0.16 1 colorpair
83 92 0.0 0.2 colorpair
84 91 0.16 1 colorpair
121 136 0.16 1 colorpair
122 135 0.16 0.2 colorpair
123 134 0.0 1 colorpair
124 133 0.0 1 colorpair
125 132 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
119 cmark
56 cmark
57 116 2 gmark
58 115 2 gmark
59 cmark
64 112 2 gmark
66 110 1 gmark
66 cmark
110 cmark
68 109 2 gmark
69 108 1 gmark
69 cmark
70 107 2 gmark
75 100 2 gmark
100 cmark
76 99 2 gmark
77 98 2 gmark
78 cmark
79 96 2 gmark
95 cmark
83 92 2 gmark
91 cmark
121 cmark
136 cmark
122 135 2 gmark
122 cmark
125 cmark

% End Annotations
showpage
end
%%EOF
